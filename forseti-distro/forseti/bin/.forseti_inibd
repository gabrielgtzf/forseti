/*
    Forseti, El ERP Gratuito para PyMEs
    Copyright (C) 2015 Gabriel Guti√©rrez Fuentes.

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

CREATE OR REPLACE FUNCTION getlevelaccount(_account character)
  RETURNS smallint AS
$BODY$  
DECLARE _res smallint;
BEGIN
	if (substring(_Account, 5, 3)) = '000'
	then	
		_res = 1;
	elsif(substring(_Account, 8, 3)) = '000'
	then	
		_res = 2;
	elsif(substring(_Account, 11, 3)) = '000'
	then	
		_res = 3;
	elsif(substring(_Account, 14, 3)) = '000'
	then	
		_res = 4;
	elsif(substring(_Account, 17, 3)) = '000'
	then	
		_res = 5;
	else 
		_res = 6;
	end if;
	
	return _res;
END
$BODY$
  LANGUAGE 'plpgsql';

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION getchar19account(_account character varying)
  RETURNS character varying AS
$BODY$  
DECLARE _cuenta character varying(4); _res character varying(19);
BEGIN
	_cuenta := substring(_Account, 1, 4);
	_res := _cuenta;

	_cuenta := substring(_Account, 6 , 3);
	--raise notice 'L2:%', _cuenta;
	if _cuenta <> ''
	then
		_res := _res || _cuenta;
		_cuenta := substring(_Account, 10 , 3);
		--raise notice 'L3%', _cuenta;
		if _cuenta <> ''
		then
			_res := _res || _cuenta;
			_cuenta := substring(_Account, 14 , 3);
			--raise notice 'L4%', _cuenta;
			if _cuenta <> ''
			then
				_res := _res || _cuenta;
				_cuenta := substring(_Account, 18 , 3);
				--raise notice 'L5%', _cuenta;
				if _cuenta <> ''
				then
					_res := _res || _cuenta;
					_cuenta := substring(_Account, 22 , 3);
					--raise notice 'L6%', _cuenta;
					if _cuenta <> ''
					then
						_res := _res || _cuenta;
					else
						_res := _res || '000';
					end if;
				else
					_res := _res || '000000';
				end if;
			else
				_res := _res || '000000000';
			end if;
		else
			_res := _res || '000000000000';
		end if;
	else
		_res := _res || '000000000000000';
	end if;

	return _res;
END
$BODY$
  LANGUAGE plpgsql;
--ALTER FUNCTION getchar19account(character varying)

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION getchar19lastaccount(_account character varying)
  RETURNS character varying AS
$BODY$  
DECLARE _cuenta character varying(4); _res character varying(19);
BEGIN
	_cuenta := substring(_Account, 1, 4);
	_res := _cuenta;

	_cuenta := substring(_Account, 6 , 3);
	--raise notice 'L2:%', _cuenta;
	if _cuenta <> '' and _cuenta <> '000'
	then
		_res := _res || _cuenta;
		_cuenta := substring(_Account, 10 , 3);
		--raise notice 'L3%', _cuenta;
		if _cuenta <> '' and _cuenta <> '000'
		then
			_res := _res || _cuenta;
			_cuenta := substring(_Account, 14 , 3);
			--raise notice 'L4%', _cuenta;
			if _cuenta <> '' and _cuenta <> '000'
			then
				_res := _res || _cuenta;
				_cuenta := substring(_Account, 18 , 3);
				--raise notice 'L5%', _cuenta;
				if _cuenta <> '' and _cuenta <> '000'
				then
					_res := _res || _cuenta;
					_cuenta := substring(_Account, 22 , 3);
					--raise notice 'L6%', _cuenta;
					if _cuenta <> '' and _cuenta <> '000'
					then
						_res := _res || _cuenta;
					else
						_res := _res || '999';
					end if;
				else
					_res := _res || '999999';
				end if;
			else
				_res := _res || '999999999';
			end if;
		else
			_res := _res || '999999999999';
		end if;
	else
		_res := _res || '999999999999999';
	end if;

	return _res;
END
$BODY$
  LANGUAGE plpgsql;
--ALTER FUNCTION getchar19lastaccount(character varying)

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION getmeslargo(_mes integer)
  RETURNS character varying AS
$BODY$  
BEGIN
	if _Mes = 1 
	then 
		return (select msj4 from tbl_msj m where m.alc = 'GLB' and m.mod = 'GLB' and m.sub = 'GLB' and m.elm = 'ENE');
	elsif _Mes = 2 
	then 
		return (select msj4 from tbl_msj m where m.alc = 'GLB' and m.mod = 'GLB' and m.sub = 'GLB' and m.elm = 'FEB');
	elsif _Mes = 3 
	then 
		return (select msj4 from tbl_msj m where m.alc = 'GLB' and m.mod = 'GLB' and m.sub = 'GLB' and m.elm = 'MAR');
	elsif _Mes = 4 
	then 
		return (select msj4 from tbl_msj m where m.alc = 'GLB' and m.mod = 'GLB' and m.sub = 'GLB' and m.elm = 'ABR');
	elsif _Mes = 5
	then 
		return (select msj4 from tbl_msj m where m.alc = 'GLB' and m.mod = 'GLB' and m.sub = 'GLB' and m.elm = 'MAY');
	elsif _Mes = 6 
	then 
		return (select msj4 from tbl_msj m where m.alc = 'GLB' and m.mod = 'GLB' and m.sub = 'GLB' and m.elm = 'JUN');
	elsif _Mes = 7 
	then 
		return (select msj4 from tbl_msj m where m.alc = 'GLB' and m.mod = 'GLB' and m.sub = 'GLB' and m.elm = 'JUL');
	elsif _Mes = 8 
	then 
		return (select msj4 from tbl_msj m where m.alc = 'GLB' and m.mod = 'GLB' and m.sub = 'GLB' and m.elm = 'AGO');
	elsif _Mes = 9 
	then 
		return (select msj4 from tbl_msj m where m.alc = 'GLB' and m.mod = 'GLB' and m.sub = 'GLB' and m.elm = 'SEP');
	elsif _Mes = 10 
	then 
		return (select msj4 from tbl_msj m where m.alc = 'GLB' and m.mod = 'GLB' and m.sub = 'GLB' and m.elm = 'OCT');
	elsif _Mes = 11 
	then 
		return (select msj4 from tbl_msj m where m.alc = 'GLB' and m.mod = 'GLB' and m.sub = 'GLB' and m.elm = 'NOV');
	elsif _Mes = 12 
	then 
		return (select msj4 from tbl_msj m where m.alc = 'GLB' and m.mod = 'GLB' and m.sub = 'GLB' and m.elm = 'DIC');
	elsif _Mes = 13 
	then 
		return (select msj4 from tbl_msj m where m.alc = 'GLB' and m.mod = 'GLB' and m.sub = 'GLB' and m.elm = 'ESP');
	else
		return ('Err: mes ' + cast(Mes as varchar))::varchar;
	end if;
END
$BODY$
  LANGUAGE plpgsql;
--ALTER FUNCTION getmeslargo(integer)


--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION getcliproslds(_clpr character, _cve integer)
  RETURNS text AS
$BODY$
DECLARE
	_simbolo character varying(4);
  	_saldo numeric(19,4);
	_resultado text;
BEGIN
	_resultado = '-';
	IF _clpr = 'CL'
	THEN
		FOR _simbolo, _saldo 
		IN 
			select m.simbolo, s.saldo 
			from tbl_cont_monedas m 
				join tbl_client_saldos_monedas s on m.clave = s.id_moneda
			where s.saldo <> 0.00 and s.id_tipo = 'CL' and s.id_clave = _cve
			order by m.clave asc 
		LOOP
			_resultado := _resultado || ' ' || _simbolo || ' ' || cast(round(_saldo,2) as text) || ' -'; 
		END LOOP;
	ELSIF _clpr = 'PR'
	THEN
		FOR _simbolo, _saldo 
		IN 
			select m.simbolo, s.saldo 
			from tbl_cont_monedas m 
				join tbl_provee_saldos_monedas s on m.clave = s.id_moneda
			where s.saldo <> 0.00 and s.id_tipo = 'PR' and s.id_clave = _cve
			order by m.clave asc 
		LOOP
			_resultado := _resultado || ' ' || _simbolo || ' ' || cast(round(_saldo,2) as text) || ' -'; 
		END LOOP;
	END IF;
		
	IF _resultado = '-'
	THEN 
		return '';
	ELSE
		return _resultado;
	END IF;
END
$BODY$
  LANGUAGE plpgsql;

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION getcliproid(
    _clpr character,
    _ent integer,
    _num integer)
  RETURNS integer AS
$BODY$
DECLARE
	_resultado integer;
BEGIN
	IF _num = 0
	THEN
		return 0;
	END IF;
	
	IF _clpr = 'CL'
	THEN
		_resultado := (select id_clave from tbl_client_client where id_tipo = 'CL' and id_numero = _num and id_entidad = _ent);
	ELSE -- _clpr = 'PR'
		_resultado := (select id_clave from tbl_provee_provee where id_tipo = 'PR' and id_numero = _num and id_entidad = _ent);
	END IF;

	IF _resultado is null
	THEN
		return -1;
	ELSE
		return _resultado;
	END IF;
END
$BODY$
  LANGUAGE plpgsql;
--ALTER FUNCTION getcliproid(character, integer, integer)

--@FIN_BLOQUE
CREATE TABLE tbl_msj
(
  alc character(3) NOT NULL,
  mod character varying(30) NOT NULL,
  sub character varying(30) NOT NULL,
  elm character varying(50) NOT NULL,
  msj1 character varying(255) NOT NULL,
  msj2 character varying(255),
  msj3 character varying(255),
  msj4 character varying(255),
  msj5 character varying(255),
  CONSTRAINT pk_tbl_msj PRIMARY KEY (alc, mod, sub, elm)
);




--@FIN_BLOQUE
CREATE TABLE tbl_variables
(
  id_variable character varying(10) NOT NULL,
  descripcion character varying(254) NOT NULL,
  ventero integer,
  vdecimal numeric(18,6),
  vfecha timestamp without time zone,
  valfanumerico character varying(255) NOT NULL,
  desistema smallint NOT NULL,
  modulo character varying(4) NOT NULL,
  CONSTRAINT pk_tbl_variables PRIMARY KEY (id_variable ),
  CONSTRAINT ck_tbl_variables_modulo CHECK (modulo::text = 'CONT'::text OR modulo::text = 'BAN'::text OR modulo::text = 'ALM'::text OR modulo::text = 'COMP'::text OR modulo::text = 'VEN'::text OR modulo::text = 'PROD'::text OR modulo::text = 'NOM'::text OR modulo::text = 'ADM'::text OR modulo::text = 'ESP'::text OR modulo::text = 'SYS'::text)
);

INSERT INTO tbl_variables(id_variable, descripcion, ventero, vdecimal, vfecha, valfanumerico, desistema, modulo)
VALUES ('CONF_CC', 'INT|2|6|-|-', 3, null, null, '', '1', 'CONT');

INSERT INTO tbl_variables(id_variable, descripcion, ventero, vdecimal, vfecha, valfanumerico, desistema, modulo)
VALUES('CC_TET','CC|-|-|-|-', null, null, null, '', '1','BAN');


--@FIN_BLOQUE
CREATE TABLE tbl_usuarios
(
  id_usuario character varying(10) NOT NULL,
  "password" character varying(10) NOT NULL,
  nombre character varying(80) NOT NULL,
  CONSTRAINT pk_tbl_usuarios PRIMARY KEY (id_usuario)
);



--@FIN_BLOQUE
CREATE TABLE tbl_usuarios_permisos_catalogo
(
  id_permiso character varying(30) NOT NULL,
  CONSTRAINT pk_tbl_usuarios_permisos_catalogo PRIMARY KEY (id_permiso)
);


--@FIN_BLOQUE
CREATE TABLE tbl_usuarios_permisos
(
  id_usuario character varying(10) NOT NULL,
  id_permiso character varying(30) NOT NULL,
  permitido bit(1) NOT NULL,
  CONSTRAINT pk_tbl_usuarios_permisos PRIMARY KEY (id_usuario, id_permiso),
  CONSTRAINT fk_tbl_usuarios_permisos_tbl_usuarios FOREIGN KEY (id_usuario)
      REFERENCES tbl_usuarios (id_usuario) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_tbl_usuarios_permisos_tbl_usuarios_permisos_catalogo FOREIGN KEY (id_permiso)
      REFERENCES tbl_usuarios_permisos_catalogo (id_permiso) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION
);



--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_usuarios AS 
 SELECT tbl_usuarios.id_usuario, tbl_usuarios.password, tbl_usuarios.nombre
   FROM tbl_usuarios;



--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_usuarios_permisos_catalogo AS 
 SELECT p.id_permiso, m.msj1 AS descripcion, m.msj2 AS modulo
   FROM tbl_usuarios_permisos_catalogo p
   JOIN tbl_msj m ON m.alc::text = 'CEF'::text AND m.mod::text = 'PERMISOS'::text AND m.sub::text = 'CATALOGO'::text AND m.elm::text = p.id_permiso::text;



--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_usuarios_permisos AS 
 SELECT c.id_usuario, c.id_permiso, m.msj1 as descripcion, c.permitido
   FROM tbl_usuarios_permisos c
   JOIN tbl_usuarios_permisos_catalogo p ON c.id_permiso::text = p.id_permiso::text
   JOIN tbl_msj m ON m.alc::text = 'CEF' and m.mod::text = 'PERMISOS' and m.sub::text = 'CATALOGO' and m.elm::text = p.id_permiso::text;



--@FIN_BLOQUE
CREATE TABLE TBL_NOTAS_BLOCKS
(
  ID_Block smallint NOT NULL ,
  Etiqueta varchar(10) NOT NULL ,
  Descripcion varchar(254) NOT NULL ,
  CONSTRAINT PK_TBL_NOTAS_BLOCKS PRIMARY KEY(ID_Block)
);



--@FIN_BLOQUE
CREATE TABLE TBL_NOTAS
(
  ID_Block smallint NOT NULL ,
  ID_Nota varchar(52) NOT NULL ,
  ID_Nivel smallint NOT NULL ,
  Fecha timestamp NOT NULL ,
  ID_Usuario varchar(10) NOT NULL ,
  Mensaje varchar(254) NOT NULL ,
  FechaNota timestamp NOT NULL ,
  CONSTRAINT PK_TBL_NOTAS PRIMARY KEY (ID_Block, ID_Nota),
  CONSTRAINT FK_TBL_NOTAS_TBL_NOTAS_BLOCKS FOREIGN KEY (ID_Block)
   REFERENCES TBL_NOTAS_BLOCKS (ID_Block) ON DELETE CASCADE  ON UPDATE CASCADE ,
  CONSTRAINT FK_TBL_NOTAS_TBL_USUARIOS FOREIGN KEY (ID_Usuario) 
   REFERENCES TBL_USUARIOS (ID_Usuario) ON DELETE CASCADE  ON UPDATE CASCADE 
);



--@FIN_BLOQUE
CREATE TABLE TBL_USUARIOS_SUBMODULO_BLOCKS
(
  ID_Usuario varchar(10) NOT NULL ,
  ID_Block smallint NOT NULL ,
  CONSTRAINT PK_TBL_USUARIOS_SUBMODULO_BLOCKS PRIMARY KEY (ID_Usuario,ID_Block),
  CONSTRAINT FK_TBL_USUARIOS_SUBMODULO_BLOCKS_TBL_NOTAS_BLOCKS FOREIGN KEY (ID_Block) 
   REFERENCES TBL_NOTAS_BLOCKS (ID_Block) ON DELETE CASCADE  ON UPDATE CASCADE ,
  CONSTRAINT FK_TBL_USUARIOS_SUBMODULO_BLOCKS_TBL_USUARIOS FOREIGN KEY (ID_Usuario) 
   REFERENCES TBL_USUARIOS (ID_Usuario) ON DELETE CASCADE  ON UPDATE CASCADE 
);



--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_notas_modulo
AS
select n.ID_Block, n.ID_Nota, n.ID_Nivel, n.Fecha, n.Mensaje, n.ID_Usuario, u.Nombre, n.FechaNota, b.Etiqueta
from TBL_NOTAS n INNER JOIN TBL_USUARIOS u ON
	n.ID_Usuario = u.ID_Usuario INNER JOIN TBL_NOTAS_BLOCKS b ON
	n.ID_Block = b.ID_Block; 



--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_notas_blocks_ids
AS
select u.ID_Usuario, n.ID_Block, n.Etiqueta
from TBL_NOTAS_BLOCKS n INNER JOIN TBL_USUARIOS_SUBMODULO_BLOCKS u ON
	n.ID_Block = u.ID_Block;

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('CONT');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('CONT_RUBROS');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('CONT_RUBROS_CREAR');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('CONT_RUBROS_CAMBIAR');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('CONT_RUBROS_ELIMINAR');



--@FIN_BLOQUE
CREATE TABLE tbl_cont_rubros
(
  clave serial NOT NULL,
  tipo character(2),
  nombre character varying(50) NOT NULL,
  cuentainicial character(4) NOT NULL,
  cuentafinal character(4) NOT NULL,
  CONSTRAINT pk_tbl_cont_catalogo_rubros PRIMARY KEY (clave)
);



--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_cont_rubros_modulo 
AS 
  SELECT tbl_cont_rubros.clave AS id, tbl_cont_rubros.tipo AS clave, tbl_cont_rubros.nombre, tbl_cont_rubros.cuentainicial AS desde, tbl_cont_rubros.cuentafinal AS hasta
  FROM tbl_cont_rubros;




INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('CONT_CATCUENTAS');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('CONT_CATCUENTAS_CREAR');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('CONT_CATCUENTAS_CAMBIAR');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('CONT_CATCUENTAS_ELIMINAR');



--@FIN_BLOQUE
CREATE TABLE tbl_cont_catalogo
(
  cuenta character(19) NOT NULL,
  acum bit(1) NOT NULL,
  nombre character varying(50) NOT NULL,
  saldo numeric(19,4) NOT NULL DEFAULT 0.0000,
  estatus character(1) NOT NULL,
  ce_codagrup character varying(12) NOT NULL,
  ce_natur character(1) NOT NULL,
  CONSTRAINT pk_tbl_cont_catalogo PRIMARY KEY (cuenta),
  CONSTRAINT ck_tbl_cont_catalogo_ce_natur CHECK (ce_natur = 'R'::bpchar OR ce_natur = 'D'::bpchar OR ce_natur = 'A'::bpchar)
);



--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_cont_catalogo_modulo AS 
 SELECT r.tipo, c.cuenta, c.acum AS ac, c.nombre, c.saldo, c.estatus, c.ce_codagrup, c.ce_natur
   FROM tbl_cont_catalogo c
   JOIN tbl_cont_rubros r ON c.cuenta::text >= "substring"(r.cuentainicial::text, 1, 4) AND c.cuenta::text <= ("substring"(r.cuentafinal::text, 1, 4) || '999999999999999'::text);

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('CONT_POLIZAS');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('CONT_POLIZAS_CREAR');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('CONT_POLIZAS_CAMBIAR');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('CONT_POLIZAS_CONSULTAR');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('CONT_POLIZAS_CANCELAR');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('CONT_POLIZAS_CE');


--@FIN_BLOQUE
CREATE TABLE tbl_cont_polizas_tipos
(
  id_tipo character(2) NOT NULL,
  descripcion character varying(20) NOT NULL,
  numero integer NOT NULL,
  formato character varying(20),
  CONSTRAINT pk_tbl_cont_polizas_tipos PRIMARY KEY (id_tipo)
);

INSERT INTO tbl_cont_polizas_tipos
VALUES('DR','Diario',1,null);

INSERT INTO tbl_cont_polizas_tipos
VALUES('IG','Ingreso',1,null);

INSERT INTO tbl_cont_polizas_tipos
VALUES('EG','Egreso',1,null);

INSERT INTO tbl_cont_polizas_tipos
VALUES('AJ','Ajustes',1,null);

INSERT INTO tbl_cont_polizas_tipos
VALUES('PE','Especiales',1,null);



--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_cont_polizas_tipos 
AS 
 SELECT * FROM tbl_cont_polizas_tipos;



--@FIN_BLOQUE
CREATE TABLE tbl_cont_polizas_clasificaciones
(
  id_clasificacion character varying(10) NOT NULL,
  descripcion character varying(80) NOT NULL,
  ficha character varying(10) NOT NULL,
  CONSTRAINT pk_tbl_cont_polizas_clasificaciones PRIMARY KEY (id_clasificacion)
);

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('CONT_TIPOPOLIZA');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('CONT_TIPOPOLIZA_CREAR');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('CONT_TIPOPOLIZA_CAMBIAR');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('CONT_TIPOPOLIZA_ELIMINAR');


INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('CONT_POLCIERRE');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('CONT_POLCIERRE_CREAR');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('CONT_POLCIERRE_CAMBIAR');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('CONT_POLCIERRE_ELIMINAR');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('CONT_POLCIERRE_CANCELAR');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('CONT_POLCIERRE_GENERAR');




--@FIN_BLOQUE
CREATE TABLE tbl_cont_polizas
(
  id serial NOT NULL,
  tipo character(2) NOT NULL,
  numero integer NOT NULL,
  fecha timestamp without time zone NOT NULL,
  concepto character varying(120) NOT NULL,
  ref character varying(25) NOT NULL,
  status character(1) NOT NULL,
  total numeric(19,4),
  id_clasificacion character varying(10) NOT NULL,
  CONSTRAINT pk_tbl_cont_polizas PRIMARY KEY (id),
  CONSTRAINT fk_tbl_cont_polizas_tbl_cont_polizas_tipos FOREIGN KEY (tipo)
      REFERENCES tbl_cont_polizas_tipos (id_tipo) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_tbl_cont_polizas_tbl_cont_polizas_clasificaciones FOREIGN KEY (id_clasificacion)
      REFERENCES tbl_cont_polizas_clasificaciones (id_clasificacion) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE
);

--@FIN_BLOQUE
CREATE TABLE tbl_cont_polizas_detalle
(
  id integer NOT NULL,
  part smallint NOT NULL,
  cuenta character(19) NOT NULL,
  concepto character varying(80) NOT NULL,
  parcial numeric(19,4) NOT NULL,
  moneda smallint NOT NULL,
  tc numeric(19,4) NOT NULL,
  debe numeric(19,4) NOT NULL,
  haber numeric(19,4) NOT NULL,
  saldo numeric(19,4) NOT NULL,
  CONSTRAINT pk_tbl_cont_polizas_detalle PRIMARY KEY (id, part),
  CONSTRAINT fk_tbl_cont_polizas_detalle_tbl_cont_catalogo FOREIGN KEY (cuenta)
      REFERENCES tbl_cont_catalogo (cuenta) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_tbl_cont_polizas_detalle_tbl_cont_polizas FOREIGN KEY (id)
      REFERENCES tbl_cont_polizas (id) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE
);
--ALTER TABLE tbl_cont_polizas_detalle

--@FIN_BLOQUE
CREATE TABLE tbl_cont_polizas_detalle_ce_otrmetodopago
(
  id serial NOT NULL,
  id_pol integer NOT NULL,
  id_part smallint NOT NULL,
  metpagopol character(2) NOT NULL,
  fecha timestamp without time zone NOT NULL,
  benef character varying(300) NOT NULL,
  rfc character varying(13) NOT NULL,
  monto numeric(19,4) NOT NULL,
  moneda character(3) NOT NULL,
  tipcamb numeric(19,5) NOT NULL,
  CONSTRAINT pk_tbl_cont_polizas_detalle_ce_otrmetodopago PRIMARY KEY (id),
  CONSTRAINT fk_tbl_cont_polizas_detalle_ce_otrmetodopago_tbl_cont_polizas_d FOREIGN KEY (id_pol, id_part)
      REFERENCES tbl_cont_polizas_detalle (id, part) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE
);

--@FIN_BLOQUE
CREATE TABLE tbl_cont_polizas_detalle_ce_cheques
(
  id serial NOT NULL,
  id_pol integer NOT NULL,
  id_part smallint NOT NULL,
  num character varying(20) NOT NULL,
  banco character(3) NOT NULL,
  ctaori character varying(50) NOT NULL,
  fecha timestamp without time zone NOT NULL,
  monto numeric(19,4) NOT NULL,
  benef character varying(300) NOT NULL,
  rfc character varying(13) NOT NULL,
  banemisext character varying(150) NOT NULL,
  moneda character(3) NOT NULL,
  tipcamb numeric(19,5) NOT NULL,
  CONSTRAINT pk_tbl_cont_polizas_detalle_ce_cheques PRIMARY KEY (id),
  CONSTRAINT fk_tbl_cont_polizas_detalle_ce_cheques_tbl_cont_polizas_detalle FOREIGN KEY (id_pol, id_part)
      REFERENCES tbl_cont_polizas_detalle (id, part) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE
);

--@FIN_BLOQUE
CREATE TABLE tbl_cont_polizas_detalle_ce_transferencias
(
  id serial NOT NULL,
  id_pol integer NOT NULL,
  id_part smallint NOT NULL,
  ctaori character varying(50) NOT NULL,
  bancoori character(3) NOT NULL,
  monto numeric(19,4) NOT NULL,
  ctadest character varying(50) NOT NULL,
  bancodest character(3) NOT NULL,
  fecha timestamp without time zone NOT NULL,
  benef character varying(300) NOT NULL,
  rfc character varying(13) NOT NULL,
  bancooriext character varying(150) NOT NULL,
  bancodestext character varying(150) NOT NULL,
  moneda character(3) NOT NULL,
  tipcamb numeric(19,5) NOT NULL,
  CONSTRAINT pk_tbl_cont_polizas_detalle_ce_transferencias PRIMARY KEY (id),
  CONSTRAINT fk_tbl_cont_polizas_detalle_ce_transferencias_tbl_cont_polizas_ FOREIGN KEY (id_pol, id_part)
      REFERENCES tbl_cont_polizas_detalle (id, part) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE
);

--@FIN_BLOQUE
CREATE TABLE tbl_cont_polizas_detalle_ce_comprobantes
(
  id serial NOT NULL,
  id_pol integer NOT NULL,
  id_part smallint NOT NULL,
  uuid_cfdi character(36) NOT NULL,
  monto numeric(19,4) NOT NULL,
  rfc character varying(13) NOT NULL,
  id_tipo character varying(10) NOT NULL,
  moneda character(3) NOT NULL,
  tipcamb numeric(19,5) NOT NULL,
  cfd_cbb_serie character varying(10) NOT NULL,
  cfd_cbb_numfol integer NOT NULL,
  numfactext character varying(36) NOT NULL,
  taxid character varying(30) NOT NULL,
  CONSTRAINT pk_tbl_cont_polizas_detalle_ce_comprobantes PRIMARY KEY (id),
  CONSTRAINT fk_tbl_cont_polizas_detalle_ce_comprobantes_tbl_cont_polizas_de FOREIGN KEY (id_pol, id_part)
      REFERENCES tbl_cont_polizas_detalle (id, part) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE
);

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION getpolizaconce(_id_pol integer)
  RETURNS boolean AS
$BODY$  
BEGIN
	IF (SELECT count(*) FROM tbl_cont_polizas_detalle_ce_comprobantes WHERE tbl_cont_polizas_detalle_ce_comprobantes.id_pol = _id_pol) > 0
	THEN
		RETURN true;
	ELSIF (SELECT count(*) FROM tbl_cont_polizas_detalle_ce_cheques WHERE tbl_cont_polizas_detalle_ce_cheques.id_pol = _id_pol) > 0 
	THEN 
		RETURN true;
	ELSIF (SELECT count(*) FROM tbl_cont_polizas_detalle_ce_transferencias WHERE tbl_cont_polizas_detalle_ce_transferencias.id_pol = _id_pol) > 0
	THEN 
		RETURN true;
	ELSIF (SELECT count(*) FROM tbl_cont_polizas_detalle_ce_otrmetodopago WHERE tbl_cont_polizas_detalle_ce_otrmetodopago.id_pol = _id_pol) > 0 
	THEN 
		RETURN true;
        ELSE
		RETURN false;
	END IF;
END
$BODY$
  LANGUAGE plpgsql;
--ALTER FUNCTION getpolizaconce(integer)

--@FIN_BLOQUE
CREATE TABLE tbl_sat_metodospago
(
  clave character(2) NOT NULL,
  nombre character varying(254) NOT NULL,
  CONSTRAINT pk_tbl_sat_metodospago PRIMARY KEY (clave)
);

insert into tbl_sat_metodospago
values('01','Efectivo');
insert into tbl_sat_metodospago
values('02','Cheque');
insert into tbl_sat_metodospago
values('03','Transferencia');
insert into tbl_sat_metodospago
values('04','Tarjetas de cr√©dito');
insert into tbl_sat_metodospago
values('05','Monederos electr√≥nicos');
insert into tbl_sat_metodospago
values('06','Dinero electr√≥nico');
insert into tbl_sat_metodospago
values('07','Tarjetas digitales');
insert into tbl_sat_metodospago
values('08','Vales de despensa');
insert into tbl_sat_metodospago
values('09','Bienes');
insert into tbl_sat_metodospago
values('10','Servicio');
insert into tbl_sat_metodospago
values('11','Por cuenta de tercero');
insert into tbl_sat_metodospago
values('12','Daci√≥n en pago');
insert into tbl_sat_metodospago
values('13','Pago por subrogaci√≥n');
insert into tbl_sat_metodospago
values('14','Pago por consignaci√≥n');
insert into tbl_sat_metodospago
values('15','Condonaci√≥n');
insert into tbl_sat_metodospago
values('16','Cancelaci√≥n');
insert into tbl_sat_metodospago
values('17','Compensaci√≥n');
insert into tbl_sat_metodospago
values('98','N/A');
insert into tbl_sat_metodospago
values('99','Otros');

--@FIN_BLOQUE
CREATE TABLE tbl_sat_metodospago_cfdi
(
  clave character(2) NOT NULL,
  nombre character varying(254) NOT NULL,
  CONSTRAINT pk_tbl_sat_metodospago_cfdi PRIMARY KEY (clave)
);
--ALTER TABLE tbl_sat_metodospago_cfdi
  
--@FIN_BLOQUE
INSERT INTO tbl_sat_metodospago_cfdi
VALUES('01','Efectivo');
INSERT INTO tbl_sat_metodospago_cfdi
VALUES('02','Cheque nominativo');
INSERT INTO tbl_sat_metodospago_cfdi
VALUES('03','Transferencia electr√≥nica de fondos');
INSERT INTO tbl_sat_metodospago_cfdi
VALUES('04','Tarjeta de cr√©dito');
INSERT INTO tbl_sat_metodospago_cfdi
VALUES('05','Monedero electr√≥nico');
INSERT INTO tbl_sat_metodospago_cfdi
VALUES('06','Dinero electr√≥nico');
INSERT INTO tbl_sat_metodospago_cfdi
VALUES('08','Vales de despensa');
INSERT INTO tbl_sat_metodospago_cfdi
VALUES('28','Tarjeta de d√©bito');
INSERT INTO tbl_sat_metodospago_cfdi
VALUES('29','Tarjeta de servicio');
INSERT INTO tbl_sat_metodospago_cfdi
VALUES('99','Otros');

--@FIN_BLOQUE
CREATE TABLE tbl_sat_incoterms
(
  clave character(3) NOT NULL,
  descripcion character varying(254) NOT NULL,
  CONSTRAINT pk_tbl_sat_incoterms PRIMARY KEY (clave)
);
--ALTER TABLE tbl_sat_incoterms
  
--@FIN_BLOQUE
INSERT INTO tbl_sat_incoterms(clave, descripcion)
VALUES('CFR','COSTE Y FLETE (PUERTO DE DESTINO CONVENIDO).');
INSERT INTO tbl_sat_incoterms(clave, descripcion)
VALUES('CIF','COSTE, SEGURO Y FLETE (PUERTO DE DESTINO CONVENIDO).');
INSERT INTO tbl_sat_incoterms(clave, descripcion)
VALUES('CPT','TRANSPORTE PAGADO HASTA (EL LUGAR DE DESTINO CONVENIDO).');
INSERT INTO tbl_sat_incoterms(clave, descripcion)
VALUES('CIP','TRANSPORTE Y SEGURO PAGADOS HASTA (LUGAR DE DESTINO CONVENIDO).');
INSERT INTO tbl_sat_incoterms(clave, descripcion)
VALUES('DAF','ENTREGADA EN FRONTERA (LUGAR CONVENIDO).');
INSERT INTO tbl_sat_incoterms(clave, descripcion)
VALUES('DAP','ENTREGADA EN LUGAR.');
INSERT INTO tbl_sat_incoterms(clave, descripcion)
VALUES('DAT','ENTREGADA EN TERMINAL.');
INSERT INTO tbl_sat_incoterms(clave, descripcion)
VALUES('DES','ENTREGADA SOBRE BUQUE (PUERTO DE DESTINO CONVENIDO).');
INSERT INTO tbl_sat_incoterms(clave, descripcion)
VALUES('DEQ','ENTREGADA EN MUELLE (PUERTO DE DESTINO CONVENIDO).');
INSERT INTO tbl_sat_incoterms(clave, descripcion)
VALUES('DDU','ENTREGADA DERECHOS NO PAGADOS (LUGAR DE DESTINO CONVENIDO).');
INSERT INTO tbl_sat_incoterms(clave, descripcion)
VALUES('DDP','ENTREGADA DERECHOS PAGADOS (LUGAR DE DESTINO CONVENIDO).');
INSERT INTO tbl_sat_incoterms(clave, descripcion)
VALUES('EXW','EN FABRICA (LUGAR CONVENIDO).');
INSERT INTO tbl_sat_incoterms(clave, descripcion)
VALUES('FCA','FRANCO TRANSPORTISTA (LUGAR DESIGNADO).');
INSERT INTO tbl_sat_incoterms(clave, descripcion)
VALUES('FAS','FRANCO AL COSTADO DEL BUQUE (PUERTO DE CARGA CONVENIDO).');
INSERT INTO tbl_sat_incoterms(clave, descripcion)
VALUES('FOB','FRANCO A BORDO (PUERTO DE CARGA CONVENIDO).');

--@FIN_BLOQUE
CREATE TABLE tbl_sat_unidades
(
  clave smallint NOT NULL,
  descripcion character varying(50) NOT NULL,
  CONSTRAINT pk_tbl_sat_unidades PRIMARY KEY (clave)
);
--ALTER TABLE tbl_sat_unidades
  
--@FIN_BLOQUE
INSERT INTO tbl_sat_unidades(clave, descripcion)
VALUES('1','KILO');  
INSERT INTO tbl_sat_unidades(clave, descripcion)
VALUES('2','GRAMO');  
INSERT INTO tbl_sat_unidades(clave, descripcion)
VALUES('3','METRO LINEAL');  
INSERT INTO tbl_sat_unidades(clave, descripcion)
VALUES('4','METRO CUADRADO');  
INSERT INTO tbl_sat_unidades(clave, descripcion)
VALUES('5','METRO CUBICO');  
INSERT INTO tbl_sat_unidades(clave, descripcion)
VALUES('6','PIEZA');  
INSERT INTO tbl_sat_unidades(clave, descripcion)
VALUES('7','CABEZA');  
INSERT INTO tbl_sat_unidades(clave, descripcion)
VALUES('8','LITRO');  
INSERT INTO tbl_sat_unidades(clave, descripcion)
VALUES('9','PAR');  
INSERT INTO tbl_sat_unidades(clave, descripcion)
VALUES('10','KILOWATT');  
INSERT INTO tbl_sat_unidades(clave, descripcion)
VALUES('11','MILLAR');  
INSERT INTO tbl_sat_unidades(clave, descripcion)
VALUES('12','JUEGO');  
INSERT INTO tbl_sat_unidades(clave, descripcion)
VALUES('13','KILOWATT/HORA');  
INSERT INTO tbl_sat_unidades(clave, descripcion)
VALUES('14','TONELADA');  
INSERT INTO tbl_sat_unidades(clave, descripcion)
VALUES('15','BARRIL');  
INSERT INTO tbl_sat_unidades(clave, descripcion)
VALUES('16','GRAMO NETO');  
INSERT INTO tbl_sat_unidades(clave, descripcion)
VALUES('17','DECENAS');  
INSERT INTO tbl_sat_unidades(clave, descripcion)
VALUES('18','CIENTOS');  
INSERT INTO tbl_sat_unidades(clave, descripcion)
VALUES('19','DOCENAS');  
INSERT INTO tbl_sat_unidades(clave, descripcion)
VALUES('20','CAJA');  
INSERT INTO tbl_sat_unidades(clave, descripcion)
VALUES('21','BOTELLA');
INSERT INTO tbl_sat_unidades(clave, descripcion)
VALUES('99','OTROS (SERVICIO)');

--@FIN_BLOQUE
CREATE TABLE tbl_sat_paises
(
  alfa2 character(2) NOT NULL,
  alfa3 character(3) NOT NULL,
  numerico smallint NOT NULL,
  nombre character varying(254) NOT NULL,
  CONSTRAINT pk_tbl_sat_paises PRIMARY KEY (alfa2)
);

--@FIN_BLOQUE
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Afganist√°n','AF','AFG','004');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Islas Aland','AX','ALA','248');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Albania','AL','ALB','008');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Alemania','DE','DEU','276');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Andorra','AD','AND','020');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Angola','AO','AGO','024');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Anguila','AI','AIA','660');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Ant√°rtida','AQ','ATA','010');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Antigua y Barbuda','AG','ATG','028');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Arabia Saudita','SA','SAU','682');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Argelia','DZ','DZA','012');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Argentina','AR','ARG','032');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Armenia','AM','ARM','051');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Aruba','AW','ABW','533');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Australia','AU','AUS','036');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Austria','AT','AUT','040');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Azerbaiy√°n','AZ','AZE','031');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Las Bahamas','BS','BHS','044');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Bangladesh','BD','BGD','050');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Barbados','BB','BRB','052');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Bahrein','BH','BHR','048');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('B√©lgica','BE','BEL','056');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Belice','BZ','BLZ','084');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Benin','BJ','BEN','204');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Bermudas','BM','BMU','060');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Belar√∫s','BY','BLR','112');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Bolivia','BO','BOL','068');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('San Eustaquio y Saba','BQ','BES','535');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Bosnia y Herzegovina','BA','BIH','070');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Botswana','BW','BWA','072');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Brasil','BR','BRA','076');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Brunei Darussalam','BN','BRN','096');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Bulgaria','BG','BGR','100');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Burkina Faso','BF','BFA','854');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Burundi','BI','BDI','108');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Bhut√°n','BT','BTN','064');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Cabo Verde','CV','CPV','132');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Camboya','KH','KHM','116');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Camer√∫n','CM','CMR','120');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Canad√°','CA','CAN','124');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Qatar','QA','QAT','634');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Chad','TD','TCD','148');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Chile','CL','CHL','152');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('China','CN','CHN','156');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Chipre','CY','CYP','196');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Colombia','CO','COL','170');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Las Comoras','KM','COM','174');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Corea del Norte','KP','PRK','408');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Corea del Sur','KR','KOR','410');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Costa de Marfil','CI','CIV','384');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Costa Rica','CR','CRI','188');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Croacia','HR','HRV','191');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Cuba','CU','CUB','192');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Cura√ßao','CW','CUW','531');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Dinamarca','DK','DNK','208');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Dominica','DM','DMA','212');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Ecuador','EC','ECU','218');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Egipto','EG','EGY','818');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('El Salvador','SV','SLV','222');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Emiratos √Årabes Unidos','AE','ARE','784');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Eritrea','ER','ERI','232');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Eslovaquia','SK','SVK','703');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Eslovenia','SI','SVN','705');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Espa√±a','ES','ESP','724');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Estados Unidos de Am√©rica','US','USA','840');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Estonia','EE','EST','233');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Etiop√≠a','ET','ETH','231');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Filipinas','PH','PHL','608');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Finlandia','FI','FIN','246');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Fiji','FJ','FJI','242');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Francia','FR','FRA','250');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Gab√≥n','GA','GAB','266');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Gambia','GM','GMB','270');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Georgia','GE','GEO','268');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Ghana','GH','GHA','288');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Gibraltar','GI','GIB','292');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Granada','GD','GRD','308');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Grecia','GR','GRC','300');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Groenlandia','GL','GRL','304');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Guadeloupe','GP','GLP','312');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Guam','GU','GUM','316');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Guatemala','GT','GTM','320');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Guayana Francesa','GF','GUF','254');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Guernsey','GG','GGY','831');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Guinea','GN','GIN','324');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Guinea Bissau','GW','GNB','624');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Guinea Ecuatorial','GQ','GNQ','226');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Guyana','GY','GUY','328');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Hait√≠','HT','HTI','332');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Honduras','HN','HND','340');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Hong Kong','HK','HKG','344');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Hungr√≠a','HU','HUN','348');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('India','IN','IND','356');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Indonesia','ID','IDN','360');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Iraq','IQ','IRQ','368');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Ir√°n','IR','IRN','364');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Irlanda','IE','IRL','372');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Isla Bouvet','BV','BVT','074');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Isla de Man','IM','IMN','833');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Isla de Navidad','CX','CXR','162');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Islandia','IS','ISL','352');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Islas Caim√°n','KY','CYM','136');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Islas Cocos','CC','CCK','166');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Islas Cook','CK','COK','184');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Islas Feroe','FO','FRO','234');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Islas Georgias del Sur y Sandwich del Sur','GS','SGS','239');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Heard (Isla) e Islas McDonald','HM','HMD','334');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Islas Malvinas','FK','FLK','238');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Islas Marianas del Norte','MP','MNP','580');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Islas Marshall','MH','MHL','584');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Islas Pitcairn','PN','PCN','612');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Islas Salom√≥n','SB','SLB','090');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Islas Turcas y Caicos','TC','TCA','796');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Islas ultramarinas de Estados Unidos','UM','UMI','581');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Islas V√≠rgenes Brit√°nicas','VG','VGB','092');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Islas V√≠rgenes de los Estados Unidos','VI','VIR','850');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Israel','IL','ISR','376');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Italia','IT','ITA','380');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Jamaica','JM','JAM','388');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Jap√≥n','JP','JPN','392');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Jersey','JE','JEY','832');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Jordania','JO','JOR','400');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Kazajst√°n','KZ','KAZ','398');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Kenya','KE','KEN','404');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Kirguist√°n','KG','KGZ','417');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Kiribati','KI','KIR','296');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Kuwait','KW','KWT','414');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Rep√∫blica Democr√°tica Popular','LA','LAO','418');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Lesotho','LS','LSO','426');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Letonia','LV','LVA','428');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('L√≠bano','LB','LBN','422');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Liberia','LR','LBR','430');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Libia','LY','LBY','434');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Liechtenstein','LI','LIE','438');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Lituania','LT','LTU','440');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Luxemburgo','LU','LUX','442');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Macao','MO','MAC','446');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Macedonia','MK','MKD','807');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Madagascar','MG','MDG','450');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Malasia','MY','MYS','458');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Malawi','MW','MWI','454');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Maldivas','MV','MDV','462');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Mal√≠','ML','MLI','466');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Malta','MT','MLT','470');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Marruecos','MA','MAR','504');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Martinique','MQ','MTQ','474');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Mauricio','MU','MUS','480');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Mauritania','MR','MRT','478');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Mayotte','YT','MYT','175');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('M√©xico','MX','MEX','484');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Micronesia','FM','FSM','583');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Moldova','MD','MDA','498');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('M√≥naco','MC','MCO','492');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Mongolia','MN','MNG','496');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Montenegro','ME','MNE','499');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Montserrat','MS','MSR','500');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Mozambique','MZ','MOZ','508');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Myanmar','MM','MMR','104');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Namibia','NA','NAM','516');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Nauru','NR','NRU','520');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Nepal','NP','NPL','524');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Nicaragua','NI','NIC','558');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('N√≠ger','NE','NER','562');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Nigeria','NG','NGA','566');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Niue','NU','NIU','570');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Norfolk, Isla','NF','NFK','574');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Noruega','NO','NOR','578');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Nueva Caledonia','NC','NCL','540');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Nueva Zelandia','NZ','NZL','554');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Om√°n','OM','OMN','512');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Pa√≠ses Bajos','NL','NLD','528');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Pakist√°n','PK','PAK','586');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Palau','PW','PLW','585');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Palestina','PS','PSE','275');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Panam√°','PA','PAN','591');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Nueva Guinea','PG','PNG','598');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Paraguay','PY','PRY','600');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Per√∫','PE','PER','604');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Polinesia Francesa','PF','PYF','258');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Polonia','PL','POL','616');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Portugal','PT','PRT','620');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Puerto Rico','PR','PRI','630');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Reino Unido','GB','GBR','826');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Sahara Occidental','EH','ESH','732');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Rep√∫blica Centroafricana','CF','CAF','140');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Rep√∫blica Checa','CZ','CZE','203');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Rep√∫blica del Congo','CG','COG','178');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Rep√∫blica Democr√°tica del Congo','CD','COD','180');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Rep√∫blica Dominicana','DO','DOM','214');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Reuni√≥n','RE','REU','638');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Rwanda','RW','RWA','646');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Rumania','RO','ROU','642');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Rusia','RU','RUS','643');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Samoa','WS','WSM','882');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Samoa Americana','AS','ASM','016');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('San Bartolom√©','BL','BLM','652');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('San Crist√≥bal y Nieves','KN','KNA','659');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('San Marino','SM','SMR','674');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('San Mart√≠n','MF','MAF','663');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('San Pedro y Miquel√≥n','PM','SPM','666');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('San Vicente y las Granadinas','VC','VCT','670');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Santa Elena, Ascensi√≥n y Trist√°n de Acu√±a','SH','SHN','654');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Santa Luc√≠a','LC','LCA','662');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Santo Tom√© y Pr√≠ncipe','ST','STP','678');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Senegal','SN','SEN','686');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Serbia','RS','SRB','688');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Seychelles','SC','SYC','690');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Sierra leona','SL','SLE','694');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Singapur','SG','SGP','702');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Sint Maarten','SX','SXM','534');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Siria','SY','SYR','760');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Somalia','SO','SOM','706');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Sri Lanka','LK','LKA','144');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Swazilandia','SZ','SWZ','748');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Sud√°frica','ZA','ZAF','710');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Sud√°n','SD','SDN','729');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Sud√°n del Sur','SS','SSD','728');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Suecia','SE','SWE','752');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Suiza','CH','CHE','756');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Surinam','SR','SUR','740');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Svalbard y Jan Mayen','SJ','SJM','744');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Tailandia','TH','THA','764');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Taiw√°n','TW','TWN','158');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Tanzania','TZ','TZA','834');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Tayikist√°n','TJ','TJK','762');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Territorio Brit√°nico del Oc√©ano √çndico','IO','IOT','086');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Tierras Australes Francesas','TF','ATF','260');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Timor-Leste','TL','TLS','626');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Togo','TG','TGO','768');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Tokelau','TK','TKL','772');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Tonga','TO','TON','776');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Trinidad y Tabago','TT','TTO','780');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('T√∫nez','TN','TUN','788');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Turkmenist√°n','TM','TKM','795');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Turqu√≠a','TR','TUR','792');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Tuvalu','TV','TUV','798');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Ucrania','UA','UKR','804');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Uganda','UG','UGA','800');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Uruguay','UY','URY','858');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Uzbekist√°n','UZ','UZB','860');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Vanuatu','VU','VUT','548');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Vaticano','VA','VAT','336');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Venezuela','VE','VEN','862');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Vietnam','VN','VNM','704');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Wallis y Futuna','WF','WLF','876');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Yemen','YE','YEM','887');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Djibouti','DJ','DJI','262');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Zambia','ZM','ZMB','894');
INSERT INTO TBL_SAT_PAISES(Nombre, Alfa2, Alfa3, Numerico)
VALUES('Zimbabwe','ZW','ZWE','716');

--@FIN_BLOQUE
CREATE TABLE tbl_sat_estados
(
  codpais2 character(2) NOT NULL,
  codpais3 character(3) NOT NULL,
  codpaisnum smallint NOT NULL,
  codestado character varying(10) NOT NULL,
  nombre character varying(254) NOT NULL,
  CONSTRAINT pk_tbl_sat_estados PRIMARY KEY (codpais2, codestado)
);

--@FIN_BLOQUE
INSERT INTO tbl_sat_estados(Codestado, Codpais2, Codpais3, Codpaisnum, Nombre)
VALUES('AGU','MX','MEX','484','Aguascalientes');
INSERT INTO tbl_sat_estados(Codestado, Codpais2, Codpais3, Codpaisnum, Nombre)
VALUES('BCN','MX','MEX','484','Baja California');
INSERT INTO tbl_sat_estados(Codestado, Codpais2, Codpais3, Codpaisnum, Nombre)
VALUES('BCS','MX','MEX','484','Baja California Sur');
INSERT INTO tbl_sat_estados(Codestado, Codpais2, Codpais3, Codpaisnum, Nombre)
VALUES('CAM','MX','MEX','484','Campeche');
INSERT INTO tbl_sat_estados(Codestado, Codpais2, Codpais3, Codpaisnum, Nombre)
VALUES('CHP','MX','MEX','484','Chiapas');
INSERT INTO tbl_sat_estados(Codestado, Codpais2, Codpais3, Codpaisnum, Nombre)
VALUES('CHH','MX','MEX','484','Chihuahua');
INSERT INTO tbl_sat_estados(Codestado, Codpais2, Codpais3, Codpaisnum, Nombre)
VALUES('COA','MX','MEX','484','Coahuila');
INSERT INTO tbl_sat_estados(Codestado, Codpais2, Codpais3, Codpaisnum, Nombre)
VALUES('COL','MX','MEX','484','Colima');
INSERT INTO tbl_sat_estados(Codestado, Codpais2, Codpais3, Codpaisnum, Nombre)
VALUES('DIF','MX','MEX','484','Distrito Federal');
INSERT INTO tbl_sat_estados(Codestado, Codpais2, Codpais3, Codpaisnum, Nombre)
VALUES('DUR','MX','MEX','484','Durango');
INSERT INTO tbl_sat_estados(Codestado, Codpais2, Codpais3, Codpaisnum, Nombre)
VALUES('GUA','MX','MEX','484','Guanajuato');
INSERT INTO tbl_sat_estados(Codestado, Codpais2, Codpais3, Codpaisnum, Nombre)
VALUES('GRO','MX','MEX','484','Guerrero');
INSERT INTO tbl_sat_estados(Codestado, Codpais2, Codpais3, Codpaisnum, Nombre)
VALUES('HID','MX','MEX','484','Hidalgo');
INSERT INTO tbl_sat_estados(Codestado, Codpais2, Codpais3, Codpaisnum, Nombre)
VALUES('JAL','MX','MEX','484','Jalisco');
INSERT INTO tbl_sat_estados(Codestado, Codpais2, Codpais3, Codpaisnum, Nombre)
VALUES('MEX','MX','MEX','484','Estado de M√©xico');
INSERT INTO tbl_sat_estados(Codestado, Codpais2, Codpais3, Codpaisnum, Nombre)
VALUES('MIC','MX','MEX','484','Michoac√°n');
INSERT INTO tbl_sat_estados(Codestado, Codpais2, Codpais3, Codpaisnum, Nombre)
VALUES('MOR','MX','MEX','484','Morelos');
INSERT INTO tbl_sat_estados(Codestado, Codpais2, Codpais3, Codpaisnum, Nombre)
VALUES('NAY','MX','MEX','484','Nayarit');
INSERT INTO tbl_sat_estados(Codestado, Codpais2, Codpais3, Codpaisnum, Nombre)
VALUES('NLE','MX','MEX','484','Nuevo Le√≥n');
INSERT INTO tbl_sat_estados(Codestado, Codpais2, Codpais3, Codpaisnum, Nombre)
VALUES('OAX','MX','MEX','484','Oaxaca');
INSERT INTO tbl_sat_estados(Codestado, Codpais2, Codpais3, Codpaisnum, Nombre)
VALUES('PUE','MX','MEX','484','Puebla');
INSERT INTO tbl_sat_estados(Codestado, Codpais2, Codpais3, Codpaisnum, Nombre)
VALUES('QTO','MX','MEX','484','Quer√©taro');
INSERT INTO tbl_sat_estados(Codestado, Codpais2, Codpais3, Codpaisnum, Nombre)
VALUES('ROO','MX','MEX','484','Quintana Roo');
INSERT INTO tbl_sat_estados(Codestado, Codpais2, Codpais3, Codpaisnum, Nombre)
VALUES('SLP','MX','MEX','484','San Luis Potos√≠');
INSERT INTO tbl_sat_estados(Codestado, Codpais2, Codpais3, Codpaisnum, Nombre)
VALUES('SIN','MX','MEX','484','Sinaloa');
INSERT INTO tbl_sat_estados(Codestado, Codpais2, Codpais3, Codpaisnum, Nombre)
VALUES('SON','MX','MEX','484','Sonora');
INSERT INTO tbl_sat_estados(Codestado, Codpais2, Codpais3, Codpaisnum, Nombre)
VALUES('TAB','MX','MEX','484','Tabasco');
INSERT INTO tbl_sat_estados(Codestado, Codpais2, Codpais3, Codpaisnum, Nombre)
VALUES('TAM','MX','MEX','484','Tamaulipas');
INSERT INTO tbl_sat_estados(Codestado, Codpais2, Codpais3, Codpaisnum, Nombre)
VALUES('TLA','MX','MEX','484','Tlaxcala');
INSERT INTO tbl_sat_estados(Codestado, Codpais2, Codpais3, Codpaisnum, Nombre)
VALUES('VER','MX','MEX','484','Veracruz');
INSERT INTO tbl_sat_estados(Codestado, Codpais2, Codpais3, Codpaisnum, Nombre)
VALUES('UC','MX','MEX','484','Yucat√°n');
INSERT INTO tbl_sat_estados(Codestado, Codpais2, Codpais3, Codpaisnum, Nombre)
VALUES('ZAC','MX','MEX','484','Zacatecas');
INSERT INTO tbl_sat_estados(Codestado, Codpais2, Codpais3, Codpaisnum, Nombre)
VALUES('AL','US','USA','840','Alabama');
INSERT INTO tbl_sat_estados(Codestado, Codpais2, Codpais3, Codpaisnum, Nombre)
VALUES('AK','US','USA','840','Alaska');
INSERT INTO tbl_sat_estados(Codestado, Codpais2, Codpais3, Codpaisnum, Nombre)
VALUES('AZ','US','USA','840','Arizona');
INSERT INTO tbl_sat_estados(Codestado, Codpais2, Codpais3, Codpaisnum, Nombre)
VALUES('AR','US','USA','840','Arkansas');
INSERT INTO tbl_sat_estados(Codestado, Codpais2, Codpais3, Codpaisnum, Nombre)
VALUES('CA','US','USA','840','California');
INSERT INTO tbl_sat_estados(Codestado, Codpais2, Codpais3, Codpaisnum, Nombre)
VALUES('NC','US','USA','840','Carolina del Norte');
INSERT INTO tbl_sat_estados(Codestado, Codpais2, Codpais3, Codpaisnum, Nombre)
VALUES('SC','US','USA','840','Carolina del Sur');
INSERT INTO tbl_sat_estados(Codestado, Codpais2, Codpais3, Codpaisnum, Nombre)
VALUES('CO','US','USA','840','Colorado');
INSERT INTO tbl_sat_estados(Codestado, Codpais2, Codpais3, Codpaisnum, Nombre)
VALUES('CT','US','USA','840','Connecticut');
INSERT INTO tbl_sat_estados(Codestado, Codpais2, Codpais3, Codpaisnum, Nombre)
VALUES('ND','US','USA','840','Dakota del Norte');
INSERT INTO tbl_sat_estados(Codestado, Codpais2, Codpais3, Codpaisnum, Nombre)
VALUES('SD','US','USA','840','Dakota del Sur');
INSERT INTO tbl_sat_estados(Codestado, Codpais2, Codpais3, Codpaisnum, Nombre)
VALUES('DE','US','USA','840','Delaware');
INSERT INTO tbl_sat_estados(Codestado, Codpais2, Codpais3, Codpaisnum, Nombre)
VALUES('FL','US','USA','840','Florida');
INSERT INTO tbl_sat_estados(Codestado, Codpais2, Codpais3, Codpaisnum, Nombre)
VALUES('GA','US','USA','840','Georgia');
INSERT INTO tbl_sat_estados(Codestado, Codpais2, Codpais3, Codpaisnum, Nombre)
VALUES('HI','US','USA','840','Haw√°i');
INSERT INTO tbl_sat_estados(Codestado, Codpais2, Codpais3, Codpaisnum, Nombre)
VALUES('ID','US','USA','840','Idaho');
INSERT INTO tbl_sat_estados(Codestado, Codpais2, Codpais3, Codpaisnum, Nombre)
VALUES('IL','US','USA','840','Illinois');
INSERT INTO tbl_sat_estados(Codestado, Codpais2, Codpais3, Codpaisnum, Nombre)
VALUES('IN','US','USA','840','Indiana');
INSERT INTO tbl_sat_estados(Codestado, Codpais2, Codpais3, Codpaisnum, Nombre)
VALUES('IA','US','USA','840','Iowa');
INSERT INTO tbl_sat_estados(Codestado, Codpais2, Codpais3, Codpaisnum, Nombre)
VALUES('KS','US','USA','840','Kansas');
INSERT INTO tbl_sat_estados(Codestado, Codpais2, Codpais3, Codpaisnum, Nombre)
VALUES('KY','US','USA','840','Kentucky');
INSERT INTO tbl_sat_estados(Codestado, Codpais2, Codpais3, Codpaisnum, Nombre)
VALUES('LA','US','USA','840','Luisiana');
INSERT INTO tbl_sat_estados(Codestado, Codpais2, Codpais3, Codpaisnum, Nombre)
VALUES('ME','US','USA','840','Maine');
INSERT INTO tbl_sat_estados(Codestado, Codpais2, Codpais3, Codpaisnum, Nombre)
VALUES('MD','US','USA','840','Maryland');
INSERT INTO tbl_sat_estados(Codestado, Codpais2, Codpais3, Codpaisnum, Nombre)
VALUES('MA','US','USA','840','Massachusetts');
INSERT INTO tbl_sat_estados(Codestado, Codpais2, Codpais3, Codpaisnum, Nombre)
VALUES('MI','US','USA','840','M√≠chigan');
INSERT INTO tbl_sat_estados(Codestado, Codpais2, Codpais3, Codpaisnum, Nombre)
VALUES('MN','US','USA','840','Minnesota');
INSERT INTO tbl_sat_estados(Codestado, Codpais2, Codpais3, Codpaisnum, Nombre)
VALUES('MS','US','USA','840','Misisipi');
INSERT INTO tbl_sat_estados(Codestado, Codpais2, Codpais3, Codpaisnum, Nombre)
VALUES('MO','US','USA','840','Misuri');
INSERT INTO tbl_sat_estados(Codestado, Codpais2, Codpais3, Codpaisnum, Nombre)
VALUES('MT','US','USA','840','Montana');
INSERT INTO tbl_sat_estados(Codestado, Codpais2, Codpais3, Codpaisnum, Nombre)
VALUES('NE','US','USA','840','Nebraska');
INSERT INTO tbl_sat_estados(Codestado, Codpais2, Codpais3, Codpaisnum, Nombre)
VALUES('NV','US','USA','840','Nevada');
INSERT INTO tbl_sat_estados(Codestado, Codpais2, Codpais3, Codpaisnum, Nombre)
VALUES('NJ','US','USA','840','Nueva Jersey');
INSERT INTO tbl_sat_estados(Codestado, Codpais2, Codpais3, Codpaisnum, Nombre)
VALUES('NY','US','USA','840','Nueva York');
INSERT INTO tbl_sat_estados(Codestado, Codpais2, Codpais3, Codpaisnum, Nombre)
VALUES('NH','US','USA','840','Nuevo Hampshire');
INSERT INTO tbl_sat_estados(Codestado, Codpais2, Codpais3, Codpaisnum, Nombre)
VALUES('NM','US','USA','840','Nuevo M√©xico');
INSERT INTO tbl_sat_estados(Codestado, Codpais2, Codpais3, Codpaisnum, Nombre)
VALUES('OH','US','USA','840','Ohio');
INSERT INTO tbl_sat_estados(Codestado, Codpais2, Codpais3, Codpaisnum, Nombre)
VALUES('OK','US','USA','840','Oklahoma');
INSERT INTO tbl_sat_estados(Codestado, Codpais2, Codpais3, Codpaisnum, Nombre)
VALUES('OR','US','USA','840','Oreg√≥n');
INSERT INTO tbl_sat_estados(Codestado, Codpais2, Codpais3, Codpaisnum, Nombre)
VALUES('PA','US','USA','840','Pensilvania');
INSERT INTO tbl_sat_estados(Codestado, Codpais2, Codpais3, Codpaisnum, Nombre)
VALUES('RI','US','USA','840','Rhode Island');
INSERT INTO tbl_sat_estados(Codestado, Codpais2, Codpais3, Codpaisnum, Nombre)
VALUES('TN','US','USA','840','Tennessee');
INSERT INTO tbl_sat_estados(Codestado, Codpais2, Codpais3, Codpaisnum, Nombre)
VALUES('TX','US','USA','840','Texas');
INSERT INTO tbl_sat_estados(Codestado, Codpais2, Codpais3, Codpaisnum, Nombre)
VALUES('UT','US','USA','840','Utah');
INSERT INTO tbl_sat_estados(Codestado, Codpais2, Codpais3, Codpaisnum, Nombre)
VALUES('VT','US','USA','840','Vermont');
INSERT INTO tbl_sat_estados(Codestado, Codpais2, Codpais3, Codpaisnum, Nombre)
VALUES('VA','US','USA','840','Virginia');
INSERT INTO tbl_sat_estados(Codestado, Codpais2, Codpais3, Codpaisnum, Nombre)
VALUES('WV','US','USA','840','Virginia Occidental');
INSERT INTO tbl_sat_estados(Codestado, Codpais2, Codpais3, Codpaisnum, Nombre)
VALUES('WA','US','USA','840','Washington');
INSERT INTO tbl_sat_estados(Codestado, Codpais2, Codpais3, Codpaisnum, Nombre)
VALUES('WI','US','USA','840','Wisconsin');
INSERT INTO tbl_sat_estados(Codestado, Codpais2, Codpais3, Codpaisnum, Nombre)
VALUES('WY','US','USA','840','Wyoming');
INSERT INTO tbl_sat_estados(Codestado, Codpais2, Codpais3, Codpaisnum, Nombre)
VALUES('ON','CA','CAN','124','Ontario¬†');
INSERT INTO tbl_sat_estados(Codestado, Codpais2, Codpais3, Codpaisnum, Nombre)
VALUES('QC','CA','CAN','124','Quebec¬†');
INSERT INTO tbl_sat_estados(Codestado, Codpais2, Codpais3, Codpaisnum, Nombre)
VALUES('NS','CA','CAN','124','Nueva Escocia');
INSERT INTO tbl_sat_estados(Codestado, Codpais2, Codpais3, Codpaisnum, Nombre)
VALUES('NB','CA','CAN','124','Nuevo Brunswick¬†');
INSERT INTO tbl_sat_estados(Codestado, Codpais2, Codpais3, Codpaisnum, Nombre)
VALUES('MB','CA','CAN','124','Manitoba');
INSERT INTO tbl_sat_estados(Codestado, Codpais2, Codpais3, Codpaisnum, Nombre)
VALUES('BC','CA','CAN','124','Columbia Brit√°nica');
INSERT INTO tbl_sat_estados(Codestado, Codpais2, Codpais3, Codpaisnum, Nombre)
VALUES('PE','CA','CAN','124','Isla del Pr√≠ncipe Eduardo');
INSERT INTO tbl_sat_estados(Codestado, Codpais2, Codpais3, Codpaisnum, Nombre)
VALUES('SK','CA','CAN','124','Saskatchewan');
INSERT INTO tbl_sat_estados(Codestado, Codpais2, Codpais3, Codpaisnum, Nombre)
VALUES('AB','CA','CAN','124','Alberta');
INSERT INTO tbl_sat_estados(Codestado, Codpais2, Codpais3, Codpaisnum, Nombre)
VALUES('NL','CA','CAN','124','Terranova y Labrador');
INSERT INTO tbl_sat_estados(Codestado, Codpais2, Codpais3, Codpaisnum, Nombre)
VALUES('NT','CA','CAN','124','Territorios del Noroeste');
INSERT INTO tbl_sat_estados(Codestado, Codpais2, Codpais3, Codpaisnum, Nombre)
VALUES('YT','CA','CAN','124','Yuk√≥n');
INSERT INTO tbl_sat_estados(Codestado, Codpais2, Codpais3, Codpaisnum, Nombre)
VALUES('UN','CA','CAN','124','Nunavut');

--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_cont_polizas_modulo AS 
 SELECT p.id, p.tipo, p.numero AS num, p.fecha, p.concepto, p.total AS debe, p.total AS haber, p.ref, p.status AS estatus, p.id_clasificacion, (((((((((
        CASE
            WHEN (( SELECT count(*) AS count
               FROM tbl_cont_polizas_detalle_ce_cheques
              WHERE tbl_cont_polizas_detalle_ce_cheques.id_pol = p.id)) > 0 THEN 'chq'::text
            ELSE ''::text
        END || ' '::text) || 
        CASE
            WHEN (( SELECT count(*) AS count
               FROM tbl_cont_polizas_detalle_ce_transferencias
              WHERE tbl_cont_polizas_detalle_ce_transferencias.id_pol = p.id)) > 0 THEN 'trn'::text
            ELSE ''::text
        END) || ' '::text) || 
        CASE
            WHEN (( SELECT count(*) AS count
               FROM tbl_cont_polizas_detalle_ce_otrmetodopago
              WHERE tbl_cont_polizas_detalle_ce_otrmetodopago.id_pol = p.id)) > 0 THEN 'otr'::text
            ELSE ''::text
        END) || ' '::text) || 
        CASE
            WHEN (( SELECT count(*) AS count
               FROM tbl_cont_polizas_detalle_ce_comprobantes
              WHERE tbl_cont_polizas_detalle_ce_comprobantes.id_pol = p.id AND tbl_cont_polizas_detalle_ce_comprobantes.id_tipo::text = 'CompNal'::text)) > 0 THEN 'xml'::text
            ELSE ''::text
        END) || ' '::text) || 
        CASE
            WHEN (( SELECT count(*) AS count
               FROM tbl_cont_polizas_detalle_ce_comprobantes
              WHERE tbl_cont_polizas_detalle_ce_comprobantes.id_pol = p.id AND tbl_cont_polizas_detalle_ce_comprobantes.id_tipo::text = 'CompNalOtr'::text)) > 0 THEN 'cbb'::text
            ELSE ''::text
        END) || ' '::text) || 
        CASE
            WHEN (( SELECT count(*) AS count
               FROM tbl_cont_polizas_detalle_ce_comprobantes
              WHERE tbl_cont_polizas_detalle_ce_comprobantes.id_pol = p.id AND tbl_cont_polizas_detalle_ce_comprobantes.id_tipo::text = 'CompExt'::text)) > 0 THEN 'ext'::text
            ELSE ''::text
        END AS ce
   FROM tbl_cont_polizas p;

--@FIN_BLOQUE
CREATE TABLE tbl_cont_catalogo_periodos
(
  mes smallint NOT NULL,
  ano integer NOT NULL,
  cerrado smallint NOT NULL,
  CONSTRAINT pk_tbl_cont_catalogo_periodos PRIMARY KEY (mes, ano)
);



--@FIN_BLOQUE
CREATE TABLE tbl_cont_catalogo_detalle
(
  mes smallint NOT NULL,
  ano integer NOT NULL,
  cuenta character(19) NOT NULL,
  saldoinicial numeric(19,4) NOT NULL DEFAULT 0.0000,
  abonos numeric(19,4) NOT NULL DEFAULT 0.0000,
  retiros numeric(19,4) NOT NULL DEFAULT 0.0000,
  saldofinal numeric(19,4) NOT NULL DEFAULT 0.0000,
  CONSTRAINT pk_tbl_cont_catalogo_detalle PRIMARY KEY (mes, ano, cuenta),
  CONSTRAINT fk_tbl_cont_catalogo_detalle_tbl_cont_catalogo FOREIGN KEY (cuenta)
      REFERENCES tbl_cont_catalogo (cuenta) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_tbl_cont_catalogo_detalle_tbl_cont_catalogo_periodos FOREIGN KEY (mes, ano)
      REFERENCES tbl_cont_catalogo_periodos (mes, ano) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE
);



--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_cont_catalogo_modulo_periodos AS 
 SELECT tbl_cont_catalogo_periodos.mes, tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.cerrado
   FROM tbl_cont_catalogo_periodos
  WHERE tbl_cont_catalogo_periodos.mes <> 13
  ORDER BY tbl_cont_catalogo_periodos.ano DESC, tbl_cont_catalogo_periodos.mes DESC
 LIMIT 12;





--@FIN_BLOQUE
CREATE TABLE tbl_cont_polizas_detalle_ca
(
  mes smallint NOT NULL,
  ano integer NOT NULL,
  cuenta character(19) NOT NULL,
  debe numeric(19,4) NOT NULL,
  haber numeric(19,4) NOT NULL,
  CONSTRAINT pk_tbl_cont_polizas_detalle_ca PRIMARY KEY (mes, ano, cuenta),
  CONSTRAINT fk_tbl_cont_polizas_detalle_ca_tbl_cont_catalogo FOREIGN KEY (cuenta)
      REFERENCES tbl_cont_catalogo (cuenta) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_tbl_cont_polizas_detalle_ca_tbl_cont_catalogo_periodos FOREIGN KEY (mes, ano)
      REFERENCES tbl_cont_catalogo_periodos (mes, ano) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE
);




--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_cont_polizas_detalle_ca AS 
 SELECT c.mes, c.ano, c.cuenta, 
        CASE
            WHEN getlevelaccount(c1.cuenta) = 1 THEN c1.nombre
            WHEN getlevelaccount(c1.cuenta) = 2 THEN ((((( SELECT c2.nombre
               FROM tbl_cont_catalogo c2
              WHERE ("substring"(c1.cuenta::text, 1, 4) || '000000000000000'::text) = c2.cuenta::text))::text) || '/'::text) || c1.nombre::text)::character varying
            WHEN getlevelaccount(c1.cuenta) = 3 THEN ((((((( SELECT c2.nombre
               FROM tbl_cont_catalogo c2
              WHERE ("substring"(c1.cuenta::text, 1, 4) || '000000000000000'::text) = c2.cuenta::text))::text) || '/'::text) || ((( SELECT c3.nombre
               FROM tbl_cont_catalogo c3
              WHERE ("substring"(c1.cuenta::text, 1, 7) || '000000000000'::text) = c3.cuenta::text))::text)) || '/'::text) || c1.nombre::text)::character varying
            WHEN getlevelaccount(c1.cuenta) = 4 THEN ((((((((( SELECT c2.nombre
               FROM tbl_cont_catalogo c2
              WHERE ("substring"(c1.cuenta::text, 1, 4) || '000000000000000'::text) = c2.cuenta::text))::text) || '/'::text) || ((( SELECT c3.nombre
               FROM tbl_cont_catalogo c3
              WHERE ("substring"(c1.cuenta::text, 1, 7) || '000000000000'::text) = c3.cuenta::text))::text)) || '/'::text) || ((( SELECT c4.nombre
               FROM tbl_cont_catalogo c4
              WHERE ("substring"(c1.cuenta::text, 1, 10) || '000000000'::text) = c4.cuenta::text))::text)) || '/'::text) || c1.nombre::text)::character varying
            WHEN getlevelaccount(c1.cuenta) = 5 THEN ((((((((((( SELECT c2.nombre
               FROM tbl_cont_catalogo c2
              WHERE ("substring"(c1.cuenta::text, 1, 4) || '000000000000000'::text) = c2.cuenta::text))::text) || '/'::text) || ((( SELECT c3.nombre
               FROM tbl_cont_catalogo c3
              WHERE ("substring"(c1.cuenta::text, 1, 7) || '000000000000'::text) = c3.cuenta::text))::text)) || '/'::text) || ((( SELECT c4.nombre
               FROM tbl_cont_catalogo c4
              WHERE ("substring"(c1.cuenta::text, 1, 10) || '000000000'::text) = c4.cuenta::text))::text)) || '/'::text) || ((( SELECT c5.nombre
               FROM tbl_cont_catalogo c5
              WHERE ("substring"(c1.cuenta::text, 1, 13) || '000000'::text) = c5.cuenta::text))::text)) || '/'::text) || c1.nombre::text)::character varying
            WHEN getlevelaccount(c1.cuenta) = 6 THEN ((((((((((((( SELECT c2.nombre
               FROM tbl_cont_catalogo c2
              WHERE ("substring"(c1.cuenta::text, 1, 4) || '000000000000000'::text) = c2.cuenta::text))::text) || '/'::text) || ((( SELECT c3.nombre
               FROM tbl_cont_catalogo c3
              WHERE ("substring"(c1.cuenta::text, 1, 7) || '000000000000'::text) = c3.cuenta::text))::text)) || '/'::text) || ((( SELECT c4.nombre
               FROM tbl_cont_catalogo c4
              WHERE ("substring"(c1.cuenta::text, 1, 10) || '000000000'::text) = c4.cuenta::text))::text)) || '/'::text) || ((( SELECT c5.nombre
               FROM tbl_cont_catalogo c5
              WHERE ("substring"(c1.cuenta::text, 1, 13) || '000000'::text) = c5.cuenta::text))::text)) || '/'::text) || ((( SELECT c6.nombre
               FROM tbl_cont_catalogo c6
              WHERE ("substring"(c1.cuenta::text, 1, 16) || '000'::text) = c6.cuenta::text))::text)) || '/'::text) || c1.nombre::text)::character varying
            ELSE ''::character varying
        END AS descripcion, 
 ( SELECT tbl_cont_catalogo_detalle.saldofinal
           FROM tbl_cont_catalogo_detalle
          WHERE tbl_cont_catalogo_detalle.mes = 12 AND tbl_cont_catalogo_detalle.ano = c.ano AND tbl_cont_catalogo_detalle.cuenta = c.cuenta) AS saldo, c.debe, c.haber
   FROM tbl_cont_polizas_detalle_ca c
    JOIN tbl_cont_catalogo c1 ON c.cuenta = c1.cuenta;

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION gettipopoliza(_tipo character)
  RETURNS character varying AS
$BODY$  
BEGIN
	if _tipo = 'DR'
	then 
		return 'Diario';
	elsif _tipo = 'IG'
	then
		return 'Ingresos';
	elsif _tipo = 'EG'
	then
		return 'Egresos';
	elsif _tipo = 'AJ'
	then
		return 'Ajustes';
	elsif _tipo = 'PE'
	then 
		return 'Especial';
	else 
		return 'Otra';
	end if;
END
$BODY$
  LANGUAGE plpgsql;
--ALTER FUNCTION gettipopoliza(character)

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION gettipocxpc(_tipocp character)
  RETURNS text AS
$BODY$  
BEGIN
	if _tipocp = 'ALT' 
	then 
		return 'Cuenta';
	elsif _tipocp = 'ANT' 
	then 
		return 'Anticipo';
	elsif _tipocp = 'PAG' 
	then 
		return 'Pago';
	elsif _tipocp = 'SAL' 
	then 
		return 'Saldo';
	elsif _tipocp = 'APL' 
	then 
		return 'Aplicacion';
	elsif _tipocp = 'DPA' 
	then 
		return 'Descuento';
	elsif _tipocp = 'DEV' 
	then 
		return 'Devolucion';
	else
		return '?????????';
	end if;
END
$BODY$
  LANGUAGE plpgsql;
--ALTER FUNCTION gettipocxpc(character)

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION getformataccount(_account character)
  RETURNS character varying AS
$BODY$  
DECLARE _res character varying(24);
BEGIN
	IF getlevelaccount(_account) = 1
	 THEN
		_res := substring(_account, 1, 4);
	ELSIF getlevelaccount(_account) = 2
	 THEN 
		_res := substring(_account, 1, 4) || '-' || substring(_account, 5, 3);
	ELSIF getlevelaccount(_account) = 3
	THEN 
		_res := substring(_account, 1, 4) || '-' || substring(_account, 5, 3) || '-' || substring(_account, 8, 3);
	ELSIF getlevelaccount(_account) = 4 
	THEN 
		_res := substring(_account, 1, 4) || '-' || substring(_account, 5, 3) || '-' || substring(_account, 8, 3) || '-' || substring(_account, 11, 3);
	ELSIF getlevelaccount(_account) = 5
	THEN 
		_res := substring(_account, 1, 4) || '-' || substring(_account, 5, 3) || '-' || substring(_account, 8, 3) || '-' || substring(_account, 11, 3) || '-' || substring(_account, 14, 3);
	ELSIF getlevelaccount(_account) = 6
	THEN
		_res := substring(_account, 1, 4) || '-' || substring(_account, 5, 3) || '-' || substring(_account, 8, 3) || '-' || substring(_account, 11, 3) || '-' || substring(_account, 14, 3) || '-' || substring(_account, 17, 3);
	ELSE
		_res := _account;
	END IF;

	return _res;
END
$BODY$
  LANGUAGE plpgsql;
--ALTER FUNCTION getformataccount(character)

--@FIN_BLOQUE
CREATE TABLE tbl_cont_monedas
(
  clave integer NOT NULL,
  moneda character varying(20) NOT NULL,
  simbolo character varying(4) NOT NULL,
  tc numeric(19,4) NOT NULL,
  fecha timestamp without time zone NOT NULL,
  desplazamiento numeric(19,4) NOT NULL,
  da bit(1) NOT NULL,
  id_satmoneda character(3) NOT NULL,
  CONSTRAINT pk_tbl_cont_monedas PRIMARY KEY (clave)
);

INSERT INTO tbl_cont_monedas(clave, moneda, simbolo, tc, fecha, desplazamiento, da, id_satmoneda)
VALUES (1, 'Pesos', '$', 1.00, '01-01-2000', 0.00, '0', 'MXN');

INSERT INTO tbl_cont_monedas(clave, moneda, simbolo, tc, fecha, desplazamiento, da, id_satmoneda)
VALUES (2, 'Dolares', 'USD$', 14.00, '01-01-2000', 0.00, '0', 'USD');



--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_public_cont_monedas AS 
 SELECT tbl_cont_monedas.clave, tbl_cont_monedas.moneda, tbl_cont_monedas.simbolo, tbl_cont_monedas.tc
   FROM tbl_cont_monedas;




--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_public_cont_catalogo AS 
 SELECT c1.cuenta AS numero, c1.acum, 
        CASE
            WHEN getlevelaccount(c1.cuenta) = 1 THEN c1.nombre
            WHEN getlevelaccount(c1.cuenta) = 2 THEN ((((( SELECT c2.nombre
               FROM tbl_cont_catalogo c2
              WHERE ("substring"(c1.cuenta::text, 1, 4) || '000000000000000'::text) = c2.cuenta::text))::text) || '/'::text) || c1.nombre::text)::character varying
            WHEN getlevelaccount(c1.cuenta) = 3 THEN ((((((( SELECT c2.nombre
               FROM tbl_cont_catalogo c2
              WHERE ("substring"(c1.cuenta::text, 1, 4) || '000000000000000'::text) = c2.cuenta::text))::text) || '/'::text) || ((( SELECT c3.nombre
               FROM tbl_cont_catalogo c3
              WHERE ("substring"(c1.cuenta::text, 1, 7) || '000000000000'::text) = c3.cuenta::text))::text)) || '/'::text) || c1.nombre::text)::character varying
            WHEN getlevelaccount(c1.cuenta) = 4 THEN ((((((((( SELECT c2.nombre
               FROM tbl_cont_catalogo c2
              WHERE ("substring"(c1.cuenta::text, 1, 4) || '000000000000000'::text) = c2.cuenta::text))::text) || '/'::text) || ((( SELECT c3.nombre
               FROM tbl_cont_catalogo c3
              WHERE ("substring"(c1.cuenta::text, 1, 7) || '000000000000'::text) = c3.cuenta::text))::text)) || '/'::text) || ((( SELECT c4.nombre
               FROM tbl_cont_catalogo c4
              WHERE ("substring"(c1.cuenta::text, 1, 10) || '000000000'::text) = c4.cuenta::text))::text)) || '/'::text) || c1.nombre::text)::character varying
            WHEN getlevelaccount(c1.cuenta) = 5 THEN ((((((((((( SELECT c2.nombre
               FROM tbl_cont_catalogo c2
              WHERE ("substring"(c1.cuenta::text, 1, 4) || '000000000000000'::text) = c2.cuenta::text))::text) || '/'::text) || ((( SELECT c3.nombre
               FROM tbl_cont_catalogo c3
              WHERE ("substring"(c1.cuenta::text, 1, 7) || '000000000000'::text) = c3.cuenta::text))::text)) || '/'::text) || ((( SELECT c4.nombre
               FROM tbl_cont_catalogo c4
              WHERE ("substring"(c1.cuenta::text, 1, 10) || '000000000'::text) = c4.cuenta::text))::text)) || '/'::text) || ((( SELECT c5.nombre
               FROM tbl_cont_catalogo c5
              WHERE ("substring"(c1.cuenta::text, 1, 13) || '000000'::text) = c5.cuenta::text))::text)) || '/'::text) || c1.nombre::text)::character varying
            WHEN getlevelaccount(c1.cuenta) = 6 THEN ((((((((((((( SELECT c2.nombre
               FROM tbl_cont_catalogo c2
              WHERE ("substring"(c1.cuenta::text, 1, 4) || '000000000000000'::text) = c2.cuenta::text))::text) || '/'::text) || ((( SELECT c3.nombre
               FROM tbl_cont_catalogo c3
              WHERE ("substring"(c1.cuenta::text, 1, 7) || '000000000000'::text) = c3.cuenta::text))::text)) || '/'::text) || ((( SELECT c4.nombre
               FROM tbl_cont_catalogo c4
              WHERE ("substring"(c1.cuenta::text, 1, 10) || '000000000'::text) = c4.cuenta::text))::text)) || '/'::text) || ((( SELECT c5.nombre
               FROM tbl_cont_catalogo c5
              WHERE ("substring"(c1.cuenta::text, 1, 13) || '000000'::text) = c5.cuenta::text))::text)) || '/'::text) || ((( SELECT c6.nombre
               FROM tbl_cont_catalogo c6
              WHERE ("substring"(c1.cuenta::text, 1, 16) || '000'::text) = c6.cuenta::text))::text)) || '/'::text) || c1.nombre::text)::character varying
            ELSE ''::character varying
        END AS nombre, c1.saldo
   FROM tbl_cont_catalogo c1;




--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_cont_polizas_detalle AS 
 SELECT p.id, p.part, p.cuenta AS numero, 
        CASE
            WHEN getlevelaccount(c1.cuenta) = 1 THEN c1.nombre
            WHEN getlevelaccount(c1.cuenta) = 2 THEN ((((( SELECT c2.nombre
               FROM tbl_cont_catalogo c2
              WHERE ("substring"(c1.cuenta::text, 1, 4) || '000000000000000'::text) = c2.cuenta::text))::text) || '/'::text) || c1.nombre::text)::character varying
            WHEN getlevelaccount(c1.cuenta) = 3 THEN ((((((( SELECT c2.nombre
               FROM tbl_cont_catalogo c2
              WHERE ("substring"(c1.cuenta::text, 1, 4) || '000000000000000'::text) = c2.cuenta::text))::text) || '/'::text) || ((( SELECT c3.nombre
               FROM tbl_cont_catalogo c3
              WHERE ("substring"(c1.cuenta::text, 1, 7) || '000000000000'::text) = c3.cuenta::text))::text)) || '/'::text) || c1.nombre::text)::character varying
            WHEN getlevelaccount(c1.cuenta) = 4 THEN ((((((((( SELECT c2.nombre
               FROM tbl_cont_catalogo c2
              WHERE ("substring"(c1.cuenta::text, 1, 4) || '000000000000000'::text) = c2.cuenta::text))::text) || '/'::text) || ((( SELECT c3.nombre
               FROM tbl_cont_catalogo c3
              WHERE ("substring"(c1.cuenta::text, 1, 7) || '000000000000'::text) = c3.cuenta::text))::text)) || '/'::text) || ((( SELECT c4.nombre
               FROM tbl_cont_catalogo c4
              WHERE ("substring"(c1.cuenta::text, 1, 10) || '000000000'::text) = c4.cuenta::text))::text)) || '/'::text) || c1.nombre::text)::character varying
            WHEN getlevelaccount(c1.cuenta) = 5 THEN ((((((((((( SELECT c2.nombre
               FROM tbl_cont_catalogo c2
              WHERE ("substring"(c1.cuenta::text, 1, 4) || '000000000000000'::text) = c2.cuenta::text))::text) || '/'::text) || ((( SELECT c3.nombre
               FROM tbl_cont_catalogo c3
              WHERE ("substring"(c1.cuenta::text, 1, 7) || '000000000000'::text) = c3.cuenta::text))::text)) || '/'::text) || ((( SELECT c4.nombre
               FROM tbl_cont_catalogo c4
              WHERE ("substring"(c1.cuenta::text, 1, 10) || '000000000'::text) = c4.cuenta::text))::text)) || '/'::text) || ((( SELECT c5.nombre
               FROM tbl_cont_catalogo c5
              WHERE ("substring"(c1.cuenta::text, 1, 13) || '000000'::text) = c5.cuenta::text))::text)) || '/'::text) || c1.nombre::text)::character varying
            WHEN getlevelaccount(c1.cuenta) = 6 THEN ((((((((((((( SELECT c2.nombre
               FROM tbl_cont_catalogo c2
              WHERE ("substring"(c1.cuenta::text, 1, 4) || '000000000000000'::text) = c2.cuenta::text))::text) || '/'::text) || ((( SELECT c3.nombre
               FROM tbl_cont_catalogo c3
              WHERE ("substring"(c1.cuenta::text, 1, 7) || '000000000000'::text) = c3.cuenta::text))::text)) || '/'::text) || ((( SELECT c4.nombre
               FROM tbl_cont_catalogo c4
              WHERE ("substring"(c1.cuenta::text, 1, 10) || '000000000'::text) = c4.cuenta::text))::text)) || '/'::text) || ((( SELECT c5.nombre
               FROM tbl_cont_catalogo c5
              WHERE ("substring"(c1.cuenta::text, 1, 13) || '000000'::text) = c5.cuenta::text))::text)) || '/'::text) || ((( SELECT c6.nombre
               FROM tbl_cont_catalogo c6
              WHERE ("substring"(c1.cuenta::text, 1, 16) || '000'::text) = c6.cuenta::text))::text)) || '/'::text) || c1.nombre::text)::character varying
            ELSE ''::character varying
        END AS nombre, p.concepto, p.moneda, p.parcial, p.tc, p.debe, p.haber
   FROM tbl_cont_polizas_detalle p
   JOIN tbl_cont_catalogo c1 ON p.cuenta = c1.cuenta;


  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_cont_rubros_agregar(_tipo character, _nombre character varying, _cuentainicial character, _cuentafinal character)
  RETURNS SETOF record AS
$BODY$
--BEGIN TRANSACTION
DECLARE _err int; _result varchar(255); __IDENTITY int;
BEGIN
	_err := 0;
	_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_RUBROS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCOK');
	
	IF( _CuentaInicial > _CuentaFinal OR _CuentaInicial < '0000' OR _CuentaFinal > '9999' OR
	      (select count(*) 
		from TBL_CONT_RUBROS
			where (_CuentaInicial < CuentaInicial and _CuentaFinal < CuentaInicial ) or
				(_CuentaInicial > CuentaFinal and _CuentaFinal > CuentaFinal) ) <> ( select count(*) from TBL_CONT_RUBROS ) )
	THEN
		_err := 3;
		_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_RUBROS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR');
	END IF;
	
	IF(_err = 0)
	THEN
		INSERT INTO TBL_CONT_RUBROS
		VALUES(default, _Tipo, _Nombre, _CuentaInicial, _CuentaFinal)
		RETURNING currval(pg_get_serial_sequence('TBL_CONT_RUBROS', 'clave')) INTO __IDENTITY;
	END IF;
	
	RETURN QUERY SELECT _err, _result, __IDENTITY;
	
END
$BODY$
  LANGUAGE 'plpgsql';


  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_cont_polizas_agregar_tipos(_id_clasificacion character varying, _descripcion character varying, _ficha character varying)
  RETURNS SETOF record AS
$BODY$
DECLARE _err int; _result varchar(255);
BEGIN
	_err := 0;
	_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_TIPOPOLIZA' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCOK'); --'El tipo de p√≥liza ha quedado registrada';
	
	IF (select count(*) from TBL_CONT_POLIZAS_CLASIFICACIONES where ID_Clasificacion = _ID_Clasificacion) > 0 
	THEN
		_err := 3;
		_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_TIPOPOLIZA' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'ERROR: Este tipo de p√≥liza ya existe, No se puede agregar';
	END IF;
	
	IF(_err = 0)
	THEN
		insert into TBL_CONT_POLIZAS_CLASIFICACIONES
		values(_ID_Clasificacion, _Descripcion, _Ficha);
	END IF;	


	RETURN QUERY SELECT _err, _result, _ID_Clasificacion;

END
$BODY$
  LANGUAGE 'plpgsql';


  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_cont_catalogo_agregar(_cuenta character, _nombre character varying, _acum bit, _estatus character, _ce_codagrup character varying, _ce_natur character)
  RETURNS SETOF record AS
$BODY$
DECLARE _nivel smallint; _err int; _result varchar(255);
--declare l2
	_cont smallint; _cont2 smallint; _aestudio varchar(19); _aestudio_niv char(3);
BEGIN
	_err := 0;
	_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_CATCUENTAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCOK');
	_nivel := GetLevelAccount(_Cuenta);	   

	-- Si no tiene nivel es error procede
	IF _nivel is null
	THEN
		_err := 3;
		_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_CATCUENTAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); -- Nivel Incorrecto
	END IF;
	IF(select count(*) from TBL_CONT_CATALOGO where Cuenta = _Cuenta) > 0
	THEN
		_err := 3;
		_result := (select msj2 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_CATCUENTAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR') || _Cuenta; 
	END IF;
	-- Si no existe rubro para esta cuenta
	IF(select count(*) from TBL_CONT_RUBROS where substring(_Cuenta, 1, 4) between CuentaInicial AND CuentaFinal ) = 0
	THEN
		_err := 3;
		_result := (select msj3 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_CATCUENTAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR');
	END IF;
	
	IF _Acum = '0' and _nivel = 1 -- si no es acumulativa, y el nivel es el primero marca error 
	THEN
		_err := 3;
		_result := (select msj4 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_CATCUENTAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR');
	END IF;
	
	IF _nivel > 1 -- si el nivel de cuenta es mayor que 1 quiere decir que tiene que tener sus cuentas acumulativas de niveles superior
	THEN
		_cont := 1;
		while( _cont < _nivel)
		loop
			_aestudio := substring(_Cuenta, 1, (_cont * 3) + 1);
			_cont2 := ( _cont * 3 ) + 1;

			while(_cont2 < 19)
			loop
				_aestudio := _aestudio || '0';
				_cont2 := _cont2 + 1;
			end loop;
			
			if(select count(*) from TBL_CONT_CATALOGO
				where Cuenta = _aestudio) < 1 
				or (select Acum from TBL_CONT_CATALOGO
					where Cuenta = _aestudio) = '0'
			then
				_err := 3;
				_result := (select msj5 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_CATCUENTAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR');
			end if;
			_cont := _cont + 1;	
		end loop;
		
		
	END IF;

	--por ultimo verifica que no hayan nivele en 000 por ejemplo 1109-000-001-000-000-000 esta mal porque es de nivel 3 y su padre de nivel 1
	IF _err = 0
	THEN
		_aestudio_niv := substring(_Cuenta, 5, 3);
		if(_aestudio_niv = '000' and substring(_Cuenta, 8, 12) <> '000000000000')
		then
			_err := 3;
			_result := (select msj5 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_CATCUENTAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR');
		end if;
		_aestudio_niv := substring(_Cuenta, 8, 3);
		if(_aestudio_niv = '000' and substring(_Cuenta, 11, 9) <> '000000000')
		then
			_err := 3;
			_result := (select msj5 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_CATCUENTAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR');
		end if;
		_aestudio_niv := substring(_Cuenta, 11, 3);
		if(_aestudio_niv = '000' and substring(_Cuenta, 14, 6) <> '000000')
		then
			_err := 3;
			_result := (select msj5 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_CATCUENTAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR');
		end if;
		_aestudio_niv := substring(_Cuenta, 14, 3);
		if(_aestudio_niv = '000' and substring(_Cuenta, 17, 3) <> '000')
		then
			_err := 3;
			_result := (select msj5 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_CATCUENTAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR');
		end if;
	END IF;
	
	IF _err = 0
	THEN
		INSERT INTO TBL_CONT_CATALOGO
		VALUES(_Cuenta, _Acum, _Nombre, '0.0', _Estatus, _CE_CodAgrup, _CE_Natur);
		
		INSERT INTO TBL_CONT_CATALOGO_DETALLE
		SELECT Mes, Ano, _Cuenta, '0.0', '0.0', '0', '0.0'
		FROM TBL_CONT_CATALOGO_PERIODOS;
		
	END IF;
		
	RETURN QUERY SELECT _err, _result, _Cuenta;
END
$BODY$
  LANGUAGE plpgsql;

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_cont_polizas_agregar(
    _tipo character,
    _fecha timestamp without time zone,
    _concepto character varying,
    _transito bit,
    _ref character varying,
    _total numeric,
    _id_clasificacion character varying)
  RETURNS SETOF record AS
$BODY$
DECLARE
	_err int; _result varchar(255); _mes smallint; _ano smallint; _numero int; __IDENTITY int; _SumDebe numeric(19,4); _SumHaber numeric(19,4); _Status char(1);
BEGIN
	_err := 0;
	_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_POLIZAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCOK'); --'La poliza se ha registrado satisfactoriamente'
	_mes := date_part('month',_Fecha);
	_ano := date_part('year',_Fecha);
	_numero := (select Numero from TBL_CONT_POLIZAS_TIPOS where ID_Tipo = _Tipo);
	_SumDebe := (select sum(Debe) from _TMP_CONT_POLIZAS_DETALLE);
	_SumHaber := (select sum(Haber) from _TMP_CONT_POLIZAS_DETALLE);
	_Status := case when _Transito = '1' then 'T' else 'G' end;
	
	IF( (select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano and Cerrado = '1') > 0
		OR (select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano) < 1 )
	THEN
		_err := 3;
		_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_POLIZAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'ERROR: La fecha de poliza pertenece a un periodo cerrado o inexistente'
	END IF;
	
	IF _SumDebe <> _SumHaber
	THEN
		_err := 3;
		_result := (select msj4 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_POLIZAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'ERROR: La sumas desiguales para la partida doble'
	END IF;

	IF (select count(*) from _TMP_CONT_POLIZAS_DETALLE d join TBL_CONT_CATALOGO c on d.Cuenta = c.Cuenta where c.Estatus = 'D') > 0
	THEN
		_err := 3;
		_result := (select msj5 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_POLIZAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'ERROR: Alguna de las cuentas contables de esta p√≥liza esta descontinuada. cambia el estatus de la cuenta a Activa'
	END IF;
	
	IF _err = 0
	THEN
		INSERT INTO TBL_CONT_POLIZAS(Tipo, Numero, Fecha, Concepto, Ref, Status, Total, ID_Clasificacion)
		VALUES(_Tipo, _numero, _Fecha, _Concepto, _Ref, _Status, _SumDebe, _id_clasificacion)
		RETURNING currval(pg_get_serial_sequence('TBL_CONT_POLIZAS', 'id')) INTO __IDENTITY;
		
		INSERT INTO TBL_CONT_POLIZAS_DETALLE
		SELECT __IDENTITY, Part, Cuenta, Concepto, Parcial, Moneda, TC, Debe, Haber, 0.0 --Este saldo 0.0 ser√° actualizado en la actualizaci√≥n de saldos contables
		FROM _TMP_CONT_POLIZAS_DETALLE;

		BEGIN
			INSERT INTO TBL_CONT_POLIZAS_DETALLE_CE_CHEQUES(  id_pol, id_part, num, banco, ctaori, fecha, monto, benef, rfc, banemisext, moneda, tipcamb )
			SELECT __IDENTITY, id_part, num, banco, ctaori, fecha, monto, benef, rfc, banemisext, moneda, tipcamb
			FROM _TMP_CONT_POLIZAS_DETALLE_CE_CHEQUES;
		EXCEPTION WHEN undefined_table THEN
			-- Simplemente ignora.
		END;

		BEGIN
			INSERT INTO TBL_CONT_POLIZAS_DETALLE_CE_TRANSFERENCIAS( id_pol, id_part, ctaori, bancoori, monto, ctadest, bancodest, fecha, benef, rfc, bancooriext, bancodestext, moneda, tipcamb )
			SELECT __IDENTITY, id_part, ctaori, bancoori, monto, ctadest, bancodest, fecha, benef, rfc, bancooriext, bancodestext, moneda, tipcamb
			FROM _TMP_CONT_POLIZAS_DETALLE_CE_TRANSFERENCIAS;
		EXCEPTION WHEN undefined_table THEN
			-- Simplemente ignora.
		END;

		BEGIN
			INSERT INTO TBL_CONT_POLIZAS_DETALLE_CE_OTRMETODOPAGO(  id_pol, id_part, metpagopol, fecha, benef, rfc, monto, moneda, tipcamb  )
			SELECT __IDENTITY, id_part, metpagopol, fecha, benef, rfc, monto, moneda, tipcamb
			FROM _TMP_CONT_POLIZAS_DETALLE_CE_OTRMETODOPAGO;
		EXCEPTION WHEN undefined_table THEN
			-- Simplemente ignora.
		END;

		BEGIN
			INSERT INTO TBL_CONT_POLIZAS_DETALLE_CE_COMPROBANTES( id_pol, id_part, uuid_cfdi, monto, rfc, id_tipo, moneda, tipcamb, cfd_cbb_serie, cfd_cbb_numfol, numfactext, taxid )
			SELECT __IDENTITY, id_part, uuid_cfdi, monto, rfc, id_tipo, moneda, tipcamb, cfd_cbb_serie, cfd_cbb_numfol, numfactext, taxid
			FROM _TMP_CONT_POLIZAS_DETALLE_CE_COMPROBANTES;
		EXCEPTION WHEN undefined_table THEN
			-- Simplemente ignora.
		END;
		
		UPDATE TBL_CONT_POLIZAS_TIPOS
		SET Numero = _numero + 1
		WHERE ID_Tipo = _Tipo;
		
	END IF;

	RETURN QUERY SELECT _err, _result, __IDENTITY;
END
$BODY$
  LANGUAGE plpgsql;
--ALTER FUNCTION sp_cont_polizas_agregar(character, timestamp without time zone, character varying, bit, character varying, numeric, character varying)

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION getconfcc()
  RETURNS integer AS
$BODY$  
BEGIN
	return (select ventero from tbl_variables where id_variable = 'CONF_CC');
END
$BODY$
  LANGUAGE 'plpgsql';



--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_catalog_cuentascont AS 
 SELECT 
        CASE
            WHEN getconfcc() = 1 THEN "substring"(c1.cuenta::text, 1, 4)::bpchar
            WHEN getconfcc() = 2 THEN (("substring"(c1.cuenta::text, 1, 4) || '-'::text) || "substring"(c1.cuenta::text, 5, 3))::bpchar
            WHEN getconfcc() = 3 THEN (((("substring"(c1.cuenta::text, 1, 4) || '-'::text) || "substring"(c1.cuenta::text, 5, 3)) || '-'::text) || "substring"(c1.cuenta::text, 8, 3))::bpchar
            WHEN getconfcc() = 4 THEN (((((("substring"(c1.cuenta::text, 1, 4) || '-'::text) || "substring"(c1.cuenta::text, 5, 3)) || '-'::text) || "substring"(c1.cuenta::text, 8, 3)) || '-'::text) || "substring"(c1.cuenta::text, 11, 3))::bpchar
            WHEN getconfcc() = 5 THEN (((((((("substring"(c1.cuenta::text, 1, 4) || '-'::text) || "substring"(c1.cuenta::text, 5, 3)) || '-'::text) || "substring"(c1.cuenta::text, 8, 3)) || '-'::text) || "substring"(c1.cuenta::text, 11, 3)) || '-'::text) || "substring"(c1.cuenta::text, 14, 3))::bpchar
            WHEN getconfcc() = 6 THEN (((((((((("substring"(c1.cuenta::text, 1, 4) || '-'::text) || "substring"(c1.cuenta::text, 5, 3)) || '-'::text) || "substring"(c1.cuenta::text, 8, 3)) || '-'::text) || "substring"(c1.cuenta::text, 11, 3)) || '-'::text) || "substring"(c1.cuenta::text, 14, 3)) || '-'::text) || "substring"(c1.cuenta::text, 17, 3))::bpchar
            ELSE c1.cuenta
        END AS clave, 
        CASE
            WHEN getlevelaccount(c1.cuenta) = 1 THEN c1.nombre
            WHEN getlevelaccount(c1.cuenta) = 2 THEN ((((( SELECT c2.nombre
               FROM tbl_cont_catalogo c2
              WHERE ("substring"(c1.cuenta::text, 1, 4) || '000000000000000'::text) = c2.cuenta::text))::text) || '/'::text) || c1.nombre::text)::character varying
            WHEN getlevelaccount(c1.cuenta) = 3 THEN ((((((( SELECT c2.nombre
               FROM tbl_cont_catalogo c2
              WHERE ("substring"(c1.cuenta::text, 1, 4) || '000000000000000'::text) = c2.cuenta::text))::text) || '/'::text) || ((( SELECT c3.nombre
               FROM tbl_cont_catalogo c3
              WHERE ("substring"(c1.cuenta::text, 1, 7) || '000000000000'::text) = c3.cuenta::text))::text)) || '/'::text) || c1.nombre::text)::character varying
            WHEN getlevelaccount(c1.cuenta) = 4 THEN ((((((((( SELECT c2.nombre
               FROM tbl_cont_catalogo c2
              WHERE ("substring"(c1.cuenta::text, 1, 4) || '000000000000000'::text) = c2.cuenta::text))::text) || '/'::text) || ((( SELECT c3.nombre
               FROM tbl_cont_catalogo c3
              WHERE ("substring"(c1.cuenta::text, 1, 7) || '000000000000'::text) = c3.cuenta::text))::text)) || '/'::text) || ((( SELECT c4.nombre
               FROM tbl_cont_catalogo c4
              WHERE ("substring"(c1.cuenta::text, 1, 10) || '000000000'::text) = c4.cuenta::text))::text)) || '/'::text) || c1.nombre::text)::character varying
            WHEN getlevelaccount(c1.cuenta) = 5 THEN ((((((((((( SELECT c2.nombre
               FROM tbl_cont_catalogo c2
              WHERE ("substring"(c1.cuenta::text, 1, 4) || '000000000000000'::text) = c2.cuenta::text))::text) || '/'::text) || ((( SELECT c3.nombre
               FROM tbl_cont_catalogo c3
              WHERE ("substring"(c1.cuenta::text, 1, 7) || '000000000000'::text) = c3.cuenta::text))::text)) || '/'::text) || ((( SELECT c4.nombre
               FROM tbl_cont_catalogo c4
              WHERE ("substring"(c1.cuenta::text, 1, 10) || '000000000'::text) = c4.cuenta::text))::text)) || '/'::text) || ((( SELECT c5.nombre
               FROM tbl_cont_catalogo c5
              WHERE ("substring"(c1.cuenta::text, 1, 13) || '000000'::text) = c5.cuenta::text))::text)) || '/'::text) || c1.nombre::text)::character varying
            WHEN getlevelaccount(c1.cuenta) = 6 THEN ((((((((((((( SELECT c2.nombre
               FROM tbl_cont_catalogo c2
              WHERE ("substring"(c1.cuenta::text, 1, 4) || '000000000000000'::text) = c2.cuenta::text))::text) || '/'::text) || ((( SELECT c3.nombre
               FROM tbl_cont_catalogo c3
              WHERE ("substring"(c1.cuenta::text, 1, 7) || '000000000000'::text) = c3.cuenta::text))::text)) || '/'::text) || ((( SELECT c4.nombre
               FROM tbl_cont_catalogo c4
              WHERE ("substring"(c1.cuenta::text, 1, 10) || '000000000'::text) = c4.cuenta::text))::text)) || '/'::text) || ((( SELECT c5.nombre
               FROM tbl_cont_catalogo c5
              WHERE ("substring"(c1.cuenta::text, 1, 13) || '000000'::text) = c5.cuenta::text))::text)) || '/'::text) || ((( SELECT c6.nombre
               FROM tbl_cont_catalogo c6
              WHERE ("substring"(c1.cuenta::text, 1, 16) || '000'::text) = c6.cuenta::text))::text)) || '/'::text) || c1.nombre::text)::character varying
            ELSE c1.nombre
        END AS descripcion, 
        CASE
            WHEN c1.acum = B'1'::"bit" THEN '()'::text
            ELSE '&nbsp;'::text
        END AS especial
   FROM tbl_cont_catalogo c1;

--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_catalog_cuentascontdet AS 
 SELECT 
        CASE
            WHEN getconfcc() = 1 THEN "substring"(c1.cuenta::text, 1, 4)::bpchar
            WHEN getconfcc() = 2 THEN (("substring"(c1.cuenta::text, 1, 4) || '-'::text) || "substring"(c1.cuenta::text, 5, 3))::bpchar
            WHEN getconfcc() = 3 THEN (((("substring"(c1.cuenta::text, 1, 4) || '-'::text) || "substring"(c1.cuenta::text, 5, 3)) || '-'::text) || "substring"(c1.cuenta::text, 8, 3))::bpchar
            WHEN getconfcc() = 4 THEN (((((("substring"(c1.cuenta::text, 1, 4) || '-'::text) || "substring"(c1.cuenta::text, 5, 3)) || '-'::text) || "substring"(c1.cuenta::text, 8, 3)) || '-'::text) || "substring"(c1.cuenta::text, 11, 3))::bpchar
            WHEN getconfcc() = 5 THEN (((((((("substring"(c1.cuenta::text, 1, 4) || '-'::text) || "substring"(c1.cuenta::text, 5, 3)) || '-'::text) || "substring"(c1.cuenta::text, 8, 3)) || '-'::text) || "substring"(c1.cuenta::text, 11, 3)) || '-'::text) || "substring"(c1.cuenta::text, 14, 3))::bpchar
            WHEN getconfcc() = 6 THEN (((((((((("substring"(c1.cuenta::text, 1, 4) || '-'::text) || "substring"(c1.cuenta::text, 5, 3)) || '-'::text) || "substring"(c1.cuenta::text, 8, 3)) || '-'::text) || "substring"(c1.cuenta::text, 11, 3)) || '-'::text) || "substring"(c1.cuenta::text, 14, 3)) || '-'::text) || "substring"(c1.cuenta::text, 17, 3))::bpchar
            ELSE c1.cuenta
        END AS clave, 
        CASE
            WHEN getlevelaccount(c1.cuenta) = 1 THEN c1.nombre
            WHEN getlevelaccount(c1.cuenta) = 2 THEN ((((( SELECT c2.nombre
               FROM tbl_cont_catalogo c2
              WHERE ("substring"(c1.cuenta::text, 1, 4) || '000000000000000'::text) = c2.cuenta::text))::text) || '/'::text) || c1.nombre::text)::character varying
            WHEN getlevelaccount(c1.cuenta) = 3 THEN ((((((( SELECT c2.nombre
               FROM tbl_cont_catalogo c2
              WHERE ("substring"(c1.cuenta::text, 1, 4) || '000000000000000'::text) = c2.cuenta::text))::text) || '/'::text) || ((( SELECT c3.nombre
               FROM tbl_cont_catalogo c3
              WHERE ("substring"(c1.cuenta::text, 1, 7) || '000000000000'::text) = c3.cuenta::text))::text)) || '/'::text) || c1.nombre::text)::character varying
            WHEN getlevelaccount(c1.cuenta) = 4 THEN ((((((((( SELECT c2.nombre
               FROM tbl_cont_catalogo c2
              WHERE ("substring"(c1.cuenta::text, 1, 4) || '000000000000000'::text) = c2.cuenta::text))::text) || '/'::text) || ((( SELECT c3.nombre
               FROM tbl_cont_catalogo c3
              WHERE ("substring"(c1.cuenta::text, 1, 7) || '000000000000'::text) = c3.cuenta::text))::text)) || '/'::text) || ((( SELECT c4.nombre
               FROM tbl_cont_catalogo c4
              WHERE ("substring"(c1.cuenta::text, 1, 10) || '000000000'::text) = c4.cuenta::text))::text)) || '/'::text) || c1.nombre::text)::character varying
            WHEN getlevelaccount(c1.cuenta) = 5 THEN ((((((((((( SELECT c2.nombre
               FROM tbl_cont_catalogo c2
              WHERE ("substring"(c1.cuenta::text, 1, 4) || '000000000000000'::text) = c2.cuenta::text))::text) || '/'::text) || ((( SELECT c3.nombre
               FROM tbl_cont_catalogo c3
              WHERE ("substring"(c1.cuenta::text, 1, 7) || '000000000000'::text) = c3.cuenta::text))::text)) || '/'::text) || ((( SELECT c4.nombre
               FROM tbl_cont_catalogo c4
              WHERE ("substring"(c1.cuenta::text, 1, 10) || '000000000'::text) = c4.cuenta::text))::text)) || '/'::text) || ((( SELECT c5.nombre
               FROM tbl_cont_catalogo c5
              WHERE ("substring"(c1.cuenta::text, 1, 13) || '000000'::text) = c5.cuenta::text))::text)) || '/'::text) || c1.nombre::text)::character varying
            WHEN getlevelaccount(c1.cuenta) = 6 THEN ((((((((((((( SELECT c2.nombre
               FROM tbl_cont_catalogo c2
              WHERE ("substring"(c1.cuenta::text, 1, 4) || '000000000000000'::text) = c2.cuenta::text))::text) || '/'::text) || ((( SELECT c3.nombre
               FROM tbl_cont_catalogo c3
              WHERE ("substring"(c1.cuenta::text, 1, 7) || '000000000000'::text) = c3.cuenta::text))::text)) || '/'::text) || ((( SELECT c4.nombre
               FROM tbl_cont_catalogo c4
              WHERE ("substring"(c1.cuenta::text, 1, 10) || '000000000'::text) = c4.cuenta::text))::text)) || '/'::text) || ((( SELECT c5.nombre
               FROM tbl_cont_catalogo c5
              WHERE ("substring"(c1.cuenta::text, 1, 13) || '000000'::text) = c5.cuenta::text))::text)) || '/'::text) || ((( SELECT c6.nombre
               FROM tbl_cont_catalogo c6
              WHERE ("substring"(c1.cuenta::text, 1, 16) || '000'::text) = c6.cuenta::text))::text)) || '/'::text) || c1.nombre::text)::character varying
            ELSE c1.nombre
        END AS descripcion, '&nbsp;'::text AS especial
   FROM tbl_cont_catalogo c1
  WHERE c1.acum = B'0'::"bit";

--ALTER TABLE view_catalog_cuentascontdet

--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_catalog_cuentascontacum AS 
 SELECT 
        CASE
            WHEN getconfcc() = 1 THEN "substring"(c1.cuenta::text, 1, 4)::bpchar
            WHEN getconfcc() = 2 THEN (("substring"(c1.cuenta::text, 1, 4) || '-'::text) || "substring"(c1.cuenta::text, 5, 3))::bpchar
            WHEN getconfcc() = 3 THEN (((("substring"(c1.cuenta::text, 1, 4) || '-'::text) || "substring"(c1.cuenta::text, 5, 3)) || '-'::text) || "substring"(c1.cuenta::text, 8, 3))::bpchar
            WHEN getconfcc() = 4 THEN (((((("substring"(c1.cuenta::text, 1, 4) || '-'::text) || "substring"(c1.cuenta::text, 5, 3)) || '-'::text) || "substring"(c1.cuenta::text, 8, 3)) || '-'::text) || "substring"(c1.cuenta::text, 11, 3))::bpchar
            WHEN getconfcc() = 5 THEN (((((((("substring"(c1.cuenta::text, 1, 4) || '-'::text) || "substring"(c1.cuenta::text, 5, 3)) || '-'::text) || "substring"(c1.cuenta::text, 8, 3)) || '-'::text) || "substring"(c1.cuenta::text, 11, 3)) || '-'::text) || "substring"(c1.cuenta::text, 14, 3))::bpchar
            WHEN getconfcc() = 6 THEN (((((((((("substring"(c1.cuenta::text, 1, 4) || '-'::text) || "substring"(c1.cuenta::text, 5, 3)) || '-'::text) || "substring"(c1.cuenta::text, 8, 3)) || '-'::text) || "substring"(c1.cuenta::text, 11, 3)) || '-'::text) || "substring"(c1.cuenta::text, 14, 3)) || '-'::text) || "substring"(c1.cuenta::text, 17, 3))::bpchar
            ELSE c1.cuenta
        END AS clave, 
        CASE
            WHEN getlevelaccount(c1.cuenta) = 1 THEN c1.nombre
            WHEN getlevelaccount(c1.cuenta) = 2 THEN ((((( SELECT c2.nombre
               FROM tbl_cont_catalogo c2
              WHERE ("substring"(c1.cuenta::text, 1, 4) || '000000000000000'::text) = c2.cuenta::text))::text) || '/'::text) || c1.nombre::text)::character varying
            WHEN getlevelaccount(c1.cuenta) = 3 THEN ((((((( SELECT c2.nombre
               FROM tbl_cont_catalogo c2
              WHERE ("substring"(c1.cuenta::text, 1, 4) || '000000000000000'::text) = c2.cuenta::text))::text) || '/'::text) || ((( SELECT c3.nombre
               FROM tbl_cont_catalogo c3
              WHERE ("substring"(c1.cuenta::text, 1, 7) || '000000000000'::text) = c3.cuenta::text))::text)) || '/'::text) || c1.nombre::text)::character varying
            WHEN getlevelaccount(c1.cuenta) = 4 THEN ((((((((( SELECT c2.nombre
               FROM tbl_cont_catalogo c2
              WHERE ("substring"(c1.cuenta::text, 1, 4) || '000000000000000'::text) = c2.cuenta::text))::text) || '/'::text) || ((( SELECT c3.nombre
               FROM tbl_cont_catalogo c3
              WHERE ("substring"(c1.cuenta::text, 1, 7) || '000000000000'::text) = c3.cuenta::text))::text)) || '/'::text) || ((( SELECT c4.nombre
               FROM tbl_cont_catalogo c4
              WHERE ("substring"(c1.cuenta::text, 1, 10) || '000000000'::text) = c4.cuenta::text))::text)) || '/'::text) || c1.nombre::text)::character varying
            WHEN getlevelaccount(c1.cuenta) = 5 THEN ((((((((((( SELECT c2.nombre
               FROM tbl_cont_catalogo c2
              WHERE ("substring"(c1.cuenta::text, 1, 4) || '000000000000000'::text) = c2.cuenta::text))::text) || '/'::text) || ((( SELECT c3.nombre
               FROM tbl_cont_catalogo c3
              WHERE ("substring"(c1.cuenta::text, 1, 7) || '000000000000'::text) = c3.cuenta::text))::text)) || '/'::text) || ((( SELECT c4.nombre
               FROM tbl_cont_catalogo c4
              WHERE ("substring"(c1.cuenta::text, 1, 10) || '000000000'::text) = c4.cuenta::text))::text)) || '/'::text) || ((( SELECT c5.nombre
               FROM tbl_cont_catalogo c5
              WHERE ("substring"(c1.cuenta::text, 1, 13) || '000000'::text) = c5.cuenta::text))::text)) || '/'::text) || c1.nombre::text)::character varying
            WHEN getlevelaccount(c1.cuenta) = 6 THEN ((((((((((((( SELECT c2.nombre
               FROM tbl_cont_catalogo c2
              WHERE ("substring"(c1.cuenta::text, 1, 4) || '000000000000000'::text) = c2.cuenta::text))::text) || '/'::text) || ((( SELECT c3.nombre
               FROM tbl_cont_catalogo c3
              WHERE ("substring"(c1.cuenta::text, 1, 7) || '000000000000'::text) = c3.cuenta::text))::text)) || '/'::text) || ((( SELECT c4.nombre
               FROM tbl_cont_catalogo c4
              WHERE ("substring"(c1.cuenta::text, 1, 10) || '000000000'::text) = c4.cuenta::text))::text)) || '/'::text) || ((( SELECT c5.nombre
               FROM tbl_cont_catalogo c5
              WHERE ("substring"(c1.cuenta::text, 1, 13) || '000000'::text) = c5.cuenta::text))::text)) || '/'::text) || ((( SELECT c6.nombre
               FROM tbl_cont_catalogo c6
              WHERE ("substring"(c1.cuenta::text, 1, 16) || '000'::text) = c6.cuenta::text))::text)) || '/'::text) || c1.nombre::text)::character varying
            ELSE c1.nombre
        END AS descripcion, '&nbsp;'::text AS especial
   FROM tbl_cont_catalogo c1
  WHERE c1.acum = B'1'::"bit";

--ALTER TABLE view_catalog_cuentascontacum

--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_catalog_clasificaciones AS 
 SELECT tbl_cont_polizas_clasificaciones.id_clasificacion AS clave, tbl_cont_polizas_clasificaciones.descripcion, tbl_cont_polizas_clasificaciones.ficha AS especial
   FROM tbl_cont_polizas_clasificaciones;

--ALTER TABLE view_catalog_clasificaciones 

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_cont_polizas_cambiar(_id integer, _tipo character, _fecha timestamp without time zone, _concepto character varying, _transito bit, _ref character varying, _total numeric, _id_clasificacion character varying)
  RETURNS SETOF record AS
$BODY$
DECLARE _err int; _result varchar(255); _mes smallint; _ano smallint; _tipopol character(2); _SumDebe numeric(19,4); _SumHaber numeric(19,4);
BEGIN
	_err := 0;
	_result := (select msj2 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_POLIZAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCOK'); --'La poliza se cambio satisfactoriamente';
	_mes := date_part('month',_Fecha);
	_ano := date_part('year',_Fecha);
	_tipopol := (select Tipo from TBL_CONT_POLIZAS where ID = _id);
	_SumDebe := (select sum(Debe) from _TMP_CONT_POLIZAS_DETALLE);
	_SumHaber := (select sum(Haber) from _TMP_CONT_POLIZAS_DETALLE);

	IF( (select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano and Cerrado = '1') > 0
		OR (select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano) < 1 )
	THEN
		_err := 3;
		_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_POLIZAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'ERROR: La fecha de poliza pertenece a un periodo cerrado o inexistente'
	END IF;

	IF( _tipo <> _tipopol )
	THEN
		_err := 3;
		_result := (select msj2 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_POLIZAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'ERROR: Los tipos no coinciden'
	END IF;

	IF (select count(*) from _TMP_CONT_POLIZAS_DETALLE d join TBL_CONT_CATALOGO c on d.Cuenta = c.Cuenta where c.Estatus = 'D') > 0
	THEN
		_err := 3;
		_result := (select msj5 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_POLIZAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'ERROR: Alguna de las cuentas contables de esta p√≥liza esta descontinuada. cambia el estatus de la cuenta a Activa'
	END IF;

	IF _SumDebe <> _SumHaber
	THEN
		_err := 3;
		_result := (select msj4 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_POLIZAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'ERROR: La sumas desiguales para la partida doble'
	END IF;

	IF (select count(*) from tbl_cont_polizas_detalle_ce_cheques where id_pol = _id) > 0 OR 
		(select count(*) from tbl_cont_polizas_detalle_ce_transferencias where id_pol = _id) > 0 OR 
			 (select count(*) from tbl_cont_polizas_detalle_ce_comprobantes where id_pol = _id) > 0
	THEN
		_err := 3;
		_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_POLIZAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR2'); --'ERROR: La poliza contiene contabilidad electronica i no se puede alterar'
	END IF;
	 
	IF(_err = 0)
	THEN
		UPDATE TBL_CONT_POLIZAS
		SET Fecha = _Fecha, Concepto = _Concepto, Total = _Total, ID_Clasificacion = _id_clasificacion
		WHERE ID = _id;

		DELETE FROM TBL_CONT_POLIZAS_DETALLE
		WHERE ID = _id;
		
		INSERT INTO TBL_CONT_POLIZAS_DETALLE
		SELECT _id, Part, Cuenta, Concepto, Parcial, Moneda, TC, Debe, Haber
		FROM _TMP_CONT_POLIZAS_DETALLE;
	END IF;

	RETURN QUERY SELECT _err, _result, _id;
END
$BODY$
  LANGUAGE plpgsql;

  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_cont_polizas_cancelar(_id integer, _fecha timestamp without time zone)
  RETURNS SETOF record AS
$BODY$
DECLARE _err int; _result varchar(255); _mes smallint; _ano smallint;  
BEGIN
	_err := 0;
	_result := (select msj3 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_POLIZAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCOK'); --'La poliza se cancelo satisfactoriamente';
	_mes := date_part('month',_Fecha);
	_ano := date_part('year',_Fecha);
	
	IF( (select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano and Cerrado = '1') > 0
		OR (select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano) < 1 )
	THEN
		_err := 3;
		_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_POLIZAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'ERROR: La fecha de poliza pertenece a un periodo cerrado o inexistente'
	END IF;

	IF(_err = 0)
	THEN
		UPDATE TBL_CONT_POLIZAS
		SET Status = 'C'
		WHERE ID = _id;

	END IF;

	RETURN QUERY SELECT _err, _result, _id;
END
$BODY$
  LANGUAGE 'plpgsql';


--/////////////////////////////////////////////////////////////////// CFD //////////////////////////////////////////////



--@FIN_BLOQUE
CREATE TABLE tbl_cfd
(
  id_cfd serial NOT NULL,
  rfc character varying(15) NOT NULL,
  serie character varying(10) NOT NULL,
  folio integer NOT NULL,
  noaprobacion integer NOT NULL,
  anoaprobacion smallint NOT NULL,
  fecha timestamp without time zone NOT NULL,
  total numeric(19,4) NOT NULL,
  impuesto numeric(19,4) NOT NULL,
  estatus smallint NOT NULL,
  efecto character(1) NOT NULL,
  pedimento character varying(300) NOT NULL,
  fechapedimento character varying(350) NOT NULL,
  aduana character varying(600) NOT NULL,
  fsi_tipo character(3) NOT NULL,
  fsi_id integer NOT NULL,
  nocertificado character varying(20) NOT NULL,
  cadenaoriginal character varying(8000) NOT NULL,
  sello character varying(8000) NOT NULL,
  lugarexpedicion character varying(8000) NOT NULL,
  metododepago character varying(254) NOT NULL,
  fsi_esp1 character varying(20) NOT NULL,
  CONSTRAINT pk_tbl_cfd PRIMARY KEY (id_cfd )
);



--@FIN_BLOQUE
CREATE TABLE tbl_cfd_certificados
(
  cfd_nocertificado character varying(20) NOT NULL,
  cfd_archivocertificado character varying(254) NOT NULL,
  cfd_caducidadcertificado timestamp without time zone NOT NULL,
  cfd_archivollave character varying(254) NOT NULL,
  cfd_clavellave character varying(254) NOT NULL,
  CONSTRAINT pk_tbl_cfd_certificados PRIMARY KEY (cfd_nocertificado)
);



--@FIN_BLOQUE
CREATE TABLE tbl_cfd_expediciones
(
  cfd_id_expedicion smallint NOT NULL,
  cfd_nombre character varying(254) NOT NULL,
  cfd_calle character varying(80) NOT NULL,
  cfd_noext character varying(10) NOT NULL,
  cfd_noint character varying(10) NOT NULL,
  cfd_colonia character varying(40) NOT NULL,
  cfd_localidad character varying(80) NOT NULL,
  cfd_municipio character varying(40) NOT NULL,
  cfd_estado character varying(40) NOT NULL,
  cfd_pais character varying(20) NOT NULL,
  cfd_cp character varying(7) NOT NULL,
  CONSTRAINT pk_tbl_cfd_expediciones PRIMARY KEY (cfd_id_expedicion)
);



--@FIN_BLOQUE
CREATE TABLE tbl_cfd_folios
(
  cfd_noaprobacion integer NOT NULL,
  cfd_anoaprobacion smallint NOT NULL,
  cfd_serie character varying(10) NOT NULL,
  cfd_folio integer NOT NULL,
  cfd_folioini integer NOT NULL,
  cfd_foliofin integer NOT NULL,
  CONSTRAINT pk_tbl_cfd_folios PRIMARY KEY (cfd_noaprobacion)
);



--@FIN_BLOQUE
CREATE TABLE tbl_cfd_receptores
(
  cfd_id_receptor smallint NOT NULL,
  cfd_nombre character varying(254) NOT NULL,
  cfd_calle character varying(80) NOT NULL,
  cfd_noext character varying(10) NOT NULL,
  cfd_noint character varying(10) NOT NULL,
  cfd_colonia character varying(40) NOT NULL,
  cfd_localidad character varying(80) NOT NULL,
  cfd_municipio character varying(40) NOT NULL,
  cfd_estado character varying(40) NOT NULL,
  cfd_pais character varying(20) NOT NULL,
  cfd_cp character varying(7) NOT NULL,
  CONSTRAINT pk_tbl_cfd_receptores PRIMARY KEY (cfd_id_receptor)
);



--@FIN_BLOQUE
CREATE TABLE tbl_cfd_reporte_mensual
(
  mes smallint NOT NULL,
  ano integer NOT NULL,
  archivo character varying(25) NOT NULL,
  cerrado bit(1) NOT NULL,
  CONSTRAINT pk_tbl_cfd_reporte_mensual PRIMARY KEY (mes, ano),
  CONSTRAINT fk_tbl_cfd_reporte_mensual_tbl_cont_catalogo_periodos FOREIGN KEY (mes, ano)
      REFERENCES tbl_cont_catalogo_periodos (mes, ano) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE
);

--//////////////////////////////////////////////////// BANCOS ////////////////////////////////////////////////////////////

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('BANCAJ');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('BANCAJ_BANCOS');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('BANCAJ_BANCOS_AGREGAR');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('BANCAJ_BANCOS_TRASPASAR');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('BANCAJ_BANCOS_CANCELAR');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('BANCAJ_BANCOS_CONSULTAR');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('BANCAJ_BANCOS_GENPROC');


INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('BANCAJ_CAJAS');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('BANCAJ_CAJAS_AGREGAR');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('BANCAJ_CAJAS_TRASPASAR');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('BANCAJ_CAJAS_CANCELAR');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('BANCAJ_CAJAS_CONSULTAR');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('BANCAJ_CAJAS_GENPROC');


--@FIN_BLOQUE
CREATE TABLE tbl_sat_bancos
(
  clave character(3) NOT NULL,
  nombre character varying(50) NOT NULL,
  razonsocial character varying(254) NOT NULL,
  CONSTRAINT pk_tbl_sat_bancos PRIMARY KEY (clave)
);

insert into tbl_sat_bancos
values('000','---------------','');
insert into tbl_sat_bancos
values('002','BANAMEX','Banco Nacional de M√©xico, S.A., Instituci√≥n de Banca M√∫ltiple, Grupo Financiero Banamex');
insert into tbl_sat_bancos
values('006','BANCOMEXT','Banco Nacional de Comercio Exterior, Sociedad Desarrollo');
insert into tbl_sat_bancos
values('009','BANOBRAS','Banco Nacional de Obras y Servicios P√∫blicos, Sociedad Nacional de Cr√©dito, Instituci√≥n de Banca de Desarrollo');
insert into tbl_sat_bancos
values('012','BBVA BANCOMER','BBVA Bancomer, S.A., Instituci√≥n de Banca M√∫ltiple, Grupo Financiero BBVA Bancomer');
insert into tbl_sat_bancos
values('014','SANTANDER','Banco Santander (M√©xico), S.A., Instituci√≥n de Banca M√∫ltiple, Grupo Financiero Santander');
insert into tbl_sat_bancos
values('019','BANJERCITO','Banco Nacional del Ej√©rcito, Fuerza A√©rea y Armada, Sociedad Nacional de Cr√©dito, Instituci√≥n de Banca de Desarrollo');
insert into tbl_sat_bancos
values('021','HSBC','HSBC M√©xico, S.A., instituci√≥n De Banca M√∫ltiple, Grupo Financiero HSBC');
insert into tbl_sat_bancos
values('030','BAJIO','Banco del Baj√≠o, S.A., Instituci√≥n de Banca M√∫ltiple');
insert into tbl_sat_bancos
values('032','IXE','IXE Banco, S.A., Instituci√≥n de Banca M√∫ltiple, IXE Grupo Financiero');
insert into tbl_sat_bancos
values('036','INBURSA','Banco Inbursa, S.A., Instituci√≥n de Banca M√∫ltiple, Grupo Financiero Inbursa');
insert into tbl_sat_bancos
values('037','INTERACCIONES','Banco Interacciones, S.A., Instituci√≥n de Banca M√∫ltiple');
insert into tbl_sat_bancos
values('042','MIFEL','Banca Mifel, S.A., Instituci√≥n de Banca M√∫ltiple, Grupo Financiero Mifel');
insert into tbl_sat_bancos
values('044','SCOTIABANK','Scotiabank Inverlat, S.A.');
insert into tbl_sat_bancos
values('058','BANREGIO','Banco Regional de Monterrey, S.A., Instituci√≥n de Banca M√∫ltiple, Banregio Grupo Financiero');
insert into tbl_sat_bancos
values('059','INVEX','Banco Invex, S.A., Instituci√≥n de Banca M√∫ltiple, Invex Grupo Financiero');
insert into tbl_sat_bancos
values('060','BANSI','Bansi, S.A., Instituci√≥n de Banca M√∫ltiple');
insert into tbl_sat_bancos
values('062','AFIRME','Banca Afirme, S.A., Instituci√≥n de Banca M√∫ltiple');
insert into tbl_sat_bancos
values('072','BANORTE','Banco Mercantil del Norte, S.A., Instituci√≥n de Banca M√∫ltiple, Grupo Financiero Banorte');
insert into tbl_sat_bancos
values('102','THE ROYAL BANK','The Royal Bank of Scotland M√©xico, S.A., Instituci√≥n de Banca M√∫ltiple');
insert into tbl_sat_bancos
values('103','AMERICAN EXPRESS','American Express Bank (M√©xico), S.A., Instituci√≥n de Banca M√∫ltiple');
insert into tbl_sat_bancos
values('106','BAMSA','Bank of America M√©xico, S.A., Instituci√≥n de Banca M√∫ltiple, Grupo Financiero Bank of America');
insert into tbl_sat_bancos
values('108','TOKYO','Bank of Tokyo-Mitsubishi UFJ (M√©xico), S.A.');
insert into tbl_sat_bancos
values('110','JP MORGAN','Banco J.P. Morgan, S.A., Instituci√≥n de Banca M√∫ltiple, J.P. Morgan Grupo Financiero');
insert into tbl_sat_bancos
values('112','BMONEX','Banco Monex, S.A., Instituci√≥n de Banca M√∫ltiple');
insert into tbl_sat_bancos
values('113','VE POR MAS','Banco Ve Por Mas, S.A. Instituci√≥n de Banca M√∫ltiple');
insert into tbl_sat_bancos
values('116','ING','ING Bank (M√©xico), S.A., Instituci√≥n de Banca M√∫ltiple, ING Grupo Financiero');
insert into tbl_sat_bancos
values('124','DEUTSCHE','Deutsche Bank M√©xico, S.A., Instituci√≥n de Banca M√∫ltiple');
insert into tbl_sat_bancos
values('126','CREDIT SUISSE','Banco Credit Suisse (M√©xico), S.A. Instituci√≥n de Banca M√∫ltiple, Grupo Financiero Credit Suisse (M√©xico)');
insert into tbl_sat_bancos
values('127','AZTECA','Banco Azteca, S.A. Instituci√≥n de Banca M√∫ltiple.');
insert into tbl_sat_bancos
values('128','AUTOFIN','Banco Autofin M√©xico, S.A. Instituci√≥n de Banca M√∫ltiple');
insert into tbl_sat_bancos
values('129','BARCLAYS','Barclays Bank M√©xico, S.A., Instituci√≥n de Banca M√∫ltiple, Grupo Financiero Barclays M√©xico');
insert into tbl_sat_bancos
values('130','COMPARTAMOS','Banco Compartamos, S.A., Instituci√≥n de Banca M√∫ltiple');
insert into tbl_sat_bancos
values('131','BANCO FAMSA','Banco Ahorro Famsa, S.A., Instituci√≥n de Banca M√∫ltiple');
insert into tbl_sat_bancos
values('132','BMULTIVA','Banco Multiva, S.A., Instituci√≥n de Banca M√∫ltiple, Multivalores Grupo Financiero');
insert into tbl_sat_bancos
values('133','ACTINVER','Banco Actinver, S.A. Instituci√≥n de Banca M√∫ltiple, Grupo Financiero Actinver');
insert into tbl_sat_bancos
values('134','WAL-MART','Banco Wal-Mart de M√©xico Adelante, S.A., Instituci√≥n de Banca M√∫ltiple');
insert into tbl_sat_bancos
values('135','NAFIN','Nacional Financiera, Sociedad Nacional de Cr√©dito, Instituci√≥n de Banca de Desarrollo');
insert into tbl_sat_bancos
values('136','INTERBANCO','Inter Banco, S.A. Instituci√≥n de Banca M√∫ltiple');
insert into tbl_sat_bancos
values('137','BANCOPPEL','BanCoppel, S.A., Instituci√≥n de Banca M√∫ltiple');
insert into tbl_sat_bancos
values('138','ABC CAPITAL','ABC Capital, S.A., Instituci√≥n de Banca M√∫ltiple');
insert into tbl_sat_bancos
values('139','UBS BANK','UBS Bank M√©xico, S.A., Instituci√≥n de Banca M√∫ltiple, UBS Grupo Financiero');
insert into tbl_sat_bancos
values('140','CONSUBANCO','Consubanco, S.A. Instituci√≥n de Banca M√∫ltiple');
insert into tbl_sat_bancos
values('141','VOLKSWAGEN','Volkswagen Bank, S.A., Instituci√≥n de Banca M√∫ltiple');
insert into tbl_sat_bancos
values('143','CIBANCO','CIBanco, S.A.');
insert into tbl_sat_bancos
values('145','BBASE','Banco Base, S.A., Instituci√≥n de Banca M√∫ltiple');
insert into tbl_sat_bancos
values('166','BANSEFI','Banco del Ahorro Nacional y Servicios Financieros, Sociedad Nacional de Cr√©dito, Instituci√≥n de Banca de Desarrollo');
insert into tbl_sat_bancos
values('168','HIPOTECARIA FEDERAL','Sociedad Hipotecaria Federal, Sociedad Nacional de Cr√©dito, Instituci√≥n de Banca de Desarrollo');
insert into tbl_sat_bancos
values('600','MONEXCB','Monex Casa de Bolsa, S.A. de C.V. Monex Grupo Financiero');
insert into tbl_sat_bancos
values('601','GBM','GBM Grupo Burs√°til Mexicano, S.A. de C.V. Casa de Bolsa');
insert into tbl_sat_bancos
values('602','MASARI','Masari Casa de Bolsa, S.A.');
insert into tbl_sat_bancos
values('605','VALUE','Value, S.A. de C.V. Casa de Bolsa');
insert into tbl_sat_bancos
values('606','ESTRUCTURADORES','Estructuradores del Mercado de Valores Casa de Bolsa, S.A. de C.V.');
insert into tbl_sat_bancos
values('607','TIBER','Casa de Cambio Tiber, S.A. de C.V.');
insert into tbl_sat_bancos
values('608','VECTOR','Vector Casa de Bolsa, S.A. de C.V.');
insert into tbl_sat_bancos
values('610','B&B','B y B, Casa de Cambio, S.A. de C.V.');
insert into tbl_sat_bancos
values('614','ACCIVAL','Acciones y Valores Banamex, S.A. de C.V., Casa de Bolsa');
insert into tbl_sat_bancos
values('615','MERRILL LYNCH','Merrill Lynch M√©xico, S.A. de C.V. Casa de Bolsa');
insert into tbl_sat_bancos
values('616','FINAMEX','Casa de Bolsa Finamex, S.A. de C.V.');
insert into tbl_sat_bancos
values('617','VALMEX','Valores Mexicanos Casa de Bolsa, S.A. de C.V.');
insert into tbl_sat_bancos
values('618','UNICA','Unica Casa de Cambio, S.A. de C.V.');
insert into tbl_sat_bancos
values('619','MAPFRE','MAPFRE Tepeyac, S.A.');
insert into tbl_sat_bancos
values('620','PROFUTURO','Profuturo G.N.P., S.A. de C.V., Afore');
insert into tbl_sat_bancos
values('621','CB ACTINVER','Actinver Casa de Bolsa, S.A. de C.V.');
insert into tbl_sat_bancos
values('622','OACTIN','OPERADORA ACTINVER, S.A. DE C.V.');
insert into tbl_sat_bancos
values('623','SKANDIA','Skandia Vida, S.A. de C.V.');
insert into tbl_sat_bancos
values('626','CBDEUTSCHE','Deutsche Securities, S.A. de C.V. CASA DE BOLSA');
insert into tbl_sat_bancos
values('627','ZURICH','Zurich Compa√±√≠a de Seguros, S.A.');
insert into tbl_sat_bancos
values('628','ZURICHVI','Zurich Vida, Compa√±√≠a de Seguros, S.A.');
insert into tbl_sat_bancos
values('629','SU CASITA','Hipotecaria Su Casita, S.A. de C.V. SOFOM ENR');
insert into tbl_sat_bancos
values('630','CB INTERCAM','Intercam Casa de Bolsa, S.A. de C.V.');
insert into tbl_sat_bancos
values('631','CI BOLSA','CI Casa de Bolsa, S.A. de C.V.');
insert into tbl_sat_bancos
values('632','BULLTICK CB','Bulltick Casa de Bolsa, S.A., de C.V.');
insert into tbl_sat_bancos
values('633','STERLING','Sterling Casa de Cambio, S.A. de C.V.');
insert into tbl_sat_bancos
values('634','FINCOMUN','Fincom√∫n, Servicios Financieros Comunitarios, S.A. de C.V.');
insert into tbl_sat_bancos
values('636','HDI SEGUROS','HDI Seguros, S.A. de C.V.');
insert into tbl_sat_bancos
values('637','ORDER','Order Express Casa de Cambio, S.A. de C.V');
insert into tbl_sat_bancos
values('638','AKALA','Akala, S.A. de C.V., Sociedad Financiera Popular');
insert into tbl_sat_bancos
values('640','CB JPMORGAN','J.P. Morgan Casa de Bolsa, S.A. de C.V. J.P. Morgan Grupo Financiero');
insert into tbl_sat_bancos
values('642','REFORMA','Operadora de Recursos Reforma, S.A. de C.V., S.F.P.');
insert into tbl_sat_bancos
values('646','STP','Sistema de Transferencias y Pagos STP, S.A. de C.V.SOFOM ENR');
insert into tbl_sat_bancos
values('647','TELECOMM','Telecomunicaciones de M√©xico');
insert into tbl_sat_bancos
values('648','EVERCORE','Evercore Casa de Bolsa, S.A. de C.V.');
insert into tbl_sat_bancos
values('649','SKANDIA','Skandia Operadora de Fondos, S.A. de C.V.');
insert into tbl_sat_bancos
values('651','SEGMTY','Seguros Monterrey New York Life, S.A de C.V');
insert into tbl_sat_bancos
values('652','ASEA','Soluci√≥n Asea, S.A. de C.V., Sociedad Financiera Popular');
insert into tbl_sat_bancos
values('653','KUSPIT','Kuspit Casa de Bolsa, S.A. de C.V.');
insert into tbl_sat_bancos
values('655','SOFIEXPRESS','J.P. SOFIEXPRESS, S.A. de C.V., S.F.P.');
insert into tbl_sat_bancos
values('656','UNAGRA','UNAGRA, S.A. de C.V., S.F.P.');
insert into tbl_sat_bancos
values('659','OPCIONES EMPRESARIALES DEL NOROESTE','OPCIONES EMPRESARIALES DEL NORESTE, S.A. DE C.V., S.F.P.');
insert into tbl_sat_bancos
values('901','CLS','Cls Bank International');
insert into tbl_sat_bancos
values('902','INDEVAL','SD. Indeval, S.A. de C.V.');
insert into tbl_sat_bancos
values('670','LIBERTAD','Libertad Servicios Financieros, S.A. De C.V.');

--@FIN_BLOQUE
CREATE TABLE tbl_bancos_cuentas
(
  tipo smallint NOT NULL,
  clave smallint NOT NULL,
  cuenta character varying(10) NOT NULL,
  sigcheque integer NOT NULL,
  fmt_dep character varying(50),
  fmt_ret character varying(50),
  cc character(19) NOT NULL,
  status character(1) NOT NULL,
  saldo numeric(19,4) NOT NULL,
  fijo bit(1) NOT NULL,
  tipotrasp smallint NOT NULL,
  clavetrasp smallint NOT NULL,
  todotrasp bit(1) NOT NULL,
  ultimonumtrasp integer NOT NULL,
  fondotrasp numeric(19,4) NOT NULL,
  id_moneda integer NOT NULL,
  id_clasificacion character varying(10) NOT NULL,
  descripcion character varying(80) NOT NULL,
  id_satbanco character(3) NOT NULL,
  bancoext character varying(150) NOT NULL,
  CONSTRAINT pk_cuentas PRIMARY KEY (tipo, clave),
  CONSTRAINT fk_tbl_bancos_cuentas_tbl_cont_catalogo FOREIGN KEY (cc)
      REFERENCES tbl_cont_catalogo (cuenta) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_tbl_bancos_cuentas_tbl_cont_monedas FOREIGN KEY (id_moneda)
      REFERENCES tbl_cont_monedas (clave) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_tbl_bancos_cuentas_tbl_cont_polizas_clasificaciones FOREIGN KEY (id_clasificacion)
      REFERENCES tbl_cont_polizas_clasificaciones (id_clasificacion) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT ck_tbl_bancos_cuentas_status CHECK (status = 'V'::bpchar OR status = 'C'::bpchar)
);


--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_bancos_cuentas AS 
 SELECT bc.tipo, bc.clave, bc.cuenta, bc.sigcheque, bc.fmt_dep, bc.fmt_ret, bc.cc, 
        CASE
            WHEN getlevelaccount(c1.cuenta) = 1 THEN c1.nombre
            WHEN getlevelaccount(c1.cuenta) = 2 THEN ((((( SELECT c2.nombre
               FROM tbl_cont_catalogo c2
              WHERE ("substring"(c1.cuenta::text, 1, 4) || '000000000000000'::text) = c2.cuenta::text))::text) || '/'::text) || c1.nombre::text)::character varying
            WHEN getlevelaccount(c1.cuenta) = 3 THEN ((((((( SELECT c2.nombre
               FROM tbl_cont_catalogo c2
              WHERE ("substring"(c1.cuenta::text, 1, 4) || '000000000000000'::text) = c2.cuenta::text))::text) || '/'::text) || ((( SELECT c3.nombre
               FROM tbl_cont_catalogo c3
              WHERE ("substring"(c1.cuenta::text, 1, 7) || '000000000000'::text) = c3.cuenta::text))::text)) || '/'::text) || c1.nombre::text)::character varying
            WHEN getlevelaccount(c1.cuenta) = 4 THEN ((((((((( SELECT c2.nombre
               FROM tbl_cont_catalogo c2
              WHERE ("substring"(c1.cuenta::text, 1, 4) || '000000000000000'::text) = c2.cuenta::text))::text) || '/'::text) || ((( SELECT c3.nombre
               FROM tbl_cont_catalogo c3
              WHERE ("substring"(c1.cuenta::text, 1, 7) || '000000000000'::text) = c3.cuenta::text))::text)) || '/'::text) || ((( SELECT c4.nombre
               FROM tbl_cont_catalogo c4
              WHERE ("substring"(c1.cuenta::text, 1, 10) || '000000000'::text) = c4.cuenta::text))::text)) || '/'::text) || c1.nombre::text)::character varying
            WHEN getlevelaccount(c1.cuenta) = 5 THEN ((((((((((( SELECT c2.nombre
               FROM tbl_cont_catalogo c2
              WHERE ("substring"(c1.cuenta::text, 1, 4) || '000000000000000'::text) = c2.cuenta::text))::text) || '/'::text) || ((( SELECT c3.nombre
               FROM tbl_cont_catalogo c3
              WHERE ("substring"(c1.cuenta::text, 1, 7) || '000000000000'::text) = c3.cuenta::text))::text)) || '/'::text) || ((( SELECT c4.nombre
               FROM tbl_cont_catalogo c4
              WHERE ("substring"(c1.cuenta::text, 1, 10) || '000000000'::text) = c4.cuenta::text))::text)) || '/'::text) || ((( SELECT c5.nombre
               FROM tbl_cont_catalogo c5
              WHERE ("substring"(c1.cuenta::text, 1, 13) || '000000'::text) = c5.cuenta::text))::text)) || '/'::text) || c1.nombre::text)::character varying
            WHEN getlevelaccount(c1.cuenta) = 6 THEN ((((((((((((( SELECT c2.nombre
               FROM tbl_cont_catalogo c2
              WHERE ("substring"(c1.cuenta::text, 1, 4) || '000000000000000'::text) = c2.cuenta::text))::text) || '/'::text) || ((( SELECT c3.nombre
               FROM tbl_cont_catalogo c3
              WHERE ("substring"(c1.cuenta::text, 1, 7) || '000000000000'::text) = c3.cuenta::text))::text)) || '/'::text) || ((( SELECT c4.nombre
               FROM tbl_cont_catalogo c4
              WHERE ("substring"(c1.cuenta::text, 1, 10) || '000000000'::text) = c4.cuenta::text))::text)) || '/'::text) || ((( SELECT c5.nombre
               FROM tbl_cont_catalogo c5
              WHERE ("substring"(c1.cuenta::text, 1, 13) || '000000'::text) = c5.cuenta::text))::text)) || '/'::text) || ((( SELECT c6.nombre
               FROM tbl_cont_catalogo c6
              WHERE ("substring"(c1.cuenta::text, 1, 16) || '000'::text) = c6.cuenta::text))::text)) || '/'::text) || c1.nombre::text)::character varying
            ELSE ''::character varying
        END AS nombre, bc.status, bc.saldo, bc.fijo, bc.tipotrasp, bc.clavetrasp, bc.todotrasp, bc.ultimonumtrasp, bc.fondotrasp, bc.id_moneda, bc.id_clasificacion, bc.descripcion, bc.id_satbanco, sat.nombre AS banco, bc.bancoext
   FROM tbl_bancos_cuentas bc
   JOIN tbl_cont_catalogo c1 ON bc.cc = c1.cuenta
   JOIN tbl_sat_bancos sat ON bc.id_satbanco = sat.clave;

--@FIN_BLOQUE
CREATE TABLE tbl_bancos_cuentas_saldos
(
  mes smallint NOT NULL,
  ano smallint NOT NULL,
  tipo smallint NOT NULL,
  clave smallint NOT NULL,
  saldoini numeric(19,4) NOT NULL,
  saldofin numeric(19,4) NOT NULL,
  CONSTRAINT pk_tbl_bancos_cuentas_saldos PRIMARY KEY (mes, ano, tipo, clave),
  CONSTRAINT fk_tbl_bancos_cuentas_saldos_tbl_bancos_cuentas FOREIGN KEY (tipo, clave)
      REFERENCES tbl_bancos_cuentas (tipo, clave) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION,
  CONSTRAINT fk_tbl_bancos_cuentas_saldos_tbl_cont_catalogo_periodos FOREIGN KEY (mes, ano)
      REFERENCES tbl_cont_catalogo_periodos (mes, ano) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE
);



--@FIN_BLOQUE
CREATE TABLE tbl_bancos_movimientos
(
  id serial NOT NULL,
  tipo smallint NOT NULL,
  clave smallint NOT NULL,
  num integer NOT NULL,
  fecha timestamp without time zone NOT NULL,
  concepto character varying(80) NOT NULL,
  beneficiario character varying(80) NOT NULL,
  doc character varying(20) NOT NULL,
  deposito numeric(19,4) NOT NULL,
  retiro numeric(19,4) NOT NULL,
  saldo numeric(19,4) NOT NULL,
  estatus character(1) NOT NULL,
  ref character varying(25),
  pol_id integer,
  cons bit(1) NOT NULL,
  estrans bit(1) NOT NULL,
  id_moneda integer NOT NULL,
  tc numeric(19,4) NOT NULL,
  tipomov character(3) NOT NULL,
  referencia character varying(25) NOT NULL,
  id_satbanco character(3) NOT NULL,
  rfc character varying(13) NOT NULL,
  id_satmetodospago character(2) NOT NULL,
  bancoext character varying(150) NOT NULL,
  cuentabanco character varying(25) NOT NULL,
  CONSTRAINT pk_movimientos PRIMARY KEY (id),
  CONSTRAINT fk_tbl_bancos_cuentas_tbl_bancos_movimientos FOREIGN KEY (tipo, clave)
      REFERENCES tbl_bancos_cuentas (tipo, clave) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE
);

--@FIN_BLOQUE
CREATE TABLE tbl_bancos_conciliados
(
  tipo smallint NOT NULL,
  clave smallint NOT NULL,
  mes smallint NOT NULL,
  ano smallint NOT NULL,
  CONSTRAINT pk_tbl_bancos_conciliados PRIMARY KEY (tipo, clave, mes, ano),
  CONSTRAINT fk_tbl_bancos_conciliados_tbl_bancos_cuentas FOREIGN KEY (tipo, clave)
      REFERENCES tbl_bancos_cuentas (tipo, clave) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION,
  CONSTRAINT fk_tbl_bancos_conciliados_tbl_cont_catalogo_periodos FOREIGN KEY (mes, ano)
      REFERENCES tbl_cont_catalogo_periodos (mes, ano) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE
);



--@FIN_BLOQUE
CREATE TABLE tbl_bancos_transferencias
(
  idmovorigen integer NOT NULL,
  idmovdestino integer NOT NULL,
  CONSTRAINT pk_tbl_bancos_transferencias PRIMARY KEY (idmovorigen)
);



--@FIN_BLOQUE
CREATE TABLE tbl_usuarios_submodulo_bancos
(
  id_usuario character varying(10) NOT NULL,
  tipo smallint NOT NULL,
  clave smallint NOT NULL,
  CONSTRAINT pk_tbl_usuarios_submodulo_bancos PRIMARY KEY (id_usuario, tipo, clave),
  CONSTRAINT fk_tbl_usuarios_submodulo_bancos_tbl_bancos_cuentas FOREIGN KEY (tipo, clave)
      REFERENCES tbl_bancos_cuentas (tipo, clave) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION,
  CONSTRAINT fk_tbl_usuarios_submodulo_bancos_tbl_usuarios FOREIGN KEY (id_usuario)
      REFERENCES tbl_usuarios (id_usuario) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE
);



--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_bancos_movimientos_modulo_ids AS 
 SELECT u.id_usuario, b.tipo, b.clave AS id, b.cuenta
   FROM tbl_bancos_cuentas b
   JOIN tbl_usuarios_submodulo_bancos u ON b.tipo = u.tipo AND b.clave = u.clave
   JOIN tbl_cont_catalogo c ON b.cc = c.cuenta
  WHERE b.status <> 'C'::bpchar;



--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_bancos_movimientos_modulo_id AS 
 SELECT u.id_usuario, b.tipo, b.clave AS id, b.cuenta, c.nombre AS descripcion, b.sigcheque AS ref, b.fmt_dep, b.fmt_ret, b.cc, b.status AS estatus, b.saldo, 
        CASE
            WHEN (( SELECT tbl_cont_catalogo_periodos.mes
               FROM tbl_cont_catalogo_periodos
              WHERE tbl_cont_catalogo_periodos.cerrado = 1
              ORDER BY tbl_cont_catalogo_periodos.ano DESC, tbl_cont_catalogo_periodos.mes DESC
             LIMIT 1)) IS NULL AND (( SELECT tbl_cont_catalogo_periodos.ano
               FROM tbl_cont_catalogo_periodos
              WHERE tbl_cont_catalogo_periodos.cerrado = 1
              ORDER BY tbl_cont_catalogo_periodos.ano DESC, tbl_cont_catalogo_periodos.mes DESC
             LIMIT 1)) IS NULL THEN (( SELECT tbl_bancos_cuentas_saldos.saldoini
               FROM tbl_bancos_cuentas_saldos
              WHERE tbl_bancos_cuentas_saldos.mes = (( SELECT tbl_cont_catalogo_periodos.mes
                       FROM tbl_cont_catalogo_periodos
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1)) AND tbl_bancos_cuentas_saldos.ano = (( SELECT tbl_cont_catalogo_periodos.ano
                       FROM tbl_cont_catalogo_periodos
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1)) AND tbl_bancos_cuentas_saldos.tipo = b.tipo AND tbl_bancos_cuentas_saldos.clave = b.clave)) + (( SELECT sum(tbl_bancos_movimientos.deposito) - sum(tbl_bancos_movimientos.retiro)
               FROM tbl_bancos_movimientos
              WHERE tbl_bancos_movimientos.tipo = b.tipo AND tbl_bancos_movimientos.clave = b.clave AND tbl_bancos_movimientos.estatus <> 'C'::bpchar AND (date_part('year'::text, tbl_bancos_movimientos.fecha) = (( SELECT tbl_cont_catalogo_periodos.ano
                       FROM tbl_cont_catalogo_periodos
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1))::double precision AND date_part('month'::text, tbl_bancos_movimientos.fecha) >= (( SELECT tbl_cont_catalogo_periodos.mes
                       FROM tbl_cont_catalogo_periodos
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1))::double precision OR date_part('year'::text, tbl_bancos_movimientos.fecha) > (( SELECT tbl_cont_catalogo_periodos.ano
                       FROM tbl_cont_catalogo_periodos
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1))::double precision)))
            ELSE (( SELECT tbl_bancos_cuentas_saldos.saldoini
               FROM tbl_bancos_cuentas_saldos
              WHERE tbl_bancos_cuentas_saldos.mes = (( SELECT tbl_cont_catalogo_periodos.mes
                       FROM tbl_cont_catalogo_periodos
                      WHERE tbl_cont_catalogo_periodos.cerrado <> 1
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1)) AND tbl_bancos_cuentas_saldos.ano = (( SELECT tbl_cont_catalogo_periodos.ano
                       FROM tbl_cont_catalogo_periodos
                      WHERE tbl_cont_catalogo_periodos.cerrado <> 1
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1)) AND tbl_bancos_cuentas_saldos.tipo = b.tipo AND tbl_bancos_cuentas_saldos.clave = b.clave)) + (( SELECT sum(tbl_bancos_movimientos.deposito) - sum(tbl_bancos_movimientos.retiro)
               FROM tbl_bancos_movimientos
              WHERE tbl_bancos_movimientos.tipo = b.tipo AND tbl_bancos_movimientos.clave = b.clave AND tbl_bancos_movimientos.estatus <> 'C'::bpchar AND (date_part('year'::text, tbl_bancos_movimientos.fecha) = (( SELECT tbl_cont_catalogo_periodos.ano
                       FROM tbl_cont_catalogo_periodos
                      WHERE tbl_cont_catalogo_periodos.cerrado <> 1
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1))::double precision AND date_part('month'::text, tbl_bancos_movimientos.fecha) >= (( SELECT tbl_cont_catalogo_periodos.mes
                       FROM tbl_cont_catalogo_periodos
                      WHERE tbl_cont_catalogo_periodos.cerrado <> 1
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1))::double precision OR date_part('year'::text, tbl_bancos_movimientos.fecha) > (( SELECT tbl_cont_catalogo_periodos.ano
                       FROM tbl_cont_catalogo_periodos
                      WHERE tbl_cont_catalogo_periodos.cerrado <> 1
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1))::double precision)))
        END AS saldototal, 
        CASE
            WHEN (( SELECT tbl_cont_catalogo_periodos.mes
               FROM tbl_cont_catalogo_periodos
              WHERE tbl_cont_catalogo_periodos.cerrado = 1
              ORDER BY tbl_cont_catalogo_periodos.ano DESC, tbl_cont_catalogo_periodos.mes DESC
             LIMIT 1)) IS NULL AND (( SELECT tbl_cont_catalogo_periodos.ano
               FROM tbl_cont_catalogo_periodos
              WHERE tbl_cont_catalogo_periodos.cerrado = 1
              ORDER BY tbl_cont_catalogo_periodos.ano DESC, tbl_cont_catalogo_periodos.mes DESC
             LIMIT 1)) IS NULL THEN (( SELECT tbl_bancos_cuentas_saldos.saldoini
               FROM tbl_bancos_cuentas_saldos
              WHERE tbl_bancos_cuentas_saldos.mes = (( SELECT tbl_cont_catalogo_periodos.mes
                       FROM tbl_cont_catalogo_periodos
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1)) AND tbl_bancos_cuentas_saldos.ano = (( SELECT tbl_cont_catalogo_periodos.ano
                       FROM tbl_cont_catalogo_periodos
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1)) AND tbl_bancos_cuentas_saldos.tipo = b.tipo AND tbl_bancos_cuentas_saldos.clave = b.clave)) + (( SELECT sum(tbl_bancos_movimientos.deposito) - sum(tbl_bancos_movimientos.retiro)
               FROM tbl_bancos_movimientos
              WHERE tbl_bancos_movimientos.tipo = b.tipo AND tbl_bancos_movimientos.clave = b.clave AND tbl_bancos_movimientos.estatus <> 'C'::bpchar AND tbl_bancos_movimientos.estatus <> 'T'::bpchar AND (date_part('year'::text, tbl_bancos_movimientos.fecha) = (( SELECT tbl_cont_catalogo_periodos.ano
                       FROM tbl_cont_catalogo_periodos
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1))::double precision AND date_part('month'::text, tbl_bancos_movimientos.fecha) >= (( SELECT tbl_cont_catalogo_periodos.mes
                       FROM tbl_cont_catalogo_periodos
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1))::double precision OR date_part('year'::text, tbl_bancos_movimientos.fecha) > (( SELECT tbl_cont_catalogo_periodos.ano
                       FROM tbl_cont_catalogo_periodos
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1))::double precision)))
            ELSE (( SELECT tbl_bancos_cuentas_saldos.saldoini
               FROM tbl_bancos_cuentas_saldos
              WHERE tbl_bancos_cuentas_saldos.mes = (( SELECT tbl_cont_catalogo_periodos.mes
                       FROM tbl_cont_catalogo_periodos
                      WHERE tbl_cont_catalogo_periodos.cerrado <> 1
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1)) AND tbl_bancos_cuentas_saldos.ano = (( SELECT tbl_cont_catalogo_periodos.ano
                       FROM tbl_cont_catalogo_periodos
                      WHERE tbl_cont_catalogo_periodos.cerrado <> 1
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1)) AND tbl_bancos_cuentas_saldos.tipo = b.tipo AND tbl_bancos_cuentas_saldos.clave = b.clave)) + (( SELECT sum(tbl_bancos_movimientos.deposito) - sum(tbl_bancos_movimientos.retiro)
               FROM tbl_bancos_movimientos
              WHERE tbl_bancos_movimientos.tipo = b.tipo AND tbl_bancos_movimientos.clave = b.clave AND tbl_bancos_movimientos.estatus <> 'C'::bpchar AND tbl_bancos_movimientos.estatus <> 'T'::bpchar AND (date_part('year'::text, tbl_bancos_movimientos.fecha) = (( SELECT tbl_cont_catalogo_periodos.ano
                       FROM tbl_cont_catalogo_periodos
                      WHERE tbl_cont_catalogo_periodos.cerrado <> 1
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1))::double precision AND date_part('month'::text, tbl_bancos_movimientos.fecha) >= (( SELECT tbl_cont_catalogo_periodos.mes
                       FROM tbl_cont_catalogo_periodos
                      WHERE tbl_cont_catalogo_periodos.cerrado <> 1
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1))::double precision OR date_part('year'::text, tbl_bancos_movimientos.fecha) > (( SELECT tbl_cont_catalogo_periodos.ano
                       FROM tbl_cont_catalogo_periodos
                      WHERE tbl_cont_catalogo_periodos.cerrado <> 1
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1))::double precision)))
        END AS saldoaplicado, 
        CASE
            WHEN (( SELECT sum(tbl_bancos_movimientos.deposito) AS sum
               FROM tbl_bancos_movimientos
              WHERE tbl_bancos_movimientos.tipo = b.tipo AND tbl_bancos_movimientos.clave = b.clave AND tbl_bancos_movimientos.estatus = 'T'::bpchar)) IS NULL THEN 0.0000
            ELSE ( SELECT sum(tbl_bancos_movimientos.deposito) AS sum
               FROM tbl_bancos_movimientos
              WHERE tbl_bancos_movimientos.tipo = b.tipo AND tbl_bancos_movimientos.clave = b.clave AND tbl_bancos_movimientos.estatus = 'T'::bpchar)
        END AS dsbc, 
        CASE
            WHEN (( SELECT sum(tbl_bancos_movimientos.retiro) AS sum
               FROM tbl_bancos_movimientos
              WHERE tbl_bancos_movimientos.tipo = b.tipo AND tbl_bancos_movimientos.clave = b.clave AND tbl_bancos_movimientos.estatus = 'T'::bpchar)) IS NULL THEN 0.0000
            ELSE ( SELECT sum(tbl_bancos_movimientos.retiro) AS sum
               FROM tbl_bancos_movimientos
              WHERE tbl_bancos_movimientos.tipo = b.tipo AND tbl_bancos_movimientos.clave = b.clave AND tbl_bancos_movimientos.estatus = 'T'::bpchar)
        END AS rpc, b.id_moneda, m.tc, b.Fijo
   FROM tbl_bancos_cuentas b
   JOIN tbl_usuarios_submodulo_bancos u ON b.tipo = u.tipo AND b.clave = u.clave
   JOIN tbl_cont_catalogo c ON b.cc = c.cuenta
   JOIN tbl_cont_monedas m ON b.id_moneda = m.clave;



--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_public_bancos_cuentas AS 
 SELECT tbl_bancos_cuentas.tipo, tbl_bancos_cuentas.clave, tbl_bancos_cuentas.cuenta, tbl_bancos_cuentas.sigcheque, tbl_bancos_cuentas.cc, tbl_bancos_cuentas.id_moneda, tbl_bancos_cuentas.fijo
   FROM tbl_bancos_cuentas;


--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_bancos_movimientos_modulo AS 
 SELECT m.id, m.tipo, m.clave, m.num, m.fecha, m.concepto, m.beneficiario, m.doc, m.deposito, m.retiro, m.saldo, m.estatus, m.ref, m.pol_id, 
        CASE
            WHEN m.pol_id IS NULL THEN ''::text
            ELSE ( SELECT (tbl_cont_polizas.tipo::text || ' - '::text) || tbl_cont_polizas.numero::character varying::text
               FROM tbl_cont_polizas
              WHERE tbl_cont_polizas.id = m.pol_id)
        END AS pol, m.cons AS mc, m.estrans, m.id_moneda, m.tc, m.tipomov, m.referencia, m.id_satbanco, m.rfc, m.id_satmetodospago, mp.nombre AS descmetodospago, m.cuentabanco, m.bancoext
   FROM tbl_bancos_movimientos m
   JOIN tbl_sat_metodospago mp ON m.id_satmetodospago = mp.clave;


--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_bancos_movimientos_detalle_v3 AS 
 SELECT p.id AS id_pol, p.part, p.cuenta AS cc, 
        CASE
            WHEN getlevelaccount(c1.cuenta) = 1 THEN c1.nombre
            WHEN getlevelaccount(c1.cuenta) = 2 THEN ((((( SELECT c2.nombre
               FROM tbl_cont_catalogo c2
              WHERE ("substring"(c1.cuenta::text, 1, 4) || '000000000000000'::text) = c2.cuenta::text))::text) || '/'::text) || c1.nombre::text)::character varying
            WHEN getlevelaccount(c1.cuenta) = 3 THEN ((((((( SELECT c2.nombre
               FROM tbl_cont_catalogo c2
              WHERE ("substring"(c1.cuenta::text, 1, 4) || '000000000000000'::text) = c2.cuenta::text))::text) || '/'::text) || ((( SELECT c3.nombre
               FROM tbl_cont_catalogo c3
              WHERE ("substring"(c1.cuenta::text, 1, 7) || '000000000000'::text) = c3.cuenta::text))::text)) || '/'::text) || c1.nombre::text)::character varying
            WHEN getlevelaccount(c1.cuenta) = 4 THEN ((((((((( SELECT c2.nombre
               FROM tbl_cont_catalogo c2
              WHERE ("substring"(c1.cuenta::text, 1, 4) || '000000000000000'::text) = c2.cuenta::text))::text) || '/'::text) || ((( SELECT c3.nombre
               FROM tbl_cont_catalogo c3
              WHERE ("substring"(c1.cuenta::text, 1, 7) || '000000000000'::text) = c3.cuenta::text))::text)) || '/'::text) || ((( SELECT c4.nombre
               FROM tbl_cont_catalogo c4
              WHERE ("substring"(c1.cuenta::text, 1, 10) || '000000000'::text) = c4.cuenta::text))::text)) || '/'::text) || c1.nombre::text)::character varying
            WHEN getlevelaccount(c1.cuenta) = 5 THEN ((((((((((( SELECT c2.nombre
               FROM tbl_cont_catalogo c2
              WHERE ("substring"(c1.cuenta::text, 1, 4) || '000000000000000'::text) = c2.cuenta::text))::text) || '/'::text) || ((( SELECT c3.nombre
               FROM tbl_cont_catalogo c3
              WHERE ("substring"(c1.cuenta::text, 1, 7) || '000000000000'::text) = c3.cuenta::text))::text)) || '/'::text) || ((( SELECT c4.nombre
               FROM tbl_cont_catalogo c4
              WHERE ("substring"(c1.cuenta::text, 1, 10) || '000000000'::text) = c4.cuenta::text))::text)) || '/'::text) || ((( SELECT c5.nombre
               FROM tbl_cont_catalogo c5
              WHERE ("substring"(c1.cuenta::text, 1, 13) || '000000'::text) = c5.cuenta::text))::text)) || '/'::text) || c1.nombre::text)::character varying
            WHEN getlevelaccount(c1.cuenta) = 6 THEN ((((((((((((( SELECT c2.nombre
               FROM tbl_cont_catalogo c2
              WHERE ("substring"(c1.cuenta::text, 1, 4) || '000000000000000'::text) = c2.cuenta::text))::text) || '/'::text) || ((( SELECT c3.nombre
               FROM tbl_cont_catalogo c3
              WHERE ("substring"(c1.cuenta::text, 1, 7) || '000000000000'::text) = c3.cuenta::text))::text)) || '/'::text) || ((( SELECT c4.nombre
               FROM tbl_cont_catalogo c4
              WHERE ("substring"(c1.cuenta::text, 1, 10) || '000000000'::text) = c4.cuenta::text))::text)) || '/'::text) || ((( SELECT c5.nombre
               FROM tbl_cont_catalogo c5
              WHERE ("substring"(c1.cuenta::text, 1, 13) || '000000'::text) = c5.cuenta::text))::text)) || '/'::text) || ((( SELECT c6.nombre
               FROM tbl_cont_catalogo c6
              WHERE ("substring"(c1.cuenta::text, 1, 16) || '000'::text) = c6.cuenta::text))::text)) || '/'::text) || c1.nombre::text)::character varying
            ELSE NULL::character varying
        END AS nombre, p.concepto, p.parcial, p.moneda, p.tc, p.debe, p.haber
   FROM tbl_cont_polizas_detalle p
   JOIN tbl_cont_catalogo c1 ON p.cuenta = c1.cuenta;



--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_bancos_movs_agregar(
    _bantipo smallint,
    _banclave smallint,
    _banfecha timestamp without time zone,
    _banconcepto character varying,
    _banbeneficiario character varying,
    _bandeposito numeric,
    _banretiro numeric,
    _bandr character,
    _status character,
    _idmonedagen smallint,
    _tcgen numeric,
    _claseref character varying,
    _referencia character varying,
    _id_clasificacionorig character varying,
    _extern_numpol integer,
    _id_satbanco character,
    _rfc character varying,
    _id_satmetodospago character,
    _bancoext character varying,
    _cuentabanco character varying,
    _cheque character varying)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_errpart integer; _numpol int; _err integer; _result varchar(255); _resultpart varchar(255); _mes smallint; _ano smallint; 
	_numero int; _id_mov int; _tipo_mov char(3); _tipo_pol char(2); _clase varchar(20); _pol integer; _partida smallint; 
	_cc char(19); _saldofin numeric(19,4); _Fijo bit; _id_clasificacion varchar(10); _bandoc varchar(20); _esDepChq boolean; 
	_monto_ce numeric(19,4); _moneda_ce character(3); 
BEGIN	
	_err := 0;
	_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'BANCAJ_BANCAJ' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCOK');
	_mes := date_part('month',_banFecha);
	_ano := date_part('year',_banFecha);
	_Fijo := (select Fijo from TBL_BANCOS_CUENTAS where Tipo = _banTipo and Clave = _banClave);
	_numpol := -1;
	_id_clasificacion := (case when _id_clasificacionorig is not null then _id_clasificacionorig 
				else (select ID_Clasificacion from TBL_BANCOS_CUENTAS where Tipo = _banTipo and Clave = _banClave) end);
	_moneda_ce := (select id_satmoneda from TBL_CONT_MONEDAS where Clave = _idmonedagen);
	
	IF _banDR = 'DEP' OR _banDR = 'DCH' -- si es un deposito, se  trata de un ingreso
	THEN
		_tipo_pol := 'IG';
		IF _banDR = 'DCH' 
		THEN 
			_bandoc := _Cheque;
			_esDepChq := true;
		ELSE
			_bandoc := '';
			_esDepChq := false;
		END IF;
		_banDR := 'DEP';
		_monto_ce := _bandeposito;
	ELSE -- de lo contrario sera un egreso
		_tipo_pol := 'EG';
		IF _banDR = 'CHQ' -- si es un cheque
		THEN
			IF _bantipo = 0
			THEN
				_bandoc := (select SigCheque from TBL_BANCOS_CUENTAS where Clave = _banClave and Tipo = _banTipo)::varchar(20);
			ELSE
				_bandoc := _Cheque;
			END IF;
		ELSE
			_bandoc := '';
		END IF;
		_monto_ce := _banretiro;
	END IF;
	
	IF(select max(Num) 
  	    from TBL_BANCOS_MOVIMIENTOS
            where Tipo = _banTipo and Clave = _banClave) IS NOT NULL
        THEN
		_numero := (select max(Num) 
				from  TBL_BANCOS_MOVIMIENTOS
   		                where Tipo = _banTipo and Clave = _banClave) + 1;
	ELSE
		_numero := 1;
	END IF;
	
	IF(select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano and Cerrado = 1) > 0
	OR (select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano) < 1
	THEN
		_err := 3;
		_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_POLIZAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'ERROR: La fecha de poliza pertenece a un periodo cerrado o inexistente'
	END IF;

	-- Revisa si el movimiento pertenece a un periodo ya conciliado, de ser asi no permitira la transaccion
	IF(select count(*) from TBL_BANCOS_CONCILIADOS
		where Tipo = _banTipo and Clave = _banClave and Mes = date_part('month',_banFecha) and Ano = date_part('year',_banFecha)) > 0
	THEN
		_err := 3;
		_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'BANCAJ_BANCAJ' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'ERROR: El periodo del movimiento pertenece a un periodo conciliado. No se puede agregar';
	END IF;
	
	IF _err = 0
	THEN
		_saldofin := (select Saldo from  TBL_BANCOS_CUENTAS where Clave = _banClave and Tipo = _banTipo) + _banDeposito - _banRetiro;
		
		INSERT INTO  TBL_BANCOS_MOVIMIENTOS
		VALUES(default, _banTipo, _banClave, _numero, _banFecha, _banConcepto, _banBeneficiario, _banDoc, _banDeposito, _banRetiro, _saldofin,  _Status, _ClaseRef, _numpol, '0','0', _idmonedaGEN, _tcGEN, _banDR, _Referencia, _ID_SatBanco, _RFC, _ID_SatMetodosPago, _BancoExt, _CuentaBanco)
		RETURNING currval(pg_get_serial_sequence('TBL_BANCOS_MOVIMIENTOS', 'id')) INTO _id_mov;
		
		IF _banTipo = 0
		THEN
			_clase := 'MBAN|' || cast(_id_mov as varchar) || '|' || cast(_banClave as varchar) || '||';
		ELSE
			_clase := 'MCAJ|' || cast(_id_mov as varchar) || '|' || cast(_banClave as varchar) || '||';
		END IF;
	
		-- Actualiza el saldo del banco
		UPDATE TBL_BANCOS_CUENTAS
		SET Saldo = _saldofin
		WHERE Clave = _banClave and Tipo = _banTipo;
			
		IF _banDR = 'CHQ' -- si se trata de un retiro, el numero del siguiente documento o cheque se actualiza en el cabecero de las Cuentas Monetarias
		THEN
			UPDATE TBL_BANCOS_CUENTAS
			SET SigCheque = SigCheque + 1
			WHERE Clave = _banClave and Tipo = _banTipo;
			
		END IF;
		
		
		IF _Fijo = '0' and _extern_numpol is null -- si no es banco externo ni se manda una poliza asociada, agrega la poliza
		THEN	
			_partida := (select case when _banDR = 'DEP' then 0 else (select max(Part) from _TMP_BANCOS_MOVIMIENTOS_DETALLE) + 1 end);
			_cc := (select CC from TBL_BANCOS_CUENTAS where Clave = _banClave and Tipo = _banTipo);
			
			-- Primero registra y crea la tabla temporal de detalle de la poliza y Contabilidad Electronica
			CREATE LOCAL TEMPORARY TABLE _TMP_CONT_POLIZAS_DETALLE (
				Part smallint NOT NULL ,
				Cuenta char(19) NOT NULL ,
				Concepto varchar(80) NOT NULL ,
				Parcial numeric(19,4) NOT NULL ,
				Moneda smallint NOT NULL ,
				TC numeric(19,4) NOT NULL ,
				Debe numeric(19,4) NOT NULL ,
				Haber numeric(19,4) NOT NULL
			);
			CREATE LOCAL TEMPORARY TABLE _TMP_CONT_POLIZAS_DETALLE_CE_CHEQUES ( 
				id_part smallint NOT NULL,
				num character varying(20) NOT NULL,
				banco character(3) NOT NULL,
				ctaori character varying(50) NOT NULL,
				fecha timestamp without time zone NOT NULL,
				monto numeric(19,4) NOT NULL,
				benef character varying(300) NOT NULL,
				rfc character varying(13) NOT NULL,
				banemisext character varying(150) NOT NULL,
				moneda character(3) NOT NULL,
				tipcamb numeric(19,5) NOT NULL
			);
			CREATE LOCAL TEMPORARY TABLE _TMP_CONT_POLIZAS_DETALLE_CE_TRANSFERENCIAS ( 
				id_part smallint NOT NULL,
				ctaori character varying(50) NOT NULL,
				bancoori character(3) NOT NULL,
				monto numeric(19,4) NOT NULL,
				ctadest character varying(50) NOT NULL,
				bancodest character(3) NOT NULL,
				fecha timestamp without time zone NOT NULL,
				benef character varying(300) NOT NULL,
				rfc character varying(13) NOT NULL,
				bancooriext character varying(150) NOT NULL,
				bancodestext character varying(150) NOT NULL,
				moneda character(3) NOT NULL,
				tipcamb numeric(19,5) NOT NULL
			);
			CREATE LOCAL TEMPORARY TABLE _TMP_CONT_POLIZAS_DETALLE_CE_OTRMETODOPAGO
			(
				id_part smallint NOT NULL,
				metpagopol character(2) NOT NULL,
				fecha timestamp without time zone NOT NULL,
				benef character varying(300) NOT NULL,
				rfc character varying(13) NOT NULL,
				monto numeric(19,4) NOT NULL,
				moneda character(3) NOT NULL,
				tipcamb numeric(19,5) NOT NULL
			);
			-- Fin de la tabla temporal
			-- Ahora copia los resultados de la tabla del movimiento de detalles, a la temporal de detalles de polizas 
			IF _idmonedaGEN = 1
			THEN
				INSERT INTO _TMP_CONT_POLIZAS_DETALLE
				SELECT d.Part, c.Cuenta, d.Concepto, case when d.Parcial < 0.0 then abs(d.Parcial) else d.Parcial end, d.Moneda, d.TC, 
					case when _banDR = 'DEP'  then case when d.Cantidad >= 0.0 then 0.0 else abs(d.Cantidad) end else case when d.Cantidad >= 0.0 then d.Cantidad else 0.0 end end,
				 	case when _banDR <> 'DEP' then case when d.Cantidad >= 0.0 then 0.0 else abs(d.Cantidad) end else case when d.Cantidad >= 0.0 then d.Cantidad else 0.0 end end
				FROM _TMP_BANCOS_MOVIMIENTOS_DETALLE d INNER JOIN TBL_CONT_CATALOGO c ON d.Cuenta = c.Cuenta;
				
				-- Copia el abono o cargo de la cuenta del movimiento para crear la partida doble de esta poliza
				INSERT INTO _TMP_CONT_POLIZAS_DETALLE
				SELECT _partida, Cuenta, _banDoc, case when _banDR = 'DEP' then _banDeposito else _banRetiro end, 1, 1.0, _banDeposito, _banRetiro
				FROM TBL_CONT_CATALOGO  
				WHERE Cuenta = _cc;
				
			ELSE -- Como es en otra moneda, lo mete como su tipo de cambio
				INSERT INTO _TMP_CONT_POLIZAS_DETALLE
				SELECT d.Part, c.Cuenta, d.Concepto, case when d.Parcial < 0.0 then abs(d.Parcial) else d.Parcial end, _idmonedaGEN, _tcGEN, 
					case when _banDR = 'DEP'  then case when d.Cantidad >= 0.0 then 0.0 else round(abs(d.Cantidad) * _tcGEN, 2) end else case when d.Cantidad >= 0.0 then round(d.Cantidad * _tcGEN, 2) else 0.0 end end,
				 	case when _banDR <> 'DEP' then case when d.Cantidad >= 0.0 then 0.0 else round(abs(d.Cantidad) * _tcGEN, 2) end else case when d.Cantidad >= 0.0 then round(d.Cantidad * _tcGEN, 2) else 0.0 end end
				FROM _TMP_BANCOS_MOVIMIENTOS_DETALLE d INNER JOIN TBL_CONT_CATALOGO c ON d.Cuenta = c.Cuenta;
				
				-- Copia el abono o cargo de la cuenta del movimiento para crear la partida doble de esta poliza
				INSERT INTO _TMP_CONT_POLIZAS_DETALLE
				SELECT _partida, Cuenta, _banDoc, case when _banDR = 'DEP' then _banDeposito else _banRetiro end, _idmonedaGEN, _tcGEN, round(_banDeposito * _tcGEN,2), round(_banRetiro * _tcGEN,2)
				FROM TBL_CONT_CATALOGO  
				WHERE Cuenta = _cc;
				
			END IF;

			-- Actualiza la contabilidad electronica de este BANCO o CAJA a esta partida, ya sea por cheque, transferencia u otro metodo de pago
			IF _banTipo = 0 -- Es banco
			THEN
				IF _id_satmetodospago = '02' -- se trata de un cheque
				THEN
					IF _banDR <> 'DEP' --Es un retiro
					THEN
						INSERT INTO _TMP_CONT_POLIZAS_DETALLE_CE_CHEQUES
						SELECT _partida, _banDOC, ID_SatBanco, Descripcion, _banFecha, _monto_ce, _banBeneficiario, _rfc, BancoExt, _moneda_ce, _tcgen
						FROM TBL_BANCOS_CUENTAS 
						WHERE Tipo = _banTipo and Clave = _banClave;
					ELSE -- Es un deposito
						INSERT INTO _TMP_CONT_POLIZAS_DETALLE_CE_CHEQUES
						SELECT _partida, _banDOC, _ID_SatBanco, _cuentabanco, _banFecha, _monto_ce, _banBeneficiario, _rfc, _bancoext, _moneda_ce, _tcgen;
					END IF;
				ELSIF _id_satmetodospago = '03' --Es una transferencia
				THEN
					IF _banDR <> 'DEP' --Es un retiro
					THEN
						INSERT INTO _TMP_CONT_POLIZAS_DETALLE_CE_TRANSFERENCIAS
						SELECT _partida, Descripcion, ID_SatBanco, _monto_ce, _cuentabanco, _ID_SatBanco, _banFecha,  _banBeneficiario, _rfc, BancoExt, _bancoext, _moneda_ce, _tcgen
						FROM TBL_BANCOS_CUENTAS 
						WHERE Tipo = _banTipo and Clave = _banClave;
					ELSE --Es un deposito
						INSERT INTO _TMP_CONT_POLIZAS_DETALLE_CE_TRANSFERENCIAS
						SELECT _partida, _cuentabanco, _ID_SatBanco, _monto_ce, Descripcion, ID_SatBanco, _banFecha,  _banBeneficiario, _rfc, _bancoext, BancoExt, _moneda_ce, _tcgen
						FROM TBL_BANCOS_CUENTAS 
						WHERE Tipo = _banTipo and Clave = _banClave;
					END IF;
				ELSE --Es otro metodo de pago (Deposito o Retiro es lo mismo)
					INSERT INTO _TMP_CONT_POLIZAS_DETALLE_CE_OTRMETODOPAGO
					SELECT _partida, _id_satmetodospago, _banFecha, _banBeneficiario, _rfc, _monto_ce, _moneda_ce, _tcgen;
				END IF;
			ELSE -- bantipo = 1 "Caja"
				IF _id_satmetodospago = '02' -- se trata de un cheque (Deposito o Retiro es lo mismo, toma los datos directos capturados en el dialogo)
				THEN
					INSERT INTO _TMP_CONT_POLIZAS_DETALLE_CE_CHEQUES
					SELECT _partida, _banDOC, _ID_SatBanco, _cuentabanco, _banFecha, _monto_ce, _banBeneficiario, _rfc, _bancoext, _moneda_ce, _tcgen;
				ELSE --Es otro metodo de pago (Deposito o Retiro es lo mismo)
					INSERT INTO _TMP_CONT_POLIZAS_DETALLE_CE_OTRMETODOPAGO
					SELECT _partida, _id_satmetodospago, _banFecha, _banBeneficiario, _rfc, _monto_ce, _moneda_ce, _tcgen;
				END IF;
			END IF;
						
			-- Agrega ahora la poliza
			--sp_cont_polizas_agregar(_tipo character, _fecha timestamp without time zone, _concepto character varying, _interna bit, _ref character varying, _total numeric, _id_clasificacion character varying)

			SELECT * INTO _errpart, _resultpart, _numpol FROM sp_cont_polizas_agregar(_tipo_pol, _banFecha, _banConcepto,(case when _Status = 'T' then '1' else '0' end)::bit, _clase, case when _banDR = 'DEP' then round(_banDeposito * _tcGEN,2) else round(_banRetiro * _tcGEN,2) end, _id_clasificacion ) 
												as ( err integer, res varchar, clave integer );
      
			IF _errpart <> 0
			THEN
				_err := _errpart;
				_result := _resultpart;
			ELSE
				-- Procede a hacer update al movimiento con el ID de la poliza 
				UPDATE  TBL_BANCOS_MOVIMIENTOS
				SET Pol_ID = _numpol
				WHERE ID = _id_mov; 
			END IF;
			-- Fin de la poliza */

			DROP TABLE _TMP_CONT_POLIZAS_DETALLE; 
			DROP TABLE _TMP_CONT_POLIZAS_DETALLE_CE_CHEQUES; 
			DROP TABLE _TMP_CONT_POLIZAS_DETALLE_CE_TRANSFERENCIAS;
			DROP TABLE _TMP_CONT_POLIZAS_DETALLE_CE_OTRMETODOPAGO;
			
		ELSIF _Fijo = '0' and _extern_numpol is not null -- si no es banco externo y si se manda una poliza asociada, asocia la poliza
		THEN	
			UPDATE  TBL_BANCOS_MOVIMIENTOS
			SET Pol_ID = _extern_numpol
			WHERE ID = _id_mov; 
		END IF;
		
		
		
		
	END IF;

	RETURN QUERY SELECT _err, _result, _id_mov;

END
$BODY$
  LANGUAGE plpgsql;


--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_bancos_trans_agregar(
    _bantipo smallint,
    _banclave smallint,
    _banfecha timestamp without time zone,
    _banconcepto character varying,
    _banbeneficiario character varying,
    _banretiro numeric,
    _bandr character,
    _status character,
    _idmonedagen smallint,
    _tcgen numeric,
    _claseref character varying,
    _referencia character varying,
    _bantipodest smallint,
    _banclavedest smallint,
    _id_satbanco character,
    _rfc character varying,
    _id_satmetodospago character,
    _bancoext character varying,
    _cuentabanco character varying,
    _cheque character varying)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_errpart integer; _numpol int; _numpoldest int; _err integer; _result varchar(255); _resultpart varchar(255); _mes smallint; _ano smallint; 
	_numero int; _numerodest int; _id_mov int; _id_movdest int; _tipo_mov char(3); _clase varchar(20); _clasedest varchar(20);   
	_cc char(19); _ccdest char(19); _saldofin numeric(19,4); _saldofindest numeric(19,4); _Fijo bit; _Fijodest bit; _id_clasificacion varchar(10); _id_clasificaciondest varchar(10);
	_idmonedagendest smallint; _bandepositodest numeric(19,4); _totalpesos numeric(19,4); _bandoc varchar(20); 
	_id_satbancoori character(3); _bancoextori varchar(150); _cuentabancoori varchar(25);
	_id_satbancodest character(3); _bancoextdest varchar(150); _cuentabancodest varchar(25); 
	_moneda_ce character(3); 
BEGIN	
	_err := 0;
	_result := (select msj2 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'BANCAJ_BANCAJ' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCOK');
	_mes := date_part('month',_banFecha);
	_ano := date_part('year',_banFecha);
	_Fijo := (select Fijo from TBL_BANCOS_CUENTAS where Tipo = _banTipo and Clave = _banClave);
	_Fijodest := (select Fijo from TBL_BANCOS_CUENTAS where Tipo = _banTipoDest and Clave = _banClaveDest);
	_idmonedagendest := (select ID_Moneda from TBL_BANCOS_CUENTAS where Tipo = _banTipoDest and Clave = _banClaveDest);
	_numpol := -1;
	_numpoldest := -1;
	_id_clasificacion := (select ID_Clasificacion from TBL_BANCOS_CUENTAS where Tipo = _banTipo and Clave = _banClave);
	_id_clasificaciondest := (select ID_Clasificacion from TBL_BANCOS_CUENTAS where Tipo = _banTipoDest and Clave = _banClaveDest);
	_bandepositodest := (case when _idmonedagen = _idmonedagendest 
					then _banretiro
				when _idmonedagen = 1 and _idmonedagendest <> 1 
					then round(_banretiro / _tcgen, 2)
				when _idmonedagen <> 1 and _idmonedagendest = 1 
					then round(_banretiro * _tcgen, 2)
				else _banretiro end);
	_totalpesos := (case when _idmonedagen = 1 then _banretiro else round(_banretiro * _tcgen, 2) end);
	_moneda_ce := (select id_satmoneda from TBL_CONT_MONEDAS where Clave = _idmonedagen);
	IF _banDR = 'CHQ' -- si es un cheque
	THEN
		IF _bantipo = 0
		THEN
			_bandoc := (select SigCheque from TBL_BANCOS_CUENTAS where Clave = _banClave and Tipo = _banTipo)::varchar(20);
		ELSE
			_bandoc := _Cheque;
		END IF;
	ELSE
		_bandoc := '';
	END IF;
	
	IF(select max(Num) 
  	    from TBL_BANCOS_MOVIMIENTOS
            where Tipo = _banTipo and Clave = _banClave) IS NOT NULL
        THEN
		_numero := (select max(Num) 
				from  TBL_BANCOS_MOVIMIENTOS
   		                where Tipo = _banTipo and Clave = _banClave) + 1;
	ELSE
		_numero := 1;
	END IF;
	
	IF(select max(Num) 
  	    from TBL_BANCOS_MOVIMIENTOS
            where Tipo = _banTipoDest and Clave = _banClaveDest) IS NOT NULL
        THEN
		_numerodest := (select max(Num) 
				from  TBL_BANCOS_MOVIMIENTOS
   		                where Tipo = _banTipoDest and Clave = _banClaveDest) + 1;
	ELSE
		_numerodest := 1;
	END IF;

	IF(select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano and Cerrado = 1) > 0
	OR (select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano) < 1
	THEN
		_err := 3;
		_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_POLIZAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'ERROR: La fecha de poliza pertenece a un periodo cerrado o inexistente'
	END IF;

	-- Revisa si el movimiento pertenece a un periodo ya conciliado, de ser asi no permitira la transaccion
	IF(select count(*) from TBL_BANCOS_CONCILIADOS
		where Tipo = _banTipo and Clave = _banClave and Mes = date_part('month',_banFecha) and Ano = date_part('year',_banFecha)) > 0
	THEN
		_err := 3;
		_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'BANCAJ_BANCAJ' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'ERROR: El periodo del movimiento pertenece a un periodo conciliado. No se puede agregar';
	END IF;

	IF(select count(*) from TBL_BANCOS_CONCILIADOS
		where Tipo = _banTipoDest and Clave = _banClaveDest and Mes = date_part('month',_banFecha) and Ano = date_part('year',_banFecha)) > 0
	THEN
		_err := 3;
		_result := (select msj2 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'BANCAJ_BANCAJ' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'ERROR: El periodo del movimiento destino pertenece a un periodo conciliado. No se puede agregar';
	END IF;

	IF _Fijo = '0' and _Fijodest = '0'
	THEN
		IF (select valfanumerico from TBL_VARIABLES where id_variable = 'CC_TET') = ''
		THEN
			_err := 3;
			_result := (select msj3 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'BANCAJ_BANCAJ' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'ERROR: No existe la cuenta contable para traspasos en transito. Primero debes agregarla para poder hacer el traspaso';
		END IF;
	END IF;

	IF _err = 0
	THEN
		_saldofin := (select Saldo from  TBL_BANCOS_CUENTAS where Clave = _banClave and Tipo = _banTipo) - _banretiro;
		_saldofindest := (select Saldo from  TBL_BANCOS_CUENTAS where Clave = _banClaveDest and Tipo = _banTipoDest) + _bandepositodest;

		INSERT INTO  TBL_BANCOS_MOVIMIENTOS
		VALUES(default, _banTipo, _banClave, _numero, _banFecha, _banConcepto, _banBeneficiario, _banDoc, 0.0, _banRetiro, _saldofin,  _Status, _ClaseRef, _numpol, '0','1', _idmonedaGEN, _tcGEN, _banDR, _Referencia, 
				_ID_SatBanco, _RFC, _ID_SatMetodosPago, _BancoExt, _CuentaBanco)
		RETURNING currval(pg_get_serial_sequence('TBL_BANCOS_MOVIMIENTOS', 'id')) INTO _id_mov;
        	        		
		IF _banTipo = 0
		THEN
			_clase := 'MBAN|' || cast(_id_mov as varchar) || '|' || cast(_banClave as varchar) || '||';
		ELSE
			_clase := 'MCAJ|' || cast(_id_mov as varchar) || '|' || cast(_banClave as varchar) || '||';
		END IF;
	
		INSERT INTO  TBL_BANCOS_MOVIMIENTOS
		VALUES(default, _banTipoDest, _banClaveDest, _numerodest, _banFecha, _banConcepto, '', '', _bandepositodest, 0.0, _saldofindest,  'T', _clase, _numpoldest, '0','1', _idmonedagendest, _tcGEN, 'DEP', _Referencia, 
				_ID_SatBanco, _RFC, _ID_SatMetodosPago, _BancoExt, _CuentaBanco)
		RETURNING currval(pg_get_serial_sequence('TBL_BANCOS_MOVIMIENTOS', 'id')) INTO _id_movdest;
		
		IF _banTipoDest = 0
		THEN
			_clasedest := 'MBAN|' || cast(_id_movdest as varchar) || '|' || cast(_banClaveDest as varchar) || '||';
		ELSE
			_clasedest := 'MCAJ|' || cast(_id_movdest as varchar) || '|' || cast(_banClaveDest as varchar) || '||';
		END IF;
		
		INSERT INTO TBL_BANCOS_TRANSFERENCIAS
		VALUES ( _id_mov, _id_movdest);
		
		-- Actualiza el saldo del banco
		UPDATE TBL_BANCOS_CUENTAS
		SET Saldo = _saldofin
		WHERE Clave = _banClave and Tipo = _banTipo;
		
		UPDATE TBL_BANCOS_CUENTAS
		SET Saldo = _saldofindest
		WHERE Clave = _banClaveDest and Tipo = _banTipoDest;
		
		IF _banDR = 'CHQ' -- si se trata de un retiro, el numero del siguiente documento o cheque se actualiza en el cabecero de las Cuentas Monetarias
		THEN
			UPDATE TBL_BANCOS_CUENTAS
			SET SigCheque = SigCheque + 1
			WHERE Clave = _banClave and Tipo = _banTipo;
		END IF;
		
		IF _Fijo = '0' -- si no es banco externo agrega la poliza origen
		THEN	
			-- Agrega la poliza
			_cc := (select CC from TBL_BANCOS_CUENTAS where Clave = _banClave and Tipo = _banTipo);
			IF _Fijodest = '0'
			THEN
				_ccdest := (select valfanumerico from TBL_VARIABLES where id_variable = 'CC_TET'); -- Cuenta Contable de Transferencias En Transito
			ELSE
				_ccdest := (select CC from TBL_BANCOS_CUENTAS where Clave = _banClaveDest and Tipo = _banTipoDest);
			END IF;
			-- Primero registra y crea la tabla temporal de detalle de la poliza
			CREATE LOCAL TEMPORARY TABLE _TMP_CONT_POLIZAS_DETALLE (
				Part smallint NOT NULL ,
				Cuenta char(19) NOT NULL ,
				Concepto varchar(80) NOT NULL ,
				Parcial numeric(19,4) NOT NULL ,
				Moneda smallint NOT NULL ,
				TC numeric(19,4) NOT NULL ,
				Debe numeric(19,4) NOT NULL ,
				Haber numeric(19,4) NOT NULL
			);
			CREATE LOCAL TEMPORARY TABLE _TMP_CONT_POLIZAS_DETALLE_CE_CHEQUES ( 
				id_part smallint NOT NULL,
				num character varying(20) NOT NULL,
				banco character(3) NOT NULL,
				ctaori character varying(50) NOT NULL,
				fecha timestamp without time zone NOT NULL,
				monto numeric(19,4) NOT NULL,
				benef character varying(300) NOT NULL,
				rfc character varying(13) NOT NULL,
				banemisext character varying(150) NOT NULL,
				moneda character(3) NOT NULL,
				tipcamb numeric(19,5) NOT NULL
			);
			CREATE LOCAL TEMPORARY TABLE _TMP_CONT_POLIZAS_DETALLE_CE_TRANSFERENCIAS ( 
				id_part smallint NOT NULL,
				ctaori character varying(50) NOT NULL,
				bancoori character(3) NOT NULL,
				monto numeric(19,4) NOT NULL,
				ctadest character varying(50) NOT NULL,
				bancodest character(3) NOT NULL,
				fecha timestamp without time zone NOT NULL,
				benef character varying(300) NOT NULL,
				rfc character varying(13) NOT NULL,
				bancooriext character varying(150) NOT NULL,
				bancodestext character varying(150) NOT NULL,
				moneda character(3) NOT NULL,
				tipcamb numeric(19,5) NOT NULL
			);
			CREATE LOCAL TEMPORARY TABLE _TMP_CONT_POLIZAS_DETALLE_CE_OTRMETODOPAGO
			(
				id_part smallint NOT NULL,
				metpagopol character(2) NOT NULL,
				fecha timestamp without time zone NOT NULL,
				benef character varying(300) NOT NULL,
				rfc character varying(13) NOT NULL,
				monto numeric(19,4) NOT NULL,
				moneda character(3) NOT NULL,
				tipcamb numeric(19,5) NOT NULL
			);
			-- Fin de la tabla temporal

			-- Ahora copia los resultados de la tabla del movimiento de detalles, a la temporal de detalles de polizas 
			IF _idmonedaGEN = 1
			THEN
				INSERT INTO _TMP_CONT_POLIZAS_DETALLE
				VALUES(1, _ccdest, _Referencia, _banRetiro, 1, 1.0, _totalpesos, 0.0);
				-- Copia el abono o cargo de la cuenta del movimiento para crear la partida doble de esta poliza
				INSERT INTO _TMP_CONT_POLIZAS_DETALLE
				VALUES(2, _cc, _Referencia, _banRetiro, 1, 1.0, 0.0, _totalpesos);
		
			ELSE 	-- Como es en otra moneda, lo mete como su tipo de cambio
				INSERT INTO _TMP_CONT_POLIZAS_DETALLE
				VALUES(1, _ccdest, _Referencia, _banRetiro, _idmonedaGEN, _tcGEN, _totalpesos, 0.0);
				-- Copia el abono o cargo de la cuenta del movimiento para crear la partida doble de esta poliza
				INSERT INTO _TMP_CONT_POLIZAS_DETALLE
				VALUES(2, _cc, _Referencia, _banRetiro, _idmonedaGEN, _tcGEN, 0.0, _totalpesos);
					
			END IF;
		
			-- Actualiza la contabilidad electronica de este BANCO a esta partida, ya sea por cheque, transferencia u oro metodo de pago
			IF _banTipo = 0
			THEN
				IF _id_satmetodospago = '02' -- se trata de un cheque
				THEN
					INSERT INTO _TMP_CONT_POLIZAS_DETALLE_CE_CHEQUES
					SELECT 2, _banDOC, ID_SatBanco, Descripcion, _banFecha, _banRetiro, _banBeneficiario, _rfc, BancoExt, _moneda_ce, _tcgen
					FROM TBL_BANCOS_CUENTAS 
					WHERE Tipo = _banTipo and Clave = _banClave;
				ELSIF _id_satmetodospago = '03' --Es una transferencia
				THEN
					IF _Fijodest = '0' AND _banTipoDest = '0' --Si es hacia un banco contable, tomar√° la cuenta y banco de destino de la entidad bancaria en forseti
					THEN
						_CuentaBancoDest := (select Descripcion from TBL_BANCOS_CUENTAS where Tipo = _banTipoDest and Clave = _banClaveDest);
						_ID_SatBancoDest := (select ID_SatBanco from TBL_BANCOS_CUENTAS where Tipo = _banTipoDest and Clave = _banClaveDest);
						_BancoExtDest := (select BancoExt from TBL_BANCOS_CUENTAS where Tipo = _banTipoDest and Clave = _banClaveDest);
					ELSE -- De lo contrario, la tomar√° del cabecero enviado
						_CuentaBancoDest := _CuentaBanco;
						_ID_SatBancoDest := _ID_SatBanco;
						_BancoExtDest := _BancoExt;
					END IF;
					INSERT INTO _TMP_CONT_POLIZAS_DETALLE_CE_TRANSFERENCIAS
					SELECT 2, Descripcion, ID_SatBanco, _banRetiro, _CuentaBancoDest, _ID_SatBancoDest, _banFecha,  _banBeneficiario, _rfc, BancoExt, _BancoExtDest, _moneda_ce, _tcgen
					FROM TBL_BANCOS_CUENTAS 
					WHERE Tipo = _banTipo and Clave = _banClave;
				ELSE --Es otro metodo de pago 
					INSERT INTO _TMP_CONT_POLIZAS_DETALLE_CE_OTRMETODOPAGO
					SELECT 2, _id_satmetodospago, _banFecha, _banBeneficiario, _rfc, _banRetiro, _moneda_ce, _tcgen;
				END IF;
			ELSE -- bantipo = 1 "Caja"
				IF _id_satmetodospago = '02' -- se trata de un cheque toma los datos directos capturados en el dialogo)
				THEN
					INSERT INTO _TMP_CONT_POLIZAS_DETALLE_CE_CHEQUES
					SELECT 2, _banDOC, _ID_SatBanco, _cuentabanco, _banFecha, _banRetiro, _banBeneficiario, _rfc, _bancoext, _moneda_ce, _tcgen;
				ELSE --Es otro metodo de pago (Deposito o Retiro es lo mismo)
					INSERT INTO _TMP_CONT_POLIZAS_DETALLE_CE_OTRMETODOPAGO
					SELECT 2, _id_satmetodospago, _banFecha, _banBeneficiario, _rfc, _banRetiro, _moneda_ce, _tcgen;
				END IF;
			END IF;

			-- Agrega ahora la poliza
			--sp_cont_polizas_agregar(_tipo character, _fecha timestamp without time zone, _concepto character varying, _interna bit, _ref character varying, _total numeric, _id_clasificacion character varying)

			SELECT * INTO _errpart, _resultpart, _numpol FROM sp_cont_polizas_agregar('EG', _banFecha, _banConcepto,(case when _Status = 'T' then '1' else '0' end)::bit, _clase, _totalpesos, _id_clasificacion ) 
						as ( err integer, res varchar, clave integer );
      
			IF _errpart <> 0
			THEN
				_err := _errpart;
				_result := _resultpart;
			ELSE
				-- Procede a hacer update al movimiento con el ID de la poliza 
				UPDATE  TBL_BANCOS_MOVIMIENTOS
				SET Pol_ID = _numpol
				WHERE ID = _id_mov; 
			END IF;
			-- Fin de la poliza */

			DROP TABLE _TMP_CONT_POLIZAS_DETALLE;
			DROP TABLE _TMP_CONT_POLIZAS_DETALLE_CE_CHEQUES; 
			DROP TABLE _TMP_CONT_POLIZAS_DETALLE_CE_TRANSFERENCIAS;
			DROP TABLE _TMP_CONT_POLIZAS_DETALLE_CE_OTRMETODOPAGO;
			
		END IF;
		
		IF _Fijodest = '0' and _err = 0 -- si no es banco externo el de destino y no han habido errores, agrega la poliza del destino
		THEN	
			-- Agrega la poliza
			_cc := (select CC from TBL_BANCOS_CUENTAS where Clave = _banClaveDest and Tipo = _banTipoDest);
			IF _Fijo = '0'
			THEN
				_ccdest := (select valfanumerico from TBL_VARIABLES where id_variable = 'CC_TET'); -- Cuenta Contable de Transferencias En Transito
			ELSE
				_ccdest := (select CC from TBL_BANCOS_CUENTAS where Clave = _banClave and Tipo = _banTipo);
			END IF;
			
			-- Primero registra y crea la tabla temporal de detalle de la poliza
			CREATE LOCAL TEMPORARY TABLE _TMP_CONT_POLIZAS_DETALLE (
				Part smallint NOT NULL ,
				Cuenta char(19) NOT NULL ,
				Concepto varchar(80) NOT NULL ,
				Parcial numeric(19,4) NOT NULL ,
				Moneda smallint NOT NULL ,
				TC numeric(19,4) NOT NULL ,
				Debe numeric(19,4) NOT NULL ,
				Haber numeric(19,4) NOT NULL
			);
			CREATE LOCAL TEMPORARY TABLE _TMP_CONT_POLIZAS_DETALLE_CE_CHEQUES ( 
				id_part smallint NOT NULL,
				num character varying(20) NOT NULL,
				banco character(3) NOT NULL,
				ctaori character varying(50) NOT NULL,
				fecha timestamp without time zone NOT NULL,
				monto numeric(19,4) NOT NULL,
				benef character varying(300) NOT NULL,
				rfc character varying(13) NOT NULL,
				banemisext character varying(150) NOT NULL,
				moneda character(3) NOT NULL,
				tipcamb numeric(19,5) NOT NULL
			);
			CREATE LOCAL TEMPORARY TABLE _TMP_CONT_POLIZAS_DETALLE_CE_TRANSFERENCIAS ( 
				id_part smallint NOT NULL,
				ctaori character varying(50) NOT NULL,
				bancoori character(3) NOT NULL,
				monto numeric(19,4) NOT NULL,
				ctadest character varying(50) NOT NULL,
				bancodest character(3) NOT NULL,
				fecha timestamp without time zone NOT NULL,
				benef character varying(300) NOT NULL,
				rfc character varying(13) NOT NULL,
				bancooriext character varying(150) NOT NULL,
				bancodestext character varying(150) NOT NULL,
				moneda character(3) NOT NULL,
				tipcamb numeric(19,5) NOT NULL
			);
			CREATE LOCAL TEMPORARY TABLE _TMP_CONT_POLIZAS_DETALLE_CE_OTRMETODOPAGO
			(
				id_part smallint NOT NULL,
				metpagopol character(2) NOT NULL,
				fecha timestamp without time zone NOT NULL,
				benef character varying(300) NOT NULL,
				rfc character varying(13) NOT NULL,
				monto numeric(19,4) NOT NULL,
				moneda character(3) NOT NULL,
				tipcamb numeric(19,5) NOT NULL
			);
			-- Fin de la tabla temporal
			-- Ahora copia los resultados de la tabla del movimiento de detalles, a la temporal de detalles de polizas 
			IF _idmonedagendest = 1
			THEN
				INSERT INTO _TMP_CONT_POLIZAS_DETALLE
				VALUES(1, _ccdest, _Referencia, _bandepositodest, 1, 1.0, 0.0, _totalpesos);
				-- Copia el abono o cargo de la cuenta del movimiento para crear la partida doble de esta poliza
				INSERT INTO _TMP_CONT_POLIZAS_DETALLE
				VALUES(2, _cc, _Referencia, _bandepositodest, 1, 1.0, _totalpesos, 0.0);
		
			ELSE 	-- Como es en otra moneda, lo mete como su tipo de cambio
				INSERT INTO _TMP_CONT_POLIZAS_DETALLE
				VALUES(1, _ccdest, _Referencia, _bandepositodest, _idmonedagendest, _tcGEN, 0.0, _totalpesos);
				-- Copia el abono o cargo de la cuenta del movimiento para crear la partida doble de esta poliza
				INSERT INTO _TMP_CONT_POLIZAS_DETALLE
				VALUES(2, _cc, _Referencia, _bandepositodest, _idmonedagendest, _tcGEN, _totalpesos, 0.0);
					
			END IF;

			-- Actualiza la contabilidad electronica de este BANCO a esta partida, ya sea por cheque, transferencia u otro metodo de pago
			IF _banTipo = 0 --Origen de banco
			THEN
				IF _id_satmetodospago = '02' -- se trata de un cheque
				THEN
					IF _Fijo = '0' --Origen de banco contable... Toma datos de la entidad de origen
					THEN
						INSERT INTO _TMP_CONT_POLIZAS_DETALLE_CE_CHEQUES
						SELECT 2, _banDOC, ID_SatBanco, Descripcion, _banFecha, _banRetiro, _banBeneficiario, _rfc, BancoExt, _moneda_ce, _tcgen
						FROM TBL_BANCOS_CUENTAS 
						WHERE Tipo = _banTipo and Clave = _banClave;
					ELSE -- Origen de banco externo, toma datos de cheque introducido directamente
						INSERT INTO _TMP_CONT_POLIZAS_DETALLE_CE_CHEQUES
						SELECT 2, _banDOC, _ID_SatBanco, _cuentabanco, _banFecha, _banRetiro, _banBeneficiario, _rfc, _bancoext, _moneda_ce, _tcgen;
					END IF;
				ELSIF _id_satmetodospago = '03' --Es una transferencia... Este destino y el origen solo pueden ser bancos
				THEN
					IF _banTipo = '0' AND _Fijo = '0' --Si es desde un banco contable, tomar√° la cuenta y banco de origen de la entidad bancaria en forseti
					THEN
						_CuentaBancoOri := (select Descripcion from TBL_BANCOS_CUENTAS where Tipo = _banTipo and Clave = _banClave);
						_ID_SatBancoOri := (select ID_SatBanco from TBL_BANCOS_CUENTAS where Tipo = _banTipo and Clave = _banClave);
						_BancoExtOri := (select BancoExt from TBL_BANCOS_CUENTAS where Tipo = _banTipo and Clave = _banClave);
					ELSE -- De lo contrario, la tomar√° del cabecero enviado
						_CuentaBancoOri := _CuentaBanco;
						_ID_SatBancoOri := _ID_SatBanco;
						_BancoExtOri := _BancoExt;
					END IF;
					INSERT INTO _TMP_CONT_POLIZAS_DETALLE_CE_TRANSFERENCIAS
					SELECT 2, _CuentaBancoOri, _ID_SatBancoOri, _banRetiro, Descripcion, ID_SatBanco, _banFecha,  _banBeneficiario, _rfc, _BancoExtOri, BancoExt, _moneda_ce, _tcgen
					FROM TBL_BANCOS_CUENTAS 
					WHERE Tipo = _banTipoDest and Clave = _banClaveDest;
				ELSE --Es otro metodo de pago 
					INSERT INTO _TMP_CONT_POLIZAS_DETALLE_CE_OTRMETODOPAGO
					SELECT 2, _id_satmetodospago, _banFecha, _banBeneficiario, _rfc, _banRetiro, _moneda_ce, _tcgen;
				END IF;
			ELSE -- bantipo = 1 "Caja" Origen de caja
				IF _id_satmetodospago = '02' -- se trata de un cheque toma los datos directos capturados en el dialogo)
				THEN
					INSERT INTO _TMP_CONT_POLIZAS_DETALLE_CE_CHEQUES
					SELECT 2, _banDOC, _ID_SatBanco, _cuentabanco, _banFecha, _banRetiro, _banBeneficiario, _rfc, _bancoext, _moneda_ce, _tcgen;
				ELSE --Es otro metodo de pago 
					INSERT INTO _TMP_CONT_POLIZAS_DETALLE_CE_OTRMETODOPAGO
					SELECT 2, _id_satmetodospago, _banFecha, _banBeneficiario, _rfc, _banRetiro, _moneda_ce, _tcgen;
				END IF;
			END IF;
			
			-- Agrega ahora la poliza
			--sp_cont_polizas_agregar(_tipo character, _fecha timestamp without time zone, _concepto character varying, _interna bit, _ref character varying, _total numeric, _id_clasificacion character varying)

			SELECT * INTO _errpart, _resultpart, _numpoldest FROM sp_cont_polizas_agregar('IG', _banFecha, _banConcepto,'1', _clasedest, _totalpesos, _id_clasificaciondest ) 
				as ( err integer, res varchar, clave integer );
      
			IF _errpart <> 0
			THEN
				_err := _errpart;
				_result := _resultpart;
			ELSE
				-- Procede a hacer update al movimiento con el ID de la poliza 
				UPDATE  TBL_BANCOS_MOVIMIENTOS
				SET Pol_ID = _numpoldest
				WHERE ID = _id_movdest; 
			END IF;
			-- Fin de la poliza */

			DROP TABLE _TMP_CONT_POLIZAS_DETALLE;
			DROP TABLE _TMP_CONT_POLIZAS_DETALLE_CE_CHEQUES; 
			DROP TABLE _TMP_CONT_POLIZAS_DETALLE_CE_TRANSFERENCIAS;
			DROP TABLE _TMP_CONT_POLIZAS_DETALLE_CE_OTRMETODOPAGO;
			
		END IF;
		
		
		
	END IF;

	RETURN QUERY SELECT _err, _result, _id_mov;

END
$BODY$
  LANGUAGE plpgsql;

  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_bancos_movs_cancelar(_movid integer)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err integer; _result varchar(255); _mes smallint; _ano smallint; _esTrans bit; 
	_movIDdest int; _deposito numeric(19,4); _retiro numeric(19,4); _ID_Pol integer; _ID_Poldest integer; _banFecha timestamp; 
	_banTipo smallint; _banClave smallint; _banTipoDest smallint; _banClaveDest smallint;
BEGIN 
	_err := 0;
	_result := (select msj3 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'BANCAJ_BANCAJ' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCOK');
	
	_banFecha := (Select Fecha from TBL_BANCOS_MOVIMIENTOS where  ID = _movID);
	_ID_Pol := (Select Pol_ID from TBL_BANCOS_MOVIMIENTOS where  ID = _movID);
	_mes := date_part('month', _banFecha);
	_ano := date_part('year', _banFecha);
	
	_esTrans := (Select EsTrans from TBL_BANCOS_MOVIMIENTOS where  ID = _movID); -- Pregunta si es transferencia
	_movIDdest := (Select IDMovDestino from TBL_BANCOS_TRANSFERENCIAS where IDMovOrigen = _movID);
	_ID_Poldest := (Select Pol_ID from TBL_BANCOS_MOVIMIENTOS where  ID = _movIDdest);
	
	_deposito := (Select Deposito from TBL_BANCOS_MOVIMIENTOS where  ID = _movID);
	_retiro := (Select Retiro from TBL_BANCOS_MOVIMIENTOS where  ID = _movID);
	
	_banTipo = (Select Tipo from TBL_BANCOS_MOVIMIENTOS where  ID = _movID);
	_banClave = (Select Clave from TBL_BANCOS_MOVIMIENTOS where  ID = _movID);

	_banTipoDest = (Select Tipo from TBL_BANCOS_MOVIMIENTOS where  ID = _movIDdest);
	_banClaveDest = (Select Clave from TBL_BANCOS_MOVIMIENTOS where  ID = _movIDdest);

	IF(select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano and Cerrado = 1) > 0
		OR (select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano) < 1
	THEN
		_err := 3;
		_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_POLIZAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'ERROR: La fecha de poliza pertenece a un periodo cerrado o inexistente'
	END IF;
	
	-- Revisa si el movimiento pertenece a un periodo ya conciliado, de ser asi no permitira la transaccion
	IF(select count(*) from TBL_BANCOS_CONCILIADOS
		where Tipo = _banTipo and Clave = _banClave and Mes = date_part('month',_banFecha) and Ano = date_part('year',_banFecha)) > 0
	THEN
		_err := 3;
		_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'BANCAJ_BANCAJ' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'ERROR: El periodo del movimiento pertenece a un periodo conciliado. No se puede agregar';
	END IF;
	
	-- Revisa conciliaciones de la cuenta de destino
	IF _esTrans = '1'
	THEN
		IF(select count(*) from TBL_BANCOS_CONCILIADOS
			where Tipo = _banTipoDest and Clave = _banClaveDest and Mes = date_part('month',_banFecha) and Ano = date_part('year',_banFecha)) > 0
		THEN
			_err := 3;
			_result := (select msj2 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'BANCAJ_BANCAJ' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'ERROR: El periodo del movimiento pertenece a un periodo conciliado. No se puede agregar';
		END IF;
	END IF;

	IF _err = 0		
	THEN
		UPDATE TBL_CONT_POLIZAS
		SET Status = 'C'
		WHERE ID = _ID_Pol;
			
		UPDATE TBL_BANCOS_MOVIMIENTOS
		SET Estatus = 'C'
		WHERE ID = _movID;
			
		UPDATE TBL_BANCOS_CUENTAS
		SET Saldo = Saldo + _retiro - _deposito
		WHERE Tipo = _banTipo and Clave = _banClave;

		IF _esTrans = '1'
		THEN
			UPDATE TBL_CONT_POLIZAS
			SET Status = 'C'
			WHERE ID = _ID_Poldest;

			UPDATE TBL_BANCOS_MOVIMIENTOS
			SET Estatus = 'C'
			WHERE ID = _movIDdest;

			UPDATE TBL_BANCOS_CUENTAS
			SET Saldo = Saldo + _deposito - _retiro -- hace lo contrario al movimiento origen
			WHERE Clave = _banClaveDest and Tipo = _banTipoDest;
				
		END IF;
	
	END IF;
	
	RETURN QUERY SELECT _err, _result, _movID;

END
$BODY$
  LANGUAGE 'plpgsql';


  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_bancos_movs_aplicar(_movid integer)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err integer; _result varchar(255); _id_pol integer;
BEGIN 
	_err := 0;
	_result := (select msj4 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'BANCAJ_BANCAJ' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCOK');
	_id_pol := (select Pol_ID from TBL_BANCOS_MOVIMIENTOS where ID = _movid);
	IF (select Estatus from TBL_BANCOS_MOVIMIENTOS where ID = _movid) = 'T'
	THEN
		UPDATE TBL_BANCOS_MOVIMIENTOS
		SET Estatus = 'G'
		WHERE ID = _movid;
		IF _id_pol is not null
		THEN
			UPDATE TBL_CONT_POLIZAS
			SET Status = 'G'
			WHERE ID = _id_pol;
		END IF;
	ELSIF (select Estatus from TBL_BANCOS_MOVIMIENTOS where ID = _movid) = 'G'
	THEN
		UPDATE TBL_BANCOS_MOVIMIENTOS
		SET Estatus = 'T'
		WHERE ID = _movid;
		IF _id_pol is not null
		THEN
			UPDATE TBL_CONT_POLIZAS
			SET Status = 'T'
			WHERE ID = _id_pol;
		END IF;
	ELSE
		_err := 3;
		_result := (select msj4 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'BANCAJ_BANCAJ' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --ERROR: El movimiento esta probablemente cancelado y no se puede aplicar/desaplicar
	END IF;
	
	RETURN QUERY SELECT _err, _result, cast(_movID as varchar);

END
$BODY$
  LANGUAGE plpgsql;


  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_bancos_movs_cierremes(_bantipo smallint, _banclave smallint, _mes smallint, _ano smallint)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err integer; _result varchar(255);
BEGIN 
	_err := 0;
	_result := (select msj5 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'BANCAJ_BANCAJ' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCOK');
	
	IF(select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano) < 1
	THEN
		_err := 3;
		_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_POLIZAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'ERROR: La fecha de poliza pertenece a un periodo cerrado o inexistente'
	END IF;

	-- Revisa si el movimiento pertenece a un periodo ya conciliado, de ser asi no permitira la transaccion
	IF(select count(*) from TBL_BANCOS_CONCILIADOS
		where Tipo = _banTipo and Clave = _banClave and Mes = _Mes and Ano = _Ano) > 0
	THEN
		_err := 3;
		_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'BANCAJ_BANCAJ' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'ERROR: El periodo del movimiento pertenece a un periodo conciliado. No se puede agregar';
	END IF;

	IF _err = 0
	THEN
		UPDATE  TBL_BANCOS_MOVIMIENTOS
		SET Cons = '1'
		WHERE Tipo = _banTipo and Clave = _banClave and date_part('month', Fecha) = _Mes and  date_part('year', Fecha) = _Ano;
  
		INSERT INTO TBL_BANCOS_CONCILIADOS
		VALUES (_banTipo, _banClave, _Mes, _Ano);
			
	END IF;

	RETURN QUERY SELECT _err, _result, cast( (cast(_Mes as varchar) || '/' || cast(_Ano as varchar)) as varchar);

END
$BODY$
  LANGUAGE 'plpgsql';

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('INVSERV');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('INVSERV_PROD');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('INVSERV_PROD_AGREGAR');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('INVSERV_PROD_CAMBIAR');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('INVSERV_SERV');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('INVSERV_SERV_AGREGAR');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('INVSERV_SERV_CAMBIAR');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('INVSERV_GASTOS');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('INVSERV_GASTOS_AGREGAR');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('INVSERV_GASTOS_CAMBIAR');



--@FIN_BLOQUE
CREATE TABLE tbl_invserv_lineas
(
  id_linea character varying(8) NOT NULL,
  id_invserv character(1) NOT NULL,
  descripcion character varying(50) NOT NULL,
  CONSTRAINT pk_tbl_invserv_lineas PRIMARY KEY (id_linea ),
  CONSTRAINT ck_tbl_invserv_lineas_id_invserv CHECK (id_invserv = 'P'::bpchar OR id_invserv = 'S'::bpchar OR id_invserv = 'G'::bpchar)
);



--@FIN_BLOQUE
CREATE TABLE tbl_invserv_unidades
(
  id_unidad character varying(10) NOT NULL,
  id_invserv character(1) NOT NULL,
  descripcion character varying(50) NOT NULL,
  id_satunidad smallint NOT NULL,
  CONSTRAINT pk_tbl_invserv_unidades PRIMARY KEY (id_unidad),
  CONSTRAINT ck_tbl_invserv_unidades_id_invserv CHECK (id_invserv = 'P'::bpchar OR id_invserv = 'S'::bpchar OR id_invserv = 'G'::bpchar)
);
--ALTER TABLE tbl_invserv_unidades

--@FIN_BLOQUE
CREATE TABLE tbl_invserv_inventarios
(
  id_prod character varying(20) NOT NULL,
  id_tipo character(1) NOT NULL,
  id_cc character(19),
  descripcion character varying(80) NOT NULL,
  id_linea character varying(8) NOT NULL,
  precio numeric(19,4) NOT NULL,
  existencia numeric(9,3),
  id_unidad character varying(10),
  stockmin numeric(9,3),
  stockmax numeric(9,3),
  seproduce bit(1) NOT NULL,
  nivelprod smallint NOT NULL,
  nosevende bit(1) NOT NULL,
  status character(1) NOT NULL,
  obs character varying(255) NOT NULL,
  id_unidadsalida character varying(10),
  factor numeric(9,6),
  empaque numeric(9,3),
  porsurtir numeric(9,3),
  porrecibir numeric(9,3),
  apartado numeric(9,3),
  dias smallint NOT NULL,
  ultimocosto numeric(19,4),
  costopromedio numeric(19,4),
  impieps numeric(9,6),
  iva_deducible numeric(9,6),
  iva bit(1) NOT NULL,
  cantidadpaquete numeric(9,3),
  tipocosteo smallint,
  cantidadacum numeric(9,3),
  montoacum numeric(19,4),
  preciocomp numeric(19,4) NOT NULL,
  id_moneda smallint NOT NULL,
  precio2 numeric(19,4) NOT NULL,
  precio3 numeric(19,4) NOT NULL,
  precio4 numeric(19,4) NOT NULL,
  precio5 numeric(19,4) NOT NULL,
  precioweb numeric(19,4) NOT NULL,
  precioofertaweb numeric(19,4) NOT NULL,
  descripcionweb character varying(254) NOT NULL,
  comentariosweb character varying(8000) NOT NULL,
  descripcionwebing character varying(254) NOT NULL,
  comentarioswebing character varying(8000) NOT NULL,
  ref_fotoweb character varying(254) NOT NULL,
  ref_fotochicaweb character varying(254) NOT NULL,
  nuevoweb bit(1) NOT NULL,
  numrecomweb smallint NOT NULL,
  numexperienciasweb smallint NOT NULL,
  kgsweb numeric(6,3) NOT NULL,
  sincronizacionweb smallint NOT NULL,
  codigo character varying(20) NOT NULL,
  preciomin numeric(19,4) NOT NULL,
  preciomax numeric(19,4) NOT NULL,
  impivaret numeric(9,6) NOT NULL,
  impisrret numeric(9,6) NOT NULL,
  CONSTRAINT pk_tbl_invserv_inventarios PRIMARY KEY (id_prod),
  CONSTRAINT fk_tbl_invserv_inventarios_tbl_cont_catalogo FOREIGN KEY (id_cc)
      REFERENCES tbl_cont_catalogo (cuenta) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE SET NULL
);



--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_invserv_inventarios_modulo AS 
 SELECT i.id_tipo, i.id_prod AS clave, i.descripcion, i.id_linea AS linea, i.existencia, i.id_cc AS cuenta, i.id_unidadsalida AS unidad, i.status, l.descripcion AS descripcion_linea
   FROM tbl_invserv_inventarios i
   JOIN tbl_invserv_lineas l ON i.id_linea::text = l.id_linea::text;


--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_public_invserv_lineas AS 
 SELECT tbl_invserv_lineas.id_linea AS clave, tbl_invserv_lineas.id_invserv, tbl_invserv_lineas.descripcion
   FROM tbl_invserv_lineas;



--@FIN_BLOQUE
CREATE TABLE tbl_invserv_bodegas
(
  id_bodega smallint NOT NULL,
  id_invserv character(1) NOT NULL,
  nombre character varying(20) NOT NULL,
  descripcion character varying(255) NOT NULL,
  numero integer NOT NULL,
  salida integer NOT NULL,
  fmt_movimientos character varying(20),
  fmt_traspasos character varying(20),
  auditaralm bit(1) NOT NULL,
  manejostocks smallint NOT NULL,
  requerimiento integer NOT NULL,
  fmt_requerimientos character varying(20),
  plantilla integer NOT NULL,
  fmt_plantilla character varying(20),
  cfd bit(2) NOT NULL,
  cfd_noaprobacion integer NOT NULL,
  cfd_nocertificado character varying(20) NOT NULL,
  cfd_id_expedicion smallint NOT NULL,
  cfd_id_receptor smallint NOT NULL,
  id_clasificacion character varying(10) NOT NULL,
  numchfis integer NOT NULL,
  status character(1) NOT NULL,
  fmt_chfis character varying(20),
  fija bit(1) NOT NULL,
  CONSTRAINT pk_tbl_invserv_bodegas PRIMARY KEY (id_bodega ),
  CONSTRAINT fk_tbl_invserv_bodegas_tbl_cont_polizas_clasificaciones FOREIGN KEY (id_clasificacion)
      REFERENCES tbl_cont_polizas_clasificaciones (id_clasificacion) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT ck_tbl_invserv_bodegas_id_invserv CHECK (id_invserv = 'P'::bpchar OR id_invserv = 'G'::bpchar),
  CONSTRAINT ck_tbl_invserv_bodegas_status CHECK (status = 'V'::bpchar OR status = 'C'::bpchar)
);




--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_public_bodegas_catalogo AS 
 SELECT tbl_invserv_bodegas.id_bodega, tbl_invserv_bodegas.id_invserv, tbl_invserv_bodegas.nombre, tbl_invserv_bodegas.manejostocks, tbl_invserv_bodegas.auditaralm
   FROM tbl_invserv_bodegas;



--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_catalog_prod_lineas AS 
 SELECT tbl_invserv_lineas.id_linea AS clave, tbl_invserv_lineas.descripcion, '' AS especial
   FROM tbl_invserv_lineas
  WHERE tbl_invserv_lineas.id_invserv = 'P'::bpchar;



--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_catalog_prodserv_lineas AS 
 SELECT tbl_invserv_lineas.id_linea AS clave, tbl_invserv_lineas.descripcion, '' AS especial
   FROM tbl_invserv_lineas
  WHERE tbl_invserv_lineas.id_invserv = 'S'::bpchar;



--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_catalog_gastos_lineas AS 
 SELECT tbl_invserv_lineas.id_linea AS clave, tbl_invserv_lineas.descripcion, '' AS especial
   FROM tbl_invserv_lineas
  WHERE tbl_invserv_lineas.id_invserv = 'G'::bpchar;



--@FIN_BLOQUE
CREATE TABLE tbl_invserv_existencias
(
  id_bodega smallint NOT NULL,
  id_prod character varying(20) NOT NULL,
  existencia numeric(9,3) NOT NULL,
  stockmin numeric(9,3) NOT NULL,
  stockmax numeric(9,3) NOT NULL,
  CONSTRAINT pk_tbl_invserv_existencias PRIMARY KEY (id_bodega, id_prod),
  CONSTRAINT fk_tbl_invserv_existencias_tbl_invserv_bodegas FOREIGN KEY (id_bodega)
      REFERENCES tbl_invserv_bodegas (id_bodega) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_tbl_invserv_existencias_tbl_invserv_inventarios FOREIGN KEY (id_prod)
      REFERENCES tbl_invserv_inventarios (id_prod) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE
);



--@FIN_BLOQUE
CREATE TABLE tbl_invserv_existencias_periodos
(
  mes smallint NOT NULL,
  ano smallint NOT NULL,
  id_bodega smallint NOT NULL,
  id_prod character varying(20) NOT NULL,
  existenciaini numeric(9,3) NOT NULL,
  existenciafin numeric(9,3) NOT NULL,
  CONSTRAINT pk_tbl_invserv_existencias_periodos PRIMARY KEY (mes, ano, id_bodega, id_prod),
  CONSTRAINT fk_tbl_invserv_existencias_periodos_tbl_cont_catalogo_periodos FOREIGN KEY (mes, ano)
      REFERENCES tbl_cont_catalogo_periodos (mes, ano) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_tbl_invserv_existencias_periodos_tbl_invserv_bodegas FOREIGN KEY (id_bodega)
      REFERENCES tbl_invserv_bodegas (id_bodega) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_tbl_invserv_existencias_periodos_tbl_invserv_inventarios FOREIGN KEY (id_prod)
      REFERENCES tbl_invserv_inventarios (id_prod) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE
);



--@FIN_BLOQUE
CREATE TABLE tbl_invserv_costos
(
  mes smallint NOT NULL,
  ano smallint NOT NULL,
  id_prod character varying(20) NOT NULL,
  existenciaini numeric(9,3) NOT NULL,
  costopromini numeric(19,4) NOT NULL,
  ultimocostoini numeric(19,4) NOT NULL,
  saldoini numeric(19,4) NOT NULL,
  existenciafin numeric(9,3) NOT NULL,
  costopromfin numeric(19,4) NOT NULL,
  ultimocostofin numeric(19,4) NOT NULL,
  saldofin numeric(19,4) NOT NULL,
  CONSTRAINT pk_tbl_invserv_totales PRIMARY KEY (mes, ano, id_prod),
  CONSTRAINT fk_tbl_invserv_costos_tbl_cont_catalogo_periodos FOREIGN KEY (mes, ano)
      REFERENCES tbl_cont_catalogo_periodos (mes, ano) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_tbl_invserv_costos_tbl_invserv_inventarios FOREIGN KEY (id_prod)
      REFERENCES tbl_invserv_inventarios (id_prod) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE
);



--@FIN_BLOQUE
CREATE TABLE tbl_invserv_gastos_porcentajes
(
  id_prod character varying(20) NOT NULL,
  id_cc character(19) NOT NULL,
  porcentaje numeric(9,6) NOT NULL,
  CONSTRAINT pk_tbl_invserv_gastos_porcentajes PRIMARY KEY (id_prod, id_cc),
  CONSTRAINT fk_tbl_invserv_gastos_porcentajes_tbl_cont_catalogo FOREIGN KEY (id_cc)
      REFERENCES tbl_cont_catalogo (cuenta) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_tbl_invserv_gastos_porcentajes_tbl_invserv_inventarios FOREIGN KEY (id_prod)
      REFERENCES tbl_invserv_inventarios (id_prod) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE
);



--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_invserv_inventarios_existencias AS 
 SELECT c.id_prod AS clave, e.id_bodega, b.nombre AS bodega, e.existencia, e.stockmin, e.stockmax, b.id_invserv AS tipo
   FROM tbl_invserv_inventarios c
   JOIN tbl_invserv_existencias e ON c.id_prod::text = e.id_prod::text AND c.id_tipo = 'P'::bpchar
   JOIN tbl_invserv_bodegas b ON e.id_bodega = b.id_bodega;


--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_invserv_inventarios_mas AS 
 SELECT i.id_prod AS clave, i.precio, i.precio2, i.precio3, i.precio4, i.precio5, i.precioweb, i.precioofertaweb, i.stockmin, i.stockmax, i.seproduce, i.nosevende, i.status, i.obs, i.id_unidadsalida, i.factor, i.empaque, i.porsurtir, i.porrecibir, i.apartado, i.dias, i.ultimocosto, i.costopromedio, i.impieps, i.impivaret, i.impisrret, i.iva_deducible, i.iva, i.tipocosteo, i.cantidadacum, i.montoacum, i.descripcionweb, i.comentariosweb, i.descripcionwebing, i.comentarioswebing, i.ref_fotoweb, i.ref_fotochicaweb, i.nuevoweb, i.numrecomweb, i.numexperienciasweb, i.kgsweb, l.descripcion AS lineadescripcion, ( SELECT tbl_cont_catalogo.nombre
           FROM tbl_cont_catalogo
          WHERE tbl_cont_catalogo.cuenta = i.id_cc) AS cuentanombre, i.codigo, i.preciomin, i.preciomax
   FROM tbl_invserv_inventarios i
   JOIN tbl_invserv_lineas l ON i.id_linea::text = l.id_linea::text;



--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_invserv_gastos_detalle AS 
 SELECT p.id_prod, p.id_cc AS cuenta, p.porcentaje, 
        CASE
            WHEN getlevelaccount(c1.cuenta) = 1 THEN c1.nombre
            WHEN getlevelaccount(c1.cuenta) = 2 THEN ((((( SELECT c2.nombre
               FROM tbl_cont_catalogo c2
              WHERE ("substring"(c1.cuenta::text, 1, 4) || '000000000000000'::text) = c2.cuenta::text))::text) || '/'::text) || c1.nombre::text)::character varying
            WHEN getlevelaccount(c1.cuenta) = 3 THEN ((((((( SELECT c2.nombre
               FROM tbl_cont_catalogo c2
              WHERE ("substring"(c1.cuenta::text, 1, 4) || '000000000000000'::text) = c2.cuenta::text))::text) || '/'::text) || ((( SELECT c3.nombre
               FROM tbl_cont_catalogo c3
              WHERE ("substring"(c1.cuenta::text, 1, 7) || '000000000000'::text) = c3.cuenta::text))::text)) || '/'::text) || c1.nombre::text)::character varying
            WHEN getlevelaccount(c1.cuenta) = 4 THEN ((((((((( SELECT c2.nombre
               FROM tbl_cont_catalogo c2
              WHERE ("substring"(c1.cuenta::text, 1, 4) || '000000000000000'::text) = c2.cuenta::text))::text) || '/'::text) || ((( SELECT c3.nombre
               FROM tbl_cont_catalogo c3
              WHERE ("substring"(c1.cuenta::text, 1, 7) || '000000000000'::text) = c3.cuenta::text))::text)) || '/'::text) || ((( SELECT c4.nombre
               FROM tbl_cont_catalogo c4
              WHERE ("substring"(c1.cuenta::text, 1, 10) || '000000000'::text) = c4.cuenta::text))::text)) || '/'::text) || c1.nombre::text)::character varying
            WHEN getlevelaccount(c1.cuenta) = 5 THEN ((((((((((( SELECT c2.nombre
               FROM tbl_cont_catalogo c2
              WHERE ("substring"(c1.cuenta::text, 1, 4) || '000000000000000'::text) = c2.cuenta::text))::text) || '/'::text) || ((( SELECT c3.nombre
               FROM tbl_cont_catalogo c3
              WHERE ("substring"(c1.cuenta::text, 1, 7) || '000000000000'::text) = c3.cuenta::text))::text)) || '/'::text) || ((( SELECT c4.nombre
               FROM tbl_cont_catalogo c4
              WHERE ("substring"(c1.cuenta::text, 1, 10) || '000000000'::text) = c4.cuenta::text))::text)) || '/'::text) || ((( SELECT c5.nombre
               FROM tbl_cont_catalogo c5
              WHERE ("substring"(c1.cuenta::text, 1, 13) || '000000'::text) = c5.cuenta::text))::text)) || '/'::text) || c1.nombre::text)::character varying
            WHEN getlevelaccount(c1.cuenta) = 6 THEN ((((((((((((( SELECT c2.nombre
               FROM tbl_cont_catalogo c2
              WHERE ("substring"(c1.cuenta::text, 1, 4) || '000000000000000'::text) = c2.cuenta::text))::text) || '/'::text) || ((( SELECT c3.nombre
               FROM tbl_cont_catalogo c3
              WHERE ("substring"(c1.cuenta::text, 1, 7) || '000000000000'::text) = c3.cuenta::text))::text)) || '/'::text) || ((( SELECT c4.nombre
               FROM tbl_cont_catalogo c4
              WHERE ("substring"(c1.cuenta::text, 1, 10) || '000000000'::text) = c4.cuenta::text))::text)) || '/'::text) || ((( SELECT c5.nombre
               FROM tbl_cont_catalogo c5
              WHERE ("substring"(c1.cuenta::text, 1, 13) || '000000'::text) = c5.cuenta::text))::text)) || '/'::text) || ((( SELECT c6.nombre
               FROM tbl_cont_catalogo c6
              WHERE ("substring"(c1.cuenta::text, 1, 16) || '000'::text) = c6.cuenta::text))::text)) || '/'::text) || c1.nombre::text)::character varying
            ELSE ''::character varying
        END AS nombre
   FROM tbl_invserv_gastos_porcentajes p
   JOIN tbl_cont_catalogo c1 ON p.id_cc = c1.cuenta;

  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_invserv_inventarios_agregar(_id_prod character varying, _id_tipo character, _id_cc character, _descripcion character varying, _id_linea character varying, _precio numeric, _existencia numeric, _id_unidad character varying, _stockmin numeric, _stockmax numeric, _seproduce bit, _nosevende bit, _status character, _obs character varying, _id_unidadsalida character varying, _factor numeric, _empaque numeric, _porsurtir numeric, _porrecibir numeric, _apartado numeric, _dias smallint, _ultimocosto numeric, _costopromedio numeric, _impieps numeric, _impivaret numeric, _impisrret numeric, _iva_deducible numeric, _iva bit, _cantidadpaquete numeric, _tipocosteo smallint, _cantidadacum numeric, _montoacum numeric, _precio2 numeric, _precio3 numeric, _precio4 numeric, _precio5 numeric, _precioweb numeric, _precioofertaweb numeric, _descripcionweb character varying, _comentariosweb character varying, _descripcionwebing character varying, _comentarioswebing character varying, _ref_fotoweb 
character varying, _ref_fotochicaweb character varying, _nuevoweb bit, _numrecomweb smallint, _numexperienciasweb smallint, _kgsweb numeric, _sincronizacionweb smallint, _codigo character varying, _preciomin numeric, _preciomax numeric)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err integer; _result varchar(255);
BEGIN
	_err := 0;
	_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'INVSERV_INVSERV' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCOK'); --'El producto se agreg? correctamente';
	
	-- si no existe el producto lo agregara
	IF(select count(*) from TBL_INVSERV_INVENTARIOS where ID_Prod = _ID_Prod) > 0
	THEN
		_err := 3;
		_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'INVSERV_INVSERV' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'ERROR: La clave ya existe en otro registro';
	END IF;

	IF(select count(*) from TBL_INVSERV_INVENTARIOS where Codigo = _Codigo) > 0
	THEN
		_err := 3;
		_result := (select msj2 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'INVSERV_INVSERV' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'PRECAUCION: El c√≥digo de proveedor ya existe en otro registro';
	END IF;

	IF _err = 0
	THEN	
		INSERT INTO TBL_INVSERV_INVENTARIOS
		VALUES(_id_prod,_id_tipo,_id_cc,_descripcion,_id_linea,_precio,_existencia,_id_unidad,_stockmin,_stockmax,_seproduce,/*nivelprod*/0,_nosevende,
			_status,_obs,_id_unidadsalida,_factor,_empaque,_porsurtir,_porrecibir,_apartado,_dias,_ultimocosto,_costopromedio,_impieps,_iva_deducible,
			_iva,_cantidadpaquete,_tipocosteo,_cantidadacum,_montoacum,/*preciocomp*/_ultimocosto,/*id_moneda*/1,_precio2,_precio3,_precio4,_precio5,
			_precioweb,_precioofertaweb,_descripcionweb,_comentariosweb,_descripcionwebing,_comentarioswebing,_ref_fotoweb,_ref_fotochicaweb,_nuevoweb,
			_numrecomweb,_numexperienciasweb,_kgsweb,_sincronizacionweb,_codigo,_preciomin,_preciomax, _impivaret, _impisrret);
		
		-- Procede a insertar los precios y fechas ultimas de compra por proveedor si es un Producto o servicio
		-- y las existencias y stocks en cada bodega
		-- inserta existencias por periodos
		INSERT INTO TBL_INVSERV_EXISTENCIAS_PERIODOS
		SELECT Mes, Ano, ID_Bodega, _ID_Prod, _Existencia, _Existencia
		FROM TBL_CONT_CATALOGO_PERIODOS, _TMP_INVSERV_EXISTENCIAS
		WHERE Mes <> 13;
		
		-- inserta existencias en cero por periodos de las bodegas faltantes
		INSERT INTO TBL_INVSERV_EXISTENCIAS_PERIODOS
		SELECT Mes, Ano, b.ID_Bodega, _ID_Prod, 0.000, 0.000
		FROM TBL_CONT_CATALOGO_PERIODOS, TBL_INVSERV_BODEGAS b
		WHERE Mes <> 13 AND b.ID_Bodega NOT IN (select ID_Bodega from _TMP_INVSERV_EXISTENCIAS);

		-- inserta existencias
		INSERT INTO TBL_INVSERV_EXISTENCIAS
		SELECT ID_Bodega, _ID_Prod, Existencia, StockMin, StockMax
		FROM _TMP_INVSERV_EXISTENCIAS;
	
		-- inserta las existencias en cero de las bodegas faltantes
		INSERT INTO TBL_INVSERV_EXISTENCIAS
		SELECT b.ID_Bodega, _ID_Prod, 0.000, 0.000, 0.000
		FROM TBL_INVSERV_BODEGAS b
		WHERE b.ID_Bodega NOT IN (select ID_Bodega from _TMP_INVSERV_EXISTENCIAS);

		
		-- procede a insertar en costos y saldos mensuales segun los meses creados; si no existen meses
		-- creados, no inserta nada por ahora, sino que se inserta automatico al crear el primer periodo contable
		INSERT INTO TBL_INVSERV_COSTOS
		SELECT Mes, Ano, _ID_Prod, _CantidadAcum, _CostoPromedio, _UltimoCosto, _MontoAcum, _CantidadAcum, _CostoPromedio, _UltimoCosto, _MontoAcum
		FROM TBL_CONT_CATALOGO_PERIODOS
		WHERE Mes <> 13;
		
		--Por Ultimo, Inserta Cuentas si es cat√°logo de gastos
		-- Procede a insertar en la tabla de porcentajes para registrar la formula del gasto
		IF _ID_Tipo = 'G'
		THEN
			INSERT INTO TBL_INVSERV_GASTOS_PORCENTAJES
			SELECT _ID_Prod, ID_CC, Porcentaje
			FROM _TMP_INVSERV_GASTOS_PORCENTAJES;
		END IF;
	END IF;

	RETURN QUERY SELECT _err, _result, _ID_Prod;

END
$BODY$
  LANGUAGE plpgsql;
  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_invserv_inventarios_cambiar(_id_prod character varying, _id_tipo character, _id_cc character, _descripcion character varying, _id_linea character varying, _precio numeric, _existencia numeric, _id_unidad character varying, _stockmin numeric, _stockmax numeric, _seproduce bit, _nosevende bit, _status character, _obs character varying, _id_unidadsalida character varying, _factor numeric, _empaque numeric, _porsurtir numeric, _porrecibir numeric, _apartado numeric, _dias smallint, _ultimocosto numeric, _costopromedio numeric, _impieps numeric, _impivaret numeric, _impisrret numeric, _iva_deducible numeric, _iva bit, _cantidadpaquete numeric, _tipocosteo smallint, _cantidadacum numeric, _montoacum numeric, _precio2 numeric, _precio3 numeric, _precio4 numeric, _precio5 numeric, _precioweb numeric, _precioofertaweb numeric, _descripcionweb character varying, _comentariosweb character varying, _descripcionwebing character varying, _comentarioswebing character varying, _ref_fotoweb 
character varying, _ref_fotochicaweb character varying, _nuevoweb bit, _numrecomweb smallint, _numexperienciasweb smallint, _kgsweb numeric, _sincronizacionweb smallint, _codigo character varying, _preciomin numeric, _preciomax numeric)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err integer; _result varchar(255);
BEGIN
	_err := 0;
	_result := (select msj2 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'INVSERV_INVSERV' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCOK'); --'El producto se cambio correctamente';
	
	-- si no existe el producto no lo cambia
	IF(select count(*) from TBL_INVSERV_INVENTARIOS where ID_Prod = _ID_Prod) < 1
	THEN
		_err := 3;
		_result := (select msj3 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'INVSERV_INVSERV' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'ERROR: La clave no existe, no se puede cambiar';
	END IF;

	IF(select count(*) from TBL_INVSERV_INVENTARIOS where Codigo = _Codigo and ID_Prod <> _ID_Prod) > 0
	THEN
		_err := 3;
		_result := (select msj2 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'INVSERV_INVSERV' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'ERROR: No se puede cambiar el producto porque el codigo de proveedor,  ya existe en otro registro';
	END IF;

	IF _err = 0
	THEN	
		UPDATE TBL_INVSERV_INVENTARIOS
		SET ID_CC = _id_cc, Descripcion = _descripcion, ID_Linea = _id_linea, Precio = _precio, /* Existencia /no cambia/ */ ID_Unidad = _id_unidad, /* stockmin stockmax /no cambian/ */ SeProduce = _seproduce,/*nivelprod /no cambia/ */ NoSeVende = _nosevende,
			Status = _status, Obs = _obs, ID_UnidadSalida = _id_unidadsalida, Factor = _factor, Empaque = _empaque, PorSurtir = _porsurtir, PorRecibir = _porrecibir, Apartado = _apartado, Dias = _dias, /* ultimocosto costopromedio /no cambian/ */ ImpIEPS = _impieps, IVA_Deducible = _iva_deducible,
			IVA = _iva, CantidadPaquete = _cantidadpaquete, TipoCosteo = _tipocosteo, /* cantidadacum montoacum preciocomp ultimocosto id_moneda /No cambian/ */ Precio2 = _precio2, Precio3 = _precio3, Precio4 = _precio4, Precio5 = _precio5,
			PrecioWeb = _precioweb, PrecioOfertaWeb = _precioofertaweb, DescripcionWeb = _descripcionweb, ComentariosWeb = _comentariosweb, DescripcionWebIng = _descripcionwebing, ComentariosWebIng = _comentarioswebing, Ref_FotoWeb = _ref_fotoweb, Ref_FotoChicaWeb = _ref_fotochicaweb, NuevoWeb = _nuevoweb,
			NumRecomWeb = _numrecomweb, NumExperienciasWeb = _numexperienciasweb, KgsWeb = _kgsweb, SincronizacionWeb = _sincronizacionweb, Codigo = _codigo, PrecioMin = _preciomin, PrecioMax = _preciomax,
			ImpIVARet = _impivaret, ImpISRRet = _impisrret
		WHERE ID_Prod = _id_prod;
		-- Procede a insertar los stocks en cada bodega
	
		-- actualiza stocks
		UPDATE TBL_INVSERV_EXISTENCIAS AS i
		SET StockMin = e.StockMin, StockMax = e.StockMax
		FROM _TMP_INVSERV_EXISTENCIAS e
		WHERE  i.ID_Prod = _ID_Prod AND e.ID_Bodega = i.ID_Bodega;

		-- inserta los stocks en cero de las bodegas faltantes
		INSERT INTO TBL_INVSERV_EXISTENCIAS
		SELECT b.ID_Bodega, _ID_Prod, 0.000, 0.000, 0.000
		FROM TBL_INVSERV_BODEGAS b
		WHERE b.ID_Bodega NOT IN (select ID_Bodega from _TMP_INVSERV_EXISTENCIAS);

		--Por Ultimo, Actualiza Cuentas si es cat√°logo de gastos
		-- Procede a insertar en la tabla de porcentajes para registrar la formula del gasto
		IF _ID_Tipo = 'G'
		THEN
			--borra los las tablas de detalles antes que otra cosa
			DELETE FROM TBL_INVSERV_GASTOS_PORCENTAJES
			WHERE ID_Prod = _ID_Prod;

			INSERT INTO TBL_INVSERV_GASTOS_PORCENTAJES
			SELECT _ID_Prod, ID_CC, Porcentaje
			FROM _TMP_INVSERV_GASTOS_PORCENTAJES;
		END IF;		
	END IF;

	RETURN QUERY SELECT _err, _result, _ID_Prod;

END
$BODY$
  LANGUAGE plpgsql;

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('BANCAJ_VALES');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('BANCAJ_VALES_AGREGAR');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('BANCAJ_VALES_TRASPASAR');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('BANCAJ_VALES_ELIMINAR');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('BANCAJ_VALES_CAMBIAR');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('BANCAJ_VALES_GENPROC');



--@FIN_BLOQUE
CREATE TABLE tbl_cajas_cierre
(
  id_cierre integer NOT NULL,
  numero integer NOT NULL,
  id_tipo smallint NOT NULL,
  id_clave smallint NOT NULL,
  fecha timestamp without time zone NOT NULL,
  obs character varying(254) NOT NULL,
  status character(1) NOT NULL,
  CONSTRAINT pk_tbl_cajas_cierre PRIMARY KEY (id_cierre),
  CONSTRAINT fk_tbl_cajas_cierre_tbl_bancos_cuentas FOREIGN KEY (id_tipo, id_clave)
      REFERENCES tbl_bancos_cuentas (tipo, clave) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE
);



--@FIN_BLOQUE
CREATE TABLE tbl_cajas_cierre_vales
(
  id_vale integer NOT NULL,
  id_cierre integer NOT NULL,
  id_tipo character(1) NOT NULL,
  fecha timestamp without time zone NOT NULL,
  id_gasto character varying(20) NOT NULL,
  concepto character varying(254) NOT NULL,
  cantidad numeric(19,4) NOT NULL,
  descuento numeric(9,6) NOT NULL,
  iva numeric(9,6) NOT NULL,
  total numeric(19,4) NOT NULL,
  CONSTRAINT pk_tbl_cajas_cierre_vales PRIMARY KEY (id_vale),
  CONSTRAINT fk_tbl_cajas_cierre_vales_tbl_cajas_cierre FOREIGN KEY (id_cierre)
      REFERENCES tbl_cajas_cierre (id_cierre) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_tbl_cajas_cierre_vales_tbl_invserv_inventarios FOREIGN KEY (id_gasto)
      REFERENCES tbl_invserv_inventarios (id_prod) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE
);



--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_vales AS 
 SELECT v.id_cierre, c.numero, c.id_clave, v.id_vale, v.id_tipo, v.fecha, v.id_gasto, i.descripcion, v.concepto, 
        CASE
            WHEN v.id_tipo = 'P'::bpchar THEN v.total
            ELSE 0.0000
        END AS provisional, 
        CASE
            WHEN v.id_tipo = 'F'::bpchar THEN v.total
            ELSE 0.0000
        END AS final, 
        CASE
            WHEN v.id_tipo = 'A'::bpchar THEN v.total
            ELSE 0.0000
        END AS factura, 
        CASE
            WHEN v.id_tipo = 'C'::bpchar THEN v.total
            ELSE 0.0000
        END AS compra, 
        CASE
            WHEN v.id_tipo = 'G'::bpchar THEN v.total
            ELSE 0.0000
        END AS pago, 
        CASE
            WHEN v.id_tipo = 'T'::bpchar THEN v.total
            ELSE 0.0000
        END AS traspaso, v.cantidad, v.descuento, v.iva, v.total
   FROM tbl_cajas_cierre_vales v
   JOIN tbl_cajas_cierre c ON c.id_cierre = v.id_cierre AND c.id_tipo = 1
   JOIN tbl_invserv_inventarios i ON v.id_gasto::text = i.id_prod::text;



--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_catalog_gastos AS 
 SELECT tbl_invserv_inventarios.id_prod AS clave, tbl_invserv_inventarios.descripcion, tbl_invserv_inventarios.id_linea AS especial
   FROM tbl_invserv_inventarios
  WHERE tbl_invserv_inventarios.id_tipo = 'G'::bpchar;

--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_catalog_gastos_utensilios AS 
 SELECT tbl_invserv_inventarios.id_prod AS clave, tbl_invserv_inventarios.descripcion, tbl_invserv_inventarios.id_linea AS especial
   FROM tbl_invserv_inventarios
  WHERE tbl_invserv_inventarios.id_tipo = 'G'::bpchar AND tbl_invserv_inventarios.nosevende = B'1'::"bit";


--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_public_invserv_gastos_catalogo AS 
 SELECT tbl_invserv_inventarios.id_tipo, tbl_invserv_inventarios.id_prod AS clave, tbl_invserv_inventarios.descripcion, tbl_invserv_inventarios.id_linea AS linea, tbl_invserv_inventarios.ultimocosto, tbl_invserv_inventarios.costopromedio, tbl_invserv_inventarios.id_unidad, tbl_invserv_inventarios.iva, tbl_invserv_inventarios.impieps
   FROM tbl_invserv_inventarios
  WHERE tbl_invserv_inventarios.id_tipo = 'G'::bpchar AND tbl_invserv_inventarios.status = 'V'::bpchar;


  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_cajas_vales_agregar(_id_clave smallint, _id_tipo character, _fecha timestamp without time zone, _id_gasto character varying, _concepto character varying, _total numeric)
  RETURNS SETOF record AS
$BODY$
DECLARE _err int; _result varchar(255); _ID_Cierre int; _ID_Vale int; _ID_GastoFIN varchar(20); _Status char(1);
BEGIN
	_err := 0;
	_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'BANCAJ_VALES' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCOK');
	_ID_GastoFIN := _ID_Gasto;
	_ID_Cierre := ( select ID_Cierre from TBL_CAJAS_CIERRE where Numero = 0 and ID_Tipo = 1 and ID_Clave = _ID_Clave );
	_Status := ( select Status from TBL_CAJAS_CIERRE where ID_Cierre = _ID_Cierre );
  
	IF _Status = 'P'
	THEN
		_err := 3;
		_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'BANCAJ_VALES' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'No se puede agregar el vale porque en estos momentos la caja esta protegida';
	END IF;
  
	IF _err = 0
	THEN
		IF(select max(ID_Vale) from TBL_CAJAS_CIERRE_VALES) IS NOT NULL
		THEN
			_ID_Vale := (select max(ID_Vale) from TBL_CAJAS_CIERRE_VALES ) + 1;
		ELSE
			_ID_Vale := 1;
		END IF;

		INSERT INTO TBL_CAJAS_CIERRE_VALES
		VALUES(_ID_Vale, _ID_Cierre, _ID_Tipo, _Fecha, _ID_GastoFIN, _Concepto, _Total, 0, 0, _Total);


	END IF;
	
	RETURN QUERY SELECT _err, _result, _ID_Vale;
	
END
$BODY$
  LANGUAGE 'plpgsql';

  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_cajas_vales_cambiar(_id_vale integer, _id_tipo character, _fecha timestamp without time zone, _id_gasto character varying, _concepto character varying, _total numeric)
  RETURNS SETOF record AS
$BODY$
DECLARE _err int; _result varchar(255); _ID_Cierre int; _ID_GastoFIN varchar(20); _Status char(1);
BEGIN
	_err := 0;
	_result := (select msj2 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'BANCAJ_VALES' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCOK');
	_ID_GastoFIN := _ID_Gasto;
	_ID_Cierre = ( select ID_Cierre from TBL_CAJAS_CIERRE_VALES where ID_Vale = _ID_Vale );
	_Status := ( select Status from TBL_CAJAS_CIERRE where ID_Cierre = _ID_Cierre );
  
	IF _Status = 'P'
	THEN
		_err := 3;
		_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'BANCAJ_VALES' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'ERROR: No se puede cambiar el vale porque en estos momentos la caja esta protegida';
	END IF;
  
	IF(select count(*) from TBL_CAJAS_CIERRE_VALES where ID_Vale = _ID_Vale) < 1
	THEN
		_err := 3;
		_result = (select msj2 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'BANCAJ_VALES' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); 
	END IF;

	IF _err = 0
	THEN
		UPDATE TBL_CAJAS_CIERRE_VALES
		SET ID_Cierre = _ID_Cierre, ID_Tipo = _ID_Tipo, Fecha = _Fecha, ID_Gasto = _ID_GastoFIN, 
			Concepto = _Concepto, Cantidad = _Total, Total = _Total
		WHERE ID_Vale = _ID_Vale;


	END IF;
	
	RETURN QUERY SELECT _err, _result, _ID_Vale;
	
END
$BODY$
  LANGUAGE 'plpgsql';

  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_cajas_vales_eliminar(_id_vale integer)
  RETURNS SETOF record AS
$BODY$
DECLARE _err int; _result varchar(255); _ID_Cierre int; _Status char(1);
BEGIN
	_err := 0;
	_result := (select msj3 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'BANCAJ_VALES' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCOK');
	_ID_Cierre := ( select ID_Cierre from TBL_CAJAS_CIERRE_VALES where ID_Vale = _ID_Vale );
	_Status := ( select Status from TBL_CAJAS_CIERRE where ID_Cierre = _ID_Cierre );
  
	IF _Status = 'P'
	THEN
		_err := 3;
		_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'BANCAJ_VALES' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); 
	END IF;
  
	IF(select count(*) from TBL_CAJAS_CIERRE_VALES where ID_Vale = _ID_Vale) < 1
	THEN
		_err := 3;
		_result = (select msj2 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'BANCAJ_VALES' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); 
	END IF;


	IF _err = 0
	THEN
		DELETE FROM TBL_CAJAS_CIERRE_VALES
		WHERE ID_Vale = _ID_Vale;

	END IF;
	
	RETURN QUERY SELECT _err, _result, _ID_Vale;
	
END
$BODY$
  LANGUAGE 'plpgsql';

  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_cajas_vales_proteccion(_id_clave smallint)
  RETURNS SETOF record AS
$BODY$
DECLARE _err int; _result varchar(255); _ID_Cierre int; _Status char(1);
BEGIN
	_err := 0;
	_result := '';
	_ID_Cierre := ( select ID_Cierre from TBL_CAJAS_CIERRE where Numero = 0 and ID_Tipo = 1 and ID_Clave = _ID_Clave );
	_Status := ( select Status from TBL_CAJAS_CIERRE where ID_Cierre = _ID_Cierre );
  
	IF _Status = 'A'
	THEN
		_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'BANCAJ_VALES' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCOK2'); --'La caja se ha protegido contra vales';
		
		UPDATE TBL_CAJAS_CIERRE
		SET Status = 'P'
		WHERE ID_Cierre = _ID_Cierre;
	ELSIF _Status = 'P'
	THEN
		_result := (select msj2 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'BANCAJ_VALES' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCOK2'); --'La caja ha quedado desprotegida contra vales';
		
		UPDATE TBL_CAJAS_CIERRE
		SET Status = 'A'
		WHERE ID_Cierre = _ID_Cierre;
	END IF;

	RETURN QUERY SELECT _err, _result, _ID_Clave;
	
END

$BODY$
  LANGUAGE 'plpgsql';

  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_cajas_vales_traspasar(_id_clave smallint, _id_clavedest smallint, _fsi_f bit, _fsi_a bit, _fsi_g bit, _fsi_c bit, _fsi_t bit)
  RETURNS SETOF record AS
$BODY$
DECLARE _err int; _result varchar(255); _ID_Cierre int; _ID_CierreDest int; _Status char(1); _StatusDest char(1); _Fecha timestamp;
BEGIN
	_err := 0;
	_result := (select msj4 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'BANCAJ_VALES' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCOK');
	_ID_Cierre := ( select ID_Cierre from TBL_CAJAS_CIERRE where Numero = 0 and ID_Tipo = 1 and ID_Clave = _ID_Clave );
	_Status := ( select Status from TBL_CAJAS_CIERRE where ID_Cierre = _ID_Cierre );
	_ID_CierreDest := ( select ID_Cierre from TBL_CAJAS_CIERRE where Numero = 0 and ID_Tipo = 1 and ID_Clave = _ID_ClaveDest );
	_StatusDest := ( select Status from TBL_CAJAS_CIERRE where ID_Cierre = _ID_CierreDest );
	_Fecha := NOW()::date;

	--RAISE NOTICE 'Cierre: %, Dest: %', _ID_Cierre, _ID_CierreDest;
	IF (select count(*) from TBL_BANCOS_CUENTAS where Tipo = 1 and Clave = _ID_ClaveDest) < 1
	 THEN
		_err := 3;
		_result := (select msj4 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'BANCAJ_VALES' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --ERROR: No existe la caja de destino, o este es un banco.
	END IF;
	
	IF _Status = 'P'
	THEN
		_err := 3;
		_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'BANCAJ_VALES' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); 
	END IF;
  
	IF _StatusDest = 'P'
	THEN
		_err := 3;
		_result := (select msj3 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'BANCAJ_VALES' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'ERROR: No se puede traspasar porque la caja de destino esta protegida';
	END IF;

	IF _err = 0
	THEN
		IF _FSI_F = '1'
		THEN
			UPDATE TBL_CAJAS_CIERRE_VALES
			SET ID_Cierre = _ID_CierreDest, Fecha = _Fecha
			WHERE ID_Cierre = _ID_Cierre and ID_Tipo = 'F';
		END IF;

		IF _FSI_A = '1'
		THEN
			UPDATE TBL_CAJAS_CIERRE_VALES
			SET ID_Cierre = _ID_CierreDest, Fecha = _Fecha
			WHERE ID_Cierre = _ID_Cierre and ID_Tipo = 'A';
		END IF;

		IF _FSI_G = '1'
		THEN
			UPDATE TBL_CAJAS_CIERRE_VALES
			SET ID_Cierre = _ID_CierreDest, Fecha = _Fecha
			WHERE ID_Cierre = _ID_Cierre and ID_Tipo = 'G';
		END IF;

		IF _FSI_C = '1'
		THEN
			UPDATE TBL_CAJAS_CIERRE_VALES
			SET ID_Cierre = _ID_CierreDest, Fecha = _Fecha
			WHERE ID_Cierre = _ID_Cierre and ID_Tipo = 'C';
		END IF;

		IF _FSI_T = '1'
		THEN
			-- Primero actualiza los tipos 'T' a un tipo 'X' 
			-- ( X es para saber que estos seran en el cierre de destino del tipo 'P' y se hace para que al cambiarlos, 
			-- no se confundan con los del tipo 'T' que ya existen en el cierre de destino )
			UPDATE TBL_CAJAS_CIERRE_VALES
			SET ID_Tipo = 'X' 
			WHERE ID_Cierre = _ID_Cierre and ID_Tipo = 'T';

			-- Ahora cambia el cierre al cierre de destino ignorando los vales del tipo 'P' provisionales
			UPDATE TBL_CAJAS_CIERRE_VALES
			SET ID_Cierre = _ID_CierreDest, Fecha = _Fecha
			WHERE ID_Cierre = _ID_Cierre and ID_Tipo = 'X';
		    
			-- por ultimo cambia los del tipo temporal 'X' al tipo 'P'
			UPDATE TBL_CAJAS_CIERRE_VALES
			SET ID_Tipo = 'P' 
			WHERE ID_Cierre = _ID_CierreDest and ID_Tipo = 'X';
		    
		END IF;
    
	END IF;

	RETURN QUERY SELECT _err, _result, _ID_ClaveDest;
	
END
$BODY$
  LANGUAGE plpgsql;

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('BANCAJ_CIERRES');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('BANCAJ_CIERRES_AGREGAR');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('BANCAJ_CIERRES_CANCELAR');



--@FIN_BLOQUE
CREATE TABLE tbl_ventas_cierres_cab
(
  id_cierre serial NOT NULL,
  tipodesde smallint NOT NULL,
  clavedesde smallint NOT NULL,
  numero integer NOT NULL,
  nummovdesde integer NOT NULL,
  nummovhasta integer NOT NULL,
  tipohacia smallint NOT NULL,
  clavehacia smallint NOT NULL,
  fecha timestamp without time zone NOT NULL,
  status character(1) NOT NULL,
  facturas numeric(19,4) NOT NULL,
  devoluciones numeric(19,4) NOT NULL,
  otrosdep numeric(19,4) NOT NULL,
  otrosret numeric(19,4) NOT NULL,
  traspaso numeric(19,4) NOT NULL,
  totalvales numeric(19,4) NOT NULL,
  totalfinales numeric(19,4) NOT NULL,
  totalfacturas numeric(19,4) NOT NULL,
  totalotros numeric(19,4) NOT NULL,
  totalpagos numeric(19,4) NOT NULL,
  totaltraspasos numeric(19,4) NOT NULL,
  totalefectivo numeric(19,4) NOT NULL,
  fondo numeric(19,4) NOT NULL,
  totalporcomp numeric(19,4) NOT NULL,
  netoefectivo numeric(19,4) NOT NULL,
  obs character varying(254) NOT NULL,
  CONSTRAINT pk_tbl_ventas_cierres_cab PRIMARY KEY (id_cierre)
);



--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_ventas_cierres_modulo AS 
 SELECT rc.id_cierre, rc.clavedesde AS id_entidad, rc.numero, rc.fecha, rc.status, rc.nummovdesde AS desde, rc.nummovhasta AS hasta, rc.obs
   FROM tbl_ventas_cierres_cab rc;



--@FIN_BLOQUE
CREATE TABLE tbl_ventas_cierres_stmp
(
  id_cierre integer NOT NULL,
  partida integer NOT NULL,
  clave character varying(20) NOT NULL,
  descripcion character varying(255) NOT NULL,
  total numeric(19,4),
  CONSTRAINT pk_tbl_ventas_cierres_stmp PRIMARY KEY (id_cierre, partida),
  CONSTRAINT fk_tbl_ventas_cierres_stmp_tbl_ventas_cierres_cab FOREIGN KEY (id_cierre)
      REFERENCES tbl_ventas_cierres_cab (id_cierre) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE
);

--@FIN_BLOQUE
CREATE TABLE tbl_ventas_cierres_facturas
(
  id_cierre integer NOT NULL,
  id_entidad integer NOT NULL,
  numero integer NOT NULL,
  total numeric(19,4),
  CONSTRAINT pk_tbl_ventas_cierres_facturas PRIMARY KEY (id_cierre, id_entidad, numero),
  CONSTRAINT fk_tbl_ventas_cierres_facturas_tbl_ventas_cierres_cab FOREIGN KEY (id_cierre)
      REFERENCES tbl_ventas_cierres_cab (id_cierre) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE
);
--FIN tbl_ventas_cierres_facturas


--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_ventas_cierres_stmp AS 
 SELECT rc.id_cierre, rc.partida, rc.clave, rc.descripcion, rc.total
   FROM tbl_ventas_cierres_stmp rc;

  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_cajas_cierrez(
    _entidad smallint,
    _transferir bit,
    _obs character varying,
    _beneficiario character varying,
    _rfc character varying)
  RETURNS SETOF record AS
$BODY$
DECLARE _err int; _result varchar(254); _errpart int; _resultpart varchar(254); _ID_Cierre integer; _Desde int; _Hasta int; _tipoBAN smallint; _claveBAN smallint; _tipoDEST smallint; _claveDEST smallint; _Numero integer;
	_Concepto varchar(40); _Descripcion varchar(15); _Facturas numeric(19,4); _Devoluciones numeric(19,4);
	_OtrosDEP numeric(19,4); _OtrosRET numeric(19,4); _Traspaso numeric(19,4); _TotalVales numeric(19,4); _TotalFinales numeric(19,4); 
	_TotalFacturas numeric(19,4); _TotalOtros numeric(19,4); _TotalPagos numeric(19,4); _TotalTraspasos numeric(19,4); _TotalEfectivo numeric(19,4);
	_Fondo numeric(19,4); _TotalPorComp numeric(19,4); _NetoEfectivo numeric(19,4); _idTrasp integer; _Fecha timestamp;  _mes smallint; _ano smallint; 
	_DesdeFact varchar(255); _HastaFact varchar(255); _DesdeDev varchar(255); _HastaDev varchar(255); 
	_REC RECORD; _Revertidas boolean;
BEGIN

	CREATE LOCAL TEMPORARY TABLE _TMP_VENTAS_CIERRE (
		Partida serial NOT NULL ,
		Clave varchar(20) NOT NULL ,
		Descripcion varchar(255) NOT NULL ,
		Total numeric(19,4) NULL 
	);
	CREATE LOCAL TEMPORARY TABLE _TMP_VENTAS_CIERRES_FACTURAS (
		ID_Entidad integer NOT NULL,
		Numero integer NOT NULL,
		Total numeric(19,4) NOT NULL
	);
  
	_err := 0;
	_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'BANCAJ_CIERRES' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCOK'); --'El cierre se genero correctamente';
	_Descripcion := (select Cuenta from TBL_BANCOS_CUENTAS where Tipo = 1 and Clave = _entidad);
	_Desde := (select UltimoNumTrasp from TBL_BANCOS_CUENTAS where Tipo = 1 and Clave = _entidad) + 1;
	_Hasta := (select max(Num) from TBL_BANCOS_MOVIMIENTOS where Tipo = 1 and Clave = _entidad);
	_Fecha := NOW()::date;
	_tipoBAN := 1;
	_claveBAN := _Entidad;
	_tipoDEST := (select TipoTRASP from TBL_BANCOS_CUENTAS where Tipo = 1 and Clave = _entidad);
	_claveDEST := (select ClaveTRASP from TBL_BANCOS_CUENTAS where Tipo = 1 and Clave = _entidad);
	_Fondo := (select FondoTRASP from TBL_BANCOS_CUENTAS where Tipo = 1 and Clave = _entidad);
	_Numero := (select max(Numero) from tbl_ventas_cierres_cab where TipoDesde = 1 and ClaveDesde = _entidad) + 1;
	_DesdeFact := '';
	_HastaFact := '';
	_DesdeDev := '';
	_HastaDev := '';
	_Revertidas := false;
	_mes := date_part('month',_Fecha);
	_ano := date_part('year',_Fecha);

	IF _transferir = '1'
	THEN
		IF( (select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano and Cerrado = '1') > 0
			OR (select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano) < 1 )
		THEN
			_err := 3;
			_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_POLIZAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'ERROR: La fecha pertenece a un periodo cerrado o inexistente'
		END IF;
	END IF;
	
	IF _Numero is null 
	THEN
		_Numero := 1; 
	END IF;				
	
	IF _tipoDEST = 0 OR _claveDEST = 0 
	THEN
		_err := 3;
		_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'BANCAJ_CIERRES' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'ERROR: No se puede realizar el cierre porque la caja de destino no se define aun'
		
		INSERT INTO _TMP_VENTAS_CIERRE (Clave, Descripcion, Total)
		SELECT 'ETQ', _result, null;
	END IF;

	IF _tipoBAN = _tipoDEST AND _claveBAN = _claveDEST 
	THEN
		_err := 3;
		_result := (select msj2 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'BANCAJ_CIERRES' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'ERROR: No se puede realizar el cierre porque la caja de origen y de destino es la misma';
		
		INSERT INTO _TMP_VENTAS_CIERRE (Clave, Descripcion, Total)
		SELECT 'ETQ', _result, null;
	END IF;	
		
	IF (select ID_Moneda from TBL_BANCOS_CUENTAS where Tipo = _tipoDEST and Clave = _claveDEST) <> 1 OR
		(select ID_Moneda from TBL_BANCOS_CUENTAS where Tipo = _tipoBAN and Clave = _claveBAN) <> 1 
	THEN
		_err := 3;
		_result := (select msj3 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'BANCAJ_CIERRES' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'ERROR: No se puede realizar el cierre porque la caja de destino esta en moneda extranjera';
		
		INSERT INTO _TMP_VENTAS_CIERRE (Clave, Descripcion, Total)
		SELECT 'ETQ', _result, null;
	END IF;
			
	IF _Desde is null or _Hasta is null
	THEN
		_err = 3;
		_result = (select msj4 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'BANCAJ_CIERRES' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'ERROR: El numero inicial o final son Nulos. Es probable que no haya habido movimientos aun';

		INSERT INTO _TMP_VENTAS_CIERRE (Clave, Descripcion, Total)
		SELECT 'ETQ', _result, null;
	ELSE
		IF _Desde > _Hasta
		THEN
			_err = 3;
			_result = (select msj5 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'BANCAJ_CIERRES' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'ERROR: El numero inicial es mayor al numero final. Esto puede deberse a que no hay movimientos desde el ultimo cierre';
			
			INSERT INTO _TMP_VENTAS_CIERRE (Clave, Descripcion, Total)
			SELECT 'ETQ', _result, null;
	
		END IF;
	END IF;


	IF _err = 0
	THEN
		_Concepto := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'BANCAJ_CIERRES' and m.sub::text = 'BD' and m.elm::text = 'ETQ') 
				|| ' ' || _Descripcion || ' ' || cast(_Desde as varchar) || ' - ' || cast(_Hasta as varchar);
		
		--Genera los totales de caja.
		_Facturas := ( 	select ROUND(sum(Deposito),2) 
				from TBL_BANCOS_MOVIMIENTOS 
				where Tipo = _tipoBAN and Clave = _claveBAN and Estatus <> 'C' and 
					Num between _Desde and _Hasta and Ref like 'VFAC|%' );
		_Devoluciones := ( select ROUND(sum(Retiro),2) 
				from TBL_BANCOS_MOVIMIENTOS 
				where Tipo = _tipoBAN and Clave = _claveBAN and Estatus <> 'C' and 
					Num between _Desde and _Hasta and Ref like 'VDEV|%' );
		_OtrosDEP := ( select ROUND(sum(Deposito),2) 
				from TBL_BANCOS_MOVIMIENTOS 
				where Tipo = _tipoBAN and Clave = _claveBAN and Estatus <> 'C' and 
					Num between _Desde and _Hasta and Ref not like 'VFAC|%' );
		_OtrosRET := ( select ROUND(sum(Retiro),2) 
				from TBL_BANCOS_MOVIMIENTOS 
				where Tipo = _tipoBAN and Clave = _claveBAN and Estatus <> 'C' and 
					Num between _Desde and _Hasta and Ref not like 'VDEV|%' );

		IF _Facturas is null 
		THEN
			_Facturas := 0; 
		ELSE
			_DesdeFact := ( select e.descripcion || ' ' || c.Numero::varchar  from tbl_ventas_facturas_cab c join tbl_ventas_entidades e on c.id_entidad = e.id_entidadventa where c.id_vc = 
				split_part(  (select Ref from TBL_BANCOS_MOVIMIENTOS where Tipo = _tipoBAN and Clave = _claveBAN and Estatus <> 'C' and Num between _Desde and _Hasta and Ref like 'VFAC|%' order by Num asc limit 1) , '|', 2)::integer );
			_HastaFact := ( select e.descripcion || ' ' || c.Numero::varchar  from tbl_ventas_facturas_cab c join tbl_ventas_entidades e on c.id_entidad = e.id_entidadventa where c.id_vc = 
				split_part(  (select Ref from TBL_BANCOS_MOVIMIENTOS where Tipo = _tipoBAN and Clave = _claveBAN and Estatus <> 'C' and Num between _Desde and _Hasta and Ref like 'VFAC|%' order by Num desc limit 1 ) , '|', 2)::integer );
		END IF;
		IF _Devoluciones is null
		THEN
			_Devoluciones := 0;
		ELSE
			_DesdeDev := ( select e.descripcion || ' ' || c.Numero::varchar  from tbl_ventas_devoluciones_cab c join tbl_ventas_entidades e on c.id_entidad = e.id_entidadventa where c.id_vc = 
				split_part(  (select Ref from TBL_BANCOS_MOVIMIENTOS where Tipo = _tipoBAN and Clave = _claveBAN and Estatus <> 'C' and Num between _Desde and _Hasta and Ref like 'VDEV|%' order by Num asc limit 1) , '|', 2)::integer );
			_HastaDev := ( select e.descripcion || ' ' || c.Numero::varchar  from tbl_ventas_devoluciones_cab c join tbl_ventas_entidades e on c.id_entidad = e.id_entidadventa where c.id_vc = 
				split_part(  (select Ref from TBL_BANCOS_MOVIMIENTOS where Tipo = _tipoBAN and Clave = _claveBAN and Estatus <> 'C' and Num between _Desde and _Hasta and Ref like 'VDEV|%' order by Num desc limit 1 ) , '|', 2)::integer );
		END IF;
		IF _OtrosDEP is null
		THEN
			_OtrosDEP := 0;
		END IF;
		IF _OtrosRET is null
		THEN
			_OtrosRET := 0;
		END IF;
	
		_Traspaso := (_Facturas + _OtrosDEP) - (_Devoluciones + _OtrosRET); 
	
		INSERT INTO _TMP_VENTAS_CIERRE (Clave, Descripcion, Total)
		SELECT 'ETQ', _Concepto, null;
		INSERT INTO _TMP_VENTAS_CIERRE (Clave, Descripcion, Total)
		SELECT 'ESP','', null;
	
		INSERT INTO _TMP_VENTAS_CIERRE (Clave, Descripcion, Total)
		SELECT 'ACU', (select msj2 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'BANCAJ_CIERRES' and m.sub::text = 'BD' and m.elm::text = 'ETQ') || ' ' || _DesdeFact || ' - ' || _HastaFact, _Facturas;
		INSERT INTO _TMP_VENTAS_CIERRE (Clave, Descripcion, Total)
		SELECT 'ACU', (select msj3 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'BANCAJ_CIERRES' and m.sub::text = 'BD' and m.elm::text = 'ETQ') || ' ' || _DesdeDev || ' - ' || _HastaDev, -_Devoluciones;
		INSERT INTO _TMP_VENTAS_CIERRE (Clave, Descripcion, Total)
		SELECT 'ACU', (select msj4 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'BANCAJ_CIERRES' and m.sub::text = 'BD' and m.elm::text = 'ETQ'), _OtrosDEP;
		INSERT INTO _TMP_VENTAS_CIERRE (Clave, Descripcion, Total)
		SELECT 'ACU', (select msj5 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'BANCAJ_CIERRES' and m.sub::text = 'BD' and m.elm::text = 'ETQ'), -_OtrosRET;
		INSERT INTO _TMP_VENTAS_CIERRE (Clave, Descripcion, Total)
		SELECT 'ESP','', null;
		INSERT INTO _TMP_VENTAS_CIERRE (Clave, Descripcion, Total)
		SELECT 'TIT', (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'BANCAJ_CIERRES' and m.sub::text = 'BD' and m.elm::text = 'ETQ2'), _Traspaso;
		INSERT INTO _TMP_VENTAS_CIERRE (Clave, Descripcion, Total)
		SELECT 'ESP','', null;

		--Ahora se involucra en vales
		_TotalFinales := ( select sum(Final) from VIEW_VALES where ID_Clave = _claveBAN and Numero = 0 and ID_Tipo = 'F'); 
		_TotalFacturas := ( select sum(Factura) from VIEW_VALES where ID_Clave = _claveBAN and Numero = 0 and ID_Tipo = 'A'); 
		_TotalOtros := ( select sum(Compra) from VIEW_VALES where ID_Clave = _claveBAN and Numero = 0 and ID_Tipo = 'C'); 
		_TotalPagos := ( select sum(Pago) from VIEW_VALES where ID_Clave = _claveBAN and Numero = 0 and ID_Tipo = 'G'); 
		_TotalTraspasos := ( select sum(Traspaso) from VIEW_VALES where ID_Clave = _claveBAN and Numero = 0 and ID_Tipo = 'T'); 
		_TotalPorComp := ( select sum(Provisional) from VIEW_VALES where ID_Clave = _claveBAN and Numero = 0 and ID_Tipo = 'P'); 
				
		IF _TotalFinales is null
		THEN
			_TotalFinales := 0;
		END IF;
		IF _TotalFacturas is null
		THEN
			_TotalFacturas := 0;
		END IF;
		IF _TotalOtros is null
		THEN
			_TotalOtros := 0;
		END IF;
		IF _TotalPagos is null
		THEN
			_TotalPagos := 0;
		END IF;
		IF _TotalTraspasos is null
		THEN
			_TotalTraspasos := 0;
		END IF;
		IF _TotalPorcomp is null
		THEN
			_TotalPorComp := 0;
		END IF;	
		
		_TotalVales := (_TotalFinales + _TotalFacturas + _TotalOtros + _TotalPagos + _TotalTraspasos);
		_TotalEfectivo := (_Traspaso - _TotalVales);
		_NetoEfectivo = _Fondo + _TotalEfectivo - _TotalPorComp;
	
		INSERT INTO _TMP_VENTAS_CIERRE (Clave, Descripcion, Total)
		SELECT 'TIT', (select msj2 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'BANCAJ_CIERRES' and m.sub::text = 'BD' and m.elm::text = 'ETQ2'), -_TotalVales;
		INSERT INTO _TMP_VENTAS_CIERRE (Clave, Descripcion, Total)
		SELECT 'ESP','', null;
		
		INSERT INTO _TMP_VENTAS_CIERRE (Clave, Descripcion, Total)
		SELECT 'VAL', (select msj3 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'BANCAJ_CIERRES' and m.sub::text = 'BD' and m.elm::text = 'ETQ2'), _TotalFinales;
		INSERT INTO _TMP_VENTAS_CIERRE (Clave, Descripcion, Total)
		SELECT ID_Gasto, cast((Fecha::date) as varchar) || ' ' || substring(Concepto,1,30), Final
		FROM VIEW_VALES WHERE ID_Clave = _claveBAN and Numero = 0 and ID_Tipo = 'F';
		INSERT INTO _TMP_VENTAS_CIERRE (Clave, Descripcion, Total)
		SELECT 'ESP','', null;
		
		INSERT INTO _TMP_VENTAS_CIERRE (Clave, Descripcion, Total)
		SELECT 'VAL', (select msj4 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'BANCAJ_CIERRES' and m.sub::text = 'BD' and m.elm::text = 'ETQ2'), _TotalFacturas;
		INSERT INTO _TMP_VENTAS_CIERRE (Clave, Descripcion, Total)
		SELECT ID_Gasto, cast((Fecha::date) as varchar) || ' ' || substring(Concepto,1,30), Factura
		FROM VIEW_VALES WHERE ID_Clave = _claveBAN and Numero = 0 and ID_Tipo = 'A';
		INSERT INTO _TMP_VENTAS_CIERRE (Clave, Descripcion, Total)
		SELECT 'ESP','', null;
			
		INSERT INTO _TMP_VENTAS_CIERRE (Clave, Descripcion, Total)
		SELECT 'VAL', (select msj5 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'BANCAJ_CIERRES' and m.sub::text = 'BD' and m.elm::text = 'ETQ2'), _TotalTraspasos;
		INSERT INTO _TMP_VENTAS_CIERRE (Clave, Descripcion, Total)
		SELECT ID_Gasto, cast((Fecha::date) as varchar) || ' ' || substring(Concepto,1,30), Traspaso
		FROM VIEW_VALES WHERE ID_Clave = _claveBAN and Numero = 0 and ID_Tipo = 'T';
		INSERT INTO _TMP_VENTAS_CIERRE (Clave, Descripcion, Total)
		SELECT 'ESP','', null;


		INSERT INTO _TMP_VENTAS_CIERRE (Clave, Descripcion, Total)
		SELECT 'VAL', (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'BANCAJ_CIERRES' and m.sub::text = 'BD' and m.elm::text = 'ETQ3'), _TotalPagos;
		INSERT INTO _TMP_VENTAS_CIERRE (Clave, Descripcion, Total)
		SELECT ID_Gasto, cast((Fecha::date) as varchar) || ' ' || substring(Concepto,1,30), Pago
		FROM VIEW_VALES WHERE ID_Clave = _claveBAN and Numero = 0 and ID_Tipo = 'G';
		INSERT INTO _TMP_VENTAS_CIERRE (Clave, Descripcion, Total)
		SELECT 'ESP','', null;
		
		INSERT INTO _TMP_VENTAS_CIERRE (Clave, Descripcion, Total)
		SELECT 'VAL', (select msj2 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'BANCAJ_CIERRES' and m.sub::text = 'BD' and m.elm::text = 'ETQ3'), _TotalOtros;
		INSERT INTO _TMP_VENTAS_CIERRE (Clave, Descripcion, Total)
		SELECT ID_Gasto, cast((Fecha::date) as varchar) || ' ' || substring(Concepto,1,30), Compra
		FROM VIEW_VALES WHERE ID_Clave = _claveBAN and Numero = 0 and ID_Tipo = 'C';
		INSERT INTO _TMP_VENTAS_CIERRE (Clave, Descripcion, Total)
		SELECT 'ESP','', null;
	
		INSERT INTO _TMP_VENTAS_CIERRE (Clave, Descripcion, Total)
		SELECT 'TIT', (select msj3 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'BANCAJ_CIERRES' and m.sub::text = 'BD' and m.elm::text = 'ETQ3'), _TotalEfectivo;
		INSERT INTO _TMP_VENTAS_CIERRE (Clave, Descripcion, Total)
		SELECT 'ESP','', null;
		
		INSERT INTO _TMP_VENTAS_CIERRE (Clave, Descripcion, Total)
		SELECT 'TIT', (select msj4 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'BANCAJ_CIERRES' and m.sub::text = 'BD' and m.elm::text = 'ETQ3'), _Fondo;
		INSERT INTO _TMP_VENTAS_CIERRE (Clave, Descripcion, Total)
		SELECT 'ESP','', null;
	
		INSERT INTO _TMP_VENTAS_CIERRE (Clave, Descripcion, Total)
		SELECT 'VAL', (select msj5 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'BANCAJ_CIERRES' and m.sub::text = 'BD' and m.elm::text = 'ETQ3'), -_TotalPorcomp;
		INSERT INTO _TMP_VENTAS_CIERRE (Clave, Descripcion, Total)
		SELECT ID_Gasto, cast((Fecha::date) as varchar) || ' ' || substring(Concepto,1,30), Provisional
		FROM VIEW_VALES WHERE ID_Clave = _claveBAN and Numero = 0 and ID_Tipo = 'P';
		INSERT INTO _TMP_VENTAS_CIERRE (Clave, Descripcion, Total)
		SELECT 'ESP','', null;
	
		INSERT INTO _TMP_VENTAS_CIERRE (Clave, Descripcion, Total)
		SELECT 'TIT', (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'BANCAJ_CIERRES' and m.sub::text = 'BD' and m.elm::text = 'ETQ4'), _NetoEfectivo;
		INSERT INTO _TMP_VENTAS_CIERRE (Clave, Descripcion, Total)
		SELECT 'ESP','', null;

		--///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		--/////////////////////	INSERTA LAS FACTURAS EN LA TABLA TEMPORAL Y EL DESCGLOSE DE FACTURAS DEL CIERRE
		IF _Facturas != 0.0
		THEN
			INSERT INTO _TMP_VENTAS_CIERRE (Clave, Descripcion, Total)
			SELECT 'ETQ', (select msj2 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'BANCAJ_CIERRES' and m.sub::text = 'BD' and m.elm::text = 'ETQ4'), null;
			
			FOR _REC IN ( 	select Fecha, Deposito, Ref from TBL_BANCOS_MOVIMIENTOS where Tipo = _tipoBAN and Clave = _claveBAN and Estatus <> 'C' and Num between _Desde and _Hasta and Ref like 'VFAC|%' order by Num asc	 ) 
			LOOP
				IF (select c.Status  from tbl_ventas_facturas_cab c where c.id_vc = split_part(_REC.Ref, '|', 2)::integer) = 'R' -- Significa que existen facturas de este cierre revertidas
				THEN
					_Revertidas = true;
				END IF;
				
				INSERT INTO _TMP_VENTAS_CIERRES_FACTURAS (ID_Entidad, Numero, Total)
				VALUES(	(select c.ID_Entidad  from tbl_ventas_facturas_cab c where c.id_vc = split_part(_REC.Ref, '|', 2)::integer),
								(select c.Numero  from tbl_ventas_facturas_cab c where c.id_vc = split_part(_REC.Ref, '|', 2)::integer), _REC.Deposito	);

				INSERT INTO _TMP_VENTAS_CIERRE (Clave, Descripcion, Total)
				VALUES(       ( select e.descripcion from tbl_ventas_facturas_cab c join tbl_ventas_entidades e on c.id_entidad = e.id_entidadventa where c.id_vc =  split_part(_REC.Ref, '|', 2)::integer), 
								cast((_REC.Fecha::date) as varchar) || ' - ' || (select c.Numero  from tbl_ventas_facturas_cab c where c.id_vc = split_part(_REC.Ref, '|', 2)::integer)::varchar 
									|| ' - ' || (select c.Status  from tbl_ventas_facturas_cab c where c.id_vc = split_part(_REC.Ref, '|', 2)::integer), _REC.Deposito	);
			END LOOP;
		END IF;
				
		--Genera la transferencia
		IF _Transferir = '1'
		THEN
			IF _Revertidas = false
			THEN
				INSERT INTO TBL_VENTAS_CIERRES_CAB
				VALUES(default, _tipoBAN, _claveBAN, _Numero, _Desde, _Hasta, _tipoDEST, _claveDEST, _Fecha, 'G',
					_Facturas, _Devoluciones, _OtrosDep, _OtrosRet, _Traspaso, _TotalVales, _TotalFinales, _TotalFacturas,
					_TotalOtros, _TotalPagos, _TotalTraspasos, _TotalEfectivo, _Fondo, _TotalPorComp, _NetoEfectivo, _Obs)
				RETURNING currval(pg_get_serial_sequence('TBL_VENTAS_CIERRES_CAB', 'id_cierre')) INTO _ID_Cierre;

				INSERT INTO TBL_VENTAS_CIERRES_STMP
				SELECT _ID_Cierre, Partida, Clave, Descripcion, Total
				FROM _TMP_VENTAS_CIERRE
				WHERE (Total is not null and Total <> 0 and 
					(Clave <> 'TIT' and Clave <> 'ETQ' and Clave <> 'ESP' and Clave <> 'OPT')) or (Clave = 'TIT' or Clave = 'ETQ' or Clave = 'ESP' or Clave = 'OPT');

				INSERT INTO TBL_VENTAS_CIERRES_FACTURAS
				SELECT _ID_Cierre, ID_Entidad, Numero, Total
				FROM _TMP_VENTAS_CIERRES_FACTURAS;
				
				-- GENERA LA TRANSFERENCIA DE CAJAS
				--RAISE NOTICE '% / % / % / % / %',_claveBAN,_Fecha,_Concepto,_Traspaso,_claveDEST; 
				SELECT * INTO _errpart, _resultpart, _idTRASP
				FROM sp_bancos_trans_agregar('1',_claveBAN,_Fecha,(_Concepto || ' ' || _DesdeFact || ' - ' || _HastaFact),_Beneficiario,_Traspaso,'RET','G','1',1.0,'','','1',_claveDEST,'000',_RFC,'01','','','') AS ( err integer, res varchar, clave integer);
				IF _errpart <> 0
				THEN
					_err := _errpart;
					_result := _resultpart;
				ELSE
					-- Actualiza el ultimo numero de movimiento (El Traspaso) en la entidad
					UPDATE TBL_BANCOS_CUENTAS
					SET UltimoNumTrasp = _Hasta + 1
					WHERE Tipo = _tipoBAN and Clave = _claveBAN;

					-- Procede a hacer el traspaso de vales
					--RAISE NOTICE 'OKY: ID Trasp: %', _idTRASP; 

					SELECT * INTO _errpart, _resultpart, _idTRASP
					FROM sp_cajas_vales_traspasar(_claveBAN, _claveDEST, '1', '1', '1', '1', '1') AS ( err integer, res varchar, clave smallint);
					
					IF _errpart <> 0
					THEN
						_err := _errpart;
						_result := _resultpart;
					END IF;
				END IF;
			ELSE --Existen facturas revertidas, no genera el cierre
				_err := 3;
				_result := 'ERROR: Existen facturas revertidas en este cierre, no se puede generar el cierre hasta que se cancelen todas estas facturas';
			END IF;
		END IF;
		
	END IF;

	IF _Transferir = '0'
	THEN
		RETURN QUERY
		SELECT 1, Partida, Clave, Descripcion, 
			CASE WHEN Total is null THEN 0 ELSE Total END
		FROM _TMP_VENTAS_CIERRE 
		WHERE (Total is not null and Total <> 0 and (Clave <> 'TIT' and Clave <> 'ETQ' and Clave <> 'ESP' and Clave <> 'OPT')) 
			or (Clave = 'TIT' or Clave = 'ETQ' or Clave = 'ESP' or Clave = 'OPT');
	ELSE
		RETURN QUERY SELECT _err, _result, _entidad;
	END IF;

	DROP TABLE _TMP_VENTAS_CIERRE;
	DROP TABLE _TMP_VENTAS_CIERRES_FACTURAS;
	
END
$BODY$
  LANGUAGE plpgsql;
--ALTER FUNCTION sp_cajas_cierrez(smallint, bit, character varying, character varying, character varying)
--  OWNER TO [[owner]];

--@FIN_BLOQUE
INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('ALM');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('ALM_MOVIM');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('ALM_MOVIM_AGREGAR');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('ALM_MOVIM_AUDITAR');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('ALM_MOVIM_CANCELAR');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('ALM_MOVIM_CONSULTAR');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('ALM_UTENSILIOS');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('ALM_UTENSILIOS_ENTRADA');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('ALM_UTENSILIOS_SALIDA');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('ALM_UTENSILIOS_CANCELAR');


--@FIN_BLOQUE
CREATE TABLE tbl_invserv_costos_conceptos
(
  id_concepto smallint NOT NULL,
  descripcion character varying(80) NOT NULL,
  desistema bit(1) NOT NULL,
  recalcularcosto bit(1) NOT NULL,
  tipo character(3) NOT NULL,
  cc character(19),
  CONSTRAINT pk_tbl_invserv_costos_conceptos PRIMARY KEY (id_concepto),
  CONSTRAINT fk_tbl_invserv_costos_conceptos_tbl_cont_catalogo FOREIGN KEY (cc)
      REFERENCES tbl_cont_catalogo (cuenta) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION,
  CONSTRAINT ck_tbl_invserv_costos_conceptos_tipo CHECK (tipo = 'ENT'::bpchar OR tipo = 'SAL'::bpchar OR tipo = 'MIX'::bpchar)
);

INSERT INTO tbl_invserv_costos_conceptos(id_concepto, descripcion, desistema, recalcularcosto, tipo, cc)
VALUES (-1, 'sistema. utensilios entradas', '1', '0', 'MIX', null);

INSERT INTO tbl_invserv_costos_conceptos(id_concepto, descripcion, desistema, recalcularcosto, tipo, cc)
VALUES (-2, 'sistema. utensilios salidas', '1', '0', 'MIX', null);

INSERT INTO tbl_invserv_costos_conceptos
VALUES (0, '', '1', '0', 'ENT', null);

INSERT INTO tbl_invserv_costos_conceptos
VALUES (1, '', '1', '0', 'ENT', null);

INSERT INTO tbl_invserv_costos_conceptos
VALUES (2, '', '1', '1', 'ENT', null);

INSERT INTO tbl_invserv_costos_conceptos
VALUES (50, '', '1', '1', 'SAL', null);

INSERT INTO tbl_invserv_costos_conceptos
VALUES (51, '', '1', '1', 'SAL', null);

INSERT INTO tbl_invserv_costos_conceptos
VALUES (52, '', '1', '1', 'SAL', null);

INSERT INTO tbl_invserv_costos_conceptos
VALUES (53, '', '1', '1', 'SAL', null);

INSERT INTO tbl_invserv_costos_conceptos
VALUES (100, '', '1', '1', 'ENT', null);

INSERT INTO tbl_invserv_costos_conceptos
VALUES (149, '', '1', '1', 'ENT', null);

INSERT INTO tbl_invserv_costos_conceptos
VALUES (199, '', '1', '1', 'SAL', null);

--@FIN_BLOQUE
CREATE TABLE tbl_usuarios_submodulo_bodegas
(
  id_usuario character varying(10) NOT NULL,
  id_bodega smallint NOT NULL,
  CONSTRAINT pk_tbl_usuarios_submodulo_bodegas PRIMARY KEY (id_usuario, id_bodega),
  CONSTRAINT fk_tbl_usuarios_submodulo_bodegas_tbl_invserv_bodegas FOREIGN KEY (id_bodega)
      REFERENCES tbl_invserv_bodegas (id_bodega) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION,
  CONSTRAINT fk_tbl_usuarios_submodulo_bodegas_tbl_usuarios FOREIGN KEY (id_usuario)
      REFERENCES tbl_usuarios (id_usuario) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE
);



--@FIN_BLOQUE
CREATE TABLE tbl_invserv_almacen_movim_cab
(
  id_movimiento serial NOT NULL,
  fecha timestamp without time zone NOT NULL,
  id_bodega smallint,
  numero integer NOT NULL,
  status character(1) NOT NULL,
  id_concepto smallint NOT NULL,
  concepto character varying(80) NOT NULL,
  referencia character varying(25),
  id_pol integer NOT NULL,
  ref character varying(25),
  cr_pri character(4),
  cr_sec integer,
  CONSTRAINT pk_tbl_invserv_almacen_movim_cab PRIMARY KEY (id_movimiento),
  CONSTRAINT fk_tbl_invserv_almacen_movim_cab_tbl_invserv_bodegas FOREIGN KEY (id_bodega)
      REFERENCES tbl_invserv_bodegas (id_bodega) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_tbl_invserv_almacen_movim_cab_tbl_invserv_costos_conceptos FOREIGN KEY (id_concepto)
      REFERENCES tbl_invserv_costos_conceptos (id_concepto) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE
);



--@FIN_BLOQUE
CREATE TABLE tbl_invserv_almacen_movim_det
(
  id_movimiento integer NOT NULL,
  id_prod character varying(20) NOT NULL,
  id_bodega smallint NOT NULL,
  partida smallint NOT NULL,
  cantidad numeric(9,3) NOT NULL,
  costo numeric(19,4),
  CONSTRAINT pk_tbl_invserv_almacen_movim_det PRIMARY KEY (id_movimiento, id_prod),
  CONSTRAINT fk_tbl_invserv_almacen_movim_det_tbl_invserv_almacen_movim_cab FOREIGN KEY (id_movimiento)
      REFERENCES tbl_invserv_almacen_movim_cab (id_movimiento) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_tbl_invserv_almacen_movim_det_tbl_invserv_bodegas FOREIGN KEY (id_bodega)
      REFERENCES tbl_invserv_bodegas (id_bodega) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_tbl_invserv_almacen_movim_det_tbl_invserv_inventarios FOREIGN KEY (id_prod)
      REFERENCES tbl_invserv_inventarios (id_prod) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE
);



--@FIN_BLOQUE
CREATE TABLE tbl_invserv_costos_detalle
(
  id_costo serial NOT NULL,
  id_movimiento integer NOT NULL,
  fecha timestamp without time zone NOT NULL,
  id_prod character varying(20) NOT NULL,
  id_concepto smallint NOT NULL,
  status character(1) NOT NULL,
  parcial numeric(9,3) NOT NULL,
  entrada numeric(9,3) NOT NULL,
  salida numeric(9,3) NOT NULL,
  existencia numeric(9,3) NOT NULL,
  existbod numeric(9,3) NOT NULL,
  ultimocosto numeric(19,4) NOT NULL,
  costopromedio numeric(19,4) NOT NULL,
  debe numeric(19,4) NOT NULL,
  haber numeric(19,4) NOT NULL,
  saldo numeric(19,4) NOT NULL,
  ref character varying(35),
  CONSTRAINT pk_tbl_invserv_costos_detalle PRIMARY KEY (id_costo),
  CONSTRAINT fk_tbl_invserv_costos_detalle_tbl_invserv_almacen_movim_cab FOREIGN KEY (id_movimiento)
      REFERENCES tbl_invserv_almacen_movim_cab (id_movimiento) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_tbl_invserv_costos_detalle_tbl_invserv_costos_conceptos FOREIGN KEY (id_concepto)
      REFERENCES tbl_invserv_costos_conceptos (id_concepto) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_tbl_invserv_costos_detalle_tbl_invserv_inventarios FOREIGN KEY (id_prod)
      REFERENCES tbl_invserv_inventarios (id_prod) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE
);




--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_invserv_almacen_movim_modulo_ids AS 
 SELECT u.id_usuario, b.id_bodega, b.nombre, b.numero, b.salida, b.requerimiento, b.plantilla, b.fmt_movimientos, b.fmt_traspasos, b.auditaralm, b.manejostocks, b.cfd
   FROM tbl_invserv_bodegas b
   JOIN tbl_usuarios_submodulo_bodegas u ON b.id_bodega = u.id_bodega;

--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_invserv_almacen_movim_modulo AS 
 SELECT m.id_movimiento, m.numero AS num, m.status, m.fecha, m.id_bodega, b.nombre AS bodega, m.id_concepto, 
        CASE
            WHEN m.id_concepto = (-1) THEN ( SELECT msj.msj1
               FROM tbl_msj msj
              WHERE msj.alc::text = 'GLB'::text AND msj.mod::text = 'GLB'::text AND msj.sub::text = 'GLB'::text AND msj.elm::text = 'ENTRADA'::text)
            WHEN m.id_concepto = (-2) THEN ( SELECT msj.msj1
               FROM tbl_msj msj
              WHERE msj.alc::text = 'GLB'::text AND msj.mod::text = 'GLB'::text AND msj.sub::text = 'GLB'::text AND msj.elm::text = 'SALIDA'::text)
            ELSE 
            CASE
                WHEN c.desistema = B'1'::"bit" THEN ( SELECT msj.msj1
                   FROM tbl_msj msj
                  WHERE msj.alc::text = 'CEF'::text AND msj.mod::text = 'ALMACEN'::text AND msj.sub::text = 'CAT_CON'::text AND msj.elm::text = c.id_concepto::text)
                ELSE c.descripcion
            END
        END AS descripcion, m.concepto, m.referencia, m.id_pol, 
        CASE
            WHEN m.id_pol = (-1) THEN ''::text
            ELSE ( SELECT (tbl_cont_polizas.tipo::text || ' - '::text) || tbl_cont_polizas.numero::character varying::text
               FROM tbl_cont_polizas
              WHERE tbl_cont_polizas.id = m.id_pol)
        END AS pol, m.ref, m.cr_pri, m.cr_sec
   FROM tbl_invserv_almacen_movim_cab m
   JOIN tbl_invserv_costos_conceptos c ON m.id_concepto = c.id_concepto
   JOIN tbl_invserv_bodegas b ON m.id_bodega = b.id_bodega;

--ALTER TABLE view_invserv_almacen_movim_modulo
   
--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_invserv_arma_kits_promedios AS 
 SELECT tbl_invserv_inventarios.id_prod AS clave, tbl_invserv_inventarios.id_tipo, tbl_invserv_inventarios.seproduce, tbl_invserv_inventarios.descripcion, tbl_invserv_inventarios.ultimocosto, tbl_invserv_inventarios.costopromedio, tbl_invserv_inventarios.precio, tbl_invserv_inventarios.tipocosteo, tbl_invserv_inventarios.id_unidadsalida AS unidad, tbl_invserv_inventarios.status
   FROM tbl_invserv_inventarios
  WHERE tbl_invserv_inventarios.id_tipo = 'P'::bpchar AND tbl_invserv_inventarios.status = 'V'::bpchar;




--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_catalog_prod4 AS 
 SELECT c.id_prod AS clave, c.descripcion, 
        CASE
            WHEN e.existencia IS NULL THEN 0::numeric
            ELSE e.existencia
        END AS especial, 
        CASE
            WHEN e.id_bodega IS NULL THEN (-1)
            ELSE e.id_bodega::integer
        END AS id_bodega
   FROM tbl_invserv_inventarios c
   LEFT JOIN tbl_invserv_existencias e ON c.id_prod::text = e.id_prod::text
  WHERE c.id_tipo <> 'G'::bpchar AND c.nosevende = B'0'::"bit" AND c.status = 'V'::bpchar;

--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_catalog_prod4_serv AS 
 SELECT c.id_prod AS clave, c.descripcion, c.id_unidadsalida AS especial
   FROM tbl_invserv_inventarios c
  WHERE (c.id_tipo = 'P'::bpchar OR c.id_tipo = 'S'::bpchar) AND c.nosevende = B'0'::"bit" AND c.status = 'V'::bpchar;

--ALTER TABLE view_catalog_prod4_serv

--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_catalog_prod3 AS 
 SELECT c.id_prod AS clave, c.descripcion, c.id_unidadsalida AS especial
   FROM tbl_invserv_inventarios c
  WHERE c.id_tipo = 'P'::bpchar AND c.seproduce = B'1'::"bit" AND c.status = 'V'::bpchar;




--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_catalog_prod2 AS 
 SELECT c.id_prod AS clave, c.descripcion, c.id_unidadsalida AS especial
   FROM tbl_invserv_inventarios c
  WHERE c.id_tipo = 'P'::bpchar AND c.seproduce = B'0'::"bit" AND c.status = 'V'::bpchar;

--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_catalog_prod2_gas AS 
 SELECT c.id_prod AS clave, c.descripcion, c.id_unidadsalida AS especial
   FROM tbl_invserv_inventarios c
  WHERE (c.id_tipo = 'P'::bpchar OR c.id_tipo = 'G'::bpchar) AND c.seproduce = B'0'::"bit" AND c.status = 'V'::bpchar;

--ALTER TABLE view_catalog_prod2_gas


--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_catalog_prod AS 
 SELECT c.id_prod AS clave, c.descripcion, c.id_unidadsalida AS especial
   FROM tbl_invserv_inventarios c
  WHERE c.id_tipo = 'P'::bpchar AND c.status = 'V'::bpchar;




--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_catalog_prod_costos_conceptos_ent AS 
 SELECT tbl_invserv_costos_conceptos.id_concepto AS clave, tbl_invserv_costos_conceptos.descripcion, '' AS especial
   FROM tbl_invserv_costos_conceptos
  WHERE tbl_invserv_costos_conceptos.tipo = 'ENT'::bpchar AND (tbl_invserv_costos_conceptos.desistema = B'0'::"bit" OR tbl_invserv_costos_conceptos.id_concepto > 199);




--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_catalog_prod_costos_conceptos_sal AS 
 SELECT tbl_invserv_costos_conceptos.id_concepto AS clave, tbl_invserv_costos_conceptos.descripcion, '' AS especial
   FROM tbl_invserv_costos_conceptos
  WHERE tbl_invserv_costos_conceptos.tipo = 'SAL'::bpchar AND (tbl_invserv_costos_conceptos.desistema = B'0'::"bit" OR tbl_invserv_costos_conceptos.id_concepto > 199);




--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_catalog_prod_costos_conceptos_entsal AS 
 SELECT tbl_invserv_costos_conceptos.id_concepto AS clave, tbl_invserv_costos_conceptos.descripcion, '' AS especial
   FROM tbl_invserv_costos_conceptos
  WHERE (tbl_invserv_costos_conceptos.tipo = 'ENT'::bpchar OR tbl_invserv_costos_conceptos.tipo = 'SAL'::bpchar) AND (tbl_invserv_costos_conceptos.desistema = B'0'::"bit" OR tbl_invserv_costos_conceptos.id_concepto > 199);




--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_public_invserv_costos_conceptos_cat AS 
 SELECT c.id_concepto, c.descripcion, c.desistema, c.recalcularcosto, c.tipo, c.cc
   FROM tbl_invserv_costos_conceptos c
  WHERE c.desistema = B'0'::"bit" OR c.id_concepto > 199;

INSERT INTO tbl_variables(id_variable, descripcion, ventero, vdecimal, vfecha, valfanumerico, desistema, modulo)
VALUES('MVCF', 'BOOL|-|-|-|-', 1, null, null, '', '1', 'ALM');



--@FIN_BLOQUE
CREATE TABLE tbl_invserv_chfis_cab
(
  id_chfis serial NOT NULL,
  fecha timestamp without time zone NOT NULL,
  id_bodega smallint NOT NULL,
  cerrado bit(1) NOT NULL,
  generado bit(1) NOT NULL,
  status character(1) NOT NULL,
  numero integer NOT NULL,
  CONSTRAINT pk_tbl_invserv_chfis_cab PRIMARY KEY (id_chfis),
  CONSTRAINT fk_tbl_invserv_chfis_cab_tbl_invserv_bodegas FOREIGN KEY (id_bodega)
      REFERENCES tbl_invserv_bodegas (id_bodega) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE
);



--@FIN_BLOQUE
CREATE TABLE tbl_invserv_chfis_det
(
  id_chfis integer NOT NULL,
  id_prod character varying(20) NOT NULL,
  cantidad numeric(9,3) NOT NULL,
  diff numeric(9,3),
  CONSTRAINT pk_tbl_invserv_chfis_det PRIMARY KEY (id_chfis, id_prod),
  CONSTRAINT fk_tbl_invserv_chfis_det_tbl_invserv_chfis_cab FOREIGN KEY (id_chfis)
      REFERENCES tbl_invserv_chfis_cab (id_chfis) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_tbl_invserv_chfis_det_tbl_invserv_inventarios FOREIGN KEY (id_prod)
      REFERENCES tbl_invserv_inventarios (id_prod) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE
);



--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_invserv_almacen_movim_detalles AS 
 SELECT m.id_costo, m.id_movimiento, m.id_prod, c.descripcion, m.entrada, m.salida, c.id_unidadsalida AS unidad, m.ultimocosto AS uc, m.costopromedio AS cp, m.debe, m.haber
   FROM tbl_invserv_costos_detalle m
   JOIN tbl_invserv_inventarios c ON m.id_prod::text = c.id_prod::text;



--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_invserv_almacen_movim_detalles_an AS 
 SELECT m.id_movimiento, m.id_bodega, m.partida, m.id_prod, c.descripcion, m.cantidad, c.id_unidadsalida AS unidad
   FROM tbl_invserv_almacen_movim_det m
   JOIN tbl_invserv_inventarios c ON m.id_prod::text = c.id_prod::text;
   
   
--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_invserv_almacen_movim_detalles_utensilios_modulo AS 
 SELECT d.id_costo, d.id_movimiento, c.numero AS num, c.id_concepto, 
        CASE
            WHEN c.id_concepto = (-1) THEN 'Entrada'::text
            ELSE 'Salida'::text
        END AS tipo, c.fecha, c.concepto, c.status, c.ref, c.id_bodega, d.id_prod, p.descripcion, d.entrada, d.salida, p.id_unidadsalida AS unidad
   FROM tbl_invserv_costos_detalle d
   JOIN tbl_invserv_inventarios p ON d.id_prod::text = p.id_prod::text
   JOIN tbl_invserv_almacen_movim_cab c ON d.id_movimiento = c.id_movimiento
   JOIN tbl_invserv_bodegas b ON c.id_bodega = b.id_bodega
  WHERE c.id_concepto = (-1) OR c.id_concepto = (-2);

--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_invserv_almacen_movim_detalles_utensilios_modulo_exist AS 
 SELECT b.id_bodega, e.existencia AS cantidad, p.id_prod, p.descripcion, p.id_unidadsalida AS unidad, p.status, p.id_linea, l.descripcion AS linea
   FROM tbl_invserv_inventarios p
   JOIN tbl_invserv_existencias e ON p.id_prod::text = e.id_prod::text
   JOIN tbl_invserv_bodegas b ON b.id_bodega = e.id_bodega
   JOIN tbl_invserv_lineas l ON p.id_linea::text = l.id_linea::text
  WHERE p.id_tipo = 'G'::bpchar AND p.nosevende = B'1'::"bit";


--@FIN_BLOQUE
INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('ALM_MOVPLANT');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('ALM_MOVPLANT_AGREGAR');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('ALM_MOVPLANT_GENERAR');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('ALM_MOVPLANT_CANCELAR');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('ALM_MOVPLANT_CONSULTAR');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('ALM_MOVPLANT_CAMBIAR');



--@FIN_BLOQUE
CREATE TABLE tbl_invserv_almacen_movim_plant_cab
(
  id_movimplant serial NOT NULL,
  fecha timestamp without time zone NOT NULL,
  id_bodega smallint,
  numero integer NOT NULL,
  status character(1) NOT NULL,
  id_concepto smallint NOT NULL,
  concepto character varying(80) NOT NULL,
  referencia character varying(25),
  id_movimiento integer,
  CONSTRAINT pk_tbl_invserv_almacen_movim_plant_cab PRIMARY KEY (id_movimplant),
  CONSTRAINT fk_tbl_invserv_almacen_movim_plant_cab_tbl_invserv_bodegas FOREIGN KEY (id_bodega)
      REFERENCES tbl_invserv_bodegas (id_bodega) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_tbl_invserv_almacen_movim_plant_cab_tbl_invserv_costos_conce FOREIGN KEY (id_concepto)
      REFERENCES tbl_invserv_costos_conceptos (id_concepto) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE
);



--@FIN_BLOQUE
CREATE TABLE tbl_invserv_almacen_movim_plant_det
(
  id_movimplant integer NOT NULL,
  id_prod character varying(20) NOT NULL,
  partida smallint NOT NULL,
  entrada numeric(9,3) NOT NULL,
  salida numeric(9,3) NOT NULL,
  costo numeric(19,4),
  CONSTRAINT pk_tbl_invserv_almacen_movim_plant_det PRIMARY KEY (id_movimplant, id_prod),
  CONSTRAINT fk_tbl_invserv_almacen_movim_plant_det_tbl_invserv_almacen_movi FOREIGN KEY (id_movimplant)
      REFERENCES tbl_invserv_almacen_movim_plant_cab (id_movimplant) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_tbl_invserv_almacen_movim_plant_det_tbl_invserv_inventarios FOREIGN KEY (id_prod)
      REFERENCES tbl_invserv_inventarios (id_prod) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION
);



--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_invserv_almacen_movim_plant_modulo AS 
 SELECT m.id_movimplant, m.numero AS num, m.status, m.fecha, m.id_bodega, b.nombre AS bodega, m.id_concepto, c.descripcion, m.concepto, m.referencia, 
        CASE
            WHEN m.id_movimiento = 0 THEN 0
            ELSE ( SELECT tbl_invserv_almacen_movim_cab.numero
               FROM tbl_invserv_almacen_movim_cab
              WHERE tbl_invserv_almacen_movim_cab.id_movimiento = m.id_movimiento)
        END AS movimnum, m.id_movimiento
   FROM tbl_invserv_almacen_movim_plant_cab m
   JOIN tbl_invserv_costos_conceptos c ON m.id_concepto = c.id_concepto
   JOIN tbl_invserv_bodegas b ON m.id_bodega = b.id_bodega;



--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_invserv_almacen_movim_plant_detalles AS 
 SELECT m.partida AS id_costo, m.id_movimplant AS id_movimiento, m.id_prod, c.descripcion, m.entrada, m.salida, c.id_unidadsalida AS unidad, m.costo AS uc, m.costo AS cp, 0 AS debe, 0 AS haber
   FROM tbl_invserv_almacen_movim_plant_det m
   JOIN tbl_invserv_inventarios c ON m.id_prod::text = c.id_prod::text;

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('ALM_TRASPASOS');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('ALM_TRASPASOS_AGREGAR');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('ALM_TRASPASOS_CANCELAR');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('ALM_TRASPASOS_CONSULTAR');




--@FIN_BLOQUE
CREATE TABLE tbl_invserv_almacen_bod_mov_cab
(
  id_movimiento serial NOT NULL,
  fecha timestamp without time zone NOT NULL,
  fechaentrega timestamp without time zone NOT NULL,
  id_bodega smallint NOT NULL,
  id_bodegadest smallint NOT NULL,
  salida integer NOT NULL,
  status character(1) NOT NULL,
  concepto character varying(80) NOT NULL,
  referencia character varying(25),
  id_cfd integer,
  tfd smallint,
  CONSTRAINT pk_tbl_invserv_almacen_bod_mov_cab PRIMARY KEY (id_movimiento),
  CONSTRAINT fk_tbl_invserv_almacen_bod_mov_cab_tbl_invserv_bodegas FOREIGN KEY (id_bodega)
      REFERENCES tbl_invserv_bodegas (id_bodega) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_tbl_invserv_almacen_bod_mov_cab_tbl_invserv_bodegas1 FOREIGN KEY (id_bodegadest)
      REFERENCES tbl_invserv_bodegas (id_bodega) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE
);



--@FIN_BLOQUE
CREATE TABLE tbl_invserv_almacen_bod_mov_det
(
  id_movimiento integer NOT NULL,
  id_prod character varying(20) NOT NULL,
  partida smallint NOT NULL,
  cantidad numeric(9,3) NOT NULL,
  CONSTRAINT pk_tbl_invserv_almacen_bod_mov_det PRIMARY KEY (id_movimiento, id_prod),
  CONSTRAINT fk_tbl_invserv_almacen_bod_mov_det_tbl_invserv_almacen_bod_mov_ FOREIGN KEY (id_movimiento)
      REFERENCES tbl_invserv_almacen_bod_mov_cab (id_movimiento) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_tbl_invserv_almacen_bod_mov_det_tbl_invserv_inventarios FOREIGN KEY (id_prod)
      REFERENCES tbl_invserv_inventarios (id_prod) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION
);



--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_invserv_almacen_bod_mov_modulo AS 
 SELECT m.id_movimiento, m.salida, m.status, m.fecha, m.fechaentrega AS entrega, m.id_bodega, ( SELECT tbl_invserv_bodegas.nombre
           FROM tbl_invserv_bodegas
          WHERE tbl_invserv_bodegas.id_bodega = m.id_bodega) AS bodega, m.id_bodegadest, c.nombre AS bodegadest, m.concepto, m.referencia, 
        CASE
            WHEN m.id_cfd IS NULL THEN 0
            ELSE m.id_cfd
        END AS id_cfd, 
        CASE
            WHEN m.tfd IS NULL THEN 0
            ELSE m.tfd::integer
        END AS tfd
   FROM tbl_invserv_almacen_bod_mov_cab m
   JOIN tbl_invserv_bodegas c ON m.id_bodegadest = c.id_bodega;




--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_invserv_almacen_bod_mov_detalle AS 
 SELECT m.id_movimiento, m.partida, m.id_prod, c.descripcion, m.cantidad, c.id_unidadsalida AS unidad
   FROM tbl_invserv_almacen_bod_mov_det m
   JOIN tbl_invserv_inventarios c ON m.id_prod::text = c.id_prod::text;


INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('ALM_REQUERIMIENTOS');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('ALM_REQUERIMIENTOS_AGREGAR');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('ALM_REQUERIMIENTOS_CAMBIAR');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('ALM_REQUERIMIENTOS_CANCELAR');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('ALM_REQUERIMIENTOS_CONSULTAR');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('ALM_REQUERIMIENTOS_TRASPASAR');



--@FIN_BLOQUE
CREATE TABLE tbl_invserv_almacen_bod_req_cab
(
  id_movimiento serial NOT NULL,
  fecha timestamp without time zone NOT NULL,
  fechaentrega timestamp without time zone NOT NULL,
  id_bodega smallint NOT NULL,
  id_bodegadest smallint NOT NULL,
  requerimiento integer NOT NULL,
  status character(1) NOT NULL,
  concepto character varying(80) NOT NULL,
  referencia character varying(25),
  id_traspaso integer,
  CONSTRAINT pk_tbl_invserv_almacen_bod_req_cab PRIMARY KEY (id_movimiento),
  CONSTRAINT fk_tbl_invserv_almacen_bod_mov_req_tbl_invserv_bodegas FOREIGN KEY (id_bodega)
      REFERENCES tbl_invserv_bodegas (id_bodega) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_tbl_invserv_almacen_bod_mov_req_tbl_invserv_bodegas1 FOREIGN KEY (id_bodegadest)
      REFERENCES tbl_invserv_bodegas (id_bodega) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE
);



--@FIN_BLOQUE
CREATE TABLE tbl_invserv_almacen_bod_req_det
(
  id_movimiento integer NOT NULL,
  id_prod character varying(20) NOT NULL,
  partida smallint NOT NULL,
  cantidad numeric(9,3) NOT NULL,
  CONSTRAINT pk_tbl_invserv_almacen_bod_req_det PRIMARY KEY (id_movimiento, id_prod),
  CONSTRAINT fk_tbl_invserv_almacen_bod_req_det_tbl_invserv_almacen_bod_req_ FOREIGN KEY (id_movimiento)
      REFERENCES tbl_invserv_almacen_bod_req_cab (id_movimiento) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_tbl_invserv_almacen_bod_req_det_tbl_invserv_inventarios FOREIGN KEY (id_prod)
      REFERENCES tbl_invserv_inventarios (id_prod) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE
);



--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_invserv_almacen_bod_req_modulo AS 
 SELECT m.id_movimiento, m.requerimiento, m.status, m.fecha, m.fechaentrega AS entrega, m.id_bodega, ( SELECT tbl_invserv_bodegas.nombre
           FROM tbl_invserv_bodegas
          WHERE tbl_invserv_bodegas.id_bodega = m.id_bodega) AS bodega, m.id_bodegadest, c.nombre AS bodegadest, m.concepto, m.referencia, 
        CASE
            WHEN m.id_traspaso = 0 THEN 0
            ELSE ( SELECT tbl_invserv_almacen_bod_mov_cab.salida
               FROM tbl_invserv_almacen_bod_mov_cab
              WHERE tbl_invserv_almacen_bod_mov_cab.id_movimiento = m.id_traspaso)
        END AS traspasonum, m.id_traspaso
   FROM tbl_invserv_almacen_bod_req_cab m
   JOIN tbl_invserv_bodegas c ON m.id_bodegadest = c.id_bodega;



--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_invserv_almacen_bod_req_detalle AS 
 SELECT m.id_movimiento, m.partida, m.id_prod, c.descripcion, m.cantidad, c.id_unidadsalida AS unidad
   FROM tbl_invserv_almacen_bod_req_det m
   JOIN tbl_invserv_inventarios c ON m.id_prod::text = c.id_prod::text;

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('ALM_CHFIS');

--UTILIZA agregar para calcular tambien
INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('ALM_CHFIS_AGREGAR');

--UTILIZA cambiar para cerrar tambien
INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('ALM_CHFIS_CAMBIAR');

--UTILIZA cancelar para eliminar tambien
INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('ALM_CHFIS_CANCELAR');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('ALM_CHFIS_CONSULTAR');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('ALM_CHFIS_GENPROC');

INSERT INTO tbl_variables(id_variable, descripcion, ventero, vdecimal, vfecha, valfanumerico, desistema, modulo)
VALUES('CHFIS_RET', 'INT|0|-|-|-', 0, null, null ,'' , '1', 'ALM');




--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_invserv_almacen_chfis_modulo AS 
 SELECT cf.id_chfis, cf.numero AS chequeo, cf.fecha, cf.status, cf.cerrado, cf.generado, cf.id_bodega, b.nombre
   FROM tbl_invserv_chfis_cab cf
   JOIN tbl_invserv_bodegas b ON cf.id_bodega = b.id_bodega;



--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_invserv_almacen_chfis_det AS 
 SELECT c.id_chfis, d.id_prod, i.descripcion, d.cantidad, i.id_unidadsalida AS unidad, d.diff, i.status, c.id_bodega, e.stockmin, e.stockmax
   FROM tbl_invserv_chfis_cab c
   JOIN tbl_invserv_chfis_det d ON c.id_chfis = d.id_chfis
   JOIN tbl_invserv_existencias e ON c.id_bodega = e.id_bodega AND d.id_prod::text = e.id_prod::text
   JOIN tbl_invserv_inventarios i ON d.id_prod::text = i.id_prod::text;



--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_catalog_almacenes AS 
 SELECT c.id_bodega AS clave, c.descripcion, c.id_clasificacion AS especial
   FROM tbl_invserv_bodegas c;
   


--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_catalog_bodegas AS 
 SELECT c.id_bodega AS clave, 
    c.descripcion, 
    c.id_clasificacion AS especial
   FROM tbl_invserv_bodegas c
  WHERE c.id_invserv = 'P'::bpchar;



--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_catalog_boduten AS 
 SELECT c.id_bodega AS clave, 
    c.descripcion, 
    c.id_clasificacion AS especial
   FROM tbl_invserv_bodegas c
  WHERE c.id_invserv = 'G'::bpchar;
  
  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION view_invserv_bodegas_modulo(_id_bodega smallint, _limite integer)
  RETURNS SETOF record AS
$BODY$  
BEGIN

	IF _Limite < 1
	THEN
		RETURN QUERY 
		SELECT c.id_prod AS clave, c.descripcion, e.id_bodega, b.nombre AS bodega, e.existencia, c.id_unidadsalida AS unidad, e.stockmin, e.stockmax, c.status
		FROM tbl_invserv_inventarios c
			JOIN tbl_invserv_existencias e ON c.id_prod::text = e.id_prod::text AND c.id_tipo = 'P'::bpchar
			JOIN tbl_invserv_bodegas b ON e.id_bodega = b.id_bodega
		WHERE c.Status = 'V' and b.ID_Bodega = _ID_Bodega
		ORDER BY Clave ASC;
	ELSE
		RETURN QUERY 
		SELECT c.id_prod AS clave, c.descripcion, e.id_bodega, b.nombre AS bodega, e.existencia, c.id_unidadsalida AS unidad, e.stockmin, e.stockmax, c.status
		FROM tbl_invserv_inventarios c 
			JOIN tbl_invserv_existencias e ON c.id_prod::text = e.id_prod::text AND c.id_tipo = 'P'::bpchar 
			JOIN tbl_invserv_bodegas b ON e.id_bodega = b.id_bodega 
		WHERE c.Status = 'V' and b.id_bodega = _ID_Bodega
		ORDER BY RANDOM() LIMIT _Limite;
	END IF;
END
$BODY$
  LANGUAGE 'plpgsql';

--//////////////////////////////////////////////////////////////////////////
--//////////////////////////////////////////////////////////////////////////

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_invserv_alm_movs_agregar(
    _fecha timestamp without time zone,
    _id_bodega smallint,
    _status character,
    _id_concepto smallint,
    _concepto character varying,
    _reference character varying,
    _tipomov smallint,
    _claseref character varying,
    cr_pri character,
    cr_sec integer)
  RETURNS SETOF record AS
$BODY$
DECLARE  
	_errpart int; _resultpart varchar(255); _numpol int; _err int; _result varchar(255); _mes smallint; _ano smallint; _ID_Movimiento int; _Numero int; _Ref varchar(25); _CC_MOVALM char(19); _MVCF int; _id_clasificacion varchar(10); _Fija bit; 
	--Iteracion
	_REC_INVSERV_ALMACEN_MOVIM_DETFIN RECORD; _contPart smallint;
	--De costos
	_prod varchar(20); _cantdet numeric(9,3); _costo numeric(19,4); _saldo numeric(19,4); _exist numeric(9,3); _existBod numeric(9,3); _descripcion varchar(80);
	_ultimocosto numeric(19,4); _costoprom numeric(19,4); _entrada numeric(9,3); _salida numeric(9,3); _debe numeric(19,4); _haber numeric(19,4);
	_cc char(19); _parcial numeric(19,4); _saldoAcum numeric(19,4); _existAcum numeric(9,3); _existAcumBod numeric(9,3); _tipoCosteo smallint;
	_movalm numeric(19,4); _AuditarAlm bit; 
BEGIN
	_err := 0;
	_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ALM_MOVIM' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCOK'); --'El movimiento al almac?n se registr? correctamente';
	_mes := date_part('month',_Fecha);
	_ano := date_part('year',_Fecha);
	_CC_MOVALM := (select CC from TBL_INVSERV_COSTOS_CONCEPTOS where ID_Concepto = _ID_Concepto);
	_Numero := (SELECT Numero FROM TBL_INVSERV_BODEGAS WHERE ID_Bodega = _ID_Bodega);
	_MVCF = ( select ventero from TBL_VARIABLES where ID_Variable = 'MVCF' );	
	_id_clasificacion := (SELECT ID_Clasificacion FROM TBL_INVSERV_BODEGAS WHERE ID_Bodega = _ID_Bodega);
	_AuditarAlm := ( select AuditarAlm from TBL_INVSERV_BODEGAS where ID_Bodega = _ID_Bodega );
	_Fija := ( select Fija from TBL_INVSERV_BODEGAS where ID_Bodega = _ID_Bodega );
	
	IF(select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano and Cerrado = 1) > 0
	OR (select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano) < 1
	THEN
		_err := 3;
		_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_POLIZAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'ERROR: La fecha de poliza pertenece a un periodo cerrado o inexistente'
	END IF;

	IF (select count(*) from TBL_INVSERV_ALMACEN_MOVIM_CAB where ID_Bodega = _ID_Bodega and Numero = _Numero) > 0 AND _TipoMov <> 3
	THEN
		_err = 3;
		_result = (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ALM_MOVIM' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR');--'ERROR: La clave del movimiento a este almacen ya existe, No se puede duplicar'
	END IF;

	IF _CC_MOVALM IS NULL
	THEN
		_err := 3;
		_result := (select msj5 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ALM_MOVIM' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR');--'ERROR: La cuenta de movimientos al almacen para este concepto no existe';
	END IF;

	IF _MVCF = 1
	THEN
		IF split_part(_claseref, '|', 1) <> 'CHFI' -- si no lo genera un chequeo fisico
		THEN
			IF (select count(*) from TBL_INVSERV_CHFIS_CAB where ID_Bodega = _ID_Bodega and ( Cerrado = '1' or Generado = '1') and Status <> 'C' and Fecha >= _Fecha) > 0
			THEN
				_err = 3;
				_result = (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ALM_CHFIS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR');--'ERROR: No se puede generar el movimiento al almacen porque ya existe un chequeo f?sico cerrado en esta bodega, con fecha posterior a este movimiento';
			END IF;
		END IF;
	END IF;

	IF _err = 0
	THEN	
		-- procede a crear la tabla temporal de tarjetas de almacen
		CREATE LOCAL TEMPORARY TABLE _TMP_INVSERV_COSTOS_DETALLE (
			ID_Prod varchar(20) NOT NULL ,
			Parcial numeric(9, 3) NOT NULL ,
			Entrada numeric(9, 3) NOT NULL ,
			Salida numeric(9, 3) NOT NULL ,
			Existencia numeric(9, 3) NOT NULL ,
			ExistBod numeric(9, 3) NOT NULL ,
			UltimoCosto numeric(19,4) NOT NULL ,
			CostoPromedio numeric(19,4) NOT NULL ,
			Debe numeric(19,4) NOT NULL ,
			Haber numeric(19,4) NOT NULL ,
			Saldo numeric(19,4) NOT NULL , 
			Partida smallint NOT NULL
		);
		-- crea la tabla temporal final de movimientos a partir de la tabla principal
		CREATE LOCAL TEMPORARY TABLE _TMP_INVSERV_ALMACEN_MOVIM_DETFIN (
			Partida serial NOT NULL ,
			ID_Prod varchar(20) NOT NULL ,
			Cantidad numeric(9, 3) NOT NULL ,
			Costo numeric(19,4) NULL 
		);

		--procede a crear tablas de polizas, final que se usara para crear definitivamente la poliza.
		CREATE LOCAL TEMPORARY TABLE _TMP_CONT_POLIZAS_DETALLE (
			Part serial NOT NULL ,
			Cuenta char(19) NOT NULL ,
			Concepto varchar(80) NOT NULL ,
			Parcial numeric(19,4) NOT NULL ,
			Moneda smallint NOT NULL ,
			TC numeric(19,4) NOT NULL ,
			Debe numeric(19,4) NOT NULL ,
			Haber numeric(19,4) NOT NULL
		);
		CREATE LOCAL TEMPORARY TABLE _TMP_CONT_POLIZAS_DETALLE_CE_CHEQUES ( 
			id_part smallint NOT NULL,
			num character varying(20) NOT NULL,
			banco character(3) NOT NULL,
			ctaori character varying(50) NOT NULL,
			fecha timestamp without time zone NOT NULL,
			monto numeric(19,4) NOT NULL,
			benef character varying(300) NOT NULL,
			rfc character varying(13) NOT NULL,
			banemisext character varying(150) NOT NULL,
			moneda character(3) NOT NULL,
			tipcamb numeric(19,5) NOT NULL
		); 
		CREATE LOCAL TEMPORARY TABLE _TMP_CONT_POLIZAS_DETALLE_CE_TRANSFERENCIAS ( 
			id_part smallint NOT NULL,
			ctaori character varying(50) NOT NULL,
			bancoori character(3) NOT NULL,
			monto numeric(19,4) NOT NULL,
			ctadest character varying(50) NOT NULL,
			bancodest character(3) NOT NULL,
			fecha timestamp without time zone NOT NULL,
			benef character varying(300) NOT NULL,
			rfc character varying(13) NOT NULL,
			bancooriext character varying(150) NOT NULL,
			bancodestext character varying(150) NOT NULL,
			moneda character(3) NOT NULL,
			tipcamb numeric(19,5) NOT NULL
		);
		CREATE LOCAL TEMPORARY TABLE _TMP_CONT_POLIZAS_DETALLE_CE_OTRMETODOPAGO (
			id_part smallint NOT NULL,
			metpagopol character(2) NOT NULL,
			fecha timestamp without time zone NOT NULL,
			benef character varying(300) NOT NULL,
			rfc character varying(13) NOT NULL,
			monto numeric(19,4) NOT NULL,
			moneda character(3) NOT NULL,
			tipcamb numeric(19,5) NOT NULL
		);
		CREATE LOCAL TEMPORARY TABLE _TMP_CONT_POLIZAS_DETALLE_CE_COMPROBANTES ( 
			id_part smallint NOT NULL, 
			uuid_cfdi character(36) NOT NULL, 
			monto numeric(19,4) NOT NULL, 
			rfc character varying(13) NOT NULL,
			id_tipo character varying(10) NOT NULL,
			moneda character(3) NOT NULL,
			tipcamb numeric(19,5) NOT NULL,
			cfd_cbb_serie character varying(10) NOT NULL,
			cfd_cbb_numfol integer NOT NULL,
			numfactext character varying(36) NOT NULL,
			taxid character varying(30) NOT NULL
		);
		-- Fin de creacion de tablas

		INSERT INTO TBL_INVSERV_ALMACEN_MOVIM_CAB
		VALUES(default, _Fecha, _ID_Bodega, _Numero, _Status, _ID_Concepto, _Concepto, _Reference, -1, _claseref, cr_pri, cr_sec)
		RETURNING currval(pg_get_serial_sequence('TBL_INVSERV_ALMACEN_MOVIM_CAB', 'id_movimiento')) INTO _ID_Movimiento;
		
		UPDATE TBL_INVSERV_BODEGAS
		SET Numero = _Numero + 1
		WHERE ID_Bodega = _ID_Bodega;						
			
		IF _TipoMov = 3 -- si es el tipo de movimiento es chequeo de totales
		THEN	
			-- INGRESA EL DETALLE DE CANTIDADES POR BODEGA
			INSERT INTO TBL_INVSERV_ALMACEN_MOVIM_DET
			SELECT _ID_Movimiento, ID_Prod, ID_Bodega, Partida, Cantidad, Costo
			FROM _TMP_INVSERV_ALMACEN_MOVIM_DET;
			
		END IF;
		
		_Ref := 'MALM|' || cast(_ID_Movimiento as varchar) || '|' || cast(_ID_Bodega as varchar) || '||';

		-- Aqui empieza la forma de actuar con la poliza. 
		-- procede a agregar en la tarjeta de almacen y a actualizar el producto
		INSERT INTO _TMP_INVSERV_ALMACEN_MOVIM_DETFIN(ID_Prod, Cantidad, Costo)
		SELECT ID_Prod, Cantidad, Costo
		FROM _TMP_INVSERV_ALMACEN_MOVIM_DET;
		--GROUP BY ID_Prod;

		_contPart := 1;

		FOR _REC_INVSERV_ALMACEN_MOVIM_DETFIN IN ( select * from _TMP_INVSERV_ALMACEN_MOVIM_DETFIN ) 
		LOOP
			_prod := _REC_INVSERV_ALMACEN_MOVIM_DETFIN.ID_Prod;
			_cantdet := _REC_INVSERV_ALMACEN_MOVIM_DETFIN.Cantidad;
			_costo := _REC_INVSERV_ALMACEN_MOVIM_DETFIN.Costo;
			_descripcion := (select Descripcion from TBL_INVSERV_INVENTARIOS where ID_Prod = _prod);
			_saldo := (select MontoAcum from TBL_INVSERV_INVENTARIOS where ID_Prod = _prod);
			_exist := (select CantidadAcum from TBL_INVSERV_INVENTARIOS where ID_Prod = _prod);
			_existBod := (select Existencia from TBL_INVSERV_EXISTENCIAS where ID_Prod = _prod and ID_Bodega = _ID_Bodega);
			_ultimocosto := (select UltimoCosto from TBL_INVSERV_INVENTARIOS where ID_Prod = _prod);
			_costoprom := (select CostoPromedio from TBL_INVSERV_INVENTARIOS where ID_Prod = _prod);  
			_entrada := 0.000;
			_salida := 0.000;
			_debe := 0.0;
			_haber := 0.0;
			_cc := (select ID_CC from TBL_INVSERV_INVENTARIOS where ID_Prod = _prod);	
			
			IF _TipoMov = 1 -- entradas
			THEN
				_entrada := _cantdet;
				IF(select RecalcularCosto from TBL_INVSERV_COSTOS_CONCEPTOS where ID_Concepto = _ID_Concepto) = '0'
				THEN
					_debe := round(_cantdet * _costo, 2);
					_saldoAcum := _saldo + _debe;
					_existAcum := _exist + _cantdet; 
					_existAcumBod := _existBod + _cantdet;
					_ultimocosto := _costo; 
					_costoprom := (case when _existAcum = 0.000 then 0.0000 else round(_saldoAcum / _existAcum, 4) end); 
				ELSE -- aqui ignora el costo aplicado, ya que se calcula con base en la tarjeta y no al aplicado en el movimiento
					_debe := (case when _tipoCosteo = 0 then round(_cantdet * _ultimocosto, 2) else round(_cantdet * _costoprom, 2) end);
					_saldoAcum := _saldo + _debe;
					_existAcum := _exist + _cantdet;  
					_existAcumBod := _existBod + _cantdet;  
				END IF;
			ELSIF _TipoMov = 2 -- salidas
			THEN	
				_salida := _cantdet;
				IF(select RecalcularCosto from TBL_INVSERV_COSTOS_CONCEPTOS where ID_Concepto = _ID_Concepto) = '0'
				THEN
					_haber := round(_cantdet * _costo, 2);
					_existAcum := _exist - _cantdet; 
					_existAcumBod := _existBod - _cantdet;
					_saldoAcum := _saldo - _haber;	
					_ultimocosto = _costo; 
					_costoprom = (case when _existAcum = 0.000 then 0.0000 else round(_saldoAcum / _existAcum, 4) end); 
				ELSE
					_haber := (case when _tipoCosteo = 0 then round(_cantdet * _ultimocosto, 2) else round(_cantdet * _costoprom, 2) end);
					_existAcum := _exist - _cantdet; 
					_existAcumBod := _existBod - _cantdet;
					_saldoAcum := _saldo - _haber;	
				END IF;
			ELSIF _TipoMov = 3 -- chequeo de totales
			THEN	
				IF _exist > _cantdet
				THEN
					_salida := _exist - _cantdet;
					_haber := (case when _tipoCosteo = 0 then round(_salida * _ultimocosto, 2) else round(_salida * _costoprom, 2) end);
					_existAcum := _exist - _salida;
					_existAcumBod := _existBod - _salida;
					_saldoAcum := _saldo - _haber;	
				ELSIF _exist < _cantdet
				THEN
					_entrada := _cantdet - _exist;
					_debe := (case when _tipoCosteo = 0 then round(_entrada * _ultimocosto, 2) else round(_entrada * _costoprom, 2) end);
					_saldoAcum := _saldo + _debe;
					_existAcum := _exist + _entrada;
					_existAcumBod := _existBod + _entrada;
				END IF;
			ELSIF _TipoMov = 4 -- chequeo diferencial
			THEN
				IF _cantdet < 0.000
				THEN
					_salida := abs(_cantdet);
					_haber := (case when _tipoCosteo = 0 then round(_salida * _ultimocosto, 2) else round(_salida * _costoprom, 2) end);
					_existAcum := _exist - _salida;
					_existAcumBod := _existBod - _salida;
					_saldoAcum := _saldo - _haber;	
				ELSIF _cantdet > 0.000
				THEN
					_entrada := _cantdet;
					_debe := (case when _tipoCosteo = 0 then round(_entrada * _ultimocosto, 2) else round(_entrada * _costoprom, 2) end);
					_saldoAcum := _saldo + _debe;
					_existAcum := _exist + _entrada;
					_existAcumBod := _existBod + _entrada;
				END IF;
			END IF;

			_parcial := (case when _debe > _haber then _debe when _debe < _haber then _haber else 0.0 end);
			
			INSERT INTO  _TMP_CONT_POLIZAS_DETALLE 
			VALUES(default, _cc, _descripcion, _parcial, 1, 1.0, _debe, _haber);
						 
			INSERT INTO _TMP_INVSERV_COSTOS_DETALLE
			VALUES(_prod, _cantdet, _entrada, _salida, _existAcum, _existAcumBod, _ultimocosto, _costoprom, _debe, _haber, _saldoAcum, _contPart);
			
			UPDATE TBL_INVSERV_INVENTARIOS
			SET CantidadAcum = _existAcum, CostoPromedio = _costoprom, UltimoCosto = _ultimocosto, MontoAcum = _saldoAcum
			WHERE ID_Prod = _prod;
				
			_contPart := _contPart + 1;
				
		END LOOP;
			
		IF _err = 0 AND _Fija = '0' -- Procede a registrar la poliza Si y Solo Si es una bodega contable y no fija
		THEN
			IF (select sum(Debe) from _TMP_CONT_POLIZAS_DETALLE) > (select sum(Haber) from _TMP_CONT_POLIZAS_DETALLE)
			THEN
				_movalm := (select sum(Debe) from _TMP_CONT_POLIZAS_DETALLE) - (select sum(Haber) from _TMP_CONT_POLIZAS_DETALLE);
				
				INSERT INTO _TMP_CONT_POLIZAS_DETALLE
				VALUES(default, _CC_MOVALM, (select msj3 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ALM_MOVIM' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCOK'), _movalm, 1, 1.0, 0.0, _movalm);
		
			ELSIF (select sum(Debe) from _TMP_CONT_POLIZAS_DETALLE) < (select sum(Haber) from _TMP_CONT_POLIZAS_DETALLE)
			THEN
				_movalm := (select sum(Haber) from _TMP_CONT_POLIZAS_DETALLE) - (select sum(Debe) from _TMP_CONT_POLIZAS_DETALLE);
				
				INSERT INTO _TMP_CONT_POLIZAS_DETALLE
				VALUES(default, _CC_MOVALM, (select msj3 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ALM_MOVIM' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCOK'), _movalm, 1, 1.0, _movalm, 0.0);
			END IF;
			
			SELECT * INTO _errpart, _resultpart, _numpol FROM sp_cont_polizas_agregar('DR', _Fecha, _Concepto,'0', _Ref, _movalm, _id_clasificacion ) as ( err integer, res varchar, clave integer );
      
			IF _errpart <> 0
			THEN
				_err := _errpart;
				_result := _resultpart;
			END IF;
			 
		END IF;
		-- Fin de la poliza

		-- Procede a registrar los costos
		IF _err = 0
		THEN
			INSERT INTO TBL_INVSERV_COSTOS_DETALLE(id_movimiento,fecha,id_prod,id_concepto,status,parcial,entrada,salida,existencia,existbod,ultimocosto,costopromedio,debe,haber,saldo,ref)
			SELECT _ID_Movimiento, _Fecha, ID_Prod, _ID_Concepto, _Status, Parcial, Entrada, Salida, Existencia, ExistBod, UltimoCosto, CostoPromedio, Debe, Haber, Saldo, _Ref || cast(Partida as varchar)
			FROM _TMP_INVSERV_COSTOS_DETALLE;
			
		END IF;
		-- Procede a actualizar las existencias por bodega
		IF _err = 0
		THEN
			--RAISE NOTICE 'ACUALIZACION EXISTENCIAS: %, %, %.', _TipoMov, _claseref, _AuditarAlm;

			IF _TipoMov = '1' 
			THEN
				IF _claseref is null or _claseref = '' or split_part(_claseref, '|', 1) = 'CHFI' or _AuditarAlm = '0' -- Si es de este modulo √ì es de otro pero no se tiene que auditar el almacen
				THEN
					UPDATE TBL_INVSERV_EXISTENCIAS
					SET Existencia = e.Existencia + ( 	
									SELECT SUM(Entrada)
									FROM _TMP_INVSERV_COSTOS_DETALLE
									WHERE ID_Prod = e.ID_Prod
									GROUP BY ID_Prod 	)
					FROM TBL_INVSERV_EXISTENCIAS e, _TMP_INVSERV_COSTOS_DETALLE tm 
					WHERE e.ID_Prod = tm.ID_Prod AND e.ID_Bodega = _ID_Bodega 
						AND e.ID_Prod = TBL_INVSERV_EXISTENCIAS.ID_Prod
						AND e.ID_Bodega = TBL_INVSERV_EXISTENCIAS.ID_Bodega;
					
				END IF;
			ELSE
				UPDATE TBL_INVSERV_EXISTENCIAS
				SET Existencia = e.Existencia - ( 	
							SELECT SUM(Salida) 
							FROM _TMP_INVSERV_COSTOS_DETALLE 
							WHERE ID_Prod = e.ID_Prod
							GROUP BY ID_Prod 	)
				FROM TBL_INVSERV_EXISTENCIAS e, _TMP_INVSERV_COSTOS_DETALLE tm 
				WHERE e.ID_Prod = tm.ID_Prod AND e.ID_Bodega = _ID_Bodega
					AND e.ID_Prod = TBL_INVSERV_EXISTENCIAS.ID_Prod
					AND e.ID_Bodega = TBL_INVSERV_EXISTENCIAS.ID_Bodega;
				
			END IF;
		END IF;
		
		-- finalmente, actualiza la referencia de la poliza en el cabecero del movimiento(solo para bodegas contables)
		IF _err = 0 AND _Fija = '0'
		THEN
			UPDATE TBL_INVSERV_ALMACEN_MOVIM_CAB
			SET ID_Pol = _numpol
			WHERE ID_Movimiento = _ID_Movimiento;
		END IF;

		DROP TABLE _TMP_INVSERV_COSTOS_DETALLE;
		DROP TABLE _TMP_INVSERV_ALMACEN_MOVIM_DETFIN;
		DROP TABLE _TMP_CONT_POLIZAS_DETALLE;
		DROP TABLE _TMP_CONT_POLIZAS_DETALLE_CE_CHEQUES; 
		DROP TABLE _TMP_CONT_POLIZAS_DETALLE_CE_TRANSFERENCIAS;
		DROP TABLE _TMP_CONT_POLIZAS_DETALLE_CE_OTRMETODOPAGO;
		DROP TABLE _TMP_CONT_POLIZAS_DETALLE_CE_COMPROBANTES;

	END IF;
	
	RETURN QUERY SELECT _err, _result, _ID_Movimiento;

END
$BODY$
  LANGUAGE plpgsql;
 
 
--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_invserv_alm_utensilios_agregar(
    _fecha timestamp without time zone,
    _id_bodega smallint,
    _status character,
    _id_concepto smallint,
    _concepto character varying,
    _reference character varying,
    _tipomov character varying,
    _claseref character varying,
    cr_pri character,
    cr_sec integer)
  RETURNS SETOF record AS
$BODY$
DECLARE  
	_errpart int; _resultpart varchar(255); _err int; _result varchar(255); _mes smallint; _ano smallint; _ID_Movimiento int; _Numero int; _Ref varchar(25);  
	--Iteracion
	_REC_INVSERV_ALMACEN_MOVIM_DETFIN RECORD; _contPart smallint;
	--De costos
	_prod varchar(20); _cantdet numeric(9,3); _exist numeric(9,3); _existBod numeric(9,3); _descripcion varchar(80);
	_entrada numeric(9,3); _salida numeric(9,3); 
	_existAcum numeric(9,3); _existAcumBod numeric(9,3);  
BEGIN
	_err := 0;
	_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ALM_MOVIM' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCOK'); --'El movimiento al almac?n se registr? correctamente';
	_mes := date_part('month',_Fecha);
	_ano := date_part('year',_Fecha);
	_Numero := (SELECT Numero FROM TBL_INVSERV_BODEGAS WHERE ID_Bodega = _ID_Bodega);
	
	IF(select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano and Cerrado = 1) > 0
	OR (select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano) < 1
	THEN
		_err := 3;
		_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_POLIZAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'ERROR: La fecha de poliza pertenece a un periodo cerrado o inexistente'
	END IF;

	IF (select count(*) from TBL_INVSERV_ALMACEN_MOVIM_CAB where ID_Bodega = _ID_Bodega and Numero = _Numero) > 0
	THEN
		_err = 3;
		_result = (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ALM_MOVIM' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR');--'ERROR: La clave del movimiento a este almacen ya existe, No se puede duplicar'
	END IF;

	IF _err = 0
	THEN	
		-- procede a crear la tabla temporal de tarjetas de almacen
		CREATE LOCAL TEMPORARY TABLE _TMP_INVSERV_COSTOS_DETALLE (
			ID_Prod varchar(20) NOT NULL ,
			Parcial numeric(9, 3) NOT NULL ,
			Entrada numeric(9, 3) NOT NULL ,
			Salida numeric(9, 3) NOT NULL ,
			Existencia numeric(9, 3) NOT NULL ,
			ExistBod numeric(9, 3) NOT NULL ,
			UltimoCosto numeric(19,4) NOT NULL ,
			CostoPromedio numeric(19,4) NOT NULL ,
			Debe numeric(19,4) NOT NULL ,
			Haber numeric(19,4) NOT NULL ,
			Saldo numeric(19,4) NOT NULL , 
			Partida smallint NOT NULL
		);
		-- crea la tabla temporal final de movimientos a partir de la tabla principal
		CREATE LOCAL TEMPORARY TABLE _TMP_INVSERV_ALMACEN_MOVIM_DETFIN (
			Partida serial NOT NULL ,
			ID_Prod varchar(20) NOT NULL ,
			Cantidad numeric(9, 3) NOT NULL ,
			Costo numeric(19,4) NULL 
		);
		-- Fin de creacion de tablas

		INSERT INTO TBL_INVSERV_ALMACEN_MOVIM_CAB
		VALUES(default, _Fecha, _ID_Bodega, _Numero, _Status, _ID_Concepto, _Concepto, _Reference, -1, _claseref, cr_pri, cr_sec)
		RETURNING currval(pg_get_serial_sequence('TBL_INVSERV_ALMACEN_MOVIM_CAB', 'id_movimiento')) INTO _ID_Movimiento;
		
		UPDATE TBL_INVSERV_BODEGAS
		SET Numero = _Numero + 1
		WHERE ID_Bodega = _ID_Bodega;						
			
		_Ref := 'UALM|' || cast(_ID_Movimiento as varchar) || '|' || cast(_ID_Bodega as varchar) || '||';

		-- Aqui empieza la forma de actuar con la poliza. 
		-- procede a agregar en la tarjeta de almacen y a actualizar el producto
		INSERT INTO _TMP_INVSERV_ALMACEN_MOVIM_DETFIN(ID_Prod, Cantidad, Costo)
		SELECT ID_Prod, Cantidad, Costo
		FROM _TMP_INVSERV_ALMACEN_MOVIM_DET;
		--GROUP BY ID_Prod;

		_contPart := 1;

		FOR _REC_INVSERV_ALMACEN_MOVIM_DETFIN IN ( select * from _TMP_INVSERV_ALMACEN_MOVIM_DETFIN ) 
		LOOP
			_prod := _REC_INVSERV_ALMACEN_MOVIM_DETFIN.ID_Prod;
			_cantdet := _REC_INVSERV_ALMACEN_MOVIM_DETFIN.Cantidad;
			_descripcion := (select Descripcion from TBL_INVSERV_INVENTARIOS where ID_Prod = _prod);
			_exist := (select CantidadAcum from TBL_INVSERV_INVENTARIOS where ID_Prod = _prod);
			_existBod := (select Existencia from TBL_INVSERV_EXISTENCIAS where ID_Prod = _prod and ID_Bodega = _ID_Bodega);
			_entrada := 0.000;
			_salida := 0.000;
			
			IF _TipoMov = 'ENTRADA'
			THEN
				_entrada := _cantdet;
				_existAcum := _exist + _cantdet; 
				_existAcumBod := _existBod + _cantdet;
			ELSE -- _TipoMov = 'SALIDAS'
				_salida := _cantdet;
				_existAcum := _exist - _cantdet; 
				_existAcumBod := _existBod - _cantdet;
			END IF;

			INSERT INTO _TMP_INVSERV_COSTOS_DETALLE
			VALUES(_prod, _cantdet, _entrada, _salida, _existAcum, _existAcumBod, 0.00, 0.00, 0.00, 0.00, 0.00, _contPart);
			
			UPDATE TBL_INVSERV_INVENTARIOS
			SET CantidadAcum = _existAcum 
			WHERE ID_Prod = _prod;
				
			_contPart := _contPart + 1;
				
		END LOOP;
	
		-- Procede a registrar los costos
		IF _err = 0
		THEN
			INSERT INTO TBL_INVSERV_COSTOS_DETALLE(id_movimiento,fecha,id_prod,id_concepto,status,parcial,entrada,salida,existencia,existbod,ultimocosto,costopromedio,debe,haber,saldo,ref)
			SELECT _ID_Movimiento, _Fecha, ID_Prod, _ID_Concepto, _Status, Parcial, Entrada, Salida, Existencia, ExistBod, UltimoCosto, CostoPromedio, Debe, Haber, Saldo, _Ref || cast(Partida as varchar)
			FROM _TMP_INVSERV_COSTOS_DETALLE;
		END IF;

		-- Procede a actualizar las existencias por bodega
		IF _err = 0
		THEN
			--RAISE NOTICE 'ACUALIZACION EXISTENCIAS: %, %, %.', _TipoMov, _claseref, _AuditarAlm;
			IF _TipoMov = 'ENTRADA' 
			THEN
				UPDATE TBL_INVSERV_EXISTENCIAS
				SET Existencia = e.Existencia + ( 	
									SELECT SUM(Entrada)
									FROM _TMP_INVSERV_COSTOS_DETALLE
									WHERE ID_Prod = e.ID_Prod
									GROUP BY ID_Prod 	)
				FROM TBL_INVSERV_EXISTENCIAS e, _TMP_INVSERV_COSTOS_DETALLE tm 
				WHERE e.ID_Prod = tm.ID_Prod AND e.ID_Bodega = _ID_Bodega 
					AND e.ID_Prod = TBL_INVSERV_EXISTENCIAS.ID_Prod
					AND e.ID_Bodega = TBL_INVSERV_EXISTENCIAS.ID_Bodega;
					
			ELSE -- _TipoMov = 'SALIDA'
				UPDATE TBL_INVSERV_EXISTENCIAS
				SET Existencia = e.Existencia - ( 	
							SELECT SUM(Salida) 
							FROM _TMP_INVSERV_COSTOS_DETALLE 
							WHERE ID_Prod = e.ID_Prod
							GROUP BY ID_Prod 	)
				FROM TBL_INVSERV_EXISTENCIAS e, _TMP_INVSERV_COSTOS_DETALLE tm 
				WHERE e.ID_Prod = tm.ID_Prod AND e.ID_Bodega = _ID_Bodega
					AND e.ID_Prod = TBL_INVSERV_EXISTENCIAS.ID_Prod
					AND e.ID_Bodega = TBL_INVSERV_EXISTENCIAS.ID_Bodega;
				
			END IF;
		END IF;
		
		DROP TABLE _TMP_INVSERV_COSTOS_DETALLE;
		DROP TABLE _TMP_INVSERV_ALMACEN_MOVIM_DETFIN;
		
	END IF;
	
	RETURN QUERY SELECT _err, _result, _ID_Movimiento;

END
$BODY$
  LANGUAGE plpgsql;

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_invserv_alm_movs_cancelar(_id_movimiento integer)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_Numero int; _Fecha timestamp; _ID_Pol int; _err int; _result varchar(255); _errpart int; _resultpart varchar(255); _Ref varchar(25);
	_mes smallint; _ano smallint; _ID_Bodega smallint; _MVCF int; _numpol int; _AuditarAlm bit; _TipoMov char(3); _ID_Concepto smallint;  
BEGIN
	_err := 0;
	_result := (select msj5 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ALM_MOVIM' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCOK'); --'El movimiento se cancel√≥ satisfactoriamente';
	_Fecha := (select Fecha from TBL_INVSERV_ALMACEN_MOVIM_CAB where ID_Movimiento = _ID_Movimiento);
	_ID_Pol := (select ID_Pol from TBL_INVSERV_ALMACEN_MOVIM_CAB where ID_Movimiento = _ID_Movimiento);
	_ID_Bodega := (select ID_Bodega from TBL_INVSERV_ALMACEN_MOVIM_CAB where ID_Movimiento = _ID_Movimiento);
	_Ref := (select Ref from TBL_INVSERV_ALMACEN_MOVIM_CAB where ID_Movimiento = _ID_Movimiento);
	
	_MVCF = ( select ventero from TBL_VARIABLES where ID_Variable = 'MVCF' );	
	_AuditarAlm := ( select AuditarAlm from TBL_INVSERV_BODEGAS where ID_Bodega = _ID_Bodega );
	_ID_Concepto := ( select ID_Concepto from TBL_INVSERV_ALMACEN_MOVIM_CAB where ID_Movimiento = _ID_Movimiento );
	_TipoMov := (select Tipo from TBL_INVSERV_COSTOS_CONCEPTOS where ID_Concepto = _ID_Concepto);
	
	_mes := date_part('month',_Fecha);
	_ano := date_part('year',_Fecha);
	
	IF(select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano and Cerrado = 1) > 0
	OR (select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano) < 1
	THEN
		_err := 3;
		_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_POLIZAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'ERROR: La fecha de poliza pertenece a un periodo cerrado o inexistente'
	END IF;

	IF _MVCF = 1
	THEN
		IF (select count(*) from TBL_INVSERV_CHFIS_CAB where ID_Bodega = _ID_Bodega and ( Cerrado = '1' or Generado = '1') and Status <> 'C' and Fecha >= _Fecha) > 0
		THEN
			_err = 3;
			_result = (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ALM_CHFIS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'ERROR: No se puede generar el proceso al almacen porque ya existe un chequeo fisico cerrado en esta bodega, con fecha posterior a este movimiento';
		END IF;
	END IF;

	IF _err = 0
	THEN
		UPDATE TBL_INVSERV_ALMACEN_MOVIM_CAB
		SET Status = 'C'
		WHERE ID_Movimiento = _ID_Movimiento;
		
		-- procede a cancelar los detalles de costos
		UPDATE TBL_INVSERV_COSTOS_DETALLE
		SET Status = 'C' 
		WHERE ID_Movimiento = _ID_Movimiento;
		
		-- Procede a actualizar las existencias en bodegas
		--RAISE NOTICE 'ACUALIZACION EXISTENCIAS: %, %, %.', _TipoMov, _Ref, _AuditarAlm;

		IF _TipoMov = 'ENT' 
		THEN
			IF _Ref is null or _Ref = '' or split_part(_Ref, '|', 1) = 'CHFI' or _AuditarAlm = '0' -- Si es de este modulo, de chequeo fisico o es de otro pero no se tiene que auditar el almacen
			THEN
				--RAISE NOTICE 'ACUALIZACION ENTRADA';
				UPDATE TBL_INVSERV_EXISTENCIAS
				SET Existencia = e.Existencia - ( 	
									SELECT SUM(Entrada)
									FROM TBL_INVSERV_COSTOS_DETALLE 
									WHERE ID_Prod = e.ID_Prod AND ID_Movimiento = _ID_Movimiento
									GROUP BY ID_Prod )
				FROM TBL_INVSERV_EXISTENCIAS e, TBL_INVSERV_COSTOS_DETALLE dg 
				WHERE e.ID_Prod = dg.ID_Prod AND dg.ID_Movimiento = _ID_Movimiento AND e.ID_Bodega = _ID_Bodega
					AND e.ID_Prod = TBL_INVSERV_EXISTENCIAS.ID_Prod
					AND e.ID_Bodega = TBL_INVSERV_EXISTENCIAS.ID_Bodega;
								
			END IF;
		ELSE
			UPDATE TBL_INVSERV_EXISTENCIAS
			SET Existencia = e.Existencia + ( 	
								SELECT SUM(Salida)
								FROM TBL_INVSERV_COSTOS_DETALLE 
								WHERE ID_Prod = e.ID_Prod AND ID_Movimiento = _ID_Movimiento
								GROUP BY ID_Prod )
			FROM TBL_INVSERV_EXISTENCIAS e, TBL_INVSERV_COSTOS_DETALLE dg 
			WHERE e.ID_Prod = dg.ID_Prod AND dg.ID_Movimiento = _ID_Movimiento AND e.ID_Bodega = _ID_Bodega
				AND e.ID_Prod = TBL_INVSERV_EXISTENCIAS.ID_Prod
				AND e.ID_Bodega = TBL_INVSERV_EXISTENCIAS.ID_Bodega;
				
		END IF;

		
		--Procede a cancelar la poliza
		IF _ID_Pol is not null
		THEN
			SELECT * INTO _errpart, _resultpart, _numpol FROM sp_cont_polizas_cancelar(_ID_Pol, _Fecha) as ( err integer, res varchar, clave integer );
			IF _errpart <> 0
			THEN
				_err := _errpart;
				_result := _resultpart;
			END IF;
		END IF;
	END IF;
		
	RETURN QUERY SELECT _err, _result, _ID_Movimiento;

END
$BODY$
  LANGUAGE 'plpgsql';


--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_invserv_alm_utensilios_cancelar(_id_movimiento integer)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_Numero int; _Fecha timestamp; _err int; _result varchar(255); _errpart int; _resultpart varchar(255); _Ref varchar(25);
	_mes smallint; _ano smallint; _ID_Bodega smallint; _ID_Concepto smallint;  
BEGIN
	_err := 0;
	_result := (select msj5 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ALM_MOVIM' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCOK'); --'El movimiento se cancel√≥ satisfactoriamente';
	_Fecha := (select Fecha from TBL_INVSERV_ALMACEN_MOVIM_CAB where ID_Movimiento = _ID_Movimiento);
	_ID_Bodega := (select ID_Bodega from TBL_INVSERV_ALMACEN_MOVIM_CAB where ID_Movimiento = _ID_Movimiento);
	_Ref := (select Ref from TBL_INVSERV_ALMACEN_MOVIM_CAB where ID_Movimiento = _ID_Movimiento);
	_ID_Concepto := ( select ID_Concepto from TBL_INVSERV_ALMACEN_MOVIM_CAB where ID_Movimiento = _ID_Movimiento );
	
	_mes := date_part('month',_Fecha);
	_ano := date_part('year',_Fecha);
	
	IF(select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano and Cerrado = 1) > 0
	OR (select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano) < 1
	THEN
		_err := 3;
		_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_POLIZAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'ERROR: La fecha de poliza pertenece a un periodo cerrado o inexistente'
	END IF;

	IF _err = 0
	THEN
		UPDATE TBL_INVSERV_ALMACEN_MOVIM_CAB
		SET Status = 'C'
		WHERE ID_Movimiento = _ID_Movimiento;
		
		-- procede a cancelar los detalles de costos
		UPDATE TBL_INVSERV_COSTOS_DETALLE
		SET Status = 'C' 
		WHERE ID_Movimiento = _ID_Movimiento;
		
		-- Procede a actualizar las existencias en bodegas
		--RAISE NOTICE 'ACUALIZACION EXISTENCIAS: %, %, %.', _TipoMov, _Ref, _AuditarAlm;

		IF _ID_Concepto = -1 -- Es entrada 
		THEN
			UPDATE TBL_INVSERV_EXISTENCIAS
			SET Existencia = e.Existencia - ( 	
									SELECT SUM(Entrada)
									FROM TBL_INVSERV_COSTOS_DETALLE 
									WHERE ID_Prod = e.ID_Prod AND ID_Movimiento = _ID_Movimiento
									GROUP BY ID_Prod )
			FROM TBL_INVSERV_EXISTENCIAS e, TBL_INVSERV_COSTOS_DETALLE dg 
			WHERE e.ID_Prod = dg.ID_Prod AND dg.ID_Movimiento = _ID_Movimiento AND e.ID_Bodega = _ID_Bodega
					AND e.ID_Prod = TBL_INVSERV_EXISTENCIAS.ID_Prod
					AND e.ID_Bodega = TBL_INVSERV_EXISTENCIAS.ID_Bodega;
								
			
		ELSE --Es salida
			UPDATE TBL_INVSERV_EXISTENCIAS
			SET Existencia = e.Existencia + ( 	
								SELECT SUM(Salida)
								FROM TBL_INVSERV_COSTOS_DETALLE 
								WHERE ID_Prod = e.ID_Prod AND ID_Movimiento = _ID_Movimiento
								GROUP BY ID_Prod )
			FROM TBL_INVSERV_EXISTENCIAS e, TBL_INVSERV_COSTOS_DETALLE dg 
			WHERE e.ID_Prod = dg.ID_Prod AND dg.ID_Movimiento = _ID_Movimiento AND e.ID_Bodega = _ID_Bodega
				AND e.ID_Prod = TBL_INVSERV_EXISTENCIAS.ID_Prod
				AND e.ID_Bodega = TBL_INVSERV_EXISTENCIAS.ID_Bodega;
				
		END IF;
		
	END IF;
		
	RETURN QUERY SELECT _err, _result, _ID_Movimiento;

END
$BODY$
  LANGUAGE plpgsql;

  
--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_invserv_alm_movs_plant_agregar(_fecha timestamp without time zone, _id_bodega smallint, _status character, _id_concepto smallint, _concepto character varying, _reference character varying)
  RETURNS SETOF record AS
$BODY$
DECLARE  
	_err int; _result varchar(255); _mes smallint; _ano smallint; _ID_MovimPlant int; _Plantilla int;
BEGIN
	_err := 0;
	_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ALM_MOVPLANT' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCOK'); --'La plantilla de almac√©n se registr√≥ correctamente';
	_mes := date_part('month',_Fecha);
	_ano := date_part('year',_Fecha);
	_Plantilla := (SELECT Plantilla FROM TBL_INVSERV_BODEGAS WHERE ID_Bodega = _ID_Bodega);
	

	IF(select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano and Cerrado = 1) > 0
	OR (select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano) < 1
	THEN
		_err := 3;
		_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_POLIZAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'ERROR: La fecha de poliza pertenece a un periodo cerrado o inexistente'
	END IF;

	IF (select count(*) from TBL_INVSERV_ALMACEN_MOVIM_PLANT_CAB where ID_Bodega = _ID_Bodega and Numero = _Plantilla) > 0
	THEN
		_err = 3;
		_result = (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ALM_MOVPLANT' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR');--'ERROR: La clave de la plantilla ya existe, No se puede duplicar';
	END IF;
	


	IF _err = 0
	THEN	
		INSERT INTO TBL_INVSERV_ALMACEN_MOVIM_PLANT_CAB
		VALUES(default, _Fecha, _ID_Bodega, _Plantilla, _Status, _ID_Concepto, _Concepto, _Reference, 0)
		RETURNING currval(pg_get_serial_sequence('TBL_INVSERV_ALMACEN_MOVIM_PLANT_CAB', 'id_movimplant')) INTO _ID_MovimPlant;
		
		UPDATE TBL_INVSERV_BODEGAS
		SET Plantilla = _Plantilla + 1
		WHERE ID_Bodega = _ID_Bodega;						
			
		-- inserta el detalle
		INSERT INTO TBL_INVSERV_ALMACEN_MOVIM_PLANT_DET
		SELECT _ID_MovimPlant, ID_Prod, Partida, Entrada, Salida, Costo
		FROM _TMP_INVSERV_ALMACEN_MOVIM_DET;
		
	END IF;
		
	RETURN QUERY SELECT _err, _result, _ID_MovimPlant;

END
$BODY$
  LANGUAGE 'plpgsql';

  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_invserv_alm_movs_plant_aplicar(_id_movimplant integer)
  RETURNS SETOF record AS
$BODY$
DECLARE  
	_err int; _result varchar(255); _errpart int; _resultpart varchar(255); _clase varchar(25); _Fecha timestamp; _ID_Bodega smallint; _Plantilla int; _ID_Concepto smallint; _Concepto varchar(80); _Reference varchar(25); 
	_ID_Movimiento int; _Numero int; _Tipo char(3);	_AuditarAlm bit; _Status char(1); 
	_StatusCost char(1); _mes smallint; _ano smallint; _ConceptoMov varchar(80); _Bodega varchar(80); _TipoInt smallint;  
BEGIN	
	_err := 0;
	_result :=  (select msj2 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ALM_MOVPLANT' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCOK'); --'La plantilla se aplic√≥ satisfactoriamente';
	_ID_Bodega := ( select ID_Bodega from TBL_INVSERV_ALMACEN_MOVIM_PLANT_CAB where ID_MovimPlant = _ID_MovimPlant );
	_Fecha :=	( select Fecha from TBL_INVSERV_ALMACEN_MOVIM_PLANT_CAB where ID_MovimPlant = _ID_MovimPlant );
	_Concepto := ( select Concepto from TBL_INVSERV_ALMACEN_MOVIM_PLANT_CAB where ID_MovimPlant = _ID_MovimPlant );
	_Plantilla := ( select Numero from TBL_INVSERV_ALMACEN_MOVIM_PLANT_CAB where ID_MovimPlant = _ID_MovimPlant );
	_Reference := ( select Referencia from TBL_INVSERV_ALMACEN_MOVIM_PLANT_CAB where ID_MovimPlant = _ID_MovimPlant );
	_ID_Concepto := ( select ID_Concepto from TBL_INVSERV_ALMACEN_MOVIM_PLANT_CAB where ID_MovimPlant = _ID_MovimPlant );
	_AuditarAlm := ( select AuditarAlm from TBL_INVSERV_BODEGAS where ID_Bodega = _ID_Bodega );
	_Status := case when _AuditarAlm = '0' then 'E' else 'N' end;
	_Bodega := ( select Nombre from TBL_INVSERV_BODEGAS where ID_Bodega = _ID_Bodega );
	_Tipo := (select Tipo from TBL_INVSERV_COSTOS_CONCEPTOS where ID_Concepto = _ID_Concepto);
	_StatusCost := (case when _Tipo = 'ENT' then
					case when _AuditarAlm = '1' then 'G' else 'U' end
				else
					case when _AuditarAlm = '1' then 'P' else 'U' end
			end);
	_TipoInt := (case when _Tipo = 'ENT' then 1 else 2 end);
	_mes := date_part('month',_Fecha);
	_ano := date_part('year',_Fecha);
	

	IF(select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano and Cerrado = 1) > 0
	OR (select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano) < 1
	THEN
		_err := 3;
		_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_POLIZAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'ERROR: La fecha de poliza pertenece a un periodo cerrado o inexistente'
	END IF;

	IF _err = 0
	THEN
		_clase := 'PALM|' || cast(_ID_MovimPlant as varchar) || '|' || cast(_ID_Bodega as varchar) || '||';
		_ConceptoMov := (select msj3 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ALM_MOVPLANT' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCOK') || _Bodega || '/' || cast(_Plantilla as varchar);
		
		CREATE LOCAL TEMPORARY TABLE _TMP_INVSERV_ALMACEN_MOVIM_DET (
			ID_Bodega smallint NOT NULL ,
			ID_Prod varchar(20) NOT NULL ,
			Partida smallint NOT NULL ,
			Cantidad numeric(9, 3) NOT NULL ,
			Costo numeric(19,4) NULL 
		); 

		insert into _TMP_INVSERV_ALMACEN_MOVIM_DET
		select _ID_Bodega, ID_Prod, Partida, case when _Tipo = 'ENT' then entrada else salida end, costo
		from TBL_INVSERV_ALMACEN_MOVIM_PLANT_DET
		where ID_MovimPlant = _ID_MovimPlant;
		
		SELECT * INTO _errpart, _resultpart, _ID_Movimiento 
		FROM sp_invserv_alm_movs_agregar(_Fecha, _ID_Bodega, _StatusCost, _ID_Concepto, _Concepto, _Reference, _TipoInt, _clase, 'PALM', _ID_MovimPlant) 
		as ( err integer, res varchar, clave integer );
      
		IF _errpart <> 0
		THEN
			_err := _errpart;
			_result := _resultpart;
		ELSE
			UPDATE TBL_INVSERV_ALMACEN_MOVIM_PLANT_CAB
			SET Status = _Status, ID_Movimiento = _ID_Movimiento
			WHERE ID_MovimPlant = _ID_MovimPlant;
		END IF;
	
		DROP TABLE _TMP_INVSERV_ALMACEN_MOVIM_DET; 

	END IF;
		
	RETURN QUERY SELECT _err, _result, _ID_MovimPlant;

END
$BODY$
  LANGUAGE 'plpgsql';

  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_invserv_alm_movs_plant_cambiar(_fecha timestamp without time zone, _id_bodega smallint, _plantilla integer, _status character, _id_concepto smallint, _concepto character varying, _reference character varying)
  RETURNS SETOF record AS
$BODY$
DECLARE  
	_err int; _result varchar(255); _mes smallint; _ano smallint; _ID_MovimPlant int;
BEGIN
	_err := 0;
	_result := (select msj4 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ALM_MOVPLANT' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCOK');--'La plantilla de almac√©n se cambi√≥ correctamente';
	_mes := date_part('month',_Fecha);
	_ano := date_part('year',_Fecha);
	_ID_MovimPlant := ( select ID_MovimPlant from TBL_INVSERV_ALMACEN_MOVIM_PLANT_CAB 
				where ID_Bodega = _ID_Bodega and Numero = _Plantilla );

	IF(select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano and Cerrado = 1) > 0
	OR (select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano) < 1
	THEN
		_err := 3;
		_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_POLIZAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'ERROR: La fecha de poliza pertenece a un periodo cerrado o inexistente'
	END IF;

	IF (select count(*) from TBL_INVSERV_ALMACEN_MOVIM_PLANT_CAB where ID_Bodega = _ID_Bodega and Numero = _Plantilla) < 1
	THEN
		_err = 3;
		_result = (select msj2 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ALM_MOVPLANT' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR');--'ERROR: La clave de la plantilla no existe, No se puede cambiar'
	END IF;
	


	IF _err = 0
	THEN	
		DELETE FROM TBL_INVSERV_ALMACEN_MOVIM_PLANT_DET
		WHERE ID_MovimPlant = _ID_MovimPlant;
			
		UPDATE TBL_INVSERV_ALMACEN_MOVIM_PLANT_CAB
		SET Fecha = _Fecha, Status = _Status, ID_Concepto = _ID_Concepto, Concepto = _Concepto, Referencia = _Reference
		WHERE ID_MovimPlant = _ID_MovimPlant;
				
		-- inserta el detalle
		INSERT INTO TBL_INVSERV_ALMACEN_MOVIM_PLANT_DET
		SELECT _ID_MovimPlant, ID_Prod, Partida, Entrada, Salida, Costo
		FROM _TMP_INVSERV_ALMACEN_MOVIM_DET;
				
	END IF;
		
	RETURN QUERY SELECT _err, _result, _ID_MovimPlant;

END
$BODY$
  LANGUAGE 'plpgsql';

  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_invserv_alm_movs_plant_cancelar(_id_movimplant integer)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255); _errpart int; _resultpart varchar(255); _nummov int;
	_Fecha timestamp; _ID_Movimiento int; _mes smallint; _ano smallint; 
BEGIN
	_err := 0;
	_result := (select msj5 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ALM_MOVPLANT' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCOK');--'La plantilla se cancel√≥ satisfactoriamente';
	_Fecha := (select Fecha from TBL_INVSERV_ALMACEN_MOVIM_PLANT_CAB where ID_MovimPlant = _ID_MovimPlant);
	_ID_Movimiento := (select ID_Movimiento from TBL_INVSERV_ALMACEN_MOVIM_PLANT_CAB where ID_MovimPlant = _ID_MovimPlant);
	
	_mes := date_part('month',_Fecha);
	_ano := date_part('year',_Fecha);
	
	IF(select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano and Cerrado = 1) > 0
	OR (select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano) < 1
	THEN
		_err := 3;
		_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_POLIZAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'ERROR: La fecha de poliza pertenece a un periodo cerrado o inexistente'
	END IF;

	 
	IF _err = 0
	THEN
		UPDATE TBL_INVSERV_ALMACEN_MOVIM_PLANT_CAB
		SET Status = 'C'
		WHERE ID_MovimPlant = _ID_MovimPlant;
		
		-- procede a cancelar los detalles de costos
		IF _ID_Movimiento is not null and _ID_Movimiento <> 0
		THEN
			SELECT * INTO _errpart, _resultpart, _nummov FROM sp_invserv_alm_movs_cancelar(_ID_Movimiento) as ( err integer, res varchar, clave integer );
			IF _errpart <> 0
			THEN
				_err := _errpart;
				_result := _resultpart;
			END IF;
		END IF;

	END IF;

	RETURN QUERY SELECT _err, _result, _ID_MovimPlant;

END
$BODY$
  LANGUAGE 'plpgsql';

--////////////////////////////////////////////////////////////////////////////////
--/////////////////// INCONCLUSA
  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_invserv_alm_movs_bod_agregar(_fecha timestamp without time zone, _id_bodega smallint, _id_bodegadest smallint, _concepto character varying, _referencia character varying, _id_requerimiento integer)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255); _errpart int; _resultpart varchar(255); _claseENT varchar(25); _claseSAL varchar(25);
	_ID_Movimiento int; _ID_MovimientoENT int; _ID_MovimientoSAL int; _AuditarAlm bit; _AuditarAlmDest bit; _Status char(1); _mes smallint; _ano smallint;
	_CC_PRODTRN char(19); _ConceptoEnt varchar(80); _ConceptoSal varchar(80); _Bodega varchar(80); _Salida int; 
BEGIN	
	_err := 0;
	_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ALM_TRASPASOS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCOK');--'El movimiento entre bodegas se registr? satisfactoriamente';
	_AuditarAlm := ( select AuditarAlm from TBL_INVSERV_BODEGAS where ID_Bodega = _ID_Bodega );
	_AuditarAlmDest := ( select AuditarAlm from TBL_INVSERV_BODEGAS where ID_Bodega = _ID_BodegaDEST );
	_Status := case when _AuditarAlm = '0' and _AuditarAlmDEST = '0' then 'E' else 'G' end;
	_Bodega := ( select Nombre from TBL_INVSERV_BODEGAS where ID_Bodega = _ID_Bodega );
	_Salida := ( select Salida from TBL_INVSERV_BODEGAS where ID_Bodega = _ID_Bodega );

	_mes := date_part('month',_Fecha);
	_ano := date_part('year',_Fecha);
	
	
	IF(select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano and Cerrado = 1) > 0
	OR (select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano) < 1
	THEN
		_err := 3;
		_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_POLIZAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'ERROR: La fecha de poliza pertenece a un periodo cerrado o inexistente'
	END IF;

	IF _AuditarAlm <> _AuditarAlmDest
	THEN
		_err := 3;
		_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ALM_TRASPASOS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR');--'ERROR: Los trazos de la bodega de origen y la de destino son distintos';
	END IF;

	IF(select CC from TBL_INVSERV_COSTOS_CONCEPTOS where ID_Concepto = 52) is null 
		or (select CC from TBL_INVSERV_COSTOS_CONCEPTOS where ID_Concepto = 100) is null
	THEN
		_err := 3;
		_result := (select msj2 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ALM_TRASPASOS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR');--'ERROR: Los conceptos de entrada o de salida (100 o 52), no se han enlazado a una cuenta contable';
	END IF;	
	
	--VERIFICA SI ES CFD
	IF (select CFD from TBL_INVSERV_BODEGAS where ID_Bodega = _ID_Bodega) = '1'
	THEN
		IF (select count(*) from TBL_CFD_REPORTE_MENSUAL where Mes = _mes and Ano = _ano and Cerrado = '0') > 0
		THEN
			IF (select count(*) from TBL_INVSERV_ALMACEN_BOD_MOV_CAB where ID_Bodega = _ID_Bodega and Salida = (_Salida -1)) is not null
			THEN
				IF (select TFD from TBL_INVSERV_ALMACEN_BOD_MOV_CAB where ID_Bodega = _ID_Bodega and Salida = (_Salida -1)) is null
						or (select TFD from TBL_INVSERV_ALMACEN_BOD_MOV_CAB where ID_Bodega = _ID_Bodega and Salida = (_Salida -1)) <> 3
				THEN
					_err := 3;
					_result := 'ERROR: No se puede agregar el traspaso porque el traspaso anterior no est&aacute; sellado. Primero debes sellar el traspaso anterior para poder agregar este traspaso';
				END IF;
			END IF;
		ELSE
			_err := 3;
			_result := 'ERROR: No se puede agregar traspaso porque el mes de comprobantes fiscales digitales ya est&aacute; reportado o no existe';
		END IF;
	END IF;

	IF _err = 0
	THEN
		INSERT INTO TBL_INVSERV_ALMACEN_BOD_MOV_CAB
		VALUES(default, _Fecha,_Fecha,_ID_Bodega,_ID_BodegaDest,_Salida,_Status,_Concepto,_Referencia,null,null)
		RETURNING currval(pg_get_serial_sequence('TBL_INVSERV_ALMACEN_BOD_MOV_CAB', 'id_movimiento')) INTO _ID_Movimiento;
		
		-- actualiza el numero de Salida
		UPDATE TBL_INVSERV_BODEGAS
		SET Salida = _Salida + 1
		WHERE ID_Bodega = _ID_Bodega;
		
		-- inserta el detalle
		INSERT INTO TBL_INVSERV_ALMACEN_BOD_MOV_DET
		SELECT _ID_Movimiento, ID_Prod, Partida, Cantidad
		FROM _TMP_INVSERV_ALMACEN_BOD_MOV_DET;
		
		IF _ID_Requerimiento is not null
		THEN
			UPDATE TBL_INVSERV_ALMACEN_BOD_REQ_CAB
			SET Status = 'N', ID_Traspaso = _ID_Movimiento
			WHERE ID_Movimiento = _ID_Requerimiento;
		END IF;

		_claseENT := 'TALM|' || cast(_ID_Movimiento as varchar) || '|' || cast(_ID_Bodega as varchar) || '||ENT';
		_claseSAL := 'TALM|' || cast(_ID_Movimiento as varchar) || '|' || cast(_ID_Bodega as varchar) || '||SAL';
		_ConceptoEnt := (select msj2 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ALM_TRASPASOS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCOK') || _Bodega || '/' || cast(_Salida as varchar);
		_ConceptoSal := (select msj3 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ALM_TRASPASOS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCOK') || _Bodega || '/' || cast(_Salida as varchar);	
		
		CREATE LOCAL TEMPORARY TABLE _TMP_INVSERV_ALMACEN_MOVIM_DET (
			ID_Bodega smallint NOT NULL ,
			ID_Prod varchar(20) NOT NULL ,
			Partida smallint NOT NULL ,
			Cantidad numeric(9, 3) NOT NULL ,
			Costo numeric(19,4) NULL 
		); 

		INSERT INTO _TMP_INVSERV_ALMACEN_MOVIM_DET
		SELECT _ID_Bodega, ID_Prod, Partida, Cantidad, null
		FROM _TMP_INVSERV_ALMACEN_BOD_MOV_DET;
		
		SELECT * INTO _errpart, _resultpart, _ID_MovimientoSAL
		FROM sp_invserv_alm_movs_agregar(_Fecha, _ID_Bodega, cast(case when _AuditarAlm = '1' then 'P' else 'U' end as char), '52', _ConceptoSAL, _Referencia, '2', _claseSAL, 'TALM', _ID_Movimiento) 
		as ( err integer, res varchar, clave integer );
			
		IF _errpart <> 0
		THEN
			_err := _errpart;
			_result := _resultpart;
		ELSE
			TRUNCATE TABLE _TMP_INVSERV_ALMACEN_MOVIM_DET;

			INSERT INTO _TMP_INVSERV_ALMACEN_MOVIM_DET
			SELECT _ID_Bodega, ID_Prod, Partida, Cantidad, null
			FROM _TMP_INVSERV_ALMACEN_BOD_MOV_DET;
		
			SELECT * INTO _errpart, _resultpart, _ID_MovimientoENT
			FROM sp_invserv_alm_movs_agregar(_Fecha, _ID_BodegaDEST, cast(case when _AuditarAlmDEST = '1' then 'G' else 'U' end as char), '100', _ConceptoENT, _Referencia, '1', _claseENT, 'TALM', _ID_Movimiento) 
			as ( err integer, res varchar, clave integer );
			
			IF _errpart <> 0
			THEN
				_err := _errpart;
				_result := _resultpart;
			END IF;
		END IF;
	
		DROP TABLE _TMP_INVSERV_ALMACEN_MOVIM_DET; 

		
	END IF;

	RETURN QUERY SELECT _err, _result, _id_movimiento;

END
$BODY$
  LANGUAGE 'plpgsql';

  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_invserv_alm_movs_bod_cancelar(_id_movimiento integer)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_Status char(1); _Fecha timestamp; _err int; _result varchar(255); _errpart int; _resultpart varchar(255); 
	_ID_MovimientoENT int; _ID_MovimientoSAL int; _ID_Bodega smallint; _ID_BodegaDEST smallint; _AuditarAlm bit; _AuditarAlmDest bit; _RefENT varchar(25); _RefSAL varchar(25); 
	_mes smallint; _ano smallint; _ID_Requerimiento int; _ID_CFD int; _TFD smallint; _EntCFD bit(2); _nummov int; _ID_CFDRES int;
BEGIN
	_err := 0;
	_result := (select msj4 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ALM_TRASPASOS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCOK');--'El movimiento entre bodegas se cancel√≥ satisfactoriamente';
	_Fecha := (select Fecha from TBL_INVSERV_ALMACEN_BOD_MOV_CAB where ID_Movimiento = _ID_Movimiento);
	_ID_Bodega := (select ID_Bodega from TBL_INVSERV_ALMACEN_BOD_MOV_CAB where ID_Movimiento = _ID_Movimiento);
	_ID_BodegaDEST := (select ID_BodegaDEST from TBL_INVSERV_ALMACEN_BOD_MOV_CAB where ID_Movimiento = _ID_Movimiento);
	_AuditarAlm := ( select AuditarAlm from TBL_INVSERV_BODEGAS where ID_Bodega = _ID_Bodega );
	_AuditarAlmDest := ( select AuditarAlm from TBL_INVSERV_BODEGAS where ID_Bodega = _ID_BodegaDEST );
	_RefENT := 'TALM|' || cast(_ID_Movimiento as varchar) || '|' || cast(_ID_Bodega as varchar) || '||ENT';
	_RefSAL := 'TALM|' || cast(_ID_Movimiento as varchar) || '|' || cast(_ID_Bodega as varchar) || '||SAL';
	_ID_MovimientoENT := (select ID_Movimiento from TBL_INVSERV_ALMACEN_MOVIM_CAB where Ref = _RefENT);
	_ID_MovimientoSAL := (select ID_Movimiento from TBL_INVSERV_ALMACEN_MOVIM_CAB where Ref = _RefSAL);
	_ID_Requerimiento := (select ID_Movimiento from TBL_INVSERV_ALMACEN_BOD_REQ_CAB where ID_Traspaso = _ID_Movimiento);
	_ID_CFD := (select ID_CFD from TBL_INVSERV_ALMACEN_BOD_MOV_CAB WHERE ID_Movimiento = _ID_Movimiento);
	_TFD := (select TFD from TBL_INVSERV_ALMACEN_BOD_MOV_CAB WHERE ID_Movimiento = _ID_Movimiento);
	_EntCFD = ( select CFD from TBL_INVSERV_BODEGAS where ID_Bodega = _ID_Bodega );

	_mes := date_part('month',_Fecha);
	_ano := date_part('year',_Fecha);
	
	
	IF(select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano and Cerrado = 1) > 0
	OR (select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano) < 1
	THEN
		_err := 3;
		_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_POLIZAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'ERROR: La fecha de poliza pertenece a un periodo cerrado o inexistente'
	END IF;

	IF _AuditarAlm <> _AuditarAlmDest
	THEN
		_err := 3;
		_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ALM_TRASPASOS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR');--'ERROR: Los trazos de la bodega de origen y la de destino son distintos';
	END IF;
	 
	IF( _TFD = '1' or _TFD = '2' )
	THEN
		_err := 3;
		_result := 'ERROR: El traspaso no esta sellado completamente, puede que falte generar el PDF de la carta porte. Generalo para poderlo cancelar';	
	END IF;

	IF _err = 0
	THEN
		UPDATE TBL_INVSERV_ALMACEN_BOD_MOV_CAB
		SET Status = 'C'
		WHERE ID_Movimiento = _ID_Movimiento;
		
		-- procede a cancelar el CFD
		IF _ID_CFD is not null
		THEN
			select * into _errpart, _resultpart, _id_cfdres from sp_cfd_cancelar(_ID_CFD) as (err int,  resultpart varchar, clave int);
			IF _errpart <> 0
			THEN
				_err := 3;
				_result := _resultpart;
			ELSE
				UPDATE TBL_INVSERV_ALMACEN_BOD_MOV_CAB
				SET TFD = 3
				WHERE ID_Movimiento = _ID_Movimiento;
			END IF;
		ELSIF _EntCFD <> '00'
		THEN
			UPDATE TBL_INVSERV_ALMACEN_BOD_MOV_CAB
			SET TFD = 3
			WHERE ID_Movimiento = _ID_Movimiento;
		END IF;
		-- FIN CFD
		
		-- procede a cancelar los movimientos al almacen
		IF _ID_MovimientoSAL is not null and _ID_MovimientoSAL <> 0
		THEN
			SELECT * INTO _errpart, _resultpart, _nummov FROM sp_invserv_alm_movs_cancelar(_ID_MovimientoSAL) as ( err integer, res varchar, clave integer );
			IF _errpart <> 0
			THEN
				_err := _errpart;
				_result := _resultpart;
			END IF;
		END IF;

		IF _ID_MovimientoENT is not null and _ID_MovimientoENT <> 0
		THEN
			SELECT * INTO _errpart, _resultpart, _nummov FROM sp_invserv_alm_movs_cancelar(_ID_MovimientoENT) as ( err integer, res varchar, clave integer );
			IF _errpart <> 0
			THEN
				_err := _errpart;
				_result := _resultpart;
			END IF;
		END IF;
	
		-- procede a cancelar el requerimiento asociado ( SI LO HAY PARA ESTE TRASPASO )
		IF _ID_Requerimiento is not null
		THEN
			UPDATE TBL_INVSERV_ALMACEN_BOD_REQ_CAB
			SET Status = 'G', ID_Traspaso = 0
			WHERE ID_Movimiento = _ID_Requerimiento;
	
		END IF;

	END IF;

	RETURN QUERY SELECT _err, _result, _ID_Movimiento;

END
$BODY$
  LANGUAGE plpgsql;

  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_invserv_alm_movs_req_agregar(_fecha timestamp without time zone, _id_bodega smallint, _id_bodegadest smallint, _concepto character varying, _referencia character varying)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_ID_Movimiento int; _err int; _result varchar(255); _mes smallint; _ano smallint; _AuditarAlm bit; _AuditarAlmDest bit; _Requerimiento int;
BEGIN
	_err := 0;
	_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ALM_REQUERIMIENTOS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCOK');--'El requerimiento entre bodegas se registr√≥ satisfactoriamente';
	_AuditarAlm := ( select AuditarAlm from TBL_INVSERV_BODEGAS where ID_Bodega = _ID_Bodega );
	_AuditarAlmDest := ( select AuditarAlm from TBL_INVSERV_BODEGAS where ID_Bodega = _ID_BodegaDEST );
	_Requerimiento := ( select Requerimiento from TBL_INVSERV_BODEGAS where ID_Bodega = _ID_Bodega );

	_mes := date_part('month',_Fecha);
	_ano := date_part('year',_Fecha);
	
	IF(select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano and Cerrado = 1) > 0
	OR (select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano) < 1
	THEN
		_err := 3;
		_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_POLIZAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'ERROR: La fecha de poliza pertenece a un periodo cerrado o inexistente'
	END IF;

	IF _AuditarAlm <> _AuditarAlmDest
	THEN
		_err := 3;
		_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ALM_TRASPASOS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR');--'ERROR: Los trazos de la bodega de origen y la de destino son distintos';
	END IF;

	IF _err = 0
	THEN
		INSERT INTO TBL_INVSERV_ALMACEN_BOD_REQ_CAB
		VALUES(default,_Fecha,_Fecha,_ID_Bodega,_ID_BodegaDest,_Requerimiento,'G',_Concepto,_Referencia,0)
		RETURNING currval(pg_get_serial_sequence('TBL_INVSERV_ALMACEN_BOD_REQ_CAB', 'id_movimiento')) INTO _ID_Movimiento;
		

		-- actualiza el numero de Salida
		UPDATE TBL_INVSERV_BODEGAS
		SET Requerimiento = _Requerimiento + 1
		WHERE ID_Bodega = _ID_Bodega;
		
		-- inserta el detalle
		INSERT INTO TBL_INVSERV_ALMACEN_BOD_REQ_DET
		SELECT _ID_Movimiento, ID_Prod, Partida, Cantidad
		FROM _TMP_INVSERV_ALMACEN_BOD_MOV_DET;
		
			
	END IF;

	RETURN QUERY SELECT _err, _result, _id_movimiento;

END
$BODY$
  LANGUAGE 'plpgsql';

  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_invserv_alm_movs_req_cambiar(_fecha timestamp without time zone, _id_bodega smallint, _id_bodegadest smallint, _requerimiento integer, _concepto character varying, _referencia character varying)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_ID_Movimiento int; _err int; _result varchar(255); _mes smallint; _ano smallint; _AuditarAlm bit; _AuditarAlmDest bit;
BEGIN
	_err := 0;
	_result := (select msj2 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ALM_REQUERIMIENTOS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCOK');--'El requerimiento entre bodegas se cambi√≥ satisfactoriamente';
	_AuditarAlm := ( select AuditarAlm from TBL_INVSERV_BODEGAS where ID_Bodega = _ID_Bodega );
	_AuditarAlmDest := ( select AuditarAlm from TBL_INVSERV_BODEGAS where ID_Bodega = _ID_BodegaDEST );
	
	_mes := date_part('month',_Fecha);
	_ano := date_part('year',_Fecha);

	_ID_Movimiento := ( select ID_Movimiento from TBL_INVSERV_ALMACEN_BOD_REQ_CAB where ID_Bodega = _ID_Bodega and Requerimiento = _Requerimiento );
	
	IF (select count(*) from TBL_INVSERV_ALMACEN_BOD_REQ_CAB where ID_Bodega = _ID_Bodega and Requerimiento = _Requerimiento) < 1
	THEN
		_err := 3;
		_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ALM_REQUERIMIENTOS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'ERROR: El numero de requeimiento en esta bodega No existe, No se puede cambiar el requerimiento';
	END IF;
		
	IF(select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano and Cerrado = 1) > 0
	OR (select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano) < 1
	THEN
		_err := 3;
		_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_POLIZAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'ERROR: La fecha de poliza pertenece a un periodo cerrado o inexistente'
	END IF;

	IF _AuditarAlm <> _AuditarAlmDest
	THEN
		_err := 3;
		_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ALM_TRASPASOS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR');--'ERROR: Los trazos de la bodega de origen y la de destino son distintos';
	END IF;

	IF _err = 0
	THEN
		DELETE FROM TBL_INVSERV_ALMACEN_BOD_REQ_DET
		WHERE ID_Movimiento = _ID_Movimiento;
		
		UPDATE TBL_INVSERV_ALMACEN_BOD_REQ_CAB
		SET Fecha = _Fecha, FechaEntrega = _Fecha, ID_Bodega = _ID_Bodega, 
				ID_BodegaDest = _ID_BodegaDest, Concepto = _Concepto, Referencia = _Referencia
		WHERE ID_Movimiento = _ID_Movimiento;
			
		-- inserta el detalle
		INSERT INTO TBL_INVSERV_ALMACEN_BOD_REQ_DET
		SELECT _ID_Movimiento, ID_Prod, Partida, Cantidad
		FROM _TMP_INVSERV_ALMACEN_BOD_MOV_DET;

	END IF;

	RETURN QUERY SELECT _err, _result, _id_movimiento;

END
$BODY$
  LANGUAGE 'plpgsql';

  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_invserv_alm_movs_req_cancelar(_id_movimiento integer)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255); _mes smallint; _ano smallint; _Fecha timestamp;
BEGIN
	_err := 0;
	_result := (select msj3 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ALM_REQUERIMIENTOS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCOK');--'El requerimiento entre bodegas se cancel√≥ satisfactoriamente';
	_Fecha := ( select Fecha from TBL_INVSERV_ALMACEN_BOD_REQ_CAB where ID_Movimiento = _ID_Movimiento );
	_mes := date_part('month',_Fecha);
	_ano := date_part('year',_Fecha);

	
	IF(select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano and Cerrado = 1) > 0
		OR (select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano) < 1
	THEN
		_err := 3;
		_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_POLIZAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'ERROR: La fecha de poliza pertenece a un periodo cerrado o inexistente'
	END IF;

	IF _err = 0
	THEN
		UPDATE TBL_INVSERV_ALMACEN_BOD_REQ_CAB
		SET Status = 'C'
		WHERE ID_Movimiento = _ID_Movimiento;

	END IF;

	RETURN QUERY SELECT _err, _result, _id_movimiento;

END
$BODY$
  LANGUAGE 'plpgsql';

  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_invserv_alm_chfis_agregar(_id_bodega smallint, _fecha timestamp without time zone)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255); _ID_CHFIS int; _NumChFis int; _mes smallint; _ano smallint;
BEGIN	
	_err := 0;
	_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ALM_CHFIS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCOK');--'El chequeo f√≠sico se agreg√≥ satisfactoriamente';
	_NumChFis := (SELECT NumChFis FROM TBL_INVSERV_BODEGAS WHERE ID_Bodega = _ID_Bodega);
	_mes := date_part('month',_Fecha);
	_ano := date_part('year',_Fecha);

	IF(select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano and Cerrado = 1) > 0
	OR (select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano) < 1
	THEN
		_err := 3;
		_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_POLIZAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'ERROR: La fecha de poliza pertenece a un periodo cerrado o inexistente'
	END IF;

	IF( select count(*) from TBL_INVSERV_CHFIS_CAB where ID_Bodega = _ID_Bodega and Fecha = _Fecha and Status <> 'C') > 0
	THEN
		_err := 3;
		_result := (select msj2 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ALM_CHFIS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR');--'ERROR: El chequeo f√≠sico en esta bodega y con esta fecha ya existe, no se puede duplicar';
	END IF;
 
	IF _err = 0
	THEN
		INSERT INTO TBL_INVSERV_CHFIS_CAB
		VALUES(default, _Fecha, _ID_Bodega, '0', '0', 'G', _NumChFis)
		RETURNING currval(pg_get_serial_sequence('TBL_INVSERV_CHFIS_CAB', 'id_chfis')) INTO _ID_CHFIS;
		
		UPDATE TBL_INVSERV_BODEGAS
		SET NumChFis = _NumChFis + 1
		WHERE ID_Bodega = _ID_Bodega;						
		
		INSERT INTO TBL_INVSERV_CHFIS_DET
		SELECT _ID_CHFIS, ID_Prod, Existencia, null
		FROM _TMP_INVSERV_EXISTENCIAS;
		
	END IF;
		
	RETURN QUERY SELECT _err, _result, _ID_CHFIS;

END
$BODY$
  LANGUAGE 'plpgsql';

  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_invserv_alm_chfis_cambiar(_id_chfis integer, _id_bodega smallint, _fecha timestamp without time zone)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255); _mes smallint; _ano smallint;
BEGIN	
	_err := 0;
	_result := (select msj2 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ALM_CHFIS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCOK');--El chequeo f√≠sico se cambi√≥ satisfactoriamente';
	_mes := date_part('month',_Fecha);
	_ano := date_part('year',_Fecha);

	IF(select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano and Cerrado = 1) > 0
	OR (select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano) < 1
	THEN
		_err := 3;
		_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_POLIZAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'ERROR: La fecha de poliza pertenece a un periodo cerrado o inexistente'
	END IF;

	IF( select count(*) from TBL_INVSERV_CHFIS_CAB where ID_CHFIS = _ID_CHFIS) < 1
	THEN
		_err := 3;
		_result := (select msj3 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ALM_CHFIS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'ERROR: Este chequeo f√≠sico en esta bodega no existe, no se puede cambiar';
	END IF;

	IF( select count(*) from TBL_INVSERV_CHFIS_CAB where ID_Bodega = _ID_Bodega and Fecha = _Fecha and Status <> 'C' and ID_CHFIS <> _ID_CHFIS) > 0
	THEN
		_err := 3;
		_result := (select msj2 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ALM_CHFIS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'ERROR: Un chequeo f√≠sico diferente a este, en esta bodega y con esta fecha sin cancelar ya existe, no se puede cambiar';
	END IF;
	
	IF _err = 0
	THEN
		UPDATE TBL_INVSERV_CHFIS_CAB
		SET Fecha = _Fecha
		WHERE ID_CHFIS = _ID_CHFIS;
		
		DELETE FROM TBL_INVSERV_CHFIS_DET
		WHERE ID_CHFIS = _ID_CHFIS;
		
		INSERT INTO TBL_INVSERV_CHFIS_DET
		SELECT _ID_CHFIS, ID_Prod, Existencia, null
		FROM _TMP_INVSERV_EXISTENCIAS;
				
	END IF;
		
	RETURN QUERY SELECT _err, _result, _ID_CHFIS;

END
$BODY$
  LANGUAGE 'plpgsql';

  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_invserv_alm_chfis_cancelar(_id_chfis integer)
  RETURNS SETOF record AS
$BODY$
DECLARE
	_err int; _result varchar(255); _Fecha timestamp; _mes smallint; _ano smallint; _errpart int; _resultpart varchar(255); 
	_ID_MovimientoENT int; _ID_Bodega smallint; _ID_MovimientoSAL int; _RefENT varchar(25); _RefSAL varchar(25); _nummov int;
BEGIN
	_err := 0;
	_result := (select msj3 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ALM_CHFIS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCOK');--'El chequeo f√≠sico se cancel√≥ satisfactoriamente.';
	_Fecha := (select Fecha from TBL_INVSERV_CHFIS_CAB where ID_CHFIS = _ID_CHFIS);
	_ID_Bodega := (select ID_Bodega from TBL_INVSERV_CHFIS_CAB where ID_CHFIS = _ID_CHFIS);
	_RefENT := 'CHFI|' || cast(_ID_CHFIS as varchar) || '|' || cast(_ID_Bodega as varchar) || '||ENT'; 
	_RefSAL := 'CHFI|' || cast(_ID_CHFIS as varchar) || '|' || cast(_ID_Bodega as varchar) || '||SAL';
	_ID_MovimientoENT := (select ID_Movimiento from TBL_INVSERV_ALMACEN_MOVIM_CAB where Ref = _RefENT);
	_ID_MovimientoSAL := (select ID_Movimiento from TBL_INVSERV_ALMACEN_MOVIM_CAB where Ref = _RefSAL);
	_mes := date_part('month',_Fecha);
	_ano := date_part('year',_Fecha);
	
	IF( select count(*) from TBL_INVSERV_CHFIS_CAB where ID_CHFIS = _ID_CHFIS) < 1
	THEN
		_err := 3;
		_result := (select msj3 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ALM_CHFIS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR');--'ERROR: Este chequeo f√≠sico en esta bodega no existe, no se puede cancelar';
	END IF;

	IF(select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano and Cerrado = 1) > 0
	OR (select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano) < 1
	THEN
		_err := 3;
		_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_POLIZAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'ERROR: La fecha de poliza pertenece a un periodo cerrado o inexistente'
	END IF;

	IF _err = 0
	THEN
		UPDATE TBL_INVSERV_CHFIS_CAB
		SET Status = 'C'
		WHERE ID_CHFIS = _ID_CHFIS;
		
		IF _ID_MovimientoSAL is not null and _ID_MovimientoSAL <> 0
		THEN
			SELECT * INTO _errpart, _resultpart, _nummov FROM sp_invserv_alm_movs_cancelar(_ID_MovimientoSAL) as ( err integer, res varchar, clave integer );
			IF _errpart <> 0
			THEN
				_err := _errpart;
				_result := _resultpart;
			END IF;
		END IF;

		IF _ID_MovimientoENT is not null and _ID_MovimientoENT <> 0
		THEN
			SELECT * INTO _errpart, _resultpart, _nummov FROM sp_invserv_alm_movs_cancelar(_ID_MovimientoENT) as ( err integer, res varchar, clave integer );
			IF _errpart <> 0
			THEN
				_err := _errpart;
				_result := _resultpart;
			END IF;
		END IF;
				
	END IF;
		
	RETURN QUERY SELECT _err, _result, _ID_CHFIS;

END
$BODY$
  LANGUAGE 'plpgsql';

  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_invserv_alm_chfis_cerrar(_id_chfis integer)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255); _Cerrado bit; _Generado bit;
BEGIN
	_err := 0;
	_result := (select msj4 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ALM_CHFIS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCOK');--'El chequeo f√≠sico se cerr√≥ o re-abri√≥ satisfactoriamente';
	_Cerrado := ( select Cerrado from TBL_INVSERV_CHFIS_CAB where ID_CHFIS = _ID_CHFIS );
	_Generado := ( select Generado from TBL_INVSERV_CHFIS_CAB where ID_CHFIS = _ID_CHFIS );
	
	
	IF( select count(*) from TBL_INVSERV_CHFIS_CAB where ID_CHFIS = _ID_CHFIS) < 1
	THEN
		_err := 3;
		_result := (select msj3 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ALM_CHFIS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR');--'ERROR: Este chequeo f√≠sico en esta bodega no existe, no se puede cerrar o re-abrir';
	END IF;

	IF( _Generado = '1')
	THEN
		_err := 3;
		_result := (select msj5 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ALM_CHFIS' and m.sub::text = 'DLG' and m.elm::text = 'MSJ-PROCERR');--'ERROR: El chequeo ya est? generado, no se puede volver a cerrar o abrir';
	END IF; 

	IF _err = 0
	THEN
		IF _Cerrado = '1'	
		THEN
			UPDATE TBL_INVSERV_CHFIS_CAB
			SET Cerrado = '0'
			WHERE ID_CHFIS = _ID_CHFIS;
		ELSE
			UPDATE TBL_INVSERV_CHFIS_CAB
			SET Cerrado = '1'
			WHERE ID_CHFIS = _ID_CHFIS;
		END IF;
	END IF;

	RETURN QUERY SELECT _err, _result, _ID_CHFIS;

END
$BODY$
  LANGUAGE 'plpgsql';

  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_invserv_alm_chfis_diferencias(_id_chfis integer)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255); _Cerrado bit; _Generado bit; _Fecha timestamp; 
	_ID_Bodega smallint; _Mes2 smallint; _Ano2 smallint;
	-- DEL CALCULO
	_FechaDesdeChar varchar(15); _FechaDesde timestamp; _FechaHastaChar varchar(15); _FechaHasta timestamp; _Numero integer; _Concepto varchar(40);
BEGIN
	_err := 0;
	_result := (select msj5 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ALM_CHFIS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCOK');--'El chequeo se ha calculado satisfact√≥riamente';
	_Cerrado := ( select Cerrado from TBL_INVSERV_CHFIS_CAB where ID_CHFIS = _ID_CHFIS );
	_Generado := ( select Generado from TBL_INVSERV_CHFIS_CAB where ID_CHFIS = _ID_CHFIS );
	_Fecha := ( select Fecha from TBL_INVSERV_CHFIS_CAB where ID_CHFIS = _ID_CHFIS );
	_ID_Bodega := ( select ID_Bodega from TBL_INVSERV_CHFIS_CAB where ID_CHFIS = _ID_CHFIS );
	_Mes2 := ( select Mes from TBL_CONT_CATALOGO_PERIODOS where Cerrado = 1 order by Ano desc, Mes desc limit 1 );
	_Ano2 := ( select Ano from TBL_CONT_CATALOGO_PERIODOS where Cerrado = 1 order by Ano desc, Mes desc limit 1 );
	IF _Mes2 = 13
	THEN
		_Mes2 = 12;
	END IF;

	IF _Mes2 is null OR _Ano2 is null
	THEN
		_err := 3;
		_result := (select msj3 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_POLIZAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR');--'ERROR: No existen periodos cerrados aun';
	END IF;

	IF( select count(*) from TBL_INVSERV_CHFIS_DET where ID_CHFIS = _ID_CHFIS) < 1
	THEN
		_err := 3;
		_result := (select msj3 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ALM_CHFIS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR');--'ERROR: El chequeo no existe, no se puede calcular';
	END IF;

 	IF( _Generado = '1')
	THEN
		_err := 3;
		_result := (select msj5 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ALM_CHFIS' and m.sub::text = 'DLG' and m.elm::text = 'MSJ-PROCERR');--'ERROR: El chequeo ya est√° generado, no se puede calcular';
	END IF; 

	IF(	select Count(*) from TBL_INVSERV_ALMACEN_MOVIM_CAB
		where ID_Bodega = _ID_Bodega and Fecha <= _Fecha 
			and ( Status = 'G' or Status = 'P' or Status = 'R' ) ) > 0
	THEN
		_err := 3;
		_result := (select msj4 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ALM_CHFIS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR');--'ERROR: Existen movimientos en el periodo que no se han auditado, No se puede calcular el chequeo';
	END IF;

	IF _err = 0
	THEN
		-- AQUI GENERA EL CHEQUEO FISICO 
		-- PRIMERO, CALCULA LAS CANTIDADES Y LAS DEPOSITA EN UNA TABLA TEMPORAL
		
		
		_FechaHasta := _Fecha;

		_FechaDesdeChar := '01-' || _Mes2::text || '-' || _Ano2::text;
		_FechaDesde := to_date(_FechaDesdeChar, 'DD-MM-YYYY');
		_FechaDesde := _FechaDesde + interval '1 month'; --DateAdd(month, 1, @FechaDesde)
 
		--RAISE NOTICE 'DESDE: % HASTA: %', _FechaDesde::text, _FechaHasta::text;

		--select convert(varchar, @FechaDesde, 6) as FD, convert(varchar, @FechaHasta, 6) as FH
		UPDATE TBL_INVSERV_CHFIS_DET 
		SET Diff = det.Cantidad - ((	select e.ExistenciaFin 
						from TBL_INVSERV_EXISTENCIAS_PERIODOS e 
						where e.ID_Prod = det.ID_Prod and e.ID_Bodega = _ID_Bodega and e.Mes = _Mes2 and e.Ano = _Ano2 )
					+ 
						case 	when(	select sum(c.Entrada) - sum(c.Salida)
								from TBL_INVSERV_COSTOS_DETALLE c 
									INNER JOIN TBL_INVSERV_ALMACEN_MOVIM_CAB m ON
										m.ID_Movimiento = c.ID_Movimiento
								where  c.Fecha >= _FechaDesde and c.Fecha <= _FechaHasta and c.Status <> 'C' and c.ID_Prod = det.ID_Prod and m.ID_Bodega = _ID_Bodega ) is null
						then 0.000
						else 
							(	select sum(c.Entrada) - sum(c.Salida)
								from TBL_INVSERV_COSTOS_DETALLE c 
									INNER JOIN TBL_INVSERV_ALMACEN_MOVIM_CAB m ON
										m.ID_Movimiento = c.ID_Movimiento
								where  c.Fecha >= _FechaDesde and c.Fecha <= _FechaHasta and c.Status <> 'C' and c.ID_Prod = det.ID_Prod and m.ID_Bodega = _ID_Bodega )
						end )
								 
		from TBL_INVSERV_CHFIS_DET det
		where TBL_INVSERV_CHFIS_DET.ID_CHFIS = _ID_CHFIS and det.ID_CHFIS = _ID_CHFIS and TBL_INVSERV_CHFIS_DET.ID_Prod = det.ID_Prod; 

	END IF;

	RETURN QUERY SELECT _err, _result, _ID_CHFIS;

END
$BODY$
  LANGUAGE 'plpgsql';

  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_invserv_alm_chfis_eliminar(_id_chfis integer)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255); _Cerrado bit; _Generado bit;
BEGIN
	_err := 0;
	_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ALM_CHFIS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCOK2');--'El chequeo f√≠sico se elimin√≥ satisfactoriamente';
	_Cerrado := ( select Cerrado from TBL_INVSERV_CHFIS_CAB where ID_CHFIS = _ID_CHFIS );
	_Generado := ( select Generado from TBL_INVSERV_CHFIS_CAB where ID_CHFIS = _ID_CHFIS );
	
	
	IF( select count(*) from TBL_INVSERV_CHFIS_CAB where ID_CHFIS = _ID_CHFIS) < 1
	THEN
		_err := 3;
		_result := (select msj3 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ALM_CHFIS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR');--'ERROR: Este chequeo f√≠sico en esta bodega no existe, no se puede eliminar';
	END IF;

	IF( _Cerrado = '1' or _Generado = '1')
	THEN
		_err := 3;
		_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ALM_CHFIS' and m.sub::text = 'DLG' and m.elm::text = 'MSJ-PROCERR');--'ERROR: El chequeo ya est√° cerrado √≥ generado, no se puede eliminar';
	END IF;
 
	IF _err = 0
	THEN
		DELETE FROM TBL_INVSERV_CHFIS_CAB
		WHERE ID_CHFIS = _ID_CHFIS;
	END IF;

	RETURN QUERY SELECT _err, _result, _ID_CHFIS;

END
$BODY$
  LANGUAGE 'plpgsql';

  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_invserv_alm_chfis_generar(_id_chfis integer)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _errpart int; _result varchar(255); _resultpart varchar(255); _Mes2 smallint; _Ano2 smallint; 
	_Fecha timestamp; _ID_Bodega smallint; _Cerrado bit; _Generado bit; _ReferENT varchar(25); _ReferSAL varchar(25);
	
	_ID_Movimiento integer;
	_FechaDesdeChar varchar(15); _FechaDesde timestamp; _FechaHastaChar varchar(15); _FechaHasta timestamp; _Numero integer; _Concepto varchar(40);

BEGIN
	_err := 0;
	_result := (select msj2 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ALM_CHFIS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCOK2');--'El chequeo se gener√≥ satisfactoriamente';
	_Cerrado := ( select Cerrado from TBL_INVSERV_CHFIS_CAB where ID_CHFIS = _ID_CHFIS );
	_Generado := ( select Generado from TBL_INVSERV_CHFIS_CAB where ID_CHFIS = _ID_CHFIS );
	_Fecha := ( select Fecha from TBL_INVSERV_CHFIS_CAB where ID_CHFIS = _ID_CHFIS );
	_ID_Bodega := ( select ID_Bodega from TBL_INVSERV_CHFIS_CAB where ID_CHFIS = _ID_CHFIS );
	_ReferENT := 'CHFI|' || cast(_ID_CHFIS as varchar) || '|' || cast(_ID_Bodega as varchar) || '||' || 'ENT'; 
	_ReferSAL := 'CHFI|' || cast(_ID_CHFIS as varchar) || '|' || cast(_ID_Bodega as varchar) || '||' || 'SAL';
	_Numero := ( select Numero from TBL_INVSERV_BODEGAS where ID_Bodega = _ID_Bodega );
	_Concepto := (select msj3 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ALM_CHFIS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCOK2');--'Generaci√≥n AUTO CHFIS DE MENOS'; 
	_Mes2 := ( select Mes from TBL_CONT_CATALOGO_PERIODOS where Cerrado = 1 order by Ano desc, Mes desc limit 1 );
	_Ano2 := ( select Ano from TBL_CONT_CATALOGO_PERIODOS where Cerrado = 1 order by Ano desc, Mes desc limit 1 );
	IF _Mes2 = 13
	THEN
		_Mes2 = 12;
	END IF;

	IF _Mes2 is null OR _Ano2 is null
	THEN
		_err := 3;
		_result := (select msj3 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_POLIZAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR');--'ERROR: No existen periodos cerrados aun';
	END IF;

	IF( select count(*) from TBL_INVSERV_CHFIS_CAB where ID_CHFIS = _ID_CHFIS) < 1
	THEN
		_err := 3;
		_result := (select msj3 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ALM_CHFIS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR');--'ERROR: El chequeo no existe, no se puede generar';
	END IF;

 	IF( _Cerrado = '0' OR _Generado = '1')
	THEN
		_err := 3;
		_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ALM_CHFIS' and m.sub::text = 'DLG' and m.elm::text = 'MSJ-PROCERR2');--'ERROR: El chequeo aun no esta cerrado, no se puede generar';
	END IF;

 	IF(select count(*) from TBL_INVSERV_CHFIS_CAB where ID_Bodega = _ID_Bodega and Fecha >= _Fecha and Generado = '1' and Status <> 'C') > 0
	THEN
		_err := 3;
		_result := (select msj2 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ALM_CHFIS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'ERROR: Ya existen chequeos f√≠sicos generados con esta fecha o posterior. No se puede generar este chequeo hasta que se cancelen los chequeos de esta bodega con la misma fecha o posteriores. ';
	END IF;

	IF(select Count(*) from TBL_INVSERV_ALMACEN_MOVIM_CAB
		where ID_Bodega = _ID_Bodega and Fecha <= _Fecha and ( Status = 'G' or Status = 'P' or Status = 'R' ) ) > 0
	THEN
		_err := 3;
		_result := (select msj4 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ALM_CHFIS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'ERROR: Existen movimientos en el periodo que no se han auditado, No se puede generar el chequeo';
	END IF;

	IF _err = 0
	THEN
		-- AQUI GENERA EL CHEQUEO FISICO 
		-- PRIMERO, CALCULA LAS CANTIDADES Y LAS DEPOSITA EN UNA TABLA TEMPORAL
		_FechaHasta := _Fecha;

		_FechaDesdeChar := '01-' || _Mes2::text || '-' || _Ano2::text;
		_FechaDesde := to_date(_FechaDesdeChar, 'DD-MM-YYYY');
		_FechaDesde := _FechaDesde + interval '1 month'; --DateAdd(month, 1, @FechaDesde)
 
		--RAISE NOTICE 'DESDE: % HASTA: %', _FechaDesde::text, _FechaHasta::text;

 
		--GENERA LAS DIFERENCIAS, Y LAS GUARDA EN EL CHEQUEO
		UPDATE TBL_INVSERV_CHFIS_CAB
		set Generado = '1', Status = 'E'
		WHERE ID_CHFIS = _ID_CHFIS;
		
		UPDATE TBL_INVSERV_CHFIS_DET 
		SET Diff = det.Cantidad - ((	select e.ExistenciaFin 
						from TBL_INVSERV_EXISTENCIAS_PERIODOS e 
						where e.ID_Prod = det.ID_Prod and e.ID_Bodega = _ID_Bodega and e.Mes = _Mes2 and e.Ano = _Ano2 )
					+ 
						case 	when(	select sum(c.Entrada) - sum(c.Salida)
								from TBL_INVSERV_COSTOS_DETALLE c 
									INNER JOIN TBL_INVSERV_ALMACEN_MOVIM_CAB m ON
										m.ID_Movimiento = c.ID_Movimiento
								where  c.Fecha >= _FechaDesde and c.Fecha <= _FechaHasta and c.Status <> 'C' and c.ID_Prod = det.ID_Prod and m.ID_Bodega = _ID_Bodega ) is null
						then 0.000
						else 
							(	select sum(c.Entrada) - sum(c.Salida)
								from TBL_INVSERV_COSTOS_DETALLE c 
									INNER JOIN TBL_INVSERV_ALMACEN_MOVIM_CAB m ON
										m.ID_Movimiento = c.ID_Movimiento
								where  c.Fecha >= _FechaDesde and c.Fecha <= _FechaHasta and c.Status <> 'C' and c.ID_Prod = det.ID_Prod and m.ID_Bodega = _ID_Bodega )
						end )
								 
		FROM TBL_INVSERV_CHFIS_DET det
		WHERE TBL_INVSERV_CHFIS_DET.ID_CHFIS = _ID_CHFIS and det.ID_CHFIS = _ID_CHFIS and TBL_INVSERV_CHFIS_DET.ID_Prod = det.ID_Prod; 

		-- UNA VEZ GUARDADAS LAS DIFERENCIAS, CREAMOS LAS DIFERENCIAS CON EL CHEQUEO FISICO ACTUAL YA CERRADO
		-- NOTA: CUANDO NO EXISTEN DIFERENCIAS NO INSERTA EL PRODUCTO, NI CUANDO EL PRODUCTO NO ESTA EN EL CHEQUEO FISICO POR EJEMPLO:
		-- SI EL PRDUCTO XX TIENE -3, Y EN EL CHEQUEO NO EXISTE, NO INSERTA NADA Y SE QUEDARA EN EXISTENCIAS DE -3. POR EL CONTRARIO SI SE APLICA 0 EN
		-- EL CHEQUEO FISICO, INSERTARA +3 EN EL CHEQUEO DE MAS
		CREATE LOCAL TEMPORARY TABLE _TMP_INVSERV_ALMACEN_MOVIM_DET (
			ID_Bodega smallint NOT NULL ,
			ID_Prod varchar(20) NOT NULL ,
			Partida serial NOT NULL ,
			Cantidad numeric(9, 3) NOT NULL ,
			Costo numeric(19,4) NULL 
		); 

		INSERT INTO _TMP_INVSERV_ALMACEN_MOVIM_DET(ID_Bodega, ID_Prod, Cantidad, Costo)
		SELECT _ID_Bodega, e.ID_Prod, ABS(e.Diff), c.CostoPromedio
		FROM TBL_INVSERV_CHFIS_DET  e INNER JOIN TBL_INVSERV_INVENTARIOS c ON
			c.ID_Prod = e.ID_Prod 
		WHERE e.ID_CHFIS = _ID_CHFIS and e.Diff < 0.000;
		
		SELECT * INTO _errpart, _resultpart, _ID_Movimiento 
		FROM sp_invserv_alm_movs_agregar(_Fecha, _ID_Bodega, 'U', '199', _Concepto, '', '2', _ReferSAL, 'CHFI', _ID_CHFIS) 
			as ( err integer, res varchar, clave integer );
		IF _errpart <> 0
		THEN
			_err := _errpart;
			_result := _resultpart;
		ELSE -- Si no hay errores, inserta el movimiento de entrada
			_Numero := _Numero + 1;
			_Concepto = (select msj4 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ALM_CHFIS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCOK2'); --'Generaci√≥n AUTO CHFIS DE MAS'; 
		
			TRUNCATE TABLE _TMP_INVSERV_ALMACEN_MOVIM_DET;
		
			INSERT INTO _TMP_INVSERV_ALMACEN_MOVIM_DET(ID_Bodega, ID_Prod, Cantidad, Costo)
			SELECT _ID_Bodega, e.ID_Prod, e.Diff, c.CostoPromedio
			FROM TBL_INVSERV_CHFIS_DET e INNER JOIN TBL_INVSERV_INVENTARIOS c ON
				c.ID_Prod = e.ID_Prod 
			WHERE e.ID_CHFIS = _ID_CHFIS and e.Diff > 0.000;

			SELECT * INTO _errpart, _resultpart, _ID_Movimiento 
			FROM sp_invserv_alm_movs_agregar(_Fecha, _ID_Bodega, 'U', '149', _Concepto, '', '1', _ReferENT, 'CHFI', _ID_CHFIS) 
				as ( err integer, res varchar, clave integer );
			IF _errpart <> 0
			THEN
				_err := _errpart;
				_result := _resultpart;
			END IF; 
			
		END IF;
		--//////////////////////////////////////////////////
		
		DROP TABLE _TMP_INVSERV_ALMACEN_MOVIM_DET;
	
	END IF;

	RETURN QUERY SELECT _err, _result, _ID_CHFIS;

END
$BODY$
  LANGUAGE 'plpgsql';




--//////////////////////////////////////////////////////////////////////////
--//////////////////////////////////////////////////////////////////////////



--@FIN_BLOQUE
CREATE TABLE tbl_usuarios_roles
(
  id_rol character varying(10) NOT NULL,
  nombre character varying(80) NOT NULL,
  CONSTRAINT pk_tbl_usuarios_roles PRIMARY KEY (id_rol)
);

insert into tbl_usuarios_roles
values('cef-cont','Administrativo Contable');
insert into tbl_usuarios_roles
values('cef-cats','Administrativo de Catalogos');
insert into tbl_usuarios_roles
values('cef-ban','Administrativo de Bancos');
insert into tbl_usuarios_roles
values('cef-caj','Administrativo de Cajas');
insert into tbl_usuarios_roles
values('cef-alm','Administrativo de Almacenes');
insert into tbl_usuarios_roles
values('cef-comp','Administrativo de Compras');
insert into tbl_usuarios_roles
values('cef-ven','Administrativo de Ventas');
insert into tbl_usuarios_roles
values('cef-prod','Administrativo de Produccion');
insert into tbl_usuarios_roles
values('cef-nom','Administrativo de Nomina');
insert into tbl_usuarios_roles
values('cef-adm','Centro de Control');
insert into tbl_usuarios_roles
values('cef-rol','Administrativo de Roles');
insert into tbl_usuarios_roles
values('cef-crm','Administrativo del CRM');



--@FIN_BLOQUE
CREATE TABLE tbl_usuarios_submodulo_roles
(
  id_usuario character varying(10) NOT NULL,
  id_rol character varying(10) NOT NULL,
  CONSTRAINT pk_tbl_usuarios_submodulo_roles PRIMARY KEY (id_usuario, id_rol),
  CONSTRAINT fk_tbl_usuarios_submodulo_roles_tbl_usuarios FOREIGN KEY (id_usuario)
      REFERENCES tbl_usuarios (id_usuario) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_tbl_usuarios_submodulo_roles_tbl_usuarios_roles FOREIGN KEY (id_rol)
      REFERENCES tbl_usuarios_roles (id_rol) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE
);



--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_usuarios_submodulo_roles AS 
 SELECT p.id_usuario, c.id_rol, 
        CASE
            WHEN c.id_rol::text ~~ 'cef-%'::text THEN (( SELECT m.msj1
               FROM tbl_msj m
              WHERE m.alc = 'CEF'::bpchar AND m.mod::text = 'ROLES'::text AND m.sub::text = 'ROL_SIS'::text AND m.elm::text = c.id_rol::text))::character varying(80)
            ELSE c.nombre
        END AS nombre, 
        CASE
            WHEN (( SELECT count(*) AS count
               FROM tbl_usuarios_submodulo_roles
              WHERE tbl_usuarios_submodulo_roles.id_usuario::text = p.id_usuario::text AND tbl_usuarios_submodulo_roles.id_rol::text = c.id_rol::text)) = 0 THEN 0
            ELSE 1
        END AS enrolado
   FROM tbl_usuarios_roles c, tbl_usuarios p
  WHERE p.id_usuario::text <> c.id_rol::text;



--@FIN_BLOQUE
CREATE TABLE tbl_reports
(
  id_report smallint NOT NULL,
  description character varying(254) NOT NULL,
  tipo character varying(30) NOT NULL,
  titulo character varying(254),
  encl1 character varying(254),
  encl2 character varying(254),
  encl3 character varying(254),
  l1 character varying(254),
  l2 character varying(254),
  l3 character varying(254),
  cl1 character varying(254),
  cl2 character varying(254),
  cl3 character varying(254),
  hw smallint,
  vw smallint,
  subtipo character varying(30) NOT NULL,
  clave character varying(10),
  graficar bit(1) NOT NULL,
  CONSTRAINT pk_tbl_reports PRIMARY KEY (id_report ),
  CONSTRAINT fk_tbl_reports_tbl_usuarios_permisos_catalogo FOREIGN KEY (tipo)
      REFERENCES tbl_usuarios_permisos_catalogo (id_permiso) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION,
  CONSTRAINT fk_tbl_reports_tbl_usuarios_permisos_catalogo2 FOREIGN KEY (subtipo)
      REFERENCES tbl_usuarios_permisos_catalogo (id_permiso) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION
);



--@FIN_BLOQUE
CREATE TABLE tbl_usuarios_submodulo_reportes
(
  id_usuario character varying(10) NOT NULL,
  id_report smallint NOT NULL,
  CONSTRAINT pk_tbl_usuario_submodulo_reportes PRIMARY KEY (id_usuario, id_report),
  CONSTRAINT fk_tbl_usuarios_submodulo_reportes_tbl_reports FOREIGN KEY (id_report)
      REFERENCES tbl_reports (id_report) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_tbl_usuarios_submodulo_reportes_tbl_usuarios FOREIGN KEY (id_usuario)
      REFERENCES tbl_usuarios (id_usuario) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE
);



--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_usuarios_submodulo_reportes AS 
 SELECT p.id_usuario, c.id_report, c.tipo, c.subtipo, c.description, 
        CASE
            WHEN (( SELECT count(*) AS count
               FROM tbl_usuarios_submodulo_reportes
              WHERE tbl_usuarios_submodulo_reportes.id_usuario::text = p.id_usuario::text AND tbl_usuarios_submodulo_reportes.id_report = c.id_report)) = 0 THEN 0
            ELSE 1
        END AS permitido
   FROM tbl_reports c, tbl_usuarios p;

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('ADM');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('ADM_USUARIOS');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('ADM_USUARIOS_AGREGAR');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('ADM_USUARIOS_ELIMINAR');



--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_usuarios_modulo AS 
 SELECT tbl_usuarios.id_usuario AS usuario, tbl_usuarios.nombre
   FROM tbl_usuarios;



--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_usuarios_submodulo_bancos AS 
 SELECT p.id_usuario, c.tipo, c.clave, c.cuenta, 
        CASE
            WHEN (( SELECT count(*) AS count
               FROM tbl_usuarios_submodulo_bancos
              WHERE tbl_usuarios_submodulo_bancos.id_usuario::text = p.id_usuario::text AND tbl_usuarios_submodulo_bancos.tipo = c.tipo AND tbl_usuarios_submodulo_bancos.clave = c.clave)) = 0 THEN 0
            ELSE 1
        END AS permitido
   FROM tbl_bancos_cuentas c, tbl_usuarios p;



--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_usuarios_submodulo_bodegas AS 
 SELECT p.id_usuario, c.id_bodega, c.nombre, 
        CASE
            WHEN (( SELECT count(*) AS count
               FROM tbl_usuarios_submodulo_bodegas
              WHERE tbl_usuarios_submodulo_bodegas.id_usuario::text = p.id_usuario::text AND tbl_usuarios_submodulo_bodegas.id_bodega = c.id_bodega)) = 0 THEN 0
            ELSE 1
        END AS permitido
   FROM tbl_invserv_bodegas c, tbl_usuarios p;

  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_usuarios_agregar(_id_usuario character varying, _password character varying, _nombre character varying)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255);
BEGIN
	_err := 0;
	_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ADM_USUARIOS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCOK');
	
	IF(select count(*) from TBL_USUARIOS where ID_Usuario = _ID_Usuario) > 0
	THEN
		_err := 3;
		_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ADM_USUARIOS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR');
	END IF;

	IF(_ID_Usuario = 'cef-su' or _ID_Usuario = 'cef-admin' or _ID_Usuario like 'cef-%')
	THEN
		_err := 3;
		_result = (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ADM_USUARIOS' and m.sub::text = 'DLG' and m.elm::text = 'MSJ-PROCERR');
	END IF;
	
	IF _err = 0
	THEN
		INSERT INTO TBL_USUARIOS
		VALUES(_ID_Usuario, _Password, _Nombre);

		INSERT INTO TBL_USUARIOS_PERMISOS
		SELECT _ID_Usuario, ID_Permiso, '0'
		FROM TBL_USUARIOS_PERMISOS_CATALOGO;

		INSERT INTO TBL_USUARIOS_ROLES
		VALUES(_ID_Usuario, _Nombre);

		--Inserta en usuarios de CRM
		INSERT INTO TBL_CRMK_USERS( gu_user, tx_nickname, tx_pwd, nm_user, tx_surname1, fsi_user_id)
		SELECT replace(uuid_in(md5(now()::text)::cstring)::text, '-', ''), _ID_Usuario, _Password, _Nombre, _ID_Usuario, _ID_Usuario;
		
	END IF;

	RETURN QUERY SELECT _err, _result, _ID_Usuario;
END
$BODY$
  LANGUAGE plpgsql;  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_usuarios_cambiar(_id_usuario character varying, _password character varying, _nombre character varying)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255);
BEGIN
	_err := 0;
	_result := (select msj2 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ADM_USUARIOS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCOK');

	IF(select count(*) from TBL_USUARIOS where ID_Usuario = _ID_Usuario) < 1
	THEN
		_err := 3;
		_result := (select msj2 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ADM_USUARIOS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR');
	END IF;

	IF(_ID_Usuario = 'cef-su' or _ID_Usuario = 'cef-admin' or _ID_Usuario like 'cef-%')
	THEN
		_err := 3;
		_result = (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ADM_USUARIOS' and m.sub::text = 'DLG' and m.elm::text = 'MSJ-PROCERR');
	END IF;

	IF _err = 0
	THEN
		UPDATE TBL_USUARIOS
		SET Password = _Password, Nombre = _Nombre
		WHERE ID_Usuario = _ID_Usuario;

		UPDATE TBL_USUARIOS_ROLES
		SET Nombre = _Nombre
		WHERE ID_Rol = _ID_Usuario;

		UPDATE TBL_CRMK_USERS
		SET tx_pwd = _Password, nm_user = _Nombre
		WHERE fsi_user_id = _ID_Usuario;
		
	END IF;

	RETURN QUERY SELECT _err, _result, _ID_Usuario;
END
$BODY$
  LANGUAGE plpgsql;
  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_usuarios_eliminar(_id_usuario character varying)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255);
BEGIN
	_err := 0;
	_result := (select msj3 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ADM_USUARIOS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCOK');
	
	IF(select count(*) from TBL_USUARIOS where ID_Usuario = _ID_Usuario) < 1
	THEN
		_err := 3;
		_result := (select msj2 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ADM_USUARIOS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR');
	END IF;

	IF(_ID_Usuario = 'cef-su' or _ID_Usuario = 'cef-admin' or _ID_Usuario like 'cef-%')
	THEN
		_err := 3;
		_result = (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ADM_USUARIOS' and m.sub::text = 'DLG' and m.elm::text = 'MSJ-PROCERR');
	END IF;
	
	IF _err = 0
	THEN
		DELETE FROM TBL_USUARIOS_PERMISOS
		WHERE ID_Usuario = _ID_Usuario;
		
		DELETE FROM TBL_USUARIOS
		WHERE ID_Usuario = _ID_Usuario;

		DELETE FROM TBL_USUARIOS_ROLES
		WHERE ID_Rol = _ID_Usuario;
	END IF;

	RETURN QUERY SELECT _err, _result, _ID_Usuario;
END
$BODY$
  LANGUAGE 'plpgsql';


  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_usuarios_enlaces(_id_usuario character varying)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255);
BEGIN
	_err := 0;
	_result := (select msj4 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ADM_USUARIOS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCOK');
	
	IF(select count(*) from TBL_USUARIOS where ID_Usuario = _ID_Usuario) < 1
	THEN
		_err := 3;
		_result := (select msj2 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ADM_USUARIOS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR');
	END IF;

	IF(_ID_Usuario = 'cef-su' or _ID_Usuario = 'cef-admin' or _ID_Usuario like 'cef-%')
	THEN
		_err := 3;
		_result = (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ADM_USUARIOS' and m.sub::text = 'DLG' and m.elm::text = 'MSJ-PROCERR');
	END IF;

	IF _err = 0
	THEN
		-- Primero borra todos los permisos
		delete from TBL_USUARIOS_SUBMODULO_BANCOS
		where ID_Usuario = _ID_Usuario;
		
		delete from TBL_USUARIOS_SUBMODULO_BODEGAS
		where ID_Usuario = _ID_Usuario;
		
		delete from TBL_USUARIOS_SUBMODULO_COMPRAS
		where ID_Usuario = _ID_Usuario;
		
		delete from TBL_USUARIOS_SUBMODULO_VENTAS
		where ID_Usuario = _ID_Usuario;

		delete from TBL_USUARIOS_SUBMODULO_PRODUCCION
		where ID_Usuario = _ID_Usuario;

		delete from TBL_USUARIOS_SUBMODULO_NOMINA
		where ID_Usuario = _ID_Usuario;

		delete from TBL_USUARIOS_SUBMODULO_BLOCKS
		where ID_Usuario = _ID_Usuario;

		-- Ahora agrega todos los permisos desde las tablas temporales
		insert into TBL_USUARIOS_SUBMODULO_BANCOS
		select _ID_Usuario, Tipo, Clave
		from _TMP_USUARIOS_SUBMODULO_BANCOS;
		
		insert into TBL_USUARIOS_SUBMODULO_BODEGAS
		select _ID_Usuario, ID_Bodega
		from _TMP_USUARIOS_SUBMODULO_BODEGAS;
		
		insert into TBL_USUARIOS_SUBMODULO_COMPRAS
		select _ID_Usuario, ID_EntidadCompra
		from _TMP_USUARIOS_SUBMODULO_COMPRAS;
		
		insert into TBL_USUARIOS_SUBMODULO_VENTAS
		select _ID_Usuario, ID_EntidadVenta
		from _TMP_USUARIOS_SUBMODULO_VENTAS;

		insert into TBL_USUARIOS_SUBMODULO_PRODUCCION
		select _ID_Usuario, ID_EntidadProd
		from _TMP_USUARIOS_SUBMODULO_PRODUCCION;
	
		insert into TBL_USUARIOS_SUBMODULO_NOMINA
		select _ID_Usuario, ID_Compania, ID_Sucursal
		from _TMP_USUARIOS_SUBMODULO_NOMINA;
		
		insert into TBL_USUARIOS_SUBMODULO_BLOCKS
		select _ID_Usuario, ID_Block
		from _TMP_USUARIOS_SUBMODULO_BLOCKS;
		
	END IF;

	RETURN QUERY SELECT _err, _result, _ID_Usuario;
END
$BODY$
  LANGUAGE 'plpgsql';


  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_usuarios_enlrep(_id_usuario character varying)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255);
BEGIN
	_err := 0;
	_result := (select msj5 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ADM_USUARIOS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCOK');
	
	IF(select count(*) from TBL_USUARIOS where ID_Usuario = _ID_Usuario) < 1
	THEN
		_err := 3;
		_result := (select msj2 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ADM_USUARIOS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR');
	END IF;

	IF(_ID_Usuario = 'cef-su' or _ID_Usuario = 'cef-admin' or _ID_Usuario like 'cef-%')
	THEN
		_err := 3;
		_result = (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ADM_USUARIOS' and m.sub::text = 'DLG' and m.elm::text = 'MSJ-PROCERR');
	END IF;

	IF _err = 0
	THEN
		-- Primero borra todos los permisos
		delete from TBL_USUARIOS_SUBMODULO_REPORTES
		where ID_Usuario = _ID_Usuario;
		
		-- Ahora agrega todos los permisos desde las tablas temporales
		insert into TBL_USUARIOS_SUBMODULO_REPORTES
		select _ID_Usuario, ID_Report
		from _TMP_USUARIOS_SUBMODULO_REPORTES;
		
	END IF;

	RETURN QUERY SELECT _err, _result, _ID_Usuario;
END
$BODY$
  LANGUAGE 'plpgsql';

  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_usuarios_enrol(_id_usuario character varying)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255);
BEGIN
	_err := 0;
	_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ADM_USUARIOS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCOK2');
	
	IF(select count(*) from TBL_USUARIOS where ID_Usuario = _ID_Usuario) < 1
	THEN
		_err := 3;
		_result := (select msj2 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ADM_USUARIOS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR');
	END IF;

	IF(_ID_Usuario = 'cef-su' or _ID_Usuario = 'cef-admin' or _ID_Usuario like 'cef-%')
	THEN
		_err := 3;
		_result = (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ADM_USUARIOS' and m.sub::text = 'DLG' and m.elm::text = 'MSJ-PROCERR');
	END IF;

	IF _err = 0
	THEN
		-- Primero borra todos los erolamientos
		delete from TBL_USUARIOS_SUBMODULO_ROLES
		where ID_Usuario = _ID_Usuario;
		
		-- Ahora agrega todos los roles desde las tablas temporales
		insert into TBL_USUARIOS_SUBMODULO_ROLES
		select _ID_Usuario, ID_Rol
		from _TMP_USUARIOS_SUBMODULO_ROLES;
		
	END IF;

	RETURN QUERY SELECT _err, _result, _ID_Usuario;
END
$BODY$
  LANGUAGE 'plpgsql';

  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_usuarios_permisos(_id_usuario character varying)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255);
BEGIN
	_err := 0;
	_result := (select msj2 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ADM_USUARIOS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCOK2');
	
	IF(select count(*) from TBL_USUARIOS where ID_Usuario = _ID_Usuario) < 1
	THEN
		_err := 3;
		_result := (select msj2 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ADM_USUARIOS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR');
	END IF;

	IF(_ID_Usuario = 'cef-su' or _ID_Usuario = 'cef-admin' or _ID_Usuario like 'cef-%')
	THEN
		_err := 3;
		_result = (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ADM_USUARIOS' and m.sub::text = 'DLG' and m.elm::text = 'MSJ-PROCERR');
	END IF;

	IF _err = 0
	THEN
		-- Primero borra todos los permisos
		DELETE FROM TBL_USUARIOS_PERMISOS
		WHERE ID_Usuario = _ID_Usuario;

		-- Ahora agrega todos los permisos desde las tablas temporales
		INSERT INTO TBL_USUARIOS_PERMISOS
		SELECT _ID_Usuario, c.ID_Permiso,
			(case when ( select count(*) from _TMP_USUARIOS_PERMISOS where ID_Permiso = c.ID_Permiso ) = 0 
				then '0' else '1' end)::bit
		FROM TBL_USUARIOS_PERMISOS_CATALOGO c;

	END IF;

	RETURN QUERY SELECT _err, _result, _ID_Usuario;
END
$BODY$
  LANGUAGE 'plpgsql';

  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION view_bancos_movimientos_modulo_ids(_id_usuario character varying, _tipo smallint, _entidad character varying)
  RETURNS SETOF record AS
$BODY$  
DECLARE  
	_rolCEF boolean;
BEGIN
	IF _Tipo = 0
	THEN
		IF (select count(*) from tbl_usuarios_submodulo_roles where id_usuario = _id_usuario and id_rol = 'cef-ban') > 0
		THEN
			_rolCEF = true;
		ELSE
			_rolCEF = false;
		END IF;
	ELSE
		IF (select count(*) from tbl_usuarios_submodulo_roles where id_usuario = _id_usuario and id_rol = 'cef-caj') > 0
		THEN
			_rolCEF = true;
		ELSE
			_rolCEF = false;
		END IF;
	END IF;

	IF _ID_Usuario = 'cef-su' OR _rolCEF
	THEN
		IF _Entidad = 'CEF-X' -- Regresa todo el set
		THEN
			RETURN QUERY 
			SELECT _id_usuario as id_usuario, b.tipo, b.clave AS id, b.cuenta
			FROM tbl_bancos_cuentas b
			WHERE b.Tipo = _Tipo AND b.status <> 'C'::bpchar
			ORDER BY b.Clave ASC;
		ELSIF _Entidad = 'CEF-1'
		THEN
			RETURN QUERY 
			SELECT _id_usuario as id_usuario, b.tipo, b.clave AS id, b.cuenta
			FROM tbl_bancos_cuentas b
			WHERE b.Tipo = _Tipo AND b.status <> 'C'::bpchar
			ORDER BY b.Clave ASC
			LIMIT 1;
		ELSE
			RETURN QUERY 
			SELECT _id_usuario as id_usuario, b.tipo, b.clave AS id, b.cuenta
			FROM tbl_bancos_cuentas b
			WHERE b.Tipo = _Tipo AND b.status <> 'C'::bpchar AND b.Clave = _Entidad::smallint;
		END IF;
	ELSE
		IF _Entidad = 'CEF-X' -- Regresa todo el set
		THEN
			RETURN QUERY 
			SELECT DISTINCT  _id_usuario as id_usuario, b.tipo, b.clave AS id, b.cuenta
			FROM tbl_bancos_cuentas b
				JOIN tbl_usuarios_submodulo_bancos u ON b.tipo = u.tipo AND b.clave = u.clave
				JOIN tbl_cont_catalogo c ON b.cc = c.cuenta
			WHERE b.Tipo = _Tipo AND b.status <> 'C'::bpchar AND (u.id_usuario = _ID_Usuario OR u.id_usuario IN
				(select sr.ID_Rol from tbl_usuarios_submodulo_roles sr where sr.id_usuario = _ID_Usuario))
			ORDER BY b.Clave ASC;
			
		ELSIF _Entidad = 'CEF-1'
		THEN
			RETURN QUERY 
			SELECT DISTINCT  _id_usuario as id_usuario, b.tipo, b.clave AS id, b.cuenta
			FROM tbl_bancos_cuentas b
				JOIN tbl_usuarios_submodulo_bancos u ON b.tipo = u.tipo AND b.clave = u.clave
				JOIN tbl_cont_catalogo c ON b.cc = c.cuenta
			WHERE b.Tipo = _Tipo AND b.status <> 'C'::bpchar AND (u.id_usuario = _ID_Usuario OR u.id_usuario IN
				(select sr.ID_Rol from tbl_usuarios_submodulo_roles sr where sr.id_usuario = _ID_Usuario))
			ORDER BY b.Clave ASC
			LIMIT 1;
		ELSE
			RETURN QUERY
			SELECT DISTINCT  _id_usuario as id_usuario, b.tipo, b.clave AS id, b.cuenta
			FROM tbl_bancos_cuentas b
				JOIN tbl_usuarios_submodulo_bancos u ON b.tipo = u.tipo AND b.clave = u.clave
				JOIN tbl_cont_catalogo c ON b.cc = c.cuenta
			WHERE b.Tipo = _Tipo AND b.status <> 'C'::bpchar AND (u.id_usuario = _ID_Usuario OR u.id_usuario IN
				(select sr.ID_Rol from tbl_usuarios_submodulo_roles sr where sr.id_usuario = _ID_Usuario))  AND b.Clave = _Entidad::smallint;
			
		END IF;
	END IF;
END
$BODY$
  LANGUAGE 'plpgsql';

  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION view_bancos_movimientos_modulo_id(_id_usuario character varying, _tipo smallint, _entidad character varying)
  RETURNS SETOF record AS
$BODY$  
DECLARE  
	_rolCEF boolean;
BEGIN
	IF _Tipo = 0
	THEN
		IF (select count(*) from tbl_usuarios_submodulo_roles where id_usuario = _id_usuario and id_rol = 'cef-ban') > 0
		THEN
			_rolCEF = true;
		ELSE
			_rolCEF = false;
		END IF;
	ELSE
		IF (select count(*) from tbl_usuarios_submodulo_roles where id_usuario = _id_usuario and id_rol = 'cef-caj') > 0
		THEN
			_rolCEF = true;
		ELSE
			_rolCEF = false;
		END IF;
	END IF;

	IF _ID_Usuario = 'cef-su' OR _rolCEF
	THEN
		IF _Entidad = 'CEF-X' -- Regresa todo el set
		THEN
			RETURN QUERY 
			SELECT _id_usuario as id_usuario, b.tipo, b.clave AS id, b.cuenta, c.nombre AS descripcion, b.sigcheque AS ref, b.fmt_dep, b.fmt_ret, b.cc, b.status AS estatus, b.saldo, 
        CASE
            WHEN (( SELECT tbl_cont_catalogo_periodos.mes
               FROM tbl_cont_catalogo_periodos
              WHERE tbl_cont_catalogo_periodos.cerrado = 1
              ORDER BY tbl_cont_catalogo_periodos.ano DESC, tbl_cont_catalogo_periodos.mes DESC
             LIMIT 1)) IS NULL AND (( SELECT tbl_cont_catalogo_periodos.ano
               FROM tbl_cont_catalogo_periodos
              WHERE tbl_cont_catalogo_periodos.cerrado = 1
              ORDER BY tbl_cont_catalogo_periodos.ano DESC, tbl_cont_catalogo_periodos.mes DESC
             LIMIT 1)) IS NULL THEN (( SELECT tbl_bancos_cuentas_saldos.saldoini
               FROM tbl_bancos_cuentas_saldos
              WHERE tbl_bancos_cuentas_saldos.mes = (( SELECT tbl_cont_catalogo_periodos.mes
                       FROM tbl_cont_catalogo_periodos
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1)) AND tbl_bancos_cuentas_saldos.ano = (( SELECT tbl_cont_catalogo_periodos.ano
                       FROM tbl_cont_catalogo_periodos
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1)) AND tbl_bancos_cuentas_saldos.tipo = b.tipo AND tbl_bancos_cuentas_saldos.clave = b.clave)) + (( SELECT sum(tbl_bancos_movimientos.deposito) - sum(tbl_bancos_movimientos.retiro)
               FROM tbl_bancos_movimientos
              WHERE tbl_bancos_movimientos.tipo = b.tipo AND tbl_bancos_movimientos.clave = b.clave AND tbl_bancos_movimientos.estatus <> 'C'::bpchar AND (date_part('year'::text, tbl_bancos_movimientos.fecha) = (( SELECT tbl_cont_catalogo_periodos.ano
                       FROM tbl_cont_catalogo_periodos
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1))::double precision AND date_part('month'::text, tbl_bancos_movimientos.fecha) >= (( SELECT tbl_cont_catalogo_periodos.mes
                       FROM tbl_cont_catalogo_periodos
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1))::double precision OR date_part('year'::text, tbl_bancos_movimientos.fecha) > (( SELECT tbl_cont_catalogo_periodos.ano
                       FROM tbl_cont_catalogo_periodos
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1))::double precision)))
            ELSE (( SELECT tbl_bancos_cuentas_saldos.saldoini
               FROM tbl_bancos_cuentas_saldos
              WHERE tbl_bancos_cuentas_saldos.mes = (( SELECT tbl_cont_catalogo_periodos.mes
                       FROM tbl_cont_catalogo_periodos
                      WHERE tbl_cont_catalogo_periodos.cerrado <> 1
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1)) AND tbl_bancos_cuentas_saldos.ano = (( SELECT tbl_cont_catalogo_periodos.ano
                       FROM tbl_cont_catalogo_periodos
                      WHERE tbl_cont_catalogo_periodos.cerrado <> 1
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1)) AND tbl_bancos_cuentas_saldos.tipo = b.tipo AND tbl_bancos_cuentas_saldos.clave = b.clave)) + (( SELECT sum(tbl_bancos_movimientos.deposito) - sum(tbl_bancos_movimientos.retiro)
               FROM tbl_bancos_movimientos
              WHERE tbl_bancos_movimientos.tipo = b.tipo AND tbl_bancos_movimientos.clave = b.clave AND tbl_bancos_movimientos.estatus <> 'C'::bpchar AND (date_part('year'::text, tbl_bancos_movimientos.fecha) = (( SELECT tbl_cont_catalogo_periodos.ano
                       FROM tbl_cont_catalogo_periodos
                      WHERE tbl_cont_catalogo_periodos.cerrado <> 1
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1))::double precision AND date_part('month'::text, tbl_bancos_movimientos.fecha) >= (( SELECT tbl_cont_catalogo_periodos.mes
                       FROM tbl_cont_catalogo_periodos
                      WHERE tbl_cont_catalogo_periodos.cerrado <> 1
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1))::double precision OR date_part('year'::text, tbl_bancos_movimientos.fecha) > (( SELECT tbl_cont_catalogo_periodos.ano
                       FROM tbl_cont_catalogo_periodos
                      WHERE tbl_cont_catalogo_periodos.cerrado <> 1
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1))::double precision)))
        END AS saldototal, 
        CASE
            WHEN (( SELECT tbl_cont_catalogo_periodos.mes
               FROM tbl_cont_catalogo_periodos
              WHERE tbl_cont_catalogo_periodos.cerrado = 1
              ORDER BY tbl_cont_catalogo_periodos.ano DESC, tbl_cont_catalogo_periodos.mes DESC
             LIMIT 1)) IS NULL AND (( SELECT tbl_cont_catalogo_periodos.ano
               FROM tbl_cont_catalogo_periodos
              WHERE tbl_cont_catalogo_periodos.cerrado = 1
              ORDER BY tbl_cont_catalogo_periodos.ano DESC, tbl_cont_catalogo_periodos.mes DESC
             LIMIT 1)) IS NULL THEN (( SELECT tbl_bancos_cuentas_saldos.saldoini
               FROM tbl_bancos_cuentas_saldos
              WHERE tbl_bancos_cuentas_saldos.mes = (( SELECT tbl_cont_catalogo_periodos.mes
                       FROM tbl_cont_catalogo_periodos
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1)) AND tbl_bancos_cuentas_saldos.ano = (( SELECT tbl_cont_catalogo_periodos.ano
                       FROM tbl_cont_catalogo_periodos
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1)) AND tbl_bancos_cuentas_saldos.tipo = b.tipo AND tbl_bancos_cuentas_saldos.clave = b.clave)) + (( SELECT sum(tbl_bancos_movimientos.deposito) - sum(tbl_bancos_movimientos.retiro)
               FROM tbl_bancos_movimientos
              WHERE tbl_bancos_movimientos.tipo = b.tipo AND tbl_bancos_movimientos.clave = b.clave AND tbl_bancos_movimientos.estatus <> 'C'::bpchar AND tbl_bancos_movimientos.estatus <> 'T'::bpchar AND (date_part('year'::text, tbl_bancos_movimientos.fecha) = (( SELECT tbl_cont_catalogo_periodos.ano
                       FROM tbl_cont_catalogo_periodos
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1))::double precision AND date_part('month'::text, tbl_bancos_movimientos.fecha) >= (( SELECT tbl_cont_catalogo_periodos.mes
                       FROM tbl_cont_catalogo_periodos
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1))::double precision OR date_part('year'::text, tbl_bancos_movimientos.fecha) > (( SELECT tbl_cont_catalogo_periodos.ano
                       FROM tbl_cont_catalogo_periodos
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1))::double precision)))
            ELSE (( SELECT tbl_bancos_cuentas_saldos.saldoini
               FROM tbl_bancos_cuentas_saldos
              WHERE tbl_bancos_cuentas_saldos.mes = (( SELECT tbl_cont_catalogo_periodos.mes
                       FROM tbl_cont_catalogo_periodos
                      WHERE tbl_cont_catalogo_periodos.cerrado <> 1
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1)) AND tbl_bancos_cuentas_saldos.ano = (( SELECT tbl_cont_catalogo_periodos.ano
                       FROM tbl_cont_catalogo_periodos
                      WHERE tbl_cont_catalogo_periodos.cerrado <> 1
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1)) AND tbl_bancos_cuentas_saldos.tipo = b.tipo AND tbl_bancos_cuentas_saldos.clave = b.clave)) + (( SELECT sum(tbl_bancos_movimientos.deposito) - sum(tbl_bancos_movimientos.retiro)
               FROM tbl_bancos_movimientos
              WHERE tbl_bancos_movimientos.tipo = b.tipo AND tbl_bancos_movimientos.clave = b.clave AND tbl_bancos_movimientos.estatus <> 'C'::bpchar AND tbl_bancos_movimientos.estatus <> 'T'::bpchar AND (date_part('year'::text, tbl_bancos_movimientos.fecha) = (( SELECT tbl_cont_catalogo_periodos.ano
                       FROM tbl_cont_catalogo_periodos
                      WHERE tbl_cont_catalogo_periodos.cerrado <> 1
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1))::double precision AND date_part('month'::text, tbl_bancos_movimientos.fecha) >= (( SELECT tbl_cont_catalogo_periodos.mes
                       FROM tbl_cont_catalogo_periodos
                      WHERE tbl_cont_catalogo_periodos.cerrado <> 1
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1))::double precision OR date_part('year'::text, tbl_bancos_movimientos.fecha) > (( SELECT tbl_cont_catalogo_periodos.ano
                       FROM tbl_cont_catalogo_periodos
                      WHERE tbl_cont_catalogo_periodos.cerrado <> 1
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1))::double precision)))
        END AS saldoaplicado, 
        CASE
            WHEN (( SELECT sum(tbl_bancos_movimientos.deposito) AS sum
               FROM tbl_bancos_movimientos
              WHERE tbl_bancos_movimientos.tipo = b.tipo AND tbl_bancos_movimientos.clave = b.clave AND tbl_bancos_movimientos.estatus = 'T'::bpchar)) IS NULL THEN 0.0000
            ELSE ( SELECT sum(tbl_bancos_movimientos.deposito) AS sum
               FROM tbl_bancos_movimientos
              WHERE tbl_bancos_movimientos.tipo = b.tipo AND tbl_bancos_movimientos.clave = b.clave AND tbl_bancos_movimientos.estatus = 'T'::bpchar)
        END AS dsbc, 
        CASE
            WHEN (( SELECT sum(tbl_bancos_movimientos.retiro) AS sum
               FROM tbl_bancos_movimientos
              WHERE tbl_bancos_movimientos.tipo = b.tipo AND tbl_bancos_movimientos.clave = b.clave AND tbl_bancos_movimientos.estatus = 'T'::bpchar)) IS NULL THEN 0.0000
            ELSE ( SELECT sum(tbl_bancos_movimientos.retiro) AS sum
               FROM tbl_bancos_movimientos
              WHERE tbl_bancos_movimientos.tipo = b.tipo AND tbl_bancos_movimientos.clave = b.clave AND tbl_bancos_movimientos.estatus = 'T'::bpchar)
        END AS rpc, b.id_moneda, m.tc, b.fijo
			FROM tbl_bancos_cuentas b
				JOIN tbl_cont_catalogo c ON b.cc = c.cuenta
				JOIN tbl_cont_monedas m ON b.id_moneda = m.clave
			WHERE b.Tipo = _Tipo AND b.status <> 'C'::bpchar
			ORDER BY b.Clave ASC;
		ELSIF _Entidad = 'CEF-1'
		THEN
			RETURN QUERY 
			SELECT _id_usuario as id_usuario, b.tipo, b.clave AS id, b.cuenta, c.nombre AS descripcion, b.sigcheque AS ref, b.fmt_dep, b.fmt_ret, b.cc, b.status AS estatus, b.saldo, 
        CASE
            WHEN (( SELECT tbl_cont_catalogo_periodos.mes
               FROM tbl_cont_catalogo_periodos
              WHERE tbl_cont_catalogo_periodos.cerrado = 1
              ORDER BY tbl_cont_catalogo_periodos.ano DESC, tbl_cont_catalogo_periodos.mes DESC
             LIMIT 1)) IS NULL AND (( SELECT tbl_cont_catalogo_periodos.ano
               FROM tbl_cont_catalogo_periodos
              WHERE tbl_cont_catalogo_periodos.cerrado = 1
              ORDER BY tbl_cont_catalogo_periodos.ano DESC, tbl_cont_catalogo_periodos.mes DESC
             LIMIT 1)) IS NULL THEN (( SELECT tbl_bancos_cuentas_saldos.saldoini
               FROM tbl_bancos_cuentas_saldos
              WHERE tbl_bancos_cuentas_saldos.mes = (( SELECT tbl_cont_catalogo_periodos.mes
                       FROM tbl_cont_catalogo_periodos
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1)) AND tbl_bancos_cuentas_saldos.ano = (( SELECT tbl_cont_catalogo_periodos.ano
                       FROM tbl_cont_catalogo_periodos
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1)) AND tbl_bancos_cuentas_saldos.tipo = b.tipo AND tbl_bancos_cuentas_saldos.clave = b.clave)) + (( SELECT sum(tbl_bancos_movimientos.deposito) - sum(tbl_bancos_movimientos.retiro)
               FROM tbl_bancos_movimientos
              WHERE tbl_bancos_movimientos.tipo = b.tipo AND tbl_bancos_movimientos.clave = b.clave AND tbl_bancos_movimientos.estatus <> 'C'::bpchar AND (date_part('year'::text, tbl_bancos_movimientos.fecha) = (( SELECT tbl_cont_catalogo_periodos.ano
                       FROM tbl_cont_catalogo_periodos
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1))::double precision AND date_part('month'::text, tbl_bancos_movimientos.fecha) >= (( SELECT tbl_cont_catalogo_periodos.mes
                       FROM tbl_cont_catalogo_periodos
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1))::double precision OR date_part('year'::text, tbl_bancos_movimientos.fecha) > (( SELECT tbl_cont_catalogo_periodos.ano
                       FROM tbl_cont_catalogo_periodos
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1))::double precision)))
            ELSE (( SELECT tbl_bancos_cuentas_saldos.saldoini
               FROM tbl_bancos_cuentas_saldos
              WHERE tbl_bancos_cuentas_saldos.mes = (( SELECT tbl_cont_catalogo_periodos.mes
                       FROM tbl_cont_catalogo_periodos
                      WHERE tbl_cont_catalogo_periodos.cerrado <> 1
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1)) AND tbl_bancos_cuentas_saldos.ano = (( SELECT tbl_cont_catalogo_periodos.ano
                       FROM tbl_cont_catalogo_periodos
                      WHERE tbl_cont_catalogo_periodos.cerrado <> 1
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1)) AND tbl_bancos_cuentas_saldos.tipo = b.tipo AND tbl_bancos_cuentas_saldos.clave = b.clave)) + (( SELECT sum(tbl_bancos_movimientos.deposito) - sum(tbl_bancos_movimientos.retiro)
               FROM tbl_bancos_movimientos
              WHERE tbl_bancos_movimientos.tipo = b.tipo AND tbl_bancos_movimientos.clave = b.clave AND tbl_bancos_movimientos.estatus <> 'C'::bpchar AND (date_part('year'::text, tbl_bancos_movimientos.fecha) = (( SELECT tbl_cont_catalogo_periodos.ano
                       FROM tbl_cont_catalogo_periodos
                      WHERE tbl_cont_catalogo_periodos.cerrado <> 1
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1))::double precision AND date_part('month'::text, tbl_bancos_movimientos.fecha) >= (( SELECT tbl_cont_catalogo_periodos.mes
                       FROM tbl_cont_catalogo_periodos
                      WHERE tbl_cont_catalogo_periodos.cerrado <> 1
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1))::double precision OR date_part('year'::text, tbl_bancos_movimientos.fecha) > (( SELECT tbl_cont_catalogo_periodos.ano
                       FROM tbl_cont_catalogo_periodos
                      WHERE tbl_cont_catalogo_periodos.cerrado <> 1
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1))::double precision)))
        END AS saldototal, 
        CASE
            WHEN (( SELECT tbl_cont_catalogo_periodos.mes
               FROM tbl_cont_catalogo_periodos
              WHERE tbl_cont_catalogo_periodos.cerrado = 1
              ORDER BY tbl_cont_catalogo_periodos.ano DESC, tbl_cont_catalogo_periodos.mes DESC
             LIMIT 1)) IS NULL AND (( SELECT tbl_cont_catalogo_periodos.ano
               FROM tbl_cont_catalogo_periodos
              WHERE tbl_cont_catalogo_periodos.cerrado = 1
              ORDER BY tbl_cont_catalogo_periodos.ano DESC, tbl_cont_catalogo_periodos.mes DESC
             LIMIT 1)) IS NULL THEN (( SELECT tbl_bancos_cuentas_saldos.saldoini
               FROM tbl_bancos_cuentas_saldos
              WHERE tbl_bancos_cuentas_saldos.mes = (( SELECT tbl_cont_catalogo_periodos.mes
                       FROM tbl_cont_catalogo_periodos
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1)) AND tbl_bancos_cuentas_saldos.ano = (( SELECT tbl_cont_catalogo_periodos.ano
                       FROM tbl_cont_catalogo_periodos
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1)) AND tbl_bancos_cuentas_saldos.tipo = b.tipo AND tbl_bancos_cuentas_saldos.clave = b.clave)) + (( SELECT sum(tbl_bancos_movimientos.deposito) - sum(tbl_bancos_movimientos.retiro)
               FROM tbl_bancos_movimientos
              WHERE tbl_bancos_movimientos.tipo = b.tipo AND tbl_bancos_movimientos.clave = b.clave AND tbl_bancos_movimientos.estatus <> 'C'::bpchar AND tbl_bancos_movimientos.estatus <> 'T'::bpchar AND (date_part('year'::text, tbl_bancos_movimientos.fecha) = (( SELECT tbl_cont_catalogo_periodos.ano
                       FROM tbl_cont_catalogo_periodos
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1))::double precision AND date_part('month'::text, tbl_bancos_movimientos.fecha) >= (( SELECT tbl_cont_catalogo_periodos.mes
                       FROM tbl_cont_catalogo_periodos
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1))::double precision OR date_part('year'::text, tbl_bancos_movimientos.fecha) > (( SELECT tbl_cont_catalogo_periodos.ano
                       FROM tbl_cont_catalogo_periodos
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1))::double precision)))
            ELSE (( SELECT tbl_bancos_cuentas_saldos.saldoini
               FROM tbl_bancos_cuentas_saldos
              WHERE tbl_bancos_cuentas_saldos.mes = (( SELECT tbl_cont_catalogo_periodos.mes
                       FROM tbl_cont_catalogo_periodos
                      WHERE tbl_cont_catalogo_periodos.cerrado <> 1
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1)) AND tbl_bancos_cuentas_saldos.ano = (( SELECT tbl_cont_catalogo_periodos.ano
                       FROM tbl_cont_catalogo_periodos
                      WHERE tbl_cont_catalogo_periodos.cerrado <> 1
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1)) AND tbl_bancos_cuentas_saldos.tipo = b.tipo AND tbl_bancos_cuentas_saldos.clave = b.clave)) + (( SELECT sum(tbl_bancos_movimientos.deposito) - sum(tbl_bancos_movimientos.retiro)
               FROM tbl_bancos_movimientos
              WHERE tbl_bancos_movimientos.tipo = b.tipo AND tbl_bancos_movimientos.clave = b.clave AND tbl_bancos_movimientos.estatus <> 'C'::bpchar AND tbl_bancos_movimientos.estatus <> 'T'::bpchar AND (date_part('year'::text, tbl_bancos_movimientos.fecha) = (( SELECT tbl_cont_catalogo_periodos.ano
                       FROM tbl_cont_catalogo_periodos
                      WHERE tbl_cont_catalogo_periodos.cerrado <> 1
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1))::double precision AND date_part('month'::text, tbl_bancos_movimientos.fecha) >= (( SELECT tbl_cont_catalogo_periodos.mes
                       FROM tbl_cont_catalogo_periodos
                      WHERE tbl_cont_catalogo_periodos.cerrado <> 1
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1))::double precision OR date_part('year'::text, tbl_bancos_movimientos.fecha) > (( SELECT tbl_cont_catalogo_periodos.ano
                       FROM tbl_cont_catalogo_periodos
                      WHERE tbl_cont_catalogo_periodos.cerrado <> 1
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1))::double precision)))
        END AS saldoaplicado, 
        CASE
            WHEN (( SELECT sum(tbl_bancos_movimientos.deposito) AS sum
               FROM tbl_bancos_movimientos
              WHERE tbl_bancos_movimientos.tipo = b.tipo AND tbl_bancos_movimientos.clave = b.clave AND tbl_bancos_movimientos.estatus = 'T'::bpchar)) IS NULL THEN 0.0000
            ELSE ( SELECT sum(tbl_bancos_movimientos.deposito) AS sum
               FROM tbl_bancos_movimientos
              WHERE tbl_bancos_movimientos.tipo = b.tipo AND tbl_bancos_movimientos.clave = b.clave AND tbl_bancos_movimientos.estatus = 'T'::bpchar)
        END AS dsbc, 
        CASE
            WHEN (( SELECT sum(tbl_bancos_movimientos.retiro) AS sum
               FROM tbl_bancos_movimientos
              WHERE tbl_bancos_movimientos.tipo = b.tipo AND tbl_bancos_movimientos.clave = b.clave AND tbl_bancos_movimientos.estatus = 'T'::bpchar)) IS NULL THEN 0.0000
            ELSE ( SELECT sum(tbl_bancos_movimientos.retiro) AS sum
               FROM tbl_bancos_movimientos
              WHERE tbl_bancos_movimientos.tipo = b.tipo AND tbl_bancos_movimientos.clave = b.clave AND tbl_bancos_movimientos.estatus = 'T'::bpchar)
        END AS rpc, b.id_moneda, m.tc, b.fijo
			FROM tbl_bancos_cuentas b
				JOIN tbl_cont_catalogo c ON b.cc = c.cuenta
				JOIN tbl_cont_monedas m ON b.id_moneda = m.clave
			WHERE b.Tipo = _Tipo AND b.status <> 'C'::bpchar
			ORDER BY b.Clave ASC
			LIMIT 1;
		ELSE
			RETURN QUERY 
			SELECT _id_usuario as id_usuario, b.tipo, b.clave AS id, b.cuenta, c.nombre AS descripcion, b.sigcheque AS ref, b.fmt_dep, b.fmt_ret, b.cc, b.status AS estatus, b.saldo, 
        CASE
            WHEN (( SELECT tbl_cont_catalogo_periodos.mes
               FROM tbl_cont_catalogo_periodos
              WHERE tbl_cont_catalogo_periodos.cerrado = 1
              ORDER BY tbl_cont_catalogo_periodos.ano DESC, tbl_cont_catalogo_periodos.mes DESC
             LIMIT 1)) IS NULL AND (( SELECT tbl_cont_catalogo_periodos.ano
               FROM tbl_cont_catalogo_periodos
              WHERE tbl_cont_catalogo_periodos.cerrado = 1
              ORDER BY tbl_cont_catalogo_periodos.ano DESC, tbl_cont_catalogo_periodos.mes DESC
             LIMIT 1)) IS NULL THEN (( SELECT tbl_bancos_cuentas_saldos.saldoini
               FROM tbl_bancos_cuentas_saldos
              WHERE tbl_bancos_cuentas_saldos.mes = (( SELECT tbl_cont_catalogo_periodos.mes
                       FROM tbl_cont_catalogo_periodos
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1)) AND tbl_bancos_cuentas_saldos.ano = (( SELECT tbl_cont_catalogo_periodos.ano
                       FROM tbl_cont_catalogo_periodos
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1)) AND tbl_bancos_cuentas_saldos.tipo = b.tipo AND tbl_bancos_cuentas_saldos.clave = b.clave)) + (( SELECT sum(tbl_bancos_movimientos.deposito) - sum(tbl_bancos_movimientos.retiro)
               FROM tbl_bancos_movimientos
              WHERE tbl_bancos_movimientos.tipo = b.tipo AND tbl_bancos_movimientos.clave = b.clave AND tbl_bancos_movimientos.estatus <> 'C'::bpchar AND (date_part('year'::text, tbl_bancos_movimientos.fecha) = (( SELECT tbl_cont_catalogo_periodos.ano
                       FROM tbl_cont_catalogo_periodos
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1))::double precision AND date_part('month'::text, tbl_bancos_movimientos.fecha) >= (( SELECT tbl_cont_catalogo_periodos.mes
                       FROM tbl_cont_catalogo_periodos
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1))::double precision OR date_part('year'::text, tbl_bancos_movimientos.fecha) > (( SELECT tbl_cont_catalogo_periodos.ano
                       FROM tbl_cont_catalogo_periodos
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1))::double precision)))
            ELSE (( SELECT tbl_bancos_cuentas_saldos.saldoini
               FROM tbl_bancos_cuentas_saldos
              WHERE tbl_bancos_cuentas_saldos.mes = (( SELECT tbl_cont_catalogo_periodos.mes
                       FROM tbl_cont_catalogo_periodos
                      WHERE tbl_cont_catalogo_periodos.cerrado <> 1
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1)) AND tbl_bancos_cuentas_saldos.ano = (( SELECT tbl_cont_catalogo_periodos.ano
                       FROM tbl_cont_catalogo_periodos
                      WHERE tbl_cont_catalogo_periodos.cerrado <> 1
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1)) AND tbl_bancos_cuentas_saldos.tipo = b.tipo AND tbl_bancos_cuentas_saldos.clave = b.clave)) + (( SELECT sum(tbl_bancos_movimientos.deposito) - sum(tbl_bancos_movimientos.retiro)
               FROM tbl_bancos_movimientos
              WHERE tbl_bancos_movimientos.tipo = b.tipo AND tbl_bancos_movimientos.clave = b.clave AND tbl_bancos_movimientos.estatus <> 'C'::bpchar AND (date_part('year'::text, tbl_bancos_movimientos.fecha) = (( SELECT tbl_cont_catalogo_periodos.ano
                       FROM tbl_cont_catalogo_periodos
                      WHERE tbl_cont_catalogo_periodos.cerrado <> 1
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1))::double precision AND date_part('month'::text, tbl_bancos_movimientos.fecha) >= (( SELECT tbl_cont_catalogo_periodos.mes
                       FROM tbl_cont_catalogo_periodos
                      WHERE tbl_cont_catalogo_periodos.cerrado <> 1
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1))::double precision OR date_part('year'::text, tbl_bancos_movimientos.fecha) > (( SELECT tbl_cont_catalogo_periodos.ano
                       FROM tbl_cont_catalogo_periodos
                      WHERE tbl_cont_catalogo_periodos.cerrado <> 1
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1))::double precision)))
        END AS saldototal, 
        CASE
            WHEN (( SELECT tbl_cont_catalogo_periodos.mes
               FROM tbl_cont_catalogo_periodos
              WHERE tbl_cont_catalogo_periodos.cerrado = 1
              ORDER BY tbl_cont_catalogo_periodos.ano DESC, tbl_cont_catalogo_periodos.mes DESC
             LIMIT 1)) IS NULL AND (( SELECT tbl_cont_catalogo_periodos.ano
               FROM tbl_cont_catalogo_periodos
              WHERE tbl_cont_catalogo_periodos.cerrado = 1
              ORDER BY tbl_cont_catalogo_periodos.ano DESC, tbl_cont_catalogo_periodos.mes DESC
             LIMIT 1)) IS NULL THEN (( SELECT tbl_bancos_cuentas_saldos.saldoini
               FROM tbl_bancos_cuentas_saldos
              WHERE tbl_bancos_cuentas_saldos.mes = (( SELECT tbl_cont_catalogo_periodos.mes
                       FROM tbl_cont_catalogo_periodos
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1)) AND tbl_bancos_cuentas_saldos.ano = (( SELECT tbl_cont_catalogo_periodos.ano
                       FROM tbl_cont_catalogo_periodos
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1)) AND tbl_bancos_cuentas_saldos.tipo = b.tipo AND tbl_bancos_cuentas_saldos.clave = b.clave)) + (( SELECT sum(tbl_bancos_movimientos.deposito) - sum(tbl_bancos_movimientos.retiro)
               FROM tbl_bancos_movimientos
              WHERE tbl_bancos_movimientos.tipo = b.tipo AND tbl_bancos_movimientos.clave = b.clave AND tbl_bancos_movimientos.estatus <> 'C'::bpchar AND tbl_bancos_movimientos.estatus <> 'T'::bpchar AND (date_part('year'::text, tbl_bancos_movimientos.fecha) = (( SELECT tbl_cont_catalogo_periodos.ano
                       FROM tbl_cont_catalogo_periodos
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1))::double precision AND date_part('month'::text, tbl_bancos_movimientos.fecha) >= (( SELECT tbl_cont_catalogo_periodos.mes
                       FROM tbl_cont_catalogo_periodos
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1))::double precision OR date_part('year'::text, tbl_bancos_movimientos.fecha) > (( SELECT tbl_cont_catalogo_periodos.ano
                       FROM tbl_cont_catalogo_periodos
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1))::double precision)))
            ELSE (( SELECT tbl_bancos_cuentas_saldos.saldoini
               FROM tbl_bancos_cuentas_saldos
              WHERE tbl_bancos_cuentas_saldos.mes = (( SELECT tbl_cont_catalogo_periodos.mes
                       FROM tbl_cont_catalogo_periodos
                      WHERE tbl_cont_catalogo_periodos.cerrado <> 1
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1)) AND tbl_bancos_cuentas_saldos.ano = (( SELECT tbl_cont_catalogo_periodos.ano
                       FROM tbl_cont_catalogo_periodos
                      WHERE tbl_cont_catalogo_periodos.cerrado <> 1
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1)) AND tbl_bancos_cuentas_saldos.tipo = b.tipo AND tbl_bancos_cuentas_saldos.clave = b.clave)) + (( SELECT sum(tbl_bancos_movimientos.deposito) - sum(tbl_bancos_movimientos.retiro)
               FROM tbl_bancos_movimientos
              WHERE tbl_bancos_movimientos.tipo = b.tipo AND tbl_bancos_movimientos.clave = b.clave AND tbl_bancos_movimientos.estatus <> 'C'::bpchar AND tbl_bancos_movimientos.estatus <> 'T'::bpchar AND (date_part('year'::text, tbl_bancos_movimientos.fecha) = (( SELECT tbl_cont_catalogo_periodos.ano
                       FROM tbl_cont_catalogo_periodos
                      WHERE tbl_cont_catalogo_periodos.cerrado <> 1
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1))::double precision AND date_part('month'::text, tbl_bancos_movimientos.fecha) >= (( SELECT tbl_cont_catalogo_periodos.mes
                       FROM tbl_cont_catalogo_periodos
                      WHERE tbl_cont_catalogo_periodos.cerrado <> 1
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1))::double precision OR date_part('year'::text, tbl_bancos_movimientos.fecha) > (( SELECT tbl_cont_catalogo_periodos.ano
                       FROM tbl_cont_catalogo_periodos
                      WHERE tbl_cont_catalogo_periodos.cerrado <> 1
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1))::double precision)))
        END AS saldoaplicado, 
        CASE
            WHEN (( SELECT sum(tbl_bancos_movimientos.deposito) AS sum
               FROM tbl_bancos_movimientos
              WHERE tbl_bancos_movimientos.tipo = b.tipo AND tbl_bancos_movimientos.clave = b.clave AND tbl_bancos_movimientos.estatus = 'T'::bpchar)) IS NULL THEN 0.0000
            ELSE ( SELECT sum(tbl_bancos_movimientos.deposito) AS sum
               FROM tbl_bancos_movimientos
              WHERE tbl_bancos_movimientos.tipo = b.tipo AND tbl_bancos_movimientos.clave = b.clave AND tbl_bancos_movimientos.estatus = 'T'::bpchar)
        END AS dsbc, 
        CASE
            WHEN (( SELECT sum(tbl_bancos_movimientos.retiro) AS sum
               FROM tbl_bancos_movimientos
              WHERE tbl_bancos_movimientos.tipo = b.tipo AND tbl_bancos_movimientos.clave = b.clave AND tbl_bancos_movimientos.estatus = 'T'::bpchar)) IS NULL THEN 0.0000
            ELSE ( SELECT sum(tbl_bancos_movimientos.retiro) AS sum
               FROM tbl_bancos_movimientos
              WHERE tbl_bancos_movimientos.tipo = b.tipo AND tbl_bancos_movimientos.clave = b.clave AND tbl_bancos_movimientos.estatus = 'T'::bpchar)
        END AS rpc, b.id_moneda, m.tc, b.fijo
			FROM tbl_bancos_cuentas b
				JOIN tbl_cont_catalogo c ON b.cc = c.cuenta
				JOIN tbl_cont_monedas m ON b.id_moneda = m.clave
			WHERE b.Tipo = _Tipo AND b.status <> 'C'::bpchar AND b.Clave = _Entidad::smallint;
		END IF;
	ELSE
		IF _Entidad = 'CEF-X' -- Regresa todo el set
		THEN
			RETURN QUERY 
			SELECT DISTINCT  _id_usuario as id_usuario, b.tipo, b.clave AS id, b.cuenta, c.nombre AS descripcion, b.sigcheque AS ref, b.fmt_dep, b.fmt_ret, b.cc, b.status AS estatus, b.saldo, 
        CASE
            WHEN (( SELECT tbl_cont_catalogo_periodos.mes
               FROM tbl_cont_catalogo_periodos
              WHERE tbl_cont_catalogo_periodos.cerrado = 1
              ORDER BY tbl_cont_catalogo_periodos.ano DESC, tbl_cont_catalogo_periodos.mes DESC
             LIMIT 1)) IS NULL AND (( SELECT tbl_cont_catalogo_periodos.ano
               FROM tbl_cont_catalogo_periodos
              WHERE tbl_cont_catalogo_periodos.cerrado = 1
              ORDER BY tbl_cont_catalogo_periodos.ano DESC, tbl_cont_catalogo_periodos.mes DESC
             LIMIT 1)) IS NULL THEN (( SELECT tbl_bancos_cuentas_saldos.saldoini
               FROM tbl_bancos_cuentas_saldos
              WHERE tbl_bancos_cuentas_saldos.mes = (( SELECT tbl_cont_catalogo_periodos.mes
                       FROM tbl_cont_catalogo_periodos
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1)) AND tbl_bancos_cuentas_saldos.ano = (( SELECT tbl_cont_catalogo_periodos.ano
                       FROM tbl_cont_catalogo_periodos
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1)) AND tbl_bancos_cuentas_saldos.tipo = b.tipo AND tbl_bancos_cuentas_saldos.clave = b.clave)) + (( SELECT sum(tbl_bancos_movimientos.deposito) - sum(tbl_bancos_movimientos.retiro)
               FROM tbl_bancos_movimientos
              WHERE tbl_bancos_movimientos.tipo = b.tipo AND tbl_bancos_movimientos.clave = b.clave AND tbl_bancos_movimientos.estatus <> 'C'::bpchar AND (date_part('year'::text, tbl_bancos_movimientos.fecha) = (( SELECT tbl_cont_catalogo_periodos.ano
                       FROM tbl_cont_catalogo_periodos
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1))::double precision AND date_part('month'::text, tbl_bancos_movimientos.fecha) >= (( SELECT tbl_cont_catalogo_periodos.mes
                       FROM tbl_cont_catalogo_periodos
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1))::double precision OR date_part('year'::text, tbl_bancos_movimientos.fecha) > (( SELECT tbl_cont_catalogo_periodos.ano
                       FROM tbl_cont_catalogo_periodos
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1))::double precision)))
            ELSE (( SELECT tbl_bancos_cuentas_saldos.saldoini
               FROM tbl_bancos_cuentas_saldos
              WHERE tbl_bancos_cuentas_saldos.mes = (( SELECT tbl_cont_catalogo_periodos.mes
                       FROM tbl_cont_catalogo_periodos
                      WHERE tbl_cont_catalogo_periodos.cerrado <> 1
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1)) AND tbl_bancos_cuentas_saldos.ano = (( SELECT tbl_cont_catalogo_periodos.ano
                       FROM tbl_cont_catalogo_periodos
                      WHERE tbl_cont_catalogo_periodos.cerrado <> 1
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1)) AND tbl_bancos_cuentas_saldos.tipo = b.tipo AND tbl_bancos_cuentas_saldos.clave = b.clave)) + (( SELECT sum(tbl_bancos_movimientos.deposito) - sum(tbl_bancos_movimientos.retiro)
               FROM tbl_bancos_movimientos
              WHERE tbl_bancos_movimientos.tipo = b.tipo AND tbl_bancos_movimientos.clave = b.clave AND tbl_bancos_movimientos.estatus <> 'C'::bpchar AND (date_part('year'::text, tbl_bancos_movimientos.fecha) = (( SELECT tbl_cont_catalogo_periodos.ano
                       FROM tbl_cont_catalogo_periodos
                      WHERE tbl_cont_catalogo_periodos.cerrado <> 1
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1))::double precision AND date_part('month'::text, tbl_bancos_movimientos.fecha) >= (( SELECT tbl_cont_catalogo_periodos.mes
                       FROM tbl_cont_catalogo_periodos
                      WHERE tbl_cont_catalogo_periodos.cerrado <> 1
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1))::double precision OR date_part('year'::text, tbl_bancos_movimientos.fecha) > (( SELECT tbl_cont_catalogo_periodos.ano
                       FROM tbl_cont_catalogo_periodos
                      WHERE tbl_cont_catalogo_periodos.cerrado <> 1
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1))::double precision)))
        END AS saldototal, 
        CASE
            WHEN (( SELECT tbl_cont_catalogo_periodos.mes
               FROM tbl_cont_catalogo_periodos
              WHERE tbl_cont_catalogo_periodos.cerrado = 1
              ORDER BY tbl_cont_catalogo_periodos.ano DESC, tbl_cont_catalogo_periodos.mes DESC
             LIMIT 1)) IS NULL AND (( SELECT tbl_cont_catalogo_periodos.ano
               FROM tbl_cont_catalogo_periodos
              WHERE tbl_cont_catalogo_periodos.cerrado = 1
              ORDER BY tbl_cont_catalogo_periodos.ano DESC, tbl_cont_catalogo_periodos.mes DESC
             LIMIT 1)) IS NULL THEN (( SELECT tbl_bancos_cuentas_saldos.saldoini
               FROM tbl_bancos_cuentas_saldos
              WHERE tbl_bancos_cuentas_saldos.mes = (( SELECT tbl_cont_catalogo_periodos.mes
                       FROM tbl_cont_catalogo_periodos
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1)) AND tbl_bancos_cuentas_saldos.ano = (( SELECT tbl_cont_catalogo_periodos.ano
                       FROM tbl_cont_catalogo_periodos
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1)) AND tbl_bancos_cuentas_saldos.tipo = b.tipo AND tbl_bancos_cuentas_saldos.clave = b.clave)) + (( SELECT sum(tbl_bancos_movimientos.deposito) - sum(tbl_bancos_movimientos.retiro)
               FROM tbl_bancos_movimientos
              WHERE tbl_bancos_movimientos.tipo = b.tipo AND tbl_bancos_movimientos.clave = b.clave AND tbl_bancos_movimientos.estatus <> 'C'::bpchar AND tbl_bancos_movimientos.estatus <> 'T'::bpchar AND (date_part('year'::text, tbl_bancos_movimientos.fecha) = (( SELECT tbl_cont_catalogo_periodos.ano
                       FROM tbl_cont_catalogo_periodos
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1))::double precision AND date_part('month'::text, tbl_bancos_movimientos.fecha) >= (( SELECT tbl_cont_catalogo_periodos.mes
                       FROM tbl_cont_catalogo_periodos
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1))::double precision OR date_part('year'::text, tbl_bancos_movimientos.fecha) > (( SELECT tbl_cont_catalogo_periodos.ano
                       FROM tbl_cont_catalogo_periodos
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1))::double precision)))
            ELSE (( SELECT tbl_bancos_cuentas_saldos.saldoini
               FROM tbl_bancos_cuentas_saldos
              WHERE tbl_bancos_cuentas_saldos.mes = (( SELECT tbl_cont_catalogo_periodos.mes
                       FROM tbl_cont_catalogo_periodos
                      WHERE tbl_cont_catalogo_periodos.cerrado <> 1
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1)) AND tbl_bancos_cuentas_saldos.ano = (( SELECT tbl_cont_catalogo_periodos.ano
                       FROM tbl_cont_catalogo_periodos
                      WHERE tbl_cont_catalogo_periodos.cerrado <> 1
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1)) AND tbl_bancos_cuentas_saldos.tipo = b.tipo AND tbl_bancos_cuentas_saldos.clave = b.clave)) + (( SELECT sum(tbl_bancos_movimientos.deposito) - sum(tbl_bancos_movimientos.retiro)
               FROM tbl_bancos_movimientos
              WHERE tbl_bancos_movimientos.tipo = b.tipo AND tbl_bancos_movimientos.clave = b.clave AND tbl_bancos_movimientos.estatus <> 'C'::bpchar AND tbl_bancos_movimientos.estatus <> 'T'::bpchar AND (date_part('year'::text, tbl_bancos_movimientos.fecha) = (( SELECT tbl_cont_catalogo_periodos.ano
                       FROM tbl_cont_catalogo_periodos
                      WHERE tbl_cont_catalogo_periodos.cerrado <> 1
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1))::double precision AND date_part('month'::text, tbl_bancos_movimientos.fecha) >= (( SELECT tbl_cont_catalogo_periodos.mes
                       FROM tbl_cont_catalogo_periodos
                      WHERE tbl_cont_catalogo_periodos.cerrado <> 1
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1))::double precision OR date_part('year'::text, tbl_bancos_movimientos.fecha) > (( SELECT tbl_cont_catalogo_periodos.ano
                       FROM tbl_cont_catalogo_periodos
                      WHERE tbl_cont_catalogo_periodos.cerrado <> 1
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1))::double precision)))
        END AS saldoaplicado, 
        CASE
            WHEN (( SELECT sum(tbl_bancos_movimientos.deposito) AS sum
               FROM tbl_bancos_movimientos
              WHERE tbl_bancos_movimientos.tipo = b.tipo AND tbl_bancos_movimientos.clave = b.clave AND tbl_bancos_movimientos.estatus = 'T'::bpchar)) IS NULL THEN 0.0000
            ELSE ( SELECT sum(tbl_bancos_movimientos.deposito) AS sum
               FROM tbl_bancos_movimientos
              WHERE tbl_bancos_movimientos.tipo = b.tipo AND tbl_bancos_movimientos.clave = b.clave AND tbl_bancos_movimientos.estatus = 'T'::bpchar)
        END AS dsbc, 
        CASE
            WHEN (( SELECT sum(tbl_bancos_movimientos.retiro) AS sum
               FROM tbl_bancos_movimientos
              WHERE tbl_bancos_movimientos.tipo = b.tipo AND tbl_bancos_movimientos.clave = b.clave AND tbl_bancos_movimientos.estatus = 'T'::bpchar)) IS NULL THEN 0.0000
            ELSE ( SELECT sum(tbl_bancos_movimientos.retiro) AS sum
               FROM tbl_bancos_movimientos
              WHERE tbl_bancos_movimientos.tipo = b.tipo AND tbl_bancos_movimientos.clave = b.clave AND tbl_bancos_movimientos.estatus = 'T'::bpchar)
        END AS rpc, b.id_moneda, m.tc, b.fijo
			FROM tbl_bancos_cuentas b
				JOIN tbl_usuarios_submodulo_bancos u ON b.tipo = u.tipo AND b.clave = u.clave
				JOIN tbl_cont_catalogo c ON b.cc = c.cuenta
				JOIN tbl_cont_monedas m ON b.id_moneda = m.clave
			WHERE b.Tipo = _Tipo AND b.status <> 'C'::bpchar AND (u.id_usuario = _ID_Usuario OR u.id_usuario IN
				(select sr.ID_Rol from tbl_usuarios_submodulo_roles sr where sr.id_usuario = _ID_Usuario))
			ORDER BY b.Clave ASC;
			
		ELSIF _Entidad = 'CEF-1'
		THEN
			RETURN QUERY 
			SELECT DISTINCT  _id_usuario as id_usuario, b.tipo, b.clave AS id, b.cuenta, c.nombre AS descripcion, b.sigcheque AS ref, b.fmt_dep, b.fmt_ret, b.cc, b.status AS estatus, b.saldo, 
        CASE
            WHEN (( SELECT tbl_cont_catalogo_periodos.mes
               FROM tbl_cont_catalogo_periodos
              WHERE tbl_cont_catalogo_periodos.cerrado = 1
              ORDER BY tbl_cont_catalogo_periodos.ano DESC, tbl_cont_catalogo_periodos.mes DESC
             LIMIT 1)) IS NULL AND (( SELECT tbl_cont_catalogo_periodos.ano
               FROM tbl_cont_catalogo_periodos
              WHERE tbl_cont_catalogo_periodos.cerrado = 1
              ORDER BY tbl_cont_catalogo_periodos.ano DESC, tbl_cont_catalogo_periodos.mes DESC
             LIMIT 1)) IS NULL THEN (( SELECT tbl_bancos_cuentas_saldos.saldoini
               FROM tbl_bancos_cuentas_saldos
              WHERE tbl_bancos_cuentas_saldos.mes = (( SELECT tbl_cont_catalogo_periodos.mes
                       FROM tbl_cont_catalogo_periodos
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1)) AND tbl_bancos_cuentas_saldos.ano = (( SELECT tbl_cont_catalogo_periodos.ano
                       FROM tbl_cont_catalogo_periodos
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1)) AND tbl_bancos_cuentas_saldos.tipo = b.tipo AND tbl_bancos_cuentas_saldos.clave = b.clave)) + (( SELECT sum(tbl_bancos_movimientos.deposito) - sum(tbl_bancos_movimientos.retiro)
               FROM tbl_bancos_movimientos
              WHERE tbl_bancos_movimientos.tipo = b.tipo AND tbl_bancos_movimientos.clave = b.clave AND tbl_bancos_movimientos.estatus <> 'C'::bpchar AND (date_part('year'::text, tbl_bancos_movimientos.fecha) = (( SELECT tbl_cont_catalogo_periodos.ano
                       FROM tbl_cont_catalogo_periodos
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1))::double precision AND date_part('month'::text, tbl_bancos_movimientos.fecha) >= (( SELECT tbl_cont_catalogo_periodos.mes
                       FROM tbl_cont_catalogo_periodos
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1))::double precision OR date_part('year'::text, tbl_bancos_movimientos.fecha) > (( SELECT tbl_cont_catalogo_periodos.ano
                       FROM tbl_cont_catalogo_periodos
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1))::double precision)))
            ELSE (( SELECT tbl_bancos_cuentas_saldos.saldoini
               FROM tbl_bancos_cuentas_saldos
              WHERE tbl_bancos_cuentas_saldos.mes = (( SELECT tbl_cont_catalogo_periodos.mes
                       FROM tbl_cont_catalogo_periodos
                      WHERE tbl_cont_catalogo_periodos.cerrado <> 1
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1)) AND tbl_bancos_cuentas_saldos.ano = (( SELECT tbl_cont_catalogo_periodos.ano
                       FROM tbl_cont_catalogo_periodos
                      WHERE tbl_cont_catalogo_periodos.cerrado <> 1
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1)) AND tbl_bancos_cuentas_saldos.tipo = b.tipo AND tbl_bancos_cuentas_saldos.clave = b.clave)) + (( SELECT sum(tbl_bancos_movimientos.deposito) - sum(tbl_bancos_movimientos.retiro)
               FROM tbl_bancos_movimientos
              WHERE tbl_bancos_movimientos.tipo = b.tipo AND tbl_bancos_movimientos.clave = b.clave AND tbl_bancos_movimientos.estatus <> 'C'::bpchar AND (date_part('year'::text, tbl_bancos_movimientos.fecha) = (( SELECT tbl_cont_catalogo_periodos.ano
                       FROM tbl_cont_catalogo_periodos
                      WHERE tbl_cont_catalogo_periodos.cerrado <> 1
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1))::double precision AND date_part('month'::text, tbl_bancos_movimientos.fecha) >= (( SELECT tbl_cont_catalogo_periodos.mes
                       FROM tbl_cont_catalogo_periodos
                      WHERE tbl_cont_catalogo_periodos.cerrado <> 1
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1))::double precision OR date_part('year'::text, tbl_bancos_movimientos.fecha) > (( SELECT tbl_cont_catalogo_periodos.ano
                       FROM tbl_cont_catalogo_periodos
                      WHERE tbl_cont_catalogo_periodos.cerrado <> 1
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1))::double precision)))
        END AS saldototal, 
        CASE
            WHEN (( SELECT tbl_cont_catalogo_periodos.mes
               FROM tbl_cont_catalogo_periodos
              WHERE tbl_cont_catalogo_periodos.cerrado = 1
              ORDER BY tbl_cont_catalogo_periodos.ano DESC, tbl_cont_catalogo_periodos.mes DESC
             LIMIT 1)) IS NULL AND (( SELECT tbl_cont_catalogo_periodos.ano
               FROM tbl_cont_catalogo_periodos
              WHERE tbl_cont_catalogo_periodos.cerrado = 1
              ORDER BY tbl_cont_catalogo_periodos.ano DESC, tbl_cont_catalogo_periodos.mes DESC
             LIMIT 1)) IS NULL THEN (( SELECT tbl_bancos_cuentas_saldos.saldoini
               FROM tbl_bancos_cuentas_saldos
              WHERE tbl_bancos_cuentas_saldos.mes = (( SELECT tbl_cont_catalogo_periodos.mes
                       FROM tbl_cont_catalogo_periodos
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1)) AND tbl_bancos_cuentas_saldos.ano = (( SELECT tbl_cont_catalogo_periodos.ano
                       FROM tbl_cont_catalogo_periodos
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1)) AND tbl_bancos_cuentas_saldos.tipo = b.tipo AND tbl_bancos_cuentas_saldos.clave = b.clave)) + (( SELECT sum(tbl_bancos_movimientos.deposito) - sum(tbl_bancos_movimientos.retiro)
               FROM tbl_bancos_movimientos
              WHERE tbl_bancos_movimientos.tipo = b.tipo AND tbl_bancos_movimientos.clave = b.clave AND tbl_bancos_movimientos.estatus <> 'C'::bpchar AND tbl_bancos_movimientos.estatus <> 'T'::bpchar AND (date_part('year'::text, tbl_bancos_movimientos.fecha) = (( SELECT tbl_cont_catalogo_periodos.ano
                       FROM tbl_cont_catalogo_periodos
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1))::double precision AND date_part('month'::text, tbl_bancos_movimientos.fecha) >= (( SELECT tbl_cont_catalogo_periodos.mes
                       FROM tbl_cont_catalogo_periodos
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1))::double precision OR date_part('year'::text, tbl_bancos_movimientos.fecha) > (( SELECT tbl_cont_catalogo_periodos.ano
                       FROM tbl_cont_catalogo_periodos
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1))::double precision)))
            ELSE (( SELECT tbl_bancos_cuentas_saldos.saldoini
               FROM tbl_bancos_cuentas_saldos
              WHERE tbl_bancos_cuentas_saldos.mes = (( SELECT tbl_cont_catalogo_periodos.mes
                       FROM tbl_cont_catalogo_periodos
                      WHERE tbl_cont_catalogo_periodos.cerrado <> 1
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1)) AND tbl_bancos_cuentas_saldos.ano = (( SELECT tbl_cont_catalogo_periodos.ano
                       FROM tbl_cont_catalogo_periodos
                      WHERE tbl_cont_catalogo_periodos.cerrado <> 1
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1)) AND tbl_bancos_cuentas_saldos.tipo = b.tipo AND tbl_bancos_cuentas_saldos.clave = b.clave)) + (( SELECT sum(tbl_bancos_movimientos.deposito) - sum(tbl_bancos_movimientos.retiro)
               FROM tbl_bancos_movimientos
              WHERE tbl_bancos_movimientos.tipo = b.tipo AND tbl_bancos_movimientos.clave = b.clave AND tbl_bancos_movimientos.estatus <> 'C'::bpchar AND tbl_bancos_movimientos.estatus <> 'T'::bpchar AND (date_part('year'::text, tbl_bancos_movimientos.fecha) = (( SELECT tbl_cont_catalogo_periodos.ano
                       FROM tbl_cont_catalogo_periodos
                      WHERE tbl_cont_catalogo_periodos.cerrado <> 1
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1))::double precision AND date_part('month'::text, tbl_bancos_movimientos.fecha) >= (( SELECT tbl_cont_catalogo_periodos.mes
                       FROM tbl_cont_catalogo_periodos
                      WHERE tbl_cont_catalogo_periodos.cerrado <> 1
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1))::double precision OR date_part('year'::text, tbl_bancos_movimientos.fecha) > (( SELECT tbl_cont_catalogo_periodos.ano
                       FROM tbl_cont_catalogo_periodos
                      WHERE tbl_cont_catalogo_periodos.cerrado <> 1
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1))::double precision)))
        END AS saldoaplicado, 
        CASE
            WHEN (( SELECT sum(tbl_bancos_movimientos.deposito) AS sum
               FROM tbl_bancos_movimientos
              WHERE tbl_bancos_movimientos.tipo = b.tipo AND tbl_bancos_movimientos.clave = b.clave AND tbl_bancos_movimientos.estatus = 'T'::bpchar)) IS NULL THEN 0.0000
            ELSE ( SELECT sum(tbl_bancos_movimientos.deposito) AS sum
               FROM tbl_bancos_movimientos
              WHERE tbl_bancos_movimientos.tipo = b.tipo AND tbl_bancos_movimientos.clave = b.clave AND tbl_bancos_movimientos.estatus = 'T'::bpchar)
        END AS dsbc, 
        CASE
            WHEN (( SELECT sum(tbl_bancos_movimientos.retiro) AS sum
               FROM tbl_bancos_movimientos
              WHERE tbl_bancos_movimientos.tipo = b.tipo AND tbl_bancos_movimientos.clave = b.clave AND tbl_bancos_movimientos.estatus = 'T'::bpchar)) IS NULL THEN 0.0000
            ELSE ( SELECT sum(tbl_bancos_movimientos.retiro) AS sum
               FROM tbl_bancos_movimientos
              WHERE tbl_bancos_movimientos.tipo = b.tipo AND tbl_bancos_movimientos.clave = b.clave AND tbl_bancos_movimientos.estatus = 'T'::bpchar)
        END AS rpc, b.id_moneda, m.tc, b.fijo
			FROM tbl_bancos_cuentas b
				JOIN tbl_usuarios_submodulo_bancos u ON b.tipo = u.tipo AND b.clave = u.clave
				JOIN tbl_cont_catalogo c ON b.cc = c.cuenta
				JOIN tbl_cont_monedas m ON b.id_moneda = m.clave
			WHERE b.Tipo = _Tipo AND b.status <> 'C'::bpchar AND (u.id_usuario = _ID_Usuario OR u.id_usuario IN
				(select sr.ID_Rol from tbl_usuarios_submodulo_roles sr where sr.id_usuario = _ID_Usuario))
			ORDER BY b.Clave ASC
			LIMIT 1;
		ELSE
			RETURN QUERY
			SELECT DISTINCT  _id_usuario as id_usuario, b.tipo, b.clave AS id, b.cuenta, c.nombre AS descripcion, b.sigcheque AS ref, b.fmt_dep, b.fmt_ret, b.cc, b.status AS estatus, b.saldo, 
        CASE
            WHEN (( SELECT tbl_cont_catalogo_periodos.mes
               FROM tbl_cont_catalogo_periodos
              WHERE tbl_cont_catalogo_periodos.cerrado = 1
              ORDER BY tbl_cont_catalogo_periodos.ano DESC, tbl_cont_catalogo_periodos.mes DESC
             LIMIT 1)) IS NULL AND (( SELECT tbl_cont_catalogo_periodos.ano
               FROM tbl_cont_catalogo_periodos
              WHERE tbl_cont_catalogo_periodos.cerrado = 1
              ORDER BY tbl_cont_catalogo_periodos.ano DESC, tbl_cont_catalogo_periodos.mes DESC
             LIMIT 1)) IS NULL THEN (( SELECT tbl_bancos_cuentas_saldos.saldoini
               FROM tbl_bancos_cuentas_saldos
              WHERE tbl_bancos_cuentas_saldos.mes = (( SELECT tbl_cont_catalogo_periodos.mes
                       FROM tbl_cont_catalogo_periodos
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1)) AND tbl_bancos_cuentas_saldos.ano = (( SELECT tbl_cont_catalogo_periodos.ano
                       FROM tbl_cont_catalogo_periodos
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1)) AND tbl_bancos_cuentas_saldos.tipo = b.tipo AND tbl_bancos_cuentas_saldos.clave = b.clave)) + (( SELECT sum(tbl_bancos_movimientos.deposito) - sum(tbl_bancos_movimientos.retiro)
               FROM tbl_bancos_movimientos
              WHERE tbl_bancos_movimientos.tipo = b.tipo AND tbl_bancos_movimientos.clave = b.clave AND tbl_bancos_movimientos.estatus <> 'C'::bpchar AND (date_part('year'::text, tbl_bancos_movimientos.fecha) = (( SELECT tbl_cont_catalogo_periodos.ano
                       FROM tbl_cont_catalogo_periodos
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1))::double precision AND date_part('month'::text, tbl_bancos_movimientos.fecha) >= (( SELECT tbl_cont_catalogo_periodos.mes
                       FROM tbl_cont_catalogo_periodos
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1))::double precision OR date_part('year'::text, tbl_bancos_movimientos.fecha) > (( SELECT tbl_cont_catalogo_periodos.ano
                       FROM tbl_cont_catalogo_periodos
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1))::double precision)))
            ELSE (( SELECT tbl_bancos_cuentas_saldos.saldoini
               FROM tbl_bancos_cuentas_saldos
              WHERE tbl_bancos_cuentas_saldos.mes = (( SELECT tbl_cont_catalogo_periodos.mes
                       FROM tbl_cont_catalogo_periodos
                      WHERE tbl_cont_catalogo_periodos.cerrado <> 1
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1)) AND tbl_bancos_cuentas_saldos.ano = (( SELECT tbl_cont_catalogo_periodos.ano
                       FROM tbl_cont_catalogo_periodos
                      WHERE tbl_cont_catalogo_periodos.cerrado <> 1
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1)) AND tbl_bancos_cuentas_saldos.tipo = b.tipo AND tbl_bancos_cuentas_saldos.clave = b.clave)) + (( SELECT sum(tbl_bancos_movimientos.deposito) - sum(tbl_bancos_movimientos.retiro)
               FROM tbl_bancos_movimientos
              WHERE tbl_bancos_movimientos.tipo = b.tipo AND tbl_bancos_movimientos.clave = b.clave AND tbl_bancos_movimientos.estatus <> 'C'::bpchar AND (date_part('year'::text, tbl_bancos_movimientos.fecha) = (( SELECT tbl_cont_catalogo_periodos.ano
                       FROM tbl_cont_catalogo_periodos
                      WHERE tbl_cont_catalogo_periodos.cerrado <> 1
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1))::double precision AND date_part('month'::text, tbl_bancos_movimientos.fecha) >= (( SELECT tbl_cont_catalogo_periodos.mes
                       FROM tbl_cont_catalogo_periodos
                      WHERE tbl_cont_catalogo_periodos.cerrado <> 1
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1))::double precision OR date_part('year'::text, tbl_bancos_movimientos.fecha) > (( SELECT tbl_cont_catalogo_periodos.ano
                       FROM tbl_cont_catalogo_periodos
                      WHERE tbl_cont_catalogo_periodos.cerrado <> 1
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1))::double precision)))
        END AS saldototal, 
        CASE
            WHEN (( SELECT tbl_cont_catalogo_periodos.mes
               FROM tbl_cont_catalogo_periodos
              WHERE tbl_cont_catalogo_periodos.cerrado = 1
              ORDER BY tbl_cont_catalogo_periodos.ano DESC, tbl_cont_catalogo_periodos.mes DESC
             LIMIT 1)) IS NULL AND (( SELECT tbl_cont_catalogo_periodos.ano
               FROM tbl_cont_catalogo_periodos
              WHERE tbl_cont_catalogo_periodos.cerrado = 1
              ORDER BY tbl_cont_catalogo_periodos.ano DESC, tbl_cont_catalogo_periodos.mes DESC
             LIMIT 1)) IS NULL THEN (( SELECT tbl_bancos_cuentas_saldos.saldoini
               FROM tbl_bancos_cuentas_saldos
              WHERE tbl_bancos_cuentas_saldos.mes = (( SELECT tbl_cont_catalogo_periodos.mes
                       FROM tbl_cont_catalogo_periodos
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1)) AND tbl_bancos_cuentas_saldos.ano = (( SELECT tbl_cont_catalogo_periodos.ano
                       FROM tbl_cont_catalogo_periodos
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1)) AND tbl_bancos_cuentas_saldos.tipo = b.tipo AND tbl_bancos_cuentas_saldos.clave = b.clave)) + (( SELECT sum(tbl_bancos_movimientos.deposito) - sum(tbl_bancos_movimientos.retiro)
               FROM tbl_bancos_movimientos
              WHERE tbl_bancos_movimientos.tipo = b.tipo AND tbl_bancos_movimientos.clave = b.clave AND tbl_bancos_movimientos.estatus <> 'C'::bpchar AND tbl_bancos_movimientos.estatus <> 'T'::bpchar AND (date_part('year'::text, tbl_bancos_movimientos.fecha) = (( SELECT tbl_cont_catalogo_periodos.ano
                       FROM tbl_cont_catalogo_periodos
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1))::double precision AND date_part('month'::text, tbl_bancos_movimientos.fecha) >= (( SELECT tbl_cont_catalogo_periodos.mes
                       FROM tbl_cont_catalogo_periodos
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1))::double precision OR date_part('year'::text, tbl_bancos_movimientos.fecha) > (( SELECT tbl_cont_catalogo_periodos.ano
                       FROM tbl_cont_catalogo_periodos
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1))::double precision)))
            ELSE (( SELECT tbl_bancos_cuentas_saldos.saldoini
               FROM tbl_bancos_cuentas_saldos
              WHERE tbl_bancos_cuentas_saldos.mes = (( SELECT tbl_cont_catalogo_periodos.mes
                       FROM tbl_cont_catalogo_periodos
                      WHERE tbl_cont_catalogo_periodos.cerrado <> 1
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1)) AND tbl_bancos_cuentas_saldos.ano = (( SELECT tbl_cont_catalogo_periodos.ano
                       FROM tbl_cont_catalogo_periodos
                      WHERE tbl_cont_catalogo_periodos.cerrado <> 1
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1)) AND tbl_bancos_cuentas_saldos.tipo = b.tipo AND tbl_bancos_cuentas_saldos.clave = b.clave)) + (( SELECT sum(tbl_bancos_movimientos.deposito) - sum(tbl_bancos_movimientos.retiro)
               FROM tbl_bancos_movimientos
              WHERE tbl_bancos_movimientos.tipo = b.tipo AND tbl_bancos_movimientos.clave = b.clave AND tbl_bancos_movimientos.estatus <> 'C'::bpchar AND tbl_bancos_movimientos.estatus <> 'T'::bpchar AND (date_part('year'::text, tbl_bancos_movimientos.fecha) = (( SELECT tbl_cont_catalogo_periodos.ano
                       FROM tbl_cont_catalogo_periodos
                      WHERE tbl_cont_catalogo_periodos.cerrado <> 1
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1))::double precision AND date_part('month'::text, tbl_bancos_movimientos.fecha) >= (( SELECT tbl_cont_catalogo_periodos.mes
                       FROM tbl_cont_catalogo_periodos
                      WHERE tbl_cont_catalogo_periodos.cerrado <> 1
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1))::double precision OR date_part('year'::text, tbl_bancos_movimientos.fecha) > (( SELECT tbl_cont_catalogo_periodos.ano
                       FROM tbl_cont_catalogo_periodos
                      WHERE tbl_cont_catalogo_periodos.cerrado <> 1
                      ORDER BY tbl_cont_catalogo_periodos.ano, tbl_cont_catalogo_periodos.mes
                     LIMIT 1))::double precision)))
        END AS saldoaplicado, 
        CASE
            WHEN (( SELECT sum(tbl_bancos_movimientos.deposito) AS sum
               FROM tbl_bancos_movimientos
              WHERE tbl_bancos_movimientos.tipo = b.tipo AND tbl_bancos_movimientos.clave = b.clave AND tbl_bancos_movimientos.estatus = 'T'::bpchar)) IS NULL THEN 0.0000
            ELSE ( SELECT sum(tbl_bancos_movimientos.deposito) AS sum
               FROM tbl_bancos_movimientos
              WHERE tbl_bancos_movimientos.tipo = b.tipo AND tbl_bancos_movimientos.clave = b.clave AND tbl_bancos_movimientos.estatus = 'T'::bpchar)
        END AS dsbc, 
        CASE
            WHEN (( SELECT sum(tbl_bancos_movimientos.retiro) AS sum
               FROM tbl_bancos_movimientos
              WHERE tbl_bancos_movimientos.tipo = b.tipo AND tbl_bancos_movimientos.clave = b.clave AND tbl_bancos_movimientos.estatus = 'T'::bpchar)) IS NULL THEN 0.0000
            ELSE ( SELECT sum(tbl_bancos_movimientos.retiro) AS sum
               FROM tbl_bancos_movimientos
              WHERE tbl_bancos_movimientos.tipo = b.tipo AND tbl_bancos_movimientos.clave = b.clave AND tbl_bancos_movimientos.estatus = 'T'::bpchar)
        END AS rpc, b.id_moneda, m.tc, b.fijo
			FROM tbl_bancos_cuentas b
				JOIN tbl_usuarios_submodulo_bancos u ON b.tipo = u.tipo AND b.clave = u.clave
				JOIN tbl_cont_catalogo c ON b.cc = c.cuenta
				JOIN tbl_cont_monedas m ON b.id_moneda = m.clave
			WHERE b.Tipo = _Tipo AND b.status <> 'C'::bpchar AND (u.id_usuario = _ID_Usuario OR u.id_usuario IN
				(select sr.ID_Rol from tbl_usuarios_submodulo_roles sr where sr.id_usuario = _ID_Usuario))  AND b.Clave = _Entidad::smallint;
			
		END IF;
	END IF;
END
$BODY$
  LANGUAGE 'plpgsql';

  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION view_invserv_almacen_movim_modulo_ids(_id_usuario character varying, _entidad character varying, _tipo character)
  RETURNS SETOF record AS
$BODY$  
BEGIN
	IF _ID_Usuario = 'cef-su' OR (select count(*) from tbl_usuarios_submodulo_roles where id_usuario = _id_usuario and id_rol = 'cef-alm') > 0
	THEN
		IF _Entidad = 'CEF-X' -- Regresa todo el set
		THEN
			RETURN QUERY
			SELECT _id_usuario as id_usuario, b.id_bodega, b.nombre, b.numero, b.salida, b.requerimiento, b.plantilla, b.fmt_movimientos, b.fmt_traspasos, b.auditaralm, b.manejostocks, b.cfd
			FROM tbl_invserv_bodegas b
			WHERE b.ID_InvServ = _tipo
			ORDER BY b.ID_Bodega ASC; 
			
		ELSIF _Entidad = 'CEF-1'
		THEN
			RETURN QUERY 
			SELECT _id_usuario as id_usuario, b.id_bodega, b.nombre, b.numero, b.salida, b.requerimiento, b.plantilla, b.fmt_movimientos, b.fmt_traspasos, b.auditaralm, b.manejostocks, b.cfd
			FROM tbl_invserv_bodegas b
			WHERE b.ID_InvServ = _tipo
			ORDER BY b.ID_Bodega ASC
			LIMIT 1;
		ELSE
			RETURN QUERY 
			SELECT _id_usuario as id_usuario, b.id_bodega, b.nombre, b.numero, b.salida, b.requerimiento, b.plantilla, b.fmt_movimientos, b.fmt_traspasos, b.auditaralm, b.manejostocks, b.cfd
			FROM tbl_invserv_bodegas b
			WHERE b.ID_Bodega = _Entidad::smallint;
		END IF;
	ELSE
		IF _Entidad = 'CEF-X' -- Regresa todo el set
		THEN
			RETURN QUERY 
			SELECT DISTINCT  _ID_Usuario as id_usuario, b.id_bodega, b.nombre, b.numero, b.salida, b.requerimiento, b.plantilla, b.fmt_movimientos, b.fmt_traspasos, b.auditaralm, b.manejostocks, b.cfd
			FROM tbl_invserv_bodegas b
				JOIN tbl_usuarios_submodulo_bodegas u ON b.id_bodega = u.id_bodega
			WHERE b.ID_InvServ = _tipo and (u.id_usuario = _ID_Usuario OR u.id_usuario IN
				(select sr.ID_Rol from tbl_usuarios_submodulo_roles sr where sr.id_usuario = _ID_Usuario))
			ORDER BY b.ID_Bodega ASC;
		ELSIF _Entidad = 'CEF-1'
		THEN
			RETURN QUERY 
			SELECT DISTINCT  _ID_Usuario as id_usuario, b.id_bodega, b.nombre, b.numero, b.salida, b.requerimiento, b.plantilla, b.fmt_movimientos, b.fmt_traspasos, b.auditaralm, b.manejostocks, b.cfd
			FROM tbl_invserv_bodegas b
				JOIN tbl_usuarios_submodulo_bodegas u ON b.id_bodega = u.id_bodega
			WHERE b.ID_InvServ = _tipo and (u.id_usuario = _ID_Usuario OR u.id_usuario IN
				(select sr.ID_Rol from tbl_usuarios_submodulo_roles sr where sr.id_usuario = _ID_Usuario))
			ORDER BY b.ID_Bodega ASC
			LIMIT 1;
		ELSE
			RETURN QUERY
			SELECT DISTINCT  _ID_Usuario as id_usuario, b.id_bodega, b.nombre, b.numero, b.salida, b.requerimiento, b.plantilla, b.fmt_movimientos, b.fmt_traspasos, b.auditaralm, b.manejostocks, b.cfd
			FROM tbl_invserv_bodegas b
				JOIN tbl_usuarios_submodulo_bodegas u ON b.id_bodega = u.id_bodega
			WHERE b.ID_InvServ = _tipo and (u.id_usuario = _ID_Usuario OR u.id_usuario IN
				(select sr.ID_Rol from tbl_usuarios_submodulo_roles sr where sr.id_usuario = _ID_Usuario)) AND b.ID_Bodega = _Entidad::smallint;
			
		END IF;
	END IF;
END
$BODY$
  LANGUAGE plpgsql;


--////////////////////////////////////////////////////////////////////////////////////////////
--			ENTIDADES
--////////////////////////////////////////////////////////////////////////////////////////////

INSERT INTO tbl_variables(id_variable, descripcion, ventero, vdecimal, vfecha, valfanumerico, desistema, modulo)
VALUES('STOCKENT', 'INT|-1|2|-|-', 1, null, null, '', '1', 'ALM');

INSERT INTO tbl_variables(id_variable, descripcion, ventero, vdecimal, vfecha, valfanumerico, desistema, modulo)
VALUES('AUDITSAL', 'BOOL|-|-|-|-', 1, null, null, '', '1', 'ALM');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('ADM_ENTIDADES');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('ADM_ENTIDADES_AGREGAR');



--@FIN_BLOQUE
CREATE TABLE tbl_formatos
(
  id_formato character varying(20) NOT NULL,
  descripcion character varying(80) NOT NULL,
  tipo character varying(30) NOT NULL,
  CONSTRAINT pk_tbl_formatos PRIMARY KEY (id_formato),
  CONSTRAINT fk_tbl_formatos_tbl_usuarios_permisos_catalogo FOREIGN KEY (tipo)
      REFERENCES tbl_usuarios_permisos_catalogo (id_permiso) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE
);



--@FIN_BLOQUE
CREATE TABLE tbl_formatos_det
(
  id_formato character varying(20) NOT NULL,
  id_part smallint NOT NULL,
  etiqueta character varying(20) NOT NULL,
  valor character varying(254) NOT NULL,
  xpos numeric(5,2),
  ypos numeric(5,2),
  ancho numeric(5,2),
  alto numeric(5,2),
  formato character(1),
  fgcolor character(6),
  alinhor character varying(20),
  alinver character varying(20),
  CONSTRAINT pk_tbl_formatos_det PRIMARY KEY (id_formato, id_part),
  CONSTRAINT fk_tbl_formatos_det_tbl_formatos FOREIGN KEY (id_formato)
      REFERENCES tbl_formatos (id_formato) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT ck_tbl_formatos_det CHECK (formato = 'C'::bpchar OR formato = 'D'::bpchar OR formato = 'S'::bpchar OR formato = 'F'::bpchar)
);



--@FIN_BLOQUE
CREATE TABLE tbl_vendedores
(
  id_vendedor smallint NOT NULL,
  nombre character varying(80) NOT NULL,
  comision numeric(5,2) NOT NULL,
  status character(1) NOT NULL,
  CONSTRAINT pk_tbl_vendedores PRIMARY KEY (id_vendedor)
);

insert into tbl_vendedores
values('0','----------',0.0,'A');

--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_catalog_vendedores AS 
 SELECT tbl_vendedores.id_vendedor AS clave, tbl_vendedores.nombre AS descripcion, ''::character varying AS especial
   FROM tbl_vendedores;



--@FIN_BLOQUE
CREATE TABLE tbl_ventas_entidades
(
  id_entidadventa smallint NOT NULL,
  id_tipoentidad smallint NOT NULL,
  serie character varying(8) NOT NULL,
  doc integer NOT NULL,
  descripcion character varying(15) NOT NULL,
  formato character varying(20),
  formatomostr character varying(20),
  id_bodega smallint NOT NULL,
  fija bit(1) NOT NULL,
  fijacost bit(1) NOT NULL,
  iva numeric(5,2) NOT NULL,
  desglosemostr bit(1) NOT NULL,
  desgloseclient bit(1) NOT NULL,
  mostraplicapolitica bit(1) NOT NULL,
  imprimesinem bit(1) NOT NULL,
  tipocobro smallint NOT NULL,
  cambionumero bit(1) NOT NULL,
  desdecliente integer NOT NULL,
  hastacliente integer NOT NULL,
  pedido integer NOT NULL,
  ajustedeprecio smallint NOT NULL,
  factordeajuste numeric(5,2) NOT NULL,
  devolucion integer NOT NULL,
  id_vendedor smallint NOT NULL DEFAULT 0,
  fmt_devolucion character varying(20),
  fmt_pedido character varying(20),
  factnumcie integer NOT NULL,
  devnumcie integer NOT NULL,
  remision integer NOT NULL,
  cotizacion integer NOT NULL,
  fmt_remision character varying(20),
  fmt_cotizacion character varying(20),
  cfd bit(2) NOT NULL,
  cfd_noaprobacion integer NOT NULL,
  cfd_nocertificado character varying(20) NOT NULL,
  cfd_id_expedicion smallint,
  cfd_noaprobaciondev integer NOT NULL,
  cfd_nocertificadodev character varying(20) NOT NULL,
  cfd_id_expediciondev smallint,
  cfd_noaprobacionrem integer NOT NULL,
  cfd_nocertificadorem character varying(20) NOT NULL,
  cfd_id_expedicionrem smallint,
  id_clasificacion character varying(10),
  status character(1),
  CONSTRAINT pk_tbl_ventas_entidades PRIMARY KEY (id_entidadventa),
  CONSTRAINT fk_tbl_ventas_entidades_tbl_cont_polizas_clasificaciones FOREIGN KEY (id_clasificacion)
      REFERENCES tbl_cont_polizas_clasificaciones (id_clasificacion) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_tbl_ventas_entidades_tbl_invserv_bodegas FOREIGN KEY (id_bodega)
      REFERENCES tbl_invserv_bodegas (id_bodega) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_tbl_ventas_entidades_tbl_vendedores FOREIGN KEY (id_vendedor)
      REFERENCES tbl_vendedores (id_vendedor) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE SET DEFAULT,
  CONSTRAINT ck_tbl_ventas_entidades_id_tipoentidad CHECK (id_tipoentidad = 0),
  CONSTRAINT ck_tbl_ventas_entidades_status CHECK (status = 'V'::bpchar OR status = 'C'::bpchar)
);



--@FIN_BLOQUE
CREATE TABLE tbl_usuarios_submodulo_ventas
(
  id_usuario character varying(10) NOT NULL,
  id_entidadventa smallint NOT NULL,
  CONSTRAINT pk_tbl_usuarios_submodulo_ventas PRIMARY KEY (id_usuario, id_entidadventa),
  CONSTRAINT fk_tbl_usuarios_submodulo_ventas_tbl_usuarios FOREIGN KEY (id_usuario)
      REFERENCES tbl_usuarios (id_usuario) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_tbl_usuarios_submodulo_ventas_tbl_ventas_entidades FOREIGN KEY (id_entidadventa)
      REFERENCES tbl_ventas_entidades (id_entidadventa) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION
);



--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_usuarios_submodulo_ventas AS 
 SELECT p.id_usuario, c.id_entidadventa, c.descripcion, 
        CASE
            WHEN (( SELECT count(*) AS count
               FROM tbl_usuarios_submodulo_ventas
              WHERE tbl_usuarios_submodulo_ventas.id_usuario::text = p.id_usuario::text AND tbl_usuarios_submodulo_ventas.id_entidadventa = c.id_entidadventa)) = 0 THEN 0
            ELSE 1
        END AS permitido
   FROM tbl_ventas_entidades c, tbl_usuarios p;



--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_ventas_entidades AS 
 SELECT e.id_entidadventa, e.id_tipoentidad, e.serie, e.doc, e.descripcion, e.formato, e.formatomostr, e.id_bodega, b.descripcion AS nombrebodega, e.fija, e.fijacost, e.iva, e.desglosemostr, e.desgloseclient, e.mostraplicapolitica, e.imprimesinem, e.tipocobro, e.cambionumero, e.desdecliente, e.hastacliente, e.pedido, e.ajustedeprecio, e.factordeajuste, e.devolucion, e.id_vendedor, v.nombre AS nombrevendedor, e.fmt_devolucion, e.fmt_pedido, e.factnumcie, e.devnumcie, e.remision, e.cotizacion, e.fmt_remision, e.fmt_cotizacion, e.cfd, e.cfd_noaprobacion, e.cfd_nocertificado, e.cfd_id_expedicion, e.cfd_noaprobaciondev, e.cfd_nocertificadodev, e.cfd_id_expediciondev, e.cfd_noaprobacionrem, e.cfd_nocertificadorem, e.cfd_id_expedicionrem, e.id_clasificacion, e.status
   FROM tbl_ventas_entidades e
   JOIN tbl_invserv_bodegas b ON e.id_bodega = b.id_bodega
   JOIN tbl_vendedores v ON e.id_vendedor = v.id_vendedor;



--@FIN_BLOQUE
CREATE TABLE tbl_bancos_vs_ventas
(
  id_tipobanco smallint NOT NULL,
  id_clavebanco smallint NOT NULL,
  id_entidadventa smallint NOT NULL,
  CONSTRAINT pk_tbl_bancos_vs_ventas PRIMARY KEY (id_tipobanco, id_clavebanco, id_entidadventa),
  CONSTRAINT fk_tbl_bancos_vs_ventas_tbl_bancos_cuentas FOREIGN KEY (id_tipobanco, id_clavebanco)
      REFERENCES tbl_bancos_cuentas (tipo, clave) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_tbl_bancos_vs_ventas_tbl_ventas_entidades FOREIGN KEY (id_entidadventa)
      REFERENCES tbl_ventas_entidades (id_entidadventa) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION
);



--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_bancos_vs_ventas AS 
 SELECT p.id_entidadventa, c.tipo, c.clave, c.cuenta, 
        CASE
            WHEN (( SELECT count(*) AS count
               FROM tbl_bancos_vs_ventas ce
              WHERE ce.id_entidadventa = p.id_entidadventa AND ce.id_tipobanco = c.tipo AND ce.id_clavebanco = c.clave)) = 0 THEN 0
            ELSE 1
        END AS enlazado
   FROM tbl_bancos_cuentas c, tbl_ventas_entidades p
  WHERE c.status <> 'C'::bpchar;



--@FIN_BLOQUE
CREATE TABLE tbl_compras_entidades
(
  id_entidadcompra smallint NOT NULL,
  id_tipoentidad smallint NOT NULL,
  serie character varying(8) NOT NULL,
  doc integer NOT NULL,
  descripcion character varying(80) NOT NULL,
  formato character varying(20),
  id_bodega smallint NOT NULL,
  fija bit(1) NOT NULL,
  fijacost bit(1) NOT NULL,
  devolucion integer NOT NULL,
  orden integer NOT NULL,
  fmt_devolucion character varying(20),
  fmt_orden character varying(20),
  iva numeric(5,2) NOT NULL,
  infoplantoc smallint NOT NULL,
  infogasrec smallint NOT NULL,
  id_clasificacion character varying(10) NOT NULL,
  status character(1) NOT NULL,
  recepcion integer NOT NULL,
  fmt_recepcion character varying(20),
  tipocobro smallint NOT NULL,
  CONSTRAINT pk_tbl_compras_entidades PRIMARY KEY (id_entidadcompra),
  CONSTRAINT fk_tbl_compras_entidades_tbl_cont_polizas_clasificaciones FOREIGN KEY (id_clasificacion)
      REFERENCES tbl_cont_polizas_clasificaciones (id_clasificacion) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_tbl_compras_entidades_tbl_invserv_bodegas FOREIGN KEY (id_bodega)
      REFERENCES tbl_invserv_bodegas (id_bodega) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT ck_tbl_compras_entidades_id_tipoentidad CHECK (id_tipoentidad = 0 OR id_tipoentidad = 2),
  CONSTRAINT ck_tbl_compras_entidades_status CHECK (status = 'V'::bpchar OR status = 'C'::bpchar)
);
--ALTER TABLE tbl_compras_entidades
--  OWNER TO tajab;

--@FIN_BLOQUE
CREATE TABLE tbl_usuarios_submodulo_compras
(
  id_usuario character varying(10) NOT NULL,
  id_entidadcompra smallint NOT NULL,
  CONSTRAINT pk_tbl_usuarios_submodulo_compras PRIMARY KEY (id_usuario, id_entidadcompra),
  CONSTRAINT fk_tbl_usuarios_submodulo_compras_tbl_compras_entidades FOREIGN KEY (id_entidadcompra)
      REFERENCES tbl_compras_entidades (id_entidadcompra) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION,
  CONSTRAINT fk_tbl_usuarios_submodulo_compras_tbl_usuarios FOREIGN KEY (id_usuario)
      REFERENCES tbl_usuarios (id_usuario) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE
);



--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_usuarios_submodulo_compras AS 
 SELECT p.id_usuario, c.id_entidadcompra, c.descripcion, 
        CASE
            WHEN (( SELECT count(*) AS count
               FROM tbl_usuarios_submodulo_compras
              WHERE tbl_usuarios_submodulo_compras.id_usuario::text = p.id_usuario::text AND tbl_usuarios_submodulo_compras.id_entidadcompra = c.id_entidadcompra)) = 0 THEN 0
            ELSE 1
        END AS permitido
   FROM tbl_compras_entidades c, tbl_usuarios p;




--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_compras_entidades AS 
 SELECT e.id_entidadcompra, e.id_tipoentidad, e.serie, e.doc, e.descripcion, e.formato, e.id_bodega, b.descripcion AS nombrebodega, e.fija, e.fijacost, e.devolucion, e.orden, e.fmt_devolucion, e.fmt_orden, e.iva, e.infoplantoc, e.infogasrec, e.id_clasificacion, e.status, e.recepcion, e.fmt_recepcion, e.tipocobro
   FROM tbl_compras_entidades e
   JOIN tbl_invserv_bodegas b ON e.id_bodega = b.id_bodega;

--ALTER TABLE view_compras_entidades
--  OWNER TO [[owner]];

--@FIN_BLOQUE
CREATE TABLE tbl_bancos_vs_compras
(
  id_tipobanco smallint NOT NULL,
  id_clavebanco smallint NOT NULL,
  id_entidadcompra smallint NOT NULL,
  CONSTRAINT pk_tbl_bancos_vs_compras PRIMARY KEY (id_tipobanco, id_clavebanco, id_entidadcompra),
  CONSTRAINT fk_tbl_bancos_vs_compras_tbl_bancos_cuentas FOREIGN KEY (id_tipobanco, id_clavebanco)
      REFERENCES tbl_bancos_cuentas (tipo, clave) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_tbl_bancos_vs_compras_tbl_compras_entidades FOREIGN KEY (id_entidadcompra)
      REFERENCES tbl_compras_entidades (id_entidadcompra) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION
);



--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_bancos_vs_compras AS 
 SELECT p.id_entidadcompra, c.tipo, c.clave, c.cuenta, 
        CASE
            WHEN (( SELECT count(*) AS count
               FROM tbl_bancos_vs_compras ce
              WHERE ce.id_entidadcompra = p.id_entidadcompra AND ce.id_tipobanco = c.tipo AND ce.id_clavebanco = c.clave)) = 0 THEN 0
            ELSE 1
        END AS enlazado
   FROM tbl_bancos_cuentas c, tbl_compras_entidades p
  WHERE c.status <> 'C'::bpchar;



--@FIN_BLOQUE
CREATE TABLE tbl_produccion_entidades
(
  id_entidadprod smallint NOT NULL,
  id_tipoentidad smallint NOT NULL,
  serie character varying(8) NOT NULL,
  doc integer NOT NULL,
  nombre character varying(20) NOT NULL,
  descripcion character varying(80) NOT NULL,
  formato character varying(20),
  id_bodegamp smallint NOT NULL,
  id_bodegapt smallint NOT NULL,
  fija bit(1) NOT NULL,
  id_clasificacion character varying(10) NOT NULL,
  status character(1) NOT NULL,
  CONSTRAINT pk_tbl_produccion_entidades PRIMARY KEY (id_entidadprod),
  CONSTRAINT fk_tbl_produccion_entidades_tbl_cont_polizas_clasificaciones FOREIGN KEY (id_clasificacion)
      REFERENCES tbl_cont_polizas_clasificaciones (id_clasificacion) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_tbl_produccion_entidades_tbl_invserv_bodegas FOREIGN KEY (id_bodegamp)
      REFERENCES tbl_invserv_bodegas (id_bodega) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_tbl_produccion_entidades_tbl_invserv_bodegas1 FOREIGN KEY (id_bodegapt)
      REFERENCES tbl_invserv_bodegas (id_bodega) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT ck_tbl_produccion_entidades_id_tipoentidad CHECK (id_tipoentidad = 1),
  CONSTRAINT ck_tbl_produccion_entidades_status CHECK (status = 'V'::bpchar OR status = 'C'::bpchar)
);



--@FIN_BLOQUE
CREATE TABLE tbl_usuarios_submodulo_produccion
(
  id_usuario character varying(10) NOT NULL,
  id_entidadprod smallint NOT NULL,
  CONSTRAINT pk_tbl_usuarios_submodulo_produccion PRIMARY KEY (id_usuario, id_entidadprod),
  CONSTRAINT fk_tbl_usuarios_submodulo_produccion_tbl_produccion_entidades FOREIGN KEY (id_entidadprod)
      REFERENCES tbl_produccion_entidades (id_entidadprod) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION,
  CONSTRAINT fk_tbl_usuarios_submodulo_produccion_tbl_usuarios FOREIGN KEY (id_usuario)
      REFERENCES tbl_usuarios (id_usuario) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE
);



--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_usuarios_submodulo_produccion AS 
 SELECT p.id_usuario, c.id_entidadprod, c.nombre AS descripcion, 
        CASE
            WHEN (( SELECT count(*) AS count
               FROM tbl_usuarios_submodulo_produccion
              WHERE tbl_usuarios_submodulo_produccion.id_usuario::text = p.id_usuario::text AND tbl_usuarios_submodulo_produccion.id_entidadprod = c.id_entidadprod)) = 0 THEN 0
            ELSE 1
        END AS permitido
   FROM tbl_produccion_entidades c, tbl_usuarios p;




--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_produccion_entidades AS 
 SELECT e.id_entidadprod, e.id_tipoentidad, e.serie, e.doc, e.nombre, e.descripcion, e.formato, e.id_bodegamp, ( SELECT tbl_invserv_bodegas.descripcion
           FROM tbl_invserv_bodegas
          WHERE tbl_invserv_bodegas.id_bodega = e.id_bodegamp) AS nombrebodegamp, e.id_bodegapt, ( SELECT tbl_invserv_bodegas.descripcion
           FROM tbl_invserv_bodegas
          WHERE tbl_invserv_bodegas.id_bodega = e.id_bodegapt) AS nombrebodegapt, e.fija, e.id_clasificacion, e.status
   FROM tbl_produccion_entidades e;



--@FIN_BLOQUE
CREATE TABLE tbl_companias
(
  id_compania smallint NOT NULL,
  id_sucursal smallint NOT NULL,
  descripcion character varying(40) NOT NULL,
  nombre character varying(100) NOT NULL,
  tipo smallint NOT NULL,
  periodo character(3) NOT NULL,
  fmt_nomina character varying(50),
  fmt_recibo character varying(50),
  numero smallint NOT NULL,
  fecha timestamp without time zone NOT NULL,
  contcuentipo smallint NOT NULL,
  contcuenclave smallint NOT NULL,
  fijacuentipo smallint NOT NULL,
  fijacuenclave smallint NOT NULL,
  id_clasificacion character varying(10) NOT NULL,
  status character(1) NOT NULL,
  cfd bit(2) NOT NULL,
  cfd_nocertificado character varying(20) NOT NULL,
  cfd_id_expedicion smallint,
  CONSTRAINT pk_tbl_companias PRIMARY KEY (id_compania , id_sucursal ),
  CONSTRAINT fk_tbl_companias_tbl_cont_polizas_clasificaciones FOREIGN KEY (id_clasificacion)
      REFERENCES tbl_cont_polizas_clasificaciones (id_clasificacion) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT ck_id_compania CHECK (id_compania = 0),
  CONSTRAINT ck_tbl_companias_periodo CHECK (periodo = 'sem'::bpchar OR periodo = 'qui'::bpchar OR periodo = 'men'::bpchar),
  CONSTRAINT ck_tbl_companias_status CHECK (status = 'V'::bpchar OR status = 'C'::bpchar),
  CONSTRAINT ck_tbl_companias_tipo CHECK (tipo = 1 OR tipo = 2)
);



--@FIN_BLOQUE
CREATE TABLE tbl_usuarios_submodulo_nomina
(
  id_usuario character varying(10) NOT NULL,
  id_compania smallint NOT NULL,
  id_sucursal smallint NOT NULL,
  CONSTRAINT pk_tbl_usuarios_submodulo_nomina PRIMARY KEY (id_usuario, id_compania, id_sucursal),
  CONSTRAINT fk_tbl_usuarios_submodulo_companias_tbl_usuarios FOREIGN KEY (id_usuario)
      REFERENCES tbl_usuarios (id_usuario) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_tbl_usuarios_submodulo_nomina_tbl_companias FOREIGN KEY (id_compania, id_sucursal)
      REFERENCES tbl_companias (id_compania, id_sucursal) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION
);



--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_usuarios_submodulo_nomina AS 
 SELECT p.id_usuario, c.id_compania, c.id_sucursal, c.descripcion, 
        CASE
            WHEN (( SELECT count(*) AS count
               FROM tbl_usuarios_submodulo_nomina
              WHERE tbl_usuarios_submodulo_nomina.id_usuario::text = p.id_usuario::text AND tbl_usuarios_submodulo_nomina.id_compania = c.id_compania AND tbl_usuarios_submodulo_nomina.id_sucursal = c.id_sucursal)) = 0 THEN 0
            ELSE 1
        END AS permitido
   FROM tbl_companias c, tbl_usuarios p;



--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_usuarios_submodulo_blocks AS 
 SELECT p.id_usuario, c.id_block, c.etiqueta, 
        CASE
            WHEN (( SELECT count(*) AS count
               FROM tbl_usuarios_submodulo_blocks
              WHERE tbl_usuarios_submodulo_blocks.id_usuario::text = p.id_usuario::text AND tbl_usuarios_submodulo_blocks.id_block = c.id_block)) = 0 THEN 0
            ELSE 1
        END AS permitido
   FROM tbl_notas_blocks c, tbl_usuarios p;


  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_bancos_cuentas_agregar(
    _tipo smallint,
    _clave smallint,
    _cuenta character varying,
    _sigcheque integer,
    _fmt_dep character varying,
    _fmt_ret character varying,
    _cc character,
    _status character,
    _fijo bit,
    _tipotrasp smallint,
    _clavetrasp smallint,
    _todotrasp bit,
    _ultimonumtrasp integer,
    _fondotrasp numeric,
    _idmoneda smallint,
    _idclasificacion character varying,
    _descripcion character varying,
    _id_satbanco character,
    _bancoext character varying)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255); _ProxCierre int;
BEGIN
	_err := 0;
	_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ADM_ENTIDADES' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCOK');--'La cuenta se ha registrado satisfactoriamente';
	_ProxCierre := ( select Max(ID_Cierre) from TBL_CAJAS_CIERRE ) + 1;
	IF _ProxCierre is null
	THEN 
		_ProxCierre = 1;
	END IF;
	
	IF(select count(*) from TBL_BANCOS_CUENTAS where Tipo = _tipo and Clave = _clave) > 0
	THEN
		_err := 3;
		_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ADM_ENTIDADES' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR');--'ERROR: La clave ya existe en orto registro, no se puede agregar';
	END IF;

	IF _err = 0
	THEN
		INSERT INTO TBL_BANCOS_CUENTAS
		VALUES(_tipo, _clave, _cuenta, _sigcheque, _fmt_dep, _fmt_ret, _cc, _status, 0.00, _fijo, _tipoTRASP, _claveTRASP, _todoTRASP, _ultimoNumTRASP, _fondoTRASP, _idMoneda, _idClasificacion, _descripcion, _id_satbanco, _bancoext);
	
		-- inserta en los saldos mensuales de cuentas
		INSERT INTO TBL_BANCOS_CUENTAS_SALDOS
		SELECT Mes, Ano, _tipo, _clave, 0.00, 0.00
		FROM TBL_CONT_CATALOGO_PERIODOS
		WHERE Mes <> 13;
	
		-- INSERTA LOS CUADRES DE ENTIDADES DE CAJA ABIERTOS
		IF _tipo = 1 -- Se trata de cajas
		THEN
			INSERT INTO TBL_CAJAS_CIERRE	
			VALUES( _ProxCierre, 0, _tipo, _clave, now(), ('ABIERTO DE CAJA ' || _cuenta), 'A');
		END IF;

	END IF;

	RETURN QUERY SELECT _err, _result, _clave::varchar;

END
$BODY$
  LANGUAGE plpgsql;
  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_bancos_cuentas_cambiar(
    _tipo smallint,
    _clave smallint,
    _cuenta character varying,
    _sigcheque integer,
    _fmt_dep character varying,
    _fmt_ret character varying,
    _cc character,
    _status character,
    _fijo bit,
    _tipotrasp smallint,
    _clavetrasp smallint,
    _todotrasp bit,
    _ultimonumtrasp integer,
    _fondotrasp numeric,
    _idmoneda smallint,
    _idclasificacion character varying,
    _descripcion character varying,
    _id_satbanco character,
    _bancoext character varying)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255); _ProxCierre int;
BEGIN
	_err := 0;
	_result := (select msj2 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ADM_ENTIDADES' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCOK');--'La cuenta se cambio satisfactoriamente';
	
	IF(select count(*) from TBL_BANCOS_CUENTAS where Tipo = _tipo and Clave = _clave) < 1
	THEN
		_err := 3;
		_result := (select msj2 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ADM_ENTIDADES' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR');--'ERROR: La clave no existe en ning?n otro registro, no se puede cambiar';
	END IF;

	IF _err = 0
	THEN
		UPDATE TBL_BANCOS_CUENTAS
		SET Cuenta = _cuenta, SigCheque = _SigCheque, Fmt_Dep = _fmt_dep,  Fmt_Ret = _fmt_ret, CC = _cc, Status = _status, Fijo = _fijo,
				TipoTRASP = _tipoTRASP, ClaveTRASP = _claveTRASP, TodoTRASP = _todoTRASP, UltimoNumTRASP = _ultimoNumTRASP, FondoTRASP = _fondoTRASP, ID_Moneda = _idMoneda,
				ID_Clasificacion = _idClasificacion, Descripcion = _descripcion, ID_SatBanco = _id_SatBanco, BancoExt = _bancoExt
		WHERE Tipo = _tipo and Clave = _clave;
	
	END IF;

	RETURN QUERY SELECT _err, _result, _clave::varchar;

END
$BODY$
  LANGUAGE plpgsql;
  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_invserv_bodegas_agregar(_id_bodega smallint, _nombre character varying, _descripcion character varying, _numero integer, _salida integer, _requerimiento integer, _plantilla integer, _fmt_movimientos character varying, _fmt_traspasos character varying, _fmt_requerimientos character varying, _fmt_plantilla character varying, _cfd bit, _cfd_noaprobacion integer, _cfd_nocertificado character varying, _cfd_id_expedicion smallint, _cfd_id_receptor smallint, _id_invserv character, _id_clasificacion character varying, _numchfis integer, _status character, _fmt_chfis character varying, _fija bit)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255); _AuditarAlm bit; _ManejoStocks smallint;
BEGIN
	_err := 0;
	_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ADM_ENTIDADES' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCOK');--'La bodega se ha registrado satisfactoriamente';
	_ManejoStocks := ( select ventero from TBL_VARIABLES where ID_Variable = 'STOCKENT' );
	_AuditarAlm := case when ( select ventero from TBL_VARIABLES where ID_Variable = 'AUDITSAL' ) = 1 then '1' else '0' end;

	IF(select count(*) from TBL_INVSERV_BODEGAS where ID_Bodega = _ID_Bodega) > 0
	THEN
		_err := 3;
		_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ADM_ENTIDADES' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR');--'ERROR: Esta bodega ya existe, no se puede agregar';
	END IF;

	IF _err = 0
	THEN
		INSERT INTO TBL_INVSERV_BODEGAS
		VALUES(_ID_Bodega, _ID_InvServ, _Nombre, _Descripcion, _Numero, _Salida, _Fmt_Movimientos, _Fmt_Traspasos, 
			_AuditarAlm, _ManejoStocks, _Requerimiento, _Fmt_Requerimientos, _Plantilla, _Fmt_Plantilla,
			_CFD, _CFD_NoAprobacion, _CFD_NoCertificado, _CFD_ID_Expedicion, _CFD_ID_Receptor,
			_id_clasificacion, _numchfis, _status, _fmt_chfis, _fija);
		
		--Inicia el almacen a 0 en todos los productos de esta bodega
		insert into TBL_INVSERV_EXISTENCIAS
		select _ID_Bodega, ID_Prod, 0, 0, 0
		from TBL_INVSERV_INVENTARIOS;
		
		--Inicia el historico de las existencias de esta bodega de todos los meses inicial y final a 0
		insert into TBL_INVSERV_EXISTENCIAS_PERIODOS
		select p.Mes, p.Ano, _ID_Bodega, i.ID_Prod, 0, 0
		from TBL_CONT_CATALOGO_PERIODOS p, TBL_INVSERV_INVENTARIOS i
		where p.Mes <> 13;
		
	END IF;

	RETURN QUERY SELECT _err, _result, _id_bodega::varchar;

END
$BODY$
  LANGUAGE plpgsql;

  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_invserv_bodegas_cambiar(_id_bodega smallint, _nombre character varying, _descripcion character varying, _numero integer, _salida integer, _requerimiento integer, _plantilla integer, _fmt_movimientos character varying, _fmt_traspasos character varying, _fmt_requerimientos character varying, _fmt_plantilla character varying, _cfd bit, _cfd_noaprobacion integer, _cfd_nocertificado character varying, _cfd_id_expedicion smallint, _cfd_id_receptor smallint, _id_invserv character, _id_clasificacion character varying, _numchfis integer, _status character, _fmt_chfis character varying, _fija bit)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255);
BEGIN
	_err := 0;
	_result := (select msj2 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ADM_ENTIDADES' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCOK');--'La bodega se cambi√≥ satisfactoriamente';
	
	IF(select count(*) from TBL_INVSERV_BODEGAS where ID_Bodega = _ID_Bodega) < 1
	THEN
		_err := 3;
		_result := (select msj2 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ADM_ENTIDADES' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR');--'ERROR: Esta bodega no existe, no se puede cambiar';
	END IF;

	IF _err = 0
	THEN
		UPDATE TBL_INVSERV_BODEGAS
		SET Nombre = _Nombre, Descripcion = _Descripcion, Numero = _Numero, Salida = _Salida, 
			Fmt_Movimientos = _Fmt_Movimientos, Fmt_Traspasos = _Fmt_Traspasos, Requerimiento = _Requerimiento, Plantilla = _Plantilla,
			Fmt_Requerimientos = _Fmt_Requerimientos, Fmt_Plantilla = _Fmt_Plantilla,
			CFD = _CFD, CFD_NoAprobacion = _CFD_NoAprobacion, CFD_NoCertificado = _CFD_NoCertificado, CFD_ID_Expedicion = _CFD_ID_Expedicion, CFD_ID_Receptor = _CFD_ID_Receptor,
			ID_Clasificacion = _ID_Clasificacion, NumChFis = _NumChFis, Status = _Status, Fmt_ChFis = _Fmt_ChFis, Fija = _Fija
		WHERE ID_Bodega = _ID_Bodega;
		
	END IF;

	RETURN QUERY SELECT _err, _result, _id_bodega::varchar;

END
$BODY$
  LANGUAGE plpgsql;

  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_compras_entidades_agregar(
    _id_entidadcompra smallint,
    _id_tipoentidad smallint,
    _serie character varying,
    _doc integer,
    _descripcion character varying,
    _formato character varying,
    _id_bodega smallint,
    _fija bit,
    _fijacost bit,
    _devolucion integer,
    _orden integer,
    _fmt_devolucion character varying,
    _fmt_orden character varying,
    _iva numeric,
    _infoplantoc smallint,
    _infogasrec smallint,
    _id_clasificacion character varying,
    _status character,
    _recepcion integer,
    _fmt_recepcion character varying,
    _tipocobro smallint)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255); _Numero smallint;
BEGIN
	_err := 0;
	_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ADM_ENTIDADES' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCOK');--'La entidad de compra/gasto se registr√≥ correctamente';

	IF(select count(*) from TBL_COMPRAS_ENTIDADES where ID_EntidadCompra = _ID_EntidadCompra) > 0 
	THEN
		_err := 3;
		_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ADM_ENTIDADES' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR');--'ERROR: La clave de la entidad ya existe en otro registro';
	END IF; 

	IF(select count(*) from TBL_COMPRAS_ENTIDADES where ID_TipoEntidad = _ID_TipoEntidad and Serie = _Serie) > 0 
	THEN
		_err := 3;
		_result := (select msj3 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ADM_ENTIDADES' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR');--'ERROR: Ya existe la serie para este tipo de documento';
	END IF;

	--Verifica si la bodega es compatible con la entidad que se va a agregar 
	IF _ID_TipoEntidad = 0
	THEN
		IF(select count(*) from TBL_INVSERV_BODEGAS where ID_Bodega = _ID_Bodega and ID_InvServ = 'P') < 1
		THEN
			_err := 3;
			_result := (select msj4 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ADM_ENTIDADES' and m.sub::text = 'DLG' and m.elm::text = 'MSJ-PROCERR3');
		END IF;
	ELSE
		IF(select count(*) from TBL_INVSERV_BODEGAS where ID_Bodega = _ID_Bodega and ID_InvServ = 'G') < 1
		THEN
			_err := 3;
			_result := (select msj4 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ADM_ENTIDADES' and m.sub::text = 'DLG' and m.elm::text = 'MSJ-PROCERR3');
		END IF;
	END IF;
	
	IF _err = 0
	THEN
		INSERT INTO TBL_COMPRAS_ENTIDADES
		VALUES(_ID_EntidadCompra, _ID_TipoEntidad, _Serie, _Doc, _Descripcion, _Formato, _ID_Bodega, _Fija, _FijaCost, _Devolucion, _Orden, _Fmt_Devolucion, _Fmt_Orden, _IVA, _InfoPlantOC, _InfoGasRec, _ID_Clasificacion, _Status, _Recepcion, _Fmt_Recepcion, _TipoCobro);
		
		-- INSERTA LOS ENLACES
		INSERT INTO TBL_BANCOS_VS_COMPRAS
		SELECT Tipo, Clave, _ID_EntidadCompra
		FROM _TMP_BANCOS_VS_COMPRAS;

	END IF;

	RETURN QUERY SELECT _err, _result, _ID_EntidadCompra::varchar;

END
$BODY$
  LANGUAGE plpgsql;
--ALTER FUNCTION sp_compras_entidades_agregar(smallint, smallint, character varying, integer, character varying, character varying, smallint, bit, bit,   -- OWNER TO [[owner]];

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_compras_entidades_cambiar(
    _id_entidadcompra smallint,
    _id_tipoentidad smallint,
    _serie character varying,
    _doc integer,
    _descripcion character varying,
    _formato character varying,
    _id_bodega smallint,
    _fija bit,
    _fijacost bit,
    _devolucion integer,
    _orden integer,
    _fmt_devolucion character varying,
    _fmt_orden character varying,
    _iva numeric,
    _infoplantoc smallint,
    _infogasrec smallint,
    _id_clasificacion character varying,
    _status character,
    _recepcion integer,
    _fmt_recepcion character varying,
    _tipocobro smallint)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255); 
BEGIN
	_err := 0;
	_result := (select msj2 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ADM_ENTIDADES' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCOK');--'La entidad de compra/gasto se registr√≥ correctamente';

	IF(select count(*) from TBL_COMPRAS_ENTIDADES where ID_EntidadCompra = _ID_EntidadCompra) < 1
	THEN
		_err := 3;
		_result := (select msj2 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ADM_ENTIDADES' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR');--'ERROR: La clave de la entidad No existe, no se puede cambiar';
	END IF; 

	IF(select count(*) from TBL_COMPRAS_ENTIDADES where ID_EntidadCompra <> _ID_EntidadCompra and ID_TipoEntidad = _ID_TipoEntidad and Serie = _Serie) > 0 
	THEN
		_err := 3;
		_result := (select msj3 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ADM_ENTIDADES' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR');--'ERROR: Ya existe la serie para este tipo de documento, no se puede cambiar';
	END IF;

	IF (select ID_TipoEntidad from TBL_COMPRAS_ENTIDADES where ID_EntidadCompra = _ID_EntidadCompra) = 0
	THEN
		IF(select count(*) from TBL_INVSERV_BODEGAS where ID_Bodega = _ID_Bodega and ID_InvServ = 'P') < 1
		THEN
			_err := 3;
			_result := (select msj4 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ADM_ENTIDADES' and m.sub::text = 'DLG' and m.elm::text = 'MSJ-PROCERR3');
		END IF;
	ELSE
		IF(select count(*) from TBL_INVSERV_BODEGAS where ID_Bodega = _ID_Bodega and ID_InvServ = 'G') < 1
		THEN
			_err := 3;
			_result := (select msj4 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ADM_ENTIDADES' and m.sub::text = 'DLG' and m.elm::text = 'MSJ-PROCERR3');
		END IF;
	END IF;

	IF _err = 0
	THEN
		DELETE FROM TBL_BANCOS_VS_COMPRAS
		WHERE ID_EntidadCompra = _ID_EntidadCompra;
		
		UPDATE TBL_COMPRAS_ENTIDADES
		SET Serie = _Serie, Doc = _Doc, Descripcion = _Descripcion,  Formato = _Formato, ID_Bodega = _ID_Bodega, Fija = _Fija, FijaCost = _FijaCost, 
				Devolucion = _Devolucion, Orden = _Orden, Fmt_Devolucion = _Fmt_Devolucion, Fmt_Orden = _Fmt_Orden, IVA = _IVA, 
				InfoPlantOC = _InfoPlantOC, InfoGasRec = _InfoGasRec,
				ID_Clasificacion = _ID_Clasificacion, Status = _Status,
				Recepcion = _Recepcion, Fmt_Recepcion = _Fmt_Recepcion, TipoCobro = _TipoCobro
		WHERE ID_EntidadCompra = _ID_EntidadCompra;
		
		-- INSERTA LOS ENLACES
		INSERT INTO TBL_BANCOS_VS_COMPRAS
		SELECT Tipo, Clave, _ID_EntidadCompra
		FROM _TMP_BANCOS_VS_COMPRAS;

	END IF;

	RETURN QUERY SELECT _err, _result, _ID_EntidadCompra::varchar;

END
$BODY$
  LANGUAGE plpgsql;
--ALTER FUNCTION sp_compras_entidades_cambiar(smallint, smallint, character varying, integer, character varying, character varying, smallint,  
  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_ventas_entidades_agregar(_id_entidadventa smallint, _serie character varying, _doc integer, _descripcion character varying, _formato character varying, _formatomostr character varying, _id_bodega smallint, _fija bit, _fijacost bit, _desglose bit, _mostraplicapolitica bit, _tipocobro smallint, _cambionumero bit, _pedido integer, _ajustedeprecio smallint, _factordeajuste numeric, _devolucion integer, _id_vendedor smallint, _fmt_devolucion character varying, _fmt_pedido character varying, _factnumcie integer, _devnumcie integer, _iva numeric, _remision integer, _cotizacion integer, _fmt_remision character varying, _fmt_cotizacion character varying, _cfd bit, _cfd_noaprobacion integer, _cfd_nocertificado character varying, _cfd_id_expedicion smallint, _cfd_noaprobaciondev integer, _cfd_nocertificadodev character varying, _cfd_id_expediciondev smallint, _cfd_noaprobacionrem integer, _cfd_nocertificadorem character varying, _cfd_id_expedicionrem smallint, _id_clasificacion character 
varying, _status character)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255); _Numero smallint;
BEGIN
	_err := 0;
	_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ADM_ENTIDADES' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCOK'); --'La entidad de compra/gasto se registr√≥ correctamente';

	IF(select count(*) from TBL_VENTAS_ENTIDADES where ID_EntidadVenta = _ID_EntidadVenta) > 0 
	THEN
		_err := 3;
		_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ADM_ENTIDADES' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR');--'ERROR: La clave de la entidad ya existe en otro registro';
	END IF; 

	IF(select count(*) from TBL_VENTAS_ENTIDADES where Serie = _Serie) > 0 
	THEN
		_err := 3;
		_result := (select msj3 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ADM_ENTIDADES' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'ERROR: Ya existe la serie para este tipo de documento';
	END IF;

	IF _err = 0
	THEN
	
		INSERT INTO TBL_VENTAS_ENTIDADES
		VALUES(_ID_EntidadVenta, 0, _Serie, _Doc, _Descripcion, _Formato, _FormatoMOSTR, _ID_Bodega, _Fija, _FijaCost, _IVA,
			_Desglose, _Desglose, _MostrAplicaPolitica, '1', _TipoCobro, _CambioNumero, 0, 0, _Pedido, _AjusteDePrecio, _FactorDeAjuste, 
			_Devolucion, _ID_Vendedor, _Fmt_Devolucion, _Fmt_Pedido, _FactNumCIE, _DevNumCIE, _Remision, _Cotizacion, _Fmt_Remision, _Fmt_Cotizacion,
			_CFD, _CFD_NoAprobacion, _CFD_NoCertificado, _CFD_ID_Expedicion,
				_CFD_NoAprobacionDev, _CFD_NoCertificadoDev, _CFD_ID_ExpedicionDev,
				_CFD_NoAprobacionRem, _CFD_NoCertificadoRem, _CFD_ID_ExpedicionRem,
					_ID_Clasificacion, _Status);
		
		-- INSERTA LOS ENLACES
		INSERT INTO TBL_BANCOS_VS_VENTAS
		SELECT Tipo, Clave, _ID_EntidadVenta
		FROM _TMP_BANCOS_VS_VENTAS;

	END IF;

	RETURN QUERY SELECT _err, _result, _ID_EntidadVenta::varchar;

END
$BODY$
  LANGUAGE 'plpgsql';


  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_ventas_entidades_cambiar(_id_entidadventa smallint, _serie character varying, _doc integer, _descripcion character varying, _formato character varying, _formatomostr character varying, _id_bodega smallint, _fija bit, _fijacost bit, _desglose bit, _mostraplicapolitica bit, _tipocobro smallint, _cambionumero bit, _pedido integer, _ajustedeprecio smallint, _factordeajuste numeric, _devolucion integer, _id_vendedor smallint, _fmt_devolucion character varying, _fmt_pedido character varying, _factnumcie integer, _devnumcie integer, _iva numeric, _remision integer, _cotizacion integer, _fmt_remision character varying, _fmt_cotizacion character varying, _cfd bit, _cfd_noaprobacion integer, _cfd_nocertificado character varying, _cfd_id_expedicion smallint, _cfd_noaprobaciondev integer, _cfd_nocertificadodev character varying, _cfd_id_expediciondev smallint, _cfd_noaprobacionrem integer, _cfd_nocertificadorem character varying, _cfd_id_expedicionrem smallint, _id_clasificacion character 
varying, _status character)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255); 
BEGIN
	_err := 0;
	_result := (select msj2 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ADM_ENTIDADES' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCOK');--'La entidad de venta se cambi√≥ correctamente';

	IF(select count(*) from TBL_VENTAS_ENTIDADES where ID_EntidadVenta = _ID_EntidadVenta) < 1
	THEN
		_err := 3;
		_result := (select msj2 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ADM_ENTIDADES' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR');--'ERROR: La clave de la entidad No existe, no se puede cambiar';
	END IF; 

	IF(select count(*) from TBL_VENTAS_ENTIDADES where ID_EntidadVenta <> _ID_EntidadVenta and Serie = _Serie) > 0 
	THEN
		_err := 3;
		_result := (select msj3 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ADM_ENTIDADES' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR');--'ERROR: Ya existe la serie para este tipo de entidad, no se puede cambiar';
	END IF;

	IF _err = 0
	THEN
		DELETE FROM TBL_BANCOS_VS_VENTAS
		WHERE ID_EntidadVenta = _ID_EntidadVenta;
		
		UPDATE TBL_VENTAS_ENTIDADES
		SET Serie = _Serie, Doc = _Doc, Descripcion = _Descripcion, Formato = _Formato, FormatoMOSTR = _FormatoMOSTR, ID_Bodega = _ID_Bodega, Fija = _Fija, 
				FijaCost = _FijaCost, IVA = _IVA, DesgloseMostr = _Desglose, DesgloseClient = _Desglose, MostrAplicaPolitica = _MostrAplicaPolitica, 
				TipoCobro = _TipoCobro, CambioNumero = _CambioNumero, Pedido = _Pedido, AjusteDePrecio = _AjusteDePrecio, FactorDeAjuste = _FactorDeAjuste, 
				Devolucion = _Devolucion, ID_Vendedor = _ID_Vendedor, Fmt_Devolucion = _Fmt_Devolucion, Fmt_Pedido = _Fmt_Pedido,
				FactNumCIE = _FactNumCIE, DevNumCIE = _DevNumCIE, Remision = _Remision, Cotizacion = _Cotizacion, Fmt_Remision = _Fmt_Remision, Fmt_Cotizacion = _Fmt_Cotizacion, 
				CFD = _CFD, CFD_NoAprobacion = _CFD_NoAprobacion, CFD_NoCertificado = _CFD_NoCertificado, CFD_ID_Expedicion = _CFD_ID_Expedicion,
					CFD_NoAprobacionDev = _CFD_NoAprobacionDev, CFD_NoCertificadoDev = _CFD_NoCertificadoDev, CFD_ID_ExpedicionDev = _CFD_ID_ExpedicionDev,
					CFD_NoAprobacionRem = _CFD_NoAprobacionRem, CFD_NoCertificadoRem = _CFD_NoCertificadoRem, CFD_ID_ExpedicionRem = _CFD_ID_ExpedicionRem, 
						ID_Clasificacion = _ID_Clasificacion, Status = _Status
		WHERE ID_EntidadVenta = _ID_EntidadVenta;
		
		-- INSERTA LOS ENLACES
		INSERT INTO TBL_BANCOS_VS_VENTAS
		SELECT Tipo, Clave, _ID_EntidadVenta
		FROM _TMP_BANCOS_VS_VENTAS;

	END IF;

	RETURN QUERY SELECT _err, _result, _ID_EntidadVenta::varchar;

END
$BODY$
  LANGUAGE 'plpgsql';

  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_prod_entidades_agregar(_id_entidadprod smallint, _serie character varying, _doc integer, _nombre character varying, _descripcion character varying, _formato character varying, _id_bodegamp smallint, _id_bodegapt smallint, _id_clasificacion character varying, _status character)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255);
BEGIN
	_err := 0;
	_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ADM_ENTIDADES' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCOK');--'La entidad se agreg√≥ satisfactoriamente';
	
	IF(select count(*) from TBL_PRODUCCION_ENTIDADES where ID_EntidadProd = _ID_EntidadProd ) > 0
	THEN
		_err := 3;
		_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ADM_ENTIDADES' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR');--'ERROR: Ya existe la clave de entidad';
	END IF;

	IF(select count(*) from TBL_PRODUCCION_ENTIDADES where Serie = _Serie) > 0 
	THEN
		_err := 3;
		_result := (select msj3 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ADM_ENTIDADES' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'ERROR: Ya existe la serie para este tipo de documento';
	END IF;

	IF _err = 0
	THEN
		INSERT INTO TBL_PRODUCCION_ENTIDADES
		VALUES(_ID_EntidadProd, '1', _Serie, _Doc, _Nombre, _Descripcion, _Formato, _ID_BodegaMP, _ID_BodegaPT, '0', _ID_Clasificacion, _Status);
	END IF;

		
	RETURN QUERY SELECT _err, _result, _id_entidadprod::varchar;

END
$BODY$
  LANGUAGE 'plpgsql';

  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_prod_entidades_cambiar(_id_entidadprod smallint, _serie character varying, _doc integer, _nombre character varying, _descripcion character varying, _formato character varying, _id_bodegamp smallint, _id_bodegapt smallint, _id_clasificacion character varying, _status character)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255);
BEGIN
	_err := 0;
	_result := (select msj2 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ADM_ENTIDADES' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCOK');--'La entidad se cambio satisfactoriamente';
	
	IF(select count(*) from TBL_PRODUCCION_ENTIDADES where ID_EntidadProd = _ID_EntidadProd ) < 1
	THEN
		_err := 3;
		_result := (select msj2 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ADM_ENTIDADES' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR');--'ERROR: No existe la clave de entidad, no se puede cambiar';
	END IF;
	
	IF(select count(*) from TBL_PRODUCCION_ENTIDADES where ID_EntidadProd <> _ID_EntidadProd and Serie = _Serie) > 0 
	THEN
		_err := 3;
		_result := (select msj3 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ADM_ENTIDADES' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR');--'ERROR: Ya existe la serie para este tipo de entidad, no se puede cambiar';
	END IF;

	IF _err = 0
	THEN
		UPDATE TBL_PRODUCCION_ENTIDADES
		SET Serie = _Serie, Doc = _Doc, Nombre = _Nombre, Descripcion = _Descripcion, Formato = _Formato, 
			ID_BodegaMP = _ID_BodegaMP, ID_BodegaPT = _ID_BodegaPT, ID_Clasificacion = _ID_Clasificacion, Status = _Status
		WHERE ID_EntidadProd = _ID_EntidadProd;
	END IF;

		
	RETURN QUERY SELECT _err, _result, _id_entidadprod::varchar;

END
$BODY$
  LANGUAGE 'plpgsql';

  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_companias_agregar(_id_sucursal smallint, _descripcion character varying, _nombre character varying, _tipo smallint, _periodo character, _fmt_nomina character varying, _fmt_recibo character varying, _numero smallint, _fecha timestamp without time zone, _contcuentipo smallint, _contcuenclave smallint, _fijacuentipo smallint, _fijacuenclave smallint, _id_clasificacion character varying, _status character, _cfd bit, _cfd_nocertificado character varying, _cfd_id_expedicion smallint)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255);
BEGIN
	_err := 0;
	_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ADM_ENTIDADES' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCOK');--'La nomina se dio de alta satisfactoriamente';
	
	IF(select count(*) from TBL_COMPANIAS where ID_Compania = 0 and ID_Sucursal = _ID_Sucursal ) > 0
	THEN
		_err := 3;
		_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ADM_ENTIDADES' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR');--'ERROR: Ya existe la clave de nomina';
	END IF;
	
	IF _err = 0
	THEN
		INSERT INTO TBL_COMPANIAS
		VALUES( 0, _ID_Sucursal, _Descripcion, _Nombre, _Tipo, _Periodo, _Fmt_Nomina, _Fmt_Recibo, _Numero, _Fecha,
			_ContCuenTipo, _ContCuenClave, _FijaCuenTipo, _FijaCuenClave, _ID_Clasificacion, _Status, _cfd, _cfd_nocertificado, _cfd_id_expedicion );
		
	END IF;
		
	RETURN QUERY SELECT _err, _result, _id_sucursal::varchar;

END
$BODY$
  LANGUAGE plpgsql;

  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_companias_cambiar(_id_sucursal smallint, _descripcion character varying, _nombre character varying, _tipo smallint, _periodo character, _fmt_nomina character varying, _fmt_recibo character varying, _numero smallint, _fecha timestamp without time zone, _contcuentipo smallint, _contcuenclave smallint, _fijacuentipo smallint, _fijacuenclave smallint, _id_clasificacion character varying, _status character, _cfd bit, _cfd_nocertificado character varying, _cfd_id_expedicion smallint)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255);
BEGIN
	_err := 0;
	_result := (select msj2 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ADM_ENTIDADES' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCOK');--'La nomina se cambio con exito';
	
	IF(select count(*) from TBL_COMPANIAS where ID_Compania = 0 and ID_Sucursal = _ID_Sucursal ) < 1
	THEN
		_err := 3;
		_result := (select msj2 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ADM_ENTIDADES' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR');--'ERROR: No existe la clave de nomina, no se puede cambiar';
	END IF;
	
	IF _err = 0
	THEN
		
		IF(select Tipo from TBL_COMPANIAS where ID_Compania = 0 and ID_Sucursal = _ID_Sucursal ) <> _Tipo
		THEN
			UPDATE TBL_NOM_MASEMP
			SET Tipo_de_Nomina = _Tipo
			WHERE ID_Compania = 0 and ID_Sucursal = _ID_Sucursal;

		END IF;
		

		UPDATE TBL_COMPANIAS
		SET Descripcion = _Descripcion, Nombre = _Nombre, Tipo = _Tipo, Periodo = _Periodo, 
			Fmt_Nomina = _Fmt_Nomina, Fmt_Recibo = _Fmt_Recibo, Numero = _Numero, Fecha = _Fecha,
				ContCuenTipo = _ContCuenTipo, ContCuenClave = _ContCuenClave, FijaCuenTipo = _FijaCuenTipo, 
					FijaCuenClave = _FijaCuenClave, ID_Clasificacion = _ID_Clasificacion, Status = _Status, cfd = _cfd, cfd_nocertificado = _cfd_nocertificado, cfd_id_expedicion = _cfd_id_expedicion
		WHERE ID_Compania = 0 and ID_Sucursal = _ID_Sucursal;
		
	END IF;
		
	RETURN QUERY SELECT _err, _result, _id_sucursal::varchar;

END
$BODY$
  LANGUAGE plpgsql;

  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_notas_blocks_agregar(_id_block smallint, _etiqueta character varying, _descripcion character varying)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255); _gu character(32);
BEGIN
	_err := 0;
	_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ADM_ENTIDADES' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCOK'); --'La entidad de compra/gasto se registr√É¬≥ correctamente';
	_gu := replace(uuid_in(md5(now()::text)::cstring)::text, '-', '');
	
	IF (select count(*) from TBL_NOTAS_BLOCKS where ID_Block = _ID_Block) > 0  OR 
		(select count(*) from tbl_crmk_workareas where nm_workarea = _Etiqueta) > 0
	THEN
		_err := 3;
		_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ADM_ENTIDADES' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'ERROR: Ya existe la clave de la entidad';
	END IF;
	
	IF _err = 0
	THEN
		INSERT INTO TBL_NOTAS_BLOCKS
		VALUES(_ID_Block, _Etiqueta, _Descripcion);

		INSERT INTO tbl_crmk_workareas(gu_workarea, nm_workarea, id_domain, gu_owner)
		VALUES(_gu, _Etiqueta, _ID_Block, _gu);

 	END IF;

		
	RETURN QUERY SELECT _err, _result, _id_block::varchar;

END
$BODY$
  LANGUAGE plpgsql;

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_notas_blocks_cambiar(_id_block smallint, _etiqueta character varying, _descripcion character varying)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255);
BEGIN
	_err := 0;
	_result := (select msj2 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ADM_ENTIDADES' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCOK'); 
	
	IF(select count(*) from TBL_NOTAS_BLOCKS where ID_Block = _ID_Block ) < 1
	THEN
		_err := 3;
		_result := (select msj2 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ADM_ENTIDADES' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); 
	ELSE
		IF(select count(*) from TBL_NOTAS_BLOCKS where ID_Block <> _ID_Block and Etiqueta = _Etiqueta)
		THEN
			_err := 3;
			_result := (select msj3 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ADM_ENTIDADES' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); 
		END IF;
	END IF;
	
	IF _err = 0
	THEN
		UPDATE TBL_NOTAS_BLOCKS
		SET Etiqueta = _Etiqueta, Descripcion = _Descripcion
		WHERE ID_Block = _ID_Block;

		UPDATE tbl_crmk_workareas
		SET nm_workarea = _Etiqueta
		WHERE id_domain = _ID_Block;
	END IF;

		
	RETURN QUERY SELECT _err, _result, _id_block::varchar;

END
$BODY$
  LANGUAGE plpgsql;
  
INSERT INTO tbl_usuarios_permisos_catalogo
VALUES ('ADM_CFDI');

INSERT INTO tbl_usuarios_permisos_catalogo
VALUES ('ADM_CFDI_AGREGAR');

INSERT INTO tbl_usuarios_permisos_catalogo
VALUES ('ADM_CFDI_CARGAR');

INSERT INTO tbl_usuarios_permisos_catalogo
VALUES ('ADM_CFDI_CARGAREXT');

INSERT INTO tbl_usuarios_permisos_catalogo
VALUES ('ADM_CFDI_DESENLAZAR');

INSERT INTO tbl_usuarios_permisos_catalogo
VALUES ('ADM_CFDI_GESTIONAR');

INSERT INTO tbl_usuarios_permisos_catalogo
VALUES ('ADM_CFDI_GCEXML');

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_cfd_certificados_subir(_cfd_nocertificado character varying, _cfd_archivocertificado character varying, _cfd_caducidadcertificado timestamp without time zone, _cfd_archivollave character varying)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255);
BEGIN
	_err := 0;
	
	IF(select count(*) from TBL_CFD_CERTIFICADOS where CFD_NoCertificado = _CFD_NoCertificado) < 1
	THEN
		INSERT INTO TBL_CFD_CERTIFICADOS
		VALUES(_CFD_NoCertificado, _CFD_ArchivoCertificado, _CFD_CaducidadCertificado, _CFD_ArchivoLLave, '');

		_result := (select msj2 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ADM_CFDI' and m.sub::text = 'BD' 
			and m.elm::text = 'MSJ-PROCOK'); --'El certificado se subi√≥ correctamente';
	
	ELSE
		UPDATE TBL_CFD_CERTIFICADOS
		SET CFD_ArchivoCertificado = _CFD_ArchivoCertificado, CFD_CaducidadCertificado = _CFD_CaducidadCertificado, 
					CFD_ArchivoLLave = _CFD_ArchivoLLave
		WHERE CFD_NoCertificado = _CFD_NoCertificado;		

		_result := (select msj3 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ADM_CFDI' and m.sub::text = 'BD' 
			and m.elm::text = 'MSJ-PROCOK'); --'El certificado se volvi√≥ a subir correctamente';
	
	END IF;
		
	RETURN QUERY SELECT _err, _result, _CFD_NoCertificado;

END
$BODY$
  LANGUAGE 'plpgsql';

  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_cfd_expediciones_agregar(_cfd_id_expedicion smallint, _cfd_nombre character varying, _cfd_calle character varying, _cfd_noext character varying, _cfd_noint character varying, _cfd_colonia character varying, _cfd_localidad character varying, _cfd_municipio character varying, _cfd_estado character varying, _cfd_pais character varying, _cfd_cp character varying)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255);
BEGIN
	_err := 0;
	_result := (select msj4 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ADM_CFDI' and m.sub::text = 'BD' 
			and m.elm::text = 'MSJ-PROCOK'); --'La expedici&oacute;n se registr&oacute; correctamente';

	IF(select count(*) from TBL_CFD_EXPEDICIONES where CFD_ID_Expedicion = _CFD_ID_Expedicion) > 0
	THEN
		_err := 3;
		_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ADM_CFDI' and m.sub::text = 'BD' 
			and m.elm::text = 'MSJ-PROCERR');--'ERROR: Ya existe esta misma expedici&oacute;n en otro registro';
	END IF;

	IF _err = 0
	THEN
		INSERT INTO TBL_CFD_EXPEDICIONES
		VALUES(	_CFD_ID_Expedicion, _CFD_Nombre, _CFD_Calle, _CFD_NoExt, _CFD_NoInt, _CFD_Colonia,
						_CFD_Localidad, _CFD_Municipio, _CFD_Estado, _CFD_Pais, _CFD_CP);

	END IF;

	RETURN QUERY SELECT _err, _result, _CFD_ID_Expedicion;

END
$BODY$
  LANGUAGE 'plpgsql';

  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_cfd_expediciones_cambiar(_cfd_id_expedicion smallint, _cfd_nombre character varying, _cfd_calle character varying, _cfd_noext character varying, _cfd_noint character varying, _cfd_colonia character varying, _cfd_localidad character varying, _cfd_municipio character varying, _cfd_estado character varying, _cfd_pais character varying, _cfd_cp character varying)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255);
BEGIN
	_err := 0;
	_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ADM_CFDI' and m.sub::text = 'BD' 
			and m.elm::text = 'MSJ-PROCOK2');--'La expedici&oacute;n se cambio correctamente';

	IF(select count(*) from TBL_CFD_EXPEDICIONES where CFD_ID_Expedicion = _CFD_ID_Expedicion) < 1
	THEN
		_err := 3;
		_result := (select msj2 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ADM_CFDI' and m.sub::text = 'BD' 
			and m.elm::text = 'MSJ-PROCERR');--'ERROR: No existe el registro, no se puede cambiar';
	END IF;

	IF _err = 0
	THEN
		UPDATE TBL_CFD_EXPEDICIONES
		SET CFD_Nombre = _CFD_Nombre, CFD_Calle = _CFD_Calle, CFD_NoExt = _CFD_NoExt, CFD_NoInt = _CFD_NoInt, CFD_Colonia = _CFD_Colonia,
			CFD_Localidad = _CFD_Localidad, CFD_Municipio = _CFD_Municipio, CFD_Estado = _CFD_Estado, CFD_Pais = _CFD_Pais, CFD_CP = _CFD_CP
		WHERE CFD_ID_Expedicion = _CFD_ID_Expedicion;

	END IF;

	RETURN QUERY SELECT _err, _result, _CFD_ID_Expedicion;

END
$BODY$
  LANGUAGE 'plpgsql';

  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_cfd_receptores_agregar(_cfd_id_receptor smallint, _cfd_nombre character varying, _cfd_calle character varying, _cfd_noext character varying, _cfd_noint character varying, _cfd_colonia character varying, _cfd_localidad character varying, _cfd_municipio character varying, _cfd_estado character varying, _cfd_pais character varying, _cfd_cp character varying)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255);
BEGIN
	_err := 0;
	_result := (select msj5 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ADM_CFDI' and m.sub::text = 'BD' 
			and m.elm::text = 'MSJ-PROCOK');

	IF(select count(*) from TBL_CFD_RECEPTORES where CFD_ID_Receptor = _CFD_ID_Receptor) > 0
	THEN
		_err := 3;
		_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ADM_CFDI' and m.sub::text = 'BD' 
			and m.elm::text = 'MSJ-PROCERR');--'ERROR: Ya existe el registro, no se puede agregar';
	END IF;

	IF _err = 0
	THEN
		INSERT INTO TBL_CFD_RECEPTORES
		VALUES(	_CFD_ID_Receptor, _CFD_Nombre, _CFD_Calle, _CFD_NoExt, _CFD_NoInt, _CFD_Colonia,
						_CFD_Localidad, _CFD_Municipio, _CFD_Estado, _CFD_Pais, _CFD_CP);

	END IF;

	RETURN QUERY SELECT _err, _result, _CFD_ID_Receptor;

END
$BODY$
  LANGUAGE 'plpgsql';

  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_cfd_receptores_cambiar(_cfd_id_receptor smallint, _cfd_nombre character varying, _cfd_calle character varying, _cfd_noext character varying, _cfd_noint character varying, _cfd_colonia character varying, _cfd_localidad character varying, _cfd_municipio character varying, _cfd_estado character varying, _cfd_pais character varying, _cfd_cp character varying)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255);
BEGIN
	_err := 0;
	_result := (select msj2 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ADM_CFDI' and m.sub::text = 'BD' 
			and m.elm::text = 'MSJ-PROCOK2');

	IF(select count(*) from TBL_CFD_RECEPTORES where CFD_ID_Receptor = _CFD_ID_Receptor) < 1
	THEN
		_err := 3;
		_result := (select msj2 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ADM_CFDI' and m.sub::text = 'BD' 
			and m.elm::text = 'MSJ-PROCERR');--'ERROR: No existe el registro, no se puede cambiar';
	END IF;

	IF _err = 0
	THEN
		UPDATE TBL_CFD_RECEPTORES
		SET CFD_Nombre = _CFD_Nombre, CFD_Calle = _CFD_Calle, CFD_NoExt = _CFD_NoExt, CFD_NoInt = _CFD_NoInt, CFD_Colonia = _CFD_Colonia,
			CFD_Localidad = _CFD_Localidad, CFD_Municipio = _CFD_Municipio, CFD_Estado = _CFD_Estado, CFD_Pais = _CFD_Pais, CFD_CP = _CFD_CP
		WHERE CFD_ID_Receptor = _CFD_ID_Receptor;

	END IF;

	RETURN QUERY SELECT _err, _result, _CFD_ID_Receptor;

END
$BODY$
  LANGUAGE 'plpgsql';

INSERT INTO tbl_usuarios_permisos_catalogo
VALUES ('ADM_PERIODOS');

INSERT INTO tbl_usuarios_permisos_catalogo
VALUES ('ADM_PERIODOS_AGREGAR');



--@FIN_BLOQUE
CREATE TABLE tbl_cont_resultados
(
  mes smallint NOT NULL,
  ano smallint NOT NULL,
  resultado numeric(19,4) NOT NULL,
  CONSTRAINT pk_tbl_cont_resultados PRIMARY KEY (mes, ano),
  CONSTRAINT fk_tbl_cont_resultados_tbl_cont_catalogo_periodos FOREIGN KEY (mes, ano)
      REFERENCES tbl_cont_catalogo_periodos (mes, ano) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE
);

  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_cont_catalogo_crear_sig_per(_mesini smallint, _anoini smallint)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255); _Mes smallint; _Ano smallint; _Mes2 smallint; _Ano2 smallint; _Creado bit;
BEGIN
	_err := 0;
	_result := (select msj1 from tbl_msj m where 
		m.alc::text = 'CEF' and m.mod::text = 'ADM_PERIODOS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCOK'); --'El periodo se ha creado satisfactoriamente';
	
	IF (_MesIni is not null and _AnoIni is not null) -- Supuestamente no hay meses. Es Inicio de actividades
	THEN
		_Mes2 := _MesIni;
		_Ano2 := _AnoIni;
		_Creado = '0';
		-- Tambien crea el mes anterior al inicial simplemente para cerrarlo y generar los saldos finales.
		IF(_Mes2 < 2) 
		THEN
			_Mes := 12;
			_Ano := _Ano2 - 1;
		ELSE
			_Mes := _Mes2 - 1;
			_Ano := _Ano2;
		END IF;
	ELSE --YA EXISTEN MESES
		_Mes := (select Mes from TBL_CONT_CATALOGO_PERIODOS order by Ano Desc, Mes Desc limit 1);
		_Ano := (select Ano from TBL_CONT_CATALOGO_PERIODOS order by Ano Desc, Mes Desc limit 1);
		IF(_Mes = 13)
		THEN
			_Mes = 12;
		END IF;

		IF(_Mes > 11) 
		THEN
			_Mes2 := 1;
			_Ano2 := _Ano + 1;
		ELSE
			_Mes2 := _Mes + 1;
			_Ano2 := _Ano;
		END IF;
		_Creado = '1';
		
	END IF;

	RAISE NOTICE 'Mes % Mes2 % Ano % Ano2 % MesIni % AnoIni %',_Mes,_Mes2,_Ano,_Ano2, _MesIni, _AnoIni;
 
	IF(_Mes is null or _Mes2 is null or _Mes < 1 or _Mes > 12  or _Mes2 < 1 or _Mes2 > 12 or _Ano is null or _Ano2 is null or _Ano < 2000 or _Ano2 < 2000 or _Ano > 2040 or _Ano2 > 2040)
	THEN
		_err := 3;
		_result := (select msj1 from tbl_msj m where 
			m.alc::text = 'CEF' and m.mod::text = 'ADM_PERIODOS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'ERROR: No se puede agregar el mes porque algun par√°metro en las fechas es incorrecto'; 
	END IF;

	IF _err = 0
	THEN
		IF _Creado = '0' -- No existen meses creados aun
		THEN
			--Primero inserta lo del mes anterior cerrandolo
			INSERT INTO TBL_CONT_CATALOGO_PERIODOS
			VALUES(_Mes, _Ano, '1');
		
			INSERT INTO TBL_CONT_RESULTADOS
			VALUES(_Mes, _Ano, 0.0);
			
			INSERT INTO TBL_CFD_REPORTE_MENSUAL
			VALUES(_Mes, _Ano, '', '1');
		
			--Si es diciembre, inserta de una vez el mes de cierre anual cerrado
			IF _Mes = 12 
			THEN
				INSERT INTO TBL_CONT_CATALOGO_PERIODOS
				VALUES(13, _Ano, '1');
			
				INSERT INTO TBL_CONT_RESULTADOS
				VALUES(13, _Ano, 0.0);
			END IF;

			INSERT INTO TBL_CONT_CATALOGO_DETALLE
			SELECT _Mes, _Ano, Cuenta, 0.0, 0.0, 0.0, 0.0 
			FROM TBL_CONT_CATALOGO;

			--Si es diciembre, inserta de una vez el mes de cierre anual
			IF _Mes = 12 
			THEN
				INSERT INTO TBL_CONT_CATALOGO_DETALLE
				SELECT 13, _Ano, Cuenta, 0.0, 0.0, 0.0, 0.0 
				FROM TBL_CONT_CATALOGO;
			END IF;

			INSERT INTO TBL_INVSERV_COSTOS
			SELECT _Mes, _Ano, ID_Prod, CantidadAcum, CostoPromedio, UltimoCosto, MontoAcum, CantidadAcum, CostoPromedio, UltimoCosto, MontoAcum
			FROM TBL_INVSERV_INVENTARIOS;

			INSERT INTO TBL_INVSERV_EXISTENCIAS_PERIODOS
			SELECT _Mes, _Ano, ID_Bodega, ID_Prod, Existencia, Existencia
			FROM TBL_INVSERV_EXISTENCIAS;

			INSERT INTO TBL_BANCOS_CUENTAS_SALDOS
			SELECT _Mes, _Ano, Tipo, Clave, Saldo, Saldo
			FROM TBL_BANCOS_CUENTAS;

			INSERT INTO TBL_CLIENT_SALDOS
			SELECT _Mes, _Ano, m.Clave, ID_Tipo, ID_Clave, 0.00, 0.00
			FROM TBL_CLIENT_CLIENT, TBL_CONT_MONEDAS m;

			INSERT INTO TBL_PROVEE_SALDOS
			SELECT _Mes, _Ano, m.Clave, ID_Tipo, ID_Clave, 0.00, 0.00
			FROM TBL_PROVEE_PROVEE, TBL_CONT_MONEDAS m;
  
			--///////////////////////////////////////////////////
			-- AHORA EL MES INICIAL A CREAR
			--///////////////////////////////////////////////////
			INSERT INTO TBL_CONT_CATALOGO_PERIODOS
			VALUES(_Mes2, _Ano2, '0');
		
			INSERT INTO TBL_CONT_RESULTADOS
			VALUES(_Mes2, _Ano2, 0.0);
			
			--INSERTA EL MES DE CERTIFICADOS FISCALES DIGITALES PROTEGIENDO PARA NO PODER GENERARLOS HASTA QUE SE HABRA (POR SI NO SE HA GENERADO EL REPORTE ANTERIOR)
			INSERT INTO TBL_CFD_REPORTE_MENSUAL
			VALUES(_Mes2, _Ano2, '', '0');
		
			--Si es diciembre, inserta de una vez el mes de cierre anual
			IF _Mes2 = 12 
			THEN
				INSERT INTO TBL_CONT_CATALOGO_PERIODOS
				VALUES(13, _Ano2, '0');
			
				INSERT INTO TBL_CONT_RESULTADOS
				VALUES(13, _Ano2, 0.0);
			END IF;
			
			INSERT INTO TBL_CONT_CATALOGO_DETALLE
			SELECT _Mes2, _Ano2, Cuenta, 0.0, 0.0, 0.0, 0.0 
			FROM TBL_CONT_CATALOGO;

			--Si es diciembre, inserta de una vez el mes de cierre anual
			IF _Mes2 = 12 
			THEN
				INSERT INTO TBL_CONT_CATALOGO_DETALLE
				SELECT 13, _Ano2, Cuenta, 0.0, 0.0, 0.0, 0.0 
				FROM TBL_CONT_CATALOGO;
			END IF;

			INSERT INTO TBL_INVSERV_COSTOS
			SELECT _Mes2, _Ano2, ID_Prod, CantidadAcum, CostoPromedio, UltimoCosto, MontoAcum, CantidadAcum, CostoPromedio, UltimoCosto, MontoAcum
			FROM TBL_INVSERV_INVENTARIOS;

			INSERT INTO TBL_INVSERV_EXISTENCIAS_PERIODOS
			SELECT _Mes2, _Ano2, ID_Bodega, ID_Prod, Existencia, Existencia
			FROM TBL_INVSERV_EXISTENCIAS;

			INSERT INTO TBL_BANCOS_CUENTAS_SALDOS
			SELECT _Mes2, _Ano2, Tipo, Clave, Saldo, Saldo
			FROM TBL_BANCOS_CUENTAS;

			INSERT INTO TBL_CLIENT_SALDOS
			SELECT _Mes2, _Ano2, m.Clave, ID_Tipo, ID_Clave, 0.00, 0.00
			FROM TBL_CLIENT_CLIENT, TBL_CONT_MONEDAS m;

			INSERT INTO TBL_PROVEE_SALDOS
			SELECT _Mes2, _Ano2, m.Clave, ID_Tipo, ID_Clave, 0.00, 0.00
			FROM TBL_PROVEE_PROVEE, TBL_CONT_MONEDAS m;
		ELSE -- _Creado = '1'... Ya habian meses creados
		
			INSERT INTO TBL_CONT_CATALOGO_PERIODOS
			VALUES(_Mes2, _Ano2, '0');
		
			INSERT INTO TBL_CONT_RESULTADOS
			VALUES(_Mes2, _Ano2, 0.0);
			
			--INSERTA EL MES DE CERTIFICADOS FISCALES DIGITALES PROTEGIENDO PARA NO PODER GENERARLOS HASTA QUE SE HABRA (POR SI NO SE HA GENERADO EL REPORTE ANTERIOR)
			INSERT INTO TBL_CFD_REPORTE_MENSUAL
			VALUES(_Mes2, _Ano2, '', '0');
		
			--Si es diciembre, inserta de una vez el mes de cierre anual
			IF _Mes2 = 12 
			THEN
				INSERT INTO TBL_CONT_CATALOGO_PERIODOS
				VALUES(13, _Ano2, '0');
			
				INSERT INTO TBL_CONT_RESULTADOS
				VALUES(13, _Ano2, 0.0);
			END IF;
			
			--/////////////////////////// AHORA AUXILIARES CONTABLES //////////////////////////
			CREATE LOCAL TEMPORARY TABLE _TMP_CONT_CATALOGO_DETALLE AS
			SELECT Cuenta, SaldoFinal as Inicial, SaldoFinal as Final
			FROM TBL_CONT_CATALOGO_DETALLE
			WHERE Mes = _Mes and Ano = _Ano;

			INSERT INTO TBL_CONT_CATALOGO_DETALLE
			SELECT _Mes2, _Ano2, Cuenta, Inicial, 0.0, 0.0, Final 
			FROM _TMP_CONT_CATALOGO_DETALLE;

			--Si es diciembre, inserta de una vez el mes de cierre anual
			IF _Mes2 = 12 
			THEN
				INSERT INTO TBL_CONT_CATALOGO_DETALLE
				SELECT 13, _Ano2, Cuenta, Final, 0.0, 0.0, Final 
				FROM _TMP_CONT_CATALOGO_DETALLE;
			END IF;

			DROP TABLE _TMP_CONT_CATALOGO_DETALLE;
			------------- AHORA OTROS AUXILIARES ---------------------------
			IF _Mes2 <> 1 -- Si no es enero toma _Mes porque contiene el mes anterior
			THEN
				CREATE LOCAL TEMPORARY TABLE _TMP_INVSERV_COSTOS AS
				SELECT ID_Prod, ExistenciaFin as ExIni, CostoPromFin as CPIni, UltimoCostoFin as UCIni, SaldoFin as SalIni, ExistenciaFin as ExFin, CostoPromFin as CPFin, UltimoCostoFin as UCFin, SaldoFin as SalFin
				FROM TBL_INVSERV_COSTOS		
				WHERE Mes = _Mes and Ano = _Ano;
			
				INSERT INTO TBL_INVSERV_COSTOS
				SELECT _Mes2, _Ano2, ID_Prod, ExIni, CPIni, UCIni, SalIni, ExFin, CPFin, UCFin, SalFin
				FROM _TMP_INVSERV_COSTOS;
			
				DROP TABLE _TMP_INVSERV_COSTOS;
				-----------------
				CREATE LOCAL TEMPORARY TABLE _TMP_INVSERV_EXISTENCIAS_PERIODOS AS
				SELECT ID_Bodega, ID_Prod, ExistenciaIni, ExistenciaFin
				FROM TBL_INVSERV_EXISTENCIAS_PERIODOS
				WHERE Mes = _Mes and Ano = _Ano;
				
				INSERT INTO TBL_INVSERV_EXISTENCIAS_PERIODOS
				SELECT _Mes2, _Ano2, ID_Bodega, ID_Prod, ExistenciaIni, ExistenciaFin
				FROM _TMP_INVSERV_EXISTENCIAS_PERIODOS;

				DROP TABLE _TMP_INVSERV_EXISTENCIAS_PERIODOS;
				-----------------
				CREATE LOCAL TEMPORARY TABLE _TMP_BANCOS_CUENTAS_SALDOS AS
				SELECT Tipo, Clave, SaldoIni, SaldoFin
				FROM TBL_BANCOS_CUENTAS_SALDOS
				WHERE Mes = _Mes and Ano = _Ano;
		
				INSERT INTO TBL_BANCOS_CUENTAS_SALDOS
				SELECT _Mes2, _Ano2, Tipo, Clave, SaldoIni, SaldoFin
				FROM _TMP_BANCOS_CUENTAS_SALDOS;

				DROP TABLE _TMP_BANCOS_CUENTAS_SALDOS;
				-----------------
				CREATE LOCAL TEMPORARY TABLE _TMP_CLIENT_SALDOS AS
				SELECT ID_Moneda, ID_Tipo, ID_Clave, SaldoIni, SaldoFin
				FROM TBL_CLIENT_SALDOS
				WHERE Mes = _Mes and Ano = _Ano;
		
				INSERT INTO TBL_CLIENT_SALDOS
				SELECT _Mes2, _Ano2, ID_Moneda, ID_Tipo, ID_Clave, SaldoIni, SaldoFin
				FROM _TMP_CLIENT_SALDOS;

				DROP TABLE _TMP_CLIENT_SALDOS;
				-----------------
				CREATE LOCAL TEMPORARY TABLE _TMP_PROVEE_SALDOS AS
				SELECT ID_Moneda, ID_Tipo, ID_Clave, SaldoIni, SaldoFin
				FROM TBL_PROVEE_SALDOS
				WHERE Mes = _Mes and Ano = _Ano;
		
				INSERT INTO TBL_PROVEE_SALDOS
				SELECT _Mes2, _Ano2, ID_Moneda, ID_Tipo, ID_Clave, SaldoIni, SaldoFin
				FROM _TMP_PROVEE_SALDOS;

				DROP TABLE _TMP_PROVEE_SALDOS;
		
			ELSE -- Mes2 es enero, los saldos los obtiene del mes 12 y no de Mes porque Mes contiene el mes 13
				
				CREATE LOCAL TEMPORARY TABLE _TMP_INVSERV_COSTOS_12 AS
				SELECT ID_Prod, ExistenciaFin as ExIni, CostoPromFin as CPIni, UltimoCostoFin as UCIni, SaldoFin as SalIni, ExistenciaFin as ExFin, CostoPromFin as CPFin, UltimoCostoFin as UCFin, SaldoFin as SalFin
				FROM TBL_INVSERV_COSTOS		
				WHERE Mes = 12 and Ano = _Ano;
		
				INSERT INTO TBL_INVSERV_COSTOS
				SELECT _Mes2, _Ano2, ID_Prod, ExIni, CPIni, UCIni, SalIni, ExFin, CPFin, UCFin, SalFin
				FROM _TMP_INVSERV_COSTOS_12;
	 
				DROP TABLE _TMP_INVSERV_COSTOS_12;
				-----------------
				CREATE LOCAL TEMPORARY TABLE _TMP_INVSERV_EXISTENCIAS_PERIODOS_12 AS
				SELECT ID_Bodega, ID_Prod, ExistenciaIni, ExistenciaFin
				FROM TBL_INVSERV_EXISTENCIAS_PERIODOS
				WHERE Mes = 12 and Ano = _Ano;
		
				INSERT INTO TBL_INVSERV_EXISTENCIAS_PERIODOS
				SELECT _Mes2, _Ano2, ID_Bodega, ID_Prod, ExistenciaIni, ExistenciaFin
				FROM _TMP_INVSERV_EXISTENCIAS_PERIODOS_12;

				DROP TABLE _TMP_INVSERV_EXISTENCIAS_PERIODOS_12;
				-----------------
				CREATE LOCAL TEMPORARY TABLE _TMP_BANCOS_CUENTAS_SALDOS_12 AS
				SELECT Tipo, Clave, SaldoIni, SaldoFin
				FROM TBL_BANCOS_CUENTAS_SALDOS
				WHERE Mes = 12 and Ano = _Ano;
		
				INSERT INTO TBL_BANCOS_CUENTAS_SALDOS
				SELECT _Mes2, _Ano2, Tipo, Clave, SaldoIni, SaldoFin
				FROM _TMP_BANCOS_CUENTAS_SALDOS_12;

				DROP TABLE _TMP_BANCOS_CUENTAS_SALDOS_12;
				-----------------
				CREATE LOCAL TEMPORARY TABLE _TMP_CLIENT_SALDOS_12 AS
				SELECT ID_Moneda, ID_Tipo, ID_Clave, SaldoIni, SaldoFin
				FROM TBL_CLIENT_SALDOS
				WHERE Mes = 12 and Ano = _Ano;
		
				INSERT INTO TBL_CLIENT_SALDOS
				SELECT _Mes2, _Ano2, ID_Moneda, ID_Tipo, ID_Clave, SaldoIni, SaldoFin
				FROM _TMP_CLIENT_SALDOS_12;

				DROP TABLE _TMP_CLIENT_SALDOS_12;
				-----------------
				CREATE LOCAL TEMPORARY TABLE _TMP_PROVEE_SALDOS_12 AS
				SELECT ID_Moneda, ID_Tipo, ID_Clave, SaldoIni, SaldoFin
				FROM TBL_PROVEE_SALDOS
				WHERE Mes = 12 and Ano = _Ano;
		
				INSERT INTO TBL_PROVEE_SALDOS
				SELECT _Mes2, _Ano2, ID_Moneda, ID_Tipo, ID_Clave, SaldoIni, SaldoFin
				FROM _TMP_PROVEE_SALDOS_12;

				DROP TABLE _TMP_PROVEE_SALDOS_12;
			END IF;
					
		END IF;
	
	END IF;

	RETURN QUERY SELECT _err, _result, (_Mes2::varchar || '/' || _Ano2::varchar)::varchar;

END
$BODY$
  LANGUAGE plpgsql;

  
  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_cont_catalogo_cerrar_per(_mes smallint, _ano smallint)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255); _Cerrado bit; _MesIni smallint; _AnoIni smallint;
BEGIN
	_err := 0;
	_result := (select msj2 from tbl_msj m where 
		m.alc::text = 'CEF' and m.mod::text = 'ADM_PERIODOS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCOK'); --'El periodo se ha cerrado';
	_Cerrado := (select Cerrado from TBL_CONT_CATALOGO_PERIODOS where Mes = _Mes and Ano = _Ano);
	_MesIni := (select Mes from TBL_CONT_CATALOGO_PERIODOS order by Ano Asc, Mes Asc limit 1);
	_AnoIni := (select Ano from TBL_CONT_CATALOGO_PERIODOS order by Ano Asc, Mes Asc limit 1);
		
	IF (select count(*) from TBL_CONT_CATALOGO_PERIODOS where Mes = _Mes and Ano = _Ano) < 1 OR _Mes = 13
	THEN
		_err := 3;
		_result := (select msj2 from tbl_msj m where 
			m.alc::text = 'CEF' and m.mod::text = 'ADM_PERIODOS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'No se pudo cerrar o re-abrir el periodo porque este periodo pertenece al cierre anual el cual se cierra o re-abre seg√∫n el mes de diciembre'; 
	END IF;

	IF(_Mes = _MesIni and _Ano = _AnoIni)
	THEN
		_err := 3;
		_result := (select msj3 from tbl_msj m where 
			m.alc::text = 'CEF' and m.mod::text = 'ADM_PERIODOS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'El periodo virtual inicial, no puede ser alterado'; 
	END IF;

	IF _err = 0
	THEN
		IF _Cerrado = '0' -- El mes est√° abierto, por lo tanto cierra este, y todos los meses anteriores abiertos
		THEN
			IF _Mes = 12
			THEN
				UPDATE TBL_CONT_CATALOGO_PERIODOS
				SET Cerrado = '1'
				WHERE Ano = _Ano and Mes = 13 and Cerrado = '0';
			END IF;

			UPDATE TBL_CONT_CATALOGO_PERIODOS
			SET Cerrado = '1'
			WHERE Ano = _Ano and Mes <= _Mes and Cerrado = '0';

			UPDATE TBL_CONT_CATALOGO_PERIODOS
			SET Cerrado = '1'
			WHERE Ano < _Ano and Cerrado = '0';
		ELSE -- El mes esta cerrado, abre este y todos los meses posteriores
			UPDATE TBL_CONT_CATALOGO_PERIODOS
			SET Cerrado = '0'
			WHERE Ano = _Ano and Mes >= _Mes and Cerrado = '1';

			UPDATE TBL_CONT_CATALOGO_PERIODOS
			SET Cerrado = '0'
			WHERE Ano > _Ano and Cerrado = '1';

			_result := (select msj3 from tbl_msj m where 
				m.alc::text = 'CEF' and m.mod::text = 'ADM_PERIODOS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCOK'); --'El periodo se ha abierto';
	
		END IF;
	
	END IF;

	RETURN QUERY SELECT _err, _result, (_Mes::varchar || '/' || _Ano::varchar)::varchar;

END
$BODY$
  LANGUAGE 'plpgsql';



INSERT INTO tbl_usuarios_permisos_catalogo
VALUES ('ADM_MONEDAS');

INSERT INTO tbl_usuarios_permisos_catalogo
VALUES ('ADM_MONEDAS_AGREGAR');



--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_cont_monedas_modulo AS 
 SELECT m.clave, m.moneda, m.simbolo, m.tc, m.fecha, m.desplazamiento, m.da, m.id_satmoneda
   FROM tbl_cont_monedas m
  ORDER BY m.clave;
  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_cont_monedas_agregar(_clave integer, _moneda character varying, _simbolo character varying, _tc numeric, _id_satmoneda character)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255); 
BEGIN
	_err := 0;
	_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ADM_MONEDAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCOK');

	IF(select count(*) from TBL_CONT_MONEDAS where Clave = _Clave) > 0
	THEN
		_err := 3;
		_result := (select msj3 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ADM_MONEDAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR');
	END IF;

	IF _err = 0
	THEN
		INSERT INTO TBL_CONT_MONEDAS
		VALUES(_Clave, _Moneda, _Simbolo, _TC, now(), 0.0000, '0', _ID_SatMoneda);

		INSERT INTO tbl_provee_saldos_monedas
		SELECT _clave, id_tipo, id_clave, 0.0
		FROM TBL_PROVEE_PROVEE;
  
 		INSERT INTO tbl_provee_saldos
		SELECT mes, ano, _clave, id_tipo, id_clave, 0.0, 0.0
		FROM TBL_PROVEE_PROVEE, TBL_CONT_CATALOGO_PERIODOS;
		
		INSERT INTO tbl_client_saldos_monedas
		SELECT _clave, id_tipo, id_clave, 0.0
		FROM TBL_CLIENT_CLIENT;
  
 		INSERT INTO tbl_client_saldos
		SELECT mes, ano, _clave, id_tipo, id_clave, 0.0, 0.0
		FROM TBL_CLIENT_CLIENT, TBL_CONT_CATALOGO_PERIODOS;
 
	END IF;

	RETURN QUERY SELECT _err, _result, _clave;
END
$BODY$
  LANGUAGE plpgsql;  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_cont_monedas_cambiar(_clave integer, _moneda character varying, _simbolo character varying, _tc numeric, _id_satmoneda character)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255);
BEGIN
	_err := 0;
	_result := (select msj2 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ADM_MONEDAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCOK');

	IF(_clave = 1 and _tc <> 1.0000)
	THEN
		_err := 3;
		_result = (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ADM_MONEDAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR');
	END IF;

	IF(select count(*) from TBL_CONT_MONEDAS where Clave = _clave) < 1
	THEN
		_err := 3;
		_result := (select msj2 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ADM_MONEDAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR');
	END IF;

	IF _err = 0
	THEN
		UPDATE TBL_CONT_MONEDAS
		SET Moneda = _Moneda, Simbolo = _Simbolo, TC = _TC, ID_SatMoneda = _ID_SatMoneda
		WHERE Clave = _Clave;
		
	END IF;

	RETURN QUERY SELECT _err, _result, _clave;
END
$BODY$
  LANGUAGE plpgsql;

INSERT INTO tbl_usuarios_permisos_catalogo
VALUES ('ADM_VARIABLES');

INSERT INTO tbl_usuarios_permisos_catalogo
VALUES ('ADM_VARIABLES_AGREGAR');



--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_variables_modulo AS 
 SELECT v.id_variable, 
        CASE
            WHEN v.desistema = 1 THEN ( SELECT m.msj1
               FROM tbl_msj m
              WHERE m.alc::text = 'CEF'::text AND m.mod::text = 'VARIABLES'::text AND m.sub::text = 'CATALOGO'::text AND m.elm::text = v.id_variable::text)
            ELSE v.descripcion
        END AS descripcion, 
        CASE
            WHEN v.desistema = 1 THEN v.descripcion
            ELSE ''::character varying
        END AS tipo, v.ventero, v.vdecimal, v.vfecha, v.valfanumerico, v.desistema, v.modulo
   FROM tbl_variables v;

  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_variables_agregar_usr(_id_variable character varying, _descripcion character varying, _ventero integer, _vdecimal numeric, _vfecha timestamp without time zone, _valfanumerico character varying)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255);
BEGIN
	_err := 0;
	_result := (select msj2 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ADM_VARIABLES' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCOK');

	IF(select count(*) from TBL_VARIABLES where ID_Variable = _ID_Variable) > 0
	THEN
		_err := 3;
		_result := (select msj2 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ADM_VARIABLES' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR');
	END IF;

	IF _err = 0
	THEN
		INSERT INTO TBL_VARIABLES
		VALUES(_ID_Variable, _Descripcion, _VEntero, _VDecimal, _VFecha, _VAlfanumerico,'0','ESP');
	END IF;

	RETURN QUERY SELECT _err, _result, _ID_Variable;
END
$BODY$
  LANGUAGE plpgsql;
  
  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_variables_cambiar_usr(_id_variable character varying, _descripcion character varying, _ventero integer, _vdecimal numeric, _vfecha timestamp without time zone, _valfanumerico character varying)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255);
BEGIN
	_err := 0;
	_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ADM_VARIABLES' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCOK');

	IF(select count(*) from TBL_VARIABLES where ID_Variable = _ID_Variable) < 1
	THEN
		_err := 3;
		_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ADM_VARIABLES' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR');
	END IF;

	IF _err = 0
	THEN
		UPDATE TBL_VARIABLES
		SET Descripcion = _Descripcion, VEntero = _VEntero, VDecimal = _VDecimal, VFecha = _VFecha, VAlfanumerico = _VAlfanumerico
		WHERE ID_Variable = _ID_Variable;
	END IF;

	RETURN QUERY SELECT _err, _result, _ID_Variable;
END
$BODY$
  LANGUAGE plpgsql;
  
  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_variables_cambiar(_id_variable character varying, _ventero integer, _vdecimal numeric, _vfecha timestamp without time zone, _valfanumerico character varying)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255);
BEGIN
	_err := 0;
	_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ADM_VARIABLES' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCOK');

	IF(select count(*) from TBL_VARIABLES where ID_Variable = _ID_Variable) < 1
	THEN
		_err := 3;
		_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ADM_VARIABLES' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR');
	END IF;
	
	IF _id_variable = 'VERSION'
	THEN
		_err := 3;
		_result := '???????????????????????????????????????????????';
	END IF;

	IF _err = 0
	THEN
		UPDATE TBL_VARIABLES
		SET VEntero = _VEntero, VDecimal = _VDecimal, VFecha = _VFecha, VAlfanumerico = _VAlfanumerico
		WHERE ID_Variable = _ID_Variable;
	END IF;

	RETURN QUERY SELECT _err, _result, _ID_Variable;
END
$BODY$
  LANGUAGE plpgsql;
 
INSERT INTO tbl_usuarios_permisos_catalogo
VALUES ('CONT_ENLACES');

INSERT INTO tbl_usuarios_permisos_catalogo
VALUES ('CONT_ENLACES_AGREGAR');

INSERT INTO tbl_usuarios_permisos_catalogo
VALUES ('CONT_ENLACES_CAMBIAR');

INSERT INTO tbl_usuarios_permisos_catalogo
VALUES ('CONT_ENLACES_ELIMINAR');



--@FIN_BLOQUE
CREATE TABLE abstbl_cxpcxc_conceptos
(
  id_concepto smallint NOT NULL,
  descripcion character varying(80) NOT NULL,
  desistema bit(1) NOT NULL,
  tipo character(3) NOT NULL,
  cc character(19)
);



--@FIN_BLOQUE
CREATE TABLE tbl_client_cxc_conceptos
(
-- Inherited from table abstbl_cxpcxc_conceptos:  id_concepto smallint NOT NULL,
-- Inherited from table abstbl_cxpcxc_conceptos:  descripcion character varying(80) NOT NULL,
-- Inherited from table abstbl_cxpcxc_conceptos:  desistema bit(1) NOT NULL,
-- Inherited from table abstbl_cxpcxc_conceptos:  tipo character(3) NOT NULL,
-- Inherited from table abstbl_cxpcxc_conceptos:  cc character(19),
  CONSTRAINT pk_tbl_client_cxc_conceptos PRIMARY KEY (id_concepto ),
  CONSTRAINT fk_tbl_client_cxc_conceptos_tbl_cont_catalogo FOREIGN KEY (cc)
      REFERENCES tbl_cont_catalogo (cuenta) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE SET NULL,
  CONSTRAINT ck_tbl_client_cxc_conceptos_tipo CHECK (tipo = 'ALT'::bpchar OR tipo = 'SAL'::bpchar)
)
INHERITS (abstbl_cxpcxc_conceptos);

INSERT INTO tbl_client_cxc_conceptos(id_concepto, descripcion, desistema, tipo, cc)
VALUES (0, '', '1', 'ALT', null);

INSERT INTO tbl_client_cxc_conceptos(id_concepto, descripcion, desistema, tipo, cc)
VALUES (1, '', '1', 'ALT', null);

INSERT INTO tbl_client_cxc_conceptos(id_concepto, descripcion, desistema, tipo, cc)
VALUES (100, '', '1', 'SAL', null);

INSERT INTO tbl_client_cxc_conceptos(id_concepto, descripcion, desistema, tipo, cc)
VALUES (101, '', '1', 'SAL', null);

INSERT INTO tbl_client_cxc_conceptos(id_concepto, descripcion, desistema, tipo, cc)
VALUES (102, '', '1', 'SAL', null);




--@FIN_BLOQUE
CREATE TABLE tbl_provee_cxp_conceptos
(
-- Inherited from table abstbl_cxpcxc_conceptos:  id_concepto smallint NOT NULL,
-- Inherited from table abstbl_cxpcxc_conceptos:  descripcion character varying(80) NOT NULL,
-- Inherited from table abstbl_cxpcxc_conceptos:  desistema bit(1) NOT NULL,
-- Inherited from table abstbl_cxpcxc_conceptos:  tipo character(3) NOT NULL,
-- Inherited from table abstbl_cxpcxc_conceptos:  cc character(19),
  CONSTRAINT pk_tbl_provee_cxp_conceptos PRIMARY KEY (id_concepto ),
  CONSTRAINT fk_tbl_provee_cxp_conceptos_tbl_cont_catalogo FOREIGN KEY (cc)
      REFERENCES tbl_cont_catalogo (cuenta) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE SET NULL,
  CONSTRAINT ck_tbl_provee_cxp_conceptos_tipo CHECK (tipo = 'ALT'::bpchar OR tipo = 'SAL'::bpchar)
)
INHERITS (abstbl_cxpcxc_conceptos);


INSERT INTO tbl_provee_cxp_conceptos(id_concepto, descripcion, desistema, tipo, cc)
VALUES (0, '', '1', 'ALT', null);

INSERT INTO tbl_provee_cxp_conceptos(id_concepto, descripcion, desistema, tipo, cc)
VALUES (1, '', '1', 'ALT', null);

INSERT INTO tbl_provee_cxp_conceptos(id_concepto, descripcion, desistema, tipo, cc)
VALUES (100, '', '1', 'SAL', null);

INSERT INTO tbl_provee_cxp_conceptos(id_concepto, descripcion, desistema, tipo, cc)
VALUES (101, '', '1', 'SAL', null);

INSERT INTO tbl_provee_cxp_conceptos(id_concepto, descripcion, desistema, tipo, cc)
VALUES (102, '', '1', 'SAL', null);



--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_invserv_costos_conceptos AS 
 SELECT e.id_concepto, 
        CASE
            WHEN e.desistema = B'1'::"bit" THEN ( SELECT m.msj1
               FROM tbl_msj m
              WHERE m.alc::text = 'CEF'::text AND m.mod::text = 'ALM_ENLACES'::text AND m.sub::text = 'CATALOGO'::text AND m.elm::text = e.id_concepto::text)
            ELSE e.descripcion
        END AS descripcion, e.desistema, e.recalcularcosto, e.tipo, e.cc
   FROM tbl_invserv_costos_conceptos e
  WHERE e.id_concepto >= 0;

--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_invserv_costos_bodegas AS 
 SELECT e.mes, e.ano, e.id_bodega, e.id_prod, e.existenciaini, c.costopromini, c.ultimocostoini, round(COALESCE(e.existenciaini * c.saldoini / NULLIF(c.existenciaini, 0::numeric), 0::numeric)::numeric(19,4), 2) AS saldoini, e.existenciafin, c.costopromfin, c.ultimocostofin, round(COALESCE(e.existenciafin * c.saldofin / NULLIF(c.existenciafin, 0::numeric), 0::numeric)::numeric(19,4), 2) AS saldofin
   FROM tbl_invserv_existencias_periodos e
   JOIN tbl_invserv_costos c ON e.mes = c.mes AND e.ano = c.ano AND e.id_prod::text = c.id_prod::text;

--ALTER TABLE view_invserv_costos_bodegas  

--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_client_cxc_conceptos AS 
 SELECT e.id_concepto, 
        CASE
            WHEN e.desistema = B'1'::"bit" THEN ( SELECT m.msj1
               FROM tbl_msj m
              WHERE m.alc::text = 'CEF'::text AND m.mod::text = 'CXPC_ENLACES'::text AND m.sub::text = 'CATALOGO'::text AND m.elm::text = e.id_concepto::text)
            ELSE e.descripcion
        END AS descripcion, e.desistema, e.tipo, e.cc
   FROM tbl_client_cxc_conceptos e;



--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_provee_cxp_conceptos AS 
 SELECT e.id_concepto, 
        CASE
            WHEN e.desistema = B'1'::"bit" THEN ( SELECT m.msj1
               FROM tbl_msj m
              WHERE m.alc::text = 'CEF'::text AND m.mod::text = 'CXPC_ENLACES'::text AND m.sub::text = 'CATALOGO'::text AND m.elm::text = e.id_concepto::text)
            ELSE e.descripcion
        END AS descripcion, e.desistema, e.tipo, e.cc
   FROM tbl_provee_cxp_conceptos e;

  
  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_client_cxc_conceptos_agregar(_id_concepto smallint, _descripcion character varying, _tipo character, _cc character)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255);
BEGIN
	_err := 0;
	_result := (select msj3 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_ENLACES' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCOK');

	IF(select count(*) from TBL_CLIENT_CXC_CONCEPTOS where ID_Concepto = _ID_Concepto) > 0
	THEN
		_err := 3;
		_result := (select msj3 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_ENLACES' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR');
	END IF;

	IF _err = 0
	THEN
		INSERT INTO TBL_CLIENT_CXC_CONCEPTOS
		VALUES(_ID_Concepto, _Descripcion, '0', _Tipo, _CC);
	END IF;

	RETURN QUERY SELECT _err, _result, _ID_Concepto;
END
$BODY$
  LANGUAGE plpgsql;
  
  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_client_cxc_conceptos_cambiar(_id_concepto smallint, _descripcion character varying, _tipo character, _cc character)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255); _DeSistema bit;
BEGIN
	_err := 0;
	_result := (select msj3 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_ENLACES' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCOK2');
	
	IF(select count(*) from TBL_CLIENT_CXC_CONCEPTOS where ID_Concepto = _ID_Concepto) < 1
	THEN
		_err := 3;
		_result := (select msj3 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_ENLACES' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR2');
	END IF;

	IF _err = 0
	THEN
		_DeSistema := (select DeSistema from TBL_CLIENT_CXC_CONCEPTOS where ID_Concepto = _ID_Concepto);
	
		IF _DeSistema = '0'
		THEN
			UPDATE TBL_CLIENT_CXC_CONCEPTOS
			SET Descripcion = _Descripcion, CC = _CC
			WHERE ID_Concepto = _ID_Concepto;
		END IF;
	END IF;

	RETURN QUERY SELECT _err, _result, _ID_Concepto;
END
$BODY$
  LANGUAGE plpgsql;
  
  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_invserv_costos_conceptos_agregar(_id_concepto smallint, _descripcion character varying, _recalcularcosto bit, _tipo character, _cc character)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255);
BEGIN
	_err := 0;
	_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_ENLACES' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCOK');

	IF(select count(*) from TBL_INVSERV_COSTOS_CONCEPTOS where ID_Concepto = _ID_Concepto) > 0
	THEN
		_err := 3;
		_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_ENLACES' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR');
	END IF;

	IF _err = 0
	THEN
		INSERT INTO TBL_INVSERV_COSTOS_CONCEPTOS
		VALUES(_ID_Concepto, _Descripcion, '0', _RecalcularCosto, _Tipo, _CC);
	END IF;

	RETURN QUERY SELECT _err, _result, _ID_Concepto;
END
$BODY$
  LANGUAGE plpgsql;

  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_invserv_costos_conceptos_cambiar(_id_concepto smallint, _descripcion character varying, _recalcularcosto bit, _tipo character, _cc character)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255); _DeSistema bit;
BEGIN
	_err := 0;
	_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_ENLACES' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCOK2');

	IF(select count(*) from TBL_INVSERV_COSTOS_CONCEPTOS where ID_Concepto = _ID_Concepto) < 1
	THEN
		_err := 3;
		_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_ENLACES' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR2');
	END IF;

	IF _err = 0
	THEN
		_DeSistema := (select DeSistema from TBL_INVSERV_COSTOS_CONCEPTOS where ID_Concepto = _ID_Concepto);
	
		IF _DeSistema = '0'
		THEN
			UPDATE TBL_INVSERV_COSTOS_CONCEPTOS
			SET Descripcion = _Descripcion, RecalcularCosto = _RecalcularCosto, CC = _CC
			WHERE ID_Concepto = _ID_Concepto;
		ELSE
			UPDATE TBL_INVSERV_COSTOS_CONCEPTOS
			SET CC = _CC
			WHERE ID_Concepto = _ID_Concepto;
		END IF;
	END IF;

	RETURN QUERY SELECT _err, _result, _ID_Concepto;
END
$BODY$
  LANGUAGE plpgsql;
  
  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_provee_cxp_conceptos_agregar(_id_concepto smallint, _descripcion character varying, _tipo character, _cc character)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255);
BEGIN
	_err := 0;
	_result := (select msj2 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_ENLACES' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCOK');

	IF(select count(*) from TBL_PROVEE_CXP_CONCEPTOS where ID_Concepto = _ID_Concepto) > 0
	THEN
		_err := 3;
		_result := (select msj2 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_ENLACES' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR');
	END IF;

	IF _err = 0
	THEN
		INSERT INTO TBL_PROVEE_CXP_CONCEPTOS
		VALUES(_ID_Concepto, _Descripcion, '0', _Tipo, _CC);
	END IF;

	RETURN QUERY SELECT _err, _result, _ID_Concepto;
END
$BODY$
  LANGUAGE plpgsql;

  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_provee_cxp_conceptos_cambiar(_id_concepto smallint, _descripcion character varying, _tipo character, _cc character)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255); _DeSistema bit;
BEGIN
	_err := 0;
	_result := (select msj2 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_ENLACES' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCOK2');
	
	IF(select count(*) from TBL_PROVEE_CXP_CONCEPTOS where ID_Concepto = _ID_Concepto) < 1
	THEN
		_err := 3;
		_result := (select msj2 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_ENLACES' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR2');
	END IF;

	IF _err = 0
	THEN
		_DeSistema := (select DeSistema from TBL_PROVEE_CXP_CONCEPTOS where ID_Concepto = _ID_Concepto);
	
		IF _DeSistema = '0'
		THEN
			UPDATE TBL_PROVEE_CXP_CONCEPTOS
			SET Descripcion = _Descripcion, CC = _CC
			WHERE ID_Concepto = _ID_Concepto;
		END IF;
	END IF;

	RETURN QUERY SELECT _err, _result, _ID_Concepto;
END
$BODY$
  LANGUAGE plpgsql;

INSERT INTO tbl_usuarios_permisos_catalogo
VALUES ('INVSERV_LINEAS');

INSERT INTO tbl_usuarios_permisos_catalogo
VALUES ('INVSERV_LINEAS_AGREGAR');

INSERT INTO tbl_usuarios_permisos_catalogo
VALUES ('INVSERV_LINEAS_CAMBIAR');

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_invserv_linuni_agregar(
    _entidad character varying,
    _tipo character varying,
    _clave character varying,
    _descripcion character varying)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255);
BEGIN
	_err := 0;
	IF _Entidad = 'LINEAS'
	THEN
		_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'INVSERV_LINEAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCOK');
	
		IF(select count(*) from TBL_INVSERV_LINEAS where ID_Linea = _Clave) > 0
		THEN
			_err := 3;
			_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'INVSERV_LINEAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR');
		END IF;

		IF _err = 0
		THEN
			INSERT INTO TBL_INVSERV_LINEAS
			VALUES(_Clave, _Tipo, _Descripcion);
		END IF;
	ELSE -- UNIDADES
		_result := (select msj2 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'INVSERV_LINEAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCOK');
	
		IF(select count(*) from TBL_INVSERV_UNIDADES where ID_Unidad = _Clave) > 0
		THEN
			_err := 3;
			_result := (select msj2 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'INVSERV_LINEAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR');
		END IF;

		IF _err = 0
		THEN
			INSERT INTO TBL_INVSERV_UNIDADES
			VALUES(_Clave, 'P', _Descripcion, _Tipo::smallint);
		END IF;
	END IF;
	
	RETURN QUERY SELECT _err, _result, _clave;
END
$BODY$
  LANGUAGE plpgsql;
--ALTER FUNCTION sp_invserv_linuni_agregar(character varying, character varying, character varying, character varying)
 

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_invserv_linuni_cambiar(
    _entidad character varying,
    _tipo character varying,
    _clave character varying,
    _descripcion character varying)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255);
BEGIN
	_err := 0;
	IF _Entidad = 'LINEAS'
	THEN
		_result := (select msj3 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'INVSERV_LINEAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCOK');
	
		IF(select count(*) from TBL_INVSERV_LINEAS where ID_Linea = _Clave) < 1
		THEN
			_err := 3;
			_result := (select msj3 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'INVSERV_LINEAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR');
		END IF;

		IF _err = 0
		THEN
			UPDATE TBL_INVSERV_LINEAS
			SET Descripcion = _Descripcion
			WHERE ID_Linea = _Clave;
		END IF;
	ELSE -- UNIDADES
		_result := (select msj4 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'INVSERV_LINEAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCOK');
	
		IF(select count(*) from TBL_INVSERV_UNIDADES where ID_Unidad = _Clave) < 1
		THEN
			_err := 3;
			_result := (select msj4 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'INVSERV_LINEAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR');
		END IF;

		IF _err = 0
		THEN
			UPDATE TBL_INVSERV_UNIDADES
			SET Descripcion = _Descripcion, ID_SatUnidad = _Tipo::smallint
			WHERE ID_Unidad = _Clave;
		END IF;
	END IF;
	
	RETURN QUERY SELECT _err, _result, _clave;
END
$BODY$
  LANGUAGE plpgsql;
--ALTER FUNCTION sp_invserv_linuni_cambiar(character varying, character varying, character varying, character varying)

INSERT INTO tbl_usuarios_permisos_catalogo
VALUES ('ADM_FORMATOS');

INSERT INTO tbl_usuarios_permisos_catalogo
VALUES ('ADM_FORMATOS_AGREGAR');



--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_formatos_modulo AS 
 SELECT c.id_formato, c.descripcion, c.tipo, m.msj2 AS tipo_desc
   FROM tbl_formatos c
   JOIN tbl_msj m ON m.alc::text = 'CEF'::text AND m.mod::text = 'PERMISOS'::text AND m.sub::text = 'CATALOGO'::text AND m.elm::text = c.tipo::text;

  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_formatos_agregar(_id_formato character varying, _descripcion character varying, _tipo character varying)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255);
BEGIN
	_err := 0;
	_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ADM_FORMATOS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCOK');

	IF(select count(*) from TBL_FORMATOS where ID_Formato = _ID_Formato) > 0
	THEN
		_err := 3;
		_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ADM_FORMATOS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR');
	END IF;

	IF _err = 0
	THEN
		INSERT INTO TBL_FORMATOS
		VALUES(_ID_Formato, _Descripcion, _Tipo);
		
		INSERT INTO TBL_FORMATOS_DET(id_formato, id_part, etiqueta,valor,xpos,ypos,ancho,alto,formato,fgcolor,alinhor,alinver)
		SELECT _ID_Formato, ID_Part, Etiqueta, Valor, XPos, YPos, Ancho, Alto, Formato, FGColor, AlinHor, AlinVer
		FROM _TMP_FORMATOS_DET;
    
	END IF;

	RETURN QUERY SELECT _err, _result, _ID_Formato;
END
$BODY$
  LANGUAGE plpgsql;
  
  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_formatos_cambiar(_id_formato character varying, _descripcion character varying, _tipo character varying)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255);
BEGIN
	_err := 0;
	_result := (select msj2 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ADM_FORMATOS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCOK');

	IF(select count(*) from TBL_FORMATOS where ID_Formato = _ID_Formato) < 1
	THEN
		_err := 3;
		_result := (select msj2 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ADM_FORMATOS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR');
	END IF;

	IF _err = 0
	THEN
		DELETE FROM TBL_FORMATOS_DET
		WHERE ID_Formato = _ID_Formato;

		UPDATE TBL_FORMATOS
		SET Descripcion = _Descripcion, Tipo = _Tipo
		WHERE ID_Formato = _ID_Formato;
		
		INSERT INTO TBL_FORMATOS_DET(id_formato, id_part, etiqueta,valor,xpos,ypos,ancho,alto,formato,fgcolor,alinhor,alinver)
		SELECT _ID_Formato, ID_Part, Etiqueta, Valor, XPos, YPos, Ancho, Alto, Formato, FGColor, AlinHor, AlinVer
		FROM _TMP_FORMATOS_DET;
    
	END IF;

	RETURN QUERY SELECT _err, _result, _ID_Formato;
END
$BODY$
  LANGUAGE plpgsql;
  
INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('COMP');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('COMP_PROVEE');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('COMP_PROVEE_AGREGAR');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('COMP_PROVEE_CAMBIAR');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('VEN');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('VEN_CLIENT');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('VEN_CLIENT_AGREGAR');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('VEN_CLIENT_CAMBIAR');




--@FIN_BLOQUE
CREATE TABLE abstbl_proveeclient
(
  id_tipo character(2) NOT NULL,
  id_clave integer NOT NULL,
  id_numero integer NOT NULL,
  id_cc character(19),
  id_cc_comp character(19),
  nombre character varying(80) NOT NULL,
  saldo numeric(19,4) NOT NULL,
  id_entidad smallint NOT NULL,
  rfc character varying(15),
  atncompras character varying(50),
  atnpagos character varying(50),
  colonia character varying(40),
  cp character varying(7),
  direccion character varying(80),
  email character varying(80),
  fax character varying(10),
  poblacion character varying(80),
  tel character varying(25),
  compraanual numeric(19,4),
  descuento numeric(5,2),
  dias smallint,
  limitecredito numeric(19,4),
  ultimacompra timestamp without time zone,
  obs character varying(255),
  precioespmostr bit(1) NOT NULL,
  id_vendedor smallint NOT NULL,
  noext character varying(10) NOT NULL,
  noint character varying(10) NOT NULL,
  municipio character varying(40) NOT NULL,
  estado character varying(40) NOT NULL,
  pais character varying(20) NOT NULL,
  metododepago character varying(254) NOT NULL,
  status character(1) NOT NULL,
  id_satbanco character(3) NOT NULL,
  smtp smallint NOT NULL,
  registro_tributario character varying(40) NOT NULL,
  pedimento character varying(5) NOT NULL
);
--ALTER TABLE abstbl_proveeclient

--@FIN_BLOQUE
CREATE TABLE tbl_provee_provee
(
-- Inherited from table abstbl_proveeclient:  id_tipo character(2) NOT NULL,
-- Inherited from table abstbl_proveeclient:  id_clave integer NOT NULL,
-- Inherited from table abstbl_proveeclient:  id_numero integer NOT NULL,
-- Inherited from table abstbl_proveeclient:  id_cc character(19),
-- Inherited from table abstbl_proveeclient:  id_cc_comp character(19),
-- Inherited from table abstbl_proveeclient:  nombre character varying(80) NOT NULL,
-- Inherited from table abstbl_proveeclient:  saldo numeric(19,4) NOT NULL,
-- Inherited from table abstbl_proveeclient:  id_entidad smallint NOT NULL,
-- Inherited from table abstbl_proveeclient:  rfc character varying(15),
-- Inherited from table abstbl_proveeclient:  atncompras character varying(50),
-- Inherited from table abstbl_proveeclient:  atnpagos character varying(50),
-- Inherited from table abstbl_proveeclient:  colonia character varying(40),
-- Inherited from table abstbl_proveeclient:  cp character varying(7),
-- Inherited from table abstbl_proveeclient:  direccion character varying(80),
-- Inherited from table abstbl_proveeclient:  email character varying(80),
-- Inherited from table abstbl_proveeclient:  fax character varying(10),
-- Inherited from table abstbl_proveeclient:  poblacion character varying(80),
-- Inherited from table abstbl_proveeclient:  tel character varying(25),
-- Inherited from table abstbl_proveeclient:  compraanual numeric(19,4),
-- Inherited from table abstbl_proveeclient:  descuento numeric(5,2),
-- Inherited from table abstbl_proveeclient:  dias smallint,
-- Inherited from table abstbl_proveeclient:  limitecredito numeric(19,4),
-- Inherited from table abstbl_proveeclient:  ultimacompra timestamp without time zone,
-- Inherited from table abstbl_proveeclient:  obs character varying(255),
-- Inherited from table abstbl_proveeclient:  precioespmostr bit(1) NOT NULL,
-- Inherited from table abstbl_proveeclient:  id_vendedor smallint NOT NULL,
-- Inherited from table abstbl_proveeclient:  noext character varying(10) NOT NULL,
-- Inherited from table abstbl_proveeclient:  noint character varying(10) NOT NULL,
-- Inherited from table abstbl_proveeclient:  municipio character varying(40) NOT NULL,
-- Inherited from table abstbl_proveeclient:  estado character varying(40) NOT NULL,
-- Inherited from table abstbl_proveeclient:  pais character varying(20) NOT NULL,
-- Inherited from table abstbl_proveeclient:  metododepago character varying(254) NOT NULL,
-- Inherited from table abstbl_proveeclient:  status character(1) NOT NULL,
-- Inherited from table abstbl_proveeclient:  id_satbanco character(3) NOT NULL,
-- Inherited from table abstbl_proveeclient:  smtp smallint NOT NULL,
  CONSTRAINT pk_tbl_provee_provee PRIMARY KEY (id_tipo, id_clave),
  CONSTRAINT fk_tbl_provee_provee_tbl_compras_entidades FOREIGN KEY (id_entidad)
      REFERENCES tbl_compras_entidades (id_entidadcompra) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_tbl_provee_provee_tbl_cont_catalogo FOREIGN KEY (id_cc)
      REFERENCES tbl_cont_catalogo (cuenta) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE SET NULL,
  CONSTRAINT fk_tbl_provee_provee_tbl_cont_catalogo1 FOREIGN KEY (id_cc_comp)
      REFERENCES tbl_cont_catalogo (cuenta) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE SET NULL,
  CONSTRAINT ck_tbl_provee_provee CHECK (id_tipo = 'PR'::bpchar)
)
INHERITS (abstbl_proveeclient);



--@FIN_BLOQUE
CREATE TABLE tbl_provee_saldos_monedas
(
  id_moneda integer NOT NULL,
  id_tipo character(2) NOT NULL,
  id_clave integer NOT NULL,
  saldo numeric(19,4) NOT NULL,
  CONSTRAINT pk_tbl_provee_saldos_monedas PRIMARY KEY (id_moneda , id_tipo , id_clave ),
  CONSTRAINT fk_tbl_provee_saldos_monedas_tbl_cont_monedas FOREIGN KEY (id_moneda)
      REFERENCES tbl_cont_monedas (clave) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_tbl_provee_saldos_monedas_tbl_provee_provee FOREIGN KEY (id_tipo, id_clave)
      REFERENCES tbl_provee_provee (id_tipo, id_clave) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE
);



--@FIN_BLOQUE
CREATE TABLE tbl_provee_saldos
(
  mes smallint NOT NULL,
  ano smallint NOT NULL,
  id_moneda integer NOT NULL,
  id_tipo character(2) NOT NULL,
  id_clave integer NOT NULL,
  saldoini numeric(19,4) NOT NULL,
  saldofin numeric(19,4) NOT NULL,
  CONSTRAINT pk_tbl_provee_saldos PRIMARY KEY (mes , ano , id_moneda , id_tipo , id_clave ),
  CONSTRAINT fk_tbl_provee_saldos_tbl_cont_catalogo_periodos FOREIGN KEY (mes, ano)
      REFERENCES tbl_cont_catalogo_periodos (mes, ano) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_tbl_provee_saldos_tbl_cont_monedas FOREIGN KEY (id_moneda)
      REFERENCES tbl_cont_monedas (clave) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_tbl_provee_saldos_tbl_provee_provee FOREIGN KEY (id_tipo, id_clave)
      REFERENCES tbl_provee_provee (id_tipo, id_clave) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE
);



--@FIN_BLOQUE
CREATE TABLE tbl_client_client
(
-- Inherited from table abstbl_proveeclient:  id_tipo character(2) NOT NULL,
-- Inherited from table abstbl_proveeclient:  id_clave integer NOT NULL,
-- Inherited from table abstbl_proveeclient:  id_numero integer NOT NULL,
-- Inherited from table abstbl_proveeclient:  id_cc character(19),
-- Inherited from table abstbl_proveeclient:  id_cc_comp character(19),
-- Inherited from table abstbl_proveeclient:  nombre character varying(80) NOT NULL,
-- Inherited from table abstbl_proveeclient:  saldo numeric(19,4) NOT NULL,
-- Inherited from table abstbl_proveeclient:  id_entidad smallint NOT NULL,
-- Inherited from table abstbl_proveeclient:  rfc character varying(15),
-- Inherited from table abstbl_proveeclient:  atncompras character varying(50),
-- Inherited from table abstbl_proveeclient:  atnpagos character varying(50),
-- Inherited from table abstbl_proveeclient:  colonia character varying(40),
-- Inherited from table abstbl_proveeclient:  cp character varying(7),
-- Inherited from table abstbl_proveeclient:  direccion character varying(80),
-- Inherited from table abstbl_proveeclient:  email character varying(80),
-- Inherited from table abstbl_proveeclient:  fax character varying(10),
-- Inherited from table abstbl_proveeclient:  poblacion character varying(80),
-- Inherited from table abstbl_proveeclient:  tel character varying(25),
-- Inherited from table abstbl_proveeclient:  compraanual numeric(19,4),
-- Inherited from table abstbl_proveeclient:  descuento numeric(5,2),
-- Inherited from table abstbl_proveeclient:  dias smallint,
-- Inherited from table abstbl_proveeclient:  limitecredito numeric(19,4),
-- Inherited from table abstbl_proveeclient:  ultimacompra timestamp without time zone,
-- Inherited from table abstbl_proveeclient:  obs character varying(255),
-- Inherited from table abstbl_proveeclient:  precioespmostr bit(1) NOT NULL,
-- Inherited from table abstbl_proveeclient:  id_vendedor smallint NOT NULL,
-- Inherited from table abstbl_proveeclient:  noext character varying(10) NOT NULL,
-- Inherited from table abstbl_proveeclient:  noint character varying(10) NOT NULL,
-- Inherited from table abstbl_proveeclient:  municipio character varying(40) NOT NULL,
-- Inherited from table abstbl_proveeclient:  estado character varying(40) NOT NULL,
-- Inherited from table abstbl_proveeclient:  pais character varying(20) NOT NULL,
-- Inherited from table abstbl_proveeclient:  metododepago character varying(254) NOT NULL,
-- Inherited from table abstbl_proveeclient:  status character(1) NOT NULL,
-- Inherited from table abstbl_proveeclient:  id_satbanco character(3) NOT NULL,
-- Inherited from table abstbl_proveeclient:  smtp smallint NOT NULL,
  CONSTRAINT pk_tbl_client_client PRIMARY KEY (id_tipo, id_clave),
  CONSTRAINT fk_tbl_client_client_tbl_cont_catalogo FOREIGN KEY (id_cc)
      REFERENCES tbl_cont_catalogo (cuenta) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE SET NULL,
  CONSTRAINT fk_tbl_client_client_tbl_cont_catalogo1 FOREIGN KEY (id_cc_comp)
      REFERENCES tbl_cont_catalogo (cuenta) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE SET NULL,
  CONSTRAINT fk_tbl_client_client_tbl_vendedores FOREIGN KEY (id_vendedor)
      REFERENCES tbl_vendedores (id_vendedor) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_tbl_client_client_tbl_ventas_entidades FOREIGN KEY (id_entidad)
      REFERENCES tbl_ventas_entidades (id_entidadventa) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT ck_tbl_client_client CHECK (id_tipo = 'CL'::bpchar)
)
INHERITS (abstbl_proveeclient);



--@FIN_BLOQUE
CREATE TABLE tbl_client_saldos_monedas
(
  id_moneda integer NOT NULL,
  id_tipo character(2) NOT NULL,
  id_clave integer NOT NULL,
  saldo numeric(19,4) NOT NULL,
  CONSTRAINT pk_tbl_client_saldos_monedas PRIMARY KEY (id_moneda , id_tipo , id_clave ),
  CONSTRAINT fk_tbl_client_saldos_monedas_tbl_client_client FOREIGN KEY (id_tipo, id_clave)
      REFERENCES tbl_client_client (id_tipo, id_clave) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_tbl_client_saldos_monedas_tbl_cont_monedas FOREIGN KEY (id_moneda)
      REFERENCES tbl_cont_monedas (clave) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE
);



--@FIN_BLOQUE
CREATE TABLE tbl_client_saldos
(
  mes smallint NOT NULL,
  ano smallint NOT NULL,
  id_moneda integer NOT NULL,
  id_tipo character(2) NOT NULL,
  id_clave integer NOT NULL,
  saldoini numeric(19,4) NOT NULL,
  saldofin numeric(19,4) NOT NULL,
  CONSTRAINT pk_tbl_client_saldos PRIMARY KEY (mes , ano , id_moneda , id_tipo , id_clave ),
  CONSTRAINT fk_tbl_client_saldos_tbl_cont_monedas FOREIGN KEY (id_moneda)
      REFERENCES tbl_cont_monedas (clave) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_tbl_client_saldos_tbl_client_client FOREIGN KEY (id_tipo, id_clave)
      REFERENCES tbl_client_client (id_tipo, id_clave) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_tbl_client_saldos_tbl_cont_catalogo_periodos FOREIGN KEY (mes, ano)
      REFERENCES tbl_cont_catalogo_periodos (mes, ano) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE
);



--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_provee_provee_modulo AS 
 SELECT c.id_tipo, c.id_clave AS clave, c.id_numero AS numero, c.id_cc AS cc, c.id_cc_comp, c.nombre, getcliproslds(c.id_tipo, c.id_clave) AS saldo, c.dias, c.tel, c.email, c.atncompras AS contacto, c.id_entidad AS id_entidadcompra, v.descripcion AS entidad, c.status
   FROM tbl_provee_provee c
   JOIN tbl_compras_entidades v ON c.id_entidad = v.id_entidadcompra;



--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_provee_provee_mas AS 
 SELECT p.id_tipo, p.id_clave, p.id_entidad AS id_entidadcompra, ( SELECT tbl_compras_entidades.descripcion
           FROM tbl_compras_entidades
          WHERE tbl_compras_entidades.id_entidadcompra = p.id_entidad) AS entidadnombre, 
        CASE
            WHEN p.pais::text = 'MEX'::text THEN p.rfc
            ELSE p.registro_tributario
        END AS rfc, p.atnpagos, p.colonia, p.cp, p.direccion, p.fax, p.poblacion, p.compraanual, p.descuento, p.limitecredito, p.ultimacompra, p.obs, p.precioespmostr, ( SELECT tbl_cont_catalogo.nombre
           FROM tbl_cont_catalogo
          WHERE tbl_cont_catalogo.cuenta = p.id_cc) AS cuentanombre, p.id_vendedor, ''::character varying(80) AS vendedornombre, p.noext, p.noint, p.municipio, p.estado, p.pais, p.metododepago, p.status, p.id_satbanco, p.pedimento
   FROM tbl_provee_provee p;

--ALTER TABLE view_provee_provee_mas

--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_client_client_modulo AS 
 SELECT c.id_tipo, c.id_clave AS clave, c.id_numero AS numero, c.id_cc AS cc, c.id_cc_comp, c.nombre, getcliproslds(c.id_tipo, c.id_clave) AS saldo, c.dias, c.tel, c.email, c.atncompras AS contacto, c.id_entidad AS id_entidadventa, v.descripcion AS entidad, c.status, c.smtp
   FROM tbl_client_client c
   JOIN tbl_ventas_entidades v ON c.id_entidad = v.id_entidadventa;



--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_client_client_mas AS 
 SELECT p.id_tipo, p.id_clave, p.id_entidad AS id_entidadventa, ( SELECT tbl_ventas_entidades.descripcion
           FROM tbl_ventas_entidades
          WHERE tbl_ventas_entidades.id_entidadventa = p.id_entidad) AS entidadnombre, 
        CASE
            WHEN p.pais::text = 'MEX'::text THEN p.rfc
            ELSE p.registro_tributario
        END AS rfc, p.atnpagos, p.colonia, p.cp, p.direccion, p.fax, p.poblacion, p.compraanual, p.descuento, p.limitecredito, p.ultimacompra, p.obs, p.precioespmostr, ( SELECT tbl_cont_catalogo.nombre
           FROM tbl_cont_catalogo
          WHERE tbl_cont_catalogo.cuenta = p.id_cc) AS cuentanombre, p.id_vendedor, v.nombre AS vendedornombre, p.noext, p.noint, p.municipio, p.estado, p.pais, p.metododepago, p.status, p.id_satbanco, p.pedimento
   FROM tbl_client_client p
   JOIN tbl_vendedores v ON p.id_vendedor = v.id_vendedor;

--ALTER TABLE view_client_client_mas
   
--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION view_compras_entidades_ids(
    _id_usuario character varying,
    _entidad character varying)
  RETURNS SETOF record AS
$BODY$  
BEGIN
	IF _ID_Usuario = 'cef-su' OR (select count(*) from tbl_usuarios_submodulo_roles where id_usuario = _id_usuario and id_rol = 'cef-comp') > 0
	THEN
		IF _Entidad = 'CEF-X' -- Regresa todo el set
		THEN
			RETURN QUERY
			SELECT _id_usuario as id_usuario, e.ID_EntidadCompra AS id_entidad, e.ID_TipoEntidad AS ID_Tipo, e.Serie, e.Descripcion, e.Doc, e.Formato, e.ID_Bodega, 
				b.Nombre AS Bodega, b.AuditarAlm, b.ManejoStocks, e.Orden, e.Devolucion, e.IVA, e.Fmt_Orden, e.Fmt_Devolucion, e.Fija, e.FijaCost, e.Recepcion, e.Fmt_Recepcion, e.TipoCobro
			FROM TBL_COMPRAS_ENTIDADES e INNER JOIN 
				TBL_INVSERV_BODEGAS b ON b.ID_Bodega = e.ID_Bodega
			ORDER BY e.ID_EntidadCompra ASC;
			
		ELSIF _Entidad = 'CEF-1'
		THEN
			RETURN QUERY 
			SELECT _id_usuario as id_usuario, e.ID_EntidadCompra AS id_entidad, e.ID_TipoEntidad AS ID_Tipo, e.Serie, e.Descripcion, e.Doc, e.Formato, e.ID_Bodega, 
				b.Nombre AS Bodega, b.AuditarAlm, b.ManejoStocks, e.Orden, e.Devolucion, e.IVA, e.Fmt_Orden, e.Fmt_Devolucion, e.Fija, e.FijaCost, e.Recepcion, e.Fmt_Recepcion, e.TipoCobro
			FROM TBL_COMPRAS_ENTIDADES e INNER JOIN 
				TBL_INVSERV_BODEGAS b ON b.ID_Bodega = e.ID_Bodega
			ORDER BY e.ID_EntidadCompra ASC
			LIMIT 1;
		ELSE
			RETURN QUERY 
			SELECT _id_usuario as id_usuario, e.ID_EntidadCompra AS id_entidad, e.ID_TipoEntidad AS ID_Tipo, e.Serie, e.Descripcion, e.Doc, e.Formato, e.ID_Bodega, 
				b.Nombre AS Bodega, b.AuditarAlm, b.ManejoStocks, e.Orden, e.Devolucion, e.IVA, e.Fmt_Orden, e.Fmt_Devolucion, e.Fija, e.FijaCost, e.Recepcion, e.Fmt_Recepcion, e.TipoCobro
			FROM TBL_COMPRAS_ENTIDADES e INNER JOIN 
				TBL_INVSERV_BODEGAS b ON b.ID_Bodega = e.ID_Bodega
			WHERE e.ID_EntidadCompra = _Entidad::smallint;
		END IF;
	ELSE
		IF _Entidad = 'CEF-X' -- Regresa todo el set
		THEN
			RETURN QUERY 
			SELECT DISTINCT _ID_Usuario as ID_Usuario, e.ID_EntidadCompra AS ID_Entidad, e.ID_TipoEntidad AS ID_Tipo, e.Serie, e.Descripcion, e.Doc, e.Formato, e.ID_Bodega, 
				b.Nombre AS Bodega, b.AuditarAlm, b.ManejoStocks, e.Orden, e.Devolucion, e.IVA, e.Fmt_Orden, e.Fmt_Devolucion, e.Fija, e.FijaCost, e.Recepcion, e.Fmt_Recepcion, e.TipoCobro
			FROM TBL_COMPRAS_ENTIDADES e INNER JOIN 
				TBL_INVSERV_BODEGAS b ON b.ID_Bodega = e.ID_Bodega INNER JOIN
				TBL_USUARIOS_SUBMODULO_COMPRAS u ON e.ID_EntidadCompra = u.ID_EntidadCompra
			WHERE (u.id_usuario = _ID_Usuario OR u.id_usuario IN
				(select sr.ID_Rol from tbl_usuarios_submodulo_roles sr where sr.id_usuario = _ID_Usuario))
			ORDER BY e.ID_EntidadCompra ASC;
			
		ELSIF _Entidad = 'CEF-1'
		THEN
			RETURN QUERY 
			SELECT DISTINCT _ID_Usuario as ID_Usuario, e.ID_EntidadCompra AS ID_Entidad, e.ID_TipoEntidad AS ID_Tipo, e.Serie, e.Descripcion, e.Doc, e.Formato, e.ID_Bodega, 
				b.Nombre AS Bodega, b.AuditarAlm, b.ManejoStocks, e.Orden, e.Devolucion, e.IVA, e.Fmt_Orden, e.Fmt_Devolucion, e.Fija, e.FijaCost, e.Recepcion, e.Fmt_Recepcion, e.TipoCobro
			FROM TBL_COMPRAS_ENTIDADES e INNER JOIN 
				TBL_INVSERV_BODEGAS b ON b.ID_Bodega = e.ID_Bodega INNER JOIN
				TBL_USUARIOS_SUBMODULO_COMPRAS u ON e.ID_EntidadCompra = u.ID_EntidadCompra
			WHERE (u.id_usuario = _ID_Usuario OR u.id_usuario IN
				(select sr.ID_Rol from tbl_usuarios_submodulo_roles sr where sr.id_usuario = _ID_Usuario))
			ORDER BY e.ID_EntidadCompra ASC
			LIMIT 1;

		ELSE
			RETURN QUERY
			SELECT DISTINCT _ID_Usuario as ID_Usuario, e.ID_EntidadCompra AS ID_Entidad, e.ID_TipoEntidad AS ID_Tipo, e.Serie, e.Descripcion, e.Doc, e.Formato, e.ID_Bodega, 
				b.Nombre AS Bodega, b.AuditarAlm, b.ManejoStocks, e.Orden, e.Devolucion, e.IVA, e.Fmt_Orden, e.Fmt_Devolucion, e.Fija, e.FijaCost, e.Recepcion, e.Fmt_Recepcion, e.TipoCobro
			FROM TBL_COMPRAS_ENTIDADES e INNER JOIN 
				TBL_INVSERV_BODEGAS b ON b.ID_Bodega = e.ID_Bodega INNER JOIN
				TBL_USUARIOS_SUBMODULO_COMPRAS u ON e.ID_EntidadCompra = u.ID_EntidadCompra
			WHERE (u.id_usuario = _ID_Usuario OR u.id_usuario IN
				(select sr.ID_Rol from tbl_usuarios_submodulo_roles sr where sr.id_usuario = _ID_Usuario)) AND e.ID_EntidadCompra = _Entidad::smallint;
			
		END IF;
	END IF;
END
$BODY$
  LANGUAGE plpgsql;
--ALTER FUNCTION view_compras_entidades_ids(character varying, character varying)


--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION view_compras_entidades_ids(
    _id_usuario character varying,
    _entidad character varying,
    _tipo smallint)
  RETURNS SETOF record AS
$BODY$  
BEGIN
	IF _ID_Usuario = 'cef-su' OR (select count(*) from tbl_usuarios_submodulo_roles where id_usuario = _id_usuario and id_rol = 'cef-comp') > 0
	THEN
		IF _Entidad = 'CEF-X' -- Regresa todo el set
		THEN
			RETURN QUERY
			SELECT _id_usuario as id_usuario, e.ID_EntidadCompra AS id_entidad, e.ID_TipoEntidad AS ID_Tipo, e.Serie, e.Descripcion, e.Doc, e.Formato, e.ID_Bodega, 
				b.Nombre AS Bodega, b.AuditarAlm, b.ManejoStocks, e.Orden, e.Devolucion, e.IVA, e.Fmt_Orden, e.Fmt_Devolucion, e.Fija, e.FijaCost, e.Recepcion, e.Fmt_Recepcion, e.TipoCobro
			FROM TBL_COMPRAS_ENTIDADES e INNER JOIN 
				TBL_INVSERV_BODEGAS b ON b.ID_Bodega = e.ID_Bodega
			WHERE e.ID_TipoEntidad = _tipo
			ORDER BY e.ID_EntidadCompra ASC;
			
		ELSIF _Entidad = 'CEF-1'
		THEN
			RETURN QUERY 
			SELECT _id_usuario as id_usuario, e.ID_EntidadCompra AS id_entidad, e.ID_TipoEntidad AS ID_Tipo, e.Serie, e.Descripcion, e.Doc, e.Formato, e.ID_Bodega, 
				b.Nombre AS Bodega, b.AuditarAlm, b.ManejoStocks, e.Orden, e.Devolucion, e.IVA, e.Fmt_Orden, e.Fmt_Devolucion, e.Fija, e.FijaCost, e.Recepcion, e.Fmt_Recepcion, e.TipoCobro
			FROM TBL_COMPRAS_ENTIDADES e INNER JOIN 
				TBL_INVSERV_BODEGAS b ON b.ID_Bodega = e.ID_Bodega
			WHERE e.ID_TipoEntidad = _tipo
			ORDER BY e.ID_EntidadCompra ASC
			LIMIT 1;
		ELSE
			RETURN QUERY 
			SELECT _id_usuario as id_usuario, e.ID_EntidadCompra AS id_entidad, e.ID_TipoEntidad AS ID_Tipo, e.Serie, e.Descripcion, e.Doc, e.Formato, e.ID_Bodega, 
				b.Nombre AS Bodega, b.AuditarAlm, b.ManejoStocks, e.Orden, e.Devolucion, e.IVA, e.Fmt_Orden, e.Fmt_Devolucion, e.Fija, e.FijaCost, e.Recepcion, e.Fmt_Recepcion, e.TipoCobro
			FROM TBL_COMPRAS_ENTIDADES e INNER JOIN 
				TBL_INVSERV_BODEGAS b ON b.ID_Bodega = e.ID_Bodega
			WHERE e.ID_TipoEntidad = _tipo and e.ID_EntidadCompra = _Entidad::smallint;
		END IF;
	ELSE
		IF _Entidad = 'CEF-X' -- Regresa todo el set
		THEN
			RETURN QUERY 
			SELECT DISTINCT _ID_Usuario as ID_Usuario, e.ID_EntidadCompra AS ID_Entidad, e.ID_TipoEntidad AS ID_Tipo, e.Serie, e.Descripcion, e.Doc, e.Formato, e.ID_Bodega, 
				b.Nombre AS Bodega, b.AuditarAlm, b.ManejoStocks, e.Orden, e.Devolucion, e.IVA, e.Fmt_Orden, e.Fmt_Devolucion, e.Fija, e.FijaCost, e.Recepcion, e.Fmt_Recepcion, e.TipoCobro
			FROM TBL_COMPRAS_ENTIDADES e INNER JOIN 
				TBL_INVSERV_BODEGAS b ON b.ID_Bodega = e.ID_Bodega INNER JOIN
				TBL_USUARIOS_SUBMODULO_COMPRAS u ON e.ID_EntidadCompra = u.ID_EntidadCompra
			WHERE e.ID_TipoEntidad = _tipo and (u.id_usuario = _ID_Usuario OR u.id_usuario IN
				(select sr.ID_Rol from tbl_usuarios_submodulo_roles sr where sr.id_usuario = _ID_Usuario))
			ORDER BY e.ID_EntidadCompra ASC;
			
		ELSIF _Entidad = 'CEF-1'
		THEN
			RETURN QUERY 
			SELECT DISTINCT _ID_Usuario as ID_Usuario, e.ID_EntidadCompra AS ID_Entidad, e.ID_TipoEntidad AS ID_Tipo, e.Serie, e.Descripcion, e.Doc, e.Formato, e.ID_Bodega, 
				b.Nombre AS Bodega, b.AuditarAlm, b.ManejoStocks, e.Orden, e.Devolucion, e.IVA, e.Fmt_Orden, e.Fmt_Devolucion, e.Fija, e.FijaCost, e.Recepcion, e.Fmt_Recepcion, e.TipoCobro
			FROM TBL_COMPRAS_ENTIDADES e INNER JOIN 
				TBL_INVSERV_BODEGAS b ON b.ID_Bodega = e.ID_Bodega INNER JOIN
				TBL_USUARIOS_SUBMODULO_COMPRAS u ON e.ID_EntidadCompra = u.ID_EntidadCompra
			WHERE e.ID_TipoEntidad = _tipo and (u.id_usuario = _ID_Usuario OR u.id_usuario IN
				(select sr.ID_Rol from tbl_usuarios_submodulo_roles sr where sr.id_usuario = _ID_Usuario))
			ORDER BY e.ID_EntidadCompra ASC
			LIMIT 1;

		ELSE
			RETURN QUERY
			SELECT DISTINCT _ID_Usuario as ID_Usuario, e.ID_EntidadCompra AS ID_Entidad, e.ID_TipoEntidad AS ID_Tipo, e.Serie, e.Descripcion, e.Doc, e.Formato, e.ID_Bodega, 
				b.Nombre AS Bodega, b.AuditarAlm, b.ManejoStocks, e.Orden, e.Devolucion, e.IVA, e.Fmt_Orden, e.Fmt_Devolucion, e.Fija, e.FijaCost, e.Recepcion, e.Fmt_Recepcion, e.TipoCobro
			FROM TBL_COMPRAS_ENTIDADES e INNER JOIN 
				TBL_INVSERV_BODEGAS b ON b.ID_Bodega = e.ID_Bodega INNER JOIN
				TBL_USUARIOS_SUBMODULO_COMPRAS u ON e.ID_EntidadCompra = u.ID_EntidadCompra
			WHERE e.ID_TipoEntidad = _tipo and (u.id_usuario = _ID_Usuario OR u.id_usuario IN
				(select sr.ID_Rol from tbl_usuarios_submodulo_roles sr where sr.id_usuario = _ID_Usuario)) AND e.ID_EntidadCompra = _Entidad::smallint;
			
		END IF;
	END IF;
END
$BODY$
  LANGUAGE plpgsql;
--ALTER FUNCTION view_compras_entidades_ids(character varying, character varying, smallint)
  
  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_compras_entidades_agregar(_id_entidadcompra smallint, _id_tipoentidad smallint, _serie character varying, _doc integer, _descripcion character varying, _formato character varying, _id_bodega smallint, _fija bit, _fijacost bit, _devolucion integer, _orden integer, _fmt_devolucion character varying, _fmt_orden character varying, _iva numeric, _infoplantoc smallint, _infogasrec smallint, id_clasificacion character varying, status character)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255); _Numero smallint;
BEGIN
	_err := 0;
	_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ADM_ENTIDADES' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCOK');--'La entidad de compra/gasto se registr√≥ correctamente';

	IF(select count(*) from TBL_COMPRAS_ENTIDADES where ID_EntidadCompra = _ID_EntidadCompra) > 0 
	THEN
		_err := 3;
		_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ADM_ENTIDADES' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR');--'ERROR: La clave de la entidad ya existe en otro registro';
	END IF; 

	IF(select count(*) from TBL_COMPRAS_ENTIDADES where ID_TipoEntidad = _ID_TipoEntidad and Serie = _Serie) > 0 
	THEN
		_err := 3;
		_result := (select msj3 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ADM_ENTIDADES' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR');--'ERROR: Ya existe la serie para este tipo de documento';
	END IF;

	IF _err = 0
	THEN
		INSERT INTO TBL_COMPRAS_ENTIDADES
		VALUES(_ID_EntidadCompra, _ID_TipoEntidad, _Serie, _Doc, _Descripcion, _Formato, _ID_Bodega, _Fija, _FijaCost, _Devolucion, _Orden, _Fmt_Devolucion, _Fmt_Orden, _IVA, _InfoPlantOC, _InfoGasRec, ID_Clasificacion, Status);
		
		-- INSERTA LOS ENLACES
		INSERT INTO TBL_BANCOS_VS_COMPRAS
		SELECT Tipo, Clave, _ID_EntidadCompra
		FROM _TMP_BANCOS_VS_COMPRAS;

	END IF;

	RETURN QUERY SELECT _err, _result, _ID_EntidadCompra::varchar;

END
$BODY$
  LANGUAGE plpgsql;
  
  
  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_compras_entidades_cambiar(_id_entidadcompra smallint, _id_tipoentidad smallint, _serie character varying, _doc integer, _descripcion character varying, _formato character varying, _id_bodega smallint, _fija bit, _fijacost bit, _devolucion integer, _orden integer, _fmt_devolucion character varying, _fmt_orden character varying, _iva numeric, _infoplantoc smallint, _infogasrec smallint, _id_clasificacion character varying, _status character)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255); 
BEGIN
	_err := 0;
	_result := (select msj2 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ADM_ENTIDADES' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCOK');--'La entidad de compra/gasto se registr√≥ correctamente';

	IF(select count(*) from TBL_COMPRAS_ENTIDADES where ID_EntidadCompra = _ID_EntidadCompra) < 1
	THEN
		_err := 3;
		_result := (select msj2 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ADM_ENTIDADES' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR');--'ERROR: La clave de la entidad No existe, no se puede cambiar';
	END IF; 

	IF(select count(*) from TBL_COMPRAS_ENTIDADES where ID_EntidadCompra <> _ID_EntidadCompra and ID_TipoEntidad = _ID_TipoEntidad and Serie = _Serie) > 0 
	THEN
		_err := 3;
		_result := (select msj3 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ADM_ENTIDADES' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR');--'ERROR: Ya existe la serie para este tipo de documento, no se puede cambiar';
	END IF;

	IF _err = 0
	THEN
		DELETE FROM TBL_BANCOS_VS_COMPRAS
		WHERE ID_EntidadCompra = _ID_EntidadCompra;
		
		UPDATE TBL_COMPRAS_ENTIDADES
		SET Serie = _Serie, Doc = _Doc, Descripcion = _Descripcion,  Formato = _Formato, ID_Bodega = _ID_Bodega, Fija = _Fija, FijaCost = _FijaCost, 
				Devolucion = _Devolucion, Orden = _Orden, Fmt_Devolucion = _Fmt_Devolucion, Fmt_Orden = _Fmt_Orden, IVA = _IVA, 
				InfoPlantOC = _InfoPlantOC, InfoGasRec = _InfoGasRec,
				ID_Clasificacion = _ID_Clasificacion, Status = _Status
		WHERE ID_EntidadCompra = _ID_EntidadCompra;
		
		-- INSERTA LOS ENLACES
		INSERT INTO TBL_BANCOS_VS_COMPRAS
		SELECT Tipo, Clave, _ID_EntidadCompra
		FROM _TMP_BANCOS_VS_COMPRAS;

	END IF;

	RETURN QUERY SELECT _err, _result, _ID_EntidadCompra::varchar;

END
$BODY$
  LANGUAGE plpgsql;

  
  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_provee_provee_agregar(
    _id_tipo character,
    _id_numero integer,
    _id_cc character,
    _id_cc_comp character,
    _nombre character varying,
    _saldo numeric,
    _id_entidadcompra smallint,
    _rfc character varying,
    _atncompras character varying,
    _atnpagos character varying,
    _colonia character varying,
    _cp character varying,
    _direccion character varying,
    _email character varying,
    _fax character varying,
    _poblacion character varying,
    _tel character varying,
    _compraanual numeric,
    _descuento numeric,
    _dias smallint,
    _limitecredito numeric,
    _ultimacompra timestamp without time zone,
    _obs character varying,
    _precioespmostr bit,
    _id_vendedor smallint,
    _noext character varying,
    _noint character varying,
    _municipio character varying,
    _estado character varying,
    _pais character varying,
    _metododepago character varying,
    _status character,
    _id_satbanco character,
    _smtp smallint,
    _registro_tributario character varying,
    _pedimento character varying)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _ID_Clave int; _result varchar(255);
BEGIN 
	_err := 0;
	_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and 
			m.mod::text = 'COMP_PROVEE' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCOK'); --'El cliente se agreg&oacute; correctamente';
	_ID_Clave := ( select Max(ID_Clave) from TBL_PROVEE_PROVEE where ID_Tipo = _ID_Tipo ) + 1;
	IF _ID_Clave is null THEN _ID_Clave = 1; END IF;
	 
	IF (select count(*) from TBL_PROVEE_PROVEE where ID_Tipo = _ID_Tipo and ID_Entidad = _ID_EntidadCompra and ID_Numero = _ID_Numero) > 0
	THEN
		_err := 3;
		_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and 
			m.mod::text = 'COMP_PROVEE' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'ERROR: La clave del PROVEEe ya existe en otro registro';
	END IF;
	
	IF _err = 0
	THEN	
		INSERT INTO TBL_PROVEE_PROVEE
		VALUES(_ID_Tipo, _ID_Clave, _ID_Numero, _ID_CC, _ID_CC_Comp, _Nombre, _Saldo, _ID_EntidadCompra, _RFC, _AtnCompras, _AtnPagos, _Colonia, _CP, _Direccion, _EMail, 
			_Fax, _Poblacion, _Tel, _CompraAnual, _Descuento, _Dias, _LimiteCredito, _UltimaCompra, _Obs, _PrecioEspMostr, _ID_Vendedor,
			_NoExt, _NoInt, _Municipio, _Estado, _Pais, _MetodoDePago, _Status, _ID_SatBanco, _smtp, _registro_tributario, _pedimento);

		INSERT INTO TBL_PROVEE_SALDOS_MONEDAS
		SELECT Clave, _ID_Tipo, _ID_Clave, 0.00
		FROM TBL_CONT_MONEDAS;
		
		-- inserta en los saldos mensuales de proveedores
		INSERT INTO TBL_PROVEE_SALDOS
		SELECT Mes, Ano, Clave, _ID_Tipo, _ID_Clave, 0.00, 0.00
		FROM TBL_CONT_CATALOGO_PERIODOS, TBL_CONT_MONEDAS
		WHERE Mes <> 13;
			
	END IF;
	
	RETURN QUERY SELECT _err, _result, _id_clave;

END
$BODY$
  LANGUAGE plpgsql;
--ALTER FUNCTION sp_provee_provee_agregar(character, integer, character, character, character varying, numeric, smallint, character varying,

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_provee_provee_cambiar(
    _id_tipo character,
    _id_clave integer,
    _id_cc character,
    _id_cc_comp character,
    _nombre character varying,
    _saldo numeric,
    _id_entidadcompra smallint,
    _rfc character varying,
    _atncompras character varying,
    _atnpagos character varying,
    _colonia character varying,
    _cp character varying,
    _direccion character varying,
    _email character varying,
    _fax character varying,
    _poblacion character varying,
    _tel character varying,
    _compraanual numeric,
    _descuento numeric,
    _dias smallint,
    _limitecredito numeric,
    _ultimacompra timestamp without time zone,
    _obs character varying,
    _precioespmostr bit,
    _id_vendedor smallint,
    _noext character varying,
    _noint character varying,
    _municipio character varying,
    _estado character varying,
    _pais character varying,
    _metododepago character varying,
    _status character,
    _id_satbanco character,
    _smtp smallint,
    _registro_tributario character varying,
    _pedimento character varying)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255);  
BEGIN 
	_err := 0;
	_result := (select msj2 from tbl_msj m where m.alc::text = 'CEF' and 
			m.mod::text = 'COMP_PROVEE' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCOK'); 
	
	IF (select count(*) from TBL_PROVEE_PROVEE where ID_Tipo = _ID_Tipo and ID_Clave = _ID_Clave) < 1
	THEN
		_err := 3;
		_result := (select msj2 from tbl_msj m where m.alc::text = 'CEF' and 
			m.mod::text = 'COMP_PROVEE' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); 
	END IF;
	
	IF _err = 0
	THEN	
		UPDATE TBL_PROVEE_PROVEE
		SET ID_CC = _ID_CC, ID_CC_Comp = _ID_CC_Comp, Nombre = _Nombre, ID_Entidad = _ID_EntidadCompra, RFC = _RFC, AtnCompras = _AtnCompras, 
			AtnPagos = _AtnPagos, Colonia = _Colonia, CP = _CP, Direccion = _Direccion, EMail = _EMail, Fax = _Fax, Poblacion = _Poblacion, Tel = _Tel, 
			CompraAnual = _CompraAnual, Descuento = _Descuento, Dias = _Dias, LimiteCredito = _LimiteCredito, UltimaCompra = _UltimaCompra, Obs = _Obs, PrecioEspMostr = _PrecioEspMostr, ID_Vendedor = _ID_Vendedor,
			NoExt = _NoExt, NoInt = _NoInt, Municipio = _Municipio, Estado = _Estado, Pais = _Pais, MetodoDePago = _MetodoDePago, Status = _Status, ID_SatBanco = _ID_SatBanco, smtp = _smtp, 
			registro_tributario = _registro_tributario, pedimento = _pedimento
		WHERE ID_Tipo = _ID_Tipo and ID_Clave = _ID_Clave;
			
	END IF;
	
	RETURN QUERY SELECT _err, _result, _id_clave;

END
$BODY$
  LANGUAGE plpgsql;
--ALTER FUNCTION sp_provee_provee_cambiar(character, integer, character, character, character varying, numeric, smallint, character varying,

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION view_ventas_entidades_ids(_id_usuario character varying, _entidad character varying)
  RETURNS SETOF record AS
$BODY$  
BEGIN
	IF _ID_Usuario = 'cef-su' OR (select count(*) from tbl_usuarios_submodulo_roles where id_usuario = _id_usuario and id_rol = 'cef-ven') > 0
	THEN
		IF _Entidad = 'CEF-X' -- Regresa todo el set
		THEN
			RETURN QUERY
			SELECT _id_usuario as id_usuario, e.ID_EntidadVenta AS id_entidad, e.ID_TipoEntidad AS ID_Tipo, e.Serie, e.Descripcion, e.Doc, e.Formato, e.FormatoMOSTR, e.ID_Bodega, 
				b.Nombre AS Bodega, e.IVA, e.DesgloseMOSTR, e.DesgloseCLIENT, e.MostrAplicaPolitica, b.AuditarAlm, e.TipoCobro, e.CambioNumero, e.DesdeCliente, e.HastaCliente, e.Pedido, e.AjusteDePrecio, e.FactorDeAjuste, e.ImprimeSinEm, e.Fija, e.FijaCost, e.Devolucion,
				e.ID_Vendedor, v.Nombre as VendedorNombre, e.Remision, e.Cotizacion, e.CFD, e.Fmt_Devolucion, e.Fmt_Remision, e.Fmt_Pedido, e.Fmt_Cotizacion, b.ManejoStocks
			FROM TBL_VENTAS_ENTIDADES e INNER JOIN
				TBL_INVSERV_BODEGAS b ON b.ID_Bodega = e.ID_Bodega INNER JOIN
				TBL_VENDEDORES v ON e.ID_Vendedor = v.ID_Vendedor
			ORDER BY e.ID_EntidadVenta ASC; 
			
		ELSIF _Entidad = 'CEF-1'
		THEN
			RETURN QUERY 
			SELECT _id_usuario as id_usuario, e.ID_EntidadVenta AS id_entidad, e.ID_TipoEntidad AS ID_Tipo, e.Serie, e.Descripcion, e.Doc, e.Formato, e.FormatoMOSTR, e.ID_Bodega, 
				b.Nombre AS Bodega, e.IVA, e.DesgloseMOSTR, e.DesgloseCLIENT, e.MostrAplicaPolitica, b.AuditarAlm, e.TipoCobro, e.CambioNumero, e.DesdeCliente, e.HastaCliente, e.Pedido, e.AjusteDePrecio, e.FactorDeAjuste, e.ImprimeSinEm, e.Fija, e.FijaCost, e.Devolucion,
				e.ID_Vendedor, v.Nombre as VendedorNombre, e.Remision, e.Cotizacion, e.CFD, e.Fmt_Devolucion, e.Fmt_Remision, e.Fmt_Pedido, e.Fmt_Cotizacion, b.ManejoStocks
			FROM TBL_VENTAS_ENTIDADES e INNER JOIN
				TBL_INVSERV_BODEGAS b ON b.ID_Bodega = e.ID_Bodega INNER JOIN
				TBL_VENDEDORES v ON e.ID_Vendedor = v.ID_Vendedor
			ORDER BY e.ID_EntidadVenta ASC
			LIMIT 1;
		ELSE
			RETURN QUERY 
			SELECT _id_usuario as id_usuario, e.ID_EntidadVenta AS id_entidad, e.ID_TipoEntidad AS ID_Tipo, e.Serie, e.Descripcion, e.Doc, e.Formato, e.FormatoMOSTR, e.ID_Bodega, 
				b.Nombre AS Bodega, e.IVA, e.DesgloseMOSTR, e.DesgloseCLIENT, e.MostrAplicaPolitica, b.AuditarAlm, e.TipoCobro, e.CambioNumero, e.DesdeCliente, e.HastaCliente, e.Pedido, e.AjusteDePrecio, e.FactorDeAjuste, e.ImprimeSinEm, e.Fija, e.FijaCost, e.Devolucion,
				e.ID_Vendedor, v.Nombre as VendedorNombre, e.Remision, e.Cotizacion, e.CFD, e.Fmt_Devolucion, e.Fmt_Remision, e.Fmt_Pedido, e.Fmt_Cotizacion, b.ManejoStocks
			FROM TBL_VENTAS_ENTIDADES e INNER JOIN
				TBL_INVSERV_BODEGAS b ON b.ID_Bodega = e.ID_Bodega INNER JOIN
				TBL_VENDEDORES v ON e.ID_Vendedor = v.ID_Vendedor
			WHERE e.ID_EntidadVenta = _Entidad::smallint;
		END IF;
	ELSE
		IF _Entidad = 'CEF-X' -- Regresa todo el set
		THEN
			RETURN QUERY 
			SELECT DISTINCT _ID_Usuario as ID_Usuario, e.ID_EntidadVenta AS ID_Entidad, e.ID_TipoEntidad AS ID_Tipo, e.Serie, e.Descripcion, e.Doc, e.Formato, e.FormatoMOSTR, e.ID_Bodega, 
				b.Nombre AS Bodega, e.IVA, e.DesgloseMOSTR, e.DesgloseCLIENT, e.MostrAplicaPolitica, b.AuditarAlm, e.TipoCobro, e.CambioNumero, e.DesdeCliente, e.HastaCliente, e.Pedido, e.AjusteDePrecio, e.FactorDeAjuste, e.ImprimeSinEm, e.Fija, e.FijaCost, e.Devolucion,
				e.ID_Vendedor, v.Nombre as VendedorNombre, e.Remision, e.Cotizacion, e.CFD, e.Fmt_Devolucion, e.Fmt_Remision, e.Fmt_Pedido, e.Fmt_Cotizacion, b.ManejoStocks
			FROM TBL_VENTAS_ENTIDADES e INNER JOIN
				TBL_INVSERV_BODEGAS b ON b.ID_Bodega = e.ID_Bodega INNER JOIN
				TBL_VENDEDORES v ON e.ID_Vendedor = v.ID_Vendedor INNER JOIN
				TBL_USUARIOS_SUBMODULO_VENTAS u ON e.ID_EntidadVenta = u.ID_EntidadVenta
			WHERE (u.id_usuario = _ID_Usuario OR u.id_usuario IN
				(select sr.ID_Rol from tbl_usuarios_submodulo_roles sr where sr.id_usuario = _ID_Usuario))
			ORDER BY e.ID_EntidadVenta ASC;

		ELSIF _Entidad = 'CEF-1'
		THEN
			RETURN QUERY 
			SELECT DISTINCT _ID_Usuario as ID_Usuario, e.ID_EntidadVenta AS ID_Entidad, e.ID_TipoEntidad AS ID_Tipo, e.Serie, e.Descripcion, e.Doc, e.Formato, e.FormatoMOSTR, e.ID_Bodega, 
				b.Nombre AS Bodega, e.IVA, e.DesgloseMOSTR, e.DesgloseCLIENT, e.MostrAplicaPolitica, b.AuditarAlm, e.TipoCobro, e.CambioNumero, e.DesdeCliente, e.HastaCliente, e.Pedido, e.AjusteDePrecio, e.FactorDeAjuste, e.ImprimeSinEm, e.Fija, e.FijaCost, e.Devolucion,
				e.ID_Vendedor, v.Nombre as VendedorNombre, e.Remision, e.Cotizacion, e.CFD, e.Fmt_Devolucion, e.Fmt_Remision, e.Fmt_Pedido, e.Fmt_Cotizacion, b.ManejoStocks
			FROM TBL_VENTAS_ENTIDADES e INNER JOIN
				TBL_INVSERV_BODEGAS b ON b.ID_Bodega = e.ID_Bodega INNER JOIN
				TBL_VENDEDORES v ON e.ID_Vendedor = v.ID_Vendedor INNER JOIN
				TBL_USUARIOS_SUBMODULO_VENTAS u ON e.ID_EntidadVenta = u.ID_EntidadVenta
			WHERE (u.id_usuario = _ID_Usuario OR u.id_usuario IN
				(select sr.ID_Rol from tbl_usuarios_submodulo_roles sr where sr.id_usuario = _ID_Usuario))
			ORDER BY e.ID_EntidadVenta ASC
			LIMIT 1;

		ELSE
			RETURN QUERY
			SELECT DISTINCT _ID_Usuario as ID_Usuario, e.ID_EntidadVenta AS ID_Entidad, e.ID_TipoEntidad AS ID_Tipo, e.Serie, e.Descripcion, e.Doc, e.Formato, e.FormatoMOSTR, e.ID_Bodega, 
				b.Nombre AS Bodega, e.IVA, e.DesgloseMOSTR, e.DesgloseCLIENT, e.MostrAplicaPolitica, b.AuditarAlm, e.TipoCobro, e.CambioNumero, e.DesdeCliente, e.HastaCliente, e.Pedido, e.AjusteDePrecio, e.FactorDeAjuste, e.ImprimeSinEm, e.Fija, e.FijaCost, e.Devolucion,
				e.ID_Vendedor, v.Nombre as VendedorNombre, e.Remision, e.Cotizacion, e.CFD, e.Fmt_Devolucion, e.Fmt_Remision, e.Fmt_Pedido, e.Fmt_Cotizacion, b.ManejoStocks
			FROM TBL_VENTAS_ENTIDADES e INNER JOIN
				TBL_INVSERV_BODEGAS b ON b.ID_Bodega = e.ID_Bodega INNER JOIN
				TBL_VENDEDORES v ON e.ID_Vendedor = v.ID_Vendedor INNER JOIN
				TBL_USUARIOS_SUBMODULO_VENTAS u ON e.ID_EntidadVenta = u.ID_EntidadVenta
			WHERE (u.id_usuario = _ID_Usuario OR u.id_usuario IN
				(select sr.ID_Rol from tbl_usuarios_submodulo_roles sr where sr.id_usuario = _ID_Usuario)) 
			AND e.ID_EntidadVenta = _Entidad::smallint;
			
		END IF;
	END IF;
END
$BODY$
  LANGUAGE plpgsql;

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_client_client_agregar(
    _id_tipo character,
    _id_numero integer,
    _id_cc character,
    _id_cc_comp character,
    _nombre character varying,
    _saldo numeric,
    _id_entidadventa smallint,
    _rfc character varying,
    _atncompras character varying,
    _atnpagos character varying,
    _colonia character varying,
    _cp character varying,
    _direccion character varying,
    _email character varying,
    _fax character varying,
    _poblacion character varying,
    _tel character varying,
    _compraanual numeric,
    _descuento numeric,
    _dias smallint,
    _limitecredito numeric,
    _ultimacompra timestamp without time zone,
    _obs character varying,
    _precioespmostr bit,
    _id_vendedor smallint,
    _noext character varying,
    _noint character varying,
    _municipio character varying,
    _estado character varying,
    _pais character varying,
    _metododepago character varying,
    _status character,
    _id_satbanco character,
    _smtp smallint,
    _registro_tributario character varying,
    _pedimento character varying)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _ID_Clave int; _result varchar(255);
BEGIN 
	_err := 0;
	_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and 
			m.mod::text = 'VEN_CLIENT' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCOK'); --'El cliente se agreg&oacute; correctamente';
	_ID_Clave := ( select Max(ID_Clave) from TBL_CLIENT_CLIENT where ID_Tipo = _ID_Tipo ) + 1;
	IF _ID_Clave is null THEN _ID_Clave = 1; END IF;
	 
	IF (select count(*) from TBL_CLIENT_CLIENT where ID_Tipo = _ID_Tipo and ID_Entidad = _ID_EntidadVenta and ID_Numero = _ID_Numero) > 0
	THEN
		_err := 3;
		_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and 
			m.mod::text = 'VEN_CLIENT' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'ERROR: La clave del cliente ya existe en otro registro';
	END IF;
	
	IF _err = 0
	THEN	
		INSERT INTO TBL_CLIENT_CLIENT
		VALUES(_ID_Tipo, _ID_Clave, _ID_Numero, _ID_CC, _ID_CC_Comp, _Nombre, _Saldo, _ID_EntidadVenta, _RFC, _AtnCompras, _AtnPagos, _Colonia, _CP, _Direccion, _EMail, 
			_Fax, _Poblacion, _Tel, _CompraAnual, _Descuento, _Dias, _LimiteCredito, _UltimaCompra, _Obs, _PrecioEspMostr, _ID_Vendedor,
			_NoExt, _NoInt, _Municipio, _Estado, _Pais, _MetodoDePago, _Status, _ID_SatBanco, _smtp, _registro_tributario, _pedimento);

		INSERT INTO TBL_CLIENT_SALDOS_MONEDAS
		SELECT Clave, _ID_Tipo, _ID_Clave, 0.00
		FROM TBL_CONT_MONEDAS;
		
		-- inserta en los saldos mensuales de clientes
		INSERT INTO TBL_CLIENT_SALDOS
		SELECT Mes, Ano, Clave, _ID_Tipo, _ID_Clave, 0.00, 0.00
		FROM TBL_CONT_CATALOGO_PERIODOS, TBL_CONT_MONEDAS
		WHERE Mes <> 13;
		
			
	END IF;
	
	RETURN QUERY SELECT _err, _result, _id_clave;

END
$BODY$
  LANGUAGE plpgsql;
--ALTER FUNCTION sp_client_client_agregar(character, integer, character, character, character varying, numeric, smallint, character varying,

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_client_client_cambiar(
    _id_tipo character,
    _id_clave integer,
    _id_cc character,
    _id_cc_comp character,
    _nombre character varying,
    _saldo numeric,
    _id_entidadventa smallint,
    _rfc character varying,
    _atncompras character varying,
    _atnpagos character varying,
    _colonia character varying,
    _cp character varying,
    _direccion character varying,
    _email character varying,
    _fax character varying,
    _poblacion character varying,
    _tel character varying,
    _compraanual numeric,
    _descuento numeric,
    _dias smallint,
    _limitecredito numeric,
    _ultimacompra timestamp without time zone,
    _obs character varying,
    _precioespmostr bit,
    _id_vendedor smallint,
    _noext character varying,
    _noint character varying,
    _municipio character varying,
    _estado character varying,
    _pais character varying,
    _metododepago character varying,
    _status character,
    _id_satbanco character,
    _smtp smallint,
    _registro_tributario character varying,
    _pedimento character varying)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255); 
BEGIN 
	_err := 0;
	_result := (select msj2 from tbl_msj m where m.alc::text = 'CEF' and 
			m.mod::text = 'VEN_CLIENT' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCOK'); --'El cliente se agreg&oacute; correctamente';
	
	IF (select count(*) from TBL_CLIENT_CLIENT where ID_Tipo = _ID_Tipo and ID_Clave = _ID_Clave) < 1
	THEN
		_err := 3;
		_result := (select msj2 from tbl_msj m where m.alc::text = 'CEF' and 
			m.mod::text = 'VEN_CLIENT' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'ERROR: La clave del cliente ya existe en otro registro';
	END IF;
	
	IF _err = 0
	THEN	
		UPDATE TBL_CLIENT_CLIENT
		SET ID_CC = _ID_CC, ID_CC_Comp = _ID_CC_Comp, Nombre = _Nombre, ID_Entidad = _ID_EntidadVenta, RFC = _RFC, AtnCompras = _AtnCompras, 
			AtnPagos = _AtnPagos, Colonia = _Colonia, CP = _CP, Direccion = _Direccion, EMail = _EMail, Fax = _Fax, Poblacion = _Poblacion, Tel = _Tel, 
			CompraAnual = _CompraAnual, Descuento = _Descuento, Dias = _Dias, LimiteCredito = _LimiteCredito, UltimaCompra = _UltimaCompra, Obs = _Obs, PrecioEspMostr = _PrecioEspMostr, ID_Vendedor = _ID_Vendedor,
			NoExt = _NoExt, NoInt = _NoInt, Municipio = _Municipio, Estado = _Estado, Pais = _Pais, MetodoDePago = _MetodoDePago, Status = _Status, ID_SatBanco = _ID_SatBanco, smtp = _smtp, 
			registro_tributario = _registro_tributario, pedimento = _pedimento
		WHERE ID_Tipo = _ID_Tipo and ID_Clave = _ID_Clave;
			
	END IF;
	
	RETURN QUERY SELECT _err, _result, _id_clave;

END
$BODY$
  LANGUAGE plpgsql;
--ALTER FUNCTION sp_client_client_cambiar(character, integer, character, character, character varying, numeric, smallint, character varying,

--@FIN_BLOQUE
CREATE TABLE abstbl_cuentaspagos
(
  id_cp serial NOT NULL,
  id_entidad smallint NOT NULL,
  id_tipocp character(3) NOT NULL,
  fecha timestamp without time zone NOT NULL,
  id_tipoclipro character(2) NOT NULL,
  id_claveclipro integer NOT NULL,
  id_concepto smallint NOT NULL,
  concepto character varying(80) NOT NULL,
  id_tipodocorig character(4),
  id_clavedocorig integer,
  moneda smallint NOT NULL,
  tc numeric(19,4) NOT NULL,
  total numeric(19,4) NOT NULL,
  saldo numeric(19,4) NOT NULL,
  vencimiento timestamp without time zone NOT NULL,
  ref character varying(25),
  status character(1) NOT NULL,
  id_pol integer,
  id_aplicacion integer,
  id_pagobancaj integer
);
  
INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('VEN_CXC');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('VEN_CXC_CONSULTAR');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('VEN_CXC_AGREGAR');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('VEN_CXC_PAGAR');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('VEN_CXC_SALDAR');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('VEN_CXC_CANCELAR');



--@FIN_BLOQUE
CREATE TABLE tbl_client_cxc
(
  id_cp serial NOT NULL,
-- Inherited from table abstbl_cuentaspagos:  id_entidad smallint NOT NULL,
-- Inherited from table abstbl_cuentaspagos:  id_tipocp character(3) NOT NULL,
-- Inherited from table abstbl_cuentaspagos:  fecha timestamp without time zone NOT NULL,
-- Inherited from table abstbl_cuentaspagos:  id_tipoclipro character(2) NOT NULL,
-- Inherited from table abstbl_cuentaspagos:  id_claveclipro integer NOT NULL,
-- Inherited from table abstbl_cuentaspagos:  id_concepto smallint NOT NULL,
-- Inherited from table abstbl_cuentaspagos:  concepto character varying(80) NOT NULL,
-- Inherited from table abstbl_cuentaspagos:  id_tipodocorig character(4),
-- Inherited from table abstbl_cuentaspagos:  id_clavedocorig integer,
-- Inherited from table abstbl_cuentaspagos:  moneda smallint NOT NULL,
-- Inherited from table abstbl_cuentaspagos:  tc numeric(19,4) NOT NULL,
-- Inherited from table abstbl_cuentaspagos:  total numeric(19,4) NOT NULL,
-- Inherited from table abstbl_cuentaspagos:  saldo numeric(19,4) NOT NULL,
-- Inherited from table abstbl_cuentaspagos:  vencimiento timestamp without time zone NOT NULL,
-- Inherited from table abstbl_cuentaspagos:  ref character varying(25),
-- Inherited from table abstbl_cuentaspagos:  status character(1) NOT NULL,
-- Inherited from table abstbl_cuentaspagos:  id_pol integer,
-- Inherited from table abstbl_cuentaspagos:  id_aplicacion integer,
-- Inherited from table abstbl_cuentaspagos:  id_pagobancaj integer,
  CONSTRAINT pk_tbl_client_cxc PRIMARY KEY (id_cp ),
  CONSTRAINT fk_tbl_client_cxc_tbl_bancos_movimientos FOREIGN KEY (id_pagobancaj)
      REFERENCES tbl_bancos_movimientos (id) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE SET NULL,
  CONSTRAINT fk_tbl_client_cxc_tbl_client_client FOREIGN KEY (id_tipoclipro, id_claveclipro)
      REFERENCES tbl_client_client (id_tipo, id_clave) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_tbl_client_cxc_tbl_client_cxc FOREIGN KEY (id_aplicacion)
      REFERENCES tbl_client_cxc (id_cp) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE SET NULL,
  CONSTRAINT fk_tbl_client_cxc_tbl_client_cxc_conceptos FOREIGN KEY (id_concepto)
      REFERENCES tbl_client_cxc_conceptos (id_concepto) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_tbl_client_cxc_tbl_cont_monedas FOREIGN KEY (moneda)
      REFERENCES tbl_cont_monedas (clave) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_tbl_client_cxc_tbl_cont_polizas FOREIGN KEY (id_pol)
      REFERENCES tbl_cont_polizas (id) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE SET NULL,
  CONSTRAINT fk_tbl_client_cxc_tbl_ventas_entidades FOREIGN KEY (id_entidad)
      REFERENCES tbl_ventas_entidades (id_entidadventa) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT ck_tbl_client_cxc_id_tipocp CHECK (id_tipocp = 'ALT'::bpchar OR id_tipocp = 'PAG'::bpchar OR id_tipocp = 'SAL'::bpchar OR id_tipocp = 'ANT'::bpchar OR id_tipocp = 'APL'::bpchar OR id_tipocp = 'DPA'::bpchar OR id_tipocp = 'DEV'::bpchar),
  CONSTRAINT ck_tbl_client_cxc_status CHECK (status = 'C'::bpchar OR status = 'G'::bpchar)
)
INHERITS (abstbl_cuentaspagos);



--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_client_cxc_modulo AS 
 SELECT c.id_cp AS clave, c.id_tipocp, c.id_tipoclipro AS id_tipoclient, c.id_claveclipro AS id_claveclient, c.id_entidad, 
        CASE
            WHEN c.saldo = 0::numeric THEN B'1'::bit(1)
            ELSE B'0'::bit(1)
        END AS pagada, c.fecha, p.nombre, c.concepto, c.moneda, mon.simbolo AS monedasim, c.tc, c.total, c.saldo, c.vencimiento, 
        CASE
            WHEN c.ref IS NULL THEN ''::character varying(25)
            ELSE c.ref
        END AS ref, c.status, 
        CASE
            WHEN c.id_pol IS NULL THEN (-1)
            ELSE c.id_pol
        END AS id_pol, 
        CASE
            WHEN c.id_pol IS NULL THEN ''::character varying::text
            ELSE ( SELECT (tbl_cont_polizas.tipo::text || ' - '::text) || tbl_cont_polizas.numero::character varying::text
               FROM tbl_cont_polizas
              WHERE tbl_cont_polizas.id = c.id_pol)
        END AS pol, c.id_concepto, con.descripcion, c.id_aplicacion, c.id_pagobancaj, 
        CASE
            WHEN c.id_pagobancaj IS NULL THEN ''::text
            ELSE ( SELECT (bc.cuenta::text || ' - '::text) || bm.num::text
               FROM tbl_bancos_movimientos bm
          JOIN tbl_bancos_cuentas bc ON bm.tipo = bc.tipo AND bm.clave = bc.clave
         WHERE bm.id = c.id_pagobancaj)
        END AS pagobancaj, round(c.total * c.tc, 2) AS totalpesos, round(c.saldo * c.tc, 2) AS saldopesos
   FROM tbl_client_cxc c
   JOIN tbl_client_client p ON c.id_claveclipro = p.id_clave AND c.id_tipoclipro = p.id_tipo
   JOIN tbl_client_cxc_conceptos con ON c.id_concepto = con.id_concepto
   JOIN tbl_cont_monedas mon ON c.moneda = mon.clave;
   


--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_catalog_client_cxc_conceptos AS 
 SELECT c.id_concepto AS clave, c.descripcion, c.tipo AS especial
   FROM tbl_client_cxc_conceptos c
  WHERE c.desistema = B'0'::"bit";

--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_catalog_client_poriden AS 
 SELECT c.id_clave AS clave, c.nombre AS descripcion, (e.descripcion::text || ':'::text) || c.id_numero AS especial, c.id_entidad
   FROM tbl_client_client c
   JOIN tbl_ventas_entidades e ON c.id_entidad = e.id_entidadventa
  WHERE c.status = 'A'::bpchar;

--ALTER TABLE view_catalog_client_poriden

--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_public_client_cxc_conceptos_cat AS 
 SELECT c.id_concepto, 
        CASE
            WHEN c.desistema = B'1'::"bit" THEN ( SELECT m.msj1
               FROM tbl_msj m
              WHERE m.alc::text = 'CEF'::text AND m.mod::text = 'CXPC_ENLACES'::text AND m.sub::text = 'CATALOGO'::text AND m.elm::text = c.id_concepto::text)
            ELSE c.descripcion
        END AS descripcion, c.desistema, c.tipo, c.cc
   FROM tbl_client_cxc_conceptos c;

  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_client_cxc_alta(_id_entidad smallint, _fecha timestamp without time zone, _id_tipoclient character, _id_claveclient integer, _concepto character varying, _moneda smallint, _tc numeric, _total numeric, _cantidad numeric, _id_concepto smallint, id_tipodocorig character varying, id_clavedocorig integer, _claseref character varying)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_ID_CXC int; _err int; _result varchar(255); _Vencimiento timestamp; _VencimientoInterval varchar(10);  
	_Dias smallint; _errpart int; _resultpart varchar(255); _numpol int; _CC char(19); _CC_Con char(19); 
	_ConceptoCon varchar(80); _Ref varchar(25); _mes smallint; _ano smallint; _id_clasificacion varchar(10);
BEGIN
	_err := 0;
	_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'VEN_CXC' and 
			m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCOK'); 
	_Dias := (select Dias from TBL_CLIENT_CLIENT where ID_Tipo = _ID_TipoClient and ID_Clave =  _ID_ClaveClient );
	_VencimientoInterval := cast(_Dias as varchar) || ' day';
	_Vencimiento := _Fecha + _VencimientoInterval::interval; --DATEADD(day, @Dias, @Fecha)
	_CC :=  (select ID_CC from TBL_CLIENT_CLIENT where ID_Tipo = _ID_TipoClient and ID_Clave =  _ID_ClaveClient );
	_CC_Con = (select CC from TBL_CLIENT_CXC_CONCEPTOS where ID_Concepto = _ID_Concepto);
	_ConceptoCon = (select Descripcion from TBL_CLIENT_CXC_CONCEPTOS where ID_Concepto = _ID_Concepto);
	_mes := date_part('month',_Fecha);
	_ano := date_part('year',_Fecha);
	_id_clasificacion := (select ID_Clasificacion from TBL_VENTAS_ENTIDADES where ID_EntidadVenta = _ID_Entidad);

	IF(select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano and Cerrado = 1) > 0
	OR (select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano) < 1
	THEN
		_err := 3;
		_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_POLIZAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'ERROR: La fecha de poliza pertenece a un periodo cerrado o inexistente'
	END IF;
	
	IF _err = 0
	THEN
		INSERT INTO TBL_CLIENT_CXC
		VALUES(default, _ID_Entidad, 'ALT', _Fecha, _ID_TipoClient, _ID_ClaveClient, _ID_Concepto, _Concepto, id_tipodocorig, id_clavedocorig,_Moneda,_TC,_Total,_Total,_Vencimiento,_claseref,'G',null,null,null)
		RETURNING currval(pg_get_serial_sequence('TBL_CLIENT_CXC', 'id_cp')) INTO _id_cxc;

		UPDATE  TBL_CLIENT_CXC
		SET ID_Aplicacion = _ID_CXC
		WHERE ID_CP = _ID_CXC;

		_Ref = 'VCXC|' || cast(_ID_CXC as varchar) || '|' || cast(_ID_Entidad as varchar) || '||';
		
		UPDATE TBL_CLIENT_SALDOS_MONEDAS
		SET Saldo = Saldo + _Total
		WHERE ID_Moneda = _Moneda AND ID_Tipo = _ID_TipoClient AND ID_Clave =  _ID_ClaveClient;
		
		IF _CC_Con IS NOT NULL -- si el concepto de alta tiene contraparte contable, registrar√° la poliza 
		THEN
			-- Primero registra y crea la tabla temporal de detalle de la poliza
			CREATE LOCAL TEMPORARY TABLE _TMP_CONT_POLIZAS_DETALLE (
				Part smallint NOT NULL ,
				Cuenta char(19) NOT NULL ,
				Concepto varchar(80) NOT NULL ,
				Parcial numeric(19,4) NOT NULL ,
				Moneda smallint NOT NULL ,
				TC numeric(19,4) NOT NULL ,
				Debe numeric(19,4) NOT NULL ,
				Haber numeric(19,4) NOT NULL
			);
			-- Fin de la tabla temporal

			-- Inserta el cargo al cliente
			INSERT INTO _TMP_CONT_POLIZAS_DETALLE
			VALUES (1, _CC, _ConceptoCon, _Total, _Moneda, _TC, _Cantidad, 0.00);
			
			-- Copia el abono al concepto del alta
			INSERT INTO _TMP_CONT_POLIZAS_DETALLE
			VALUES (2, _CC_Con, _ConceptoCon, _Total, _Moneda, _TC, 0.00, _Cantidad);
					
			-- Agrega ahora la poliza
			--sp_cont_polizas_agregar(_tipo character, _fecha timestamp without time zone, _concepto character varying, _interna bit, _ref character varying, _total numeric, _id_clasificacion character varying)

			SELECT * INTO _errpart, _resultpart, _numpol FROM sp_cont_polizas_agregar('DR', _Fecha, _Concepto,'0', _Ref, _Cantidad, _id_clasificacion ) as ( err integer, res varchar, clave integer );
      
			IF _errpart <> 0
			THEN
				_err := _errpart;
				_result := _resultpart;
			ELSE
				UPDATE  TBL_CLIENT_CXC
				SET ID_Pol = _numpol
				WHERE ID_CP = _ID_CXC;
			END IF;

			DROP TABLE _TMP_CONT_POLIZAS_DETALLE;
			
		END IF;
	END IF;

	RETURN QUERY SELECT _err, _result, _id_cxc;

END
$BODY$
  LANGUAGE plpgsql;  

  


--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_public_bancos_cuentas_vs_ventas AS 
 SELECT b.tipo, b.clave, b.cuenta, b.sigcheque, e.id_entidadventa
   FROM tbl_bancos_cuentas b
   JOIN tbl_bancos_vs_ventas e ON b.tipo = e.id_tipobanco AND b.clave = e.id_clavebanco
  WHERE b.status <> 'C'::bpchar;


  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_client_cxc_prestamo(
    _id_entidad smallint,
    _fecha timestamp without time zone,
    _id_tipoclient character,
    _id_claveclient integer,
    _concepto character varying,
    _doc character varying,
    _moneda smallint,
    _tc numeric,
    _total numeric,
    _id_formapago smallint,
    _id_bancaj smallint,
    _cantidad numeric,
    _tipomov character,
    _id_satbanco character,
    _id_satmetodospago character,
    _bancoext character varying,
    _cuentabanco character varying,
    _cheque character varying)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_ID_CXC int; _bancajmov int; _err int; _result varchar(255); _Vencimiento timestamp;   
	_errpart int; _resultpart varchar(255); _banresult varchar(255);
	_CC char(19); _BanCaj smallint; _mes smallint; _ano smallint; _IdMon smallint; _tcBAN numeric(19,4); _TotalBAN numeric(19,4);
	_ConceptoCon varchar(80); _id_clasificacion varchar(10); _Ref varchar(25); -- _Dias smallint;
	_Beneficiario varchar(80); _RFC varchar(15);
BEGIN
	_err := 0;
	_result := (select msj2 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'VEN_CXC' and 
			m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCOK'); 
	_CC :=  (select ID_CC from TBL_CLIENT_CLIENT where ID_Tipo = _ID_TipoClient and ID_Clave =  _ID_ClaveClient );
	_BanCaj := _ID_FormaPago; -- 1 cajas 0 bancos
	_Beneficiario := ( select VAlfanumerico from TBL_VARIABLES where ID_Variable = 'EMPRESA');
	_RFC := ( select RFC from TBL_CLIENT_CLIENT where ID_Tipo = _ID_TipoClient and ID_Clave =  _ID_ClaveClient);

	--_CC_Con := (select CC from TBL_CLIENT_CXC_CONCEPTOS where ID_Concepto = _ID_Concepto);
	_ConceptoCon := (select Descripcion from VIEW_CLIENT_CXC_CONCEPTOS where ID_Concepto = '1') || ' - ' || _Doc;
	_mes := date_part('month',_Fecha);
	_ano := date_part('year',_Fecha);
	_id_clasificacion := (select ID_Clasificacion from TBL_VENTAS_ENTIDADES where ID_EntidadVenta = _ID_Entidad);

	IF(select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano and Cerrado = 1) > 0
	OR (select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano) < 1
	THEN
		_err := 3;
		_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_POLIZAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'ERROR: La fecha de poliza pertenece a un periodo cerrado o inexistente'
	END IF;

	_IdMon := (select ID_Moneda from TBL_BANCOS_CUENTAS where Tipo = _BanCaj and Clave = _ID_BanCaj);
	_TotalBAN := (case when _IdMon = 1 then _Cantidad else _Total end );
	_tcBAN := (case when _IdMon = 1 then 1.0 else _TC end);

	IF _IdMon <> 1 and _IdMon <> _Moneda
	THEN
		_err := 3;
		_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'VEN_CXC' and 
			m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'ERROR: Solo se pueden anticipar con bancos de moneda extranjera, pagos de la misma moneda extranjera';
	END IF;
	
	IF _err = 0
	THEN
		INSERT INTO TBL_CLIENT_CXC
		VALUES(default, _ID_Entidad, 'ANT', _Fecha, _ID_TipoClient, _ID_ClaveClient, '1', _Concepto,/*id_tipodocorig*/ null,/*id_clavedocorig*/ null,_Moneda,_TC,_Total,_Total,_Fecha,/*Ref*/null,'G',null,null,null)
		RETURNING currval(pg_get_serial_sequence('TBL_CLIENT_CXC', 'id_cp')) INTO _id_cxc;

		UPDATE  TBL_CLIENT_CXC
		SET ID_Aplicacion = _ID_CXC
		WHERE ID_CP = _ID_CXC;

		_Ref = 'VCXC|' || cast(_ID_CXC as varchar) || '|' || cast(_ID_Entidad as varchar) || '||';

		UPDATE TBL_CLIENT_SALDOS_MONEDAS
		SET Saldo = Saldo - _Total
		WHERE ID_Moneda = _Moneda AND ID_Tipo = _ID_TipoClient AND ID_Clave = _ID_ClaveClient;

		CREATE LOCAL TEMPORARY TABLE _TMP_BANCOS_MOVIMIENTOS_DETALLE (
			Part smallint NOT NULL ,
			Cuenta char(19) NOT NULL ,
			Concepto varchar(80) NOT NULL ,
			Parcial numeric(19,4) NOT NULL ,
			Moneda smallint NOT NULL ,
			TC numeric(19,4) NOT NULL ,
			Cantidad numeric(19,4) NOT NULL
		);

		IF _Moneda = 1 OR (_Moneda <> 1 AND _IdMon <> 1) -- Si el anticipo es en pesos o, El anticipo es e dls y el banco esta en esa misma moneda		
		THEN
			INSERT INTO _TMP_BANCOS_MOVIMIENTOS_DETALLE
			VALUES( '1', _CC, _ConceptoCon, _Total, _Moneda, _TC, _Total);
		 		
			SELECT * INTO _errpart, _resultpart, _bancajmov FROM  sp_bancos_movs_agregar( _BanCaj, _ID_BanCaj, _Fecha, _Concepto, _Beneficiario, _Total, 0.00, _tipomov, 'T', _IdMon, _tcBAN, _Ref, _Doc, _id_clasificacion, null, _ID_SatBanco, _RFC, _ID_SatMetodosPago, _BancoExt, _CuentaBanco, _Cheque ) as ( err integer, res varchar, clave integer);
		    
		ELSE -- Moneda extranjera con pago a cuenta de pesos.
			INSERT INTO _TMP_BANCOS_MOVIMIENTOS_DETALLE
			VALUES( '1', _CC, _ConceptoCon, _Total, _Moneda, _TC, _Cantidad);
		 		
			SELECT * INTO _errpart, _resultpart, _bancajmov FROM  sp_bancos_movs_agregar( _BanCaj, _ID_BanCaj, _Fecha, _Concepto, _Beneficiario, _Cantidad, 0.00, _tipomov, 'T', _IdMon, _tcBAN, _Ref, _Doc, _id_clasificacion, null, _ID_SatBanco, _RFC, _ID_SatMetodosPago, _BancoExt, _CuentaBanco, _Cheque ) as ( err integer, res varchar, clave integer);
		    
		END IF;
		
		IF _errpart <> 0
		THEN
			_err := _errpart;
			_result := _resultpart;
		ELSE
			-- Procede a hacer update al anticipo con el ID del movimiento de banco o caja 
			UPDATE  TBL_CLIENT_CXC
			SET ID_PagoBanCaj = _bancajmov
			WHERE ID_CP = _ID_CXC;
		END IF;
		
		DROP TABLE _TMP_BANCOS_MOVIMIENTOS_DETALLE;
				
	END IF;

	RETURN QUERY SELECT _err, _result, _id_cxc;

END
$BODY$
  LANGUAGE plpgsql;

--@FIN_BLOQUE

INSERT INTO tbl_variables(id_variable, descripcion, ventero, vdecimal, vfecha, valfanumerico, desistema, modulo)
VALUES('CC_GND','CC|-|-|-|-', null, null, null, '', '1','COMP');
  
INSERT INTO tbl_variables(id_variable, descripcion, ventero, vdecimal, vfecha, valfanumerico, desistema, modulo)
VALUES('CC_IVAAC','CC|-|-|-|-', null, null, null, '', '1','COMP');

INSERT INTO tbl_variables(id_variable, descripcion, ventero, vdecimal, vfecha, valfanumerico, desistema, modulo)
VALUES('CC_IVAACPN','CC|-|-|-|-', null, null, null, '', '1','COMP');

INSERT INTO tbl_variables(id_variable, descripcion, ventero, vdecimal, vfecha, valfanumerico, desistema, modulo)
VALUES('CC_DSC','CC|-|-|-|-', null, null, null, '', '1','COMP');

INSERT INTO tbl_variables(id_variable, descripcion, ventero, vdecimal, vfecha, valfanumerico, desistema, modulo)
VALUES('CC_COMCONT','CC|-|-|-|-', null, null, null, '', '1','COMP');

INSERT INTO tbl_variables(id_variable, descripcion, ventero, vdecimal, vfecha, valfanumerico, desistema, modulo)
VALUES('CC_DSCCONT','CC|-|-|-|-', null, null, null, '', '1','COMP');

INSERT INTO tbl_variables(id_variable, descripcion, ventero, vdecimal, vfecha, valfanumerico, desistema, modulo)
VALUES('CC_COMP','CC|-|-|-|-', null, null, null, '', '1','COMP');

INSERT INTO tbl_variables(id_variable, descripcion, ventero, vdecimal, vfecha, valfanumerico, desistema, modulo)
VALUES('CC_IEPSCPN','CC|-|-|-|-', null, null, null, '', '1','COMP');

INSERT INTO tbl_variables(id_variable, descripcion, ventero, vdecimal, vfecha, valfanumerico, desistema, modulo)
VALUES('CC_COMPNP','CC|-|-|-|-', null, null, null, '', '1','COMP');

INSERT INTO tbl_variables(id_variable, descripcion, ventero, vdecimal, vfecha, valfanumerico, desistema, modulo)
VALUES('CC_IVAPP','CC|-|-|-|-', null, null, null, '', '1','VEN');

INSERT INTO tbl_variables(id_variable, descripcion, ventero, vdecimal, vfecha, valfanumerico, desistema, modulo)
VALUES('CC_IVAPPPN','CC|-|-|-|-', null, null, null, '', '1','VEN');

INSERT INTO tbl_variables(id_variable, descripcion, ventero, vdecimal, vfecha, valfanumerico, desistema, modulo)
VALUES('CC_IEPSV','CC|-|-|-|-', null, null, null, '', '1','VEN');

INSERT INTO tbl_variables(id_variable, descripcion, ventero, vdecimal, vfecha, valfanumerico, desistema, modulo)
VALUES('CC_IVARETV','CC|-|-|-|-', null, null, null, '', '1','VEN');

INSERT INTO tbl_variables(id_variable, descripcion, ventero, vdecimal, vfecha, valfanumerico, desistema, modulo)
VALUES('CC_ISRRETV','CC|-|-|-|-', null, null, null, '', '1','VEN');

INSERT INTO tbl_variables(id_variable, descripcion, ventero, vdecimal, vfecha, valfanumerico, desistema, modulo)
VALUES('CC_IEPSC','CC|-|-|-|-', null, null, null, '', '1','COMP');

INSERT INTO tbl_variables(id_variable, descripcion, ventero, vdecimal, vfecha, valfanumerico, desistema, modulo)
VALUES('CC_IVARETC','CC|-|-|-|-', null, null, null, '', '1','COMP');

INSERT INTO tbl_variables(id_variable, descripcion, ventero, vdecimal, vfecha, valfanumerico, desistema, modulo)
VALUES('CC_ISRRETC','CC|-|-|-|-', null, null, null, '', '1','COMP');

INSERT INTO tbl_variables(id_variable, descripcion, ventero, vdecimal, vfecha, valfanumerico, desistema, modulo)
VALUES('CC_DSV','CC|-|-|-|-', null, null, null, '', '1','VEN');

INSERT INTO tbl_variables(id_variable, descripcion, ventero, vdecimal, vfecha, valfanumerico, desistema, modulo)
VALUES('CC_VENCONT','CC|-|-|-|-', null, null, null, '', '1','VEN');

INSERT INTO tbl_variables(id_variable, descripcion, ventero, vdecimal, vfecha, valfanumerico, desistema, modulo)
VALUES('CC_DSVCONT','CC|-|-|-|-', null, null, null, '', '1','VEN');

INSERT INTO tbl_variables(id_variable, descripcion, ventero, vdecimal, vfecha, valfanumerico, desistema, modulo)
VALUES('CC_VEN','CC|-|-|-|-', null, null, null, '', '1','VEN');
 
INSERT INTO tbl_variables(id_variable, descripcion, ventero, vdecimal, vfecha, valfanumerico, desistema, modulo)
VALUES('CC_IEPSVPN','CC|-|-|-|-', null, null, null, '', '1','VEN');

INSERT INTO tbl_variables(id_variable, descripcion, ventero, vdecimal, vfecha, valfanumerico, desistema, modulo)
VALUES('CC_VENNP','CC|-|-|-|-', null, null, null, '', '1','VEN');

INSERT INTO tbl_variables(id_variable, descripcion, ventero, vdecimal, vfecha, valfanumerico, desistema, modulo)
VALUES('DSV-METPAG','ALFA|2|2|-|-', null, null, null, '03', '1','VEN');

INSERT INTO tbl_variables(id_variable, descripcion, ventero, vdecimal, vfecha, valfanumerico, desistema, modulo)
VALUES('CC_DCAF','CC|-|-|-|-', null, null, null, '', '1','CONT');

INSERT INTO tbl_variables(id_variable, descripcion, ventero, vdecimal, vfecha, valfanumerico, desistema, modulo)
VALUES('CC_DCEC','CC|-|-|-|-', null, null, null, '', '1','CONT');

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_client_cxc_pagar(
    _id_entidad smallint,
    _id_cxc integer,
    _fecha timestamp without time zone,
    _doc character varying,
    _moneda smallint,
    _tc numeric,
    _total numeric,
    _id_formapago smallint,
    _id_bancaj smallint,
    _cantidad numeric,
    _obs character varying,
    _docamparado character varying,
    _essaldo bit,
    _id_concepto smallint,
    _regpol boolean,
    _id_tipodocorig character varying,
    _id_clavedocorig integer,
    _claseref character varying,
    _tipomov character,
    _id_satbanco character,
    _id_satmetodospago character,
    _bancoext character varying,
    _cuentabanco character varying,
    _cheque character varying)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_ID_CXCGEN int; _bancajmov int; _err int; _result varchar(255); _errpart int; _resultpart varchar(255); 
	_banresult varchar(255); _tcCXC numeric(19,4); _pagoCXC numeric(19,4); _CC_Con char(19); _CC char(19);
	_CC_DCAF char(19); _CC_DCEC char(19); _FormaPago char(1);  
	_numpol int; _ID_TipoClient char(2); _ID_ClaveClient int; _ConceptoCon varchar(80);
	_Ref varchar(25); _RefCXC varchar(25); _mes smallint; _ano smallint; _Beneficiario varchar(80); _IdMon smallint; 
	_tcBAN numeric(19,4); _TotalBAN numeric(19,4); _BanCaj smallint; _id_clasificacion varchar(10);
	_pagada smallint; _tot numeric(19,4); _sald numeric(19,4); 
	--contabilidad electronica
	_CC_VEN char(19); _CC_IVA char(19); _CC_IVAPN char(19); _CC_IEPS char(19); _CC_IEPSPN char(19); _polcxc int; _ivapnCXC boolean; _iepspnCXC boolean; _contPart smallint; _ajusteIVA numeric(19,4); _ajusteIEPS numeric(19,4);
	_ventaSUBTOTAL numeric(19,4); _ventaIVA numeric(19,4); _ventaIEPS numeric(19,4); _ventaTOTAL numeric(19,4);  _TipoDocCXC char(4); _ClaveDocCXC int;
	_RFC varchar(15);
BEGIN
	_err := 0;
	_result := (case when _EsSaldo = '0' then (select msj3 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'VEN_CXC' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCOK')
			else (select msj4 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'VEN_CXC' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCOK') end);
	_ID_TipoClient := (select ID_TipoCliPro from TBL_CLIENT_CXC where ID_CP = _ID_CXC);
	_ID_ClaveClient := (select ID_ClaveCliPro from TBL_CLIENT_CXC where ID_CP = _ID_CXC);
	_CC :=  (select ID_CC from TBL_CLIENT_CLIENT where ID_Tipo = _ID_TipoClient and ID_Clave =  _ID_ClaveClient );
	_FormaPago := (case when _EsSaldo = '1' then 'S' else (select case when _ID_FormaPago = 1 Then 'C' else 'B' end) end);
	_BanCaj := _ID_FormaPago; -- 1 cajas 0 bancos
	_Beneficiario := ( select VAlfanumerico from TBL_VARIABLES where ID_Variable = 'EMPRESA');
	_RFC := ( select RFC from TBL_CLIENT_CLIENT where ID_Tipo = _ID_TipoClient and ID_Clave =  _ID_ClaveClient);
	_DocAmparado := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'VEN_CXC' and m.sub::text = 'BD' and m.elm::text = 'ETQ') || _DocAmparado;

	_polcxc := (select ID_Pol from TBL_CLIENT_CXC where ID_CP = _ID_CXC);
	_CC_VEN := (select valfanumerico from TBL_VARIABLES where ID_Variable = 'CC_VEN');
	_CC_IVA := (select valfanumerico from TBL_VARIABLES where ID_Variable = 'CC_IVAPP');
	_CC_IVAPN := (select valfanumerico from TBL_VARIABLES where ID_Variable = 'CC_IVAPPPN');
	_CC_IEPS := (select valfanumerico from TBL_VARIABLES where ID_Variable = 'CC_IEPSV');
	_CC_IEPSPN := (select valfanumerico from TBL_VARIABLES where ID_Variable = 'CC_IEPSVPN');
	_TipoDocCXC := (select ID_TipoDocOrig from TBL_CLIENT_CXC where ID_CP = _ID_CXC);
	_ClaveDocCXC := (select ID_ClaveDocOrig from TBL_CLIENT_CXC where ID_CP = _ID_CXC);

	_CC_DCAF := (select valfanumerico from TBL_VARIABLES where ID_Variable = 'CC_DCAF');
	_CC_DCEC := (select valfanumerico from TBL_VARIABLES where ID_Variable = 'CC_DCEC');
	_tcCXC := (select TC from TBL_CLIENT_CXC where ID_CP = _ID_CXC);
	_pagoCXC := round((_total * _tcCXC),2);
	_bancajmov := null;
	_numpol := null;
	_CC_Con := (select CC from TBL_CLIENT_CXC_CONCEPTOS where ID_Concepto = _ID_Concepto);
	_ConceptoCon := (select Descripcion from VIEW_CLIENT_CXC_CONCEPTOS where ID_Concepto = _ID_Concepto) || ' - ' || _DocAmparado;

	_mes := date_part('month',_Fecha);
	_ano := date_part('year',_Fecha);
	--_PAGSAL := (case when _EsSaldo = '1' then 'SAL' else 'PAG' end);
	_id_clasificacion := (select ID_Clasificacion from TBL_VENTAS_ENTIDADES where ID_EntidadVenta = _ID_Entidad);

	IF(select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano and Cerrado = 1) > 0
	OR (select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano) < 1
	THEN
		_err := 3;
		_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_POLIZAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'ERROR: La fecha de poliza pertenece a un periodo cerrado o inexistente'
	END IF;

	IF _CC_VEN = ''
	THEN
		_err := 3;
		_result := 'ERROR: La cuenta para ventas a cr√©dito no existe o no se ha enlazado';	
	END IF;
	
	IF _CC_IVA = '' OR _CC_IVAPN = ''
	THEN
		_err := 3;
		_result := 'ERROR: La cuenta de iva por pagar efectivamente cobrado o la de iva por pagar pendiente de cobro, no existe o no se ha enlazado';
	ELSE
		--Cuando exista version de contablilidad electr√≥nica en una cueta por cobrar, extrae el iva pendiente de la p√≥liza. Esto indica un ajuste, de lo contrario no ajusta nada
		-- Por ejemplo cuando la cuenta por pagar era anterior a la contabilidad electronica, no hace ajuste de IVAs
		IF (select count(*) from TBL_CONT_POLIZAS_DETALLE where ID = _polcxc and Cuenta = _CC_IVAPN) > 0
		THEN
			IF _TipoDocCXC = 'VFAC'
			THEN
				_ventaSUBTOTAL := (select SubTotal from tbl_ventas_facturas_cab where id_vc = _ClaveDocCXC); 
				_ventaIVA := (select IVA from tbl_ventas_facturas_cab where id_vc = _ClaveDocCXC);
				_ventaTOTAL := (select Total from tbl_ventas_facturas_cab where id_vc = _ClaveDocCXC);
				_ivapnCXC := true;
			ELSE
				_ivapnCXC := false;
			END IF;
		ELSE
			_ivapnCXC := false;
		END IF;
	END IF;

	IF _CC_IEPS = '' OR _CC_IEPSPN = ''
	THEN
		_err := 3;
		_result := 'ERROR: La cuenta del IEPS efectivamente cobrado o la de IEPS pendiente de cobrar no existe o no se ha enlazado';
	ELSE
		--Cuando exista version de contablilidad electr√≥nica en una cueta por cobrar, extrae el ieps pendiente de la p√≥liza. Esto indica un ajuste, de lo contrario no ajusta nada
		-- Por ejemplo cuando la cuenta por cobrar era anterior a la contabilidad electronica, no hace ajuste de IEPSes
		IF (select count(*) from TBL_CONT_POLIZAS_DETALLE where ID = _polcxc and Cuenta = _CC_IEPSPN) > 0
		THEN
			IF _TipoDocCXC = 'VFAC'
			THEN
				_ventaSUBTOTAL := (select SubTotal from tbl_ventas_facturas_cab where id_vc = _ClaveDocCXC); 
				_ventaIEPS := (select IEPS from tbl_ventas_facturas_cab where id_vc = _ClaveDocCXC);
				_ventaTOTAL := (select Total from tbl_ventas_facturas_cab where id_vc = _ClaveDocCXC);
				_iepspnCXC := true;
			ELSE
				_iepspnCXC := false;
			END IF;
		ELSE
			_iepspnCXC := false;
		END IF;
	END IF;

	IF _CC_DCAF = '' or _CC_DCEC = ''
	THEN
		_err := 3;
		_result := (select msj2 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'VEN_CXC' and 
			m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'ERROR: Las cuentas de diferencias cambiarias no se han registrado aun';
	END IF;
	
	IF _EsSaldo = '0' -- Si es pago en bancos, solo pueden pagarse cuentas en moneda extranjera con esa moneda o pesos, y si es en pesos solo con bancos en pesos
	THEN
		_IdMon := (case when _FormaPago = 'B' then ( select ID_Moneda from TBL_BANCOS_CUENTAS where Tipo = '0' and Clave = _ID_BanCaj ) 
							else ( select ID_Moneda from TBL_BANCOS_CUENTAS where Tipo = '1' and Clave = _ID_BanCaj ) end);
		_TotalBAN := (case when _IdMon = '1' then _Cantidad else _Total end);
		_tcBAN := (case when _IdMon = '1' then 1.0 else _TC end);
		IF _IdMon <> 1 and _IdMon <> _Moneda
		THEN
			_err := 3;
			_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'VEN_CXC' and 
				m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --ERROR: Solo se puede pagar con bancos de moneda extranjera, cuentas de la misma moneda extranjera';
		END IF;	
	END IF;
	
	IF _err = 0
	THEN
		_RefCXC := 'VCXC|' || cast(_ID_CXC as varchar) || '|' || cast(_ID_Entidad as varchar) || '||';

		IF _EsSaldo = '0' -- El pago se hace en efectivo o cheque
		THEN
			IF _IdMon = 1 -- Se paga con cuenta en pesos banco nacional
			THEN
				INSERT INTO TBL_CLIENT_CXC
				VALUES(default, _ID_Entidad, 'PAG', _Fecha, _ID_TipoClient, _ID_ClaveClient, _ID_Concepto, _Obs, _id_tipodocorig, _id_clavedocorig,_Moneda,_TC,_Total,0.00,_Fecha, _claseref, 'G',null,_ID_CXC,null)
				RETURNING currval(pg_get_serial_sequence('TBL_CLIENT_CXC', 'id_cp')) INTO _id_cxcgen;
			ELSE
				INSERT INTO TBL_CLIENT_CXC
				VALUES(default, _ID_Entidad, 'PAG', _Fecha, _ID_TipoClient, _ID_ClaveClient, _ID_Concepto, _Obs, _id_tipodocorig, _id_clavedocorig,_Moneda,_tcCXC,_Total,0.00,_Fecha,_claseref,'G',null,_ID_CXC,null)
				RETURNING currval(pg_get_serial_sequence('TBL_CLIENT_CXC', 'id_cp')) INTO _id_cxcgen;
			END IF;

			_Ref := 'VCXC|' || cast(_ID_CXCGEN as varchar) || '|' || cast(_ID_Entidad as varchar) || '||';
			
			CREATE LOCAL TEMPORARY TABLE _TMP_BANCOS_MOVIMIENTOS_DETALLE (
				Part smallint NOT NULL ,
				Cuenta char(19) NOT NULL ,
				Concepto varchar(80) NOT NULL ,
				Parcial numeric(19,4) NOT NULL ,
				Moneda smallint NOT NULL ,
				TC numeric(19,4) NOT NULL ,
				Cantidad numeric(19,4) NOT NULL
			);

			--RAISE NOTICE 'Cantidad %, _pagoCXC %', _Cantidad, _pagoCXC;

			IF _IdMon = 1 -- Se paga con cuenta en pesos banco nacional
			THEN
				_contPart := 1;
				INSERT INTO _TMP_BANCOS_MOVIMIENTOS_DETALLE
				VALUES( _contPart, _CC, (_DocAmparado || ' ' || _Doc), _Total, _Moneda, _tcCXC, _pagoCXC); -- se insertara en el cliente la cantidad que se le debe segun su CXP

				IF _ivapnCXC = true -- sera verdadero cuando sea entidad contable y versi√≥n contabilidad electronica 
				THEN
					--Calcula el iva de lo que se esta pagando con una regla de tres
					_contPart := _contPart + 1;
					_ajusteIVA := round( (((_ventaIVA * _tcCXC) / (_ventaTOTAL * _tcCXC)) * (_Total * _tcCXC)), 2);
					INSERT INTO _TMP_BANCOS_MOVIMIENTOS_DETALLE
					VALUES(_contPart, _CC_IVAPN, 'Ajuste de los IVAs', _ajusteIVA, '1', '1.0', -_ajusteIVA); 
					_contPart := _contPart + 1;
					INSERT INTO _TMP_BANCOS_MOVIMIENTOS_DETALLE
					VALUES(_contPart, _CC_IVA, 'Ajuste de los IVAs', _ajusteIVA, '1', '1.0', _ajusteIVA); 
				END IF;
	
				IF _iepspnCXC = true -- sera verdadero cuando sea entidad contable y versi√≥n contabilidad electronica 
				THEN
					--Calcula el ieps de lo que se esta pagando con una regla de tres
					_contPart := _contPart + 1;
					_ajusteIEPS := round( (((_ventaIEPS * _tcCXC) / (_ventaTOTAL * _tcCXC)) * (_Total * _tcCXC)), 2);
					INSERT INTO _TMP_BANCOS_MOVIMIENTOS_DETALLE
					VALUES(_contPart, _CC_IEPSPN, 'Ajuste de los IEPSes', _ajusteIEPS, '1', '1.0', -_ajusteIEPS); 
					_contPart := _contPart + 1;
					INSERT INTO _TMP_BANCOS_MOVIMIENTOS_DETALLE
					VALUES(_contPart, _CC_IEPS, 'Ajuste de los IEPSes', _ajusteIEPS, '1', '1.0', _ajusteIEPS); 
				END IF;
				
				IF(_Cantidad < _pagoCXC) -- si la cantidad del pago es menor a la conversion en la deuda de la cxc significa perdida cambiaria
				THEN
					_contPart := _contPart + 1;
					INSERT INTO _TMP_BANCOS_MOVIMIENTOS_DETALLE
					VALUES( _contPart, _CC_DCEC,/*pERDIDA*/ (select msj2 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'VEN_CXC' and m.sub::text = 'BD' and m.elm::text = 'ETQ'), (_PagoCXC - _Cantidad),'1',1.0000,-(_PagoCXC - _Cantidad)); 
				ELSIF(_Cantidad > _pagoCXC) -- de lo contrario es una ganancia cambiaria
				THEN
					_contPart := _contPart + 1;
					INSERT INTO _TMP_BANCOS_MOVIMIENTOS_DETALLE
					VALUES( _contPart, _CC_DCAF, /*Ganancia*/(select msj3 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'VEN_CXC' and m.sub::text = 'BD' and m.elm::text = 'ETQ'), (_Cantidad - _PagoCXC),'1',1.0000,(_Cantidad - _PagoCXC));  					
				END IF;

				SELECT * INTO _errpart, _resultpart, _bancajmov FROM  sp_bancos_movs_agregar( _BanCaj, _ID_BanCaj, _Fecha, _Obs, _Beneficiario, _TotalBAN, 0.00, _tipomov, 'T', _IdMon, _tcBAN, _Ref, _Doc, _id_clasificacion, null, _ID_SatBanco, _RFC, _ID_SatMetodosPago, _BancoExt, _CuentaBanco, _Cheque ) as ( err integer, res varchar, clave integer);
		    
			ELSE
				_contPart := 1;
				INSERT INTO _TMP_BANCOS_MOVIMIENTOS_DETALLE
				VALUES( _contPart, _CC, (_DocAmparado || ' ' || _Doc), _Total, '1', _tcCXC, _Total); -- se insertara en el cliente la cantidad que se le debe segun su CXP

				IF _ivapnCXC = true -- sera verdadero cuando sea entidad contable y versi√≥n contabilidad electronica 
				THEN
					--Calcula el iva de lo que se esta pagando con una regla de tres
					_contPart := _contPart + 1;
					_ajusteIVA := round( ((_ventaIVA / _ventaTOTAL) * _Total), 2);
					INSERT INTO _TMP_BANCOS_MOVIMIENTOS_DETALLE
					VALUES(_contPart, _CC_IVAPN, 'Ajuste de los IVAs', _ajusteIVA, '1', _tcCXC, -_ajusteIVA); 
					_contPart := _contPart + 1;
					INSERT INTO _TMP_BANCOS_MOVIMIENTOS_DETALLE
					VALUES(_contPart, _CC_IVA, 'Ajuste de los IVAs', _ajusteIVA, '1', _tcCXC, _ajusteIVA); 
				END IF;

				IF _iepspnCXC = true -- sera verdadero cuando sea entidad contable y versi√≥n contabilidad electronica 
				THEN
					--Calcula el ieps de lo que se esta pagando con una regla de tres
					_contPart := _contPart + 1;
					_ajusteIEPS := round( ((_ventaIEPS / _ventaTOTAL) * _Total), 2);
					INSERT INTO _TMP_BANCOS_MOVIMIENTOS_DETALLE
					VALUES(_contPart, _CC_IEPSPN, 'Ajuste de los IEPSes', _ajusteIEPS, '1', _tcCXC, -_ajusteIEPS); 
					_contPart := _contPart + 1;
					INSERT INTO _TMP_BANCOS_MOVIMIENTOS_DETALLE
					VALUES(_contPart, _CC_IEPS, 'Ajuste de los IEPSes', _ajusteIEPS, '1', _tcCXC, _ajusteIEPS); 
				END IF;

				SELECT * INTO _errpart, _resultpart, _bancajmov FROM  sp_bancos_movs_agregar( _BanCaj, _ID_BanCaj, _Fecha, _Obs, _Beneficiario, _TotalBAN, 0.00, _tipomov, 'T', _IdMon, _tcCXC, _Ref, _Doc, _id_clasificacion, null, _ID_SatBanco, _RFC, _ID_SatMetodosPago, _BancoExt, _CuentaBanco, _Cheque ) as ( err integer, res varchar, clave integer);
		    
			END IF;
			
			IF _errpart <> 0
			THEN
				_err := _errpart;
				_result := _resultpart;
			ELSE
				-- Procede a hacer update al anticipo con el ID del movimiento de banco o caja 
				UPDATE  TBL_CLIENT_CXC
				SET ID_PagoBanCaj = _bancajmov
				WHERE ID_CP = _ID_CXCGEN;
			END IF;
			
			DROP TABLE _TMP_BANCOS_MOVIMIENTOS_DETALLE;
		ELSE -- ES SALDO
			INSERT INTO TBL_CLIENT_CXC
			VALUES(default, _ID_Entidad, 'SAL', _Fecha, _ID_TipoClient, _ID_ClaveClient, _ID_Concepto, _Obs, _id_tipodocorig, _id_clavedocorig,_Moneda,_TC,_Total,0.00,_Fecha,_claseref,'G',null,_ID_CXC,null)
			RETURNING currval(pg_get_serial_sequence('TBL_CLIENT_CXC', 'id_cp')) INTO _id_cxcgen;

			_Ref := 'VCXC|' || cast(_ID_CXCGEN as varchar) || '|' || cast(_ID_Entidad as varchar) || '||';
			
			IF _CC_Con is not null AND _regpol = true --Si la cuenta del concepto es real y manda registro de poliza..... registra la poliza
			THEN
				-- Primero registra y crea la tabla temporal de detalle de la poliza
				CREATE LOCAL TEMPORARY TABLE _TMP_CONT_POLIZAS_DETALLE (
					Part smallint NOT NULL ,
					Cuenta char(19) NOT NULL ,
					Concepto varchar(80) NOT NULL ,
					Parcial numeric(19,4) NOT NULL ,
					Moneda smallint NOT NULL ,
					TC numeric(19,4) NOT NULL ,
					Debe numeric(19,4) NOT NULL ,
					Haber numeric(19,4) NOT NULL
				);
				-- Fin de la tabla temporal
				-- Inserta el cargo de la cuenta del concepto
				INSERT INTO _TMP_CONT_POLIZAS_DETALLE
				VALUES('1', _CC_Con, (_DocAmparado || ' ' || _Doc), _Total, _Moneda, _TC, _Cantidad, 0.0);
				
				INSERT INTO _TMP_CONT_POLIZAS_DETALLE
				VALUES('2', _CC, _ConceptoCon, _Total, _Moneda, _tcCXC, 0.0, _pagoCXC); -- se insertara en el cliente la cantidad que se le debe segun su CXP

				IF(_Cantidad < _pagoCXC) -- si la cantidad del pago es menor a la conversion en la deuda de la cxc significa perdida cambiaria
				THEN
					--RAISE NOTICE 'cantMenor Parcial %, Ultimo %', (_PagoCXC - _Cantidad), -(_PagoCXC - _Cantidad);
					INSERT INTO _TMP_CONT_POLIZAS_DETALLE
					VALUES('3', _CC_DCEC, /*Perdida*/(select msj2 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'VEN_CXC' and m.sub::text = 'BD' and m.elm::text = 'ETQ'), (_PagoCXC - _Cantidad),'1',1.0000,(_PagoCXC - _Cantidad), 0.0); 
				ELSIF(_Cantidad > _pagoCXC) -- de lo contrario es una ganancia cambiaria
				THEN
					--RAISE NOTICE 'cantMayor Parcial %, Ultimo %', (_Cantidad - _PagoCXC), (_Cantidad - _PagoCXC);
					INSERT INTO _TMP_CONT_POLIZAS_DETALLE
					VALUES('3', _CC_DCAF, /*Ganancia*/(select msj3 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'VEN_CXC' and m.sub::text = 'BD' and m.elm::text = 'ETQ'), (_Cantidad - _PagoCXC),'1',1.0000, 0.0, (_Cantidad - _PagoCXC));  					
				END IF;
			
				SELECT * INTO _errpart, _resultpart, _numpol FROM sp_cont_polizas_agregar('DR', _Fecha, _Obs,'0', _Ref, _Cantidad, _id_clasificacion ) as ( err integer, res varchar, clave integer );
      				-- Agrega ahora la poliza
				IF _errpart <> 0
				THEN
					_err := _errpart;
					_result := _resultpart;
				ELSE
					UPDATE  TBL_CLIENT_CXC
					SET ID_Pol = _numpol
					WHERE ID_CP = _ID_CXCGEN;
				END IF;

				DROP TABLE _TMP_CONT_POLIZAS_DETALLE;
			END IF;
		END IF;

		-- procede a registrar la poliza de este movimiento
		IF _err = 0
		THEN
			--procede a actualizar el saldo y el status pagado de la cxc
			UPDATE  TBL_CLIENT_CXC
			SET Saldo = Saldo - _Total
			WHERE ID_CP = _ID_CXC;
			
			UPDATE TBL_CLIENT_SALDOS_MONEDAS
			SET Saldo = Saldo - _Total
			WHERE ID_Moneda = _Moneda AND ID_Tipo = _ID_TipoClient AND ID_Clave =  _ID_ClaveClient;
		END IF;
	END IF;

	RETURN QUERY SELECT _err, _result, _id_cxcgen;

END
$BODY$
  LANGUAGE plpgsql;
--ALTER FUNCTION sp_client_cxc_pagar(smallint, integer, timestamp without time zone, character varying, smallint, numeric, numeric, smallint,

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_client_cxc_aplanticipo(
    _id_entidad smallint,
    _id_cxc integer,
    _fecha timestamp without time zone,
    _obs character varying,
    _moneda smallint,
    _tc numeric,
    _total numeric,
    _cantidad numeric,
    _id_ant integer)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255); _errpart int; _resultpart varchar(255); _numpol int; 
	_ID_Concepto smallint; _ID_ConceptoANT smallint; _MonedaCXC smallint; _MonedaANT smallint;
	_tcCXC numeric(19,4); _tcANT numeric(19,4); _pagoCXC numeric(19,4); _saldoANT numeric(19,4); _CC_Con char(19); _CC char(19);
	_ConceptoCon varchar(80); _DocAmparado varchar(80); _id_cxcgen int; _id_cxcant int; _Ref varchar(25);
	_RefCXC varchar(25); _RefANT varchar(25); _mes smallint; _ano smallint; _CC_DCAF char(19); _CC_DCEC char(19);
	_ID_TipoClient char(2); _ID_ClaveClient int; _ID_TipoClientAnt char(2); _ID_ClaveClientAnt int; _id_clasificacion varchar(10);
	--contabilidad electronica
	_CC_VEN char(19); _CC_IVA char(19); _CC_IVAPN char(19); _CC_IEPS char(19); _CC_IEPSPN char(19); _polcxc int; _ivapnCXC boolean; _iepspnCXC boolean; _contPart smallint; _ajusteIVA numeric(19,4); _ajusteIEPS numeric(19,4);
	_ventaSUBTOTAL numeric(19,4); _ventaIVA numeric(19,4); _ventaIEPS numeric(19,4); _ventaTOTAL numeric(19,4);  _TipoDocCXC char(4); _ClaveDocCXC int;  _totalPol numeric(19,4);
BEGIN
	_err := 0;
	_result := (select msj5 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'VEN_CXC' and 
			m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCOK');
	_CC_DCAF := (select valfanumerico from TBL_VARIABLES where ID_Variable = 'CC_DCAF');
	_CC_DCEC := (select valfanumerico from TBL_VARIABLES where ID_Variable = 'CC_DCEC');
	_ID_TipoClient := (select ID_TipoCliPro from TBL_CLIENT_CXC where ID_CP = _ID_CXC);
	_ID_ClaveClient := (select ID_ClaveCliPro from TBL_CLIENT_CXC where ID_CP = _ID_CXC);
	_ID_TipoClientAnt := (select ID_TipoCliPro from TBL_CLIENT_CXC where ID_CP = _ID_ANT);
	_ID_ClaveClientAnt := (select ID_ClaveCliPro from TBL_CLIENT_CXC where ID_CP = _ID_ANT);
	_ID_Concepto := (select ID_Concepto from TBL_CLIENT_CXC where ID_CP = _ID_CXC);
	_ID_ConceptoANT := (select ID_Concepto from TBL_CLIENT_CXC where ID_CP = _ID_ANT);
	_CC :=  (select ID_CC from TBL_CLIENT_CLIENT where ID_Tipo = _ID_TipoClient and ID_Clave =  _ID_ClaveClient );
	_DocAmparado := (select msj4 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'VEN_CXC' and m.sub::text = 'BD' and m.elm::text = 'ETQ')  || cast(_ID_ANT as varchar);
	_tcCXC := (select TC from TBL_CLIENT_CXC where ID_CP = _ID_CXC);
	_tcANT := (select TC from TBL_CLIENT_CXC where ID_CP = _ID_ANT);
	_pagoCXC := round((_Total * _tcCXC),2);
	_saldoANT := (select Saldo from TBL_CLIENT_CXC where ID_CP = _ID_ANT);
	_MonedaCXC := (select Moneda from TBL_CLIENT_CXC where ID_CP = _ID_CXC);
	_MonedaANT := (select Moneda from TBL_CLIENT_CXC where ID_CP = _ID_ANT);
	_ConceptoCon := (select Descripcion from VIEW_CLIENT_CXC_CONCEPTOS where ID_Concepto = '1'); -- Concepto de Anticipo

	_polcxc := (select ID_Pol from TBL_CLIENT_CXC where ID_CP = _ID_CXC);
	_CC_VEN := (select valfanumerico from TBL_VARIABLES where ID_Variable = 'CC_VEN');
	_CC_IVA := (select valfanumerico from TBL_VARIABLES where ID_Variable = 'CC_IVAPP');
	_CC_IVAPN := (select valfanumerico from TBL_VARIABLES where ID_Variable = 'CC_IVAPPPN');
	_CC_IEPS := (select valfanumerico from TBL_VARIABLES where ID_Variable = 'CC_IEPSV');
	_CC_IEPSPN := (select valfanumerico from TBL_VARIABLES where ID_Variable = 'CC_IEPSVPN');
	_TipoDocCXC := (select ID_TipoDocOrig from TBL_CLIENT_CXC where ID_CP = _ID_CXC);
	_ClaveDocCXC := (select ID_ClaveDocOrig from TBL_CLIENT_CXC where ID_CP = _ID_CXC);

	_mes := date_part('month',_Fecha);
	_ano := date_part('year',_Fecha);
	_id_clasificacion := (select ID_Clasificacion from TBL_VENTAS_ENTIDADES where ID_EntidadVenta = _ID_Entidad);

	IF(select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano and Cerrado = 1) > 0
	OR (select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano) < 1
	THEN
		_err := 3;
		_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_POLIZAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'ERROR: La fecha de poliza pertenece a un periodo cerrado o inexistente'
	END IF;

	IF  (select Status from TBL_CLIENT_CXC where ID_CP = _ID_ANT) = 'C'
	THEN
		_err := 3;
		_result := 'ERROR: No se puede aplicar un anticipo cancelado';	
	END IF;
	
	IF _CC_VEN = ''
	THEN
		_err := 3;
		_result := 'ERROR: La cuenta para ventas a cr√©dito no existe o no se ha enlazado';	
	END IF;
	
	IF _CC_IVA = '' OR _CC_IVAPN = ''
	THEN
		_err := 3;
		_result := 'ERROR: La cuenta de iva por pagar efectivamente cobrado o la de iva por pagar pendiente de cobro, no existe o no se ha enlazado';
	ELSE
		--Cuando exista version de contablilidad electr√≥nica en una cueta por cobrar, extrae el iva pendiente de la p√≥liza. Esto indica un ajuste, de lo contrario no ajusta nada
		-- Por ejemplo cuando la cuenta por pagar era anterior a la contabilidad electronica, no hace ajuste de IVAs
		IF (select count(*) from TBL_CONT_POLIZAS_DETALLE where ID = _polcxc and Cuenta = _CC_IVAPN) > 0
		THEN
			IF _TipoDocCXC = 'VFAC'
			THEN
				_ventaSUBTOTAL := (select SubTotal from tbl_ventas_facturas_cab where id_vc = _ClaveDocCXC); 
				_ventaIVA := (select IVA from tbl_ventas_facturas_cab where id_vc = _ClaveDocCXC);
				_ventaTOTAL := (select Total from tbl_ventas_facturas_cab where id_vc = _ClaveDocCXC);
				_ivapnCXC := true;
			ELSE
				_ivapnCXC := false;
			END IF;
		ELSE
			_ivapnCXC := false;
		END IF;
	END IF;

	IF _CC_IEPS = '' OR _CC_IEPSPN = ''
	THEN
		_err := 3;
		_result := 'ERROR: La cuenta del IEPS efectivamente cobrado o la de IEPS pendiente de cobrar no existe o no se ha enlazado';
	ELSE
		--Cuando exista version de contablilidad electr√≥nica en una cueta por cobrar, extrae el ieps pendiente de la p√≥liza. Esto indica un ajuste, de lo contrario no ajusta nada
		-- Por ejemplo cuando la cuenta por cobrar era anterior a la contabilidad electronica, no hace ajuste de IEPSes
		IF (select count(*) from TBL_CONT_POLIZAS_DETALLE where ID = _polcxc and Cuenta = _CC_IEPSPN) > 0
		THEN
			IF _TipoDocCXC = 'VFAC'
			THEN
				_ventaSUBTOTAL := (select SubTotal from tbl_ventas_facturas_cab where id_vc = _ClaveDocCXC); 
				_ventaIEPS := (select IEPS from tbl_ventas_facturas_cab where id_vc = _ClaveDocCXC);
				_ventaTOTAL := (select Total from tbl_ventas_facturas_cab where id_vc = _ClaveDocCXC);
				_iepspnCXC := true;
			ELSE
				_iepspnCXC := false;
			END IF;
		ELSE
			_iepspnCXC := false;
		END IF;
	END IF;

	IF _CC_DCAF = '' or _CC_DCEC = ''
	THEN
		_err := 3;
		_result := (select msj2 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'VEN_CXC' and 
			m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'ERROR: Las cuentas de diferencias cambiarias no se han registrado aun';
	END IF;

	IF _ID_TipoClient <> _ID_TipoClientANT or _ID_ClaveClient <> _ID_ClaveClientANT or _ID_ConceptoANT <> '1' or _ID_Concepto = '1'
	THEN
		_err := 3;
		_result := (select msj3 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'VEN_CXC' and 
			m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR');  --'ERROR: El cliente del anticipo es distinto al de la cuenta por cobrar, o en su defecto se quiere aplicar el anticipo a una cuenta que representa un anticipo';
	END IF;

	IF _Moneda <> _MonedaCXC or _Moneda <> _MonedaANT or _TC <> _tcANT
	THEN
		_err := 3;
		_result := (select msj4 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'VEN_CXC' and 
			m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'ERROR: Las monedas de la cuenta y el anticipo son distintas, o el tipo de cambio del anticipo no es el mismo que el de esta aplicaci√≥n. No se puede aplicar el anticipo';
	END IF;

	IF _saldoANT < _Total
	THEN
		_err := 3;
		_result :=  (select msj5 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'VEN_CXC' and 
			m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'ERROR: El anticipo que se quiere aplicar es mayor al saldo de la cuenta del propio anticipo';
	END IF;

	IF _err = 0
	THEN	
		--Primero genera el descuento por aplicacion
		_RefANT := 'VCXC|' || cast(_ID_ANT as varchar) || '|' || cast(_ID_Entidad as varchar) || '||';

		INSERT INTO TBL_CLIENT_CXC
		VALUES(default, _ID_Entidad, 'DPA', _Fecha, _ID_TipoClient, _ID_ClaveClient, '101', _Obs,/*id_tipodocorig*/ null,/*id_clavedocorig*/ null,_Moneda,_TC,_Total,0.00,_Fecha,/*_RefANT*/ null,'G',null,_ID_ANT,null)
		RETURNING currval(pg_get_serial_sequence('TBL_CLIENT_CXC', 'id_cp')) INTO _id_cxcant;
		--VALUES(@ID_ANT,@numeroANT,@Fecha,101,@Moneda,@TC,@Total,'A','G',@ID_CXC,-1,@numero,@Obs)

		--Ahora genera la aplicacion
		_RefCXC := 'VCXC|' || cast(_ID_CXC as varchar) || '|' || cast(_ID_Entidad as varchar) || '||';

		INSERT INTO TBL_CLIENT_CXC
		VALUES(default, _ID_Entidad, 'APL', _Fecha, _ID_TipoClient, _ID_ClaveClient, '101', _Obs,'VCXC',_id_cxcant,_Moneda,_TC,_Total,( _pagoCXC - _Cantidad ),_Fecha,/*_RefCXC*/ null,'G',null,_ID_CXC,null)
		RETURNING currval(pg_get_serial_sequence('TBL_CLIENT_CXC', 'id_cp')) INTO _id_cxcgen;
			
		_Ref := 'VCXC|' || cast(_ID_CXCGEN as varchar) || '|' || cast(_ID_Entidad as varchar) || '||';

		IF _Cantidad <> _pagoCXC  OR _ivapnCXC = true OR _iepspnCXC = true -- SI HAY DIFERENCIA CAMBIARIA o IVAS y/o IEPSes DE CONTABILIDAD ELECTRONICA POR AJUSTAR
		THEN
			-- Primero registra y crea la tabla temporal de detalle de la poliza
			CREATE LOCAL TEMPORARY TABLE _TMP_CONT_POLIZAS_DETALLE (
				Part smallint NOT NULL ,
				Cuenta char(19) NOT NULL ,
				Concepto varchar(80) NOT NULL ,
				Parcial numeric(19,4) NOT NULL ,
				Moneda smallint NOT NULL ,
				TC numeric(19,4) NOT NULL ,
				Debe numeric(19,4) NOT NULL ,
				Haber numeric(19,4) NOT NULL
			);
			-- Fin de la tabla temporal
			_contPart := 0;
			_totalPol := 0.0;
			IF _ivapnCXC = true -- sera verdadero cuando sea entidad contable y versi√≥n contabilidad electronica 
			THEN
				--Calcula el iva de lo que se esta aplicando con una regla de tres
				_contPart := _contPart + 1;
				_ajusteIVA := round( (((_ventaIVA * _tcCXC) / (_ventaTOTAL * _tcCXC)) * (_Total * _tcCXC)), 2);
				INSERT INTO _TMP_CONT_POLIZAS_DETALLE
				VALUES(_contPart, _CC_IVAPN, 'Ajuste de los IVAs', _ajusteIVA, '1', '1.0', _ajusteIVA, 0.0); 
				_contPart := _contPart + 1;
				INSERT INTO _TMP_CONT_POLIZAS_DETALLE
				VALUES(_contPart, _CC_IVA, 'Ajuste de los IVAs', _ajusteIVA, '1', '1.0', 0.0, _ajusteIVA); 
				_totalPol := _totalPol + _ajusteIVA;
			END IF;
	
			IF _iepspnCXC = true -- sera verdadero cuando sea entidad contable y versi√≥n contabilidad electronica 
			THEN
				--Calcula el ieps de lo que se esta aplicando con una regla de tres
				_contPart := _contPart + 1;
				_ajusteIEPS := round( (((_ventaIEPS * _tcCXC) / (_ventaTOTAL * _tcCXC)) * (_Total * _tcCXC)), 2);
				INSERT INTO _TMP_CONT_POLIZAS_DETALLE
				VALUES(_contPart, _CC_IEPSPN, 'Ajuste de los IEPSes', _ajusteIEPS, '1', '1.0', _ajusteIEPS, 0.0); 
				_contPart := _contPart + 1;
				INSERT INTO _TMP_CONT_POLIZAS_DETALLE
				VALUES(_contPart, _CC_IEPS, 'Ajuste de los IEPSes', _ajusteIEPS, '1', '1.0', 0.0, _ajusteIEPS); 
				_totalPol := _totalPol + _ajusteIEPS;
			END IF;
			
			IF _Cantidad < _pagoCXC -- si la cantidad del pago es menor a la conversion en la deuda de la cxp significa perdida cambiaria
			THEN
				_contPart := _contPart + 1;
				INSERT INTO _TMP_CONT_POLIZAS_DETALLE
				VALUES(_contPart, _CC_DCEC, /*Perdida*/(select msj2 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'VEN_CXC' and m.sub::text = 'BD' and m.elm::text = 'ETQ') , (_PagoCXC - _Cantidad),'1',1.0000, (_PagoCXC - _Cantidad), 0.00); 

				_contPart := _contPart + 1;
				INSERT INTO _TMP_CONT_POLIZAS_DETALLE
				VALUES(_contPart, _CC, _DocAmparado, (_PagoCXC - _Cantidad),'1',1.0000, 0.0, (_PagoCXC - _Cantidad));

				_totalPol := _totalPol + (_PagoCXC - _Cantidad);			
			ELSIF _Cantidad > _pagoCXC -- de lo contrario es una ganancia cambiaria
			THEN
				_contPart := _contPart + 1;
				INSERT INTO _TMP_CONT_POLIZAS_DETALLE
				VALUES(_contPart, _CC, _DocAmparado, (_Cantidad - _PagoCXC),'1',1.0000, (_Cantidad - _PagoCXC), 0.00);

				_contPart := _contPart + 1;
				INSERT INTO _TMP_CONT_POLIZAS_DETALLE
				VALUES(_contPart, _CC_DCAF, /*Ganancia*/(select msj3 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'VEN_CXC' and m.sub::text = 'BD' and m.elm::text = 'ETQ') , (_Cantidad - _PagoCXC),'1',1.0000, 0.00, (_Cantidad - _PagoCXC)); 

				_totalPol := _totalPol + (_Cantidad - _PagoCXC);				
			END IF;

      			SELECT * INTO _errpart, _resultpart, _numpol FROM sp_cont_polizas_agregar('DR', _Fecha, _Obs, '0', _Ref, _totalPol, _id_clasificacion ) as ( err integer, res varchar, clave integer );
      			
			--Fin de la agregacion
			
			-- Agrega ahora la poliza
			IF _errpart <> 0
			THEN
				_err := _errpart;
				_result := _resultpart;
			ELSE
				UPDATE TBL_CLIENT_CXC
				SET ID_Pol = _numpol
				WHERE ID_CP = _id_cxcgen;
			END IF;

			DROP TABLE _TMP_CONT_POLIZAS_DETALLE;
		END IF;

		-- procede a registrar la poliza de este movimiento
		IF _err = 0
		THEN
			--procede a actualizar el saldo y el status pagado de la cxc
			UPDATE  TBL_CLIENT_CXC
			SET Saldo = Saldo - _Total
			WHERE ID_CP = _ID_CXC;
			
			UPDATE  TBL_CLIENT_CXC
			SET Saldo = Saldo - _Total
			WHERE ID_CP = _ID_ANT;
	
		END IF;
	
	END IF;
	
	RETURN QUERY SELECT _err, _result, _id_cxcgen;

END
$BODY$
  LANGUAGE plpgsql;
--ALTER FUNCTION sp_client_cxc_aplanticipo(smallint, integer, timestamp without time zone, character varying, smallint, numeric, numeric, numeric

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_client_cxc_devanticipo(
    _id_entidad smallint,
    _id_cxc integer,
    _fecha timestamp without time zone,
    _doc character varying,
    _moneda smallint,
    _tc numeric,
    _total numeric,
    _id_formapago smallint,
    _id_bancaj smallint,
    _cantidad numeric,
    _obs character varying,
    _docamparado character varying,
    _essaldo bit,
    _id_concepto smallint,
    _tipomov character,
    _id_satbanco character,
    _id_satmetodospago character,
    _bancoext character varying,
    _cuentabanco character varying,
    _cheque character varying)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_id_cxcgen integer; _bancajmov int; _err int; _result varchar(255); _errpart int; _resultpart varchar(255); _numpol int; 
	_banresult varchar(255); _tcCXC numeric(19,4); _pagoCXC numeric(19,4); _CC_Con char(19); _CC char(19);
	_CC_DCAF char(19); _CC_DCEC char(19); _FormaPago char(1); _BanCaj smallint; 
	_numero smallint; _ID_TipoClient char(2); _ID_ClaveClient int; _ConceptoCon varchar(80);
	_Ref varchar(25); _RefCXC varchar(25); _mes smallint; _ano smallint; _Beneficiario varchar(80); _IdMon smallint; _tcBAN numeric; _TotalBAN numeric(19,4); _id_clasificacion varchar(10);
	_RFC varchar(15);
BEGIN
	_err := 0;
	_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'VEN_CXC' and 
			m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCOK2');
	_ID_TipoClient := (select ID_TipoCliPro from TBL_CLIENT_CXC where ID_CP = _ID_CXC);
	_ID_ClaveClient := (select ID_ClaveCliPro from TBL_CLIENT_CXC where ID_CP = _ID_CXC);
	_CC :=  (select ID_CC from TBL_CLIENT_CLIENT where ID_Tipo = _ID_TipoClient and ID_Clave = _ID_ClaveClient );
	_Beneficiario := ( select Nombre from TBL_CLIENT_CLIENT where ID_Tipo = _ID_TipoClient and ID_Clave = _ID_ClaveClient);
	_RFC := ( select RFC from TBL_CLIENT_CLIENT where ID_Tipo = _ID_TipoClient and ID_Clave = _ID_ClaveClient);
	
	_BanCaj := _ID_FormaPago; -- 1 cajas 0 bancos
	_FormaPago := (select case when _ID_FormaPago = 1 Then 'C' else 'B' end);
	
	_DocAmparado := (select msj5 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'VEN_CXC' and m.sub::text = 'BD' and m.elm::text = 'ETQ')  || _DocAmparado;
	_CC_DCAF := (select valfanumerico from TBL_VARIABLES where ID_Variable = 'CC_DCAF');
	_CC_DCEC := (select valfanumerico from TBL_VARIABLES where ID_Variable = 'CC_DCEC');
	_tcCXC := (select TC from TBL_CLIENT_CXC where ID_CP = _ID_CXC);
	_pagoCXC := round((_total * _tcCXC),2);
	_bancajmov := null;
	_numpol := null;
	_CC_Con := (select CC from TBL_CLIENT_CXC_CONCEPTOS where ID_Concepto = _ID_Concepto);
	_ConceptoCon := (select Descripcion from VIEW_CLIENT_CXC_CONCEPTOS where ID_Concepto = _ID_Concepto);
	_mes := date_part('month',_Fecha);
	_ano := date_part('year',_Fecha);
	_id_clasificacion := (select ID_Clasificacion from TBL_VENTAS_ENTIDADES where ID_EntidadVenta = _ID_Entidad);
	_IdMon := (case when _FormaPago = 'B' then ( select ID_Moneda from TBL_BANCOS_CUENTAS where Tipo = '0' and Clave = _ID_BanCaj ) 
						else ( select ID_Moneda from TBL_BANCOS_CUENTAS where Tipo = '1' and Clave = _ID_BanCaj ) end);
	_TotalBAN := (case when _IdMon = '1' then _Cantidad else _Total end);
	_tcBAN := (case when _IdMon = '1' then 1.0 else _TC end);
	
	IF(select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano and Cerrado = 1) > 0
	OR (select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano) < 1
	THEN
		_err := 3;
		_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_POLIZAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'ERROR: La fecha de poliza pertenece a un periodo cerrado o inexistente'
	END IF;

	IF _CC_DCAF = '' or _CC_DCEC = ''
	THEN
		_err := 3;
		_result :=  (select msj2 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'VEN_CXC' and 
			m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR');--'ERROR: Las cuentas de diferencias cambiarias no se han registrado aun';
	END IF;

	IF _IdMon <> 1 and _IdMon <> _Moneda
	THEN
		_err := 3;
		_result :=  (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'VEN_CXC' and 
			m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'ERROR: Solo se puede pagar con bancos de moneda extranjera, cuentas de la misma moneda extranjera';
	END IF;	

	IF _err = 0
	THEN
		_RefCXC := 'VCXC|' || cast(_ID_CXC as varchar) || '|' || cast(_ID_Entidad as varchar) || '||';

		IF _IdMon = 1 -- Se paga con cuenta en pesos banco nacional
		THEN
			INSERT INTO TBL_CLIENT_CXC
			VALUES(default, _ID_Entidad, 'DEV', _Fecha, _ID_TipoClient, _ID_ClaveClient, _ID_Concepto, _Obs,/*id_tipodocorig*/ null,/*id_clavedocorig*/ null,_Moneda,_TC,_Total,0.00,_Fecha,/*_RefCXC*/ null,'G',null,_ID_CXC,null)
			RETURNING currval(pg_get_serial_sequence('TBL_CLIENT_CXC', 'id_cp')) INTO _id_cxcgen;
		ELSE
			INSERT INTO TBL_CLIENT_CXC
			VALUES(default, _ID_Entidad, 'DEV', _Fecha, _ID_TipoClient, _ID_ClaveClient, _ID_Concepto, _Obs,/*id_tipodocorig*/ null,/*id_clavedocorig*/ null,_Moneda,_tcCXC,_Total,0.00,_Fecha,/*_RefCXC*/ null,'G',null,_ID_CXC,null)
			RETURNING currval(pg_get_serial_sequence('TBL_CLIENT_CXC', 'id_cp')) INTO _id_cxcgen;
		END IF;

		_Ref := 'VCXC|' || cast(_ID_CXCGEN as varchar) || '|' || cast(_ID_Entidad as varchar) || '||';

		--Crea tabla temporal de movimientos bancarios
		CREATE LOCAL TEMPORARY TABLE _TMP_BANCOS_MOVIMIENTOS_DETALLE (
			Part smallint NOT NULL ,
			Cuenta char(19) NOT NULL ,
			Concepto varchar(80) NOT NULL ,
			Parcial numeric(19,4) NOT NULL ,
			Moneda smallint NOT NULL ,
			TC numeric(19,4) NOT NULL ,
			Cantidad numeric(19,4) NOT NULL
		);
		--fin de la tabla temporal

		--Agrega los movimientos a la tabla temporal
		--RAISE NOTICE '_Cantidad %, _pagoCXC %', _Cantidad, _pagoCXC;

		IF _IdMon = 1 -- Se paga con cuenta en pesos banco nacional
		THEN
			INSERT INTO _TMP_BANCOS_MOVIMIENTOS_DETALLE
			VALUES( '1', _CC, (_DocAmparado || ' ' || _Doc), _Total, _Moneda, _tcCXC, _pagoCXC); 
			
			IF(_Cantidad < _pagoCXC) -- si la cantidad del pago es menor a la conversion en la deuda de la cxc significa ganancia cambiaria
			THEN
				--RAISE NOTICE 'perdida Parcial %, Ultimo %', (_PagoCXC - _Cantidad), -(_PagoCXC - _Cantidad);
				INSERT INTO _TMP_BANCOS_MOVIMIENTOS_DETALLE
				VALUES('2', _CC_DCAF, /*Ganancia*/(select msj3 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'VEN_CXC' and m.sub::text = 'BD' and m.elm::text = 'ETQ'), (_PagoCXC - _Cantidad),'1',1.0000,-(_PagoCXC - _Cantidad)); 
			ELSIF(_Cantidad > _pagoCXC) -- de lo contrario es una ganancia cambiaria
			THEN
				--RAISE NOTICE 'ganancia Parcial %, Ultimo %', (_Cantidad - _PagoCXC), (_Cantidad - _PagoCXC);
				INSERT INTO _TMP_BANCOS_MOVIMIENTOS_DETALLE
				VALUES('2', _CC_DCEC, /*Perdida*/(select msj2 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'VEN_CXC' and m.sub::text = 'BD' and m.elm::text = 'ETQ'), (_Cantidad - _PagoCXC),'1',1.0000,(_Cantidad - _PagoCXC));  					
			END IF;
			SELECT * INTO _errpart, _resultpart, _bancajmov FROM  sp_bancos_movs_agregar( _BanCaj, _ID_BanCaj, _Fecha, _Obs, _Beneficiario, 0.00, _TotalBAN, _tipomov, 'T', _IdMon, _tcBAN, _Ref, _Doc, _id_clasificacion, null, _ID_SatBanco, _RFC, _ID_SatMetodosPago, _BancoExt, _CuentaBanco, _Cheque ) as ( err integer, res varchar, clave integer);
			
		ELSE
			INSERT INTO _TMP_BANCOS_MOVIMIENTOS_DETALLE
			VALUES( '1', _CC, (_DocAmparado || ' ' || _Doc), _Total, '1', _tcCXC, _Total); -- se insertara en el cliente la cantidad que se le debe segun su CXP

			SELECT * INTO _errpart, _resultpart, _bancajmov FROM  sp_bancos_movs_agregar( _BanCaj, _ID_BanCaj, _Fecha, _Obs, _Beneficiario, 0.00, _TotalBAN, _tipomov, 'T', _IdMon, _tcCXC, _Ref, _Doc, _id_clasificacion, null, _ID_SatBanco, _RFC, _ID_SatMetodosPago, _BancoExt, _CuentaBanco, _Cheque ) as ( err integer, res varchar, clave integer);
		END IF;
			
		IF _errpart <> 0
		THEN
			_err := _errpart;
			_result := _resultpart;
		ELSE
			-- Procede a hacer update a la devoluci√≥n de anticipo con el ID del movimiento de banco o caja 
			UPDATE  TBL_CLIENT_CXC
			SET ID_PagoBanCaj = _bancajmov
			WHERE ID_CP = _ID_CXCGEN;
		END IF;
			
		DROP TABLE _TMP_BANCOS_MOVIMIENTOS_DETALLE;
		

		IF _err = 0
		THEN
			--procede a actualizar el saldo y el status pagado de la cxc
			UPDATE  TBL_CLIENT_CXC
			SET Saldo = Saldo - _Total
			WHERE ID_CP = _ID_CXC;

			UPDATE TBL_CLIENT_SALDOS_MONEDAS
			SET Saldo = Saldo + _Total
			WHERE ID_Moneda = _Moneda AND ID_Tipo = _ID_TipoClient AND ID_Clave =  _ID_ClaveClient;
		END IF;
	
	END IF;
	
	RETURN QUERY SELECT _err, _result, _id_cxcgen;

END
$BODY$
  LANGUAGE plpgsql;
  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_client_cxc_cancelar(_id_cxc integer)
  RETURNS SETOF record AS
$BODY$ DECLARE 
	_err int; _result varchar(255); _errpart int; _resultpart varchar(255); _Total numeric(19,4); _Moneda smallint; _TC numeric(19,4); _Cantidad numeric(19,4); _Saldo numeric(19,4);
	_ID_TipoClient char(2); _ID_ClaveClient int; _mes smallint; _ano smallint; _Fecha timestamp; _ID_Aplicacion int; _ID_ANT int; _ID_DPA int;
	_ID_TipoCP char(3); _ID_Pol int; _numret int; _ID_PagoBanCaj int;
BEGIN
	_err := 0;
	_result := (select msj2 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'VEN_CXC' and 
			m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCOK2'); 
	_Total := (select Total from TBL_CLIENT_CXC where ID_CP = _ID_CXC);
	_Moneda := (select Moneda from TBL_CLIENT_CXC where ID_CP = _ID_CXC);
	_TC := (select TC from TBL_CLIENT_CXC where ID_CP = _ID_CXC);
	_Cantidad := round((_Total * _TC),2);
	_Fecha := (select Fecha from TBL_CLIENT_CXC where ID_CP = _ID_CXC);
	_ID_TipoCP := (select ID_TipoCP from TBL_CLIENT_CXC where ID_CP = _ID_CXC);
	_ID_TipoClient := (select ID_TipoCliPro from TBL_CLIENT_CXC where ID_CP = _ID_CXC);
	_ID_ClaveClient := (select ID_ClaveCliPro from TBL_CLIENT_CXC where ID_CP = _ID_CXC);
	_ID_Pol := (select ID_Pol from TBL_CLIENT_CXC where ID_CP = _ID_CXC);
	_ID_PagoBanCaj := (select ID_PagoBanCaj from TBL_CLIENT_CXC where ID_CP = _ID_CXC);
	_ID_Aplicacion := (select ID_Aplicacion from TBL_CLIENT_CXC where ID_CP = _ID_CXC);
	
	_mes := date_part('month',_Fecha);
	_ano := date_part('year',_Fecha);
	
	IF(select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano and Cerrado = 1) > 0
	OR (select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano) < 1
	THEN
		_err := 3;
		_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_POLIZAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'ERROR: La fecha de poliza pertenece a un periodo cerrado o inexistente'
	END IF;

	-- si la cuenta o anticipo tiene activados ( no cancelados ) pagos, saldos aplicaciones etc, no permitira la cancelacion
	IF _ID_TipoCP = 'ALT' OR _ID_TipoCP = 'ANT' 
	THEN
		IF (select count(*) from TBL_CLIENT_CXC where ID_CP <> _ID_CXC and ID_Aplicacion = _ID_CXC and Status <> 'C') > 0
		THEN
			_err := 3;
			_result :=  (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'VEN_CXC' and 
				m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR2');--'ERROR: No se puede cancelar una cuenta o anticipo que tiene asociados, y sin cancelar, pagos, saldos, aplicaciones, etc.';
		END IF;
	END IF;

	-- si es un descuento por aplicacion, este no se puede cancelar, se debe cancelar la aplicaci√≥n del anticipo y este quedar√° cancelado autom√°ticamente
	IF _ID_TipoCP = 'DPA' 
	THEN
		_err := 3;
		_result := (select msj2 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'VEN_CXC' and 
				m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR2'); --ERROR: No se puede cancelar un descuento por aplicaci√≥n. Debes cancelar la aplicaci√≥n del anticipo a la cuenta por cobrar, para que este descuento quede cancelado';
	END IF;

	IF _err = 0
	THEN
		UPDATE TBL_CLIENT_CXC
		SET Status = 'C'
		WHERE ID_CP = _ID_CXC;
			
		IF _ID_TipoCP = 'ALT'
		THEN
			UPDATE TBL_CLIENT_SALDOS_MONEDAS
			SET Saldo = Saldo - _Total
			WHERE ID_Moneda = _Moneda AND ID_Tipo = _ID_TipoClient AND ID_Clave =  _ID_ClaveClient;
		
			--Procede a cancelar la poliza
			IF _ID_Pol is not null
			THEN
				SELECT * INTO _errpart, _resultpart, _numret FROM sp_cont_polizas_cancelar(_ID_Pol, _Fecha) as ( err integer, res varchar, clave integer );
				IF _errpart <> 0
				THEN
					_err := _errpart;
					_result := _resultpart;
				END IF;
			END IF;
		ELSIF _ID_TipoCP = 'ANT'
		THEN
			UPDATE TBL_CLIENT_SALDOS_MONEDAS
			SET Saldo = Saldo + _Total
			WHERE ID_Moneda = _Moneda AND ID_Tipo = _ID_TipoClient AND ID_Clave =  _ID_ClaveClient;
		
			SELECT * INTO _errpart, _resultpart, _numret FROM sp_bancos_movs_cancelar(_ID_PagoBanCaj) as ( err integer, res varchar, clave integer );
			IF _errpart <> 0
			THEN
				_err := _errpart;
				_result := _resultpart;
			END IF;
		ELSIF _ID_TipoCP = 'PAG'
		THEN
			UPDATE TBL_CLIENT_SALDOS_MONEDAS
			SET Saldo = Saldo + _Total
			WHERE ID_Moneda = _Moneda AND ID_Tipo = _ID_TipoClient AND ID_Clave =  _ID_ClaveClient;
		
			SELECT * INTO _errpart, _resultpart, _numret FROM sp_bancos_movs_cancelar(_ID_PagoBanCaj) as ( err integer, res varchar, clave integer );
			IF _errpart <> 0
			THEN
				_err := _errpart;
				_result := _resultpart;
			END IF;

			UPDATE TBL_CLIENT_CXC
			SET Saldo = Saldo + _Total
			WHERE ID_CP = _ID_Aplicacion;
		ELSIF _ID_TipoCP = 'SAL'
		THEN
			UPDATE TBL_CLIENT_SALDOS_MONEDAS
			SET Saldo = Saldo + _Total
			WHERE ID_Moneda = _Moneda AND ID_Tipo = _ID_TipoClient AND ID_Clave =  _ID_ClaveClient;
		
			--Procede a cancelar la poliza
			IF _ID_Pol is not null
			THEN
				SELECT * INTO _errpart, _resultpart, _numret FROM sp_cont_polizas_cancelar(_ID_Pol, _Fecha) as ( err integer, res varchar, clave integer );
				IF _errpart <> 0
				THEN
					_err := _errpart;
					_result := _resultpart;
				END IF;
			END IF;

			UPDATE TBL_CLIENT_CXC
			SET Saldo = Saldo + _Total
			WHERE ID_CP = _ID_Aplicacion;
		ELSIF _ID_TipoCP = 'DEV'
		THEN
			UPDATE TBL_CLIENT_SALDOS_MONEDAS
			SET Saldo = Saldo - _Total
			WHERE ID_Moneda = _Moneda AND ID_Tipo = _ID_TipoClient AND ID_Clave =  _ID_ClaveClient;
		
			SELECT * INTO _errpart, _resultpart, _numret FROM sp_bancos_movs_cancelar(_ID_PagoBanCaj) as ( err integer, res varchar, clave integer );
			IF _errpart <> 0
			THEN
				_err := _errpart;
				_result := _resultpart;
			END IF;

			UPDATE TBL_CLIENT_CXC
			SET Saldo = Saldo + _Total
			WHERE ID_CP = _ID_Aplicacion;
		ELSIF _ID_TipoCP = 'APL'
		THEN
			-- Captura el id de descuento por aplicacion, el id de anticipo, y el saldo de diferencias cambiarias de la aplicacion
			_ID_DPA := (select id_clavedocorig from TBL_CLIENT_CXC where ID_CP = _ID_CXC);
			_ID_ANT := (select ID_Aplicacion from TBL_CLIENT_CXC where ID_CP = _ID_DPA);
			--_Saldo :=  (select Saldo from TBL_CLIENT_CXC where ID_CP = _ID_CXC);

			--Ahora cancela el descuento por aplicacion
			UPDATE TBL_CLIENT_CXC
			SET Status = 'C'
			WHERE ID_CP = _ID_DPA;
		
			--Procede a cancelar la poliza
			IF _ID_Pol is not null
			THEN
				SELECT * INTO _errpart, _resultpart, _numret FROM sp_cont_polizas_cancelar(_ID_Pol, _Fecha) as ( err integer, res varchar, clave integer );
				IF _errpart <> 0
				THEN
					_err := _errpart;
					_result := _resultpart;
				END IF;
			END IF;
			
			UPDATE TBL_CLIENT_CXC
			SET Saldo = Saldo + _Total
			WHERE ID_CP = _ID_Aplicacion;
			
			UPDATE TBL_CLIENT_CXC
			SET Saldo = Saldo + _Total
			WHERE ID_CP = _ID_ANT;

		END IF;
	END IF;

	RETURN QUERY SELECT _err, _result, _id_cxc;

END
$BODY$
  LANGUAGE plpgsql;
  
--////////////////////////////////////////////////////////////////////////////////////////////////////////
--//////////////////////////  AHORA EL PROCESO LARGO DE VENTAS VENTAS 
--////////////////////////////////////////////////////////////////////////////////////////////////////////

--@FIN_BLOQUE
CREATE TABLE abstbl_vencomp_cab
(
  id_vc integer NOT NULL,
  id_entidad smallint NOT NULL,
  numero integer NOT NULL,
  id_clipro integer NOT NULL,
  fecha timestamp without time zone NOT NULL,
  referencia character varying(20),
  status character(1) NOT NULL,
  moneda smallint NOT NULL,
  tc numeric(19,4) NOT NULL,
  fechaenvio timestamp without time zone,
  condicion smallint NOT NULL,
  obs character varying(255),
  importe numeric(19,4) NOT NULL,
  descuento numeric(19,4) NOT NULL,
  subtotal numeric(19,4) NOT NULL,
  iva numeric(19,4) NOT NULL,
  total numeric(19,4) NOT NULL,
  ref character varying(25),
  id_pol integer,
  id_polcost integer,
  id_bodega smallint NOT NULL,
  mimporte numeric(19,4),
  mdescuento numeric(19,4),
  msubtotal numeric(19,4),
  miva numeric(19,4),
  mtotal numeric(19,4),
  efectivo numeric(19,4) NOT NULL,
  bancos numeric(19,4) NOT NULL,
  cambio numeric(19,4) NOT NULL,
  id_vendedor smallint NOT NULL,
  id_cfd integer,
  tfd smallint
);

--@FIN_BLOQUE
CREATE TABLE abstbl_vencomp_det
(
  id_vc integer NOT NULL,
  partida smallint NOT NULL,
  cantidad numeric(9,3) NOT NULL,
  id_prod character varying(20) NOT NULL,
  precio numeric(19,4) NOT NULL,
  descuento numeric(5,2) NOT NULL,
  iva numeric(14,6) NOT NULL,
  obs character varying(80),
  importe numeric(19,4) NOT NULL,
  importedesc numeric(19,4) NOT NULL,
  importeiva numeric(19,4) NOT NULL,
  totalpart numeric(19,4) NOT NULL
);

--@FIN_BLOQUE
CREATE TABLE abstbl_vencomp_comext_cab
(
  id_vc integer NOT NULL,
  tipooperacion character(1) NOT NULL,
  clavedepedimento character varying(5) NOT NULL,
  certificadoorigen smallint NOT NULL,
  numcertificadoorigen character varying(40) NOT NULL,
  numeroexportadorconfiable character varying(50) NOT NULL,
  incoterm character varying(3) NOT NULL,
  subdivision smallint NOT NULL,
  observaciones character varying(300) NOT NULL,
  tipocambiousd numeric(19,4) NOT NULL,
  totalusd numeric(19,4) NOT NULL,
  emisor_curp character varying(40) NOT NULL,
  receptor_curp character varying(40) NOT NULL,
  receptor_numregidtrib character varying(40) NOT NULL,
  destinatario_numregidtrib character varying(40) NOT NULL,
  destinatario_rfc character varying(15) NOT NULL,
  destinatario_curp character varying(40) NOT NULL,
  destinatario_nombre character varying(300) NOT NULL,
  destinatario_domicilio_calle character varying(100) NOT NULL,
  destinatario_domicilio_numeroexterior character varying(55) NOT NULL,
  destinatario_domicilio_numerointerior character varying(55) NOT NULL,
  destinatario_domicilio_colonia character varying(120) NOT NULL,
  destinatario_domicilio_localidad character varying(120) NOT NULL,
  destinatario_domicilio_referencia character varying(250) NOT NULL,
  destinatario_domicilio_municipio character varying(120) NOT NULL,
  destinatario_domicilio_estado character varying(30) NOT NULL,
  destinatario_domicilio_pais character(3) NOT NULL,
  destinatario_domicilio_codigopostal character varying(12) NOT NULL
);
--ALTER TABLE abstbl_vencomp_comext_cab
  
--@FIN_BLOQUE
CREATE TABLE abstbl_vencomp_comext_det
(
  id_vc integer NOT NULL,
  partida smallint NOT NULL,
  noidentificacion character varying(100) NOT NULL,
  fraccionarancelaria character varying(12) NOT NULL,
  cantidadaduana numeric(9,3) NOT NULL,
  unidadaduana smallint NOT NULL,
  valorunitarioaduana numeric(19,2) NOT NULL,
  valordolares numeric(19,2) NOT NULL
);
--ALTER TABLE abstbl_vencomp_comext_det
  
--@FIN_BLOQUE
CREATE TABLE abstbl_vencomp_comext_det_descesp
(
  id_vc integer NOT NULL,
  partida smallint NOT NULL,
  descripcion smallint NOT NULL,
  marca character varying(35) NOT NULL,
  modelo character varying(80) NOT NULL,
  submodelo character varying(50) NOT NULL,
  numeroserie character varying(40) NOT NULL
);
--ALTER TABLE abstbl_vencomp_comext_det_descesp
  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION trg_ventas_cab()
  RETURNS trigger AS
$BODY$
    BEGIN
        IF NEW.ID_CliPro <> 0 AND (select count(*) from TBL_CLIENT_CLIENT where ID_Tipo = 'CL' and ID_Clave = NEW.ID_CliPro) = 0
        THEN
            RAISE EXCEPTION 'id_clipro %, is not a row of table tbl_client_client', NEW.ID_CliPro;
        END IF;
        RETURN NEW;
    END;
$BODY$
  LANGUAGE plpgsql;



--@FIN_BLOQUE
CREATE TABLE tbl_ventas_cotizaciones_cab
(
  id_vc serial NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  id_entidad smallint NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  numero integer NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  id_clipro integer NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  fecha timestamp without time zone NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  referencia character varying(20),
-- Inherited from table abstbl_vencomp_cab:  status character(1) NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  moneda smallint NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  tc numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  fechaenvio timestamp without time zone,
-- Inherited from table abstbl_vencomp_cab:  condicion smallint NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  obs character varying(255),
-- Inherited from table abstbl_vencomp_cab:  importe numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  descuento numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  subtotal numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  iva numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  total numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  ref character varying(25),
-- Inherited from table abstbl_vencomp_cab:  id_pol integer,
-- Inherited from table abstbl_vencomp_cab:  id_polcost integer,
-- Inherited from table abstbl_vencomp_cab:  id_bodega smallint NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  mimporte numeric(19,4),
-- Inherited from table abstbl_vencomp_cab:  mdescuento numeric(19,4),
-- Inherited from table abstbl_vencomp_cab:  msubtotal numeric(19,4),
-- Inherited from table abstbl_vencomp_cab:  miva numeric(19,4),
-- Inherited from table abstbl_vencomp_cab:  mtotal numeric(19,4),
-- Inherited from table abstbl_vencomp_cab:  efectivo numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  bancos numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  cambio numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  id_vendedor smallint NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  id_cfd integer,
-- Inherited from table abstbl_vencomp_cab:  tfd smallint,
  id_factura integer,
  tipoenlace character(4),
  CONSTRAINT pk_tbl_ventas_cotizaciones_cab PRIMARY KEY (id_vc ),
  CONSTRAINT fk_tbl_ventas_cotizaciones_cab_tbl_cont_monedas FOREIGN KEY (moneda)
      REFERENCES tbl_cont_monedas (clave) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_tbl_ventas_cotizaciones_cab_tbl_invserv_bodegas FOREIGN KEY (id_bodega)
      REFERENCES tbl_invserv_bodegas (id_bodega) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_tbl_ventas_cotizaciones_cab_tbl_vendedores FOREIGN KEY (id_vendedor)
      REFERENCES tbl_vendedores (id_vendedor) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_tbl_ventas_cotizaciones_cab_tbl_ventas_entidades FOREIGN KEY (id_entidad)
      REFERENCES tbl_ventas_entidades (id_entidadventa) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE
)
INHERITS (abstbl_vencomp_cab);

CREATE TRIGGER trg_ventas_cotizaciones_cab
  BEFORE INSERT OR UPDATE
  ON tbl_ventas_cotizaciones_cab
  FOR EACH ROW
  EXECUTE PROCEDURE trg_ventas_cab();



--@FIN_BLOQUE
CREATE TABLE tbl_ventas_cotizaciones_det
(
  id_vc integer NOT NULL,
  partida smallint NOT NULL,
-- Inherited from table abstbl_vencomp_det:  cantidad numeric(9,3) NOT NULL,
-- Inherited from table abstbl_vencomp_det:  id_prod character varying(20) NOT NULL,
-- Inherited from table abstbl_vencomp_det:  precio numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_det:  descuento numeric(5,2) NOT NULL,
-- Inherited from table abstbl_vencomp_det:  iva numeric(9,2) NOT NULL,
-- Inherited from table abstbl_vencomp_det:  obs character varying(80),
-- Inherited from table abstbl_vencomp_det:  importe numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_det:  importedesc numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_det:  importeiva numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_det:  totalpart numeric(19,4) NOT NULL,
  CONSTRAINT pk_tbl_ventas_cotizaciones_det PRIMARY KEY (id_vc , partida ),
  CONSTRAINT fk_tbl_ventas_cotizaciones_det_tbl_invserv_inventarios FOREIGN KEY (id_prod)
      REFERENCES tbl_invserv_inventarios (id_prod) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_tbl_ventas_cotizaciones_det_tbl_ventas_cotizaciones_cab FOREIGN KEY (id_vc)
      REFERENCES tbl_ventas_cotizaciones_cab (id_vc) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE
)
INHERITS (abstbl_vencomp_det);



--@FIN_BLOQUE
CREATE TABLE tbl_ventas_facturas_cab
(
  id_vc serial NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  id_entidad smallint NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  numero integer NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  id_clipro integer NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  fecha timestamp without time zone NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  referencia character varying(20),
-- Inherited from table abstbl_vencomp_cab:  status character(1) NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  moneda smallint NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  tc numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  fechaenvio timestamp without time zone,
-- Inherited from table abstbl_vencomp_cab:  condicion smallint NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  obs character varying(255),
-- Inherited from table abstbl_vencomp_cab:  importe numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  descuento numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  subtotal numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  iva numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  total numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  ref character varying(25),
-- Inherited from table abstbl_vencomp_cab:  id_pol integer,
-- Inherited from table abstbl_vencomp_cab:  id_polcost integer,
-- Inherited from table abstbl_vencomp_cab:  id_bodega smallint NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  mimporte numeric(19,4),
-- Inherited from table abstbl_vencomp_cab:  mdescuento numeric(19,4),
-- Inherited from table abstbl_vencomp_cab:  msubtotal numeric(19,4),
-- Inherited from table abstbl_vencomp_cab:  miva numeric(19,4),
-- Inherited from table abstbl_vencomp_cab:  mtotal numeric(19,4),
-- Inherited from table abstbl_vencomp_cab:  efectivo numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  bancos numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  cambio numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  id_vendedor smallint NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  id_cfd integer,
-- Inherited from table abstbl_vencomp_cab:  tfd smallint,
  CONSTRAINT pk_tbl_ventas_facturas_cab PRIMARY KEY (id_vc ),
  CONSTRAINT fk_tbl_ventas_facturas_cab_tbl_cfd FOREIGN KEY (id_cfd)
      REFERENCES tbl_cfd (id_cfd) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE SET NULL,
  CONSTRAINT fk_tbl_ventas_facturas_cab_tbl_cont_monedas FOREIGN KEY (moneda)
      REFERENCES tbl_cont_monedas (clave) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_tbl_ventas_facturas_cab_tbl_invserv_bodegas FOREIGN KEY (id_bodega)
      REFERENCES tbl_invserv_bodegas (id_bodega) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_tbl_ventas_facturas_cab_tbl_vendedores FOREIGN KEY (id_vendedor)
      REFERENCES tbl_vendedores (id_vendedor) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_tbl_ventas_facturas_cab_tbl_ventas_entidades FOREIGN KEY (id_entidad)
      REFERENCES tbl_ventas_entidades (id_entidadventa) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE
)
INHERITS (abstbl_vencomp_cab);

CREATE TRIGGER trg_ventas_facturas_cab
  BEFORE INSERT OR UPDATE
  ON tbl_ventas_facturas_cab
  FOR EACH ROW
  EXECUTE PROCEDURE trg_ventas_cab();



--@FIN_BLOQUE
CREATE TABLE tbl_ventas_facturas_det
(
  id_vc integer NOT NULL,
  partida smallint NOT NULL,
-- Inherited from table abstbl_vencomp_det:  cantidad numeric(9,3) NOT NULL,
-- Inherited from table abstbl_vencomp_det:  id_prod character varying(20) NOT NULL,
-- Inherited from table abstbl_vencomp_det:  precio numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_det:  descuento numeric(5,2) NOT NULL,
-- Inherited from table abstbl_vencomp_det:  iva numeric(9,2) NOT NULL,
-- Inherited from table abstbl_vencomp_det:  obs character varying(80),
-- Inherited from table abstbl_vencomp_det:  importe numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_det:  importedesc numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_det:  importeiva numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_det:  totalpart numeric(19,4) NOT NULL,
  CONSTRAINT pk_tbl_ventas_facturas_det PRIMARY KEY (id_vc , partida ),
  CONSTRAINT fk_tbl_ventas_facturas_det_tbl_invserv_inventarios FOREIGN KEY (id_prod)
      REFERENCES tbl_invserv_inventarios (id_prod) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_tbl_ventas_facturas_det_tbl_ventas_facturas_cab FOREIGN KEY (id_vc)
      REFERENCES tbl_ventas_facturas_cab (id_vc) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE
)
INHERITS (abstbl_vencomp_det);

   
INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('VEN_COT');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('VEN_COT_AGREGAR');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('VEN_COT_CAMBIAR');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('VEN_COT_CONSULTAR');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('VEN_COT_CANCELAR');



--@FIN_BLOQUE
CREATE TABLE tbl_ventas_pedidos_cab
(
  id_vc serial NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  id_entidad smallint NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  numero integer NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  id_clipro integer NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  fecha timestamp without time zone NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  referencia character varying(20),
-- Inherited from table abstbl_vencomp_cab:  status character(1) NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  moneda smallint NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  tc numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  fechaenvio timestamp without time zone,
-- Inherited from table abstbl_vencomp_cab:  condicion smallint NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  obs character varying(255),
-- Inherited from table abstbl_vencomp_cab:  importe numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  descuento numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  subtotal numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  iva numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  total numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  ref character varying(25),
-- Inherited from table abstbl_vencomp_cab:  id_pol integer,
-- Inherited from table abstbl_vencomp_cab:  id_polcost integer,
-- Inherited from table abstbl_vencomp_cab:  id_bodega smallint NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  mimporte numeric(19,4),
-- Inherited from table abstbl_vencomp_cab:  mdescuento numeric(19,4),
-- Inherited from table abstbl_vencomp_cab:  msubtotal numeric(19,4),
-- Inherited from table abstbl_vencomp_cab:  miva numeric(19,4),
-- Inherited from table abstbl_vencomp_cab:  mtotal numeric(19,4),
-- Inherited from table abstbl_vencomp_cab:  efectivo numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  bancos numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  cambio numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  id_vendedor smallint NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  id_cfd integer,
-- Inherited from table abstbl_vencomp_cab:  tfd smallint,
  id_factura integer,
  tipoenlace character(4),
  CONSTRAINT pk_tbl_ventas_pedidos_cab PRIMARY KEY (id_vc ),
  CONSTRAINT fk_tbl_ventas_pedidos_cab_tbl_cont_monedas FOREIGN KEY (moneda)
      REFERENCES tbl_cont_monedas (clave) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_tbl_ventas_pedidos_cab_tbl_invserv_bodegas FOREIGN KEY (id_bodega)
      REFERENCES tbl_invserv_bodegas (id_bodega) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_tbl_ventas_pedidos_cab_tbl_vendedores FOREIGN KEY (id_vendedor)
      REFERENCES tbl_vendedores (id_vendedor) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_tbl_ventas_pedidos_cab_tbl_ventas_entidades FOREIGN KEY (id_entidad)
      REFERENCES tbl_ventas_entidades (id_entidadventa) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE
)
INHERITS (abstbl_vencomp_cab);

CREATE TRIGGER trg_ventas_pedidos_cab
  BEFORE INSERT OR UPDATE
  ON tbl_ventas_pedidos_cab
  FOR EACH ROW
  EXECUTE PROCEDURE trg_ventas_cab();
  


--@FIN_BLOQUE
CREATE TABLE tbl_ventas_pedidos_det
(
  id_vc integer NOT NULL,
  partida smallint NOT NULL,
-- Inherited from table abstbl_vencomp_det:  cantidad numeric(9,3) NOT NULL,
-- Inherited from table abstbl_vencomp_det:  id_prod character varying(20) NOT NULL,
-- Inherited from table abstbl_vencomp_det:  precio numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_det:  descuento numeric(5,2) NOT NULL,
-- Inherited from table abstbl_vencomp_det:  iva numeric(9,2) NOT NULL,
-- Inherited from table abstbl_vencomp_det:  obs character varying(80),
-- Inherited from table abstbl_vencomp_det:  importe numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_det:  importedesc numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_det:  importeiva numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_det:  totalpart numeric(19,4) NOT NULL,
  CONSTRAINT pk_tbl_ventas_pedidos_det PRIMARY KEY (id_vc , partida ),
  CONSTRAINT fk_tbl_ventas_pedidos_det_tbl_invserv_inventarios FOREIGN KEY (id_prod)
      REFERENCES tbl_invserv_inventarios (id_prod) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_tbl_ventas_pedidos_det_tbl_ventas_pedidos_cab FOREIGN KEY (id_vc)
      REFERENCES tbl_ventas_pedidos_cab (id_vc) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE
)
INHERITS (abstbl_vencomp_det);


								
INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('VEN_PED');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('VEN_PED_AGREGAR');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('VEN_PED_CAMBIAR');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('VEN_PED_CONSULTAR');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('VEN_PED_CANCELAR');




--@FIN_BLOQUE
CREATE TABLE tbl_ventas_remisiones_cab
(
  id_vc serial NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  id_entidad smallint NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  numero integer NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  id_clipro integer NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  fecha timestamp without time zone NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  referencia character varying(20),
-- Inherited from table abstbl_vencomp_cab:  status character(1) NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  moneda smallint NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  tc numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  fechaenvio timestamp without time zone,
-- Inherited from table abstbl_vencomp_cab:  condicion smallint NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  obs character varying(255),
-- Inherited from table abstbl_vencomp_cab:  importe numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  descuento numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  subtotal numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  iva numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  total numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  ref character varying(25),
-- Inherited from table abstbl_vencomp_cab:  id_pol integer,
-- Inherited from table abstbl_vencomp_cab:  id_polcost integer,
-- Inherited from table abstbl_vencomp_cab:  id_bodega smallint NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  mimporte numeric(19,4),
-- Inherited from table abstbl_vencomp_cab:  mdescuento numeric(19,4),
-- Inherited from table abstbl_vencomp_cab:  msubtotal numeric(19,4),
-- Inherited from table abstbl_vencomp_cab:  miva numeric(19,4),
-- Inherited from table abstbl_vencomp_cab:  mtotal numeric(19,4),
-- Inherited from table abstbl_vencomp_cab:  efectivo numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  bancos numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  cambio numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  id_vendedor smallint NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  id_cfd integer,
-- Inherited from table abstbl_vencomp_cab:  tfd smallint,
  id_factura integer,
  CONSTRAINT pk_tbl_ventas_remisiones_cab PRIMARY KEY (id_vc ),
  CONSTRAINT fk_tbl_ventas_remisiones_cab_tbl_cfd FOREIGN KEY (id_cfd)
      REFERENCES tbl_cfd (id_cfd) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE SET NULL,
  CONSTRAINT fk_tbl_ventas_remisiones_cab_tbl_cont_monedas FOREIGN KEY (moneda)
      REFERENCES tbl_cont_monedas (clave) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_tbl_ventas_remisiones_cab_tbl_invserv_bodegas FOREIGN KEY (id_bodega)
      REFERENCES tbl_invserv_bodegas (id_bodega) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_tbl_ventas_remisiones_cab_tbl_vendedores FOREIGN KEY (id_vendedor)
      REFERENCES tbl_vendedores (id_vendedor) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_tbl_ventas_remisiones_cab_tbl_ventas_entidades FOREIGN KEY (id_entidad)
      REFERENCES tbl_ventas_entidades (id_entidadventa) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE
)
INHERITS (abstbl_vencomp_cab);

CREATE TRIGGER trg_ventas_remisiones_cab
  BEFORE INSERT OR UPDATE
  ON tbl_ventas_remisiones_cab
  FOR EACH ROW
  EXECUTE PROCEDURE trg_ventas_cab();



--@FIN_BLOQUE
CREATE TABLE tbl_ventas_remisiones_det
(
  id_vc integer NOT NULL,
  partida smallint NOT NULL,
-- Inherited from table abstbl_vencomp_det:  cantidad numeric(9,3) NOT NULL,
-- Inherited from table abstbl_vencomp_det:  id_prod character varying(20) NOT NULL,
-- Inherited from table abstbl_vencomp_det:  precio numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_det:  descuento numeric(5,2) NOT NULL,
-- Inherited from table abstbl_vencomp_det:  iva numeric(9,2) NOT NULL,
-- Inherited from table abstbl_vencomp_det:  obs character varying(80),
-- Inherited from table abstbl_vencomp_det:  importe numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_det:  importedesc numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_det:  importeiva numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_det:  totalpart numeric(19,4) NOT NULL,
  CONSTRAINT pk_tbl_ventas_remisiones_det PRIMARY KEY (id_vc , partida ),
  CONSTRAINT fk_tbl_ventas_remisiones_det_tbl_invserv_inventarios FOREIGN KEY (id_prod)
      REFERENCES tbl_invserv_inventarios (id_prod) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_tbl_ventas_remisiones_det_tbl_ventas_remisiones_cab FOREIGN KEY (id_vc)
      REFERENCES tbl_ventas_remisiones_cab (id_vc) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE
)
INHERITS (abstbl_vencomp_det);

--@FIN_BLOQUE
CREATE TABLE tbl_ventas_devoluciones_cab
(
  id_vc serial NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  id_entidad smallint NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  numero integer NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  id_clipro integer NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  fecha timestamp without time zone NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  referencia character varying(20),
-- Inherited from table abstbl_vencomp_cab:  status character(1) NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  moneda smallint NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  tc numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  fechaenvio timestamp without time zone,
-- Inherited from table abstbl_vencomp_cab:  condicion smallint NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  obs character varying(255),
-- Inherited from table abstbl_vencomp_cab:  importe numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  descuento numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  subtotal numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  iva numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  total numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  ref character varying(25),
-- Inherited from table abstbl_vencomp_cab:  id_pol integer,
-- Inherited from table abstbl_vencomp_cab:  id_polcost integer,
-- Inherited from table abstbl_vencomp_cab:  id_bodega smallint NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  mimporte numeric(19,4),
-- Inherited from table abstbl_vencomp_cab:  mdescuento numeric(19,4),
-- Inherited from table abstbl_vencomp_cab:  msubtotal numeric(19,4),
-- Inherited from table abstbl_vencomp_cab:  miva numeric(19,4),
-- Inherited from table abstbl_vencomp_cab:  mtotal numeric(19,4),
-- Inherited from table abstbl_vencomp_cab:  efectivo numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  bancos numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  cambio numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  id_vendedor smallint NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  id_cfd integer,
-- Inherited from table abstbl_vencomp_cab:  tfd smallint,
  id_factura integer,
  devreb character(3) NOT NULL,
  CONSTRAINT pk_tbl_ventas_devoluciones_cab PRIMARY KEY (id_vc ),
  CONSTRAINT fk_tbl_ventas_devoluciones_cab_tbl_cfd FOREIGN KEY (id_cfd)
      REFERENCES tbl_cfd (id_cfd) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE SET NULL,
  CONSTRAINT fk_tbl_ventas_devoluciones_cab_tbl_cont_monedas FOREIGN KEY (moneda)
      REFERENCES tbl_cont_monedas (clave) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_tbl_ventas_devoluciones_cab_tbl_invserv_bodegas FOREIGN KEY (id_bodega)
      REFERENCES tbl_invserv_bodegas (id_bodega) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_tbl_ventas_devoluciones_cab_tbl_vendedores FOREIGN KEY (id_vendedor)
      REFERENCES tbl_vendedores (id_vendedor) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_tbl_ventas_devoluciones_cab_tbl_ventas_entidades FOREIGN KEY (id_entidad)
      REFERENCES tbl_ventas_entidades (id_entidadventa) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT ck_tbl_ventas_devoluciones_cab_devreb CHECK (devreb = 'DEV'::bpchar OR devreb = 'REB'::bpchar)
)
INHERITS (abstbl_vencomp_cab);

CREATE TRIGGER trg_ventas_devoluciones_cab
  BEFORE INSERT OR UPDATE
  ON tbl_ventas_devoluciones_cab
  FOR EACH ROW
  EXECUTE PROCEDURE trg_ventas_cab();
  


--@FIN_BLOQUE
CREATE TABLE tbl_ventas_devoluciones_det
(
  id_vc integer NOT NULL,
  partida smallint NOT NULL,
-- Inherited from table abstbl_vencomp_det:  cantidad numeric(9,3) NOT NULL,
-- Inherited from table abstbl_vencomp_det:  id_prod character varying(20) NOT NULL,
-- Inherited from table abstbl_vencomp_det:  precio numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_det:  descuento numeric(5,2) NOT NULL,
-- Inherited from table abstbl_vencomp_det:  iva numeric(9,2) NOT NULL,
-- Inherited from table abstbl_vencomp_det:  obs character varying(80),
-- Inherited from table abstbl_vencomp_det:  importe numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_det:  importedesc numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_det:  importeiva numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_det:  totalpart numeric(19,4) NOT NULL,
  CONSTRAINT pk_tbl_ventas_devoluciones_det PRIMARY KEY (id_vc , partida ),
  CONSTRAINT fk_tbl_ventas_devoluciones_det_tbl_invserv_inventarios FOREIGN KEY (id_prod)
      REFERENCES tbl_invserv_inventarios (id_prod) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_tbl_ventas_devoluciones_det_tbl_ventas_devoluciones_cab FOREIGN KEY (id_vc)
      REFERENCES tbl_ventas_devoluciones_cab (id_vc) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE
)
INHERITS (abstbl_vencomp_det);


--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION trg_compras_cab()
  RETURNS trigger AS
$BODY$
    BEGIN
        IF NEW.ID_CliPro <> 0 AND (select count(*) from TBL_PROVEE_PROVEE where ID_Tipo = 'PR' and ID_Clave = NEW.ID_CliPro) = 0
        THEN
            RAISE EXCEPTION 'id_clipro %, is not a row of table tbl_provee_provee', NEW.ID_CliPro;
        END IF;
        RETURN NEW;
    END;
$BODY$
  LANGUAGE plpgsql;
  
--@FIN_BLOQUE
CREATE TABLE tbl_compras_ordenes_cab
(
  id_vc serial NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  id_entidad smallint NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  numero integer NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  id_clipro integer NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  fecha timestamp without time zone NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  referencia character varying(20),
-- Inherited from table abstbl_vencomp_cab:  status character(1) NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  moneda smallint NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  tc numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  fechaenvio timestamp without time zone,
-- Inherited from table abstbl_vencomp_cab:  condicion smallint NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  obs character varying(255),
-- Inherited from table abstbl_vencomp_cab:  importe numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  descuento numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  subtotal numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  iva numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  total numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  ref character varying(25),
-- Inherited from table abstbl_vencomp_cab:  id_pol integer,
-- Inherited from table abstbl_vencomp_cab:  id_polcost integer,
-- Inherited from table abstbl_vencomp_cab:  id_bodega smallint NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  mimporte numeric(19,4),
-- Inherited from table abstbl_vencomp_cab:  mdescuento numeric(19,4),
-- Inherited from table abstbl_vencomp_cab:  msubtotal numeric(19,4),
-- Inherited from table abstbl_vencomp_cab:  miva numeric(19,4),
-- Inherited from table abstbl_vencomp_cab:  mtotal numeric(19,4),
-- Inherited from table abstbl_vencomp_cab:  efectivo numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  bancos numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  cambio numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  id_vendedor smallint NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  id_cfd integer,
-- Inherited from table abstbl_vencomp_cab:  tfd smallint,
  id_factura integer,
  tipoenlace character(4),
  CONSTRAINT pk_tbl_compras_ordenes_cab PRIMARY KEY (id_vc ),
  CONSTRAINT fk_tbl_compras_ordenes_cab_tbl_compras_entidades FOREIGN KEY (id_entidad)
      REFERENCES tbl_compras_entidades (id_entidadcompra) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_tbl_compras_ordenes_cab_tbl_cont_monedas FOREIGN KEY (moneda)
      REFERENCES tbl_cont_monedas (clave) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_tbl_compras_ordenes_cab_tbl_invserv_bodegas FOREIGN KEY (id_bodega)
      REFERENCES tbl_invserv_bodegas (id_bodega) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE
)
INHERITS (abstbl_vencomp_cab);

CREATE TRIGGER trg_compras_ordenes_cab
  BEFORE INSERT OR UPDATE
  ON tbl_compras_ordenes_cab
  FOR EACH ROW
  EXECUTE PROCEDURE trg_compras_cab();



--@FIN_BLOQUE
CREATE TABLE tbl_compras_ordenes_det
(
  id_vc integer NOT NULL,
  partida smallint NOT NULL,
-- Inherited from table abstbl_vencomp_det:  cantidad numeric(9,3) NOT NULL,
-- Inherited from table abstbl_vencomp_det:  id_prod character varying(20) NOT NULL,
-- Inherited from table abstbl_vencomp_det:  precio numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_det:  descuento numeric(5,2) NOT NULL,
-- Inherited from table abstbl_vencomp_det:  iva numeric(9,2) NOT NULL,
-- Inherited from table abstbl_vencomp_det:  obs character varying(80),
-- Inherited from table abstbl_vencomp_det:  importe numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_det:  importedesc numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_det:  importeiva numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_det:  totalpart numeric(19,4) NOT NULL,
  CONSTRAINT pk_tbl_compras_ordenes_det PRIMARY KEY (id_vc , partida ),
  CONSTRAINT fk_tbl_compras_ordenes_det_tbl_compras_ordenes_cab FOREIGN KEY (id_vc)
      REFERENCES tbl_compras_ordenes_cab (id_vc) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_tbl_compras_ordenes_det_tbl_invserv_inventarios FOREIGN KEY (id_prod)
      REFERENCES tbl_invserv_inventarios (id_prod) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE
)
INHERITS (abstbl_vencomp_det);

--@FIN_BLOQUE
CREATE TABLE tbl_cfdcomp
(
  id_cfd serial NOT NULL,
  rfc character varying(15) NOT NULL,
  fecha timestamp without time zone NOT NULL,
  total numeric(19,4) NOT NULL,
  impuesto numeric(19,4) NOT NULL,
  efecto character(1) NOT NULL,
  pedimento character varying(300) NOT NULL,
  fechapedimento character varying(350) NOT NULL,
  aduana character varying(600) NOT NULL,
  fsi_tipo character(3) NOT NULL,
  fsi_id integer NOT NULL,
  nocertificado character varying(20) NOT NULL,
  sello character varying(8000) NOT NULL,
  lugarexpedicion character varying(8000) NOT NULL,
  metododepago character varying(254) NOT NULL,
  uuid character(36) NOT NULL,
  fechatimbre timestamp without time zone NOT NULL,
  nocertificadosat character varying(20) NOT NULL,
  sellosat character varying(8000) NOT NULL,
  CONSTRAINT pk_tbl_cfdcomp PRIMARY KEY (id_cfd)
);

   
--@FIN_BLOQUE
CREATE TABLE tbl_cfdcompotr
(
  id_cfd serial NOT NULL,
  fsi_tipo character(3) NOT NULL,
  fsi_id integer NOT NULL,
  cfd_cbb_serie character varying(10) NOT NULL,
  cfd_cbb_numfol integer NOT NULL,
  numfactext character varying(36) NOT NULL,
  uuid character(36) NOT NULL,
  ext character varying(10) NOT NULL,
  nombre_original character varying(254) NOT NULL,
  total numeric(19,4) NOT NULL,
  id_moneda smallint NOT NULL,
  tc numeric(19,4) NOT NULL,
  fecha timestamp without time zone NOT NULL,
  CONSTRAINT pk_tbl_cfdcompotr PRIMARY KEY (id_cfd)
);

--@FIN_BLOQUE
CREATE TABLE tbl_compras_recepciones_cab
(
  id_vc serial NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  id_entidad smallint NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  numero integer NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  id_clipro integer NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  fecha timestamp without time zone NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  referencia character varying(20),
-- Inherited from table abstbl_vencomp_cab:  status character(1) NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  moneda smallint NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  tc numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  fechaenvio timestamp without time zone,
-- Inherited from table abstbl_vencomp_cab:  condicion smallint NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  obs character varying(255),
-- Inherited from table abstbl_vencomp_cab:  importe numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  descuento numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  subtotal numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  iva numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  total numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  ref character varying(25),
-- Inherited from table abstbl_vencomp_cab:  id_pol integer,
-- Inherited from table abstbl_vencomp_cab:  id_polcost integer,
-- Inherited from table abstbl_vencomp_cab:  id_bodega smallint NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  mimporte numeric(19,4),
-- Inherited from table abstbl_vencomp_cab:  mdescuento numeric(19,4),
-- Inherited from table abstbl_vencomp_cab:  msubtotal numeric(19,4),
-- Inherited from table abstbl_vencomp_cab:  miva numeric(19,4),
-- Inherited from table abstbl_vencomp_cab:  mtotal numeric(19,4),
-- Inherited from table abstbl_vencomp_cab:  efectivo numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  bancos numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  cambio numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  id_vendedor smallint NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  id_cfd integer,
-- Inherited from table abstbl_vencomp_cab:  tfd smallint,
  id_factura integer,
  CONSTRAINT pk_tbl_compras_recepciones_cab PRIMARY KEY (id_vc ),
  CONSTRAINT fk_tbl_compras_recepciones_cab_tbl_cfdcomp FOREIGN KEY (id_cfd)
      REFERENCES tbl_cfdcomp (id_cfd) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE SET NULL,
  CONSTRAINT fk_tbl_compras_recepciones_cab_tbl_compras_entidades FOREIGN KEY (id_entidad)
      REFERENCES tbl_compras_entidades (id_entidadcompra) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_tbl_compras_recepciones_cab_tbl_cont_monedas FOREIGN KEY (moneda)
      REFERENCES tbl_cont_monedas (clave) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_tbl_compras_recepciones_cab_tbl_invserv_bodegas FOREIGN KEY (id_bodega)
      REFERENCES tbl_invserv_bodegas (id_bodega) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE
)
INHERITS (abstbl_vencomp_cab);

CREATE TRIGGER trg_compras_recepciones_cab
  BEFORE INSERT OR UPDATE
  ON tbl_compras_recepciones_cab
  FOR EACH ROW
  EXECUTE PROCEDURE trg_compras_cab();



--@FIN_BLOQUE
CREATE TABLE tbl_compras_recepciones_det
(
  id_vc integer NOT NULL,
  partida smallint NOT NULL,
-- Inherited from table abstbl_vencomp_det:  cantidad numeric(9,3) NOT NULL,
-- Inherited from table abstbl_vencomp_det:  id_prod character varying(20) NOT NULL,
-- Inherited from table abstbl_vencomp_det:  precio numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_det:  descuento numeric(5,2) NOT NULL,
-- Inherited from table abstbl_vencomp_det:  iva numeric(9,2) NOT NULL,
-- Inherited from table abstbl_vencomp_det:  obs character varying(80),
-- Inherited from table abstbl_vencomp_det:  importe numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_det:  importedesc numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_det:  importeiva numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_det:  totalpart numeric(19,4) NOT NULL,
  CONSTRAINT pk_tbl_compras_recepciones_det PRIMARY KEY (id_vc , partida ),
  CONSTRAINT fk_tbl_compras_recepciones_det_tbl_compras_recepciones_cab FOREIGN KEY (id_vc)
      REFERENCES tbl_compras_recepciones_cab (id_vc) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_tbl_compras_recepciones_det_tbl_invserv_inventarios FOREIGN KEY (id_prod)
      REFERENCES tbl_invserv_inventarios (id_prod) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE
)
INHERITS (abstbl_vencomp_det);



--@FIN_BLOQUE
CREATE TABLE tbl_compras_facturas_cab
(
  id_vc serial NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  id_entidad smallint NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  numero integer NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  id_clipro integer NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  fecha timestamp without time zone NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  referencia character varying(20),
-- Inherited from table abstbl_vencomp_cab:  status character(1) NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  moneda smallint NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  tc numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  fechaenvio timestamp without time zone,
-- Inherited from table abstbl_vencomp_cab:  condicion smallint NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  obs character varying(255),
-- Inherited from table abstbl_vencomp_cab:  importe numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  descuento numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  subtotal numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  iva numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  total numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  ref character varying(25),
-- Inherited from table abstbl_vencomp_cab:  id_pol integer,
-- Inherited from table abstbl_vencomp_cab:  id_polcost integer,
-- Inherited from table abstbl_vencomp_cab:  id_bodega smallint NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  mimporte numeric(19,4),
-- Inherited from table abstbl_vencomp_cab:  mdescuento numeric(19,4),
-- Inherited from table abstbl_vencomp_cab:  msubtotal numeric(19,4),
-- Inherited from table abstbl_vencomp_cab:  miva numeric(19,4),
-- Inherited from table abstbl_vencomp_cab:  mtotal numeric(19,4),
-- Inherited from table abstbl_vencomp_cab:  efectivo numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  bancos numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  cambio numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  id_vendedor smallint NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  id_cfd integer,
-- Inherited from table abstbl_vencomp_cab:  tfd smallint,
  CONSTRAINT pk_tbl_compras_facturas_cab PRIMARY KEY (id_vc ),
  CONSTRAINT fk_tbl_compras_facturas_cab_tbl_cfdcomp FOREIGN KEY (id_cfd)
      REFERENCES tbl_cfdcomp (id_cfd) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE SET NULL,
  CONSTRAINT fk_tbl_compras_facturas_cab_tbl_compras_entidades FOREIGN KEY (id_entidad)
      REFERENCES tbl_compras_entidades (id_entidadcompra) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_tbl_compras_facturas_cab_tbl_cont_monedas FOREIGN KEY (moneda)
      REFERENCES tbl_cont_monedas (clave) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_tbl_compras_facturas_cab_tbl_invserv_bodegas FOREIGN KEY (id_bodega)
      REFERENCES tbl_invserv_bodegas (id_bodega) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE
)
INHERITS (abstbl_vencomp_cab);

CREATE TRIGGER trg_compras_facturas_cab
  BEFORE INSERT OR UPDATE
  ON tbl_compras_facturas_cab
  FOR EACH ROW
  EXECUTE PROCEDURE trg_compras_cab();



--@FIN_BLOQUE
CREATE TABLE tbl_compras_facturas_det
(
  id_vc integer NOT NULL,
  partida smallint NOT NULL,
-- Inherited from table abstbl_vencomp_det:  cantidad numeric(9,3) NOT NULL,
-- Inherited from table abstbl_vencomp_det:  id_prod character varying(20) NOT NULL,
-- Inherited from table abstbl_vencomp_det:  precio numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_det:  descuento numeric(5,2) NOT NULL,
-- Inherited from table abstbl_vencomp_det:  iva numeric(9,2) NOT NULL,
-- Inherited from table abstbl_vencomp_det:  obs character varying(80),
-- Inherited from table abstbl_vencomp_det:  importe numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_det:  importedesc numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_det:  importeiva numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_det:  totalpart numeric(19,4) NOT NULL,
  CONSTRAINT pk_tbl_compras_facturas_det PRIMARY KEY (id_vc , partida ),
  CONSTRAINT fk_tbl_compras_facturas_det_tbl_compras_facturas_cab FOREIGN KEY (id_vc)
      REFERENCES tbl_compras_facturas_cab (id_vc) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_tbl_compras_facturas_det_tbl_invserv_inventarios FOREIGN KEY (id_prod)
      REFERENCES tbl_invserv_inventarios (id_prod) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE
)
INHERITS (abstbl_vencomp_det);



--@FIN_BLOQUE
CREATE TABLE tbl_compras_facturas_pagos
(
  id_factura integer NOT NULL,
  id_mov integer NOT NULL,
  CONSTRAINT pk_tbl_compras_facturas_pagos PRIMARY KEY (id_factura , id_mov ),
  CONSTRAINT fk_tbl_compras_facturas_pagos_tbl_bancos_movimientos FOREIGN KEY (id_mov)
      REFERENCES tbl_bancos_movimientos (id) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_tbl_compras_facturas_pagos_tbl_compras_facturas_cab FOREIGN KEY (id_factura)
      REFERENCES tbl_compras_facturas_cab (id_vc) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE
);



--@FIN_BLOQUE
CREATE TABLE tbl_compras_devoluciones_cab
(
  id_vc serial NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  id_entidad smallint NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  numero integer NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  id_clipro integer NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  fecha timestamp without time zone NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  referencia character varying(20),
-- Inherited from table abstbl_vencomp_cab:  status character(1) NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  moneda smallint NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  tc numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  fechaenvio timestamp without time zone,
-- Inherited from table abstbl_vencomp_cab:  condicion smallint NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  obs character varying(255),
-- Inherited from table abstbl_vencomp_cab:  importe numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  descuento numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  subtotal numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  iva numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  total numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  ref character varying(25),
-- Inherited from table abstbl_vencomp_cab:  id_pol integer,
-- Inherited from table abstbl_vencomp_cab:  id_polcost integer,
-- Inherited from table abstbl_vencomp_cab:  id_bodega smallint NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  mimporte numeric(19,4),
-- Inherited from table abstbl_vencomp_cab:  mdescuento numeric(19,4),
-- Inherited from table abstbl_vencomp_cab:  msubtotal numeric(19,4),
-- Inherited from table abstbl_vencomp_cab:  miva numeric(19,4),
-- Inherited from table abstbl_vencomp_cab:  mtotal numeric(19,4),
-- Inherited from table abstbl_vencomp_cab:  efectivo numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  bancos numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  cambio numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  id_vendedor smallint NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  id_cfd integer,
-- Inherited from table abstbl_vencomp_cab:  tfd smallint,
  id_factura integer,
  devreb character(3) NOT NULL,
  CONSTRAINT pk_tbl_compras_devoluciones_cab PRIMARY KEY (id_vc ),
  CONSTRAINT fk_tbl_compras_devoluciones_cab_tbl_cfdcomp FOREIGN KEY (id_cfd)
      REFERENCES tbl_cfdcomp (id_cfd) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE SET NULL,
  CONSTRAINT fk_tbl_compras_devoluciones_cab_tbl_compras_entidades FOREIGN KEY (id_entidad)
      REFERENCES tbl_compras_entidades (id_entidadcompra) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_tbl_compras_devoluciones_cab_tbl_cont_monedas FOREIGN KEY (moneda)
      REFERENCES tbl_cont_monedas (clave) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_tbl_compras_devoluciones_cab_tbl_invserv_bodegas FOREIGN KEY (id_bodega)
      REFERENCES tbl_invserv_bodegas (id_bodega) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT ck_tbl_compras_devoluciones_cab_devreb CHECK (devreb = 'DEV'::bpchar OR devreb = 'REB'::bpchar)
)
INHERITS (abstbl_vencomp_cab);

CREATE TRIGGER trg_compras_devoluciones_cab
  BEFORE INSERT OR UPDATE
  ON tbl_compras_devoluciones_cab
  FOR EACH ROW
  EXECUTE PROCEDURE trg_compras_cab();



--@FIN_BLOQUE
CREATE TABLE tbl_compras_devoluciones_det
(
  id_vc integer NOT NULL,
  partida smallint NOT NULL,
-- Inherited from table abstbl_vencomp_det:  cantidad numeric(9,3) NOT NULL,
-- Inherited from table abstbl_vencomp_det:  id_prod character varying(20) NOT NULL,
-- Inherited from table abstbl_vencomp_det:  precio numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_det:  descuento numeric(5,2) NOT NULL,
-- Inherited from table abstbl_vencomp_det:  iva numeric(9,2) NOT NULL,
-- Inherited from table abstbl_vencomp_det:  obs character varying(80),
-- Inherited from table abstbl_vencomp_det:  importe numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_det:  importedesc numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_det:  importeiva numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_det:  totalpart numeric(19,4) NOT NULL,
  CONSTRAINT pk_tbl_compras_devoluciones_det PRIMARY KEY (id_vc , partida ),
  CONSTRAINT fk_tbl_compras_devoluciones_det_tbl_compras_devoluciones_cab FOREIGN KEY (id_vc)
      REFERENCES tbl_compras_devoluciones_cab (id_vc) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_tbl_compras_devoluciones_det_tbl_invserv_inventarios FOREIGN KEY (id_prod)
      REFERENCES tbl_invserv_inventarios (id_prod) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE
)
INHERITS (abstbl_vencomp_det);



--@FIN_BLOQUE
CREATE TABLE tbl_compras_devoluciones_pagos
(
  id_devolucion integer NOT NULL,
  id_mov integer NOT NULL,
  CONSTRAINT pk_tbl_compras_devoluciones_pagos PRIMARY KEY (id_devolucion , id_mov ),
  CONSTRAINT fk_tbl_compras_devoluciones_pagos_tbl_compras_devoluciones_cab FOREIGN KEY (id_devolucion)
      REFERENCES tbl_compras_devoluciones_cab (id_vc) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_tbl_devoluciones_facturas_pagos_tbl_bancos_movimientos FOREIGN KEY (id_mov)
      REFERENCES tbl_bancos_movimientos (id) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE
);

--@FIN_BLOQUE
CREATE TABLE tbl_compras_gastos_cab
(
  id_vc serial NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  id_entidad smallint NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  numero integer NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  id_clipro integer NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  fecha timestamp without time zone NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  referencia character varying(20),
-- Inherited from table abstbl_vencomp_cab:  status character(1) NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  moneda smallint NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  tc numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  fechaenvio timestamp without time zone,
-- Inherited from table abstbl_vencomp_cab:  condicion smallint NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  obs character varying(255),
-- Inherited from table abstbl_vencomp_cab:  importe numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  descuento numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  subtotal numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  iva numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  total numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  ref character varying(25),
-- Inherited from table abstbl_vencomp_cab:  id_pol integer,
-- Inherited from table abstbl_vencomp_cab:  id_polcost integer,
-- Inherited from table abstbl_vencomp_cab:  id_bodega smallint NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  mimporte numeric(19,4),
-- Inherited from table abstbl_vencomp_cab:  mdescuento numeric(19,4),
-- Inherited from table abstbl_vencomp_cab:  msubtotal numeric(19,4),
-- Inherited from table abstbl_vencomp_cab:  miva numeric(19,4),
-- Inherited from table abstbl_vencomp_cab:  mtotal numeric(19,4),
-- Inherited from table abstbl_vencomp_cab:  efectivo numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  bancos numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  cambio numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  id_vendedor smallint NOT NULL,
-- Inherited from table abstbl_vencomp_cab:  id_cfd integer,
-- Inherited from table abstbl_vencomp_cab:  tfd smallint,
  CONSTRAINT pk_tbl_compras_gastos_cab PRIMARY KEY (id_vc ),
  CONSTRAINT fk_tbl_compras_gastos_cab_tbl_cfdcomp FOREIGN KEY (id_cfd)
      REFERENCES tbl_cfdcomp (id_cfd) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE SET NULL,
  CONSTRAINT fk_tbl_compras_gastos_cab_tbl_compras_entidades FOREIGN KEY (id_entidad)
      REFERENCES tbl_compras_entidades (id_entidadcompra) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_tbl_compras_gastos_cab_tbl_cont_monedas FOREIGN KEY (moneda)
      REFERENCES tbl_cont_monedas (clave) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_tbl_compras_gastos_cab_tbl_invserv_bodegas FOREIGN KEY (id_bodega)
      REFERENCES tbl_invserv_bodegas (id_bodega) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE
)
INHERITS (abstbl_vencomp_cab);

CREATE TRIGGER trg_compras_gastos_cab
  BEFORE INSERT OR UPDATE
  ON tbl_compras_gastos_cab
  FOR EACH ROW
  EXECUTE PROCEDURE trg_compras_cab();



--@FIN_BLOQUE
CREATE TABLE tbl_compras_gastos_det
(
  id_vc integer NOT NULL,
  partida smallint NOT NULL,
-- Inherited from table abstbl_vencomp_det:  cantidad numeric(9,3) NOT NULL,
-- Inherited from table abstbl_vencomp_det:  id_prod character varying(20) NOT NULL,
-- Inherited from table abstbl_vencomp_det:  precio numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_det:  descuento numeric(5,2) NOT NULL,
-- Inherited from table abstbl_vencomp_det:  iva numeric(9,2) NOT NULL,
-- Inherited from table abstbl_vencomp_det:  obs character varying(80),
-- Inherited from table abstbl_vencomp_det:  importe numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_det:  importedesc numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_det:  importeiva numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_det:  totalpart numeric(19,4) NOT NULL,
  CONSTRAINT pk_tbl_compras_gastos_det PRIMARY KEY (id_vc , partida ),
  CONSTRAINT fk_tbl_compras_gastos_det_tbl_compras_gastos_cab FOREIGN KEY (id_vc)
      REFERENCES tbl_compras_gastos_cab (id_vc) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_tbl_compras_gastos_det_tbl_invserv_inventarios FOREIGN KEY (id_prod)
      REFERENCES tbl_invserv_inventarios (id_prod) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE
)
INHERITS (abstbl_vencomp_det);

--@FIN_BLOQUE
ALTER TABLE abstbl_vencomp_cab
ADD ieps numeric(19,4) NOT NULL,
ADD ivaret numeric(19,4) NOT NULL,
ADD isrret numeric(19,4) NOT NULL;

ALTER TABLE abstbl_vencomp_det
ADD ieps numeric(9,6) NOT NULL,
ADD importeieps numeric(19,4) NOT NULL,
ADD ivaret numeric(9,6) NOT NULL,
ADD importeivaret numeric(19,4) NOT NULL,
ADD isrret numeric(9,6) NOT NULL,
ADD importeisrret numeric(19,4) NOT NULL;

--@FIN_BLOQUE
CREATE TABLE tbl_compras_gastos_pagos
(
  id_gasto integer NOT NULL,
  id_mov integer NOT NULL,
  CONSTRAINT pk_tbl_compras_gastos_pagos PRIMARY KEY (id_gasto , id_mov ),
  CONSTRAINT fk_tbl_compras_gastos_pagos_tbl_bancos_movimientos FOREIGN KEY (id_mov)
      REFERENCES tbl_bancos_movimientos (id) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_tbl_compras_gastos_pagos_tbl_compras_gastos_cab FOREIGN KEY (id_gasto)
      REFERENCES tbl_compras_gastos_cab (id_vc) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE
);


--@FIN_BLOQUE
CREATE TABLE tbl_compras_facturas_comext_cab
(
  id_vc integer NOT NULL,
-- Inherited from table abstbl_vencomp_comext_cab:  tipooperacion character(1) NOT NULL,
-- Inherited from table abstbl_vencomp_comext_cab:  clavedepedimento character varying(5) NOT NULL,
-- Inherited from table abstbl_vencomp_comext_cab:  certificadoorigen smallint NOT NULL,
-- Inherited from table abstbl_vencomp_comext_cab:  numcertificadoorigen character varying(40) NOT NULL,
-- Inherited from table abstbl_vencomp_comext_cab:  numeroexportadorconfiable character varying(50) NOT NULL,
-- Inherited from table abstbl_vencomp_comext_cab:  incoterm character varying(3) NOT NULL,
-- Inherited from table abstbl_vencomp_comext_cab:  subdivision smallint NOT NULL,
-- Inherited from table abstbl_vencomp_comext_cab:  observaciones character varying(300) NOT NULL,
-- Inherited from table abstbl_vencomp_comext_cab:  tipocambiousd numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_comext_cab:  totalusd numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_comext_cab:  emisor_curp character varying(40) NOT NULL,
-- Inherited from table abstbl_vencomp_comext_cab:  receptor_curp character varying(40) NOT NULL,
-- Inherited from table abstbl_vencomp_comext_cab:  receptor_numregidtrib character varying(40) NOT NULL,
-- Inherited from table abstbl_vencomp_comext_cab:  destinatario_numregidtrib character varying(40) NOT NULL,
-- Inherited from table abstbl_vencomp_comext_cab:  destinatario_rfc character varying(15) NOT NULL,
-- Inherited from table abstbl_vencomp_comext_cab:  destinatario_curp character varying(40) NOT NULL,
-- Inherited from table abstbl_vencomp_comext_cab:  destinatario_nombre character varying(300) NOT NULL,
-- Inherited from table abstbl_vencomp_comext_cab:  destinatario_domicilio_calle character varying(100) NOT NULL,
-- Inherited from table abstbl_vencomp_comext_cab:  destinatario_domicilio_numeroexterior character varying(55) NOT NULL,
-- Inherited from table abstbl_vencomp_comext_cab:  destinatario_domicilio_numerointerior character varying(55) NOT NULL,
-- Inherited from table abstbl_vencomp_comext_cab:  destinatario_domicilio_colonia character varying(120) NOT NULL,
-- Inherited from table abstbl_vencomp_comext_cab:  destinatario_domicilio_localidad character varying(120) NOT NULL,
-- Inherited from table abstbl_vencomp_comext_cab:  destinatario_domicilio_referencia character varying(250) NOT NULL,
-- Inherited from table abstbl_vencomp_comext_cab:  destinatario_domicilio_municipio character varying(120) NOT NULL,
-- Inherited from table abstbl_vencomp_comext_cab:  destinatario_domicilio_estado character varying(30) NOT NULL,
-- Inherited from table abstbl_vencomp_comext_cab:  destinatario_domicilio_pais character(3) NOT NULL,
-- Inherited from table abstbl_vencomp_comext_cab:  destinatario_domicilio_codigopostal character varying(12) NOT NULL,
  CONSTRAINT pk_tbl_compras_facturas_comext_cab PRIMARY KEY (id_vc),
  CONSTRAINT fk_tbl_compras_facturas_comext_cab_tbl_compras_facturas_cab FOREIGN KEY (id_vc)
      REFERENCES tbl_compras_facturas_cab (id_vc) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE
)
INHERITS (abstbl_vencomp_comext_cab);
--ALTER TABLE tbl_compras_facturas_comext_cab
  
--@FIN_BLOQUE
CREATE TABLE tbl_compras_facturas_comext_det
(
  id_vc integer NOT NULL,
  partida smallint NOT NULL,
-- Inherited from table abstbl_vencomp_comext_det:  noidentificacion character varying(100) NOT NULL,
-- Inherited from table abstbl_vencomp_comext_det:  fraccionarancelaria character varying(12) NOT NULL,
-- Inherited from table abstbl_vencomp_comext_det:  cantidadaduana numeric(9,3) NOT NULL,
-- Inherited from table abstbl_vencomp_comext_det:  unidadaduana smallint NOT NULL,
-- Inherited from table abstbl_vencomp_comext_det:  valorunitarioaduana numeric(19,2) NOT NULL,
-- Inherited from table abstbl_vencomp_comext_det:  valordolares numeric(19,2) NOT NULL,
  CONSTRAINT pk_tbl_compras_facturas_comext_det PRIMARY KEY (id_vc, partida),
  CONSTRAINT fk_tbl_compras_facturas_comext_det_tbl_compras_facturas_comext_ FOREIGN KEY (id_vc)
      REFERENCES tbl_compras_facturas_comext_cab (id_vc) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE
)
INHERITS (abstbl_vencomp_comext_det);
--ALTER TABLE tbl_compras_facturas_comext_det
  
--@FIN_BLOQUE
CREATE TABLE tbl_compras_facturas_comext_det_descesp
(
  id_vc integer NOT NULL,
  partida smallint NOT NULL,
  descripcion smallint NOT NULL,
-- Inherited from table abstbl_vencomp_comext_det_descesp:  marca character varying(35) NOT NULL,
-- Inherited from table abstbl_vencomp_comext_det_descesp:  modelo character varying(80) NOT NULL,
-- Inherited from table abstbl_vencomp_comext_det_descesp:  submodelo character varying(50) NOT NULL,
-- Inherited from table abstbl_vencomp_comext_det_descesp:  numeroserie character varying(40) NOT NULL,
  CONSTRAINT pk_tbl_compras_facturas_comext_det_descesp PRIMARY KEY (id_vc, partida, descripcion),
  CONSTRAINT fk_tbl_compras_facturas_comext_det_descesp_tbl_compras_facturas FOREIGN KEY (id_vc, partida)
      REFERENCES tbl_compras_facturas_comext_det (id_vc, partida) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE
)
INHERITS (abstbl_vencomp_comext_det_descesp);
--ALTER TABLE tbl_compras_facturas_comext_det_descesp
  
--@FIN_BLOQUE
CREATE TABLE tbl_ventas_facturas_comext_cab
(
  id_vc integer NOT NULL,
-- Inherited from table abstbl_vencomp_comext_cab:  tipooperacion character(1) NOT NULL,
-- Inherited from table abstbl_vencomp_comext_cab:  clavedepedimento character varying(5) NOT NULL,
-- Inherited from table abstbl_vencomp_comext_cab:  certificadoorigen smallint NOT NULL,
-- Inherited from table abstbl_vencomp_comext_cab:  numcertificadoorigen character varying(40) NOT NULL,
-- Inherited from table abstbl_vencomp_comext_cab:  numeroexportadorconfiable character varying(50) NOT NULL,
-- Inherited from table abstbl_vencomp_comext_cab:  incoterm character varying(3) NOT NULL,
-- Inherited from table abstbl_vencomp_comext_cab:  subdivision smallint NOT NULL,
-- Inherited from table abstbl_vencomp_comext_cab:  observaciones character varying(300) NOT NULL,
-- Inherited from table abstbl_vencomp_comext_cab:  tipocambiousd numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_comext_cab:  totalusd numeric(19,4) NOT NULL,
-- Inherited from table abstbl_vencomp_comext_cab:  emisor_curp character varying(40) NOT NULL,
-- Inherited from table abstbl_vencomp_comext_cab:  receptor_curp character varying(40) NOT NULL,
-- Inherited from table abstbl_vencomp_comext_cab:  receptor_numregidtrib character varying(40) NOT NULL,
-- Inherited from table abstbl_vencomp_comext_cab:  destinatario_numregidtrib character varying(40) NOT NULL,
-- Inherited from table abstbl_vencomp_comext_cab:  destinatario_rfc character varying(15) NOT NULL,
-- Inherited from table abstbl_vencomp_comext_cab:  destinatario_curp character varying(40) NOT NULL,
-- Inherited from table abstbl_vencomp_comext_cab:  destinatario_nombre character varying(300) NOT NULL,
-- Inherited from table abstbl_vencomp_comext_cab:  destinatario_domicilio_calle character varying(100) NOT NULL,
-- Inherited from table abstbl_vencomp_comext_cab:  destinatario_domicilio_numeroexterior character varying(55) NOT NULL,
-- Inherited from table abstbl_vencomp_comext_cab:  destinatario_domicilio_numerointerior character varying(55) NOT NULL,
-- Inherited from table abstbl_vencomp_comext_cab:  destinatario_domicilio_colonia character varying(120) NOT NULL,
-- Inherited from table abstbl_vencomp_comext_cab:  destinatario_domicilio_localidad character varying(120) NOT NULL,
-- Inherited from table abstbl_vencomp_comext_cab:  destinatario_domicilio_referencia character varying(250) NOT NULL,
-- Inherited from table abstbl_vencomp_comext_cab:  destinatario_domicilio_municipio character varying(120) NOT NULL,
-- Inherited from table abstbl_vencomp_comext_cab:  destinatario_domicilio_estado character varying(30) NOT NULL,
-- Inherited from table abstbl_vencomp_comext_cab:  destinatario_domicilio_pais character(3) NOT NULL,
-- Inherited from table abstbl_vencomp_comext_cab:  destinatario_domicilio_codigopostal character varying(12) NOT NULL,
  CONSTRAINT pk_tbl_ventas_facturas_comext_cab PRIMARY KEY (id_vc),
  CONSTRAINT fk_tbl_ventas_facturas_comext_cab_tbl_ventas_facturas_cab FOREIGN KEY (id_vc)
      REFERENCES tbl_ventas_facturas_cab (id_vc) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE
)
INHERITS (abstbl_vencomp_comext_cab);
--ALTER TABLE tbl_ventas_facturas_comext_cab
  
--@FIN_BLOQUE
CREATE TABLE tbl_ventas_facturas_comext_det
(
  id_vc integer NOT NULL,
  partida smallint NOT NULL,
-- Inherited from table abstbl_vencomp_comext_det:  noidentificacion character varying(100) NOT NULL,
-- Inherited from table abstbl_vencomp_comext_det:  fraccionarancelaria character varying(12) NOT NULL,
-- Inherited from table abstbl_vencomp_comext_det:  cantidadaduana numeric(9,3) NOT NULL,
-- Inherited from table abstbl_vencomp_comext_det:  unidadaduana smallint NOT NULL,
-- Inherited from table abstbl_vencomp_comext_det:  valorunitarioaduana numeric(19,2) NOT NULL,
-- Inherited from table abstbl_vencomp_comext_det:  valordolares numeric(19,2) NOT NULL,
  CONSTRAINT pk_tbl_ventas_facturas_comext_det PRIMARY KEY (id_vc, partida),
  CONSTRAINT fk_tbl_ventas_facturas_comext_det_tbl_ventas_facturas_comext_ca FOREIGN KEY (id_vc)
      REFERENCES tbl_ventas_facturas_comext_cab (id_vc) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE
)
INHERITS (abstbl_vencomp_comext_det);
--ALTER TABLE tbl_ventas_facturas_comext_det
  
--@FIN_BLOQUE
CREATE TABLE tbl_ventas_facturas_comext_det_descesp
(
  id_vc integer NOT NULL,
  partida smallint NOT NULL,
  descripcion smallint NOT NULL,
-- Inherited from table abstbl_vencomp_comext_det_descesp:  marca character varying(35) NOT NULL,
-- Inherited from table abstbl_vencomp_comext_det_descesp:  modelo character varying(80) NOT NULL,
-- Inherited from table abstbl_vencomp_comext_det_descesp:  submodelo character varying(50) NOT NULL,
-- Inherited from table abstbl_vencomp_comext_det_descesp:  numeroserie character varying(40) NOT NULL,
  CONSTRAINT pk_tbl_ventas_facturas_comext_det_descesp PRIMARY KEY (id_vc, partida, descripcion),
  CONSTRAINT fk_tbl_ventas_facturas_comext_det_descesp_tbl_ventas_facturas_c FOREIGN KEY (id_vc, partida)
      REFERENCES tbl_ventas_facturas_comext_det (id_vc, partida) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE
)
INHERITS (abstbl_vencomp_comext_det_descesp);
--ALTER TABLE tbl_ventas_facturas_comext_det_descesp




























































--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_ventas_remisiones_modulo AS 
 SELECT rc.id_vc AS id_remision, rc.id_entidad, rc.numero, rc.fecha, rc.referencia, rc.status, rc.moneda, mon.simbolo, rc.tc, rc.mtotal AS total, rc.id_clipro AS id_cliente, 
        CASE
            WHEN rc.id_clipro = 0 THEN 'Cliente de Mostrador'::character varying
            ELSE ( SELECT p.nombre
               FROM tbl_client_client p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'CL'::bpchar)
        END AS cliente, 
        CASE
            WHEN rc.ref IS NULL THEN ''::character varying
            ELSE rc.ref
        END AS ref, rc.id_polcost, 
        CASE
            WHEN rc.id_factura = 0 THEN 0
            ELSE ( SELECT tbl_ventas_facturas_cab.numero
               FROM tbl_ventas_facturas_cab
              WHERE tbl_ventas_facturas_cab.id_vc = rc.id_factura)
        END AS factura, rc.id_vendedor, v.nombre AS vendedornombre, 
        CASE
            WHEN rc.id_cfd IS NULL THEN 0
            ELSE rc.id_cfd
        END AS id_cfd, 
        CASE
            WHEN rc.tfd IS NULL THEN 0
            ELSE rc.tfd::integer
        END AS tfd, rc.id_factura
   FROM tbl_ventas_remisiones_cab rc
   JOIN tbl_vendedores v ON rc.id_vendedor = v.id_vendedor
   JOIN tbl_cont_monedas mon ON rc.moneda = mon.clave;
   
INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('VEN_REM');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('VEN_REM_AGREGAR');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('VEN_REM_CONSULTAR');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('VEN_REM_CANCELAR');





--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_ventas_facturas_modulo AS 
 SELECT rc.id_vc AS id_factura, rc.id_entidad, rc.numero, rc.fecha, rc.referencia, rc.status, rc.moneda, mon.simbolo, rc.tc, rc.mtotal AS total, rc.id_clipro AS id_cliente, 
        CASE
            WHEN rc.id_clipro = 0 THEN 'Cliente de Mostrador'::character varying
            ELSE ( SELECT p.nombre
               FROM tbl_client_client p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'CL'::bpchar)
        END AS cliente, 
        CASE
            WHEN rc.ref IS NULL THEN ''::character varying
            ELSE rc.ref
        END AS ref, 
        CASE
            WHEN rc.id_pol IS NULL THEN (-1)
            ELSE rc.id_pol
        END AS id_pol, 
        CASE
            WHEN rc.id_polcost IS NULL THEN (-1)
            ELSE rc.id_polcost
        END AS id_polcost, rc.id_vendedor, v.nombre AS vendedornombre, 
        CASE
            WHEN rc.id_cfd IS NULL THEN 0
            ELSE rc.id_cfd
        END AS id_cfd, 
        CASE
            WHEN rc.tfd IS NULL THEN 0
            ELSE rc.tfd::integer
        END AS tfd
   FROM tbl_ventas_facturas_cab rc
   JOIN tbl_vendedores v ON rc.id_vendedor = v.id_vendedor
   JOIN tbl_cont_monedas mon ON rc.moneda = mon.clave;

   
INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('VEN_FAC');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('VEN_FAC_AGREGAR');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('VEN_FAC_CONSULTAR');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('VEN_FAC_CANCELAR');







--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_ventas_devoluciones_modulo AS 
 SELECT rc.id_vc AS id_devolucion, rc.id_entidad, rc.numero, rc.fecha, rc.referencia, rc.status, rc.moneda, mon.simbolo, rc.tc, rc.mtotal AS total, rc.id_clipro AS id_cliente, 
        CASE
            WHEN rc.id_clipro = 0 THEN 'Cliente de Mostrador'::character varying
            ELSE ( SELECT p.nombre
               FROM tbl_client_client p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'CL'::bpchar)
        END AS cliente, rc.ref, rc.id_factura, ( SELECT tbl_ventas_facturas_cab.numero
           FROM tbl_ventas_facturas_cab
          WHERE tbl_ventas_facturas_cab.id_vc = rc.id_factura) AS factura, 
        CASE
            WHEN rc.id_pol IS NULL THEN (-1)
            ELSE rc.id_pol
        END AS id_pol, 
        CASE
            WHEN rc.id_polcost IS NULL THEN (-1)
            ELSE rc.id_polcost
        END AS id_polcost, rc.id_vendedor, v.nombre AS vendedornombre, 
        CASE
            WHEN rc.id_cfd IS NULL THEN 0
            ELSE rc.id_cfd
        END AS id_cfd, 
        CASE
            WHEN rc.tfd IS NULL THEN 0
            ELSE rc.tfd::integer
        END AS tfd, rc.devreb
   FROM tbl_ventas_devoluciones_cab rc
   JOIN tbl_cont_monedas mon ON rc.moneda = mon.clave
   JOIN tbl_vendedores v ON rc.id_vendedor = v.id_vendedor;
   
INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('VEN_DEV');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('VEN_DEV_DEVOLVER');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('VEN_DEV_REBAJAR');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('VEN_DEV_CONSULTAR');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('VEN_DEV_CANCELAR');



--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_catalog_client AS 
 SELECT c.id_numero AS clave, c.nombre AS descripcion, ''::text AS especial, c.id_entidad
   FROM tbl_client_client c
  WHERE c.status = 'A'::bpchar;



--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_public_invserv_inventarios_catalogo AS 
 SELECT tbl_invserv_inventarios.id_tipo, tbl_invserv_inventarios.id_prod AS clave, tbl_invserv_inventarios.descripcion, tbl_invserv_inventarios.id_linea AS linea, tbl_invserv_inventarios.ultimocosto, tbl_invserv_inventarios.costopromedio, tbl_invserv_inventarios.precio, tbl_invserv_inventarios.precio2, tbl_invserv_inventarios.precio3, tbl_invserv_inventarios.precio4, tbl_invserv_inventarios.precio5, tbl_invserv_inventarios.preciomin, tbl_invserv_inventarios.preciomax, tbl_invserv_inventarios.precioweb, tbl_invserv_inventarios.precioofertaweb, tbl_invserv_inventarios.existencia, tbl_invserv_inventarios.id_unidad, tbl_invserv_inventarios.id_unidadsalida, tbl_invserv_inventarios.iva, tbl_invserv_inventarios.impieps, tbl_invserv_inventarios.impivaret, tbl_invserv_inventarios.impisrret, tbl_invserv_inventarios.seproduce, tbl_invserv_inventarios.nosevende, tbl_invserv_inventarios.status, tbl_invserv_inventarios.codigo
   FROM tbl_invserv_inventarios;


--@FIN_BLOQUE
CREATE TABLE tbl_ventas_politicas_ent_desc
(
  id_entidad smallint NOT NULL,
  id_prod character varying(20) NOT NULL,
  p1 numeric(9,6) NOT NULL,
  p2 numeric(9,6) NOT NULL,
  p3 numeric(9,6) NOT NULL,
  p4 numeric(9,6) NOT NULL,
  p5 numeric(9,6) NOT NULL,
  aplicacion smallint NOT NULL,
  CONSTRAINT pk_tbl_ventas_politicas_ent_desc PRIMARY KEY (id_entidad , id_prod ),
  CONSTRAINT fk_tbl_ventas_politicas_ent_desc_tbl_invserv_inventarios FOREIGN KEY (id_prod)
      REFERENCES tbl_invserv_inventarios (id_prod) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_tbl_ventas_politicas_ent_desc_tbl_ventas_entidades FOREIGN KEY (id_entidad)
      REFERENCES tbl_ventas_entidades (id_entidadventa) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE
);



--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_ventas_politicas_ent_desc AS 
 SELECT e.id_entidadventa AS id_entidad, c.id_prod AS clave, c.descripcion, 
        CASE
            WHEN (( SELECT tbl_ventas_politicas_ent_desc.p1
               FROM tbl_ventas_politicas_ent_desc
              WHERE tbl_ventas_politicas_ent_desc.id_entidad = e.id_entidadventa AND tbl_ventas_politicas_ent_desc.id_prod::text = c.id_prod::text)) IS NULL THEN 0::numeric
            ELSE ( SELECT tbl_ventas_politicas_ent_desc.p1
               FROM tbl_ventas_politicas_ent_desc
              WHERE tbl_ventas_politicas_ent_desc.id_entidad = e.id_entidadventa AND tbl_ventas_politicas_ent_desc.id_prod::text = c.id_prod::text)
        END AS p1, 
        CASE
            WHEN (( SELECT tbl_ventas_politicas_ent_desc.p2
               FROM tbl_ventas_politicas_ent_desc
              WHERE tbl_ventas_politicas_ent_desc.id_entidad = e.id_entidadventa AND tbl_ventas_politicas_ent_desc.id_prod::text = c.id_prod::text)) IS NULL THEN 0::numeric
            ELSE ( SELECT tbl_ventas_politicas_ent_desc.p2
               FROM tbl_ventas_politicas_ent_desc
              WHERE tbl_ventas_politicas_ent_desc.id_entidad = e.id_entidadventa AND tbl_ventas_politicas_ent_desc.id_prod::text = c.id_prod::text)
        END AS p2, 
        CASE
            WHEN (( SELECT tbl_ventas_politicas_ent_desc.p3
               FROM tbl_ventas_politicas_ent_desc
              WHERE tbl_ventas_politicas_ent_desc.id_entidad = e.id_entidadventa AND tbl_ventas_politicas_ent_desc.id_prod::text = c.id_prod::text)) IS NULL THEN 0::numeric
            ELSE ( SELECT tbl_ventas_politicas_ent_desc.p3
               FROM tbl_ventas_politicas_ent_desc
              WHERE tbl_ventas_politicas_ent_desc.id_entidad = e.id_entidadventa AND tbl_ventas_politicas_ent_desc.id_prod::text = c.id_prod::text)
        END AS p3, 
        CASE
            WHEN (( SELECT tbl_ventas_politicas_ent_desc.p4
               FROM tbl_ventas_politicas_ent_desc
              WHERE tbl_ventas_politicas_ent_desc.id_entidad = e.id_entidadventa AND tbl_ventas_politicas_ent_desc.id_prod::text = c.id_prod::text)) IS NULL THEN 0::numeric
            ELSE ( SELECT tbl_ventas_politicas_ent_desc.p4
               FROM tbl_ventas_politicas_ent_desc
              WHERE tbl_ventas_politicas_ent_desc.id_entidad = e.id_entidadventa AND tbl_ventas_politicas_ent_desc.id_prod::text = c.id_prod::text)
        END AS p4, 
        CASE
            WHEN (( SELECT tbl_ventas_politicas_ent_desc.p5
               FROM tbl_ventas_politicas_ent_desc
              WHERE tbl_ventas_politicas_ent_desc.id_entidad = e.id_entidadventa AND tbl_ventas_politicas_ent_desc.id_prod::text = c.id_prod::text)) IS NULL THEN 0::numeric
            ELSE ( SELECT tbl_ventas_politicas_ent_desc.p5
               FROM tbl_ventas_politicas_ent_desc
              WHERE tbl_ventas_politicas_ent_desc.id_entidad = e.id_entidadventa AND tbl_ventas_politicas_ent_desc.id_prod::text = c.id_prod::text)
        END AS p5, 
        CASE
            WHEN (( SELECT tbl_ventas_politicas_ent_desc.aplicacion
               FROM tbl_ventas_politicas_ent_desc
              WHERE tbl_ventas_politicas_ent_desc.id_entidad = e.id_entidadventa AND tbl_ventas_politicas_ent_desc.id_prod::text = c.id_prod::text)) IS NULL THEN 0
            ELSE (( SELECT tbl_ventas_politicas_ent_desc.aplicacion
               FROM tbl_ventas_politicas_ent_desc
              WHERE tbl_ventas_politicas_ent_desc.id_entidad = e.id_entidadventa AND tbl_ventas_politicas_ent_desc.id_prod::text = c.id_prod::text))::integer
        END AS aplicacion
   FROM tbl_invserv_inventarios c, tbl_ventas_entidades e
  WHERE c.id_tipo = 'P'::bpchar AND c.status = 'V'::bpchar AND c.nosevende = B'0'::"bit" AND e.id_tipoentidad = 0;



--@FIN_BLOQUE
CREATE TABLE tbl_client_vs_descuentos
(
  id_tipo character(2) NOT NULL,
  id_client integer NOT NULL,
  id_prod character varying(20) NOT NULL,
  fecha timestamp without time zone NOT NULL,
  descuento numeric(9,6) NOT NULL,
  descuento2 numeric(9,6) NOT NULL,
  descuento3 numeric(9,6) NOT NULL,
  descuento4 numeric(9,6) NOT NULL,
  descuento5 numeric(9,6) NOT NULL,
  CONSTRAINT pk_tbl_client_vs_descuentos PRIMARY KEY (id_client , id_prod ),
  CONSTRAINT fk_tbl_client_vs_descuentos_tbl_client_client FOREIGN KEY (id_tipo, id_client)
      REFERENCES tbl_client_client (id_tipo, id_clave) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_tbl_client_vs_descuentos_tbl_invserv_inventarios FOREIGN KEY (id_prod)
      REFERENCES tbl_invserv_inventarios (id_prod) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE
);



--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_ventas_clientes_vs_descuentos AS 
 SELECT c.id_prod, c.id_client, cat.descripcion AS nombre, c.fecha, c.descuento, c.descuento2, c.descuento3, c.descuento4, c.descuento5, cat.id_unidadsalida AS unidad
   FROM tbl_client_vs_descuentos c
   JOIN tbl_invserv_inventarios cat ON c.id_tipo = 'CL'::bpchar AND c.id_prod::text = cat.id_prod::text;



--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_public_client_client AS 
 SELECT tbl_client_client.id_tipo, tbl_client_client.id_clave, tbl_client_client.nombre, tbl_client_client.descuento
   FROM tbl_client_client;
   

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_ventas_cotizaciones_agregar(_id_entidadventa smallint, _numero integer, _id_cliente integer, _fecha timestamp without time zone, _referencia character varying, _moneda smallint, _tc numeric, _condicion smallint, _obs character varying, _importe numeric, _descuento numeric, _subtotal numeric, _iva numeric, _total numeric, _fsipg_efectivo numeric, _fsipg_bancos numeric, _fsipg_cambio numeric, _id_bodega smallint, _id_enlace integer, _id_vendedor smallint, _tipoenlace character, _uuid character, _ieps numeric, _ivaret numeric, _isrret numeric)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255); _ID_Cotizacion int; _mes smallint; _ano smallint;
BEGIN	
	_err := 0;
	_result := 'La cotizaci&oacute;n se ha registrado satisfactoriamente';

	_mes := date_part('month',_Fecha);
	_ano := date_part('year',_Fecha);
	
	IF(select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano and Cerrado = 1) > 0
	OR (select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano) < 1
	THEN
		_err := 3;
		_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_POLIZAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'ERROR: La fecha de poliza pertenece a un periodo cerrado o inexistente'
	END IF;
	
	IF (select count(*) from TBL_VENTAS_COTIZACIONES_CAB where ID_Entidad = _ID_EntidadVenta and Numero = _Numero) > 0
	THEN
		_err := 3;
		_result := 'ERROR: La clave de la cotizaci&oacute;n ya existe, No se puede duplicar';
	END IF;

	IF _err = 0
	THEN
		INSERT INTO TBL_VENTAS_COTIZACIONES_CAB (  id_entidad, numero, id_clipro, fecha, referencia, status, moneda, tc, fechaenvio, condicion, obs, 
			importe, descuento, subtotal, iva, total, ref, id_pol, id_polcost, id_bodega, mimporte, mdescuento, msubtotal, miva, mtotal, efectivo, bancos, cambio, id_vendedor, id_cfd, tfd, 
			ieps, ivaret, isrret, id_factura, tipoenlace )
		VALUES(_ID_EntidadVenta, _Numero, _ID_Cliente, _Fecha, _Referencia, 'G' , _Moneda, _TC, _Fecha, _Condicion, _Obs,
				_Importe, _Descuento, _SubTotal, _IVA, _Total, null, null, null, _ID_Bodega, _Importe, _Descuento, _SubTotal, _IVA,  _Total, 0.0, 0.0, 0.0, _ID_Vendedor, null, null, 
				_ieps, _ivaret, _isrret, null, null)
		 RETURNING currval(pg_get_serial_sequence('TBL_VENTAS_COTIZACIONES_CAB', 'id_vc')) INTO _id_cotizacion;
		 
		-- actualiza el numero de Cotizacion
		UPDATE TBL_VENTAS_ENTIDADES
		SET Cotizacion = _Numero + 1
		WHERE ID_EntidadVenta = _ID_EntidadVenta;
		
		-- inserta el detalle
		INSERT INTO TBL_VENTAS_COTIZACIONES_DET
		SELECT _ID_Cotizacion, Partida, Cantidad, ID_Prod, Precio, Descuento, IVA, Obs, Importe, ImporteDesc, ImporteIVA, TotalPart, IEPS, ImporteIEPS, IVARet, ImporteIVARet, ISRRet, ImporteISRRet
		FROM _TMP_VENTAS_FACTURAS_DET;
				
	END IF; -- fin de la cotizacion	

	RETURN QUERY SELECT _err, _result, _id_cotizacion;

END
$BODY$
  LANGUAGE plpgsql;
  
  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_ventas_pedidos_agregar(_id_entidadventa smallint, _numero integer, _id_cliente integer, _fecha timestamp without time zone, _referencia character varying, _moneda smallint, _tc numeric, _condicion smallint, _obs character varying, _importe numeric, _descuento numeric, _subtotal numeric, _iva numeric, _total numeric, _fsipg_efectivo numeric, _fsipg_bancos numeric, _fsipg_cambio numeric, _id_bodega smallint, _id_enlace integer, _id_vendedor smallint, _tipoenlace character, _uuid character, _ieps numeric, _ivaret numeric, _isrret numeric)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255); _ID_Pedido int; _mes smallint; _ano smallint; _claseref varchar(25);
BEGIN	
	_err := 0;
	_result := 'Pedido se ha registrado satisfactoriamente';

	_mes := date_part('month',_Fecha);
	_ano := date_part('year',_Fecha);

	IF _ID_Enlace is not null
	THEN
		_claseref = 'VCOT|' || cast(_ID_Enlace as varchar) || '|' || cast(_ID_EntidadVenta as varchar) || '||';
	END IF;
	
	IF(select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano and Cerrado = 1) > 0
	OR (select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano) < 1
	THEN
		_err := 3;
		_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_POLIZAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'ERROR: La fecha de poliza pertenece a un periodo cerrado o inexistente'
	END IF;
	
	IF (select count(*) from TBL_VENTAS_PEDIDOS_CAB where ID_Entidad = _ID_EntidadVenta and Numero = _Numero) > 0
	THEN
		_err := 3;
		_result := 'ERROR: La clave del pedido ya existe, No se puede duplicar';
	END IF;

	IF _err = 0
	THEN
		INSERT INTO TBL_VENTAS_PEDIDOS_CAB (  id_entidad, numero, id_clipro, fecha, referencia, status, moneda, tc, fechaenvio, condicion, obs, 
			importe, descuento, subtotal, iva, total, ref, id_pol, id_polcost, id_bodega, mimporte, mdescuento, msubtotal, miva, mtotal, efectivo, bancos, cambio, id_vendedor, id_cfd, tfd, 
			ieps, ivaret, isrret, id_factura, tipoenlace )
		VALUES(_ID_EntidadVenta, _Numero, _ID_Cliente, _Fecha, _Referencia, 'G' , _Moneda, _TC, _Fecha, _Condicion, _Obs,
				_Importe, _Descuento, _SubTotal, _IVA, _Total, _claseref, null, null, _ID_Bodega, _Importe, _Descuento, _SubTotal, _IVA,  _Total, 0.0, 0.0, 0.0, _ID_Vendedor, null, null,
				_ieps, _ivaret, _isrret, null, null)
		 RETURNING currval(pg_get_serial_sequence('TBL_VENTAS_PEDIDOS_CAB', 'id_vc')) INTO _id_pedido;
		 
		-- actualiza el numero de pedido
		UPDATE TBL_VENTAS_ENTIDADES
		SET Pedido = _Numero + 1
		WHERE ID_EntidadVenta = _ID_EntidadVenta;
		
		-- inserta el detalle
		INSERT INTO TBL_VENTAS_PEDIDOS_DET
		SELECT _ID_Pedido, Partida, Cantidad, ID_Prod, Precio, Descuento, IVA, Obs, Importe, ImporteDesc, ImporteIVA, TotalPart, IEPS, ImporteIEPS, IVARet, ImporteIVARet, ISRRet, ImporteISRRet
		FROM _TMP_VENTAS_FACTURAS_DET;

		-- Actualiza el status de la cotizacion, ligando el ID del pedido
		IF _ID_Enlace is not null
		THEN
			UPDATE TBL_VENTAS_COTIZACIONES_CAB
			SET Status = 'F', ID_Factura = _ID_Pedido, TipoEnlace = 'VPED'
			WHERE ID_VC = _ID_Enlace;
		END IF;
		
	END IF; -- findel pedido	

	RETURN QUERY SELECT _err, _result, _id_pedido;

END
$BODY$
  LANGUAGE plpgsql;
  
  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_ventas_remisiones_agregar(_id_entidadventa smallint, _numero integer, _id_cliente integer, _fecha timestamp without time zone, _referencia character varying, _moneda smallint, _tc numeric, _condicion smallint, _obs character varying, _importe numeric, _descuento numeric, _subtotal numeric, _iva numeric, _total numeric, _fsipg_efectivo numeric, _fsipg_bancos numeric, _fsipg_cambio numeric, _id_bodega smallint, _id_enlace integer, _id_vendedor smallint, _tipoenlace character, _uuid character, _ieps numeric, _ivaret numeric, _isrret numeric)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255); _ID_Remision int; _mes smallint; _ano smallint;	_errpart int;  _resultpart varchar(255);  _ID_Movimiento int;  _concepto varchar(80); _Ref varchar(25);  
	_FijaCost bit; _costven numeric(19,4); _CC_COSTVEN char(19); _AuditarAlm bit; _claseref varchar(25);
	_ID_CFD int; _TFD smallint; 
BEGIN	
	_err := 0;
	_result := 'La remisi√≥n se ha registrado satisfactoriamente';
	_concepto := 'Venta Remisi√≥n ' || (select Descripcion from TBL_VENTAS_ENTIDADES where ID_EntidadVenta = _ID_EntidadVenta) || ', numero ' || cast(_Numero as varchar) || 
				(case when _Referencia <> '' then ' y referencia ' || _Referencia || '.' else '.' end);
	_FijaCost = (select FijaCost from TBL_VENTAS_ENTIDADES where ID_EntidadVenta = _ID_EntidadVenta);
	_AuditarAlm := ( select AuditarAlm from TBL_INVSERV_BODEGAS where ID_Bodega = _ID_Bodega );
	_mes := date_part('month',_Fecha);
	_ano := date_part('year',_Fecha);

	IF _ID_Enlace is not null
	THEN
		_claseref := _TipoEnlace || '|' || cast(_ID_Enlace as varchar) || '|' || cast(_ID_EntidadVenta as varchar) || '||';
	END IF;

	IF(select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano and Cerrado = 1) > 0
	OR (select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano) < 1
	THEN
		_err := 3;
		_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_POLIZAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'ERROR: La fecha de poliza pertenece a un periodo cerrado o inexistente'
	END IF;
	
	IF (select count(*) from TBL_VENTAS_REMISIONES_CAB where ID_Entidad = _ID_EntidadVenta and Numero = _Numero) > 0
	THEN
		_err := 3;
		_result := 'ERROR: La clave de la remisi√≥n ya existe, No se puede duplicar';
	END IF;

	IF ( select ventero from TBL_VARIABLES where ID_Variable = 'MVCF' ) = 1
	THEN
		IF (select count(*) from TBL_INVSERV_CHFIS_CAB where ID_Bodega = _ID_Bodega and ( Cerrado = '1' or Generado = '1') and Status <> 'C' and Fecha >= _Fecha) > 0
		THEN
			_err := 3;
			_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ALM_CHFIS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR');--'ERROR: No se puede generar el movimiento al almacen porque ya existe un chequeo f?sico cerrado en esta bodega, con fecha posterior a este movimiento';
		END IF;
	END IF;

	--VERIFICA SI ES CFD
	IF (select CFD from TBL_VENTAS_ENTIDADES where ID_EntidadVenta = _ID_EntidadVenta) <> '00'
	THEN
		IF _uuid <> '' -- Es emisor directo de CFDI, por lo tanto no puede enlazar un CFDI Externo
		THEN
			_err := 3;
			_result := 'ERROR: No se puede enlazar ningun CFDI porque esta entidad de venta genera sus propios CFDIs';
		ELSE
			IF (select count(*) from TBL_CFD_REPORTE_MENSUAL where Mes = _mes and Ano = _ano and Cerrado = '0') > 0
			THEN
				IF (select count(*) from TBL_VENTAS_REMISIONES_CAB where ID_Entidad = _ID_EntidadVenta and Numero = (_Numero -1)) is not null
				THEN
					IF (select TFD from TBL_VENTAS_REMISIONES_CAB where ID_Entidad = _ID_EntidadVenta and Numero = (_Numero -1)) is null
							or (select TFD from TBL_VENTAS_REMISIONES_CAB where ID_Entidad = _ID_EntidadVenta and Numero = (_Numero -1)) <> 3
					THEN 
						_err := 3;
						_result := 'ERROR: No se puede agregar la remisi&oacute;n porque la remisi&oacute;n anterior no est&aacute; sellada. Primero debes sellar la remisi&oacute;n anterior para poder agregar esta remisi&oacute;n';
					END IF;
				END IF;
			ELSE
				_err := 3;
				_result := 'ERROR: No se puede agregar la remision porque el mes de comprobantes fiscales digitaya';
			END IF;
		END IF;
	ELSE -- Si no es Emisor directo de CFDI comprueba si es carga con CFDI externo
		IF _uuid <> ''
		THEN
			IF (select count(*) from TBL_CFDVEN where UUID = _uuid) > 0
			THEN
				_ID_CFD := (select ID_CFD from TBL_CFDVEN where UUID = _uuid) ;
				_TFD := 3;
			ELSE
				_err := 3;
				_result := 'ERROR: No se puede enlazar el CFDI al registro, porque no existe el UUID proporcionado';
			END IF;
		END IF;
	END IF;

	IF _err = 0
	THEN
		INSERT INTO TBL_VENTAS_REMISIONES_CAB (  id_entidad, numero, id_clipro, fecha, referencia, status, moneda, tc, fechaenvio, condicion, obs, 
			importe, descuento, subtotal, iva, total, ref, id_pol, id_polcost, id_bodega, mimporte, mdescuento, msubtotal, miva, mtotal, efectivo, bancos, cambio, id_vendedor, id_cfd, tfd, 
			ieps, ivaret, isrret, id_factura )
		VALUES(_ID_EntidadVenta, _Numero, _ID_Cliente, _Fecha, _Referencia, 'G' , _Moneda, _TC, _Fecha, _Condicion, _Obs,
				_Importe, _Descuento, _SubTotal, _IVA, _Total, _claseref, null, null, _ID_Bodega, _Importe, _Descuento, _SubTotal, _IVA,  _Total, 0.0, 0.0, 0.0, _ID_Vendedor, _ID_CFD, _TFD, 
				_ieps, _ivaret, _isrret, null)
		 RETURNING currval(pg_get_serial_sequence('TBL_VENTAS_REMISIONES_CAB', 'id_vc')) INTO _id_remision;
		 
		-- actualiza el numero de remision
		UPDATE TBL_VENTAS_ENTIDADES
		SET Remision = _Numero + 1
		WHERE ID_EntidadVenta = _ID_EntidadVenta;
		
		-- inserta el detalle
		INSERT INTO TBL_VENTAS_REMISIONES_DET
		SELECT _ID_Remision, Partida, Cantidad, ID_Prod, Precio, Descuento, IVA, Obs, Importe, ImporteDesc, ImporteIVA, TotalPart, IEPS, ImporteIEPS, IVARet, ImporteIVARet, ISRRet, ImporteISRRet
		FROM _TMP_VENTAS_FACTURAS_DET;

		_Ref := 'VREM|' || cast(_ID_Remision as varchar) || '|' || cast(_ID_EntidadVenta as varchar) || '||';

		-- Actualiza el status de la remision, ligando el ID del pedido o cotizacion
		IF _ID_Enlace is not null
		THEN
			IF _TipoEnlace = 'VPED'
			THEN
				UPDATE TBL_VENTAS_PEDIDOS_CAB
				SET Status = 'F', ID_Factura = _ID_Remision, TipoEnlace = 'VREM'
				WHERE ID_VC = _ID_Enlace;
			ELSE 
				UPDATE TBL_VENTAS_COTIZACIONES_CAB
				SET Status = 'F', ID_Factura = _ID_Remision, TipoEnlace = 'VREM'
				WHERE ID_VC = _ID_Enlace;
			END IF;
		END IF;

		IF _uuid <> ''
		THEN
			
		END IF;
		IF _uuid <> ''
		THEN
			UPDATE TBL_CFDVEN
			SET FSI_Tipo = 'REM', FSI_ID = _ID_Remision
			WHERE ID_CFD = _ID_CFD;
			
			UPDATE TBL_CFD
			SET FSI_Tipo = 'REM', FSI_ID = _ID_Remision
			WHERE ID_CFD = _ID_CFD;
		END IF;
		--Procede a agregar el movimiento al almac√©n
		IF _err = 0 AND _FijaCost = '0' and (select count(*) from _TMP_VENTAS_FACTURAS_DET where Tipo = 'P') > 0
		THEN
			CREATE LOCAL TEMPORARY TABLE _TMP_INVSERV_ALMACEN_MOVIM_DET (
				ID_Bodega smallint NOT NULL ,
				ID_Prod varchar(20) NOT NULL ,
				Partida smallint NOT NULL ,
				Cantidad numeric(9, 3) NOT NULL ,
				Costo numeric(19,4) NULL 
			); 

			insert into _TMP_INVSERV_ALMACEN_MOVIM_DET
			select _ID_Bodega, ID_Prod, Partida, Cantidad, Precio --Precio no es el costo, sin embargo lo ignorar√° en la tarjeta de almacen y se calcular√° el costo porque el concepto de venta 50, indica recalcular costo
			from _TMP_VENTAS_FACTURAS_DET
			where Tipo = 'P'
			order by Partida ASC;
		
			SELECT * INTO _errpart, _resultpart, _ID_Movimiento 
			FROM sp_invserv_alm_movs_agregar(_Fecha, _ID_Bodega, (case when _AuditarAlm = '1' then 'P' else 'U' end), '50', _Concepto, '',/*1 ENT 2 SAL*/ '2', _Ref, 'VREM', _ID_Remision) 
			as ( err integer, res varchar, clave integer );
	      
			IF _errpart <> 0
			THEN
				_err := _errpart;
				_result := _resultpart;
			ELSE
				UPDATE TBL_VENTAS_REMISIONES_CAB
				SET ID_PolCost = _ID_Movimiento
				WHERE ID_VC = _ID_Remision;
			END IF;
		
			DROP TABLE _TMP_INVSERV_ALMACEN_MOVIM_DET; 
		END IF;
		-- Fin del movimiento al almacen
		
	END IF; -- fi nd ea remision
	
	RETURN QUERY SELECT _err, _result, _id_remision;

END
$BODY$
  LANGUAGE plpgsql;
 

--@FIN_BLOQUE
CREATE TABLE tbl_referencias_ext
(
  id_ref serial NOT NULL,
  ref character varying(1024) NOT NULL,
  CONSTRAINT pk_tbl_referencias_ext PRIMARY KEY (id_ref )
);



--@FIN_BLOQUE
CREATE TABLE tbl_ventas_vs_inventario
(
  id_tipo character(2) NOT NULL,
  id_cliente integer NOT NULL,
  id_prod character varying(20) NOT NULL,
  id_moneda smallint NOT NULL,
  fecha timestamp without time zone NOT NULL,
  precio numeric(19,4) NOT NULL,
  descuento numeric(5,2) NOT NULL,
  CONSTRAINT pk_tbl_ventas_vs_inventario PRIMARY KEY (id_tipo , id_cliente , id_prod , id_moneda ),
  CONSTRAINT fk_tbl_ventas_vs_inventario_tbl_client_client FOREIGN KEY (id_tipo, id_cliente)
      REFERENCES tbl_client_client (id_tipo, id_clave) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_tbl_ventas_vs_inventario_tbl_cont_monedas FOREIGN KEY (id_moneda)
      REFERENCES tbl_cont_monedas (clave) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_tbl_ventas_vs_inventario_tbl_invserv_inventarios FOREIGN KEY (id_prod)
      REFERENCES tbl_invserv_inventarios (id_prod) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE
);
  


--@FIN_BLOQUE
CREATE TABLE tbl_ventas_facturas_pagos
(
  id_factura integer NOT NULL,
  id_mov integer NOT NULL,
  CONSTRAINT pk_tbl_ventas_facturas_pagos PRIMARY KEY (id_factura , id_mov ),
  CONSTRAINT fk_tbl_ventas_facturas_pagos_tbl_bancos_movimientos FOREIGN KEY (id_mov)
      REFERENCES tbl_bancos_movimientos (id) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_tbl_ventas_facturas_pagos_tbl_ventas_facturas_cab FOREIGN KEY (id_factura)
      REFERENCES tbl_ventas_facturas_cab (id_vc) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE
);

  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_ventas_facturas_agregar(
    _id_entidadventa smallint,
    _numero integer,
    _id_cliente integer,
    _fecha timestamp without time zone,
    _referencia character varying,
    _moneda smallint,
    _tc numeric,
    _condicion smallint,
    _obs character varying,
    _importe numeric,
    _descuento numeric,
    _subtotal numeric,
    _iva numeric,
    _total numeric,
    _fsipg_efectivo numeric,
    _fsipg_bancos numeric,
    _fsipg_cambio numeric,
    _id_bodega smallint,
    _id_enlace integer,
    _id_vendedor smallint,
    _tipoenlace character,
    _uuid character,
    _ieps numeric,
    _ivaret numeric,
    _isrret numeric)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255); _ID_Factura int; _mes smallint; _ano smallint;	_errpart int;  _resultpart varchar(255);  _ID_Movimiento int;  _concepto varchar(80); _conceptocost varchar(80); _Ref varchar(25);  _claseref varchar(25); 
	_FijaCost bit; _costven numeric(19,4); _CC_COSTVEN char(19); _AuditarAlm bit;
	_ID_CXC int; _numpol int; _clase varchar(1024); _bancajmov int;
	_nombreCli varchar(120); _Cantidad numeric(19,4); _ServComp bit; _CC_CLI char(19); 
	_CC_IVA char(19); _CC_IVAPN char(19); _CC_IEPS char(19); _CC_IEPSPN char(19); _CC_IVARet char(19); _CC_ISRRet char(19); _ImporteTotalPesos numeric(19,4); 
	_IVAPesos numeric(19,4); _IEPSPesos numeric(19,4); _IVARetPesos numeric(19,4); _ISRRetPesos numeric(19,4); _DescPesos numeric(19,4); _TotalPesos numeric(19,4);  
	_Fija bit; _FijaBAN bit; _CC_Desc char(19); _CC_VENNP char(19); _CC_DCAF char(19); 
	_CC_DCEC char(19); _diff numeric(19,4); _TotDebe numeric(19,4); _TotHaber numeric(19,4); _contPart smallint; 
	_totPart smallint; _CC_VEN char(19); _CC_VENCONT char(19); _DesgloseCLIENT bit;  _Pais character(3); _Pedimento varchar(5);
	 _contban smallint; _totalban smallint; _ID_FormaPago smallint; _ID_BanCaj smallint; _tipoDeposito character(3); _RefPago varchar(50); _IdMon smallint; _RemisionAsociada bit; 
	_id_clasificacion varchar(10); _numPagos smallint; _RefExt int; _ID_CFD int; _TFD smallint;  
	_Beneficiario varchar(80); _RFCOrigen varchar(15); _moneda_ce character(3); /*_CuentaOrigen varchar(80); _BancoOrigen character(3); _CuentaDestino varchar(50); _BancoDestino character(3);*/
	_DocFinal varchar(50); _ID_SatBanco character(3); _RFC varchar(15);	
	--Iteracion
	_REC_TMP_PAGOS RECORD; _REC_TMP_VENTAS_FACTURAS_DET RECORD; _TotalPesosMult numeric(19,4); _ParcialPesosMult numeric(19,4); _BanCaj smallint; _CC_BAN char(19);
BEGIN	
	_err := 0;
	_result := 'La factura se ha registrado satisfactoriamente';
	--_ServComp := '1';
	_CC_IVA := (select valfanumerico from TBL_VARIABLES where ID_Variable = 'CC_IVAPP');
	_CC_IVAPN := (select valfanumerico from TBL_VARIABLES where ID_Variable = 'CC_IVAPPPN');
	_CC_IEPS := (select valfanumerico from TBL_VARIABLES where ID_Variable = 'CC_IEPSV');
	_CC_IEPSPN := (select valfanumerico from TBL_VARIABLES where ID_Variable = 'CC_IEPSVPN');
	_CC_IVARet := (select valfanumerico from TBL_VARIABLES where ID_Variable = 'CC_IVARETV');
	_CC_ISRRet := (select valfanumerico from TBL_VARIABLES where ID_Variable = 'CC_ISRRETV');
	_CC_Desc := (select valfanumerico from TBL_VARIABLES where ID_Variable = 'CC_DSV');
	_moneda_ce := (select id_satmoneda from TBL_CONT_MONEDAS where Clave = _moneda);
	_Cantidad := round((_Total * _TC), 2);
	_ImporteTotalPesos := ROUND((_Importe * _TC), 2);
	_IVAPesos :=  ROUND((_IVA * _TC), 2);
	_IEPSPesos :=  ROUND((_IEPS * _TC), 2);
	_IVARetPesos :=  ROUND((_IVARet * _TC), 2);
	_ISRRetPesos :=  ROUND((_ISRRet * _TC), 2);
	_DescPesos := ROUND((_Descuento * _TC), 2);
	_TotalPesos := ROUND((_Total * _TC), 2);	
	_concepto := 'Venta ' || (select Descripcion from TBL_VENTAS_ENTIDADES where ID_EntidadVenta = _ID_EntidadVenta) || ', numero ' || cast(_Numero as varchar) || 
				(case when _Referencia <> '' then ' y referencia ' || _Referencia || '.' else '.' end);
	_conceptocost := 'Costo ' || (select Descripcion from TBL_VENTAS_ENTIDADES where ID_EntidadVenta = _ID_EntidadVenta) || ', numero ' || cast(_Numero as varchar) || 
				(case when _Referencia <> '' then ' y referencia ' || _Referencia || '.' else '.' end);

	_Beneficiario := case when _ID_Cliente = 0 then 'Al Portador' else ( select VAlfanumerico from TBL_VARIABLES where ID_Variable = 'EMPRESA') end;
  _Pais := case when _ID_Cliente = 0 then 'MEX' else ( select Pais from TBL_CLIENT_CLIENT where ID_Tipo = 'CL' and ID_Clave = _ID_Cliente) end;
  _Pedimento := case when _ID_Cliente = 0 then '--' else ( select Pedimento from TBL_CLIENT_CLIENT where ID_Tipo = 'CL' and ID_Clave = _ID_Cliente) end; 
  _RFCOrigen := case when _ID_Cliente = 0 then 'XAXX010101000' else ( select RFC from TBL_CLIENT_CLIENT where ID_Tipo = 'CL' and ID_Clave = _ID_Cliente) end;
	--_CuentaOrigen := case when _ID_Cliente = 0 then '' else ( select MetodoDePago from TBL_CLIENT_CLIENT where ID_Tipo = 'CL' and ID_Clave = _ID_Cliente) end;
	--_BancoOrigen := case when _ID_Cliente = 0 then '000' else ( select ID_SatBanco from TBL_CLIENT_CLIENT where ID_Tipo = 'CL' and ID_Clave = _ID_Cliente) end;

	_CC_CLI := (select ID_CC from TBL_CLIENT_CLIENT where ID_Tipo = 'CL' and ID_Clave = _ID_Cliente);
	_DesgloseCLIENT := (select DesgloseCLIENT from TBL_VENTAS_ENTIDADES where ID_EntidadVenta = _ID_EntidadVenta);
	_Fija := (select Fija from TBL_VENTAS_ENTIDADES where ID_EntidadVenta = _ID_EntidadVenta);
	_FijaCost := (select FijaCost from TBL_VENTAS_ENTIDADES where ID_EntidadVenta = _ID_EntidadVenta);
	_mes := date_part('month',_Fecha);
	_ano := date_part('year',_Fecha);
	_AuditarAlm := ( select AuditarAlm from TBL_INVSERV_BODEGAS where ID_Bodega = _ID_Bodega );
	_RemisionAsociada := ( case when _ID_Enlace is not null and _TipoEnlace = 'VREM' then '1' else '0' end );
	_CC_DCAF := (select valfanumerico from TBL_VARIABLES where ID_Variable = 'CC_DCAF');
	_CC_DCEC := (select valfanumerico from TBL_VARIABLES where ID_Variable = 'CC_DCEC');
	_id_clasificacion := (select ID_Clasificacion from TBL_VENTAS_ENTIDADES where ID_EntidadVenta = _ID_EntidadVenta);
	_numPagos = (select count(*) from _TMP_PAGOS);

	IF _ID_Enlace is not null
	THEN
		_claseref := _TipoEnlace || '|' || cast(_ID_Enlace as varchar) || '|' || cast(_ID_EntidadVenta as varchar) || '||';
	END IF;
	
	IF(select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano and Cerrado = 1) > 0
	OR (select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano) < 1
	THEN
		_err := 3;
		_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_POLIZAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'ERROR: La fecha de poliza pertenece a un periodo cerrado o inexistente'
	END IF;

	IF _CC_DCAF = '' or _CC_DCEC = ''
	THEN
		_err := 3;
		_result := (select msj2 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'VEN_CXC' and 
			m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'ERROR: Las cuentas de diferencias cambiarias no se han registrado aun';
	END IF;

	IF (select count(*) from TBL_VENTAS_FACTURAS_CAB where ID_Entidad = _ID_EntidadVenta and Numero = _Numero) > 0
	THEN
		_err := 3;
		_result := 'ERROR: La clave de la factura ya existe, No se puede duplicar';
	END IF;

	IF ( select ventero from TBL_VARIABLES where ID_Variable = 'MVCF' ) = 1
	THEN
		IF (select count(*) from TBL_INVSERV_CHFIS_CAB where ID_Bodega = _ID_Bodega and ( Cerrado = '1' or Generado = '1') and Status <> 'C' and Fecha >= _Fecha) > 0
		THEN
			_err := 3;
			_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ALM_CHFIS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR');--'ERROR: No se puede generar el movimiento al almacen porque ya existe un chequeo f?sico cerrado en esta bodega, con fecha posterior a este movimiento';
		END IF;
	END IF;

	IF _Condicion = 0
	THEN
		FOR _REC_TMP_PAGOS IN ( select * from _TMP_PAGOS order by Partida asc ) 
		LOOP
			_ID_FormaPago := _REC_TMP_PAGOS.ID_FormaPago;
			_ID_BanCaj := _REC_TMP_PAGOS.ID_BanCaj;
			_FijaBAN := (case when _ID_FormaPago = 1 then (select Fijo from TBL_BANCOS_CUENTAS where Tipo = 1 and Clave = _ID_BanCaj)
							else (select Fijo from TBL_BANCOS_CUENTAS where Tipo = 0 and Clave = _ID_BanCaj) end);
			_IdMon := (case when _ID_FormaPago = 1 then (select ID_Moneda from TBL_BANCOS_CUENTAS where Tipo = 1 and Clave = _ID_BanCaj)
							else (select ID_Moneda from TBL_BANCOS_CUENTAS where Tipo = 0 and Clave = _ID_BanCaj) end);
			
			IF _Fija <> _FijaBAN
			THEN
				_err := 3;
				_result := 'ERROR: No se puede agregar la venta porque al pagarse de contado requiere que los bancos o cajas manejen los mismos trazos contables que la venta';
				EXIT;
			END IF;

			IF _Moneda <> _IdMon 
			THEN
				_err := 3;
				_result := 'ERROR: No se puede agregar la venta porque al pagarse de contado requiere que los bancos o cajas manejen la misma moneda que la venta';
				EXIT;
			END IF;

			/*IF _ID_Cliente = 0 and _Fija = '0' and _ID_FormaPago > 1
			THEN
				_err := 3;
				_result := 'ERROR: No se puede agregar una venta directa de mostrador pagada de contado con transferencia, porque no existe soporte para contabilidad electr√≥nica, selecciona un cliente o una entidad Fija';
				EXIT;
			END IF;*/
		END LOOP;
	ELSIF _Condicion = 1 -- Es a cr√©dito, por lo tanto revisa si el total de esta factura mas el total de la deuda del cliente rebasa el l√≠mite de cr√©dito, de ser asi, rechazar√° la venta
	THEN
		IF(select Dias from TBL_CLIENT_CLIENT where ID_Tipo = 'CL' and ID_Clave = _ID_Cliente) > 0 -- este cliente tiene cr√©dito
		THEN
			IF (select LimiteCredito from TBL_CLIENT_CLIENT where ID_Tipo = 'CL' and ID_Clave = _ID_Cliente) > 0 AND 
				((_ImporteTotalPesos + getcliprosldtotmn('CL', _ID_Cliente)) > (select LimiteCredito from TBL_CLIENT_CLIENT where ID_Tipo = 'CL' and ID_Clave = _ID_Cliente))
			THEN
				_err := 3;
				_result := 'ERROR: No se puede agregar la factura a cr√©dito porque la suma de las deudas de este cliente, m√°s esta factura, sobrepasa su l√≠mite de cr√©dito';
			END IF;
		ELSE -- no tiene cr√©dito
			_err := 3;
			_result := 'ERROR: No se puede agregar la factura porque al cobrarse a cr√©dito requiere que se le brinde al cliente por lo menos un d√≠a de cr√©dito';
		END IF;	
	END IF;
	
	IF _IVA > 0.0 AND ( _CC_IVA = '' OR _CC_IVAPN = '' )
	THEN
		_err := 3;
		_result := 'ERROR: La cuenta de iva por pagar efectivamente cobrado o la de iva por pagar pendiente de cobrar, no existe o no se ha enlazado';
	END IF;
	IF _IEPS > 0.0 AND ( _CC_IEPS = '' OR _CC_IEPSPN = '' )
	THEN
		_err := 3;
		_result := 'ERROR: La cuenta del IEPS efectivamente cobrado o la de IEPS pendiente de cobrar no existe o no se ha enlazado';
	END IF;
	IF _IVARet > 0.0 AND ( _CC_IVARet = '' )
	THEN
		_err := 3;
		_result := 'ERROR: La cuenta de IVA Retenido no existe o no se ha enlazado';
	END IF;
	IF _ISRRet > 0.0 AND ( _CC_ISRRet = '' )
	THEN
		_err := 3;
		_result := 'ERROR: La cuenta de ISR Retenido no existe o no se ha enlazado';
	END IF;
	IF _Descuento > 0.0 AND _CC_Desc = ''
	THEN
		_err := 3;
		_result := 'ERROR: La cuenta de descuento sobre ventas no existe o no se ha enlazado';
	END IF;
	
	-- procede a realizar verificaci?n sobre los trazos
	IF _FijaCost = '0'
	THEN
		_CC_COSTVEN := (select cc from TBL_INVSERV_COSTOS_CONCEPTOS where ID_Concepto = 50);
		IF _CC_COSTVEN is null
		THEN
			_err := 3;
			_result := 'ERROR: La cuenta para el costo de ventas no existe o no se ha enlazado';	
		END IF;
	END IF;

	IF _Condicion = 0
	THEN
		_CC_VENCONT := (select valfanumerico from TBL_VARIABLES where ID_Variable = 'CC_VENCONT');
		IF _CC_VENCONT = ''
		THEN
			_err := 3;
			_result := 'ERROR: La cuenta para ventas de contado no existe o no se ha enlazado';	
		END IF;
	ELSE
		_CC_VEN := (select valfanumerico from TBL_VARIABLES where ID_Variable = 'CC_VEN');
		IF _CC_VEN = ''
		THEN
			_err := 3;
			_result := 'ERROR: La cuenta para ventas a cr√©dito no existe o no se ha enlazado';	
		END IF;
	END IF;

	IF _Condicion = 3
	THEN
		_CC_VENNP := (select valfanumerico from TBL_VARIABLES where ID_Variable = 'CC_VENNP');
		IF _CC_VENNP = ''
		THEN
			_err := 3;
			_result := 'ERROR: La cuenta para registro de partida doble cuando no se establece ningun metodo de pago, no existe o no se ha enlazado';
		END IF;
	END IF;

	--VERIFICA SI ES CFD
	IF (select CFD from TBL_VENTAS_ENTIDADES where ID_EntidadVenta = _ID_EntidadVenta) <> '00'
	THEN
		IF _uuid <> '' -- Es emisor directo de CFDI, por lo tanto no puede enlazar un CFDI Externo
		THEN
			_err := 3;
			_result := 'ERROR: No se puede enlazar ningun CFDI porque esta entidad de venta genera sus propios CFDIs';
		ELSE
			IF (select count(*) from TBL_CFD_REPORTE_MENSUAL where Mes = _mes and Ano = _ano and Cerrado = '0') > 0
			THEN
				IF (select count(*) from TBL_VENTAS_FACTURAS_CAB where ID_Entidad = _ID_EntidadVenta and Numero = (_Numero -1)) is not null
				THEN
					IF (select TFD from TBL_VENTAS_FACTURAS_CAB where ID_Entidad = _ID_EntidadVenta and Numero = (_Numero -1)) is null
							or (select TFD from TBL_VENTAS_FACTURAS_CAB where ID_Entidad = _ID_EntidadVenta and Numero = (_Numero -1)) <> 3
					THEN 
						_err := 3;
						_result := 'ERROR: No se puede agregar la factura porque la factura anterior no est&aacute; sellada. Primero debes sellar la factura anterior para poder agregar esta factura';
					END IF;
				END IF;
			ELSE
				_err := 3;
				_result := 'ERROR: No se puede agregar la factura porque el mes de comprobantes fiscales digitaya';
			END IF;
		END IF;
	ELSE -- Si no es Emisor directo de CFDI comprueba si es carga con CFDI externo
		IF _uuid <> ''
		THEN
			IF (select count(*) from TBL_CFDVEN where UUID = _uuid) > 0
			THEN
				_ID_CFD := (select ID_CFD from TBL_CFDVEN where UUID = _uuid) ;
				_TFD := 3;
			ELSE
				_err := 3;
				_result := 'ERROR: No se puede enlazar el CFDI al registro, porque no existe el UUID proporcionado';
			END IF;
		END IF;
	END IF;

	IF _err = 0
	THEN
		INSERT INTO TBL_VENTAS_FACTURAS_CAB (  id_entidad, numero, id_clipro, fecha, referencia, status, moneda, tc, fechaenvio, condicion, obs, 
			importe, descuento, subtotal, iva, total, ref, id_pol, id_polcost, id_bodega, mimporte, mdescuento, msubtotal, miva, mtotal, efectivo, bancos, cambio, id_vendedor, id_cfd, tfd, 
			ieps, ivaret, isrret )
		VALUES(_ID_EntidadVenta, _Numero, _ID_Cliente, _Fecha, _Referencia, (case when _RemisionAsociada = '0' then (case when _AuditarAlm = '1' then 'G' else 'E' end) else 'E' end), _Moneda, _TC, _Fecha, _Condicion, _Obs,
				_Importe, _Descuento, _SubTotal, _IVA, _Total, _claseref, null, null, _ID_Bodega, _Importe, _Descuento, _SubTotal, _IVA,  _Total, _FSIPG_Efectivo, _FSIPG_Bancos, _FSIPG_Cambio, _ID_Vendedor, _ID_CFD, _TFD,
				_ieps, _ivaret, _isrret)
		 RETURNING currval(pg_get_serial_sequence('TBL_VENTAS_FACTURAS_CAB', 'id_vc')) INTO _id_factura;
		 
		-- actualiza el numero de FACTURA
		UPDATE TBL_VENTAS_ENTIDADES
		SET Doc = _Numero + 1
		WHERE ID_EntidadVenta = _ID_EntidadVenta;
		
		-- inserta el detalle
		INSERT INTO TBL_VENTAS_FACTURAS_DET
		SELECT _ID_Factura, Partida, Cantidad, ID_Prod, Precio, Descuento, IVA, Obs, Importe, ImporteDesc, ImporteIVA, TotalPart, IEPS, ImporteIEPS, IVARet, ImporteIVARet, ISRRet, ImporteISRRet
		FROM _TMP_VENTAS_FACTURAS_DET;

		_Ref := 'VFAC|' || cast(_ID_Factura as varchar) || '|' || cast(_ID_EntidadVenta as varchar) || '||';

		-- Actualiza el status de la cotizacion, pedido o remision ligando el ID de la FACTURA
		IF _ID_Enlace is not null
		THEN
			IF _TipoEnlace = 'VPED'
			THEN
				UPDATE TBL_VENTAS_PEDIDOS_CAB
				SET Status = 'F', ID_Factura = _ID_Factura, TipoEnlace = 'VFAC'
				WHERE ID_VC = _ID_Enlace;
			ELSIF _TipoEnlace = 'VCOT'
			THEN
				UPDATE TBL_VENTAS_COTIZACIONES_CAB
				SET Status = 'F', ID_Factura = _ID_Factura, TipoEnlace = 'VFAC'
				WHERE ID_VC = _ID_Enlace;
			ELSE
				UPDATE TBL_VENTAS_REMISIONES_CAB
				SET ID_Factura = _ID_Factura
				WHERE ID_VC = _ID_Enlace;
			END IF;
		END IF;

		IF _uuid <> ''
		THEN
			UPDATE TBL_CFDVEN
			SET FSI_Tipo = 'FAC', FSI_ID = _ID_Factura
			WHERE ID_CFD = _ID_CFD;
			
			UPDATE TBL_CFD
			SET FSI_Tipo = 'FAC', FSI_ID = _ID_Factura
			WHERE ID_CFD = _ID_CFD;
		END IF;
		
		--Si no es de mostrador, actualiza los ultimos precios de clientes
		IF _ID_Cliente > 0
		THEN
			FOR _REC_TMP_VENTAS_FACTURAS_DET IN ( select * from _TMP_VENTAS_FACTURAS_DET order by Partida asc ) 
			LOOP
				-- Procede a agregar el ultimo costo del producto o servicio correspondiente al Cliente ( si existe lo actualiza de lo contrario lo inserta )
				if(select count(*) from TBL_VENTAS_VS_INVENTARIO where ID_Tipo = 'CL' and ID_Cliente = _ID_Cliente and ID_Prod = _REC_TMP_VENTAS_FACTURAS_DET.ID_Prod and ID_Moneda = _Moneda) = 0
				then
					insert into TBL_VENTAS_VS_INVENTARIO
					values('CL', _ID_Cliente,  _REC_TMP_VENTAS_FACTURAS_DET.ID_Prod, _Moneda, _Fecha,  _REC_TMP_VENTAS_FACTURAS_DET.Precio,  _REC_TMP_VENTAS_FACTURAS_DET.Descuento);
				else
					update TBL_VENTAS_VS_INVENTARIO
					set Fecha = _Fecha, Precio =  _REC_TMP_VENTAS_FACTURAS_DET.Precio, Descuento =  _REC_TMP_VENTAS_FACTURAS_DET.Descuento
					where ID_Tipo = 'CL' and ID_Cliente = _ID_Cliente and ID_Prod =   _REC_TMP_VENTAS_FACTURAS_DET.ID_Prod and ID_Moneda = _Moneda;
				end if;
			END LOOP; 
		END IF; 

		--Crea tabla temporal indispensable... para contable.
		CREATE LOCAL TEMPORARY TABLE _TMP_CONT_POLIZAS_DETALLE_TMP (
			Part smallint NOT NULL ,
			Cuenta char(19) NOT NULL ,
			Concepto varchar(80) NOT NULL ,
			Parcial numeric(19,4) NOT NULL ,
			Moneda smallint NOT NULL ,
			TC numeric(19,4) NOT NULL ,
			Debe numeric(19,4) NOT NULL ,
			Haber numeric(19,4) NOT NULL
		);
		CREATE LOCAL TEMPORARY TABLE _TMP_CONT_POLIZAS_DETALLE_CE_CHEQUES_TMP( 
			id_part smallint NOT NULL,
			num character varying(20) NOT NULL,
			banco character(3) NOT NULL,
			ctaori character varying(50) NOT NULL,
			fecha timestamp without time zone NOT NULL,
			monto numeric(19,4) NOT NULL,
			benef character varying(300) NOT NULL,
			rfc character varying(13) NOT NULL,
			banemisext character varying(150) NOT NULL,
			moneda character(3) NOT NULL,
			tipcamb numeric(19,5) NOT NULL
		); 
		CREATE LOCAL TEMPORARY TABLE _TMP_CONT_POLIZAS_DETALLE_CE_TRANSFERENCIAS_TMP ( 
			id_part smallint NOT NULL,
			ctaori character varying(50) NOT NULL,
			bancoori character(3) NOT NULL,
			monto numeric(19,4) NOT NULL,
			ctadest character varying(50) NOT NULL,
			bancodest character(3) NOT NULL,
			fecha timestamp without time zone NOT NULL,
			benef character varying(300) NOT NULL,
			rfc character varying(13) NOT NULL,
			bancooriext character varying(150) NOT NULL,
			bancodestext character varying(150) NOT NULL,
			moneda character(3) NOT NULL,
			tipcamb numeric(19,5) NOT NULL
		);
		CREATE LOCAL TEMPORARY TABLE _TMP_CONT_POLIZAS_DETALLE_CE_OTRMETODOPAGO_TMP (
			id_part smallint NOT NULL,
			metpagopol character(2) NOT NULL,
			fecha timestamp without time zone NOT NULL,
			benef character varying(300) NOT NULL,
			rfc character varying(13) NOT NULL,
			monto numeric(19,4) NOT NULL,
			moneda character(3) NOT NULL,
			tipcamb numeric(19,5) NOT NULL
		);
		CREATE LOCAL TEMPORARY TABLE _TMP_CONT_POLIZAS_DETALLE_CE_COMPROBANTES_TMP ( 
			id_part smallint NOT NULL, 
			uuid_cfdi character(36) NOT NULL, 
			monto numeric(19,4) NOT NULL, 
			rfc character varying(13) NOT NULL,
			id_tipo character varying(10) NOT NULL,
			moneda character(3) NOT NULL,
			tipcamb numeric(19,5) NOT NULL,
			cfd_cbb_serie character varying(10) NOT NULL,
			cfd_cbb_numfol integer NOT NULL,
			numfactext character varying(36) NOT NULL,
			taxid character varying(30) NOT NULL
		); 
		-- Agrega a la tabla de temporal para: polizas final o detalles de bancos cajas final
		_contPart := 1;
		IF _Condicion = 0 
		THEN
			INSERT INTO _TMP_CONT_POLIZAS_DETALLE_TMP
			VALUES(_contPart, _CC_VENCONT, 'Importe de la venta', _Importe, _Moneda, _TC, 0.0, _ImporteTotalPesos);
		ELSE
			INSERT INTO _TMP_CONT_POLIZAS_DETALLE_TMP
			VALUES(_contPart, _CC_VEN, 'Importe de la venta', _Importe, _Moneda, _TC, 0.0, _ImporteTotalPesos);
		END IF;

		IF _uuid <> ''
		THEN
			INSERT INTO _TMP_CONT_POLIZAS_DETALLE_CE_COMPROBANTES_TMP
			VALUES(_contPart, _uuid, _Total, _RFCOrigen, 'CompNal', _moneda_ce, _TC, '', 0, '', '');
		END IF;

		-- procede a registrar los otros conceptos de la poliza ( EL IVA , Deuda con Cliente ETC)
		IF _IVA > 0.0
		THEN
			_contPart := _contPart + 1;
			IF _Condicion = 0 -- es de contado, envia todo a iva efectivamente cobrado
			THEN
				INSERT INTO _TMP_CONT_POLIZAS_DETALLE_TMP
				VALUES(_contPart, _CC_IVA, 'Impuesto de la venta', _IVA, _Moneda, _TC, 0.0, _IVAPesos);	
			ELSE -- de credito o sin pago... envia a pendiente de pagar
				INSERT INTO _TMP_CONT_POLIZAS_DETALLE_TMP
				VALUES(_contPart, _CC_IVAPN, 'Impuesto de la venta', _IVA, _Moneda, _TC, 0.0, _IVAPesos);	
			END IF;
		END IF;

		IF _IEPS > 0.0
		THEN
			_contPart := _contPart + 1;
			IF _Condicion = 0 -- es de contado, envia todo a ieps efectivamente cobrado
			THEN
				INSERT INTO _TMP_CONT_POLIZAS_DETALLE_TMP
				VALUES(_contPart, _CC_IEPS, 'Impuesto Especial sobre Producci√≥n y Servicio', _IEPS, _Moneda, _TC, 0.0, _IEPSPesos);	
			ELSE -- de credito o sin pago... envia a pendiente de pagar
				INSERT INTO _TMP_CONT_POLIZAS_DETALLE_TMP
				VALUES(_contPart, _CC_IEPSPN, 'Impuesto Especial sobre Producci√≥n y Servicio', _IEPS, _Moneda, _TC, 0.0, _IEPSPesos);	
			END IF;
		END IF;

		IF _IVARet > 0.0
		THEN
			_contPart := _contPart + 1;
			INSERT INTO _TMP_CONT_POLIZAS_DETALLE_TMP
			VALUES(_contPart, _CC_IVARet, 'Retenci√≥n de IVA', _IVARet, _Moneda, _TC, _IVARetPesos, 0.0);	
		END IF;

		IF _ISRRet > 0.0
		THEN
			_contPart := _contPart + 1;
			INSERT INTO _TMP_CONT_POLIZAS_DETALLE_TMP
			VALUES(_contPart, _CC_ISRRet, 'Retenci√≥n de ISR', _ISRRet, _Moneda, _TC, _ISRRetPesos, 0.0);	
		END IF;

		IF _Descuento > 0.0
		THEN
			_contPart := _contPart + 1;
			INSERT INTO _TMP_CONT_POLIZAS_DETALLE_TMP
			VALUES(_contPart, _CC_Desc, 'Descuento explicito', _Descuento, _Moneda, _TC, _DescPesos, 0.0);
		END IF;
		
		-- procede a registrar los movimiento en la caja, banco, Cuenta por cobrar, y la poliza en caso necesario
		IF _ID_Cliente > 0 and _Condicion = 1 -- si es a credito y no de mostrador
		THEN
			SELECT * INTO _errpart, _resultpart, _id_cxc 
			FROM sp_client_cxc_alta(_ID_EntidadVenta, _Fecha, 'CL', _ID_Cliente, _Concepto, _Moneda, _TC, _Total, _Cantidad, '0', 'VFAC', _ID_Factura, _Ref) as ( err integer, res varchar, clave integer ); --este movimiento no registrara poliza porque el concepto 0 de cxc es de sistema 
			IF _errpart <> 0
			THEN
				_err := 3;
				_result := _resultpart;
			ELSE
				_clase = 'VCXC|' || cast(_ID_CXC as varchar) || '|' || cast(_ID_EntidadVenta as varchar) || '||';

				UPDATE TBL_VENTAS_FACTURAS_CAB
				SET ID_Pol = _ID_CXC
				WHERE ID_VC = _ID_Factura;
				
				-- Procede a registrar la poliza si y solo si es una entidad dinamica
				-- Primero registra la deuda total del cliente para la partida doble en tmp
				_contPart := _contPart + 1;
				INSERT INTO _TMP_CONT_POLIZAS_DETALLE_TMP
				VALUES(_contPart, _CC_CLI, 'Deuda total del Cliente', _Total, _Moneda, _TC, _TotalPesos, 0.0);
					
				IF _Fija = '0'
				THEN
					-- Primero registra y crea la tabla temporal de detalle de la poliza
					CREATE LOCAL TEMPORARY TABLE _TMP_CONT_POLIZAS_DETALLE (
						Part smallint NOT NULL ,
						Cuenta char(19) NOT NULL ,
						Concepto varchar(80) NOT NULL ,
						Parcial numeric(19,4) NOT NULL ,
						Moneda smallint NOT NULL ,
						TC numeric(19,4) NOT NULL ,
						Debe numeric(19,4) NOT NULL ,
						Haber numeric(19,4) NOT NULL
					);
					CREATE LOCAL TEMPORARY TABLE _TMP_CONT_POLIZAS_DETALLE_CE_COMPROBANTES ( 
						id_part smallint NOT NULL, 
						uuid_cfdi character(36) NOT NULL, 
						monto numeric(19,4) NOT NULL, 
						rfc character varying(13) NOT NULL,
						id_tipo character varying(10) NOT NULL,
						moneda character(3) NOT NULL,
						tipcamb numeric(19,5) NOT NULL,
						cfd_cbb_serie character varying(10) NOT NULL,
						cfd_cbb_numfol integer NOT NULL,
						numfactext character varying(36) NOT NULL,
						taxid character varying(30) NOT NULL
 					); 
					-- Fin de la tabla temporal

					-- si existen diferencias de centavos al convertir en moneda nacional los tipos de cambio, los registra
					_TotHaber := (select sum(Haber) from _TMP_CONT_POLIZAS_DETALLE_TMP);
					_TotDebe := (select sum(Debe) from _TMP_CONT_POLIZAS_DETALLE_TMP);
					IF _TotDebe > _TotHaber
					THEN
						_diff := _TotDebe - _TotHaber;
						_contPart := _contPart + 1;
						INSERT INTO _TMP_CONT_POLIZAS_DETALLE_TMP
						VALUES(_contPart, _CC_DCAF, 'Diferencia en decimales', _diff, 1, 1.0, 0.0, _diff);
					ELSIF _TotDebe < _TotHaber
					THEN
						_diff := _TotHaber - _TotDebe;
						_contPart := _contPart + 1;
						INSERT INTO _TMP_CONT_POLIZAS_DETALLE_TMP
						VALUES(_contPart, _CC_DCEC, 'Diferencia en decimales', _diff, 1, 1.0, _diff, 0.0);
					END IF;
					
					-- Inserta desde _TMP_CONT_POLIZAS_DETALLE_TMP
					INSERT INTO _TMP_CONT_POLIZAS_DETALLE
					SELECT * FROM  _TMP_CONT_POLIZAS_DETALLE_TMP;
					INSERT INTO _TMP_CONT_POLIZAS_DETALLE_CE_COMPROBANTES
					SELECT * FROM  _TMP_CONT_POLIZAS_DETALLE_CE_COMPROBANTES_TMP;
	
					-- Agrega ahora la poliza principal
					--EXEC dbo.sp_cont_polizas_agregar_ext 'DR', @Fecha, @concepto, 0, @clase, @errpart OUTPUT, @numpol OUTPUT
					SELECT * INTO _errpart, _resultpart, _numpol 
					FROM sp_cont_polizas_agregar('DR', _Fecha, _Concepto,'0', _clase, _Cantidad, _id_clasificacion ) as ( err integer, res varchar, clave integer );
      					IF _errpart <> 0
					THEN
						_err := _errpart;
						_result := _resultpart;
					ELSE
						UPDATE  TBL_CLIENT_CXC
						SET ID_Pol = _numpol
						WHERE ID_CP = _ID_CXC;
					END IF;

					DROP TABLE _TMP_CONT_POLIZAS_DETALLE;
					DROP TABLE _TMP_CONT_POLIZAS_DETALLE_CE_COMPROBANTES;
				END IF;
			END IF; 
		ELSIF _Condicion = 0 -- es de contado
		THEN
			-- Termina la poliza dividiendo los pagos en sus cuentas de banco o caja
			_TotalPesosMult = 0.0;
			_ParcialPesosMult = 0.0;
			FOR _REC_TMP_PAGOS IN ( select * from _TMP_PAGOS order by Partida asc ) 
			LOOP
				_ParcialPesosMult := round((_REC_TMP_PAGOS.Total * _TC), 2);
				_TotalPesosMult := _TotalPesosMult + _ParcialPesosMult;
				_BanCaj := _REC_TMP_PAGOS.ID_FormaPago; -- 1 cajas 0 bancos
				_CC_BAN := (select CC from TBL_BANCOS_CUENTAS  where Tipo = _BanCaj and Clave = _REC_TMP_PAGOS.ID_BanCaj);
				--_CuentaDestino := (select Descripcion from TBL_BANCOS_CUENTAS  where Tipo = _BanCaj and Clave = _REC_TMP_PAGOS.ID_BanCaj);
				--_BancoDestino := (select ID_SatBanco from TBL_BANCOS_CUENTAS  where Tipo = _BanCaj and Clave = _REC_TMP_PAGOS.ID_BanCaj);
				_contPart := _contPart + 1;
								
				INSERT INTO _TMP_CONT_POLIZAS_DETALLE_TMP
				VALUES(_contPart, _CC_BAN, _REC_TMP_PAGOS.RefPago, _REC_TMP_PAGOS.Total, _Moneda, _TC, _ParcialPesosMult, 0.0);

				--Ingresa contablilidad electronica del pago
				IF _BanCaj = 0 -- Es banco
				THEN
					IF _REC_TMP_PAGOS.ID_SatMetodosPago = '02' -- se trata de un cheque
					THEN
						INSERT INTO _TMP_CONT_POLIZAS_DETALLE_CE_CHEQUES_TMP
						SELECT _contPart, _REC_TMP_PAGOS.Cheque, _REC_TMP_PAGOS.ID_SatBanco, _REC_TMP_PAGOS.CuentaBanco, _Fecha, _REC_TMP_PAGOS.Total, _Beneficiario, _RFCOrigen, _REC_TMP_PAGOS.BancoExt, _moneda_ce, _TC;
					ELSIF _REC_TMP_PAGOS.ID_SatMetodosPago = '03' --Es una transferencia
					THEN
						INSERT INTO _TMP_CONT_POLIZAS_DETALLE_CE_TRANSFERENCIAS_TMP
						SELECT _contPart, _REC_TMP_PAGOS.CuentaBanco, _REC_TMP_PAGOS.ID_SatBanco, _REC_TMP_PAGOS.Total, Descripcion, ID_SatBanco, _Fecha,  _Beneficiario, _RFCOrigen, _REC_TMP_PAGOS.BancoExt, BancoExt, _moneda_ce, _TC
						FROM TBL_BANCOS_CUENTAS 
						WHERE Tipo = _BanCaj and Clave = _REC_TMP_PAGOS.ID_BanCaj;
					ELSE --Es otro metodo de pago (Deposito o Retiro es lo mismo)
						INSERT INTO _TMP_CONT_POLIZAS_DETALLE_CE_OTRMETODOPAGO_TMP
						SELECT _contPart, _REC_TMP_PAGOS.ID_SatMetodosPago, _Fecha, _Beneficiario, _RFCOrigen, _REC_TMP_PAGOS.Total, _moneda_ce, _TC;
					END IF;
				ELSE -- BanCaj = 1 "Caja"
					IF _REC_TMP_PAGOS.ID_SatMetodosPago = '02' -- se trata de un cheque (Deposito o Retiro es lo mismo, toma los datos directos capturados en el dialogo)
					THEN
						INSERT INTO _TMP_CONT_POLIZAS_DETALLE_CE_CHEQUES_TMP
						SELECT _contPart, _REC_TMP_PAGOS.Cheque, _REC_TMP_PAGOS.ID_SatBanco, _REC_TMP_PAGOS.CuentaBanco, _Fecha, _REC_TMP_PAGOS.Total, _Beneficiario, _RFCOrigen, _REC_TMP_PAGOS.BancoExt, _moneda_ce, _TC;
					ELSE --Es otro metodo de pago (Deposito o Retiro es lo mismo)
						INSERT INTO _TMP_CONT_POLIZAS_DETALLE_CE_OTRMETODOPAGO_TMP
						SELECT _contPart, _REC_TMP_PAGOS.ID_SatMetodosPago, _Fecha, _Beneficiario, _RFCOrigen, _REC_TMP_PAGOS.Total, _moneda_ce, _TC;
					END IF;
				END IF;
			END LOOP;

			IF _Fija = '0'
			THEN
				-- Primero registra y crea la tabla temporal de detalle de la poliza
				CREATE LOCAL TEMPORARY TABLE _TMP_CONT_POLIZAS_DETALLE (
					Part smallint NOT NULL ,
					Cuenta char(19) NOT NULL ,
					Concepto varchar(80) NOT NULL ,
					Parcial numeric(19,4) NOT NULL ,
					Moneda smallint NOT NULL ,
					TC numeric(19,4) NOT NULL ,
					Debe numeric(19,4) NOT NULL ,
					Haber numeric(19,4) NOT NULL
				);
				CREATE LOCAL TEMPORARY TABLE _TMP_CONT_POLIZAS_DETALLE_CE_CHEQUES ( 
					id_part smallint NOT NULL,
					num character varying(20) NOT NULL,
					banco character(3) NOT NULL,
					ctaori character varying(50) NOT NULL,
					fecha timestamp without time zone NOT NULL,
					monto numeric(19,4) NOT NULL,
					benef character varying(300) NOT NULL,
					rfc character varying(13) NOT NULL,
					banemisext character varying(150) NOT NULL,
					moneda character(3) NOT NULL,
					tipcamb numeric(19,5) NOT NULL
				); 
				CREATE LOCAL TEMPORARY TABLE _TMP_CONT_POLIZAS_DETALLE_CE_TRANSFERENCIAS ( 
					id_part smallint NOT NULL,
					ctaori character varying(50) NOT NULL,
					bancoori character(3) NOT NULL,
					monto numeric(19,4) NOT NULL,
					ctadest character varying(50) NOT NULL,
					bancodest character(3) NOT NULL,
					fecha timestamp without time zone NOT NULL,
					benef character varying(300) NOT NULL,
					rfc character varying(13) NOT NULL,
					bancooriext character varying(150) NOT NULL,
					bancodestext character varying(150) NOT NULL,
					moneda character(3) NOT NULL,
					tipcamb numeric(19,5) NOT NULL
				);
				CREATE LOCAL TEMPORARY TABLE _TMP_CONT_POLIZAS_DETALLE_CE_OTRMETODOPAGO (
					id_part smallint NOT NULL,
					metpagopol character(2) NOT NULL,
					fecha timestamp without time zone NOT NULL,
					benef character varying(300) NOT NULL,
					rfc character varying(13) NOT NULL,
					monto numeric(19,4) NOT NULL,
					moneda character(3) NOT NULL,
					tipcamb numeric(19,5) NOT NULL
				);
				CREATE LOCAL TEMPORARY TABLE _TMP_CONT_POLIZAS_DETALLE_CE_COMPROBANTES ( 
					id_part smallint NOT NULL, 
					uuid_cfdi character(36) NOT NULL, 
					monto numeric(19,4) NOT NULL, 
					rfc character varying(13) NOT NULL,
					id_tipo character varying(10) NOT NULL,
					moneda character(3) NOT NULL,
					tipcamb numeric(19,5) NOT NULL,
					cfd_cbb_serie character varying(10) NOT NULL,
					cfd_cbb_numfol integer NOT NULL,
					numfactext character varying(36) NOT NULL,
					taxid character varying(30) NOT NULL 
				); 
				-- Fin de la tabla temporal

				-- si existen diferencias de centavos al convertir en moneda nacional los tipos de cambio, los registra
				_TotHaber := (select sum(Haber) from _TMP_CONT_POLIZAS_DETALLE_TMP);
				_TotDebe := (select sum(Debe) from _TMP_CONT_POLIZAS_DETALLE_TMP);
				IF _TotDebe > _TotHaber
				THEN
					_diff := _TotDebe - _TotHaber;
					_contPart := _contPart + 1;
					INSERT INTO _TMP_CONT_POLIZAS_DETALLE_TMP
					VALUES(_contPart, _CC_DCAF, 'Diferencia en decimales', _diff, 1, 1.0, 0.0, _diff);
				ELSIF _TotDebe < _TotHaber
				THEN
					_diff := _TotHaber - _TotDebe;
					_contPart := _contPart + 1;
					INSERT INTO _TMP_CONT_POLIZAS_DETALLE_TMP
					VALUES(_contPart, _CC_DCEC, 'Diferencia en decimales', _diff, 1, 1.0, _diff, 0.0);
				END IF;

				-- Inserta desde _TMP_CONT_POLIZAS_DETALLE_TMP
				INSERT INTO _TMP_CONT_POLIZAS_DETALLE
				SELECT * FROM  _TMP_CONT_POLIZAS_DETALLE_TMP;
				INSERT INTO _TMP_CONT_POLIZAS_DETALLE_CE_CHEQUES
				SELECT * FROM  _TMP_CONT_POLIZAS_DETALLE_CE_CHEQUES_TMP;
				INSERT INTO _TMP_CONT_POLIZAS_DETALLE_CE_TRANSFERENCIAS
				SELECT * FROM  _TMP_CONT_POLIZAS_DETALLE_CE_TRANSFERENCIAS_TMP;
				INSERT INTO _TMP_CONT_POLIZAS_DETALLE_CE_OTRMETODOPAGO
				SELECT * FROM  _TMP_CONT_POLIZAS_DETALLE_CE_OTRMETODOPAGO_TMP;
				INSERT INTO _TMP_CONT_POLIZAS_DETALLE_CE_COMPROBANTES
				SELECT * FROM  _TMP_CONT_POLIZAS_DETALLE_CE_COMPROBANTES_TMP;
	
				-- Agrega ahora la poliza principal
				SELECT * INTO _errpart, _resultpart, _numpol 
				FROM sp_cont_polizas_agregar('IG', _Fecha, _Concepto,'0', '', _TotalPesos, _id_clasificacion ) as ( err integer, res varchar, clave integer );
      				IF _errpart <> 0
				THEN
					_err := _errpart;
					_result := _resultpart;
				END IF;
				
				DROP TABLE _TMP_CONT_POLIZAS_DETALLE;
				DROP TABLE _TMP_CONT_POLIZAS_DETALLE_CE_CHEQUES; 
				DROP TABLE _TMP_CONT_POLIZAS_DETALLE_CE_TRANSFERENCIAS;
				DROP TABLE _TMP_CONT_POLIZAS_DETALLE_CE_OTRMETODOPAGO;
				DROP TABLE _TMP_CONT_POLIZAS_DETALLE_CE_COMPROBANTES;
			END IF;

			--Ahora ejecuta los movimientos de caja y bancos
			_clase := '';
			IF _err = 0
			THEN
				FOR _REC_TMP_PAGOS IN ( select * from _TMP_PAGOS order by Partida asc ) 
				LOOP
					_BanCaj := _REC_TMP_PAGOS.ID_FormaPago; -- 1 cajas 0 bancos

					_Beneficiario := ( select VAlfanumerico from TBL_VARIABLES where ID_Variable = 'EMPRESA');
					_RFC := _RFCOrigen;
					
					SELECT * INTO _errpart, _resultpart, _bancajmov 
					FROM  sp_bancos_movs_agregar( _BanCaj, _REC_TMP_PAGOS.ID_BanCaj, _Fecha, _Concepto, _Beneficiario, _REC_TMP_PAGOS.Total, 0.00, _REC_TMP_PAGOS.TipoMov, 
						'G', _Moneda, _TC, _Ref, _REC_TMP_PAGOS.RefPago, _id_clasificacion, _numpol, _REC_TMP_PAGOS.ID_SatBanco, _RFC, _REC_TMP_PAGOS.ID_SatMetodosPago, 
																		_REC_TMP_PAGOS.BancoExt, _REC_TMP_PAGOS.CuentaBanco, _REC_TMP_PAGOS.Cheque) as ( err integer, res varchar, clave integer);
					IF _errpart <> 0
					THEN
						_err := _errpart;
						_result := _resultpart;
						EXIT;
					END IF;

					INSERT INTO TBL_VENTAS_FACTURAS_PAGOS
					VALUES(_ID_Factura, _bancajmov);
					
					IF _numPagos > 1
					THEN
						IF _BanCaj = 0
						THEN
							_clase := _clase || 'MBAN|' || cast(_bancajmov as varchar) || '|' || cast(_REC_TMP_PAGOS.ID_BanCaj as varchar) || '||;';
						ELSE
							_clase := _clase || 'MCAJ|' || cast(_bancajmov as varchar) || '|' || cast(_REC_TMP_PAGOS.ID_BanCaj as varchar) || '||;';
						END IF;
					ELSE
						IF _BanCaj = 0
						THEN
							_clase := 'MBAN|' || cast(_bancajmov as varchar) || '|' || cast(_REC_TMP_PAGOS.ID_BanCaj as varchar) || '||';
						ELSE
							_clase := 'MCAJ|' || cast(_bancajmov as varchar) || '|' || cast(_REC_TMP_PAGOS.ID_BanCaj as varchar) || '||';
						END IF;
					END IF;
				END LOOP;
			END IF;
			
			IF _Fija = '0' -- Aqui registra la referencia de las polizas de ingreso a sus movimientos de caja o bancos
			THEN
				IF _numPagos > 1
				THEN
					INSERT INTO TBL_REFERENCIAS_EXT
					VALUES(default,_clase)
					RETURNING currval(pg_get_serial_sequence(' TBL_REFERENCIAS_EXT', 'id_ref')) INTO _RefExt;
					UPDATE TBL_CONT_POLIZAS
					SET Ref = 'REXT|' || cast(_RefExt as varchar) || '|||'
					WHERE ID = _numpol;
		 		ELSE
					UPDATE TBL_CONT_POLIZAS
					SET Ref = _clase
					WHERE ID = _numpol;
				END IF;
			END IF; 
		ELSIF _Condicion = 3 -- Es de ningun pago
		THEN
			_clase = 'VFAC|' || cast(_id_factura as varchar) || '|' || cast(_ID_EntidadVenta as varchar) || '||';

			-- Procede a registrar la poliza si y solo si es una entidad dinamica
			-- Primero registra la deuda total en CC_VENNP
			_contPart := _contPart + 1;
			INSERT INTO _TMP_CONT_POLIZAS_DETALLE_TMP
			VALUES(_contPart, _CC_VENNP, 'Documento por cobrar', _Total, _Moneda, _TC, _TotalPesos, 0.0);
					
			IF _Fija = '0'
			THEN
				-- Primero registra y crea la tabla temporal de detalle de la poliza
				CREATE LOCAL TEMPORARY TABLE _TMP_CONT_POLIZAS_DETALLE (
					Part smallint NOT NULL ,
					Cuenta char(19) NOT NULL ,
					Concepto varchar(80) NOT NULL ,
					Parcial numeric(19,4) NOT NULL ,
					Moneda smallint NOT NULL ,
					TC numeric(19,4) NOT NULL ,
					Debe numeric(19,4) NOT NULL ,
					Haber numeric(19,4) NOT NULL
				);
				CREATE LOCAL TEMPORARY TABLE _TMP_CONT_POLIZAS_DETALLE_CE_COMPROBANTES ( 
					id_part smallint NOT NULL, 
					uuid_cfdi character(36) NOT NULL, 
					monto numeric(19,4) NOT NULL, 
					rfc character varying(13) NOT NULL,
					id_tipo character varying(10) NOT NULL,
					moneda character(3) NOT NULL,
					tipcamb numeric(19,5) NOT NULL,
					cfd_cbb_serie character varying(10) NOT NULL,
					cfd_cbb_numfol integer NOT NULL,
					numfactext character varying(36) NOT NULL,
					taxid character varying(30) NOT NULL
 				); 
				-- Fin de la tabla temporal

				-- si existen diferencias de centavos al convertir en moneda nacional los tipos de cambio, los registra
				_TotHaber := (select sum(Haber) from _TMP_CONT_POLIZAS_DETALLE_TMP);
				_TotDebe := (select sum(Debe) from _TMP_CONT_POLIZAS_DETALLE_TMP);
				IF _TotDebe > _TotHaber
				THEN
					_diff := _TotDebe - _TotHaber;
					_contPart := _contPart + 1;
					INSERT INTO _TMP_CONT_POLIZAS_DETALLE_TMP
					VALUES(_contPart, _CC_DCAF, 'Diferencia en decimales', _diff, 1, 1.0, 0.0, _diff);
				ELSIF _TotDebe < _TotHaber
				THEN
					_diff := _TotHaber - _TotDebe;
					_contPart := _contPart + 1;
					INSERT INTO _TMP_CONT_POLIZAS_DETALLE_TMP
					VALUES(_contPart, _CC_DCEC, 'Diferencia en decimales', _diff, 1, 1.0, _diff, 0.0);
				END IF;
					
				-- Inserta desde _TMP_CONT_POLIZAS_DETALLE_TMP
				INSERT INTO _TMP_CONT_POLIZAS_DETALLE
				SELECT * FROM  _TMP_CONT_POLIZAS_DETALLE_TMP;
				INSERT INTO _TMP_CONT_POLIZAS_DETALLE_CE_COMPROBANTES
				SELECT * FROM  _TMP_CONT_POLIZAS_DETALLE_CE_COMPROBANTES_TMP;

				-- Agrega ahora la poliza principal
				--EXEC dbo.sp_cont_polizas_agregar_ext 'DR', @Fecha, @concepto, 0, @clase, @errpart OUTPUT, @numpol OUTPUT
				SELECT * INTO _errpart, _resultpart, _numpol 
				FROM sp_cont_polizas_agregar('DR', _Fecha, _Concepto,'0', _clase, _Cantidad, _id_clasificacion ) as ( err integer, res varchar, clave integer );
      				IF _errpart <> 0
				THEN
					_err := _errpart;
					_result := _resultpart;
				ELSE
					UPDATE TBL_VENTAS_FACTURAS_CAB
					SET ID_Pol = _numpol
					WHERE ID_VC = _ID_Factura;
				END IF;
				
				DROP TABLE _TMP_CONT_POLIZAS_DETALLE;
				DROP TABLE _TMP_CONT_POLIZAS_DETALLE_CE_COMPROBANTES;
				
			END IF;
			
		END IF;
		
		DROP TABLE _TMP_CONT_POLIZAS_DETALLE_TMP;
		DROP TABLE _TMP_CONT_POLIZAS_DETALLE_CE_CHEQUES_TMP; 
		DROP TABLE _TMP_CONT_POLIZAS_DETALLE_CE_TRANSFERENCIAS_TMP;
		DROP TABLE _TMP_CONT_POLIZAS_DETALLE_CE_OTRMETODOPAGO_TMP;
		DROP TABLE _TMP_CONT_POLIZAS_DETALLE_CE_COMPROBANTES_TMP;

		--Procede a agregar el movimiento al almac√©n
		IF _err = 0 AND _FijaCost = '0' AND _RemisionAsociada = '0' and (select count(*) from _TMP_VENTAS_FACTURAS_DET where Tipo = 'P') > 0
		THEN
			CREATE LOCAL TEMPORARY TABLE _TMP_INVSERV_ALMACEN_MOVIM_DET (
				ID_Bodega smallint NOT NULL ,
				ID_Prod varchar(20) NOT NULL ,
				Partida smallint NOT NULL ,
				Cantidad numeric(9, 3) NOT NULL ,
				Costo numeric(19,4) NULL 
			); 

			insert into _TMP_INVSERV_ALMACEN_MOVIM_DET
			select _ID_Bodega, ID_Prod, Partida, Cantidad, Precio --Precio no es el costo, sin embargo lo ignorar√° en la tarjeta de almacen y se calcular√° el costo porque el concepto de venta 50, indica recalcular costo
			from _TMP_VENTAS_FACTURAS_DET
			where Tipo = 'P'
			order by Partida ASC;
		
			SELECT * INTO _errpart, _resultpart, _ID_Movimiento 
			FROM sp_invserv_alm_movs_agregar(_Fecha, _ID_Bodega, (case when _AuditarAlm = '1' then 'P' else 'U' end), '50', _ConceptoCost, '',/*1 ENT 2 SAL*/ '2', _Ref, 'VFAC', _ID_Factura) as ( err integer, res varchar, clave integer );
			IF _errpart <> 0
			THEN
				_err := _errpart;
				_result := _resultpart;
			ELSE
				UPDATE TBL_VENTAS_FACTURAS_CAB
				SET ID_PolCost = _ID_Movimiento
				WHERE ID_VC = _ID_Factura;
			END IF;
	
			DROP TABLE _TMP_INVSERV_ALMACEN_MOVIM_DET; 
		END IF;
		-- Fin del movimiento al almacen
		
    --Procede a agregar la informaci√≥n para comercio exterior en caso de ser importaci√≥n
		IF _err = 0 AND _Moneda <> 1 AND _Pais <> 'MEX' and _Pedimento <> '--'
		THEN
      INSERT INTO TBL_VENTAS_FACTURAS_COMEXT_CAB(id_vc,tipooperacion,clavedepedimento,certificadoorigen,numcertificadoorigen,numeroexportadorconfiable,
        incoterm,subdivision,observaciones,tipocambiousd,totalusd,emisor_curp,receptor_curp,receptor_numregidtrib,destinatario_numregidtrib,destinatario_rfc,
        destinatario_curp,destinatario_nombre,destinatario_domicilio_calle,destinatario_domicilio_numeroexterior,destinatario_domicilio_numerointerior,
        destinatario_domicilio_colonia,destinatario_domicilio_localidad,destinatario_domicilio_referencia,destinatario_domicilio_municipio,
        destinatario_domicilio_estado,destinatario_domicilio_pais,destinatario_domicilio_codigopostal)
      SELECT _ID_Factura, '-', _Pedimento, -1, '', '', 
        '', -1, _Obs, _TC, _Importe, '', '', registro_tributario, registro_tributario, '', 
        '', nombre, direccion, noext, noint, 
        colonia, poblacion, '', municipio,
        estado, pais, cp
      FROM TBL_CLIENT_CLIENT
      WHERE ID_Tipo = 'CL' and ID_Clave = _ID_Cliente;
      
      -- inserta el detalle
      INSERT INTO TBL_VENTAS_FACTURAS_COMEXT_DET(id_vc,partida,noidentificacion,fraccionarancelaria,cantidadaduana,unidadaduana,valorunitarioaduana,valordolares) 
      SELECT _ID_Factura, det.Partida, det.ID_Prod, '', det.Cantidad, (select coalesce(id_satunidad,99) from tbl_invserv_unidades where id_unidad = i.id_unidadsalida), round(det.Precio - det.Descuento,2), round(det.Importe - det.ImporteDesc,2)
      FROM _TMP_VENTAS_FACTURAS_DET det INNER JOIN TBL_INVSERV_INVENTARIOS i 
        ON det.ID_Prod = i.ID_Prod
      WHERE det.Tipo = 'P';
        
      -- inserta el detalle
      INSERT INTO TBL_VENTAS_FACTURAS_COMEXT_DET_DESCESP(id_vc,partida,descripcion,marca,modelo,submodelo,numeroserie)
      SELECT _ID_Factura, Partida, 1, '', '', '', ''
      FROM _TMP_VENTAS_FACTURAS_DET
      WHERE Tipo = 'P';
		END IF;
		--Fin de comercio exterior
	END IF; 
	
	RETURN QUERY SELECT _err, _result, _id_factura;
END
$BODY$
  LANGUAGE plpgsql;
--ALTER FUNCTION sp_ventas_facturas_agregar(smallint, integer, integer, timestamp without time zone, character varying, smallint, numeric, 

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_ventas_facturas_comext(
    _id_vc integer,
    _tipooperacion character,
    _certificadoorigen smallint,
    _numcertificadoorigen character varying,
    _numeroexportadorconfiable character varying,
    _incoterm character varying,
    _subdivision smallint,
    _observaciones character varying,
    _tipocambiousd numeric,
    _totalusd numeric,
    _emisor_curp character varying,
    _receptor_curp character varying,
    _receptor_numregidtrib character varying,
    _destinatario_numregidtrib character varying,
    _destinatario_rfc character varying,
    _destinatario_curp character varying,
    _destinatario_nombre character varying,
    _destinatario_domicilio_calle character varying,
    _destinatario_domicilio_numeroexterior character varying,
    _destinatario_domicilio_numerointerior character varying,
    _destinatario_domicilio_colonia character varying,
    _destinatario_domicilio_localidad character varying,
    _destinatario_domicilio_referencia character varying,
    _destinatario_domicilio_municipio character varying,
    _destinatario_domicilio_estado character varying,
    _destinatario_domicilio_pais character,
    _destinatario_domicilio_codigopostal character varying)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255); _Fecha timestamp; _Mes smallint; _Ano smallint;
BEGIN
	_err := 0;
	_result := 'El complemento de exportaci√≥n para esta factura se actualiz√≥ con √©xito';

  _Fecha := (select Fecha from tbl_ventas_facturas_cab where id_vc = _id_vc);
  _Mes := date_part('month',_Fecha);
	_Ano := date_part('year',_Fecha);
	
	IF(select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano and Cerrado = 1) > 0
	OR (select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano) < 1
	THEN
		_err := 3;
		_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_POLIZAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'ERROR: La fecha de poliza pertenece a un periodo cerrado o inexistente'
	END IF;

  IF _err = 0
	THEN
    delete from tbl_ventas_facturas_comext_det_descesp
    where id_vc = _id_vc;

    delete from tbl_ventas_facturas_comext_det
    where id_vc = _id_vc;

    update tbl_ventas_facturas_comext_cab
    set tipooperacion = _tipooperacion,
        certificadoorigen = _certificadoorigen,
        numcertificadoorigen = _numcertificadoorigen,
        numeroexportadorconfiable = _numeroexportadorconfiable,
        incoterm = _incoterm,
        subdivision = _subdivision,
        observaciones = _observaciones,
        tipocambiousd = _tipocambiousd,
        totalusd = _totalusd,
        emisor_curp = _emisor_curp,
        receptor_curp = _receptor_curp,
        receptor_numregidtrib = _receptor_numregidtrib,
        destinatario_numregidtrib = _destinatario_numregidtrib,
        destinatario_rfc = _destinatario_rfc,
        destinatario_curp = _destinatario_curp,
        destinatario_nombre = _destinatario_nombre,
        destinatario_domicilio_calle = _destinatario_domicilio_calle,
        destinatario_domicilio_numeroexterior = _destinatario_domicilio_numeroexterior,
        destinatario_domicilio_numerointerior = _destinatario_domicilio_numerointerior,
        destinatario_domicilio_colonia = _destinatario_domicilio_colonia,
        destinatario_domicilio_localidad = _destinatario_domicilio_localidad,
        destinatario_domicilio_referencia = _destinatario_domicilio_referencia,
        destinatario_domicilio_municipio = _destinatario_domicilio_municipio,
        destinatario_domicilio_estado = _destinatario_domicilio_estado,
        destinatario_domicilio_pais = _destinatario_domicilio_pais,
        destinatario_domicilio_codigopostal = _destinatario_domicilio_codigopostal
    where id_vc = _id_vc;

    insert into tbl_ventas_facturas_comext_det(id_vc,partida,noidentificacion,fraccionarancelaria,cantidadaduana,unidadaduana,valorunitarioaduana,valordolares) 
    select _id_vc, partida, noidentificacion, fraccionarancelaria, cantidadaduana, unidadaduana, valorunitarioaduana, valordolares
    from _tmp_ventas_facturas_comext_det;

    insert into tbl_ventas_facturas_comext_det_descesp(id_vc,partida,descripcion,marca,modelo,submodelo,numeroserie)
    select _id_vc, partida, descripcion, marca, modelo, submodelo, numeroserie
    from _tmp_ventas_facturas_comext_det_descesp;

  END IF;
  
  RETURN QUERY SELECT _err, _result, _id_vc;
  
END
$BODY$
  LANGUAGE plpgsql;
--ALTER FUNCTION sp_ventas_facturas_comext(integer, character, smallint, character varying, character varying, character varying, smallint,


--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_ventas_cotizaciones_cab AS 
 SELECT rc.id_vc AS id_factura, rc.id_bodega, b.nombre, rc.id_clipro AS id_cliente, 
        CASE
            WHEN rc.id_clipro = 0 THEN 0
            ELSE ( SELECT p.id_numero
               FROM tbl_client_client p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'CL'::bpchar)
        END AS numero, rc.fechaenvio, rc.condicion, rc.obs, mon.moneda, rc.mimporte AS importe, rc.mdescuento AS descuento, rc.msubtotal AS subtotal, rc.miva AS iva, rc.ieps, rc.ivaret, rc.isrret, rc.mtotal AS total, 
        CASE
            WHEN rc.id_clipro = 0 THEN ''::character varying
            ELSE ( SELECT p.direccion
               FROM tbl_client_client p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'CL'::bpchar)
        END AS direccion, 
        CASE
            WHEN rc.id_clipro = 0 THEN ''::character varying
            ELSE ( SELECT p.cp
               FROM tbl_client_client p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'CL'::bpchar)
        END AS cp, 
        CASE
            WHEN rc.id_clipro = 0 THEN ''::character varying
            ELSE ( SELECT p.tel
               FROM tbl_client_client p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'CL'::bpchar)
        END AS tel, 
        CASE
            WHEN rc.id_clipro = 0 THEN ''::character varying
            ELSE ( SELECT p.poblacion
               FROM tbl_client_client p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'CL'::bpchar)
        END AS poblacion, 
        CASE
            WHEN rc.id_clipro = 0 THEN ''::character varying
            ELSE ( SELECT p.colonia
               FROM tbl_client_client p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'CL'::bpchar)
        END AS colonia, 
        CASE
            WHEN rc.id_clipro = 0 THEN 'XAXX010101000'::character varying
            ELSE ( SELECT p.rfc
               FROM tbl_client_client p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'CL'::bpchar)
        END AS rfc
   FROM tbl_ventas_cotizaciones_cab rc
   JOIN tbl_invserv_bodegas b ON rc.id_bodega = b.id_bodega
   JOIN tbl_cont_monedas mon ON rc.moneda = mon.clave;



--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_ventas_devoluciones_cab AS 
 SELECT rc.id_vc AS id_factura, rc.id_bodega, b.nombre, rc.id_clipro AS id_cliente, 
        CASE
            WHEN rc.id_clipro = 0 THEN 0
            ELSE ( SELECT p.id_numero
               FROM tbl_client_client p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'CL'::bpchar)
        END AS numero, rc.fechaenvio, rc.condicion, rc.obs, mon.moneda, rc.mimporte AS importe, rc.mdescuento AS descuento, rc.msubtotal AS subtotal, rc.miva AS iva, rc.ieps, rc.ivaret, rc.isrret, rc.mtotal AS total, 
        CASE
            WHEN rc.id_clipro = 0 THEN ''::character varying
            ELSE ( SELECT p.direccion
               FROM tbl_client_client p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'CL'::bpchar)
        END AS direccion, 
        CASE
            WHEN rc.id_clipro = 0 THEN ''::character varying
            ELSE ( SELECT p.cp
               FROM tbl_client_client p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'CL'::bpchar)
        END AS cp, 
        CASE
            WHEN rc.id_clipro = 0 THEN ''::character varying
            ELSE ( SELECT p.tel
               FROM tbl_client_client p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'CL'::bpchar)
        END AS tel, 
        CASE
            WHEN rc.id_clipro = 0 THEN ''::character varying
            ELSE ( SELECT p.poblacion
               FROM tbl_client_client p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'CL'::bpchar)
        END AS poblacion, 
        CASE
            WHEN rc.id_clipro = 0 THEN ''::character varying
            ELSE ( SELECT p.colonia
               FROM tbl_client_client p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'CL'::bpchar)
        END AS colonia, 
        CASE
            WHEN rc.id_clipro = 0 THEN 'XAXX010101000'::character varying
            ELSE ( SELECT p.rfc
               FROM tbl_client_client p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'CL'::bpchar)
        END AS rfc
   FROM tbl_ventas_devoluciones_cab rc
   JOIN tbl_invserv_bodegas b ON rc.id_bodega = b.id_bodega
   JOIN tbl_cont_monedas mon ON rc.moneda = mon.clave;


--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_ventas_facturas_cab AS 
 SELECT rc.id_vc AS id_factura, rc.id_bodega, b.nombre, rc.id_clipro AS id_cliente, 
        CASE
            WHEN rc.id_clipro = 0 THEN 0
            ELSE ( SELECT p.id_numero
               FROM tbl_client_client p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'CL'::bpchar)
        END AS numero, rc.fechaenvio, rc.condicion, rc.obs, mon.moneda, rc.mimporte AS importe, rc.mdescuento AS descuento, rc.msubtotal AS subtotal, rc.miva AS iva, rc.ieps, rc.ivaret, rc.isrret, rc.mtotal AS total, 
        CASE
            WHEN rc.id_clipro = 0 THEN ''::character varying
            ELSE ( SELECT p.direccion
               FROM tbl_client_client p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'CL'::bpchar)
        END AS direccion, 
        CASE
            WHEN rc.id_clipro = 0 THEN ''::character varying
            ELSE ( SELECT p.cp
               FROM tbl_client_client p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'CL'::bpchar)
        END AS cp, 
        CASE
            WHEN rc.id_clipro = 0 THEN ''::character varying
            ELSE ( SELECT p.tel
               FROM tbl_client_client p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'CL'::bpchar)
        END AS tel, 
        CASE
            WHEN rc.id_clipro = 0 THEN ''::character varying
            ELSE ( SELECT p.poblacion
               FROM tbl_client_client p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'CL'::bpchar)
        END AS poblacion, 
        CASE
            WHEN rc.id_clipro = 0 THEN ''::character varying
            ELSE ( SELECT p.colonia
               FROM tbl_client_client p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'CL'::bpchar)
        END AS colonia, 
        CASE
            WHEN rc.id_clipro = 0 THEN 'XAXX010101000'::character varying
            ELSE ( SELECT p.rfc
               FROM tbl_client_client p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'CL'::bpchar)
        END AS rfc
   FROM tbl_ventas_facturas_cab rc
   JOIN tbl_invserv_bodegas b ON rc.id_bodega = b.id_bodega
   JOIN tbl_cont_monedas mon ON rc.moneda = mon.clave;


--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_ventas_pedidos_cab AS 
 SELECT rc.id_vc AS id_factura, rc.id_bodega, b.nombre, rc.id_clipro AS id_cliente, 
        CASE
            WHEN rc.id_clipro = 0 THEN 0
            ELSE ( SELECT p.id_numero
               FROM tbl_client_client p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'CL'::bpchar)
        END AS numero, rc.fechaenvio, rc.condicion, rc.obs, mon.moneda, rc.mimporte AS importe, rc.mdescuento AS descuento, rc.msubtotal AS subtotal, rc.miva AS iva, rc.ieps, rc.ivaret, rc.isrret, rc.mtotal AS total, 
        CASE
            WHEN rc.id_clipro = 0 THEN ''::character varying
            ELSE ( SELECT p.direccion
               FROM tbl_client_client p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'CL'::bpchar)
        END AS direccion, 
        CASE
            WHEN rc.id_clipro = 0 THEN ''::character varying
            ELSE ( SELECT p.cp
               FROM tbl_client_client p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'CL'::bpchar)
        END AS cp, 
        CASE
            WHEN rc.id_clipro = 0 THEN ''::character varying
            ELSE ( SELECT p.tel
               FROM tbl_client_client p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'CL'::bpchar)
        END AS tel, 
        CASE
            WHEN rc.id_clipro = 0 THEN ''::character varying
            ELSE ( SELECT p.poblacion
               FROM tbl_client_client p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'CL'::bpchar)
        END AS poblacion, 
        CASE
            WHEN rc.id_clipro = 0 THEN ''::character varying
            ELSE ( SELECT p.colonia
               FROM tbl_client_client p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'CL'::bpchar)
        END AS colonia, 
        CASE
            WHEN rc.id_clipro = 0 THEN 'XAXX010101000'::character varying
            ELSE ( SELECT p.rfc
               FROM tbl_client_client p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'CL'::bpchar)
        END AS rfc
   FROM tbl_ventas_pedidos_cab rc
   JOIN tbl_invserv_bodegas b ON rc.id_bodega = b.id_bodega
   JOIN tbl_cont_monedas mon ON rc.moneda = mon.clave;


--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_ventas_remisiones_cab AS 
 SELECT rc.id_vc AS id_factura, rc.id_bodega, b.nombre, rc.id_clipro AS id_cliente, 
        CASE
            WHEN rc.id_clipro = 0 THEN 0
            ELSE ( SELECT p.id_numero
               FROM tbl_client_client p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'CL'::bpchar)
        END AS numero, rc.fechaenvio, rc.condicion, rc.obs, mon.moneda, rc.mimporte AS importe, rc.mdescuento AS descuento, rc.msubtotal AS subtotal, rc.miva AS iva, rc.ieps, rc.ivaret, rc.isrret, rc.mtotal AS total, 
        CASE
            WHEN rc.id_clipro = 0 THEN ''::character varying
            ELSE ( SELECT p.direccion
               FROM tbl_client_client p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'CL'::bpchar)
        END AS direccion, 
        CASE
            WHEN rc.id_clipro = 0 THEN ''::character varying
            ELSE ( SELECT p.cp
               FROM tbl_client_client p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'CL'::bpchar)
        END AS cp, 
        CASE
            WHEN rc.id_clipro = 0 THEN ''::character varying
            ELSE ( SELECT p.tel
               FROM tbl_client_client p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'CL'::bpchar)
        END AS tel, 
        CASE
            WHEN rc.id_clipro = 0 THEN ''::character varying
            ELSE ( SELECT p.poblacion
               FROM tbl_client_client p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'CL'::bpchar)
        END AS poblacion, 
        CASE
            WHEN rc.id_clipro = 0 THEN ''::character varying
            ELSE ( SELECT p.colonia
               FROM tbl_client_client p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'CL'::bpchar)
        END AS colonia, 
        CASE
            WHEN rc.id_clipro = 0 THEN 'XAXX010101000'::character varying
            ELSE ( SELECT p.rfc
               FROM tbl_client_client p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'CL'::bpchar)
        END AS rfc
   FROM tbl_ventas_remisiones_cab rc
   JOIN tbl_invserv_bodegas b ON rc.id_bodega = b.id_bodega
   JOIN tbl_cont_monedas mon ON rc.moneda = mon.clave;


--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_ventas_cotizaciones_det AS 
 SELECT rd.id_vc AS id_factura, rd.partida, rd.cantidad, rd.id_prod, c.descripcion, 
        CASE
            WHEN c.id_tipo = 'S'::bpchar THEN 'SRV'::character varying
            ELSE c.id_unidadsalida
        END AS id_unidadsalida, rd.precio, rd.descuento, rd.iva, rd.ieps, rd.ivaret, rd.isrret, rd.obs, rd.importe, rd.importedesc, rd.importeiva, rd.importeieps, rd.importeivaret, rd.importeisrret, rd.totalpart, c.id_tipo
   FROM tbl_ventas_cotizaciones_det rd
   JOIN tbl_invserv_inventarios c ON rd.id_prod::text = c.id_prod::text;

--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_ventas_devoluciones_det AS 
 SELECT rd.id_vc AS id_factura, rd.partida, rd.cantidad, rd.id_prod, c.descripcion, 
        CASE
            WHEN c.id_tipo = 'S'::bpchar THEN 'SRV'::character varying
            ELSE c.id_unidadsalida
        END AS id_unidadsalida, rd.precio, rd.descuento, rd.iva, rd.ieps, rd.ivaret, rd.isrret, rd.obs, rd.importe, rd.importedesc, rd.importeiva, rd.importeieps, rd.importeivaret, rd.importeisrret, rd.totalpart, c.id_tipo
   FROM tbl_ventas_devoluciones_det rd
   JOIN tbl_invserv_inventarios c ON rd.id_prod::text = c.id_prod::text;


--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_ventas_facturas_det AS 
 SELECT rd.id_vc AS id_factura, rd.partida, rd.cantidad, rd.id_prod, c.descripcion, 
        CASE
            WHEN c.id_tipo = 'S'::bpchar THEN 'SRV'::character varying
            ELSE c.id_unidadsalida
        END AS id_unidadsalida, rd.precio, rd.descuento, rd.iva, rd.ieps, rd.ivaret, rd.isrret, rd.obs, rd.importe, rd.importedesc, rd.importeiva, rd.importeieps, rd.importeivaret, rd.importeisrret, rd.totalpart, c.id_tipo
   FROM tbl_ventas_facturas_det rd
   JOIN tbl_invserv_inventarios c ON rd.id_prod::text = c.id_prod::text;



--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_ventas_pedidos_det AS 
 SELECT rd.id_vc AS id_factura, rd.partida, rd.cantidad, rd.id_prod, c.descripcion, 
        CASE
            WHEN c.id_tipo = 'S'::bpchar THEN 'SRV'::character varying
            ELSE c.id_unidadsalida
        END AS id_unidadsalida, rd.precio, rd.descuento, rd.iva, rd.ieps, rd.ivaret, rd.isrret, rd.obs, rd.importe, rd.importedesc, rd.importeiva, rd.importeieps, rd.importeivaret, rd.importeisrret, rd.totalpart, c.id_tipo
   FROM tbl_ventas_pedidos_det rd
   JOIN tbl_invserv_inventarios c ON rd.id_prod::text = c.id_prod::text;



--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_ventas_remisiones_det AS 
 SELECT rd.id_vc AS id_factura, rd.partida, rd.cantidad, rd.id_prod, c.descripcion, 
        CASE
            WHEN c.id_tipo = 'S'::bpchar THEN 'SRV'::character varying
            ELSE c.id_unidadsalida
        END AS id_unidadsalida, rd.precio, rd.descuento, rd.iva, rd.ieps, rd.ivaret, rd.isrret, rd.obs, rd.importe, rd.importedesc, rd.importeiva, rd.importeieps, rd.importeivaret, rd.importeisrret, rd.totalpart, c.id_tipo
   FROM tbl_ventas_remisiones_det rd
   JOIN tbl_invserv_inventarios c ON rd.id_prod::text = c.id_prod::text;

  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_ventas_cotizaciones_cambiar(_id_entidadventa smallint, _id_cotizacion integer, _id_cliente integer, _fecha timestamp without time zone, _referencia character varying, _moneda smallint, _tc numeric, _condicion smallint, _obs character varying, _importe numeric, _descuento numeric, _subtotal numeric, _iva numeric, _total numeric, _fsipg_efectivo numeric, _fsipg_bancos numeric, _fsipg_cambio numeric, _id_bodega smallint, _id_enlace integer, _id_vendedor smallint, _tipoenlace character, _uuid character, _ieps numeric, _ivaret numeric, _isrret numeric)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255); _mes smallint; _ano smallint;
BEGIN	
	_err := 0;
	_result := 'La cotizaci&oacute;n se cambi√≥ satisfactoriamente';

	_mes := date_part('month',_Fecha);
	_ano := date_part('year',_Fecha);
	
	IF(select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano and Cerrado = 1) > 0
	OR (select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano) < 1
	THEN
		_err := 3;
		_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_POLIZAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'ERROR: La fecha de poliza pertenece a un periodo cerrado o inexistente'
	END IF;
	
	IF (select count(*) from TBL_VENTAS_COTIZACIONES_CAB where ID_VC = _ID_Cotizacion) < 1
	THEN
		_err := 3;
		_result := 'ERROR: La clave de la cotizaci&oacute;n NO existe, No se puede cambiar';
	END IF;

	IF _err = 0
	THEN
		DELETE FROM TBL_VENTAS_COTIZACIONES_DET
		WHERE ID_VC = _ID_Cotizacion;
		
		UPDATE TBL_VENTAS_COTIZACIONES_CAB
		SET ID_CliPro = _ID_Cliente, Fecha = _Fecha, Referencia = _Referencia, Moneda = _Moneda, TC = _TC, FechaEnvio = _Fecha, Condicion = _Condicion, Obs = _Obs,
				Importe = _Importe, Descuento = _Descuento, SubTotal = _SubTotal, IVA = _IVA, Total = _Total, ID_Bodega = _ID_Bodega, MImporte = _Importe, MDescuento = _Descuento, MSubTotal = _SubTotal, MIVA = _IVA, MTotal = _Total, 
				ID_Vendedor = _ID_Vendedor, IEPS = _IEPS, IVARet = _IVARet, ISRRet = _ISRRet
		WHERE ID_VC = _ID_Cotizacion;
			
		-- inserta el detalle
		INSERT INTO TBL_VENTAS_COTIZACIONES_DET
		SELECT _ID_Cotizacion, Partida, Cantidad, ID_Prod, Precio, Descuento, IVA, Obs, Importe, ImporteDesc, ImporteIVA, TotalPart, IEPS, ImporteIEPS, IVARet, ImporteIVARet, ISRRet, ImporteISRRet
		FROM _TMP_VENTAS_FACTURAS_DET;
				
	END IF; -- fin de la cotizacion	

	RETURN QUERY SELECT _err, _result, _id_cotizacion;

END
$BODY$
  LANGUAGE plpgsql;
  
  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_ventas_pedidos_cambiar(_id_entidadventa smallint, _id_pedido integer, _id_cliente integer, _fecha timestamp without time zone, _referencia character varying, _moneda smallint, _tc numeric, _condicion smallint, _obs character varying, _importe numeric, _descuento numeric, _subtotal numeric, _iva numeric, _total numeric, _fsipg_efectivo numeric, _fsipg_bancos numeric, _fsipg_cambio numeric, _id_bodega smallint, _id_enlace integer, _id_vendedor smallint, _tipoenlace character, _uuid character, _ieps numeric, _ivaret numeric, _isrret numeric)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255); _mes smallint; _ano smallint;
BEGIN	
	_err := 0;
	_result := 'El Pedido se ha cambiado satisfactoriamente';

	_mes := date_part('month',_Fecha);
	_ano := date_part('year',_Fecha);
	
	IF(select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano and Cerrado = 1) > 0
	OR (select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano) < 1
	THEN
		_err := 3;
		_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_POLIZAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'ERROR: La fecha de poliza pertenece a un periodo cerrado o inexistente'
	END IF;
	
	IF (select count(*) from TBL_VENTAS_PEDIDOS_CAB where ID_VC = _ID_Pedido) < 1
	THEN
		_err := 3;
		_result := 'ERROR: La clave del pedido No existe, No se puede cambiar';
	END IF;

	IF _err = 0
	THEN
		DELETE FROM TBL_VENTAS_PEDIDOS_DET
		WHERE ID_VC = _ID_Pedido;
		
		UPDATE TBL_VENTAS_PEDIDOS_CAB
		SET ID_CliPro = _ID_Cliente, Fecha = _Fecha, Referencia = _Referencia, Moneda = _Moneda, TC = _TC, FechaEnvio = _Fecha, Condicion = _Condicion, Obs = _Obs,
				Importe = _Importe, Descuento = _Descuento, SubTotal = _SubTotal, IVA = _IVA, Total = _Total, ID_Bodega = _ID_Bodega, MImporte = _Importe, MDescuento = _Descuento, MSubTotal = _SubTotal, MIVA = _IVA, MTotal = _Total, 
				ID_Vendedor = _ID_Vendedor, IEPS = _IEPS, IVARet = _IVARet, ISRRet = _ISRRet
		WHERE ID_VC = _ID_Pedido;	
				
		-- inserta el detalle
		INSERT INTO TBL_VENTAS_PEDIDOS_DET
		SELECT _ID_Pedido, Partida, Cantidad, ID_Prod, Precio, Descuento, IVA, Obs, Importe, ImporteDesc, ImporteIVA, TotalPart, IEPS, ImporteIEPS, IVARet, ImporteIVARet, ISRRet, ImporteISRRet
		FROM _TMP_VENTAS_FACTURAS_DET;

	END IF; -- findel pedido	

	RETURN QUERY SELECT _err, _result, _id_pedido;

END
$BODY$
  LANGUAGE plpgsql;
  


--@FIN_BLOQUE
CREATE TABLE tbl_ventas_devoluciones_pagos
(
  id_devolucion integer NOT NULL,
  id_mov integer NOT NULL,
  CONSTRAINT pk_tbl_ventas_devoluciones_pagos PRIMARY KEY (id_devolucion , id_mov ),
  CONSTRAINT fk_tbl_devoluciones_facturas_pagos_tbl_bancos_movimientos FOREIGN KEY (id_mov)
      REFERENCES tbl_bancos_movimientos (id) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_tbl_ventas_devoluciones_pagos_tbl_ventas_devoluciones_cab FOREIGN KEY (id_devolucion)
      REFERENCES tbl_ventas_devoluciones_cab (id_vc) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE
);

  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_ventas_devoluciones_agregar(
    _id_entidadventa smallint,
    _numero integer,
    _id_cliente integer,
    _fecha timestamp without time zone,
    _referencia character varying,
    _moneda smallint,
    _tc numeric,
    _condicion smallint,
    _obs character varying,
    _importe numeric,
    _descuento numeric,
    _subtotal numeric,
    _iva numeric,
    _total numeric,
    _fsipg_efectivo numeric,
    _fsipg_bancos numeric,
    _fsipg_cambio numeric,
    _id_bodega smallint,
    _id_factura integer,
    _id_vendedor smallint,
    _fsipg_id_concepto smallint,
    _fsipg_desc_concepto character varying,
    _devreb character,
    _ieps numeric,
    _ivaret numeric,
    _isrret numeric)
  RETURNS SETOF record AS
$BODY$ 
DECLARE 
	_err int; _result varchar(255); _ID_Devolucion int; _mes smallint; _ano smallint; _errpart int;  _resultpart varchar(255); _ID_Movimiento int; _concepto varchar(80); _conceptocost varchar(80); _conceptoDescuento varchar(80); _Ref varchar(25); _claseref varchar(25);  
	_FijaCost bit; _costven numeric(19,4); _CC_COSTVEN char(19); _AuditarAlm bit; 
	_ID_CXC int; _ID_CXCSALDO int; _numpol int; _clase varchar(1024); _bancajmov int;
	_tipoRetiro varchar(10); _Cantidad numeric(19,4);/* _ServComp bit; */_CC_CLI char(19); 
	_CC_IVA char(19); _CC_IVAPN char(19); _CC_IEPS char(19); _CC_IEPSPN char(19); _CC_IVARet char(19); _CC_ISRRet char(19); _ImporteTotalPesos numeric(19,4); 
	_IVAPesos numeric(19,4); _IEPSPesos numeric(19,4); _IVARetPesos numeric(19,4); _ISRRetPesos numeric(19,4); _DescPesos numeric(19,4); _TotalPesos numeric(19,4);  
	_Fija bit; _FijaBAN bit; _CC_Desc char(19); _CC_VENNP char(19); _CC_DCAF char(19);
	_CC_DCEC char(19); _diff numeric(19,4); _TotDebe numeric(19,4); _TotHaber numeric(19,4); _contPart smallint; 
	/*_totPart smallint; */_CC_DEVREB char(19); _DesgloseCLIENT bit;
	_contban smallint; _totalban smallint; _ID_FormaPago smallint; _ID_BanCaj smallint; _RefPago varchar(25); _banCHQ varchar(20); _IdMon smallint; /*_RemisionAsociada bit;*/ 
	_id_clasificacion varchar(10); _numPagos smallint; _RefExt int;
	--contabilidad electronica
	_RFCBeneficiario varchar(15); _Beneficiario varchar(80); _moneda_ce character(3); /*_CuentaBeneficiario varchar(80); _BancoBeneficiario character(3); _CuentaOrigen varchar(50); _BancoOrigen character(3); */
	--Iteracion
	_REC_TMP_PAGOS RECORD; _REC_TMP_VENTAS_FACTURAS_DET RECORD; _TotalPesosMult numeric(19,4); _ParcialPesosMult numeric(19,4); _BanCaj smallint; _CC_BAN char(19);
BEGIN	
	_err := 0;
	_result := 'La devolucion se ha registrado satisfactoriamente';
	--_ServComp := '1';
	_CC_IVA := (select valfanumerico from TBL_VARIABLES where ID_Variable = 'CC_IVAPP');
	_CC_IVAPN := (select valfanumerico from TBL_VARIABLES where ID_Variable = 'CC_IVAPPPN');
	_CC_IEPS := (select valfanumerico from TBL_VARIABLES where ID_Variable = 'CC_IEPSV');
	_CC_IEPSPN := (select valfanumerico from TBL_VARIABLES where ID_Variable = 'CC_IEPSVPN');
	_CC_IVARet := (select valfanumerico from TBL_VARIABLES where ID_Variable = 'CC_IVARETV');
	_CC_ISRRet := (select valfanumerico from TBL_VARIABLES where ID_Variable = 'CC_ISRRETV');
	_CC_Desc := (select valfanumerico from TBL_VARIABLES where ID_Variable = 'CC_DSV');
	IF _Condicion = 0
	THEN
		_CC_DEVREB := (select valfanumerico from TBL_VARIABLES where ID_Variable = 'CC_DSVCONT');
		_ConceptoDescuento := 'Devolucion y/o rebaja sobre venta de contado';
	ELSIF _Condicion = 1	
	THEN
		_CC_DEVREB := (select cc from TBL_CLIENT_CXC_CONCEPTOS where ID_Concepto = _fsipg_id_concepto);
		_ConceptoDescuento := _fsipg_desc_concepto;
	ELSE --Ningun pago
		_CC_DEVREB := (select valfanumerico from TBL_VARIABLES where ID_Variable = 'CC_DSV');
		_ConceptoDescuento := 'Devolucion y/o rebaja sobre venta de cr√©dito';
	END IF;
	_moneda_ce := (select id_satmoneda from TBL_CONT_MONEDAS where Clave = _moneda);
	_Cantidad := round((_Total * _TC), 2);
	_ImporteTotalPesos := ROUND((_Importe * _TC), 2);
	_IVAPesos :=  ROUND((_IVA * _TC), 2);
	_IEPSPesos :=  ROUND((_IEPS * _TC), 2);
	_IVARetPesos :=  ROUND((_IVARet * _TC), 2);
	_ISRRetPesos :=  ROUND((_ISRRet * _TC), 2);
	_DescPesos := ROUND((_Descuento * _TC), 2);
	_TotalPesos := ROUND((_Total * _TC), 2);	
	_concepto := 'Devolucion s/venta ' || (select Descripcion from TBL_VENTAS_ENTIDADES where ID_EntidadVenta = _ID_EntidadVenta) || ', numero ' || cast(_Numero as varchar) || 
				(case when _Referencia <> '' then ' y referencia ' || _Referencia || '.' else '.' end);
	_conceptocost := 'Costo dev/ven ' || (select Descripcion from TBL_VENTAS_ENTIDADES where ID_EntidadVenta = _ID_EntidadVenta) || ', numero ' || cast(_Numero as varchar) || 
				(case when _Referencia <> '' then ' y referencia ' || _Referencia || '.' else '.' end);
	_CC_CLI := (select ID_CC from TBL_CLIENT_CLIENT where ID_Tipo = 'CL' and ID_Clave = _ID_Cliente);

	_Beneficiario := case when _ID_Cliente = 0 then 'Al Portador' else ( select Nombre from TBL_CLIENT_CLIENT where ID_Tipo = 'CL' and ID_Clave = _ID_Cliente ) end;
	_RFCBeneficiario := case when _ID_Cliente = 0 then 'XAXX010101000' else ( select RFC from TBL_CLIENT_CLIENT where ID_Tipo = 'CL' and ID_Clave = _ID_Cliente ) end;
	--_CuentaBeneficiario := case when _ID_Cliente = 0 then '' else ( select MetodoDePago from TBL_CLIENT_CLIENT where ID_Tipo = 'CL' and ID_Clave = _ID_Cliente ) end;
	--_BancoBeneficiario := case when _ID_Cliente = 0 then '000' else ( select ID_SatBanco from TBL_CLIENT_CLIENT where ID_Tipo = 'CL' and ID_Clave = _ID_Cliente ) end;

	_DesgloseCLIENT := (select DesgloseCLIENT from TBL_VENTAS_ENTIDADES where ID_EntidadVenta = _ID_EntidadVenta);
	_Fija := (select Fija from TBL_VENTAS_ENTIDADES where ID_EntidadVenta = _ID_EntidadVenta);
	_FijaCost := (select FijaCost from TBL_VENTAS_ENTIDADES where ID_EntidadVenta = _ID_EntidadVenta);
	_mes := date_part('month',_Fecha);
	_ano := date_part('year',_Fecha);
	_AuditarAlm := ( select AuditarAlm from TBL_INVSERV_BODEGAS where ID_Bodega = _ID_Bodega );
	_ID_CXC := ( select ID_CP from TBL_CLIENT_CXC where id_tipodocorig = 'VFAC' and id_clavedocorig = _ID_Factura);

	_CC_DCAF := (select valfanumerico from TBL_VARIABLES where ID_Variable = 'CC_DCAF');
	_CC_DCEC := (select valfanumerico from TBL_VARIABLES where ID_Variable = 'CC_DCEC');
	_id_clasificacion := (select ID_Clasificacion from TBL_VENTAS_ENTIDADES where ID_EntidadVenta = _ID_EntidadVenta);
	_numPagos := (select count(*) from _TMP_PAGOS);

	_claseref := 'VFAC|' || cast(_ID_Factura as varchar) || '|' || cast(_ID_EntidadVenta as varchar) || '||';
	
	IF(select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano and Cerrado = 1) > 0
	OR (select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano) < 1
	THEN
		_err := 3;
		_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_POLIZAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'ERROR: La fecha de poliza pertenece a un periodo cerrado o inexistente'
	END IF;

	IF _CC_DCAF = '' or _CC_DCEC = ''
	THEN
		_err := 3;
		_result := (select msj2 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'VEN_CXC' and 
			m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'ERROR: Las cuentas de diferencias cambiarias no se han registrado aun';
	END IF;

	IF (select count(*) from TBL_VENTAS_DEVOLUCIONES_CAB where ID_Entidad = _ID_EntidadVenta and Numero = _Numero) > 0
	THEN
		_err := 3;
		_result := 'ERROR: La clave de la devolucion ya existe, No se puede duplicar';
	END IF;

	IF ( select ventero from TBL_VARIABLES where ID_Variable = 'MVCF' ) = 1
	THEN
		IF (select count(*) from TBL_INVSERV_CHFIS_CAB where ID_Bodega = _ID_Bodega and ( Cerrado = '1' or Generado = '1') and Status <> 'C' and Fecha >= _Fecha) > 0
		THEN
			_err := 3;
			_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ALM_CHFIS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR');--'ERROR: No se puede generar el movimiento al almacen porque ya existe un chequeo f?sico cerrado en esta bodega, con fecha posterior a este movimiento';
		END IF;
	END IF;

	IF _Condicion = 0 
	THEN
		FOR _REC_TMP_PAGOS IN ( select * from _TMP_PAGOS order by Partida asc ) 
		LOOP
			_ID_FormaPago := _REC_TMP_PAGOS.ID_FormaPago;
			_ID_BanCaj := _REC_TMP_PAGOS.ID_BanCaj;
			_FijaBAN := (case when _ID_FormaPago = 1 then (select Fijo from TBL_BANCOS_CUENTAS where Tipo = 1 and Clave = _ID_BanCaj)
							else (select Fijo from TBL_BANCOS_CUENTAS where Tipo = 0 and Clave = _ID_BanCaj) end);
			_IdMon := (case when _ID_FormaPago = 1 then (select ID_Moneda from TBL_BANCOS_CUENTAS where Tipo = 1 and Clave = _ID_BanCaj)
							else (select ID_Moneda from TBL_BANCOS_CUENTAS where Tipo = 0 and Clave = _ID_BanCaj) end);

			IF _Fija <> _FijaBAN
			THEN
				_err := 3;
				_result := 'ERROR: No se puede agregar la devolucion/rebaja porque al pagarse de contado requiere que los bancos manejen los mismos trazos contables que la venta';
				EXIT;
			END IF;

			IF _Moneda <> _IdMon 
			THEN
				_err := 3;
				_result := 'ERROR: No se puede agregar la devolucion/rebaja porque al pagarse de contado requiere que los bancos manejen la misma moneda que la venta';
				EXIT;
			END IF;
		END LOOP;
	END IF;
	
	IF _IVA > 0.0 AND ( _CC_IVA = '' OR _CC_IVAPN = '' )
	THEN
		_err := 3;
		_result := 'ERROR: La cuenta de iva por pagar efectivamente cobrado o la de iva por pagar pendiente de cobrar, no existe o no se ha enlazado';
	END IF;
	IF _IEPS > 0.0 AND ( _CC_IEPS = '' OR _CC_IEPSPN = '' )
	THEN
		_err := 3;
		_result := 'ERROR: La cuenta del IEPS efectivamente cobrado o la de IEPS pendiente de cobrar no existe o no se ha enlazado';
	END IF;
	IF _IVARet > 0.0 AND ( _CC_IVARet = '' )
	THEN
		_err := 3;
		_result := 'ERROR: La cuenta de IVA Retenido no existe o no se ha enlazado';
	END IF;
	IF _ISRRet > 0.0 AND ( _CC_ISRRet = '' )
	THEN
		_err := 3;
		_result := 'ERROR: La cuenta de ISR Retenido no existe o no se ha enlazado';
	END IF;
	IF _Descuento > 0.0 AND _CC_Desc = ''
	THEN
		_err := 3;
		_result := 'ERROR: La cuenta de descuento sobre ventas no existe o no se ha enlazado';
	END IF;

	IF _CC_DEVREB is null or _CC_DEVREB = ''
	THEN
		_err := 3;
		_result := 'ERROR: La cuenta de devoluciones sobre ventas de contado o cr√©dito no se ha enlazado en variables, o en enlaces de cuentas por cobrar';
	END IF;

	-- procede a realizar verificaci?n sobre los trazos
	IF _FijaCost = '0'
	THEN
		_CC_COSTVEN := (select cc from TBL_INVSERV_COSTOS_CONCEPTOS where ID_Concepto = 2);
		IF _CC_COSTVEN is null
		THEN
			_err := 3;
			_result := 'ERROR: La cuenta para el costo de ventas no existe o no se ha enlazado';	
		END IF;
	END IF;

	IF _Condicion = 3
	THEN
		_CC_VENNP := (select valfanumerico from TBL_VARIABLES where ID_Variable = 'CC_VENNP');
		IF _CC_VENNP = ''
		THEN
			_err := 3;
			_result := 'ERROR: La cuenta para registro de partida doble cuando no se establece ningun metodo de pago, no existe o no se ha enlazado';
		END IF;
	END IF;

	--VERIFICA SI ES CFD
	IF (select CFD from TBL_VENTAS_ENTIDADES where ID_EntidadVenta = _ID_EntidadVenta) <> '00'
	THEN
		IF (select count(*) from TBL_CFD_REPORTE_MENSUAL where Mes = _mes and Ano = _ano and Cerrado = '0') > 0
		THEN
			IF (select count(*) from TBL_VENTAS_DEVOLUCIONES_CAB where ID_Entidad = _ID_EntidadVenta and Numero = (_Numero -1)) is not null
			THEN
				IF (select TFD from TBL_VENTAS_DEVOLUCIONES_CAB where ID_Entidad = _ID_EntidadVenta and Numero = (_Numero -1)) is null
						or (select TFD from TBL_VENTAS_DEVOLUCIONES_CAB where ID_Entidad = _ID_EntidadVenta and Numero = (_Numero -1)) <> 3
				THEN 
					_err := 3;
					_result := 'ERROR: No se puede agregar la devolucion porque la dev anterior no est&aacute; sellada. Primero debes sellar la dev anterior para poder agregar esta dev';
				END IF;
			END IF;
		ELSE
			_err := 3;
			_result := 'ERROR: No se puede agregar la dev porque el mes de comprobantes fiscales digitaya';
		END IF;
	END IF;

	IF _err = 0
	THEN
		INSERT INTO TBL_VENTAS_DEVOLUCIONES_CAB (  id_entidad, numero, id_clipro, fecha, referencia, status, moneda, tc, fechaenvio, condicion, obs, 
			importe, descuento, subtotal, iva, total, ref, id_pol, id_polcost, id_bodega, mimporte, mdescuento, msubtotal, miva, mtotal, efectivo, bancos, cambio, id_vendedor, id_cfd, tfd, 
			ieps, ivaret, isrret, id_factura, devreb )
		VALUES(_ID_EntidadVenta, _Numero, _ID_Cliente, _Fecha, _Referencia, (case when _AuditarAlm = '1' and _devreb = 'DEV' then 'G' else 'E' end) , _Moneda, _TC, _Fecha, _Condicion, _Obs,
				_Importe, _Descuento, _SubTotal, _IVA, _Total, _claseref, null, null, _ID_Bodega, _Importe, _Descuento, _SubTotal, _IVA,  _Total, _FSIPG_Efectivo, _FSIPG_Bancos, _FSIPG_Cambio, _ID_Vendedor, null, null, 
				_ieps, _ivaret, _isrret, _id_factura, _devreb )
		RETURNING currval(pg_get_serial_sequence('TBL_VENTAS_DEVOLUCIONES_CAB', 'id_vc')) INTO _id_devolucion;
		 
		-- actualiza el numero de FACTURA
		UPDATE TBL_VENTAS_ENTIDADES
		SET Devolucion = _Numero + 1
		WHERE ID_EntidadVenta = _ID_EntidadVenta;
		
		-- inserta el detalle
		INSERT INTO TBL_VENTAS_DEVOLUCIONES_DET
		SELECT _ID_Devolucion, Partida, Cantidad, ID_Prod, Precio, Descuento, IVA, Obs, Importe, ImporteDesc, ImporteIVA, TotalPart, IEPS, ImporteIEPS, IVARet, ImporteIVARet, ISRRet, ImporteISRRet
		FROM _TMP_VENTAS_FACTURAS_DET;

		_Ref := 'VDEV|' || cast(_ID_Devolucion as varchar) || '|' || cast(_ID_EntidadVenta as varchar) || '||';

		--Crea tabla temporal indispensable... para contable.
		CREATE LOCAL TEMPORARY TABLE _TMP_CONT_POLIZAS_DETALLE_TMP (
			Part smallint NOT NULL ,
			Cuenta char(19) NOT NULL ,
			Concepto varchar(80) NOT NULL ,
			Parcial numeric(19,4) NOT NULL ,
			Moneda smallint NOT NULL ,
			TC numeric(19,4) NOT NULL ,
			Debe numeric(19,4) NOT NULL ,
			Haber numeric(19,4) NOT NULL
		);
		CREATE LOCAL TEMPORARY TABLE _TMP_CONT_POLIZAS_DETALLE_CE_CHEQUES_TMP( 
			id_part smallint NOT NULL,
			num character varying(20) NOT NULL,
			banco character(3) NOT NULL,
			ctaori character varying(50) NOT NULL,
			fecha timestamp without time zone NOT NULL,
			monto numeric(19,4) NOT NULL,
			benef character varying(300) NOT NULL,
			rfc character varying(13) NOT NULL,
			banemisext character varying(150) NOT NULL,
			moneda character(3) NOT NULL,
			tipcamb numeric(19,5) NOT NULL
		); 
		CREATE LOCAL TEMPORARY TABLE _TMP_CONT_POLIZAS_DETALLE_CE_TRANSFERENCIAS_TMP ( 
			id_part smallint NOT NULL,
			ctaori character varying(50) NOT NULL,
			bancoori character(3) NOT NULL,
			monto numeric(19,4) NOT NULL,
			ctadest character varying(50) NOT NULL,
			bancodest character(3) NOT NULL,
			fecha timestamp without time zone NOT NULL,
			benef character varying(300) NOT NULL,
			rfc character varying(13) NOT NULL,
			bancooriext character varying(150) NOT NULL,
			bancodestext character varying(150) NOT NULL,
			moneda character(3) NOT NULL,
			tipcamb numeric(19,5) NOT NULL
		);
		CREATE LOCAL TEMPORARY TABLE _TMP_CONT_POLIZAS_DETALLE_CE_OTRMETODOPAGO_TMP (
			id_part smallint NOT NULL,
			metpagopol character(2) NOT NULL,
			fecha timestamp without time zone NOT NULL,
			benef character varying(300) NOT NULL,
			rfc character varying(13) NOT NULL,
			monto numeric(19,4) NOT NULL,
			moneda character(3) NOT NULL,
			tipcamb numeric(19,5) NOT NULL
		);
		-- Agrega a la tabla de temporal para: polizas final o detalles de bancos cajas final
		_contPart := 1;
		INSERT INTO _TMP_CONT_POLIZAS_DETALLE_TMP
		VALUES(_contPart, _CC_DEVREB, _ConceptoDescuento, _Importe, _Moneda, _TC, _ImporteTotalPesos, 0.0);

		-- procede a registrar los otros conceptos de la poliza ( EL IVA , Deuda con Cliente ETC)
		IF _IVA > 0.0
		THEN
			_contPart := _contPart + 1;
			IF _Condicion = 0 -- es de contado, envia todo a iva efectivamente pagado
			THEN	
				INSERT INTO _TMP_CONT_POLIZAS_DETALLE_TMP
				VALUES(_contPart, _CC_IVA, 'Parte de Impuesto devuelta', _IVA, _Moneda, _TC, _IVAPesos, 0.0);
			ELSE -- de credito o sin pago... envia a pendiente de pagar
				INSERT INTO _TMP_CONT_POLIZAS_DETALLE_TMP
				VALUES(_contPart, _CC_IVAPN, 'Parte de Impuesto devuelta', _IVA, _Moneda, _TC, _IVAPesos, 0.0);
			END IF;
		END IF;

		IF _IEPS > 0.0
		THEN
			_contPart := _contPart + 1;
			IF _Condicion = 0 -- es de contado, envia todo a ieps efectivamente pagado
			THEN	
				INSERT INTO _TMP_CONT_POLIZAS_DETALLE_TMP
				VALUES(_contPart, _CC_IEPS, 'Impuesto Especial sobre Producci√≥n y Servicio', _IEPS, _Moneda, _TC, _IEPSPesos, 0.0);
			ELSE -- de credito o sin pago... envia a pendiente de pagar
				INSERT INTO _TMP_CONT_POLIZAS_DETALLE_TMP
				VALUES(_contPart, _CC_IEPSPN, 'Impuesto Especial sobre Producci√≥n y Servicio', _IEPS, _Moneda, _TC, _IEPSPesos, 0.0);
			END IF;	
		END IF;

		IF _IVARet > 0.0
		THEN
			_contPart := _contPart + 1;
			INSERT INTO _TMP_CONT_POLIZAS_DETALLE_TMP
			VALUES(_contPart, _CC_IVARet, 'Retenci√≥n de IVA', _IVARet, _Moneda, _TC, 0.0, _IVARetPesos);	
		END IF;

		IF _ISRRet > 0.0
		THEN
			_contPart := _contPart + 1;
			INSERT INTO _TMP_CONT_POLIZAS_DETALLE_TMP
			VALUES(_contPart, _CC_ISRRet, 'Retenci√≥n de ISR', _ISRRet, _Moneda, _TC, 0.0, _ISRRetPesos);	
		END IF;

		IF _Descuento > 0.0
		THEN
			_contPart := _contPart + 1;
			INSERT INTO _TMP_CONT_POLIZAS_DETALLE_TMP
			VALUES(_contPart, _CC_Desc, 'Parte del descuento explicito devuelta', _Descuento, _Moneda, _TC, 0.0, _DescPesos);
		END IF;
			
		-- procede a registrar los movimientos en la caja, banco, Cuenta por cobrar, y la poliza en caso necesario
		IF _ID_Cliente > 0 and _Condicion = 1 -- si es a credito y no de mostrador
		THEN
			SELECT * INTO _errpart, _resultpart, _id_cxcsaldo 
			FROM sp_client_cxc_pagar(_ID_EntidadVenta, _ID_CXC, _Fecha,  '', _Moneda, _TC, _Total, '0', '0', _Cantidad, _ConceptoDescuento, cast(_ID_CXC as varchar), '1', _fsipg_id_concepto, false, 'VDEV', _ID_Devolucion, _Ref,          	null,  		null, 						null, 		null, 			null,	null ) as ( err integer, res varchar, clave integer ); --este movimiento registrar√° la p√≥liza externa _numpol 
			--sp_client_cxc_pagar(		_id_entidad 		_id_cxc, _fecha,    _moneda   _tc   _total 	    _cantidad,     _obs 				    _docamparado     _essaldo     _id_concepto      _id_tipodocorig _id_clavedocorig_claseref    _tipomov,_id_satbanco,_id_satmetodospago, _bancoext,_cuentabanco,_cheque)
    			IF _errpart <> 0
			THEN
				_err := 3;
				_result := _resultpart;
			ELSE
				_clase = 'VCXC|' || cast(_ID_CXCSALDO as varchar) || '|' || cast(_ID_EntidadVenta as varchar) || '||';

				UPDATE TBL_VENTAS_DEVOLUCIONES_CAB
				SET ID_Pol = _ID_CXCSALDO
				WHERE ID_VC = _ID_Devolucion;
				
				-- Procede a registrar la poliza si y solo si es una entidad dinamica
				-- Primero registra la deuda total del cliente para la partida doble en tmp
				_contPart := _contPart + 1;
				INSERT INTO _TMP_CONT_POLIZAS_DETALLE_TMP
				VALUES(_contPart, _CC_CLI, 'Devoluci√≥n al Cliente', _Total, _Moneda, _TC, 0.0, _TotalPesos);
					
				IF _Fija = '0'
				THEN
					-- Primero registra y crea la tabla temporal de detalle de la poliza
					CREATE LOCAL TEMPORARY TABLE _TMP_CONT_POLIZAS_DETALLE (
						Part smallint NOT NULL ,
						Cuenta char(19) NOT NULL ,
						Concepto varchar(80) NOT NULL ,
						Parcial numeric(19,4) NOT NULL ,
						Moneda smallint NOT NULL ,
						TC numeric(19,4) NOT NULL ,
						Debe numeric(19,4) NOT NULL ,
						Haber numeric(19,4) NOT NULL
					);
					-- Fin de la tabla temporal

					-- si existen diferencias de centavos al convertir en moneda nacional los tipos de cambio, los registra
					_TotHaber := (select sum(Haber) from _TMP_CONT_POLIZAS_DETALLE_TMP);
					_TotDebe := (select sum(Debe) from _TMP_CONT_POLIZAS_DETALLE_TMP);
					IF _TotDebe > _TotHaber
					THEN
						_diff := _TotDebe - _TotHaber;
						_contPart := _contPart + 1;
						INSERT INTO _TMP_CONT_POLIZAS_DETALLE_TMP
						VALUES(_contPart, _CC_DCEC, 'Diferencia en decimales', _diff, 1, 1.0, 0.0, _diff);
					ELSIF _TotDebe < _TotHaber
					THEN
						_diff := _TotHaber - _TotDebe;
						_contPart := _contPart + 1;
						INSERT INTO _TMP_CONT_POLIZAS_DETALLE_TMP
						VALUES(_contPart, _CC_DCAF, 'Diferencia en decimales', _diff, 1, 1.0, _diff, 0.0);
					END IF;
					
					-- Inserta desde _TMP_CONT_POLIZAS_DETALLE_TMP
					INSERT INTO _TMP_CONT_POLIZAS_DETALLE
					SELECT * FROM  _TMP_CONT_POLIZAS_DETALLE_TMP;

					-- Agrega ahora la poliza principal
					--EXEC dbo.sp_cont_polizas_agregar_ext 'DR', @Fecha, @concepto, 0, @clase, @errpart OUTPUT, @numpol OUTPUT
					SELECT * INTO _errpart, _resultpart, _numpol 
					FROM sp_cont_polizas_agregar('DR', _Fecha, _Concepto,'0', _clase, _Cantidad, _id_clasificacion ) as ( err integer, res varchar, clave integer );
      					IF _errpart <> 0
					THEN
						_err := _errpart;
						_result := _resultpart;
					ELSE
						UPDATE  TBL_CLIENT_CXC
						SET ID_Pol = _numpol
						WHERE ID_CP = _ID_CXCSALDO;
					END IF;

					DROP TABLE _TMP_CONT_POLIZAS_DETALLE;
			
				END IF;
			END IF; 
		ELSIF _Condicion = 0 -- es de contado
		THEN
			-- Termina la poliza dividiendo los pagos en sus cuentas de banco o caja
			_TotalPesosMult = 0.0;
			_ParcialPesosMult = 0.0;
			FOR _REC_TMP_PAGOS IN ( select * from _TMP_PAGOS order by Partida asc ) 
			LOOP
				_ParcialPesosMult := round((_REC_TMP_PAGOS.Total * _TC), 2);
				_TotalPesosMult := _TotalPesosMult + _ParcialPesosMult;
				_BanCaj := _REC_TMP_PAGOS.ID_FormaPago; -- 1 cajas 0 bancos
				_CC_BAN := (select CC from TBL_BANCOS_CUENTAS  where Tipo = _BanCaj and Clave = _REC_TMP_PAGOS.ID_BanCaj);
				_banCHQ := (select SigCheque from TBL_BANCOS_CUENTAS where Tipo = _BanCaj and Clave = _REC_TMP_PAGOS.ID_BanCaj)::varchar(20);
				_contPart := _contPart + 1;
				
				INSERT INTO _TMP_CONT_POLIZAS_DETALLE_TMP
				VALUES(_contPart, _CC_BAN, _REC_TMP_PAGOS.RefPago, _REC_TMP_PAGOS.Total, _Moneda, _TC, 0.0, _ParcialPesosMult);
				--Ingresa contablilidad electronica en caso de bancos
				IF _BanCaj = 0 -- Es banco
				THEN
					IF _REC_TMP_PAGOS.ID_SatMetodosPago = '02' -- se trata de un cheque
					THEN
						INSERT INTO _TMP_CONT_POLIZAS_DETALLE_CE_CHEQUES_TMP
						SELECT _contPart, _banCHQ, ID_SatBanco, Descripcion, _Fecha, _REC_TMP_PAGOS.Total, _Beneficiario, _RFCBeneficiario, BancoExt, _moneda_ce, _TC
						FROM TBL_BANCOS_CUENTAS 
						WHERE Tipo = _BanCaj and Clave = _REC_TMP_PAGOS.ID_BanCaj;
					ELSIF _REC_TMP_PAGOS.ID_SatMetodosPago = '03' --Es una transferencia
					THEN
						INSERT INTO _TMP_CONT_POLIZAS_DETALLE_CE_TRANSFERENCIAS_TMP
						SELECT _contPart, Descripcion, ID_SatBanco, _REC_TMP_PAGOS.Total, _REC_TMP_PAGOS.CuentaBanco, _REC_TMP_PAGOS.ID_SatBanco, _Fecha,  _Beneficiario, _RFCBeneficiario, BancoExt, _REC_TMP_PAGOS.BancoExt, _moneda_ce, _TC
						FROM TBL_BANCOS_CUENTAS 
						WHERE Tipo = _BanCaj and Clave = _REC_TMP_PAGOS.ID_BanCaj;
					ELSE --Es otro metodo de pago (Deposito o Retiro es lo mismo)
						INSERT INTO _TMP_CONT_POLIZAS_DETALLE_CE_OTRMETODOPAGO_TMP
						SELECT _contPart, _REC_TMP_PAGOS.ID_SatMetodosPago, _Fecha, _Beneficiario, _RFCBeneficiario, _REC_TMP_PAGOS.Total, _moneda_ce, _TC;
					END IF;
				ELSE -- BanCaj = 1 "Caja"
					IF _REC_TMP_PAGOS.ID_SatMetodosPago = '02' -- se trata de un cheque (Deposito o Retiro es lo mismo, toma los datos directos capturados en el dialogo)
					THEN
						INSERT INTO _TMP_CONT_POLIZAS_DETALLE_CE_CHEQUES_TMP
						SELECT _contPart, _REC_TMP_PAGOS.Cheque, _REC_TMP_PAGOS.ID_SatBanco, _REC_TMP_PAGOS.CuentaBanco, _Fecha, _REC_TMP_PAGOS.Total, _Beneficiario, _RFCBeneficiario, _REC_TMP_PAGOS.BancoExt, _moneda_ce, _TC;
					ELSE --Es otro metodo de pago (Deposito o Retiro es lo mismo)
						INSERT INTO _TMP_CONT_POLIZAS_DETALLE_CE_OTRMETODOPAGO_TMP
						SELECT _contPart, _REC_TMP_PAGOS.ID_SatMetodosPago, _Fecha, _Beneficiario, _RFCBeneficiario, _REC_TMP_PAGOS.Total, _moneda_ce, _TC;
					END IF;
				END IF;
			END LOOP;

			IF _Fija = '0'
			THEN
				-- Primero registra y crea la tabla temporal de detalle de la poliza
				CREATE LOCAL TEMPORARY TABLE _TMP_CONT_POLIZAS_DETALLE (
					Part smallint NOT NULL ,
					Cuenta char(19) NOT NULL ,
					Concepto varchar(80) NOT NULL ,
					Parcial numeric(19,4) NOT NULL ,
					Moneda smallint NOT NULL ,
					TC numeric(19,4) NOT NULL ,
					Debe numeric(19,4) NOT NULL ,
					Haber numeric(19,4) NOT NULL
				);
				CREATE LOCAL TEMPORARY TABLE _TMP_CONT_POLIZAS_DETALLE_CE_CHEQUES ( 
					id_part smallint NOT NULL,
					num character varying(20) NOT NULL,
					banco character(3) NOT NULL,
					ctaori character varying(50) NOT NULL,
					fecha timestamp without time zone NOT NULL,
					monto numeric(19,4) NOT NULL,
					benef character varying(300) NOT NULL,
					rfc character varying(13) NOT NULL,
					banemisext character varying(150) NOT NULL,
					moneda character(3) NOT NULL,
					tipcamb numeric(19,5) NOT NULL
				); 
				CREATE LOCAL TEMPORARY TABLE _TMP_CONT_POLIZAS_DETALLE_CE_TRANSFERENCIAS ( 
					id_part smallint NOT NULL,
					ctaori character varying(50) NOT NULL,
					bancoori character(3) NOT NULL,
					monto numeric(19,4) NOT NULL,
					ctadest character varying(50) NOT NULL,
					bancodest character(3) NOT NULL,
					fecha timestamp without time zone NOT NULL,
					benef character varying(300) NOT NULL,
					rfc character varying(13) NOT NULL,
					bancooriext character varying(150) NOT NULL,
					bancodestext character varying(150) NOT NULL,
					moneda character(3) NOT NULL,
					tipcamb numeric(19,5) NOT NULL
				);
				CREATE LOCAL TEMPORARY TABLE _TMP_CONT_POLIZAS_DETALLE_CE_OTRMETODOPAGO (
					id_part smallint NOT NULL,
					metpagopol character(2) NOT NULL,
					fecha timestamp without time zone NOT NULL,
					benef character varying(300) NOT NULL,
					rfc character varying(13) NOT NULL,
					monto numeric(19,4) NOT NULL,
					moneda character(3) NOT NULL,
					tipcamb numeric(19,5) NOT NULL
				);
				-- Fin de la tabla temporal

				-- si existen diferencias de centavos al convertir en moneda nacional los tipos de cambio, los registra
				_TotHaber := (select sum(Haber) from _TMP_CONT_POLIZAS_DETALLE_TMP);
				_TotDebe := (select sum(Debe) from _TMP_CONT_POLIZAS_DETALLE_TMP);
				IF _TotDebe > _TotHaber
				THEN
					_diff := _TotDebe - _TotHaber;
					_contPart := _contPart + 1;
					INSERT INTO _TMP_CONT_POLIZAS_DETALLE_TMP
					VALUES(_contPart, _CC_DCEC, 'Diferencia en decimales', _diff, 1, 1.0, 0.0, _diff);
				ELSIF _TotDebe < _TotHaber
				THEN
					_diff := _TotHaber - _TotDebe;
					_contPart := _contPart + 1;
					INSERT INTO _TMP_CONT_POLIZAS_DETALLE_TMP
					VALUES(_contPart, _CC_DCAF, 'Diferencia en decimales', _diff, 1, 1.0, _diff, 0.0);
				END IF;

				-- Inserta desde _TMP_CONT_POLIZAS_DETALLE_TMP
				INSERT INTO _TMP_CONT_POLIZAS_DETALLE
				SELECT * FROM  _TMP_CONT_POLIZAS_DETALLE_TMP;
				INSERT INTO _TMP_CONT_POLIZAS_DETALLE_CE_CHEQUES
				SELECT * FROM  _TMP_CONT_POLIZAS_DETALLE_CE_CHEQUES_TMP;
				INSERT INTO _TMP_CONT_POLIZAS_DETALLE_CE_TRANSFERENCIAS
				SELECT * FROM  _TMP_CONT_POLIZAS_DETALLE_CE_TRANSFERENCIAS_TMP;
				INSERT INTO _TMP_CONT_POLIZAS_DETALLE_CE_OTRMETODOPAGO
				SELECT * FROM  _TMP_CONT_POLIZAS_DETALLE_CE_OTRMETODOPAGO_TMP;
				
				SELECT * INTO _errpart, _resultpart, _numpol 
				FROM sp_cont_polizas_agregar('EG', _Fecha, _Concepto,'0', '', _TotalPesos, _id_clasificacion ) as ( err integer, res varchar, clave integer );
      				IF _errpart <> 0
				THEN
					_err := _errpart;
					_result := _resultpart;
				END IF;
				
				DROP TABLE _TMP_CONT_POLIZAS_DETALLE;
				DROP TABLE _TMP_CONT_POLIZAS_DETALLE_CE_CHEQUES;
				DROP TABLE _TMP_CONT_POLIZAS_DETALLE_CE_TRANSFERENCIAS;
				DROP TABLE _TMP_CONT_POLIZAS_DETALLE_CE_OTRMETODOPAGO;
			END IF;

			--Ahora ejecuta los movimientos de caja y bancos
			_clase := '';
			FOR _REC_TMP_PAGOS IN ( select * from _TMP_PAGOS order by Partida asc ) 
			LOOP
				_BanCaj := _REC_TMP_PAGOS.ID_FormaPago; -- 1 cajas 0 bancos
				
				SELECT * INTO _errpart, _resultpart, _bancajmov 
				FROM  sp_bancos_movs_agregar( _BanCaj, _REC_TMP_PAGOS.ID_BanCaj, _Fecha, _Concepto, _Beneficiario, 0.00, _REC_TMP_PAGOS.Total, _REC_TMP_PAGOS.TipoMov, 
						'G', _Moneda, _TC, _Ref, _REC_TMP_PAGOS.RefPago, _id_clasificacion, _numpol, _REC_TMP_PAGOS.ID_SatBanco, _RFCBeneficiario, _REC_TMP_PAGOS.ID_SatMetodosPago, 
																		_REC_TMP_PAGOS.BancoExt, _REC_TMP_PAGOS.CuentaBanco, _REC_TMP_PAGOS.Cheque) as ( err integer, res varchar, clave integer);
				IF _errpart <> 0
				THEN
					_err := _errpart;
					_result := _resultpart;
					EXIT;
				END IF;

				INSERT INTO TBL_VENTAS_DEVOLUCIONES_PAGOS
				VALUES(_ID_Devolucion, _bancajmov);
				
				IF _numPagos > 1
				THEN
					IF _BanCaj = 0
					THEN
						_clase := _clase || 'MBAN|' || cast(_bancajmov as varchar) || '|' || cast(_REC_TMP_PAGOS.ID_BanCaj as varchar) || '||;';
					ELSE
						_clase := _clase || 'MCAJ|' || cast(_bancajmov as varchar) || '|' || cast(_REC_TMP_PAGOS.ID_BanCaj as varchar) || '||;';
					END IF;
				ELSE
					IF _BanCaj = 0
					THEN
						_clase := 'MBAN|' || cast(_bancajmov as varchar) || '|' || cast(_REC_TMP_PAGOS.ID_BanCaj as varchar) || '||';
					ELSE
						_clase := 'MCAJ|' || cast(_bancajmov as varchar) || '|' || cast(_REC_TMP_PAGOS.ID_BanCaj as varchar) || '||';
					END IF;
				END IF;
			END LOOP;

			IF _Fija = '0' -- Aqui registra la referencia de las polizas de ingreso a sus movimientos de caja o bancos
			THEN
				IF _numPagos > 1
				THEN
					INSERT INTO TBL_REFERENCIAS_EXT
					VALUES(default,_clase)
					RETURNING currval(pg_get_serial_sequence(' TBL_REFERENCIAS_EXT', 'id_ref')) INTO _RefExt;
					UPDATE TBL_CONT_POLIZAS
					SET Ref = 'REXT|' || cast(_RefExt as varchar) || '|||'
					WHERE ID = _numpol;
		 		ELSE
					UPDATE TBL_CONT_POLIZAS
					SET Ref = _clase
					WHERE ID = _numpol;
				END IF;
			END IF;
		ELSIF _Condicion = 3 -- Ningun pago
		THEN
			_clase = 'VDEV|' || cast(_ID_Devolucion as varchar) || '|' || cast(_ID_EntidadVenta as varchar) || '||';

			-- Procede a registrar la poliza si y solo si es una entidad dinamica
			-- Primero registra la deuda total del cliente para la partida doble en tmp
			_contPart := _contPart + 1;
			INSERT INTO _TMP_CONT_POLIZAS_DETALLE_TMP
			VALUES(_contPart, _CC_VENNP, 'Devoluci√≥n/rebaja de documento por cobrar', _Total, _Moneda, _TC, 0.0, _TotalPesos);
					
			IF _Fija = '0'
			THEN
				-- Primero registra y crea la tabla temporal de detalle de la poliza
				CREATE LOCAL TEMPORARY TABLE _TMP_CONT_POLIZAS_DETALLE (
					Part smallint NOT NULL ,
					Cuenta char(19) NOT NULL ,
					Concepto varchar(80) NOT NULL ,
					Parcial numeric(19,4) NOT NULL ,
					Moneda smallint NOT NULL ,
					TC numeric(19,4) NOT NULL ,
					Debe numeric(19,4) NOT NULL ,
					Haber numeric(19,4) NOT NULL
				);
				-- Fin de la tabla temporal
					-- si existen diferencias de centavos al convertir en moneda nacional los tipos de cambio, los registra
				_TotHaber := (select sum(Haber) from _TMP_CONT_POLIZAS_DETALLE_TMP);
				_TotDebe := (select sum(Debe) from _TMP_CONT_POLIZAS_DETALLE_TMP);
				IF _TotDebe > _TotHaber
				THEN
					_diff := _TotDebe - _TotHaber;
					_contPart := _contPart + 1;
					INSERT INTO _TMP_CONT_POLIZAS_DETALLE_TMP
					VALUES(_contPart, _CC_DCEC, 'Diferencia en decimales', _diff, 1, 1.0, 0.0, _diff);
				ELSIF _TotDebe < _TotHaber
				THEN
					_diff := _TotHaber - _TotDebe;
					_contPart := _contPart + 1;
					INSERT INTO _TMP_CONT_POLIZAS_DETALLE_TMP
					VALUES(_contPart, _CC_DCAF, 'Diferencia en decimales', _diff, 1, 1.0, _diff, 0.0);
				END IF;
				
				-- Inserta desde _TMP_CONT_POLIZAS_DETALLE_TMP
				INSERT INTO _TMP_CONT_POLIZAS_DETALLE
				SELECT * FROM  _TMP_CONT_POLIZAS_DETALLE_TMP;
				-- Agrega ahora la poliza principal
				SELECT * INTO _errpart, _resultpart, _numpol 
				FROM sp_cont_polizas_agregar('DR', _Fecha, _Concepto,'0', _clase, _Cantidad, _id_clasificacion ) as ( err integer, res varchar, clave integer );
      				IF _errpart <> 0
				THEN
					_err := _errpart;
					_result := _resultpart;
				ELSE
					UPDATE TBL_VENTAS_DEVOLUCIONES_CAB
					SET ID_Pol = _numpol
					WHERE ID_VC = _ID_Devolucion;
				END IF;

				DROP TABLE _TMP_CONT_POLIZAS_DETALLE;
			
			END IF;
		END IF;
		
		DROP TABLE _TMP_CONT_POLIZAS_DETALLE_TMP;
		DROP TABLE _TMP_CONT_POLIZAS_DETALLE_CE_CHEQUES_TMP;
		DROP TABLE _TMP_CONT_POLIZAS_DETALLE_CE_TRANSFERENCIAS_TMP;
		DROP TABLE _TMP_CONT_POLIZAS_DETALLE_CE_OTRMETODOPAGO_TMP;
			
		--Procede a agregar el movimiento al almac√©n
		IF _err = 0 AND _FijaCost = '0' AND _DevReb = 'DEV' 
		THEN
			CREATE LOCAL TEMPORARY TABLE _TMP_INVSERV_ALMACEN_MOVIM_DET (
				ID_Bodega smallint NOT NULL ,
				ID_Prod varchar(20) NOT NULL ,
				Partida smallint NOT NULL ,
				Cantidad numeric(9, 3) NOT NULL ,
				Costo numeric(19,4) NULL 
			); 

			insert into _TMP_INVSERV_ALMACEN_MOVIM_DET
			select _ID_Bodega, ID_Prod, Partida, Cantidad, Precio --Precio no es el costo, sin embargo lo ignorar√° en la tarjeta de almacen y se calcular√° el costo porque el concepto de venta 50, indica recalcular costo
			from _TMP_VENTAS_FACTURAS_DET
			order by Partida ASC;
		
			SELECT * INTO _errpart, _resultpart, _ID_Movimiento 
			FROM sp_invserv_alm_movs_agregar(_Fecha, _ID_Bodega, (case when _AuditarAlm = '1' then 'G' else 'U' end), '2', _ConceptoCost, '',/*1 ENT 2 SAL*/ '1', _Ref, 'VDEV', _ID_Devolucion) as ( err integer, res varchar, clave integer );
			IF _errpart <> 0
			THEN
				_err := _errpart;
				_result := _resultpart;
			ELSE
				UPDATE TBL_VENTAS_DEVOLUCIONES_CAB
				SET ID_PolCost = _ID_Movimiento
				WHERE ID_VC = _ID_Devolucion;
			END IF;
	
			DROP TABLE _TMP_INVSERV_ALMACEN_MOVIM_DET; 
		END IF;
		-- Fin del movimiento al almacen
		
	END IF; 
	
	RETURN QUERY SELECT _err, _result, _id_devolucion;
END
$BODY$
  LANGUAGE plpgsql;
--ALTER FUNCTION sp_ventas_devoluciones_agregar(smallint, integer, integer, timestamp without time zone, character varying, smallint, 



--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_ventas_cotizaciones_cancelar(_id_cotizacion integer, _id_entidadventa smallint)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255);  
BEGIN
	_err := 0;
	_result := 'La cotizacion se cancel√≥ con exito';
		
	IF _err = 0
	THEN
		UPDATE TBL_VENTAS_COTIZACIONES_CAB
		SET Status = 'C'
		WHERE ID_VC = _ID_Cotizacion;
	END IF;

	RETURN QUERY SELECT _err, _result, _id_cotizacion;

END
$BODY$
  LANGUAGE plpgsql;
  
  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_ventas_pedidos_cancelar(_id_pedido integer, _id_entidadventa smallint)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255);  _ID_Cotizacion int;

BEGIN
	_err := 0;
	_result := 'El pedido se cancel√≥ con exito';
	_ID_Cotizacion = (select ID_VC from TBL_VENTAS_COTIZACIONES_CAB where ID_Factura = _ID_Pedido and TipoEnlace = 'VPED');
	
	IF _err = 0
	THEN
		UPDATE TBL_VENTAS_PEDIDOS_CAB
		SET Status = 'C'
		WHERE ID_VC = _ID_Pedido;
	
		IF _ID_Cotizacion is not null
		THEN
			UPDATE TBL_VENTAS_COTIZACIONES_CAB
			SET Status = 'G', ID_Factura = 0, TipoEnlace = null
			WHERE ID_VC = _ID_Cotizacion;

		END IF;
	END IF;

	RETURN QUERY SELECT _err, _result, _id_pedido;

END
$BODY$
  LANGUAGE plpgsql;
  
  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_ventas_remisiones_cancelar(_id_remision integer, _id_entidadventa smallint)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_Numero int; _Fecha timestamp; _ID_PolCost int; _err int; _result varchar(255); _errpart int; 
	_resultpart varchar(255); _Ref varchar(25); _ID_Movimiento int; _ID_Bodega smallint;
 	_mes smallint; _ano smallint; _ID_Pedido int; _ID_Cotizacion int; _ID_CFD int; _TFD smallint; _EntCFD bit(2); _ID_CFDRES int;
BEGIN
	_err := 0;
	_result := 'La Remisi&oacute;n se ha cancelado satisfactoriamente';
	_Fecha := (select Fecha from TBL_VENTAS_REMISIONES_CAB where ID_VC = _ID_Remision);
	_Numero := (select Numero from TBL_VENTAS_REMISIONES_CAB where ID_VC = _ID_Remision);
	_ID_Movimiento := (select ID_PolCost from TBL_VENTAS_REMISIONES_CAB where ID_VC = _ID_Remision); -- el id del movimiento al almacen
	--_Ref := 'VREM|' || cast(_ID_Remision as varchar) || '|' || cast(_ID_EntidadVenta as varchar) || '||';
	--_ID_Movimiento := (select ID_Movimiento from TBL_INVSERV_ALMACEN_MOVIM_CAB where cr_pri = 'VREM' and cr_sec = _ID_Remision);
	_ID_Bodega := (select ID_Bodega from TBL_VENTAS_REMISIONES_CAB where ID_VC = _ID_Remision);

	_mes := date_part('month',_Fecha);
	_ano := date_part('year',_Fecha);
	
	_ID_Cotizacion := (select ID_VC from TBL_VENTAS_COTIZACIONES_CAB where ID_Factura = _ID_Remision and TipoEnlace = 'VREM');
	_ID_Pedido := (select ID_VC from TBL_VENTAS_PEDIDOS_CAB where ID_Factura = _ID_Remision and TipoEnlace = 'VREM');
	
	_ID_CFD := (select ID_CFD from TBL_VENTAS_REMISIONES_CAB WHERE ID_VC = _ID_Remision);
	_TFD := (select TFD from TBL_VENTAS_REMISIONES_CAB WHERE ID_VC = _ID_Remision);
	_EntCFD := (select CFD from TBL_VENTAS_ENTIDADES where ID_EntidadVenta = _ID_EntidadVenta);

	IF(select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano and Cerrado = 1) > 0
	OR (select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano) < 1
	THEN
		_err := 3;
		_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_POLIZAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'ERROR: La fecha de poliza pertenece a un periodo cerrado o inexistente'
	END IF;

	IF ( select ventero from TBL_VARIABLES where ID_Variable = 'MVCF' ) = 1
	THEN
		IF (select count(*) from TBL_INVSERV_CHFIS_CAB where ID_Bodega = _ID_Bodega and ( Cerrado = '1' or Generado = '1') and Status <> 'C' and Fecha >= _Fecha) > 0
		THEN
			_err := 3;
			_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ALM_CHFIS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR');--'ERROR: No se puede generar el movimiento al almacen porque ya existe un chequeo f?sico cerrado en esta bodega, con fecha posterior a este movimiento';
		END IF;
	END IF;

	IF( _TFD = 1 or _TFD = 2 )
	THEN
		_err := 3;
		_result := 'ERROR: La remision no esta sellada completamente, puede que falte generar el PDF. Generalo para poderla cancelar';	
	END IF;

	IF _err = 0
	THEN
		UPDATE TBL_VENTAS_REMISIONES_CAB
		SET Status = 'C'
		WHERE ID_VC = _ID_Remision;
		
		-- procede a cancelar el CFD
		IF _ID_CFD is not null
		THEN
			IF (select count(*) from tbl_cfdven where id_cfd = _id_cfd) = 0 -- El CFDI se gener√≥ internamente
			THEN
				select * into _errpart, _resultpart, _id_cfdres from sp_cfd_cancelar(_ID_CFD) as (err int,  resultpart varchar, clave int);
				IF _errpart <> 0
				THEN
					_err := 3;
					_result := _resultpart;
				ELSE
					UPDATE TBL_VENTAS_REMISIONES_CAB
					SET TFD = 3
					WHERE ID_VC = _ID_Remision;
				END IF;
			ELSE -- Este CFDI fue cargado y enlazado a este registro
				IF (select FSI_Tipo from TBL_CFDVEN where ID_CFD = _ID_CFD) = 'REM' and (select FSI_ID from TBL_CFDVEN where ID_CFD = _ID_CFD) = _ID_Remision
				THEN 
					UPDATE TBL_CFDVEN
					SET FSI_Tipo = 'ENT', FSI_ID = _ID_EntidadVenta
					WHERE ID_CFD = _ID_CFD;
					UPDATE TBL_CFD
					SET FSI_Tipo = 'ENT', FSI_ID = _ID_EntidadVenta
					WHERE ID_CFD = _ID_CFD;
				END IF;
				
				UPDATE TBL_VENTAS_REMISIONES_CAB
				SET ID_CFD = null
				WHERE ID_VC = _ID_Remision;
			END IF;
		ELSIF _EntCFD <> '00'
		THEN
			UPDATE TBL_VENTAS_REMISIONES_CAB
			SET TFD = 3
			WHERE ID_VC = _ID_Remision;
		END IF;
		-- FIN CFD

		-- procede a desligar la cotizacion asociada ( SI LO HAY PARA ESTA REMISION )
		IF _ID_Cotizacion is not null
		THEN
			UPDATE TBL_VENTAS_COTIZACIONES_CAB
			SET Status = 'G', ID_Factura = 0, TipoEnlace = null
			WHERE ID_VC = _ID_Cotizacion;
		END IF;

		-- procede a desligar el pedido asociado ( SI LO HAY PARA ESTA REMISION )
		IF _ID_Pedido is not null
		THEN
			UPDATE TBL_VENTAS_PEDIDOS_CAB
			SET Status = 'G', ID_Factura = 0, TipoEnlace = null
			WHERE ID_VC = _ID_Pedido;
		END IF;
		
		-- procede a cancelar los detalles del movimiento al almacen
		IF _ID_Movimiento is not null
		THEN
			
			SELECT * INTO _errpart, _resultpart, _id_polcost FROM sp_invserv_alm_movs_cancelar( _id_movimiento ) as ( err integer, res varchar, clave integer );
			IF _errpart <> 0
			THEN
				_err := _errpart;
				_result := _resultpart;
			END IF;
		END IF;
	END IF;		

	RETURN QUERY SELECT _err, _result, _ID_Remision;

END
$BODY$
  LANGUAGE plpgsql;
  
  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_ventas_facturas_cancelar(
    _id_factura integer,
    _id_entidadventa smallint)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_Numero int; _Fecha timestamp; _ID_Pol int; _ID_PolCost int; _err int; _result varchar(255); _errpart int; 
	_resultpart varchar(255); _Ref varchar(25); _ID_CXC int; _ID_Movimiento int; _ID_Bodega smallint;
 	_ID_BanCaj int; _Condicion smallint; _mes smallint; _ano smallint; _ID_Pedido int; _ID_Cotizacion int; _ID_Remision int;
 	_ID_CFD int; _TFD smallint; _EntCFD bit(2); _ID_CFDRES int;
 	_REC_TMP_PAGOS RECORD; 
BEGIN
	_err := 0;
	_result := 'La Factura se ha cancelado satisfactoriamente';
	_Fecha := (select Fecha from TBL_VENTAS_FACTURAS_CAB where ID_VC = _ID_Factura);
	_Numero := (select Numero from TBL_VENTAS_FACTURAS_CAB where ID_VC = _ID_Factura);
	_ID_Movimiento := (select ID_PolCost from TBL_VENTAS_FACTURAS_CAB where ID_VC = _ID_Factura); -- el id del movimiento al almacen
	_ID_CXC := (select ID_Pol from TBL_VENTAS_FACTURAS_CAB where ID_VC = _ID_Factura); 
	_ID_Bodega := (select ID_Bodega from TBL_VENTAS_FACTURAS_CAB where ID_VC = _ID_Factura);
	_Condicion := (select Condicion from TBL_VENTAS_FACTURAS_CAB where ID_VC = _ID_Factura);
	
	_mes := date_part('month',_Fecha);
	_ano := date_part('year',_Fecha);
	
	_ID_Cotizacion := (select ID_VC from TBL_VENTAS_COTIZACIONES_CAB where ID_Factura = _ID_Factura and TipoEnlace = 'VFAC');
	_ID_Pedido := (select ID_VC from TBL_VENTAS_PEDIDOS_CAB where ID_Factura = _ID_Factura and TipoEnlace = 'VFAC');
	_ID_Remision := (select ID_VC from TBL_VENTAS_REMISIONES_CAB where ID_Factura = _ID_Factura);

	_ID_CFD := (select ID_CFD from TBL_VENTAS_FACTURAS_CAB WHERE ID_VC = _ID_Factura);
	_TFD := (select TFD from TBL_VENTAS_FACTURAS_CAB WHERE ID_VC = _ID_Factura);
	_EntCFD := (select CFD from TBL_VENTAS_ENTIDADES where ID_EntidadVenta = _ID_EntidadVenta);

	IF(select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano and Cerrado = 1) > 0
	OR (select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano) < 1
	THEN
		_err := 3;
		_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_POLIZAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'ERROR: La fecha de poliza pertenece a un periodo cerrado o inexistente'
	END IF;

	IF ( select ventero from TBL_VARIABLES where ID_Variable = 'MVCF' ) = 1
	THEN
		IF (select count(*) from TBL_INVSERV_CHFIS_CAB where ID_Bodega = _ID_Bodega and ( Cerrado = '1' or Generado = '1') and Status <> 'C' and Fecha >= _Fecha) > 0
		THEN
			_err := 3;
			_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ALM_CHFIS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR');--'ERROR: No se puede generar el movimiento al almacen porque ya existe un chequeo f?sico cerrado en esta bodega, con fecha posterior a este movimiento';
		END IF;
	END IF;

	IF( _TFD = 1 or _TFD = 2 )
	THEN
		_err := 3;
		_result := 'ERROR: La factura no esta sellada completamente, puede que falte generar el PDF. Generalo para poderla cancelar';	
	END IF;

	IF (select count(*) from tbl_ventas_cierres_facturas where id_entidad = _id_entidadventa and numero = _Numero) > 0
	THEN
		_err := 3;
		_result := 'ERROR: Esta factura ya pertenece a un cierre de caja, por lo tanto no se puede cancelar. Debes ingresar una devoluci√≥n en caso de que sea estrictamente necesario este ajuste';	
	END IF;
  
	IF _err = 0
	THEN
		UPDATE TBL_VENTAS_FACTURAS_CAB
		SET Status = 'C'
		WHERE ID_VC = _ID_Factura;
		
		-- procede a cancelar el CFD
		IF _ID_CFD is not null
		THEN
			IF (select count(*) from tbl_cfdven where id_cfd = _id_cfd) = 0 -- El CFDI se gener√≥ internamente
			THEN
				select * into _errpart, _resultpart, _id_cfdres from sp_cfd_cancelar(_ID_CFD) as (err int,  resultpart varchar, clave int);
				IF _errpart <> 0
				THEN
					_err := 3;
					_result := _resultpart;
				ELSE
					UPDATE TBL_VENTAS_FACTURAS_CAB
					SET TFD = 3
					WHERE ID_VC = _ID_Factura;
				END IF;
			ELSE -- Este CFDI fue cargado y enlazado a este registro
				IF (select FSI_Tipo from TBL_CFDVEN where ID_CFD = _ID_CFD) = 'FAC' and (select FSI_ID from TBL_CFDVEN where ID_CFD = _ID_CFD) = _ID_Factura
				THEN 
					UPDATE TBL_CFDVEN
					SET FSI_Tipo = 'ENT', FSI_ID = _ID_EntidadVenta
					WHERE ID_CFD = _ID_CFD;
					UPDATE TBL_CFD
					SET FSI_Tipo = 'ENT', FSI_ID = _ID_EntidadVenta
					WHERE ID_CFD = _ID_CFD;
				END IF;
				
				UPDATE TBL_VENTAS_FACTURAS_CAB
				SET ID_CFD = null
				WHERE ID_VC = _ID_Factura;
			END IF;
		ELSIF _EntCFD <> '00'
		THEN
			UPDATE TBL_VENTAS_FACTURAS_CAB
			SET TFD = 3
			WHERE ID_VC = _ID_Factura;
		END IF;
		-- FIN CFD

		-- procede a desligar la cotizacion asociada ( SI LO HAY PARA ESTA REMISION )
		IF _ID_Cotizacion is not null
		THEN
			UPDATE TBL_VENTAS_COTIZACIONES_CAB
			SET Status = 'G', ID_Factura = 0, TipoEnlace = null
			WHERE ID_VC = _ID_Cotizacion;
		END IF;

		-- procede a desligar el pedido asociado ( SI LO HAY PARA ESTA REMISION )
		IF _ID_Pedido is not null
		THEN
			UPDATE TBL_VENTAS_PEDIDOS_CAB
			SET Status = 'G', ID_Factura = 0, TipoEnlace = null
			WHERE ID_VC = _ID_Pedido;
		END IF;

		IF _ID_Remision is not null
		THEN
			UPDATE TBL_VENTAS_REMISIONES_CAB
			SET ID_Factura = 0
			WHERE ID_VC = _ID_Remision;
		END IF;

		--Procede a la cancelacion de la CXC, PAGOS o Poliza (Ningun pago)
		IF _Condicion = 0
		THEN
			FOR _REC_TMP_PAGOS IN  (select ID_Mov from  tbl_ventas_facturas_pagos where ID_Factura = _ID_Factura)
			LOOP
				SELECT * INTO _errpart, _resultpart, _id_bancaj FROM sp_bancos_movs_cancelar(_REC_TMP_PAGOS.ID_Mov) as ( err integer, res varchar, clave integer );
				IF _errpart <> 0
				THEN
					_err := 3;
					_result := _resultpart;
					EXIT;
				END IF;
			END LOOP;
		ELSIF _Condicion = 1
		THEN
			SELECT * INTO _errpart, _resultpart, _id_pol FROM sp_client_cxc_cancelar(_id_cxc) as ( err integer, res varchar, clave integer );
			IF _errpart <> 0
			THEN
				_err := 3;
				_result := _resultpart;
			END IF;
		ELSE --Ningun pago... id_cxc es en realidad la poliza del documento por cobrar
			--Procede a cancelar la poliza
			IF _ID_CXC is not null
			THEN
				SELECT * INTO _errpart, _resultpart, _id_pol FROM sp_cont_polizas_cancelar(_ID_CXC, _Fecha) as ( err integer, res varchar, clave integer );
				IF _errpart <> 0
				THEN
					_err := 3;
					_result := _resultpart;
				END IF;
			END IF;
		END IF;
		
		-- procede a cancelar los detalles del movimiento al almacen
		IF _err = 0 AND _ID_Movimiento is not null
		THEN
			SELECT * INTO _errpart, _resultpart, _id_polcost FROM sp_invserv_alm_movs_cancelar( _id_movimiento ) as ( err integer, res varchar, clave integer );
			IF _errpart <> 0
			THEN
				_err := _errpart;
				_result := _resultpart;
			END IF;
		END IF;

	END IF;		

	RETURN QUERY SELECT _err, _result, _ID_Factura;

END
$BODY$
  LANGUAGE plpgsql;
--ALTER FUNCTION sp_ventas_facturas_cancelar(integer, smallint)  
  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_ventas_devoluciones_cancelar(
    _id_devolucion integer,
    _id_entidadventa smallint)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_Numero int; _Fecha timestamp; _ID_Pol int; _ID_PolCost int; _err int; _result varchar(255); _errpart int; 
	_resultpart varchar(255); _Ref varchar(25); _ID_CXC int; _ID_Movimiento int; _ID_Bodega smallint;
 	_ID_BanCaj int; _Condicion smallint; _mes smallint; _ano smallint; 
 	_ID_CFD int; _TFD smallint; _EntCFD bit(2); _ID_CFDRES int;
 	_REC_TMP_PAGOS RECORD; 
BEGIN
	_err := 0;
	_result := 'La Devoluci√≥n se ha cancelado satisfactoriamente';
	_Fecha := (select Fecha from TBL_VENTAS_DEVOLUCIONES_CAB where ID_VC = _ID_Devolucion);
	_Numero := (select Numero from TBL_VENTAS_DEVOLUCIONES_CAB where ID_VC = _ID_Devolucion);
	_ID_Movimiento := (select ID_PolCost from TBL_VENTAS_DEVOLUCIONES_CAB where ID_VC = _ID_Devolucion); -- el id del movimiento al almacen
	_ID_CXC := (select ID_Pol from TBL_VENTAS_DEVOLUCIONES_CAB where ID_VC = _ID_Devolucion); 
	_ID_Bodega := (select ID_Bodega from TBL_VENTAS_DEVOLUCIONES_CAB where ID_VC = _ID_Devolucion);
	_Condicion := (select Condicion from TBL_VENTAS_DEVOLUCIONES_CAB where ID_VC = _ID_Devolucion);
	
	_mes := date_part('month',_Fecha);
	_ano := date_part('year',_Fecha);
	
	_ID_CFD := (select ID_CFD from TBL_VENTAS_DEVOLUCIONES_CAB WHERE ID_VC = _ID_Devolucion);
	_TFD := (select TFD from TBL_VENTAS_DEVOLUCIONES_CAB WHERE ID_VC = _ID_Devolucion);
	_EntCFD := (select CFD from TBL_VENTAS_ENTIDADES where ID_EntidadVenta = _ID_EntidadVenta);

	IF(select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano and Cerrado = 1) > 0
	OR (select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano) < 1
	THEN
		_err := 3;
		_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_POLIZAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'ERROR: La fecha de poliza pertenece a un periodo cerrado o inexistente'
	END IF;

	IF ( select ventero from TBL_VARIABLES where ID_Variable = 'MVCF' ) = 1
	THEN
		IF (select count(*) from TBL_INVSERV_CHFIS_CAB where ID_Bodega = _ID_Bodega and ( Cerrado = '1' or Generado = '1') and Status <> 'C' and Fecha >= _Fecha) > 0
		THEN
			_err := 3;
			_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ALM_CHFIS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR');--'ERROR: No se puede generar el movimiento al almacen porque ya existe un chequeo f?sico cerrado en esta bodega, con fecha posterior a este movimiento';
		END IF;
	END IF;

	IF( _TFD = 1 or _TFD = 2 )
	THEN
		_err := 3;
		_result := 'ERROR: La factura no esta sellada completamente, puede que falte generar el PDF. Generalo para poderla cancelar';	
	END IF;

	IF _err = 0
	THEN
		UPDATE TBL_VENTAS_DEVOLUCIONES_CAB
		SET Status = 'C'
		WHERE ID_VC = _ID_Devolucion;
		
		-- procede a cancelar el CFD
		IF _ID_CFD is not null
		THEN
			IF (select count(*) from tbl_cfdven where id_cfd = _id_cfd) = 0 -- El CFDI se gener√≥ internamente
			THEN
				select * into _errpart, _resultpart, _id_cfdres from sp_cfd_cancelar(_ID_CFD) as (err int,  resultpart varchar, clave int);
				IF _errpart <> 0
				THEN
					_err := 3;
					_result := _resultpart;
				ELSE
					UPDATE TBL_VENTAS_DEVOLUCIONES_CAB
					SET TFD = 3
					WHERE ID_VC = _ID_Devolucion;
				END IF;
			ELSE -- Este CFDI fue cargado y enlazado a este registro
				IF (select FSI_Tipo from TBL_CFDVEN where ID_CFD = _ID_CFD) = 'DSV' and (select FSI_ID from TBL_CFDVEN where ID_CFD = _ID_CFD) = _ID_Devolucion
				THEN 
					UPDATE TBL_CFDVEN
					SET FSI_Tipo = 'ENT', FSI_ID = _ID_EntidadVenta
					WHERE ID_CFD = _ID_CFD;
					UPDATE TBL_CFD
					SET FSI_Tipo = 'ENT', FSI_ID = _ID_EntidadVenta
					WHERE ID_CFD = _ID_CFD;
				END IF;
				
				UPDATE TBL_VENTAS_DEVOLUCIONES_CAB
				SET ID_CFD = null
				WHERE ID_VC = _ID_Devolucion;
			END IF;
		ELSIF _EntCFD <> '00'
		THEN
			UPDATE TBL_VENTAS_DEVOLUCIONES_CAB
			SET TFD = 3
			WHERE ID_VC = _ID_Devolucion;
		END IF;
		-- FIN CFD

		--Procede a la cancelacion de la CXC o PAGOS
		IF _Condicion = 0
		THEN
			FOR _REC_TMP_PAGOS IN  (select ID_Mov from  tbl_ventas_devoluciones_pagos where ID_Devolucion = _ID_Devolucion)
			LOOP
				SELECT * INTO _errpart, _resultpart, _id_bancaj FROM sp_bancos_movs_cancelar(_REC_TMP_PAGOS.ID_Mov) as ( err integer, res varchar, clave integer );
				IF _errpart <> 0
				THEN
					_err := 3;
					_result := _resultpart;
					EXIT;
				END IF;
			END LOOP;
		ELSIF _Condicion = 1
		THEN
			SELECT * INTO _errpart, _resultpart, _id_pol FROM sp_client_cxc_cancelar(_id_cxc) as ( err integer, res varchar, clave integer );
			IF _errpart <> 0
			THEN
				_err := 3;
				_result := _resultpart;
			END IF;
		ELSE --Ningun pago... id_cxc es en realidad la poliza del documento por cobrar
			--Procede a cancelar la poliza
			IF _ID_CXC is not null
			THEN
				SELECT * INTO _errpart, _resultpart, _id_pol FROM sp_cont_polizas_cancelar(_ID_CXC, _Fecha) as ( err integer, res varchar, clave integer );
				IF _errpart <> 0
				THEN
					_err := 3;
					_result := _resultpart;
				END IF;
			END IF;
		END IF;
		
		-- procede a cancelar los detalles del movimiento al almacen
		IF _err = 0 AND _ID_Movimiento is not null
		THEN
			SELECT * INTO _errpart, _resultpart, _id_polcost FROM sp_invserv_alm_movs_cancelar( _id_movimiento ) as ( err integer, res varchar, clave integer );
			IF _errpart <> 0
			THEN
				_err := _errpart;
				_result := _resultpart;
			END IF;
		END IF;

	END IF;		

	RETURN QUERY SELECT _err, _result, _ID_Devolucion;

END
$BODY$
  LANGUAGE plpgsql;
--ALTER FUNCTION sp_ventas_devoluciones_cancelar(integer, smallint)


--@FIN_BLOQUE
INSERT INTO tbl_variables(id_variable, descripcion, ventero, vdecimal, vfecha, valfanumerico, desistema, modulo)
VALUES('PACTEST', 'BOOL|-|-|-|-', 1, null, null, '', '1', 'ADM');

INSERT INTO tbl_variables(id_variable, descripcion, ventero, vdecimal, vfecha, valfanumerico, desistema, modulo)
VALUES('VERSION', '', 0, 4.0, null, '4.0.0', '1', 'SYS');

INSERT INTO tbl_variables(id_variable, descripcion, ventero, vdecimal, vfecha, valfanumerico, desistema, modulo)
VALUES('RFC', '', null, null, null, '', '1', 'SYS');
  
INSERT INTO tbl_variables(id_variable, descripcion, ventero, vdecimal, vfecha, valfanumerico, desistema, modulo)
VALUES('EMPRESA', '', null, null, null, '', '1', 'SYS');

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION getcfdimetodopago(
    _igegtr character varying,
    _id_vc integer,
    _condicion smallint,
    _efectivo numeric,
    _bancos numeric,
    _cl_metododepago character varying)
  RETURNS text AS
$BODY$
DECLARE
	_resultado text; _referencia text;
BEGIN
	_resultado := '';

	IF _igegtr <> 'T' --No es traslado
	THEN
		IF _condicion = 0 --Es CFDI de contado... Ya sea Ingreso o Egreso
		THEN 
			IF _igegtr = 'I'
			THEN
				FOR _referencia
				IN 
					select coalesce(s.clave,'99') as referencia
          from tbl_ventas_facturas_pagos f
            join tbl_bancos_movimientos b on f.id_mov = b.id
            left outer join tbl_sat_metodospago_cfdi s on b.id_satmetodospago = s.clave
          where f.id_factura = _id_vc
          order by b.deposito desc
				LOOP
					_resultado := _resultado || ',' || _referencia; 
				END LOOP;
			ELSIF _igegtr = 'E'
			THEN
				FOR _referencia
				IN 
					select coalesce(s.clave,'99') as referencia
          from tbl_ventas_devoluciones_pagos f
						join tbl_bancos_movimientos b on f.id_mov = b.id
						left outer join tbl_sat_metodospago_cfdi s on b.id_satmetodospago = s.clave
					where f.id_devolucion = _id_vc
					order by b.retiro desc
				LOOP
					_resultado := _resultado || ',' || _referencia; 
				END LOOP;
			END IF;
		ELSE --Si es un ingreso o egreso de credito, obtendr√° el m√©todo de pago mandado desde el cabecero de factura o devolucion
			_resultado := _cl_metododepago;
		END IF;
	END IF;

	IF _resultado is not null and _resultado <> ''
	THEN
		_resultado := TRIM(_resultado);
		IF substring(_resultado from 1 for 1) = ','
		THEN
      _resultado := overlay(_resultado placing '' from 1 for 1);
		END IF;
	END IF;

	IF _resultado is null or _resultado = '' --En traslados ser√° cadena vac√≠a
	THEN
		_resultado := '99'; --99 es el metodo de pago de cfdi que no aplica. Se ajustara por lo regular a traslados
	END IF;

	return _resultado;

END
$BODY$
  LANGUAGE plpgsql;
--ALTER FUNCTION getcfdimetodopago(character varying, integer, smallint, numeric, numeric, character varying)

--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_cfd_ventas_facturas_cab_generar AS 
 SELECT ve.id_entidadventa, ve.descripcion, ve.fija, ve.iva AS iva_entidad, ve.cfd, 
        CASE
            WHEN ve.cfd_noaprobacion <> 0 THEN ( SELECT tbl_cfd_folios.cfd_serie
               FROM tbl_cfd_folios
              WHERE tbl_cfd_folios.cfd_noaprobacion = ve.cfd_noaprobacion)
            ELSE ''::character varying
        END AS cfd_serie, 
        CASE
            WHEN ve.cfd_noaprobacion <> 0 THEN ( SELECT tbl_cfd_folios.cfd_folio
               FROM tbl_cfd_folios
              WHERE tbl_cfd_folios.cfd_noaprobacion = ve.cfd_noaprobacion)
            ELSE 0
        END AS cfd_folio, 
        CASE
            WHEN ve.cfd_noaprobacion <> 0 THEN ( SELECT tbl_cfd_folios.cfd_folioini
               FROM tbl_cfd_folios
              WHERE tbl_cfd_folios.cfd_noaprobacion = ve.cfd_noaprobacion)
            ELSE 0
        END AS cfd_folioini, 
        CASE
            WHEN ve.cfd_noaprobacion <> 0 THEN ( SELECT tbl_cfd_folios.cfd_foliofin
               FROM tbl_cfd_folios
              WHERE tbl_cfd_folios.cfd_noaprobacion = ve.cfd_noaprobacion)
            ELSE 0
        END AS cfd_foliofin, ve.cfd_noaprobacion, 
        CASE
            WHEN ve.cfd_noaprobacion <> 0 THEN (( SELECT tbl_cfd_folios.cfd_anoaprobacion
               FROM tbl_cfd_folios
              WHERE tbl_cfd_folios.cfd_noaprobacion = ve.cfd_noaprobacion))::integer
            ELSE 2000
        END AS cfd_anoaprobacion, ve.cfd_nocertificado, 
        CASE
            WHEN ve.cfd_nocertificado::text <> ''::text THEN ( SELECT tbl_cfd_certificados.cfd_archivocertificado
               FROM tbl_cfd_certificados
              WHERE tbl_cfd_certificados.cfd_nocertificado::text = ve.cfd_nocertificado::text)
            ELSE ''::character varying
        END AS cfd_archivocertificado, 
        CASE
            WHEN ve.cfd_nocertificado::text <> ''::text THEN (( SELECT tbl_cfd_certificados.cfd_caducidadcertificado
               FROM tbl_cfd_certificados
              WHERE tbl_cfd_certificados.cfd_nocertificado::text = ve.cfd_nocertificado::text))::timestamp with time zone
            ELSE now()
        END AS cfd_caducidadcertificado, 
        CASE
            WHEN ve.cfd_nocertificado::text <> ''::text THEN ( SELECT tbl_cfd_certificados.cfd_archivollave
               FROM tbl_cfd_certificados
              WHERE tbl_cfd_certificados.cfd_nocertificado::text = ve.cfd_nocertificado::text)
            ELSE ''::character varying
        END AS cfd_archivollave, 
        CASE
            WHEN ve.cfd_nocertificado::text <> ''::text THEN ( SELECT tbl_cfd_certificados.cfd_clavellave
               FROM tbl_cfd_certificados
              WHERE tbl_cfd_certificados.cfd_nocertificado::text = ve.cfd_nocertificado::text)
            ELSE ''::character varying
        END AS cfd_clavellave, ve.cfd_id_expedicion, 
        CASE
            WHEN ve.cfd_id_expedicion <> 0 THEN ( SELECT tbl_cfd_expediciones.cfd_calle
               FROM tbl_cfd_expediciones
              WHERE tbl_cfd_expediciones.cfd_id_expedicion = ve.cfd_id_expedicion)
            ELSE ''::character varying
        END AS cfd_calle, 
        CASE
            WHEN ve.cfd_id_expedicion <> 0 THEN ( SELECT tbl_cfd_expediciones.cfd_noext
               FROM tbl_cfd_expediciones
              WHERE tbl_cfd_expediciones.cfd_id_expedicion = ve.cfd_id_expedicion)
            ELSE ''::character varying
        END AS cfd_noext, 
        CASE
            WHEN ve.cfd_id_expedicion <> 0 THEN ( SELECT tbl_cfd_expediciones.cfd_noint
               FROM tbl_cfd_expediciones
              WHERE tbl_cfd_expediciones.cfd_id_expedicion = ve.cfd_id_expedicion)
            ELSE ''::character varying
        END AS cfd_noint, 
        CASE
            WHEN ve.cfd_id_expedicion <> 0 THEN ( SELECT tbl_cfd_expediciones.cfd_colonia
               FROM tbl_cfd_expediciones
              WHERE tbl_cfd_expediciones.cfd_id_expedicion = ve.cfd_id_expedicion)
            ELSE ''::character varying
        END AS cfd_colonia, 
        CASE
            WHEN ve.cfd_id_expedicion <> 0 THEN ( SELECT tbl_cfd_expediciones.cfd_localidad
               FROM tbl_cfd_expediciones
              WHERE tbl_cfd_expediciones.cfd_id_expedicion = ve.cfd_id_expedicion)
            ELSE ''::character varying
        END AS cfd_localidad, 
        CASE
            WHEN ve.cfd_id_expedicion <> 0 THEN ( SELECT tbl_cfd_expediciones.cfd_municipio
               FROM tbl_cfd_expediciones
              WHERE tbl_cfd_expediciones.cfd_id_expedicion = ve.cfd_id_expedicion)
            ELSE ''::character varying
        END AS cfd_municipio, 
        CASE
            WHEN ve.cfd_id_expedicion <> 0 THEN ( SELECT tbl_cfd_expediciones.cfd_estado
               FROM tbl_cfd_expediciones
              WHERE tbl_cfd_expediciones.cfd_id_expedicion = ve.cfd_id_expedicion)
            ELSE ''::character varying
        END AS cfd_estado, 
        CASE
            WHEN ve.cfd_id_expedicion <> 0 THEN ( SELECT tbl_cfd_expediciones.cfd_pais
               FROM tbl_cfd_expediciones
              WHERE tbl_cfd_expediciones.cfd_id_expedicion = ve.cfd_id_expedicion)
            ELSE ''::character varying
        END AS cfd_pais, 
        CASE
            WHEN ve.cfd_id_expedicion <> 0 THEN ( SELECT tbl_cfd_expediciones.cfd_cp
               FROM tbl_cfd_expediciones
              WHERE tbl_cfd_expediciones.cfd_id_expedicion = ve.cfd_id_expedicion)
            ELSE ''::character varying
        END AS cfd_cp, fc.id_vc AS id_factura, fc.numero, fc.id_clipro AS id_cliente, fc.fecha, fc.referencia, fc.status, fc.moneda, mon.moneda AS monedasim, fc.tc, fc.fechaenvio, fc.condicion, fc.obs, fc.importe, fc.descuento, fc.subtotal, fc.iva, fc.ieps, fc.ivaret, fc.isrret, fc.total, fc.ref, fc.id_pol, fc.id_polcost, fc.id_bodega, fc.mimporte, fc.mdescuento, fc.msubtotal, fc.miva, fc.mtotal, fc.efectivo, fc.bancos, fc.cambio, fc.id_vendedor, 
        CASE
            WHEN fc.id_clipro = 0 THEN 'Cliente de Mostrador'::character varying
            ELSE ( SELECT p.nombre
               FROM tbl_client_client p
              WHERE fc.id_clipro = p.id_clave AND p.id_tipo = 'CL'::bpchar)
        END AS nombre, 
        CASE
            WHEN fc.id_clipro = 0 THEN 'XAXX010101000'::character varying
            ELSE ( SELECT p.rfc
               FROM tbl_client_client p
              WHERE fc.id_clipro = p.id_clave AND p.id_tipo = 'CL'::bpchar)
        END AS rfc, 
        CASE
            WHEN fc.id_clipro = 0 THEN 0
            ELSE (( SELECT p.dias
               FROM tbl_client_client p
              WHERE fc.id_clipro = p.id_clave AND p.id_tipo = 'CL'::bpchar))::integer
        END AS diascredito, 
        CASE
            WHEN fc.id_clipro = 0 THEN ''::character varying
            ELSE ( SELECT p.direccion
               FROM tbl_client_client p
              WHERE fc.id_clipro = p.id_clave AND p.id_tipo = 'CL'::bpchar)
        END AS calle, 
        CASE
            WHEN fc.id_clipro = 0 THEN ''::character varying
            ELSE ( SELECT p.noext
               FROM tbl_client_client p
              WHERE fc.id_clipro = p.id_clave AND p.id_tipo = 'CL'::bpchar)
        END AS noext, 
        CASE
            WHEN fc.id_clipro = 0 THEN ''::character varying
            ELSE ( SELECT p.noint
               FROM tbl_client_client p
              WHERE fc.id_clipro = p.id_clave AND p.id_tipo = 'CL'::bpchar)
        END AS noint, 
        CASE
            WHEN fc.id_clipro = 0 THEN ''::character varying
            ELSE ( SELECT p.colonia
               FROM tbl_client_client p
              WHERE fc.id_clipro = p.id_clave AND p.id_tipo = 'CL'::bpchar)
        END AS colonia, 
        CASE
            WHEN fc.id_clipro = 0 THEN ''::character varying(80)
            ELSE ( SELECT p.poblacion
               FROM tbl_client_client p
              WHERE fc.id_clipro = p.id_clave AND p.id_tipo = 'CL'::bpchar)
        END AS localidad, 
        CASE
            WHEN fc.id_clipro = 0 THEN ''::character varying
            ELSE ( SELECT p.municipio
               FROM tbl_client_client p
              WHERE fc.id_clipro = p.id_clave AND p.id_tipo = 'CL'::bpchar)
        END AS municipio, 
        CASE
            WHEN fc.id_clipro = 0 THEN ''::character varying
            ELSE ( SELECT p.estado
               FROM tbl_client_client p
              WHERE fc.id_clipro = p.id_clave AND p.id_tipo = 'CL'::bpchar)
        END AS estado, 
        CASE
            WHEN fc.id_clipro = 0 THEN 'Mexico'::character varying
            ELSE ( SELECT p.pais
               FROM tbl_client_client p
              WHERE fc.id_clipro = p.id_clave AND p.id_tipo = 'CL'::bpchar)
        END AS pais, 
        CASE
            WHEN fc.id_clipro = 0 THEN ''::character varying
            ELSE ( SELECT p.cp
               FROM tbl_client_client p
              WHERE fc.id_clipro = p.id_clave AND p.id_tipo = 'CL'::bpchar)
        END AS cp, 
        CASE
            WHEN fc.id_clipro = 0 THEN getcfdimetodopago('I'::character varying, fc.id_vc, fc.condicion, fc.efectivo, fc.bancos, ''::character varying)
            ELSE getcfdimetodopago('I'::character varying, fc.id_vc, fc.condicion, fc.efectivo, fc.bancos, ( SELECT p.metododepago
               FROM tbl_client_client p
              WHERE fc.id_clipro = p.id_clave AND p.id_tipo = 'CL'::bpchar))
        END AS metododepago, mon.id_satmoneda AS monedasat
   FROM tbl_ventas_facturas_cab fc
   JOIN tbl_ventas_entidades ve ON fc.id_entidad = ve.id_entidadventa
   JOIN tbl_cont_monedas mon ON fc.moneda = mon.clave;

--ALTER TABLE view_cfd_ventas_facturas_cab_generar


--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_cfd_ventas_remisiones_cab_generar AS 
 SELECT ve.id_entidadventa, ve.descripcion, ve.fija, ve.iva AS iva_entidad, ve.cfd, 
        CASE
            WHEN ve.cfd_noaprobacion <> 0 THEN ( SELECT tbl_cfd_folios.cfd_serie
               FROM tbl_cfd_folios
              WHERE tbl_cfd_folios.cfd_noaprobacion = ve.cfd_noaprobacion)
            ELSE ''::character varying
        END AS cfd_serie, 
        CASE
            WHEN ve.cfd_noaprobacion <> 0 THEN ( SELECT tbl_cfd_folios.cfd_folio
               FROM tbl_cfd_folios
              WHERE tbl_cfd_folios.cfd_noaprobacion = ve.cfd_noaprobacion)
            ELSE 0
        END AS cfd_folio, 
        CASE
            WHEN ve.cfd_noaprobacion <> 0 THEN ( SELECT tbl_cfd_folios.cfd_folioini
               FROM tbl_cfd_folios
              WHERE tbl_cfd_folios.cfd_noaprobacion = ve.cfd_noaprobacion)
            ELSE 0
        END AS cfd_folioini, 
        CASE
            WHEN ve.cfd_noaprobacion <> 0 THEN ( SELECT tbl_cfd_folios.cfd_foliofin
               FROM tbl_cfd_folios
              WHERE tbl_cfd_folios.cfd_noaprobacion = ve.cfd_noaprobacion)
            ELSE 0
        END AS cfd_foliofin, ve.cfd_noaprobacion, 
        CASE
            WHEN ve.cfd_noaprobacion <> 0 THEN (( SELECT tbl_cfd_folios.cfd_anoaprobacion
               FROM tbl_cfd_folios
              WHERE tbl_cfd_folios.cfd_noaprobacion = ve.cfd_noaprobacion))::integer
            ELSE 2000
        END AS cfd_anoaprobacion, ve.cfd_nocertificado, 
        CASE
            WHEN ve.cfd_nocertificado::text <> ''::text THEN ( SELECT tbl_cfd_certificados.cfd_archivocertificado
               FROM tbl_cfd_certificados
              WHERE tbl_cfd_certificados.cfd_nocertificado::text = ve.cfd_nocertificado::text)
            ELSE ''::character varying
        END AS cfd_archivocertificado, 
        CASE
            WHEN ve.cfd_nocertificado::text <> ''::text THEN (( SELECT tbl_cfd_certificados.cfd_caducidadcertificado
               FROM tbl_cfd_certificados
              WHERE tbl_cfd_certificados.cfd_nocertificado::text = ve.cfd_nocertificado::text))::timestamp with time zone
            ELSE now()
        END AS cfd_caducidadcertificado, 
        CASE
            WHEN ve.cfd_nocertificado::text <> ''::text THEN ( SELECT tbl_cfd_certificados.cfd_archivollave
               FROM tbl_cfd_certificados
              WHERE tbl_cfd_certificados.cfd_nocertificado::text = ve.cfd_nocertificado::text)
            ELSE ''::character varying
        END AS cfd_archivollave, 
        CASE
            WHEN ve.cfd_nocertificado::text <> ''::text THEN ( SELECT tbl_cfd_certificados.cfd_clavellave
               FROM tbl_cfd_certificados
              WHERE tbl_cfd_certificados.cfd_nocertificado::text = ve.cfd_nocertificado::text)
            ELSE ''::character varying
        END AS cfd_clavellave, ve.cfd_id_expedicion, 
        CASE
            WHEN ve.cfd_id_expedicion <> 0 THEN ( SELECT tbl_cfd_expediciones.cfd_calle
               FROM tbl_cfd_expediciones
              WHERE tbl_cfd_expediciones.cfd_id_expedicion = ve.cfd_id_expedicion)
            ELSE ''::character varying
        END AS cfd_calle, 
        CASE
            WHEN ve.cfd_id_expedicion <> 0 THEN ( SELECT tbl_cfd_expediciones.cfd_noext
               FROM tbl_cfd_expediciones
              WHERE tbl_cfd_expediciones.cfd_id_expedicion = ve.cfd_id_expedicion)
            ELSE ''::character varying
        END AS cfd_noext, 
        CASE
            WHEN ve.cfd_id_expedicion <> 0 THEN ( SELECT tbl_cfd_expediciones.cfd_noint
               FROM tbl_cfd_expediciones
              WHERE tbl_cfd_expediciones.cfd_id_expedicion = ve.cfd_id_expedicion)
            ELSE ''::character varying
        END AS cfd_noint, 
        CASE
            WHEN ve.cfd_id_expedicion <> 0 THEN ( SELECT tbl_cfd_expediciones.cfd_colonia
               FROM tbl_cfd_expediciones
              WHERE tbl_cfd_expediciones.cfd_id_expedicion = ve.cfd_id_expedicion)
            ELSE ''::character varying
        END AS cfd_colonia, 
        CASE
            WHEN ve.cfd_id_expedicion <> 0 THEN ( SELECT tbl_cfd_expediciones.cfd_localidad
               FROM tbl_cfd_expediciones
              WHERE tbl_cfd_expediciones.cfd_id_expedicion = ve.cfd_id_expedicion)
            ELSE ''::character varying
        END AS cfd_localidad, 
        CASE
            WHEN ve.cfd_id_expedicion <> 0 THEN ( SELECT tbl_cfd_expediciones.cfd_municipio
               FROM tbl_cfd_expediciones
              WHERE tbl_cfd_expediciones.cfd_id_expedicion = ve.cfd_id_expedicion)
            ELSE ''::character varying
        END AS cfd_municipio, 
        CASE
            WHEN ve.cfd_id_expedicion <> 0 THEN ( SELECT tbl_cfd_expediciones.cfd_estado
               FROM tbl_cfd_expediciones
              WHERE tbl_cfd_expediciones.cfd_id_expedicion = ve.cfd_id_expedicion)
            ELSE ''::character varying
        END AS cfd_estado, 
        CASE
            WHEN ve.cfd_id_expedicion <> 0 THEN ( SELECT tbl_cfd_expediciones.cfd_pais
               FROM tbl_cfd_expediciones
              WHERE tbl_cfd_expediciones.cfd_id_expedicion = ve.cfd_id_expedicion)
            ELSE ''::character varying
        END AS cfd_pais, 
        CASE
            WHEN ve.cfd_id_expedicion <> 0 THEN ( SELECT tbl_cfd_expediciones.cfd_cp
               FROM tbl_cfd_expediciones
              WHERE tbl_cfd_expediciones.cfd_id_expedicion = ve.cfd_id_expedicion)
            ELSE ''::character varying
        END AS cfd_cp, fc.id_vc AS id_factura, fc.numero, fc.id_clipro AS id_cliente, fc.fecha, fc.referencia, fc.status, fc.moneda, mon.moneda AS monedasim, fc.tc, fc.fechaenvio, fc.condicion, fc.obs, fc.importe, fc.descuento, fc.subtotal, fc.iva, fc.ieps, fc.ivaret, fc.isrret, fc.total, fc.ref, fc.id_pol, fc.id_polcost, fc.id_bodega, fc.mimporte, fc.mdescuento, fc.msubtotal, fc.miva, fc.mtotal, fc.efectivo, fc.bancos, fc.cambio, fc.id_vendedor, 
        CASE
            WHEN fc.id_clipro = 0 THEN 'Cliente de Mostrador'::character varying
            ELSE ( SELECT p.nombre
               FROM tbl_client_client p
              WHERE fc.id_clipro = p.id_clave AND p.id_tipo = 'CL'::bpchar)
        END AS nombre, 
        CASE
            WHEN fc.id_clipro = 0 THEN 'XAXX010101000'::character varying
            ELSE ( SELECT p.rfc
               FROM tbl_client_client p
              WHERE fc.id_clipro = p.id_clave AND p.id_tipo = 'CL'::bpchar)
        END AS rfc, 
        CASE
            WHEN fc.id_clipro = 0 THEN 0
            ELSE (( SELECT p.dias
               FROM tbl_client_client p
              WHERE fc.id_clipro = p.id_clave AND p.id_tipo = 'CL'::bpchar))::integer
        END AS diascredito, 
        CASE
            WHEN fc.id_clipro = 0 THEN ''::character varying
            ELSE ( SELECT p.direccion
               FROM tbl_client_client p
              WHERE fc.id_clipro = p.id_clave AND p.id_tipo = 'CL'::bpchar)
        END AS calle, 
        CASE
            WHEN fc.id_clipro = 0 THEN ''::character varying
            ELSE ( SELECT p.noext
               FROM tbl_client_client p
              WHERE fc.id_clipro = p.id_clave AND p.id_tipo = 'CL'::bpchar)
        END AS noext, 
        CASE
            WHEN fc.id_clipro = 0 THEN ''::character varying
            ELSE ( SELECT p.noint
               FROM tbl_client_client p
              WHERE fc.id_clipro = p.id_clave AND p.id_tipo = 'CL'::bpchar)
        END AS noint, 
        CASE
            WHEN fc.id_clipro = 0 THEN ''::character varying
            ELSE ( SELECT p.colonia
               FROM tbl_client_client p
              WHERE fc.id_clipro = p.id_clave AND p.id_tipo = 'CL'::bpchar)
        END AS colonia, 
        CASE
            WHEN fc.id_clipro = 0 THEN ''::character varying(80)
            ELSE ( SELECT p.poblacion
               FROM tbl_client_client p
              WHERE fc.id_clipro = p.id_clave AND p.id_tipo = 'CL'::bpchar)
        END AS localidad, 
        CASE
            WHEN fc.id_clipro = 0 THEN ''::character varying
            ELSE ( SELECT p.municipio
               FROM tbl_client_client p
              WHERE fc.id_clipro = p.id_clave AND p.id_tipo = 'CL'::bpchar)
        END AS municipio, 
        CASE
            WHEN fc.id_clipro = 0 THEN ''::character varying
            ELSE ( SELECT p.estado
               FROM tbl_client_client p
              WHERE fc.id_clipro = p.id_clave AND p.id_tipo = 'CL'::bpchar)
        END AS estado, 
        CASE
            WHEN fc.id_clipro = 0 THEN 'Mexico'::character varying
            ELSE ( SELECT p.pais
               FROM tbl_client_client p
              WHERE fc.id_clipro = p.id_clave AND p.id_tipo = 'CL'::bpchar)
        END AS pais, 
        CASE
            WHEN fc.id_clipro = 0 THEN ''::character varying
            ELSE ( SELECT p.cp
               FROM tbl_client_client p
              WHERE fc.id_clipro = p.id_clave AND p.id_tipo = 'CL'::bpchar)
        END AS cp, 
        CASE
            WHEN fc.id_clipro = 0 THEN getcfdimetodopago('T'::character varying, fc.id_vc, fc.condicion, fc.efectivo, fc.bancos, ''::character varying)
            ELSE getcfdimetodopago('T'::character varying, fc.id_vc, fc.condicion, fc.efectivo, fc.bancos, ( SELECT p.metododepago
               FROM tbl_client_client p
              WHERE fc.id_clipro = p.id_clave AND p.id_tipo = 'CL'::bpchar))
        END AS metododepago, mon.id_satmoneda AS monedasat
   FROM tbl_ventas_remisiones_cab fc
   JOIN tbl_ventas_entidades ve ON fc.id_entidad = ve.id_entidadventa
   JOIN tbl_cont_monedas mon ON fc.moneda = mon.clave;

--ALTER TABLE view_cfd_ventas_remisiones_cab_generar

--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_cfd_ventas_devoluciones_cab_generar AS 
 SELECT ve.id_entidadventa, ve.descripcion, ve.fija, ve.iva AS iva_entidad, ve.cfd, 
        CASE
            WHEN ve.cfd_noaprobacion <> 0 THEN ( SELECT tbl_cfd_folios.cfd_serie
               FROM tbl_cfd_folios
              WHERE tbl_cfd_folios.cfd_noaprobacion = ve.cfd_noaprobacion)
            ELSE ''::character varying
        END AS cfd_serie, 
        CASE
            WHEN ve.cfd_noaprobacion <> 0 THEN ( SELECT tbl_cfd_folios.cfd_folio
               FROM tbl_cfd_folios
              WHERE tbl_cfd_folios.cfd_noaprobacion = ve.cfd_noaprobacion)
            ELSE 0
        END AS cfd_folio, 
        CASE
            WHEN ve.cfd_noaprobacion <> 0 THEN ( SELECT tbl_cfd_folios.cfd_folioini
               FROM tbl_cfd_folios
              WHERE tbl_cfd_folios.cfd_noaprobacion = ve.cfd_noaprobacion)
            ELSE 0
        END AS cfd_folioini, 
        CASE
            WHEN ve.cfd_noaprobacion <> 0 THEN ( SELECT tbl_cfd_folios.cfd_foliofin
               FROM tbl_cfd_folios
              WHERE tbl_cfd_folios.cfd_noaprobacion = ve.cfd_noaprobacion)
            ELSE 0
        END AS cfd_foliofin, ve.cfd_noaprobacion, 
        CASE
            WHEN ve.cfd_noaprobacion <> 0 THEN (( SELECT tbl_cfd_folios.cfd_anoaprobacion
               FROM tbl_cfd_folios
              WHERE tbl_cfd_folios.cfd_noaprobacion = ve.cfd_noaprobacion))::integer
            ELSE 2000
        END AS cfd_anoaprobacion, ve.cfd_nocertificado, 
        CASE
            WHEN ve.cfd_nocertificado::text <> ''::text THEN ( SELECT tbl_cfd_certificados.cfd_archivocertificado
               FROM tbl_cfd_certificados
              WHERE tbl_cfd_certificados.cfd_nocertificado::text = ve.cfd_nocertificado::text)
            ELSE ''::character varying
        END AS cfd_archivocertificado, 
        CASE
            WHEN ve.cfd_nocertificado::text <> ''::text THEN (( SELECT tbl_cfd_certificados.cfd_caducidadcertificado
               FROM tbl_cfd_certificados
              WHERE tbl_cfd_certificados.cfd_nocertificado::text = ve.cfd_nocertificado::text))::timestamp with time zone
            ELSE now()
        END AS cfd_caducidadcertificado, 
        CASE
            WHEN ve.cfd_nocertificado::text <> ''::text THEN ( SELECT tbl_cfd_certificados.cfd_archivollave
               FROM tbl_cfd_certificados
              WHERE tbl_cfd_certificados.cfd_nocertificado::text = ve.cfd_nocertificado::text)
            ELSE ''::character varying
        END AS cfd_archivollave, 
        CASE
            WHEN ve.cfd_nocertificado::text <> ''::text THEN ( SELECT tbl_cfd_certificados.cfd_clavellave
               FROM tbl_cfd_certificados
              WHERE tbl_cfd_certificados.cfd_nocertificado::text = ve.cfd_nocertificado::text)
            ELSE ''::character varying
        END AS cfd_clavellave, ve.cfd_id_expedicion, 
        CASE
            WHEN ve.cfd_id_expedicion <> 0 THEN ( SELECT tbl_cfd_expediciones.cfd_calle
               FROM tbl_cfd_expediciones
              WHERE tbl_cfd_expediciones.cfd_id_expedicion = ve.cfd_id_expedicion)
            ELSE ''::character varying
        END AS cfd_calle, 
        CASE
            WHEN ve.cfd_id_expedicion <> 0 THEN ( SELECT tbl_cfd_expediciones.cfd_noext
               FROM tbl_cfd_expediciones
              WHERE tbl_cfd_expediciones.cfd_id_expedicion = ve.cfd_id_expedicion)
            ELSE ''::character varying
        END AS cfd_noext, 
        CASE
            WHEN ve.cfd_id_expedicion <> 0 THEN ( SELECT tbl_cfd_expediciones.cfd_noint
               FROM tbl_cfd_expediciones
              WHERE tbl_cfd_expediciones.cfd_id_expedicion = ve.cfd_id_expedicion)
            ELSE ''::character varying
        END AS cfd_noint, 
        CASE
            WHEN ve.cfd_id_expedicion <> 0 THEN ( SELECT tbl_cfd_expediciones.cfd_colonia
               FROM tbl_cfd_expediciones
              WHERE tbl_cfd_expediciones.cfd_id_expedicion = ve.cfd_id_expedicion)
            ELSE ''::character varying
        END AS cfd_colonia, 
        CASE
            WHEN ve.cfd_id_expedicion <> 0 THEN ( SELECT tbl_cfd_expediciones.cfd_localidad
               FROM tbl_cfd_expediciones
              WHERE tbl_cfd_expediciones.cfd_id_expedicion = ve.cfd_id_expedicion)
            ELSE ''::character varying
        END AS cfd_localidad, 
        CASE
            WHEN ve.cfd_id_expedicion <> 0 THEN ( SELECT tbl_cfd_expediciones.cfd_municipio
               FROM tbl_cfd_expediciones
              WHERE tbl_cfd_expediciones.cfd_id_expedicion = ve.cfd_id_expedicion)
            ELSE ''::character varying
        END AS cfd_municipio, 
        CASE
            WHEN ve.cfd_id_expedicion <> 0 THEN ( SELECT tbl_cfd_expediciones.cfd_estado
               FROM tbl_cfd_expediciones
              WHERE tbl_cfd_expediciones.cfd_id_expedicion = ve.cfd_id_expedicion)
            ELSE ''::character varying
        END AS cfd_estado, 
        CASE
            WHEN ve.cfd_id_expedicion <> 0 THEN ( SELECT tbl_cfd_expediciones.cfd_pais
               FROM tbl_cfd_expediciones
              WHERE tbl_cfd_expediciones.cfd_id_expedicion = ve.cfd_id_expedicion)
            ELSE ''::character varying
        END AS cfd_pais, 
        CASE
            WHEN ve.cfd_id_expedicion <> 0 THEN ( SELECT tbl_cfd_expediciones.cfd_cp
               FROM tbl_cfd_expediciones
              WHERE tbl_cfd_expediciones.cfd_id_expedicion = ve.cfd_id_expedicion)
            ELSE ''::character varying
        END AS cfd_cp, fc.id_vc AS id_factura, fc.numero, fc.id_clipro AS id_cliente, fc.fecha, fc.referencia, fc.status, fc.moneda, mon.moneda AS monedasim, fc.tc, fc.fechaenvio, fc.condicion, fc.obs, fc.importe, fc.descuento, fc.subtotal, fc.iva, fc.ieps, fc.ivaret, fc.isrret, fc.total, fc.ref, fc.id_pol, fc.id_polcost, fc.id_bodega, fc.mimporte, fc.mdescuento, fc.msubtotal, fc.miva, fc.mtotal, fc.efectivo, fc.bancos, fc.cambio, fc.id_vendedor, 
        CASE
            WHEN fc.id_clipro = 0 THEN 'Cliente de Mostrador'::character varying
            ELSE ( SELECT p.nombre
               FROM tbl_client_client p
              WHERE fc.id_clipro = p.id_clave AND p.id_tipo = 'CL'::bpchar)
        END AS nombre, 
        CASE
            WHEN fc.id_clipro = 0 THEN 'XAXX010101000'::character varying
            ELSE ( SELECT p.rfc
               FROM tbl_client_client p
              WHERE fc.id_clipro = p.id_clave AND p.id_tipo = 'CL'::bpchar)
        END AS rfc, 
        CASE
            WHEN fc.id_clipro = 0 THEN 0
            ELSE (( SELECT p.dias
               FROM tbl_client_client p
              WHERE fc.id_clipro = p.id_clave AND p.id_tipo = 'CL'::bpchar))::integer
        END AS diascredito, 
        CASE
            WHEN fc.id_clipro = 0 THEN ''::character varying
            ELSE ( SELECT p.direccion
               FROM tbl_client_client p
              WHERE fc.id_clipro = p.id_clave AND p.id_tipo = 'CL'::bpchar)
        END AS calle, 
        CASE
            WHEN fc.id_clipro = 0 THEN ''::character varying
            ELSE ( SELECT p.noext
               FROM tbl_client_client p
              WHERE fc.id_clipro = p.id_clave AND p.id_tipo = 'CL'::bpchar)
        END AS noext, 
        CASE
            WHEN fc.id_clipro = 0 THEN ''::character varying
            ELSE ( SELECT p.noint
               FROM tbl_client_client p
              WHERE fc.id_clipro = p.id_clave AND p.id_tipo = 'CL'::bpchar)
        END AS noint, 
        CASE
            WHEN fc.id_clipro = 0 THEN ''::character varying
            ELSE ( SELECT p.colonia
               FROM tbl_client_client p
              WHERE fc.id_clipro = p.id_clave AND p.id_tipo = 'CL'::bpchar)
        END AS colonia, 
        CASE
            WHEN fc.id_clipro = 0 THEN ''::character varying(80)
            ELSE ( SELECT p.poblacion
               FROM tbl_client_client p
              WHERE fc.id_clipro = p.id_clave AND p.id_tipo = 'CL'::bpchar)
        END AS localidad, 
        CASE
            WHEN fc.id_clipro = 0 THEN ''::character varying
            ELSE ( SELECT p.municipio
               FROM tbl_client_client p
              WHERE fc.id_clipro = p.id_clave AND p.id_tipo = 'CL'::bpchar)
        END AS municipio, 
        CASE
            WHEN fc.id_clipro = 0 THEN ''::character varying
            ELSE ( SELECT p.estado
               FROM tbl_client_client p
              WHERE fc.id_clipro = p.id_clave AND p.id_tipo = 'CL'::bpchar)
        END AS estado, 
        CASE
            WHEN fc.id_clipro = 0 THEN 'Mexico'::character varying
            ELSE ( SELECT p.pais
               FROM tbl_client_client p
              WHERE fc.id_clipro = p.id_clave AND p.id_tipo = 'CL'::bpchar)
        END AS pais, 
        CASE
            WHEN fc.id_clipro = 0 THEN ''::character varying
            ELSE ( SELECT p.cp
               FROM tbl_client_client p
              WHERE fc.id_clipro = p.id_clave AND p.id_tipo = 'CL'::bpchar)
        END AS cp, 
        CASE
            WHEN fc.id_clipro = 0 THEN getcfdimetodopago('E'::character varying, fc.id_vc, fc.condicion, fc.efectivo, fc.bancos, ''::character varying)
            ELSE getcfdimetodopago('E'::character varying, fc.id_vc, fc.condicion, fc.efectivo, fc.bancos, ( SELECT tbl_variables.valfanumerico
               FROM tbl_variables
              WHERE tbl_variables.id_variable::text = 'DSV-METPAG'::text))
        END AS metododepago, mon.id_satmoneda AS monedasat
   FROM tbl_ventas_devoluciones_cab fc
   JOIN tbl_ventas_entidades ve ON fc.id_entidad = ve.id_entidadventa
   JOIN tbl_cont_monedas mon ON fc.moneda = mon.clave;

--ALTER TABLE view_cfd_ventas_devoluciones_cab_generar

--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_cfd_invserv_traspasos_cab_generar AS 
 SELECT ve.id_bodega AS id_entidadventa, ve.descripcion, 0 AS fija, 0.0 AS iva_entidad, ve.cfd, 
        CASE
            WHEN ve.cfd_noaprobacion <> 0 THEN ( SELECT tbl_cfd_folios.cfd_serie
               FROM tbl_cfd_folios
              WHERE tbl_cfd_folios.cfd_noaprobacion = ve.cfd_noaprobacion)
            ELSE ''::character varying
        END AS cfd_serie, 
        CASE
            WHEN ve.cfd_noaprobacion <> 0 THEN ( SELECT tbl_cfd_folios.cfd_folio
               FROM tbl_cfd_folios
              WHERE tbl_cfd_folios.cfd_noaprobacion = ve.cfd_noaprobacion)
            ELSE 0
        END AS cfd_folio, 
        CASE
            WHEN ve.cfd_noaprobacion <> 0 THEN ( SELECT tbl_cfd_folios.cfd_folioini
               FROM tbl_cfd_folios
              WHERE tbl_cfd_folios.cfd_noaprobacion = ve.cfd_noaprobacion)
            ELSE 0
        END AS cfd_folioini, 
        CASE
            WHEN ve.cfd_noaprobacion <> 0 THEN ( SELECT tbl_cfd_folios.cfd_foliofin
               FROM tbl_cfd_folios
              WHERE tbl_cfd_folios.cfd_noaprobacion = ve.cfd_noaprobacion)
            ELSE 0
        END AS cfd_foliofin, ve.cfd_noaprobacion, 
        CASE
            WHEN ve.cfd_noaprobacion <> 0 THEN (( SELECT tbl_cfd_folios.cfd_anoaprobacion
               FROM tbl_cfd_folios
              WHERE tbl_cfd_folios.cfd_noaprobacion = ve.cfd_noaprobacion))::integer
            ELSE 2000
        END AS cfd_anoaprobacion, ve.cfd_nocertificado, 
        CASE
            WHEN ve.cfd_nocertificado::text <> ''::text THEN ( SELECT tbl_cfd_certificados.cfd_archivocertificado
               FROM tbl_cfd_certificados
              WHERE tbl_cfd_certificados.cfd_nocertificado::text = ve.cfd_nocertificado::text)
            ELSE ''::character varying
        END AS cfd_archivocertificado, 
        CASE
            WHEN ve.cfd_nocertificado::text <> ''::text THEN (( SELECT tbl_cfd_certificados.cfd_caducidadcertificado
               FROM tbl_cfd_certificados
              WHERE tbl_cfd_certificados.cfd_nocertificado::text = ve.cfd_nocertificado::text))::timestamp with time zone
            ELSE now()
        END AS cfd_caducidadcertificado, 
        CASE
            WHEN ve.cfd_nocertificado::text <> ''::text THEN ( SELECT tbl_cfd_certificados.cfd_archivollave
               FROM tbl_cfd_certificados
              WHERE tbl_cfd_certificados.cfd_nocertificado::text = ve.cfd_nocertificado::text)
            ELSE ''::character varying
        END AS cfd_archivollave, 
        CASE
            WHEN ve.cfd_nocertificado::text <> ''::text THEN ( SELECT tbl_cfd_certificados.cfd_clavellave
               FROM tbl_cfd_certificados
              WHERE tbl_cfd_certificados.cfd_nocertificado::text = ve.cfd_nocertificado::text)
            ELSE ''::character varying
        END AS cfd_clavellave, ve.cfd_id_expedicion, 
        CASE
            WHEN ve.cfd_id_expedicion <> 0 THEN ( SELECT tbl_cfd_expediciones.cfd_calle
               FROM tbl_cfd_expediciones
              WHERE tbl_cfd_expediciones.cfd_id_expedicion = ve.cfd_id_expedicion)
            ELSE ''::character varying
        END AS cfd_calle, 
        CASE
            WHEN ve.cfd_id_expedicion <> 0 THEN ( SELECT tbl_cfd_expediciones.cfd_noext
               FROM tbl_cfd_expediciones
              WHERE tbl_cfd_expediciones.cfd_id_expedicion = ve.cfd_id_expedicion)
            ELSE ''::character varying
        END AS cfd_noext, 
        CASE
            WHEN ve.cfd_id_expedicion <> 0 THEN ( SELECT tbl_cfd_expediciones.cfd_noint
               FROM tbl_cfd_expediciones
              WHERE tbl_cfd_expediciones.cfd_id_expedicion = ve.cfd_id_expedicion)
            ELSE ''::character varying
        END AS cfd_noint, 
        CASE
            WHEN ve.cfd_id_expedicion <> 0 THEN ( SELECT tbl_cfd_expediciones.cfd_colonia
               FROM tbl_cfd_expediciones
              WHERE tbl_cfd_expediciones.cfd_id_expedicion = ve.cfd_id_expedicion)
            ELSE ''::character varying
        END AS cfd_colonia, 
        CASE
            WHEN ve.cfd_id_expedicion <> 0 THEN ( SELECT tbl_cfd_expediciones.cfd_localidad
               FROM tbl_cfd_expediciones
              WHERE tbl_cfd_expediciones.cfd_id_expedicion = ve.cfd_id_expedicion)
            ELSE ''::character varying
        END AS cfd_localidad, 
        CASE
            WHEN ve.cfd_id_expedicion <> 0 THEN ( SELECT tbl_cfd_expediciones.cfd_municipio
               FROM tbl_cfd_expediciones
              WHERE tbl_cfd_expediciones.cfd_id_expedicion = ve.cfd_id_expedicion)
            ELSE ''::character varying
        END AS cfd_municipio, 
        CASE
            WHEN ve.cfd_id_expedicion <> 0 THEN ( SELECT tbl_cfd_expediciones.cfd_estado
               FROM tbl_cfd_expediciones
              WHERE tbl_cfd_expediciones.cfd_id_expedicion = ve.cfd_id_expedicion)
            ELSE ''::character varying
        END AS cfd_estado, 
        CASE
            WHEN ve.cfd_id_expedicion <> 0 THEN ( SELECT tbl_cfd_expediciones.cfd_pais
               FROM tbl_cfd_expediciones
              WHERE tbl_cfd_expediciones.cfd_id_expedicion = ve.cfd_id_expedicion)
            ELSE ''::character varying
        END AS cfd_pais, 
        CASE
            WHEN ve.cfd_id_expedicion <> 0 THEN ( SELECT tbl_cfd_expediciones.cfd_cp
               FROM tbl_cfd_expediciones
              WHERE tbl_cfd_expediciones.cfd_id_expedicion = ve.cfd_id_expedicion)
            ELSE ''::character varying
        END AS cfd_cp, fc.id_movimiento AS id_factura, fc.salida AS numero, fc.id_bodegadest AS id_cliente, fc.fecha, fc.referencia, fc.status, 1 AS moneda, 'Pesos'::character varying AS monedasim, 1 AS tc, fc.fecha AS fechaenvio, 0 AS condicion, fc.concepto AS obs, 0.0 AS importe, 0.0 AS descuento, 0.0 AS subtotal, 0.0 AS iva, 0.0 AS ieps, 0.0 AS ivaret, 0.0 AS isrret, 0.0 AS total, fc.referencia AS ref, (-1) AS id_pol, (-1) AS id_polcost, fc.id_bodega, 0.0 AS mimporte, 0.0 AS mdescuento, 0.0 AS msubtotal, 0.0 AS miva, 0.0 AS mtotal, 0.0 AS efectivo, 0.0 AS bancos, 0.0 AS cambio, 0 AS id_vendedor, 
        CASE
            WHEN (( SELECT tbl_invserv_bodegas.cfd_id_expedicion
               FROM tbl_invserv_bodegas
              WHERE tbl_invserv_bodegas.id_bodega = fc.id_bodegadest)) <> 0 THEN ( SELECT tbl_cfd_expediciones.cfd_nombre
               FROM tbl_cfd_expediciones
              WHERE tbl_cfd_expediciones.cfd_id_expedicion = (( SELECT tbl_invserv_bodegas.cfd_id_expedicion
                       FROM tbl_invserv_bodegas
                      WHERE tbl_invserv_bodegas.id_bodega = fc.id_bodegadest)))
            ELSE ''::character varying
        END AS nombre, ''::character varying AS rfc, 0 AS diascredito, 
        CASE
            WHEN (( SELECT tbl_invserv_bodegas.cfd_id_expedicion
               FROM tbl_invserv_bodegas
              WHERE tbl_invserv_bodegas.id_bodega = fc.id_bodegadest)) <> 0 THEN ( SELECT tbl_cfd_expediciones.cfd_calle
               FROM tbl_cfd_expediciones
              WHERE tbl_cfd_expediciones.cfd_id_expedicion = (( SELECT tbl_invserv_bodegas.cfd_id_expedicion
                       FROM tbl_invserv_bodegas
                      WHERE tbl_invserv_bodegas.id_bodega = fc.id_bodegadest)))
            ELSE ''::character varying
        END AS calle, 
        CASE
            WHEN (( SELECT tbl_invserv_bodegas.cfd_id_expedicion
               FROM tbl_invserv_bodegas
              WHERE tbl_invserv_bodegas.id_bodega = fc.id_bodegadest)) <> 0 THEN ( SELECT tbl_cfd_expediciones.cfd_noext
               FROM tbl_cfd_expediciones
              WHERE tbl_cfd_expediciones.cfd_id_expedicion = (( SELECT tbl_invserv_bodegas.cfd_id_expedicion
                       FROM tbl_invserv_bodegas
                      WHERE tbl_invserv_bodegas.id_bodega = fc.id_bodegadest)))
            ELSE ''::character varying
        END AS noext, 
        CASE
            WHEN (( SELECT tbl_invserv_bodegas.cfd_id_expedicion
               FROM tbl_invserv_bodegas
              WHERE tbl_invserv_bodegas.id_bodega = fc.id_bodegadest)) <> 0 THEN ( SELECT tbl_cfd_expediciones.cfd_noint
               FROM tbl_cfd_expediciones
              WHERE tbl_cfd_expediciones.cfd_id_expedicion = (( SELECT tbl_invserv_bodegas.cfd_id_expedicion
                       FROM tbl_invserv_bodegas
                      WHERE tbl_invserv_bodegas.id_bodega = fc.id_bodegadest)))
            ELSE ''::character varying
        END AS noint, 
        CASE
            WHEN (( SELECT tbl_invserv_bodegas.cfd_id_expedicion
               FROM tbl_invserv_bodegas
              WHERE tbl_invserv_bodegas.id_bodega = fc.id_bodegadest)) <> 0 THEN ( SELECT tbl_cfd_expediciones.cfd_colonia
               FROM tbl_cfd_expediciones
              WHERE tbl_cfd_expediciones.cfd_id_expedicion = (( SELECT tbl_invserv_bodegas.cfd_id_expedicion
                       FROM tbl_invserv_bodegas
                      WHERE tbl_invserv_bodegas.id_bodega = fc.id_bodegadest)))
            ELSE ''::character varying
        END AS colonia, 
        CASE
            WHEN (( SELECT tbl_invserv_bodegas.cfd_id_expedicion
               FROM tbl_invserv_bodegas
              WHERE tbl_invserv_bodegas.id_bodega = fc.id_bodegadest)) <> 0 THEN ( SELECT tbl_cfd_expediciones.cfd_localidad
               FROM tbl_cfd_expediciones
              WHERE tbl_cfd_expediciones.cfd_id_expedicion = (( SELECT tbl_invserv_bodegas.cfd_id_expedicion
                       FROM tbl_invserv_bodegas
                      WHERE tbl_invserv_bodegas.id_bodega = fc.id_bodegadest)))
            ELSE ''::character varying
        END AS localidad, 
        CASE
            WHEN (( SELECT tbl_invserv_bodegas.cfd_id_expedicion
               FROM tbl_invserv_bodegas
              WHERE tbl_invserv_bodegas.id_bodega = fc.id_bodegadest)) <> 0 THEN ( SELECT tbl_cfd_expediciones.cfd_municipio
               FROM tbl_cfd_expediciones
              WHERE tbl_cfd_expediciones.cfd_id_expedicion = (( SELECT tbl_invserv_bodegas.cfd_id_expedicion
                       FROM tbl_invserv_bodegas
                      WHERE tbl_invserv_bodegas.id_bodega = fc.id_bodegadest)))
            ELSE ''::character varying
        END AS municipio, 
        CASE
            WHEN (( SELECT tbl_invserv_bodegas.cfd_id_expedicion
               FROM tbl_invserv_bodegas
              WHERE tbl_invserv_bodegas.id_bodega = fc.id_bodegadest)) <> 0 THEN ( SELECT tbl_cfd_expediciones.cfd_estado
               FROM tbl_cfd_expediciones
              WHERE tbl_cfd_expediciones.cfd_id_expedicion = (( SELECT tbl_invserv_bodegas.cfd_id_expedicion
                       FROM tbl_invserv_bodegas
                      WHERE tbl_invserv_bodegas.id_bodega = fc.id_bodegadest)))
            ELSE ''::character varying
        END AS estado, 
        CASE
            WHEN (( SELECT tbl_invserv_bodegas.cfd_id_expedicion
               FROM tbl_invserv_bodegas
              WHERE tbl_invserv_bodegas.id_bodega = fc.id_bodegadest)) <> 0 THEN ( SELECT tbl_cfd_expediciones.cfd_pais
               FROM tbl_cfd_expediciones
              WHERE tbl_cfd_expediciones.cfd_id_expedicion = (( SELECT tbl_invserv_bodegas.cfd_id_expedicion
                       FROM tbl_invserv_bodegas
                      WHERE tbl_invserv_bodegas.id_bodega = fc.id_bodegadest)))
            ELSE ''::character varying
        END AS pais, 
        CASE
            WHEN (( SELECT tbl_invserv_bodegas.cfd_id_expedicion
               FROM tbl_invserv_bodegas
              WHERE tbl_invserv_bodegas.id_bodega = fc.id_bodegadest)) <> 0 THEN ( SELECT tbl_cfd_expediciones.cfd_cp
               FROM tbl_cfd_expediciones
              WHERE tbl_cfd_expediciones.cfd_id_expedicion = (( SELECT tbl_invserv_bodegas.cfd_id_expedicion
                       FROM tbl_invserv_bodegas
                      WHERE tbl_invserv_bodegas.id_bodega = fc.id_bodegadest)))
            ELSE ''::character varying
        END AS cp, getcfdimetodopago('T'::character varying, fc.id_movimiento, 1::smallint, 0.0, 0.0, ''::character varying) AS metododepago, 'MXN'::character(3) AS monedasat
   FROM tbl_invserv_almacen_bod_mov_cab fc
   JOIN tbl_invserv_bodegas ve ON fc.id_bodega = ve.id_bodega;

--ALTER TABLE view_cfd_invserv_traspasos_cab_generar

--@FIN_BLOQUE
CREATE TABLE tbl_tfd
(
  uuid character(36) NOT NULL,
  id_cfd integer NOT NULL,
  fechatimbre timestamp without time zone NOT NULL,
  nocertificadosat character varying(20) NOT NULL,
  cadenaoriginal character varying(8000) NOT NULL,
  sellosat character varying(8000) NOT NULL,
  CONSTRAINT pk_tbl_tfd PRIMARY KEY (uuid ),
  CONSTRAINT fk_tbl_tfd_tbl_cfd FOREIGN KEY (id_cfd)
      REFERENCES tbl_cfd (id_cfd) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE
);

  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_cfd_agregar(_rfc character varying, _serie character varying, _folio integer, _noaprobacion integer, _anoaprobacion smallint, _fecha timestamp without time zone, _total numeric, _impuesto numeric, _estatus smallint, _efecto character, _pedimento character varying, _fechapedimento character varying, _aduana character varying, _fsi_tipo character, _fsi_id integer, _nocertificado character varying, _cadenaoriginal character varying, _sello character varying, _lugarexpedicion character varying, _metododepago character varying, _fsi_esp1 character varying)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255); _ID_CFD int;
BEGIN	
 	_err := 0;
	_result := 'El comprobante fiscal digital se registro correctamente';
	
	IF(select count(*) from TBL_CFD_CERTIFICADOS where CFD_NoCertificado = _NoCertificado) < 1
	THEN
		_err := 3;
		_result := 'ERROR CFD_BD: No existe el certificado';
	END IF;

	IF _err = 0
	THEN
		IF(select count(*) from TBL_CFD where FSI_Tipo = _FSI_Tipo and FSI_ID = _FSI_ID and FSI_Esp1 = _FSI_Esp1 and Estatus = 1) = 0
		THEN 
			INSERT INTO TBL_CFD
			VALUES(default,_RFC, _Serie, _Folio, _NoAprobacion, _AnoAprobacion, _Fecha, _Total, _Impuesto, _Estatus, _Efecto, 
							_Pedimento, _FechaPedimento, _Aduana, _FSI_Tipo, _FSI_ID, _NoCertificado, _CadenaOriginal, _Sello, _LugarExpedicion, _MetodoDePago, _FSI_Esp1)
			RETURNING currval(pg_get_serial_sequence('TBL_CFD', 'id_cfd')) INTO _id_cfd;

			-- Es de nuevo ingreso este cfd, actualiza el folio en la entidad CFD
			/*
			UPDATE TBL_CFD_FOLIOS
			SET CFD_Folio = @Folio + 1
			WHERE CFD_NoAprobacion = @NoAprobacion
			*/
		ELSE -- Si existiera ya un CFD de este documento, quiere decir que estaba algo mal y no se pudo timbrar, por lo tanto, cambia los datos del CFD para no duplicarlos
			-- Aqui no actualiza el folio, porque si no se perder√≠a el anterior. Aqui se actualizan simplemente los demas datos ( En particular el sello )
			_ID_CFD := (select ID_CFD from TBL_CFD where FSI_Tipo = _FSI_Tipo and FSI_ID = _FSI_ID and FSI_Esp1 = _FSI_Esp1 and _Estatus = 1 limit 1);
			
			UPDATE TBL_CFD
			SET RFC = _RFC, Serie = _Serie, NoAprobacion = _NoAprobacion, AnoAprobacion = _AnoAprobacion, Fecha = _Fecha, Total = _Total, Impuesto = _Impuesto, Estatus = _Estatus, Efecto = _Efecto, 
							Pedimento = _Pedimento, FechaPedimento = _FechaPedimento, Aduana = _Aduana, NoCertificado = _NoCertificado, CadenaOriginal = _CadenaOriginal, Sello = _Sello, LugarExpedicion = _LugarExpedicion, MetodoDePago = _MetodoDePago 
			WHERE ID_CFD = _ID_CFD;

		END IF;

		IF _FSI_Tipo = 'FAC'
		THEN
			UPDATE TBL_VENTAS_FACTURAS_CAB
			SET ID_CFD = _ID_CFD, TFD = 0
			WHERE ID_VC = _FSI_ID;
		ELSIF _FSI_Tipo = 'REM'
		THEN
			UPDATE TBL_VENTAS_REMISIONES_CAB
			SET ID_CFD = _ID_CFD, TFD = 0
			WHERE ID_VC = _FSI_ID;
		ELSIF _FSI_Tipo = 'DSV'
		THEN
			UPDATE TBL_VENTAS_DEVOLUCIONES_CAB
			SET ID_CFD = _ID_CFD, TFD = 0
			WHERE ID_VC = _FSI_ID;
		ELSIF _FSI_Tipo = 'TRS'
		THEN
			UPDATE TBL_INVSERV_ALMACEN_BOD_MOV_CAB
			SET ID_CFD = _ID_CFD, TFD = 0
			WHERE ID_Movimiento = _FSI_ID;
		ELSE -- NOM
			UPDATE TBL_NOM_CALCULO_NOMINA_ESP
			SET ID_CFD = _ID_CFD, TFD = 0
			WHERE ID_Nomina = _FSI_ID and ID_Empleado = _FSI_Esp1;
		END IF;

	END IF;

	RETURN QUERY SELECT _err, _result;

END
$BODY$
  LANGUAGE plpgsql;
  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_cfd_timbrar(
    _fsi_tipo character,
    _fsi_id integer,
    _uuid character,
    _fechatimbre timestamp without time zone,
    _nocertificadosat character varying,
    _sellosat character varying,
    _cadenaoriginal character varying,
    _fsi_esp1 character varying)
  RETURNS SETOF record AS
$BODY$
DECLARE  
	_err int; _result varchar(255); _ID_CFD int; _id_pol integer; _id_poliza integer; _id_part smallint; _total numeric(19,4); _id_client integer; 
	_condicion smallint; _cc character(19); _rfc varchar(15); _id_empleado character(6); _tipobanco smallint; _clavebanco smallint;
	_id_moneda smallint; _tc numeric(19,4);
BEGIN	
 	_err := 0;
	_result := 'El timbre fiscal digital se registro correctamente';
	
	IF(select count(*) from TBL_CFD where FSI_Tipo = _FSI_Tipo and FSI_ID = _FSI_ID and FSI_Esp1 = _FSI_Esp1 and Estatus = 1) < 1
	THEN
		_err := 3;
		_result := 'ERROR: No existe el CFDI para ' || _FSI_Tipo || ' - ' || cast(_FSI_ID as varchar) || '-' || _FSI_Esp1;
	ELSE
		_ID_CFD := (select ID_CFD from TBL_CFD where FSI_Tipo = _FSI_Tipo and FSI_ID = _FSI_ID and FSI_Esp1 = _FSI_Esp1 and Estatus = 1);
	END IF;

	IF _err = 0
	THEN
		IF (select count(*) from tbl_tfd where uuid = _UUID) = 0 --No existe timbre con este uuid. Si Ya existia el tibre, esto se debe a algun problema al sellar anteriormente
		THEN
			INSERT INTO TBL_TFD
			VALUES(_UUID,	_ID_CFD, _FechaTimbre, _NoCertificadoSAT, _CadenaOriginal, _SelloSAT );
		END IF;
		
		IF _FSI_Tipo = 'FAC'
		THEN
			UPDATE TBL_VENTAS_FACTURAS_CAB
			SET TFD = 2
			WHERE ID_VC = _FSI_ID;

			_total := (select total from tbl_ventas_facturas_cab where id_vc = _FSI_ID);
			_id_client := (select id_clipro from tbl_ventas_facturas_cab where id_vc = _FSI_ID);
			_condicion := (select condicion from tbl_ventas_facturas_cab where id_vc = _FSI_ID);
			_rfc := (case when _id_client = 0 then 'XAXX010101000' else (select rfc from tbl_client_client where id_tipo = 'CL' and id_clave = _id_client) end);
			_id_moneda :=  (select moneda from tbl_ventas_facturas_cab where id_vc = _FSI_ID);
			_tc :=  (select tc from tbl_ventas_facturas_cab where id_vc = _FSI_ID);
			
			IF _condicion = 0 --Contado
			THEN
				_id_pol := (select id_mov from tbl_ventas_facturas_pagos where id_factura = _FSI_ID limit 1 );
				_id_poliza := (select pol_id from tbl_bancos_movimientos where id = _id_pol);
				_cc :=  (select valfanumerico from TBL_VARIABLES where ID_Variable = 'CC_VENCONT');
			ELSE
				_id_pol := (select id_pol from tbl_ventas_facturas_cab where id_vc = _FSI_ID);
				_id_poliza := (select id_pol from TBL_CLIENT_CXC where id_cp = _id_pol);
				_cc :=  (select valfanumerico from TBL_VARIABLES where ID_Variable = 'CC_VEN');
			END IF;

			IF _id_poliza IS NOT NULL
			THEN
				_id_part := (select Part from TBL_CONT_POLIZAS_DETALLE where ID = _id_poliza and Cuenta = _cc limit 1);
			END IF;
		ELSIF _FSI_Tipo = 'REM'
		THEN
			UPDATE TBL_VENTAS_REMISIONES_CAB
			SET TFD = 2
			WHERE ID_VC = _FSI_ID;
		ELSIF _FSI_Tipo = 'DSV'
		THEN
			
			UPDATE TBL_VENTAS_DEVOLUCIONES_CAB
			SET TFD = 2
			WHERE ID_VC = _FSI_ID;
			
			_total := (select total from tbl_ventas_devoluciones_cab where id_vc = _FSI_ID);
			_id_client := (select id_clipro from tbl_ventas_devoluciones_cab where id_vc = _FSI_ID);
			_condicion := (select condicion from tbl_ventas_devoluciones_cab where id_vc = _FSI_ID);
			_rfc := (case when _id_client = 0 then 'XAXX010101000' else (select rfc from tbl_client_client where id_tipo = 'CL' and id_clave = _id_client) end);
			_id_moneda :=  (select moneda from tbl_ventas_devoluciones_cab where id_vc = _FSI_ID);
			_tc :=  (select tc from tbl_ventas_devoluciones_cab where id_vc = _FSI_ID);
			
			IF _condicion = 0 --Contado
			THEN
				_id_pol := (select id_mov from tbl_ventas_devoluciones_pagos where id_devolucion = _FSI_ID limit 1 );
				_id_poliza := (select pol_id from tbl_bancos_movimientos where id = _id_pol);
				_cc := (select valfanumerico from TBL_VARIABLES where ID_Variable = 'CC_DSVCONT');
			ELSE
				_id_pol := (select id_pol from tbl_ventas_devoluciones_cab where id_vc = _FSI_ID);
				_id_poliza := (select id_pol from TBL_CLIENT_CXC where id_cp = _id_pol);
				_cc := (select cc from TBL_CLIENT_CXC_CONCEPTOS where ID_Concepto = (select id_concepto from TBL_CLIENT_CXC where id_cp = _id_pol) );
			END IF;

			IF _id_poliza IS NOT NULL
			THEN
				_id_part := (select Part from TBL_CONT_POLIZAS_DETALLE where ID = _id_poliza and Cuenta = _cc limit 1);
			END IF;
		ELSIF _FSI_Tipo = 'TRS'
		THEN
			UPDATE TBL_INVSERV_ALMACEN_BOD_MOV_CAB
			SET TFD = 2
			WHERE ID_Movimiento = _FSI_ID;
		ELSE -- NOM
			UPDATE TBL_NOM_CALCULO_NOMINA_ESP
			SET TFD = 2
			WHERE ID_Nomina = _FSI_ID and ID_Empleado = _FSI_Esp1;

			_total := (select gravado + exento + deduccion from tbl_nom_calculo_nomina_esp where id_nomina = _FSI_ID and id_empleado = _FSI_Esp1);
			_id_empleado := (select id_empleado from tbl_nom_calculo_nomina_esp where id_nomina = _FSI_ID and id_empleado = _FSI_Esp1);
			_rfc := (select rfc_letras || rfc_fecha || rfc_homoclave from tbl_nom_masemp where id_empleado = _id_empleado);
			_id_moneda :=  1;
			_tc :=  1.0;
			
			_id_pol := (select id_mov from tbl_nom_calculo_nomina where id_nomina = _FSI_ID ); --Extrae el movimiento bancario
			_id_poliza := (select pol_id from tbl_bancos_movimientos where id = _id_pol); --Extrae la poliza del movimiento
			_tipobanco := (select tipo from tbl_bancos_movimientos where id = _id_pol); -- el tipo de banco
			_clavebanco := (select clave from tbl_bancos_movimientos where id = _id_pol); -- la clave del banco
			_cc := (select cc from tbl_bancos_cuentas where tipo = _tipobanco and clave = _clavebanco); -- la cuenta contable del banco

			IF _id_poliza IS NOT NULL AND _id_poliza <> -1
			THEN
				_id_part := (select Part from TBL_CONT_POLIZAS_DETALLE where ID = _id_poliza and Cuenta = _cc limit 1);
			END IF;
		END IF;

		--Ahora enlaza a la contabilidad electr√≥nica
		IF _id_poliza IS NOT NULL and _id_part IS NOT NULL
		THEN
			INSERT INTO TBL_CONT_POLIZAS_DETALLE_CE_COMPROBANTES( id_pol, id_part, uuid_cfdi, monto, rfc, id_tipo, moneda, tipcamb, cfd_cbb_serie, cfd_cbb_numfol, numfactext, taxid )
			VALUES(_id_poliza, _id_part, _uuid, _Total, _RFC, 'CompNal',  (select id_satmoneda from tbl_cont_monedas where clave = _id_moneda), _tc, '', 0, '', '');
		END IF;
		
	END IF;

	RETURN QUERY SELECT _err, _result;

END
$BODY$
  LANGUAGE plpgsql;


--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_cfd_pdfgen(_fsi_tipo character, _fsi_id integer, _fsi_esp1 character varying)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255); _ID_CFD int;
BEGIN
	_err := 0;
	_result := 'El PDF se registr√≥ correctamente';

	IF(select count(*) from TBL_CFD where FSI_Tipo = _FSI_Tipo and FSI_ID = _FSI_ID and FSI_Esp1 = _FSI_Esp1 and Estatus = 1) < 1
	THEN
		_err := 3;
		_result := 'ERROR: No existe el CFD para ' || _FSI_Tipo || ' - ' || cast(_FSI_ID as varchar) || '-' || _FSI_Esp1;
	ELSE
		_ID_CFD := (select ID_CFD from TBL_CFD where FSI_Tipo = _FSI_Tipo and FSI_ID = _FSI_ID and FSI_Esp1 = _FSI_Esp1 and Estatus = 1 limit 1);
	END IF;

	IF _err = 0
	THEN
		IF _FSI_Tipo = 'FAC'
		THEN
			UPDATE TBL_VENTAS_FACTURAS_CAB
			SET TFD = 3
			WHERE ID_VC = _FSI_ID;
		ELSIF _FSI_Tipo = 'REM'
		THEN
			UPDATE TBL_VENTAS_REMISIONES_CAB
			SET TFD = 3
			WHERE ID_VC = _FSI_ID;
		ELSIF _FSI_Tipo = 'DSV'
		THEN
			UPDATE TBL_VENTAS_DEVOLUCIONES_CAB
			SET TFD = 3
			WHERE ID_VC = _FSI_ID;
		ELSIF _FSI_Tipo = 'TRS'
		THEN
			UPDATE TBL_INVSERV_ALMACEN_BOD_MOV_CAB
			SET TFD = 3
			WHERE ID_Movimiento = _FSI_ID;
		ELSE -- NOM
			UPDATE TBL_NOM_CALCULO_NOMINA_ESP
			SET TFD = 3
			WHERE ID_Nomina = _FSI_ID and ID_Empleado = _FSI_Esp1;
		END IF;

	END IF;

	RETURN QUERY SELECT _err, _result;

END
$BODY$
  LANGUAGE plpgsql; 
  


--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_public_formatos AS 
 SELECT tbl_formatos.id_formato, tbl_formatos.descripcion, tbl_formatos.tipo
   FROM tbl_formatos;



--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_ventas_facturas_impcab AS 
 SELECT rc.id_vc AS id_factura, rc.id_entidad, rc.numero, rc.fecha, rc.referencia, rc.status, rc.moneda AS id_moneda, m.moneda, rc.tc, rc.id_clipro AS id_cliente, COALESCE(cl.id_numero, 0) AS num_cliente, COALESCE(cl.nombre, 'Cliente de Mostrador'::character varying) AS cliente, ''::character varying AS pol, rc.id_bodega, b.nombre, rc.condicion, rc.obs, rc.mimporte AS importe, rc.mdescuento AS descuento, rc.msubtotal AS subtotal, rc.miva AS iva, rc.ieps, rc.ivaret, rc.isrret, rc.mtotal AS total, COALESCE(cl.rfc, 'XAXX010101000'::character varying) AS rfc, COALESCE(cl.direccion, ''::character varying(80)) AS direccion, COALESCE(cl.direccion, ''::character varying) AS calle, COALESCE(cl.noext, ''::character varying) AS noext, COALESCE(cl.noint, ''::character varying) AS noint, COALESCE(cl.colonia, ''::character varying) AS colonia, COALESCE(cl.poblacion, ''::character varying(80)) AS poblacion, COALESCE(cl.poblacion, ''::character varying) AS localidad, COALESCE(cl.municipio, ''::character varying) AS municipio, 
        CASE
            WHEN cl.estado IS NULL THEN ''::character varying
            ELSE 
            CASE
                WHEN (( SELECT tbl_sat_estados.nombre
                   FROM tbl_sat_estados
                  WHERE tbl_sat_estados.codestado::text = cl.estado::text AND tbl_sat_estados.codpais3 = cl.pais::bpchar)) IS NULL THEN cl.estado
                ELSE ( SELECT tbl_sat_estados.nombre
                   FROM tbl_sat_estados
                  WHERE tbl_sat_estados.codestado::text = cl.estado::text AND tbl_sat_estados.codpais3 = cl.pais::bpchar)
            END
        END AS estado, 
        CASE
            WHEN cl.pais IS NULL THEN 'M√©xico'::character varying
            ELSE 
            CASE
                WHEN (( SELECT tbl_sat_paises.nombre
                   FROM tbl_sat_paises
                  WHERE tbl_sat_paises.alfa3 = cl.pais::bpchar)) IS NULL THEN cl.pais
                ELSE ( SELECT tbl_sat_paises.nombre
                   FROM tbl_sat_paises
                  WHERE tbl_sat_paises.alfa3 = cl.pais::bpchar)
            END
        END AS pais, COALESCE(cl.cp, ''::character varying) AS cp, 
        CASE
            WHEN rc.id_cfd IS NOT NULL AND rc.id_cfd <> 0 THEN ( SELECT tbl_cfd.serie
               FROM tbl_cfd
              WHERE tbl_cfd.id_cfd = rc.id_cfd)
            ELSE ''::character varying
        END AS cfd_serie, 
        CASE
            WHEN rc.id_cfd IS NOT NULL AND rc.id_cfd <> 0 THEN ( SELECT tbl_cfd.folio
               FROM tbl_cfd
              WHERE tbl_cfd.id_cfd = rc.id_cfd)
            ELSE 0
        END AS cfd_folio, 
        CASE
            WHEN rc.id_cfd IS NOT NULL AND rc.id_cfd <> 0 THEN ( SELECT tbl_cfd.noaprobacion
               FROM tbl_cfd
              WHERE tbl_cfd.id_cfd = rc.id_cfd)
            ELSE 0
        END AS cfd_noaprobacion, 
        CASE
            WHEN rc.id_cfd IS NOT NULL AND rc.id_cfd <> 0 THEN (( SELECT tbl_cfd.anoaprobacion
               FROM tbl_cfd
              WHERE tbl_cfd.id_cfd = rc.id_cfd))::integer
            ELSE 0
        END AS cfd_anoaprobacion, 
        CASE
            WHEN rc.id_cfd IS NOT NULL AND rc.id_cfd <> 0 THEN ( SELECT tbl_cfd.nocertificado
               FROM tbl_cfd
              WHERE tbl_cfd.id_cfd = rc.id_cfd)
            ELSE ''::character varying
        END AS cfd_nocertificado, 
        CASE
            WHEN rc.id_cfd IS NOT NULL AND rc.id_cfd <> 0 THEN (( SELECT tbl_cfd.fecha
               FROM tbl_cfd
              WHERE tbl_cfd.id_cfd = rc.id_cfd))::timestamp with time zone
            ELSE now()
        END AS cfd_fecha, 
        CASE
            WHEN rc.id_cfd IS NOT NULL AND rc.id_cfd <> 0 THEN ( SELECT tbl_cfd.cadenaoriginal
               FROM tbl_cfd
              WHERE tbl_cfd.id_cfd = rc.id_cfd)
            ELSE ''::character varying
        END AS cfd_cadenaoriginal, 
        CASE
            WHEN rc.id_cfd IS NOT NULL AND rc.id_cfd <> 0 THEN ( SELECT tbl_cfd.sello
               FROM tbl_cfd
              WHERE tbl_cfd.id_cfd = rc.id_cfd)
            ELSE ''::character varying
        END AS cfd_sello, 
        CASE
            WHEN rc.id_cfd IS NOT NULL AND rc.id_cfd <> 0 THEN ( SELECT tbl_cfd.lugarexpedicion
               FROM tbl_cfd
              WHERE tbl_cfd.id_cfd = rc.id_cfd)
            ELSE ''::character varying
        END AS cfd_lugarexpedicion, 
        CASE
            WHEN rc.id_cfd IS NOT NULL AND rc.id_cfd <> 0 THEN ( SELECT tbl_cfd.metododepago
               FROM tbl_cfd
              WHERE tbl_cfd.id_cfd = rc.id_cfd)
            ELSE ''::character varying
        END AS cfd_metododepago, 
        CASE
            WHEN ve.cfd_id_expedicion <> 0 THEN ( SELECT tbl_cfd_expediciones.cfd_nombre
               FROM tbl_cfd_expediciones
              WHERE tbl_cfd_expediciones.cfd_id_expedicion = ve.cfd_id_expedicion)
            ELSE ''::character varying
        END AS cfd_nombre, 
        CASE
            WHEN ve.cfd_id_expedicion <> 0 THEN ( SELECT tbl_cfd_expediciones.cfd_calle
               FROM tbl_cfd_expediciones
              WHERE tbl_cfd_expediciones.cfd_id_expedicion = ve.cfd_id_expedicion)
            ELSE ''::character varying
        END AS cfd_calle, 
        CASE
            WHEN ve.cfd_id_expedicion <> 0 THEN ( SELECT tbl_cfd_expediciones.cfd_noext
               FROM tbl_cfd_expediciones
              WHERE tbl_cfd_expediciones.cfd_id_expedicion = ve.cfd_id_expedicion)
            ELSE ''::character varying
        END AS cfd_noext, 
        CASE
            WHEN ve.cfd_id_expedicion <> 0 THEN ( SELECT tbl_cfd_expediciones.cfd_noint
               FROM tbl_cfd_expediciones
              WHERE tbl_cfd_expediciones.cfd_id_expedicion = ve.cfd_id_expedicion)
            ELSE ''::character varying
        END AS cfd_noint, 
        CASE
            WHEN ve.cfd_id_expedicion <> 0 THEN ( SELECT tbl_cfd_expediciones.cfd_colonia
               FROM tbl_cfd_expediciones
              WHERE tbl_cfd_expediciones.cfd_id_expedicion = ve.cfd_id_expedicion)
            ELSE ''::character varying
        END AS cfd_colonia, 
        CASE
            WHEN ve.cfd_id_expedicion <> 0 THEN ( SELECT tbl_cfd_expediciones.cfd_localidad
               FROM tbl_cfd_expediciones
              WHERE tbl_cfd_expediciones.cfd_id_expedicion = ve.cfd_id_expedicion)
            ELSE ''::character varying
        END AS cfd_localidad, 
        CASE
            WHEN ve.cfd_id_expedicion <> 0 THEN ( SELECT tbl_cfd_expediciones.cfd_municipio
               FROM tbl_cfd_expediciones
              WHERE tbl_cfd_expediciones.cfd_id_expedicion = ve.cfd_id_expedicion)
            ELSE ''::character varying
        END AS cfd_municipio, 
        CASE
            WHEN ve.cfd_id_expedicion <> 0 THEN 
            CASE
                WHEN (( SELECT tbl_sat_estados.nombre
                   FROM tbl_sat_estados
                  WHERE tbl_sat_estados.codestado::text = ((( SELECT tbl_cfd_expediciones.cfd_estado
                           FROM tbl_cfd_expediciones
                          WHERE tbl_cfd_expediciones.cfd_id_expedicion = ve.cfd_id_expedicion))::text) AND tbl_sat_estados.codpais3 = ((( SELECT tbl_cfd_expediciones.cfd_pais
                           FROM tbl_cfd_expediciones
                          WHERE tbl_cfd_expediciones.cfd_id_expedicion = ve.cfd_id_expedicion))::bpchar))) IS NULL THEN ( SELECT tbl_cfd_expediciones.cfd_estado
                   FROM tbl_cfd_expediciones
                  WHERE tbl_cfd_expediciones.cfd_id_expedicion = ve.cfd_id_expedicion)
                ELSE ( SELECT tbl_sat_estados.nombre
                   FROM tbl_sat_estados
                  WHERE tbl_sat_estados.codestado::text = ((( SELECT tbl_cfd_expediciones.cfd_estado
                           FROM tbl_cfd_expediciones
                          WHERE tbl_cfd_expediciones.cfd_id_expedicion = ve.cfd_id_expedicion))::text) AND tbl_sat_estados.codpais3 = ((( SELECT tbl_cfd_expediciones.cfd_pais
                           FROM tbl_cfd_expediciones
                          WHERE tbl_cfd_expediciones.cfd_id_expedicion = ve.cfd_id_expedicion))::bpchar))
            END
            ELSE ''::character varying
        END AS cfd_estado, 
        CASE
            WHEN ve.cfd_id_expedicion <> 0 THEN 
            CASE
                WHEN (( SELECT tbl_sat_paises.nombre
                   FROM tbl_sat_paises
                  WHERE tbl_sat_paises.alfa3 = ((( SELECT tbl_cfd_expediciones.cfd_pais
                           FROM tbl_cfd_expediciones
                          WHERE tbl_cfd_expediciones.cfd_id_expedicion = ve.cfd_id_expedicion))::bpchar))) IS NULL THEN ( SELECT tbl_cfd_expediciones.cfd_pais
                   FROM tbl_cfd_expediciones
                  WHERE tbl_cfd_expediciones.cfd_id_expedicion = ve.cfd_id_expedicion)
                ELSE ( SELECT tbl_sat_paises.nombre
                   FROM tbl_sat_paises
                  WHERE tbl_sat_paises.alfa3 = ((( SELECT tbl_cfd_expediciones.cfd_pais
                           FROM tbl_cfd_expediciones
                          WHERE tbl_cfd_expediciones.cfd_id_expedicion = ve.cfd_id_expedicion))::bpchar))
            END
            ELSE ''::character varying
        END AS cfd_pais, 
        CASE
            WHEN ve.cfd_id_expedicion <> 0 THEN ( SELECT tbl_cfd_expediciones.cfd_cp
               FROM tbl_cfd_expediciones
              WHERE tbl_cfd_expediciones.cfd_id_expedicion = ve.cfd_id_expedicion)
            ELSE ''::character varying
        END AS cfd_cp, 
        CASE
            WHEN rc.tfd IS NOT NULL AND rc.tfd > 1 THEN ( SELECT tbl_tfd.uuid
               FROM tbl_tfd
              WHERE tbl_tfd.id_cfd = rc.id_cfd)
            ELSE ''::bpchar
        END AS tfd_uuid, 
        CASE
            WHEN rc.tfd IS NOT NULL AND rc.tfd > 1 THEN (( SELECT tbl_tfd.fechatimbre
               FROM tbl_tfd
              WHERE tbl_tfd.id_cfd = rc.id_cfd))::timestamp with time zone
            ELSE now()
        END AS tfd_fechatimbre, 
        CASE
            WHEN rc.tfd IS NOT NULL AND rc.tfd > 1 THEN ( SELECT tbl_tfd.cadenaoriginal
               FROM tbl_tfd
              WHERE tbl_tfd.id_cfd = rc.id_cfd)
            ELSE ''::character varying
        END AS tfd_cadenaoriginal, 
        CASE
            WHEN rc.tfd IS NOT NULL AND rc.tfd > 1 THEN ( SELECT tbl_tfd.nocertificadosat
               FROM tbl_tfd
              WHERE tbl_tfd.id_cfd = rc.id_cfd)
            ELSE ''::character varying
        END AS tfd_nocertificadosat, 
        CASE
            WHEN rc.tfd IS NOT NULL AND rc.tfd > 1 THEN ( SELECT tbl_tfd.sellosat
               FROM tbl_tfd
              WHERE tbl_tfd.id_cfd = rc.id_cfd)
            ELSE ''::character varying
        END AS tfd_sellosat
   FROM tbl_ventas_facturas_cab rc
   LEFT JOIN tbl_client_client cl ON cl.id_tipo = 'CL'::bpchar AND rc.id_clipro = cl.id_clave
   JOIN tbl_ventas_entidades ve ON rc.id_entidad = ve.id_entidadventa
   JOIN tbl_invserv_bodegas b ON rc.id_bodega = b.id_bodega
   JOIN tbl_cont_monedas m ON rc.moneda = m.clave
   JOIN tbl_vendedores vn ON rc.id_vendedor = vn.id_vendedor;

--ALTER TABLE view_ventas_facturas_impcab

--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_ventas_remisiones_impcab AS 
 SELECT rc.id_vc AS id_remision, rc.id_entidad, rc.numero, rc.fecha, rc.referencia, rc.status, rc.moneda AS id_moneda, m.moneda, rc.tc, rc.id_clipro AS id_cliente, COALESCE(cl.id_numero, 0) AS num_cliente, COALESCE(cl.nombre, 'Cliente de Mostrador'::character varying) AS cliente, ''::character varying AS pol, rc.id_bodega, b.nombre, rc.condicion, rc.obs, rc.mimporte AS importe, rc.mdescuento AS descuento, rc.msubtotal AS subtotal, rc.miva AS iva, rc.ieps, rc.ivaret, rc.isrret, rc.mtotal AS total, COALESCE(cl.rfc, 'XAXX010101000'::character varying) AS rfc, COALESCE(cl.direccion, ''::character varying(80)) AS direccion, COALESCE(cl.direccion, ''::character varying) AS calle, COALESCE(cl.noext, ''::character varying) AS noext, COALESCE(cl.noint, ''::character varying) AS noint, COALESCE(cl.colonia, ''::character varying) AS colonia, COALESCE(cl.poblacion, ''::character varying(80)) AS poblacion, COALESCE(cl.poblacion, ''::character varying) AS localidad, COALESCE(cl.municipio, ''::character varying) AS municipio, 
        CASE
            WHEN cl.estado IS NULL THEN ''::character varying
            ELSE 
            CASE
                WHEN (( SELECT tbl_sat_estados.nombre
                   FROM tbl_sat_estados
                  WHERE tbl_sat_estados.codestado::text = cl.estado::text AND tbl_sat_estados.codpais3 = cl.pais::bpchar)) IS NULL THEN cl.estado
                ELSE ( SELECT tbl_sat_estados.nombre
                   FROM tbl_sat_estados
                  WHERE tbl_sat_estados.codestado::text = cl.estado::text AND tbl_sat_estados.codpais3 = cl.pais::bpchar)
            END
        END AS estado, 
        CASE
            WHEN cl.pais IS NULL THEN 'M√©xico'::character varying
            ELSE 
            CASE
                WHEN (( SELECT tbl_sat_paises.nombre
                   FROM tbl_sat_paises
                  WHERE tbl_sat_paises.alfa3 = cl.pais::bpchar)) IS NULL THEN cl.pais
                ELSE ( SELECT tbl_sat_paises.nombre
                   FROM tbl_sat_paises
                  WHERE tbl_sat_paises.alfa3 = cl.pais::bpchar)
            END
        END AS pais, COALESCE(cl.cp, ''::character varying) AS cp, 
        CASE
            WHEN rc.id_cfd IS NOT NULL AND rc.id_cfd <> 0 THEN ( SELECT tbl_cfd.serie
               FROM tbl_cfd
              WHERE tbl_cfd.id_cfd = rc.id_cfd)
            ELSE ''::character varying
        END AS cfd_serie, 
        CASE
            WHEN rc.id_cfd IS NOT NULL AND rc.id_cfd <> 0 THEN ( SELECT tbl_cfd.folio
               FROM tbl_cfd
              WHERE tbl_cfd.id_cfd = rc.id_cfd)
            ELSE 0
        END AS cfd_folio, 
        CASE
            WHEN rc.id_cfd IS NOT NULL AND rc.id_cfd <> 0 THEN ( SELECT tbl_cfd.noaprobacion
               FROM tbl_cfd
              WHERE tbl_cfd.id_cfd = rc.id_cfd)
            ELSE 0
        END AS cfd_noaprobacion, 
        CASE
            WHEN rc.id_cfd IS NOT NULL AND rc.id_cfd <> 0 THEN (( SELECT tbl_cfd.anoaprobacion
               FROM tbl_cfd
              WHERE tbl_cfd.id_cfd = rc.id_cfd))::integer
            ELSE 0
        END AS cfd_anoaprobacion, 
        CASE
            WHEN rc.id_cfd IS NOT NULL AND rc.id_cfd <> 0 THEN ( SELECT tbl_cfd.nocertificado
               FROM tbl_cfd
              WHERE tbl_cfd.id_cfd = rc.id_cfd)
            ELSE ''::character varying
        END AS cfd_nocertificado, 
        CASE
            WHEN rc.id_cfd IS NOT NULL AND rc.id_cfd <> 0 THEN (( SELECT tbl_cfd.fecha
               FROM tbl_cfd
              WHERE tbl_cfd.id_cfd = rc.id_cfd))::timestamp with time zone
            ELSE now()
        END AS cfd_fecha, 
        CASE
            WHEN rc.id_cfd IS NOT NULL AND rc.id_cfd <> 0 THEN ( SELECT tbl_cfd.cadenaoriginal
               FROM tbl_cfd
              WHERE tbl_cfd.id_cfd = rc.id_cfd)
            ELSE ''::character varying
        END AS cfd_cadenaoriginal, 
        CASE
            WHEN rc.id_cfd IS NOT NULL AND rc.id_cfd <> 0 THEN ( SELECT tbl_cfd.sello
               FROM tbl_cfd
              WHERE tbl_cfd.id_cfd = rc.id_cfd)
            ELSE ''::character varying
        END AS cfd_sello, 
        CASE
            WHEN rc.id_cfd IS NOT NULL AND rc.id_cfd <> 0 THEN ( SELECT tbl_cfd.lugarexpedicion
               FROM tbl_cfd
              WHERE tbl_cfd.id_cfd = rc.id_cfd)
            ELSE ''::character varying
        END AS cfd_lugarexpedicion, 
        CASE
            WHEN rc.id_cfd IS NOT NULL AND rc.id_cfd <> 0 THEN ( SELECT tbl_cfd.metododepago
               FROM tbl_cfd
              WHERE tbl_cfd.id_cfd = rc.id_cfd)
            ELSE ''::character varying
        END AS cfd_metododepago, 
        CASE
            WHEN ve.cfd_id_expedicion <> 0 THEN ( SELECT tbl_cfd_expediciones.cfd_nombre
               FROM tbl_cfd_expediciones
              WHERE tbl_cfd_expediciones.cfd_id_expedicion = ve.cfd_id_expedicion)
            ELSE ''::character varying
        END AS cfd_nombre, 
        CASE
            WHEN ve.cfd_id_expedicion <> 0 THEN ( SELECT tbl_cfd_expediciones.cfd_calle
               FROM tbl_cfd_expediciones
              WHERE tbl_cfd_expediciones.cfd_id_expedicion = ve.cfd_id_expedicion)
            ELSE ''::character varying
        END AS cfd_calle, 
        CASE
            WHEN ve.cfd_id_expedicion <> 0 THEN ( SELECT tbl_cfd_expediciones.cfd_noext
               FROM tbl_cfd_expediciones
              WHERE tbl_cfd_expediciones.cfd_id_expedicion = ve.cfd_id_expedicion)
            ELSE ''::character varying
        END AS cfd_noext, 
        CASE
            WHEN ve.cfd_id_expedicion <> 0 THEN ( SELECT tbl_cfd_expediciones.cfd_noint
               FROM tbl_cfd_expediciones
              WHERE tbl_cfd_expediciones.cfd_id_expedicion = ve.cfd_id_expedicion)
            ELSE ''::character varying
        END AS cfd_noint, 
        CASE
            WHEN ve.cfd_id_expedicion <> 0 THEN ( SELECT tbl_cfd_expediciones.cfd_colonia
               FROM tbl_cfd_expediciones
              WHERE tbl_cfd_expediciones.cfd_id_expedicion = ve.cfd_id_expedicion)
            ELSE ''::character varying
        END AS cfd_colonia, 
        CASE
            WHEN ve.cfd_id_expedicion <> 0 THEN ( SELECT tbl_cfd_expediciones.cfd_localidad
               FROM tbl_cfd_expediciones
              WHERE tbl_cfd_expediciones.cfd_id_expedicion = ve.cfd_id_expedicion)
            ELSE ''::character varying
        END AS cfd_localidad, 
        CASE
            WHEN ve.cfd_id_expedicion <> 0 THEN ( SELECT tbl_cfd_expediciones.cfd_municipio
               FROM tbl_cfd_expediciones
              WHERE tbl_cfd_expediciones.cfd_id_expedicion = ve.cfd_id_expedicion)
            ELSE ''::character varying
        END AS cfd_municipio, 
        CASE
            WHEN ve.cfd_id_expedicion <> 0 THEN 
            CASE
                WHEN (( SELECT tbl_sat_estados.nombre
                   FROM tbl_sat_estados
                  WHERE tbl_sat_estados.codestado::text = ((( SELECT tbl_cfd_expediciones.cfd_estado
                           FROM tbl_cfd_expediciones
                          WHERE tbl_cfd_expediciones.cfd_id_expedicion = ve.cfd_id_expedicion))::text) AND tbl_sat_estados.codpais3 = ((( SELECT tbl_cfd_expediciones.cfd_pais
                           FROM tbl_cfd_expediciones
                          WHERE tbl_cfd_expediciones.cfd_id_expedicion = ve.cfd_id_expedicion))::bpchar))) IS NULL THEN ( SELECT tbl_cfd_expediciones.cfd_estado
                   FROM tbl_cfd_expediciones
                  WHERE tbl_cfd_expediciones.cfd_id_expedicion = ve.cfd_id_expedicion)
                ELSE ( SELECT tbl_sat_estados.nombre
                   FROM tbl_sat_estados
                  WHERE tbl_sat_estados.codestado::text = ((( SELECT tbl_cfd_expediciones.cfd_estado
                           FROM tbl_cfd_expediciones
                          WHERE tbl_cfd_expediciones.cfd_id_expedicion = ve.cfd_id_expedicion))::text) AND tbl_sat_estados.codpais3 = ((( SELECT tbl_cfd_expediciones.cfd_pais
                           FROM tbl_cfd_expediciones
                          WHERE tbl_cfd_expediciones.cfd_id_expedicion = ve.cfd_id_expedicion))::bpchar))
            END
            ELSE ''::character varying
        END AS cfd_estado, 
        CASE
            WHEN ve.cfd_id_expedicion <> 0 THEN 
            CASE
                WHEN (( SELECT tbl_sat_paises.nombre
                   FROM tbl_sat_paises
                  WHERE tbl_sat_paises.alfa3 = ((( SELECT tbl_cfd_expediciones.cfd_pais
                           FROM tbl_cfd_expediciones
                          WHERE tbl_cfd_expediciones.cfd_id_expedicion = ve.cfd_id_expedicion))::bpchar))) IS NULL THEN ( SELECT tbl_cfd_expediciones.cfd_pais
                   FROM tbl_cfd_expediciones
                  WHERE tbl_cfd_expediciones.cfd_id_expedicion = ve.cfd_id_expedicion)
                ELSE ( SELECT tbl_sat_paises.nombre
                   FROM tbl_sat_paises
                  WHERE tbl_sat_paises.alfa3 = ((( SELECT tbl_cfd_expediciones.cfd_pais
                           FROM tbl_cfd_expediciones
                          WHERE tbl_cfd_expediciones.cfd_id_expedicion = ve.cfd_id_expedicion))::bpchar))
            END
            ELSE ''::character varying
        END AS cfd_pais, 
        CASE
            WHEN ve.cfd_id_expedicion <> 0 THEN ( SELECT tbl_cfd_expediciones.cfd_cp
               FROM tbl_cfd_expediciones
              WHERE tbl_cfd_expediciones.cfd_id_expedicion = ve.cfd_id_expedicion)
            ELSE ''::character varying
        END AS cfd_cp, 
        CASE
            WHEN rc.tfd IS NOT NULL AND rc.tfd > 1 THEN ( SELECT tbl_tfd.uuid
               FROM tbl_tfd
              WHERE tbl_tfd.id_cfd = rc.id_cfd)
            ELSE ''::bpchar
        END AS tfd_uuid, 
        CASE
            WHEN rc.tfd IS NOT NULL AND rc.tfd > 1 THEN (( SELECT tbl_tfd.fechatimbre
               FROM tbl_tfd
              WHERE tbl_tfd.id_cfd = rc.id_cfd))::timestamp with time zone
            ELSE now()
        END AS tfd_fechatimbre, 
        CASE
            WHEN rc.tfd IS NOT NULL AND rc.tfd > 1 THEN ( SELECT tbl_tfd.cadenaoriginal
               FROM tbl_tfd
              WHERE tbl_tfd.id_cfd = rc.id_cfd)
            ELSE ''::character varying
        END AS tfd_cadenaoriginal, 
        CASE
            WHEN rc.tfd IS NOT NULL AND rc.tfd > 1 THEN ( SELECT tbl_tfd.nocertificadosat
               FROM tbl_tfd
              WHERE tbl_tfd.id_cfd = rc.id_cfd)
            ELSE ''::character varying
        END AS tfd_nocertificadosat, 
        CASE
            WHEN rc.tfd IS NOT NULL AND rc.tfd > 1 THEN ( SELECT tbl_tfd.sellosat
               FROM tbl_tfd
              WHERE tbl_tfd.id_cfd = rc.id_cfd)
            ELSE ''::character varying
        END AS tfd_sellosat
   FROM tbl_ventas_remisiones_cab rc
   LEFT JOIN tbl_client_client cl ON cl.id_tipo = 'CL'::bpchar AND rc.id_clipro = cl.id_clave
   JOIN tbl_ventas_entidades ve ON rc.id_entidad = ve.id_entidadventa
   JOIN tbl_invserv_bodegas b ON rc.id_bodega = b.id_bodega
   JOIN tbl_cont_monedas m ON rc.moneda = m.clave
   JOIN tbl_vendedores vn ON rc.id_vendedor = vn.id_vendedor;

--ALTER TABLE view_ventas_remisiones_impcab

--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_ventas_devoluciones_impcab AS 
 SELECT rc.id_vc AS id_devolucion, rc.id_entidad, rc.numero, rc.fecha, rc.referencia, rc.status, rc.moneda AS id_moneda, m.moneda, rc.tc, rc.id_clipro AS id_cliente, COALESCE(cl.id_numero, 0) AS num_cliente, COALESCE(cl.nombre, 'Cliente de Mostrador'::character varying) AS cliente, ''::character varying AS pol, rc.id_bodega, b.nombre, rc.condicion, rc.obs, rc.mimporte AS importe, rc.mdescuento AS descuento, rc.msubtotal AS subtotal, rc.miva AS iva, rc.ieps, rc.ivaret, rc.isrret, rc.mtotal AS total, COALESCE(cl.rfc, 'XAXX010101000'::character varying) AS rfc, COALESCE(cl.direccion, ''::character varying(80)) AS direccion, COALESCE(cl.direccion, ''::character varying) AS calle, COALESCE(cl.noext, ''::character varying) AS noext, COALESCE(cl.noint, ''::character varying) AS noint, COALESCE(cl.colonia, ''::character varying) AS colonia, COALESCE(cl.poblacion, ''::character varying(80)) AS poblacion, COALESCE(cl.poblacion, ''::character varying) AS localidad, COALESCE(cl.municipio, ''::character varying) AS municipio, 
        CASE
            WHEN cl.estado IS NULL THEN ''::character varying
            ELSE 
            CASE
                WHEN (( SELECT tbl_sat_estados.nombre
                   FROM tbl_sat_estados
                  WHERE tbl_sat_estados.codestado::text = cl.estado::text AND tbl_sat_estados.codpais3 = cl.pais::bpchar)) IS NULL THEN cl.estado
                ELSE ( SELECT tbl_sat_estados.nombre
                   FROM tbl_sat_estados
                  WHERE tbl_sat_estados.codestado::text = cl.estado::text AND tbl_sat_estados.codpais3 = cl.pais::bpchar)
            END
        END AS estado, 
        CASE
            WHEN cl.pais IS NULL THEN 'M√©xico'::character varying
            ELSE 
            CASE
                WHEN (( SELECT tbl_sat_paises.nombre
                   FROM tbl_sat_paises
                  WHERE tbl_sat_paises.alfa3 = cl.pais::bpchar)) IS NULL THEN cl.pais
                ELSE ( SELECT tbl_sat_paises.nombre
                   FROM tbl_sat_paises
                  WHERE tbl_sat_paises.alfa3 = cl.pais::bpchar)
            END
        END AS pais, COALESCE(cl.cp, ''::character varying) AS cp, 
        CASE
            WHEN rc.id_cfd IS NOT NULL AND rc.id_cfd <> 0 THEN ( SELECT tbl_cfd.serie
               FROM tbl_cfd
              WHERE tbl_cfd.id_cfd = rc.id_cfd)
            ELSE ''::character varying
        END AS cfd_serie, 
        CASE
            WHEN rc.id_cfd IS NOT NULL AND rc.id_cfd <> 0 THEN ( SELECT tbl_cfd.folio
               FROM tbl_cfd
              WHERE tbl_cfd.id_cfd = rc.id_cfd)
            ELSE 0
        END AS cfd_folio, 
        CASE
            WHEN rc.id_cfd IS NOT NULL AND rc.id_cfd <> 0 THEN ( SELECT tbl_cfd.noaprobacion
               FROM tbl_cfd
              WHERE tbl_cfd.id_cfd = rc.id_cfd)
            ELSE 0
        END AS cfd_noaprobacion, 
        CASE
            WHEN rc.id_cfd IS NOT NULL AND rc.id_cfd <> 0 THEN (( SELECT tbl_cfd.anoaprobacion
               FROM tbl_cfd
              WHERE tbl_cfd.id_cfd = rc.id_cfd))::integer
            ELSE 0
        END AS cfd_anoaprobacion, 
        CASE
            WHEN rc.id_cfd IS NOT NULL AND rc.id_cfd <> 0 THEN ( SELECT tbl_cfd.nocertificado
               FROM tbl_cfd
              WHERE tbl_cfd.id_cfd = rc.id_cfd)
            ELSE ''::character varying
        END AS cfd_nocertificado, 
        CASE
            WHEN rc.id_cfd IS NOT NULL AND rc.id_cfd <> 0 THEN (( SELECT tbl_cfd.fecha
               FROM tbl_cfd
              WHERE tbl_cfd.id_cfd = rc.id_cfd))::timestamp with time zone
            ELSE now()
        END AS cfd_fecha, 
        CASE
            WHEN rc.id_cfd IS NOT NULL AND rc.id_cfd <> 0 THEN ( SELECT tbl_cfd.cadenaoriginal
               FROM tbl_cfd
              WHERE tbl_cfd.id_cfd = rc.id_cfd)
            ELSE ''::character varying
        END AS cfd_cadenaoriginal, 
        CASE
            WHEN rc.id_cfd IS NOT NULL AND rc.id_cfd <> 0 THEN ( SELECT tbl_cfd.sello
               FROM tbl_cfd
              WHERE tbl_cfd.id_cfd = rc.id_cfd)
            ELSE ''::character varying
        END AS cfd_sello, 
        CASE
            WHEN rc.id_cfd IS NOT NULL AND rc.id_cfd <> 0 THEN ( SELECT tbl_cfd.lugarexpedicion
               FROM tbl_cfd
              WHERE tbl_cfd.id_cfd = rc.id_cfd)
            ELSE ''::character varying
        END AS cfd_lugarexpedicion, 
        CASE
            WHEN rc.id_cfd IS NOT NULL AND rc.id_cfd <> 0 THEN ( SELECT tbl_cfd.metododepago
               FROM tbl_cfd
              WHERE tbl_cfd.id_cfd = rc.id_cfd)
            ELSE ''::character varying
        END AS cfd_metododepago, 
        CASE
            WHEN ve.cfd_id_expedicion <> 0 THEN ( SELECT tbl_cfd_expediciones.cfd_nombre
               FROM tbl_cfd_expediciones
              WHERE tbl_cfd_expediciones.cfd_id_expedicion = ve.cfd_id_expedicion)
            ELSE ''::character varying
        END AS cfd_nombre, 
        CASE
            WHEN ve.cfd_id_expedicion <> 0 THEN ( SELECT tbl_cfd_expediciones.cfd_calle
               FROM tbl_cfd_expediciones
              WHERE tbl_cfd_expediciones.cfd_id_expedicion = ve.cfd_id_expedicion)
            ELSE ''::character varying
        END AS cfd_calle, 
        CASE
            WHEN ve.cfd_id_expedicion <> 0 THEN ( SELECT tbl_cfd_expediciones.cfd_noext
               FROM tbl_cfd_expediciones
              WHERE tbl_cfd_expediciones.cfd_id_expedicion = ve.cfd_id_expedicion)
            ELSE ''::character varying
        END AS cfd_noext, 
        CASE
            WHEN ve.cfd_id_expedicion <> 0 THEN ( SELECT tbl_cfd_expediciones.cfd_noint
               FROM tbl_cfd_expediciones
              WHERE tbl_cfd_expediciones.cfd_id_expedicion = ve.cfd_id_expedicion)
            ELSE ''::character varying
        END AS cfd_noint, 
        CASE
            WHEN ve.cfd_id_expedicion <> 0 THEN ( SELECT tbl_cfd_expediciones.cfd_colonia
               FROM tbl_cfd_expediciones
              WHERE tbl_cfd_expediciones.cfd_id_expedicion = ve.cfd_id_expedicion)
            ELSE ''::character varying
        END AS cfd_colonia, 
        CASE
            WHEN ve.cfd_id_expedicion <> 0 THEN ( SELECT tbl_cfd_expediciones.cfd_localidad
               FROM tbl_cfd_expediciones
              WHERE tbl_cfd_expediciones.cfd_id_expedicion = ve.cfd_id_expedicion)
            ELSE ''::character varying
        END AS cfd_localidad, 
        CASE
            WHEN ve.cfd_id_expedicion <> 0 THEN ( SELECT tbl_cfd_expediciones.cfd_municipio
               FROM tbl_cfd_expediciones
              WHERE tbl_cfd_expediciones.cfd_id_expedicion = ve.cfd_id_expedicion)
            ELSE ''::character varying
        END AS cfd_municipio, 
        CASE
            WHEN ve.cfd_id_expedicion <> 0 THEN 
            CASE
                WHEN (( SELECT tbl_sat_estados.nombre
                   FROM tbl_sat_estados
                  WHERE tbl_sat_estados.codestado::text = ((( SELECT tbl_cfd_expediciones.cfd_estado
                           FROM tbl_cfd_expediciones
                          WHERE tbl_cfd_expediciones.cfd_id_expedicion = ve.cfd_id_expedicion))::text) AND tbl_sat_estados.codpais3 = ((( SELECT tbl_cfd_expediciones.cfd_pais
                           FROM tbl_cfd_expediciones
                          WHERE tbl_cfd_expediciones.cfd_id_expedicion = ve.cfd_id_expedicion))::bpchar))) IS NULL THEN ( SELECT tbl_cfd_expediciones.cfd_estado
                   FROM tbl_cfd_expediciones
                  WHERE tbl_cfd_expediciones.cfd_id_expedicion = ve.cfd_id_expedicion)
                ELSE ( SELECT tbl_sat_estados.nombre
                   FROM tbl_sat_estados
                  WHERE tbl_sat_estados.codestado::text = ((( SELECT tbl_cfd_expediciones.cfd_estado
                           FROM tbl_cfd_expediciones
                          WHERE tbl_cfd_expediciones.cfd_id_expedicion = ve.cfd_id_expedicion))::text) AND tbl_sat_estados.codpais3 = ((( SELECT tbl_cfd_expediciones.cfd_pais
                           FROM tbl_cfd_expediciones
                          WHERE tbl_cfd_expediciones.cfd_id_expedicion = ve.cfd_id_expedicion))::bpchar))
            END
            ELSE ''::character varying
        END AS cfd_estado, 
        CASE
            WHEN ve.cfd_id_expedicion <> 0 THEN 
            CASE
                WHEN (( SELECT tbl_sat_paises.nombre
                   FROM tbl_sat_paises
                  WHERE tbl_sat_paises.alfa3 = ((( SELECT tbl_cfd_expediciones.cfd_pais
                           FROM tbl_cfd_expediciones
                          WHERE tbl_cfd_expediciones.cfd_id_expedicion = ve.cfd_id_expedicion))::bpchar))) IS NULL THEN ( SELECT tbl_cfd_expediciones.cfd_pais
                   FROM tbl_cfd_expediciones
                  WHERE tbl_cfd_expediciones.cfd_id_expedicion = ve.cfd_id_expedicion)
                ELSE ( SELECT tbl_sat_paises.nombre
                   FROM tbl_sat_paises
                  WHERE tbl_sat_paises.alfa3 = ((( SELECT tbl_cfd_expediciones.cfd_pais
                           FROM tbl_cfd_expediciones
                          WHERE tbl_cfd_expediciones.cfd_id_expedicion = ve.cfd_id_expedicion))::bpchar))
            END
            ELSE ''::character varying
        END AS cfd_pais, 
        CASE
            WHEN ve.cfd_id_expedicion <> 0 THEN ( SELECT tbl_cfd_expediciones.cfd_cp
               FROM tbl_cfd_expediciones
              WHERE tbl_cfd_expediciones.cfd_id_expedicion = ve.cfd_id_expedicion)
            ELSE ''::character varying
        END AS cfd_cp, 
        CASE
            WHEN rc.tfd IS NOT NULL AND rc.tfd > 1 THEN ( SELECT tbl_tfd.uuid
               FROM tbl_tfd
              WHERE tbl_tfd.id_cfd = rc.id_cfd)
            ELSE ''::bpchar
        END AS tfd_uuid, 
        CASE
            WHEN rc.tfd IS NOT NULL AND rc.tfd > 1 THEN (( SELECT tbl_tfd.fechatimbre
               FROM tbl_tfd
              WHERE tbl_tfd.id_cfd = rc.id_cfd))::timestamp with time zone
            ELSE now()
        END AS tfd_fechatimbre, 
        CASE
            WHEN rc.tfd IS NOT NULL AND rc.tfd > 1 THEN ( SELECT tbl_tfd.cadenaoriginal
               FROM tbl_tfd
              WHERE tbl_tfd.id_cfd = rc.id_cfd)
            ELSE ''::character varying
        END AS tfd_cadenaoriginal, 
        CASE
            WHEN rc.tfd IS NOT NULL AND rc.tfd > 1 THEN ( SELECT tbl_tfd.nocertificadosat
               FROM tbl_tfd
              WHERE tbl_tfd.id_cfd = rc.id_cfd)
            ELSE ''::character varying
        END AS tfd_nocertificadosat, 
        CASE
            WHEN rc.tfd IS NOT NULL AND rc.tfd > 1 THEN ( SELECT tbl_tfd.sellosat
               FROM tbl_tfd
              WHERE tbl_tfd.id_cfd = rc.id_cfd)
            ELSE ''::character varying
        END AS tfd_sellosat
   FROM tbl_ventas_devoluciones_cab rc
   LEFT JOIN tbl_client_client cl ON cl.id_tipo = 'CL'::bpchar AND rc.id_clipro = cl.id_clave
   JOIN tbl_ventas_entidades ve ON rc.id_entidad = ve.id_entidadventa
   JOIN tbl_invserv_bodegas b ON rc.id_bodega = b.id_bodega
   JOIN tbl_cont_monedas m ON rc.moneda = m.clave
   JOIN tbl_vendedores vn ON rc.id_vendedor = vn.id_vendedor;

--ALTER TABLE view_ventas_devoluciones_impcab

--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_ventas_facturas_impdet AS 
 SELECT rd.id_vc AS id_factura, rd.partida, rd.cantidad, rd.id_prod, c.descripcion, c.id_unidadsalida, rd.precio, rd.descuento, rd.iva, rd.obs, rd.importe, c.id_tipo, 
        CASE
            WHEN rd.iva = 0::numeric THEN rd.precio
            ELSE round(rd.precio + rd.precio * rd.iva / 100::numeric, 4)
        END AS precioiva, 
        CASE
            WHEN rd.iva = 0::numeric THEN 
            CASE
                WHEN rd.descuento = 0::numeric THEN round(rd.precio * rd.cantidad, 4)
                ELSE round(rd.precio * rd.cantidad - rd.precio * rd.cantidad * rd.descuento / 100::numeric, 4)
            END
            ELSE 
            CASE
                WHEN rd.descuento = 0::numeric THEN round(rd.precio * rd.cantidad + rd.precio * rd.cantidad * rd.iva / 100::numeric, 4)
                ELSE round(rd.precio * rd.cantidad - rd.precio * rd.cantidad * rd.descuento / 100::numeric + (rd.precio * rd.cantidad - rd.precio * rd.cantidad * rd.descuento / 100::numeric) * rd.iva / 100::numeric, 4)
            END
        END AS importeiva
   FROM tbl_ventas_facturas_det rd
   JOIN tbl_invserv_inventarios c ON rd.id_prod::text = c.id_prod::text;
  


--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_ventas_remisiones_impdet AS 
 SELECT rd.id_vc AS id_remision, rd.partida, rd.cantidad, rd.id_prod, c.descripcion, c.id_unidadsalida, rd.precio, rd.descuento, rd.iva, rd.obs, rd.importe, c.id_tipo, 
        CASE
            WHEN rd.iva = 0::numeric THEN rd.precio
            ELSE round(rd.precio + rd.precio * rd.iva / 100::numeric, 4)
        END AS precioiva, 
        CASE
            WHEN rd.iva = 0::numeric THEN 
            CASE
                WHEN rd.descuento = 0::numeric THEN round(rd.precio * rd.cantidad, 4)
                ELSE round(rd.precio * rd.cantidad - rd.precio * rd.cantidad * rd.descuento / 100::numeric, 4)
            END
            ELSE 
            CASE
                WHEN rd.descuento = 0::numeric THEN round(rd.precio * rd.cantidad + rd.precio * rd.cantidad * rd.iva / 100::numeric, 4)
                ELSE round(rd.precio * rd.cantidad - rd.precio * rd.cantidad * rd.descuento / 100::numeric + (rd.precio * rd.cantidad - rd.precio * rd.cantidad * rd.descuento / 100::numeric) * rd.iva / 100::numeric, 4)
            END
        END AS importeiva
   FROM tbl_ventas_remisiones_det rd
   JOIN tbl_invserv_inventarios c ON rd.id_prod::text = c.id_prod::text;



--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_ventas_devoluciones_impdet AS 
 SELECT rd.id_vc AS id_devolucion, rd.partida, rd.cantidad, rd.id_prod, c.descripcion, c.id_unidadsalida, rd.precio, rd.descuento, rd.iva, rd.obs, rd.importe, c.id_tipo, 
        CASE
            WHEN rd.iva = 0::numeric THEN rd.precio
            ELSE round(rd.precio + rd.precio * rd.iva / 100::numeric, 4)
        END AS precioiva, 
        CASE
            WHEN rd.iva = 0::numeric THEN 
            CASE
                WHEN rd.descuento = 0::numeric THEN round(rd.precio * rd.cantidad, 4)
                ELSE round(rd.precio * rd.cantidad - rd.precio * rd.cantidad * rd.descuento / 100::numeric, 4)
            END
            ELSE 
            CASE
                WHEN rd.descuento = 0::numeric THEN round(rd.precio * rd.cantidad + rd.precio * rd.cantidad * rd.iva / 100::numeric, 4)
                ELSE round(rd.precio * rd.cantidad - rd.precio * rd.cantidad * rd.descuento / 100::numeric + (rd.precio * rd.cantidad - rd.precio * rd.cantidad * rd.descuento / 100::numeric) * rd.iva / 100::numeric, 4)
            END
        END AS importeiva
   FROM tbl_ventas_devoluciones_det rd
   JOIN tbl_invserv_inventarios c ON rd.id_prod::text = c.id_prod::text;   
 

--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_invserv_traspasos_impcab AS 
 SELECT m.id_movimiento, m.salida, m.status, m.fecha, m.fechaentrega AS entrega, m.id_bodega, ( SELECT tbl_invserv_bodegas.nombre
           FROM tbl_invserv_bodegas
          WHERE tbl_invserv_bodegas.id_bodega = m.id_bodega) AS bodega, m.id_bodegadest, c.nombre AS bodegadest, m.concepto, m.referencia, 
        CASE
            WHEN (( SELECT tbl_invserv_bodegas.cfd_id_expedicion
               FROM tbl_invserv_bodegas
              WHERE tbl_invserv_bodegas.id_bodega = m.id_bodegadest)) <> 0 THEN ( SELECT tbl_cfd_expediciones.cfd_nombre
               FROM tbl_cfd_expediciones
              WHERE tbl_cfd_expediciones.cfd_id_expedicion = (( SELECT tbl_invserv_bodegas.cfd_id_expedicion
                       FROM tbl_invserv_bodegas
                      WHERE tbl_invserv_bodegas.id_bodega = m.id_bodegadest)))
            ELSE ''::character varying
        END AS nombre, 
        CASE
            WHEN (( SELECT tbl_invserv_bodegas.cfd_id_expedicion
               FROM tbl_invserv_bodegas
              WHERE tbl_invserv_bodegas.id_bodega = m.id_bodegadest)) <> 0 THEN ( SELECT tbl_cfd_expediciones.cfd_calle
               FROM tbl_cfd_expediciones
              WHERE tbl_cfd_expediciones.cfd_id_expedicion = (( SELECT tbl_invserv_bodegas.cfd_id_expedicion
                       FROM tbl_invserv_bodegas
                      WHERE tbl_invserv_bodegas.id_bodega = m.id_bodegadest)))
            ELSE ''::character varying
        END AS calle, 
        CASE
            WHEN (( SELECT tbl_invserv_bodegas.cfd_id_expedicion
               FROM tbl_invserv_bodegas
              WHERE tbl_invserv_bodegas.id_bodega = m.id_bodegadest)) <> 0 THEN ( SELECT tbl_cfd_expediciones.cfd_noext
               FROM tbl_cfd_expediciones
              WHERE tbl_cfd_expediciones.cfd_id_expedicion = (( SELECT tbl_invserv_bodegas.cfd_id_expedicion
                       FROM tbl_invserv_bodegas
                      WHERE tbl_invserv_bodegas.id_bodega = m.id_bodegadest)))
            ELSE ''::character varying
        END AS noext, 
        CASE
            WHEN (( SELECT tbl_invserv_bodegas.cfd_id_expedicion
               FROM tbl_invserv_bodegas
              WHERE tbl_invserv_bodegas.id_bodega = m.id_bodegadest)) <> 0 THEN ( SELECT tbl_cfd_expediciones.cfd_noint
               FROM tbl_cfd_expediciones
              WHERE tbl_cfd_expediciones.cfd_id_expedicion = (( SELECT tbl_invserv_bodegas.cfd_id_expedicion
                       FROM tbl_invserv_bodegas
                      WHERE tbl_invserv_bodegas.id_bodega = m.id_bodegadest)))
            ELSE ''::character varying
        END AS noint, 
        CASE
            WHEN (( SELECT tbl_invserv_bodegas.cfd_id_expedicion
               FROM tbl_invserv_bodegas
              WHERE tbl_invserv_bodegas.id_bodega = m.id_bodegadest)) <> 0 THEN ( SELECT tbl_cfd_expediciones.cfd_colonia
               FROM tbl_cfd_expediciones
              WHERE tbl_cfd_expediciones.cfd_id_expedicion = (( SELECT tbl_invserv_bodegas.cfd_id_expedicion
                       FROM tbl_invserv_bodegas
                      WHERE tbl_invserv_bodegas.id_bodega = m.id_bodegadest)))
            ELSE ''::character varying
        END AS colonia, 
        CASE
            WHEN (( SELECT tbl_invserv_bodegas.cfd_id_expedicion
               FROM tbl_invserv_bodegas
              WHERE tbl_invserv_bodegas.id_bodega = m.id_bodegadest)) <> 0 THEN ( SELECT tbl_cfd_expediciones.cfd_localidad
               FROM tbl_cfd_expediciones
              WHERE tbl_cfd_expediciones.cfd_id_expedicion = (( SELECT tbl_invserv_bodegas.cfd_id_expedicion
                       FROM tbl_invserv_bodegas
                      WHERE tbl_invserv_bodegas.id_bodega = m.id_bodegadest)))
            ELSE ''::character varying
        END AS localidad, 
        CASE
            WHEN (( SELECT tbl_invserv_bodegas.cfd_id_expedicion
               FROM tbl_invserv_bodegas
              WHERE tbl_invserv_bodegas.id_bodega = m.id_bodegadest)) <> 0 THEN ( SELECT tbl_cfd_expediciones.cfd_municipio
               FROM tbl_cfd_expediciones
              WHERE tbl_cfd_expediciones.cfd_id_expedicion = (( SELECT tbl_invserv_bodegas.cfd_id_expedicion
                       FROM tbl_invserv_bodegas
                      WHERE tbl_invserv_bodegas.id_bodega = m.id_bodegadest)))
            ELSE ''::character varying
        END AS municipio, 
        CASE
            WHEN (( SELECT tbl_invserv_bodegas.cfd_id_expedicion
               FROM tbl_invserv_bodegas
              WHERE tbl_invserv_bodegas.id_bodega = m.id_bodegadest)) <> 0 THEN 
            CASE
                WHEN (( SELECT tbl_sat_estados.nombre
                   FROM tbl_sat_estados
                  WHERE tbl_sat_estados.codestado::text = ((( SELECT tbl_cfd_expediciones.cfd_estado
                           FROM tbl_cfd_expediciones
                          WHERE tbl_cfd_expediciones.cfd_id_expedicion = (( SELECT tbl_invserv_bodegas.cfd_id_expedicion
                                   FROM tbl_invserv_bodegas
                                  WHERE tbl_invserv_bodegas.id_bodega = m.id_bodegadest))))::text) AND tbl_sat_estados.codpais3 = ((( SELECT tbl_cfd_expediciones.cfd_pais
                           FROM tbl_cfd_expediciones
                          WHERE tbl_cfd_expediciones.cfd_id_expedicion = (( SELECT tbl_invserv_bodegas.cfd_id_expedicion
                                   FROM tbl_invserv_bodegas
                                  WHERE tbl_invserv_bodegas.id_bodega = m.id_bodegadest))))::bpchar))) IS NULL THEN ( SELECT tbl_cfd_expediciones.cfd_estado
                   FROM tbl_cfd_expediciones
                  WHERE tbl_cfd_expediciones.cfd_id_expedicion = (( SELECT tbl_invserv_bodegas.cfd_id_expedicion
                           FROM tbl_invserv_bodegas
                          WHERE tbl_invserv_bodegas.id_bodega = m.id_bodegadest)))
                ELSE ( SELECT tbl_sat_estados.nombre
                   FROM tbl_sat_estados
                  WHERE tbl_sat_estados.codestado::text = ((( SELECT tbl_cfd_expediciones.cfd_estado
                           FROM tbl_cfd_expediciones
                          WHERE tbl_cfd_expediciones.cfd_id_expedicion = (( SELECT tbl_invserv_bodegas.cfd_id_expedicion
                                   FROM tbl_invserv_bodegas
                                  WHERE tbl_invserv_bodegas.id_bodega = m.id_bodegadest))))::text) AND tbl_sat_estados.codpais3 = ((( SELECT tbl_cfd_expediciones.cfd_pais
                           FROM tbl_cfd_expediciones
                          WHERE tbl_cfd_expediciones.cfd_id_expedicion = (( SELECT tbl_invserv_bodegas.cfd_id_expedicion
                                   FROM tbl_invserv_bodegas
                                  WHERE tbl_invserv_bodegas.id_bodega = m.id_bodegadest))))::bpchar))
            END
            ELSE ''::character varying
        END AS estado, 
        CASE
            WHEN (( SELECT tbl_invserv_bodegas.cfd_id_expedicion
               FROM tbl_invserv_bodegas
              WHERE tbl_invserv_bodegas.id_bodega = m.id_bodegadest)) <> 0 THEN 
            CASE
                WHEN (( SELECT tbl_sat_paises.nombre
                   FROM tbl_sat_paises
                  WHERE tbl_sat_paises.alfa3 = ((( SELECT tbl_cfd_expediciones.cfd_pais
                           FROM tbl_cfd_expediciones
                          WHERE tbl_cfd_expediciones.cfd_id_expedicion = (( SELECT tbl_invserv_bodegas.cfd_id_expedicion
                                   FROM tbl_invserv_bodegas
                                  WHERE tbl_invserv_bodegas.id_bodega = m.id_bodegadest))))::bpchar))) IS NULL THEN ( SELECT tbl_cfd_expediciones.cfd_pais
                   FROM tbl_cfd_expediciones
                  WHERE tbl_cfd_expediciones.cfd_id_expedicion = (( SELECT tbl_invserv_bodegas.cfd_id_expedicion
                           FROM tbl_invserv_bodegas
                          WHERE tbl_invserv_bodegas.id_bodega = m.id_bodegadest)))
                ELSE ( SELECT tbl_sat_paises.nombre
                   FROM tbl_sat_paises
                  WHERE tbl_sat_paises.alfa3 = ((( SELECT tbl_cfd_expediciones.cfd_pais
                           FROM tbl_cfd_expediciones
                          WHERE tbl_cfd_expediciones.cfd_id_expedicion = (( SELECT tbl_invserv_bodegas.cfd_id_expedicion
                                   FROM tbl_invserv_bodegas
                                  WHERE tbl_invserv_bodegas.id_bodega = m.id_bodegadest))))::bpchar))
            END
            ELSE ''::character varying
        END AS pais, 
        CASE
            WHEN (( SELECT tbl_invserv_bodegas.cfd_id_expedicion
               FROM tbl_invserv_bodegas
              WHERE tbl_invserv_bodegas.id_bodega = m.id_bodegadest)) <> 0 THEN ( SELECT tbl_cfd_expediciones.cfd_cp
               FROM tbl_cfd_expediciones
              WHERE tbl_cfd_expediciones.cfd_id_expedicion = (( SELECT tbl_invserv_bodegas.cfd_id_expedicion
                       FROM tbl_invserv_bodegas
                      WHERE tbl_invserv_bodegas.id_bodega = m.id_bodegadest)))
            ELSE ''::character varying
        END AS cp, 
        CASE
            WHEN m.id_cfd IS NOT NULL AND m.id_cfd <> 0 THEN ( SELECT tbl_cfd.serie
               FROM tbl_cfd
              WHERE tbl_cfd.id_cfd = m.id_cfd)
            ELSE ''::character varying
        END AS cfd_serie, 
        CASE
            WHEN m.id_cfd IS NOT NULL AND m.id_cfd <> 0 THEN ( SELECT tbl_cfd.folio
               FROM tbl_cfd
              WHERE tbl_cfd.id_cfd = m.id_cfd)
            ELSE 0
        END AS cfd_folio, 
        CASE
            WHEN m.id_cfd IS NOT NULL AND m.id_cfd <> 0 THEN ( SELECT tbl_cfd.noaprobacion
               FROM tbl_cfd
              WHERE tbl_cfd.id_cfd = m.id_cfd)
            ELSE 0
        END AS cfd_noaprobacion, 
        CASE
            WHEN m.id_cfd IS NOT NULL AND m.id_cfd <> 0 THEN (( SELECT tbl_cfd.anoaprobacion
               FROM tbl_cfd
              WHERE tbl_cfd.id_cfd = m.id_cfd))::integer
            ELSE 0
        END AS cfd_anoaprobacion, 
        CASE
            WHEN m.id_cfd IS NOT NULL AND m.id_cfd <> 0 THEN ( SELECT tbl_cfd.nocertificado
               FROM tbl_cfd
              WHERE tbl_cfd.id_cfd = m.id_cfd)
            ELSE ''::character varying
        END AS cfd_nocertificado, 
        CASE
            WHEN m.id_cfd IS NOT NULL AND m.id_cfd <> 0 THEN (( SELECT tbl_cfd.fecha
               FROM tbl_cfd
              WHERE tbl_cfd.id_cfd = m.id_cfd))::timestamp with time zone
            ELSE now()
        END AS cfd_fecha, 
        CASE
            WHEN m.id_cfd IS NOT NULL AND m.id_cfd <> 0 THEN ( SELECT tbl_cfd.cadenaoriginal
               FROM tbl_cfd
              WHERE tbl_cfd.id_cfd = m.id_cfd)
            ELSE ''::character varying
        END AS cfd_cadenaoriginal, 
        CASE
            WHEN m.id_cfd IS NOT NULL AND m.id_cfd <> 0 THEN ( SELECT tbl_cfd.sello
               FROM tbl_cfd
              WHERE tbl_cfd.id_cfd = m.id_cfd)
            ELSE ''::character varying
        END AS cfd_sello, 
        CASE
            WHEN m.id_cfd IS NOT NULL AND m.id_cfd <> 0 THEN ( SELECT tbl_cfd.lugarexpedicion
               FROM tbl_cfd
              WHERE tbl_cfd.id_cfd = m.id_cfd)
            ELSE ''::character varying
        END AS cfd_lugarexpedicion, 
        CASE
            WHEN m.id_cfd IS NOT NULL AND m.id_cfd <> 0 THEN ( SELECT tbl_cfd.metododepago
               FROM tbl_cfd
              WHERE tbl_cfd.id_cfd = m.id_cfd)
            ELSE ''::character varying
        END AS cfd_metododepago, 
        CASE
            WHEN (( SELECT tbl_invserv_bodegas.cfd_id_expedicion
               FROM tbl_invserv_bodegas
              WHERE tbl_invserv_bodegas.id_bodega = m.id_bodega)) <> 0 THEN ( SELECT tbl_cfd_expediciones.cfd_nombre
               FROM tbl_cfd_expediciones
              WHERE tbl_cfd_expediciones.cfd_id_expedicion = (( SELECT tbl_invserv_bodegas.cfd_id_expedicion
                       FROM tbl_invserv_bodegas
                      WHERE tbl_invserv_bodegas.id_bodega = m.id_bodega)))
            ELSE ''::character varying
        END AS cfd_nombre, 
        CASE
            WHEN (( SELECT tbl_invserv_bodegas.cfd_id_expedicion
               FROM tbl_invserv_bodegas
              WHERE tbl_invserv_bodegas.id_bodega = m.id_bodega)) <> 0 THEN ( SELECT tbl_cfd_expediciones.cfd_calle
               FROM tbl_cfd_expediciones
              WHERE tbl_cfd_expediciones.cfd_id_expedicion = (( SELECT tbl_invserv_bodegas.cfd_id_expedicion
                       FROM tbl_invserv_bodegas
                      WHERE tbl_invserv_bodegas.id_bodega = m.id_bodega)))
            ELSE ''::character varying
        END AS cfd_calle, 
        CASE
            WHEN (( SELECT tbl_invserv_bodegas.cfd_id_expedicion
               FROM tbl_invserv_bodegas
              WHERE tbl_invserv_bodegas.id_bodega = m.id_bodega)) <> 0 THEN ( SELECT tbl_cfd_expediciones.cfd_noext
               FROM tbl_cfd_expediciones
              WHERE tbl_cfd_expediciones.cfd_id_expedicion = (( SELECT tbl_invserv_bodegas.cfd_id_expedicion
                       FROM tbl_invserv_bodegas
                      WHERE tbl_invserv_bodegas.id_bodega = m.id_bodega)))
            ELSE ''::character varying
        END AS cfd_noext, 
        CASE
            WHEN (( SELECT tbl_invserv_bodegas.cfd_id_expedicion
               FROM tbl_invserv_bodegas
              WHERE tbl_invserv_bodegas.id_bodega = m.id_bodega)) <> 0 THEN ( SELECT tbl_cfd_expediciones.cfd_noint
               FROM tbl_cfd_expediciones
              WHERE tbl_cfd_expediciones.cfd_id_expedicion = (( SELECT tbl_invserv_bodegas.cfd_id_expedicion
                       FROM tbl_invserv_bodegas
                      WHERE tbl_invserv_bodegas.id_bodega = m.id_bodega)))
            ELSE ''::character varying
        END AS cfd_noint, 
        CASE
            WHEN (( SELECT tbl_invserv_bodegas.cfd_id_expedicion
               FROM tbl_invserv_bodegas
              WHERE tbl_invserv_bodegas.id_bodega = m.id_bodega)) <> 0 THEN ( SELECT tbl_cfd_expediciones.cfd_colonia
               FROM tbl_cfd_expediciones
              WHERE tbl_cfd_expediciones.cfd_id_expedicion = (( SELECT tbl_invserv_bodegas.cfd_id_expedicion
                       FROM tbl_invserv_bodegas
                      WHERE tbl_invserv_bodegas.id_bodega = m.id_bodega)))
            ELSE ''::character varying
        END AS cfd_colonia, 
        CASE
            WHEN (( SELECT tbl_invserv_bodegas.cfd_id_expedicion
               FROM tbl_invserv_bodegas
              WHERE tbl_invserv_bodegas.id_bodega = m.id_bodega)) <> 0 THEN ( SELECT tbl_cfd_expediciones.cfd_localidad
               FROM tbl_cfd_expediciones
              WHERE tbl_cfd_expediciones.cfd_id_expedicion = (( SELECT tbl_invserv_bodegas.cfd_id_expedicion
                       FROM tbl_invserv_bodegas
                      WHERE tbl_invserv_bodegas.id_bodega = m.id_bodega)))
            ELSE ''::character varying
        END AS cfd_localidad, 
        CASE
            WHEN (( SELECT tbl_invserv_bodegas.cfd_id_expedicion
               FROM tbl_invserv_bodegas
              WHERE tbl_invserv_bodegas.id_bodega = m.id_bodega)) <> 0 THEN ( SELECT tbl_cfd_expediciones.cfd_municipio
               FROM tbl_cfd_expediciones
              WHERE tbl_cfd_expediciones.cfd_id_expedicion = (( SELECT tbl_invserv_bodegas.cfd_id_expedicion
                       FROM tbl_invserv_bodegas
                      WHERE tbl_invserv_bodegas.id_bodega = m.id_bodega)))
            ELSE ''::character varying
        END AS cfd_municipio, 
        CASE
            WHEN (( SELECT tbl_invserv_bodegas.cfd_id_expedicion
               FROM tbl_invserv_bodegas
              WHERE tbl_invserv_bodegas.id_bodega = m.id_bodega)) <> 0 THEN 
            CASE
                WHEN (( SELECT tbl_sat_estados.nombre
                   FROM tbl_sat_estados
                  WHERE tbl_sat_estados.codestado::text = ((( SELECT tbl_cfd_expediciones.cfd_estado
                           FROM tbl_cfd_expediciones
                          WHERE tbl_cfd_expediciones.cfd_id_expedicion = (( SELECT tbl_invserv_bodegas.cfd_id_expedicion
                                   FROM tbl_invserv_bodegas
                                  WHERE tbl_invserv_bodegas.id_bodega = m.id_bodega))))::text) AND tbl_sat_estados.codpais3 = ((( SELECT tbl_cfd_expediciones.cfd_pais
                           FROM tbl_cfd_expediciones
                          WHERE tbl_cfd_expediciones.cfd_id_expedicion = (( SELECT tbl_invserv_bodegas.cfd_id_expedicion
                                   FROM tbl_invserv_bodegas
                                  WHERE tbl_invserv_bodegas.id_bodega = m.id_bodega))))::bpchar))) IS NULL THEN ( SELECT tbl_cfd_expediciones.cfd_estado
                   FROM tbl_cfd_expediciones
                  WHERE tbl_cfd_expediciones.cfd_id_expedicion = (( SELECT tbl_invserv_bodegas.cfd_id_expedicion
                           FROM tbl_invserv_bodegas
                          WHERE tbl_invserv_bodegas.id_bodega = m.id_bodega)))
                ELSE ( SELECT tbl_sat_estados.nombre
                   FROM tbl_sat_estados
                  WHERE tbl_sat_estados.codestado::text = ((( SELECT tbl_cfd_expediciones.cfd_estado
                           FROM tbl_cfd_expediciones
                          WHERE tbl_cfd_expediciones.cfd_id_expedicion = (( SELECT tbl_invserv_bodegas.cfd_id_expedicion
                                   FROM tbl_invserv_bodegas
                                  WHERE tbl_invserv_bodegas.id_bodega = m.id_bodega))))::text) AND tbl_sat_estados.codpais3 = ((( SELECT tbl_cfd_expediciones.cfd_pais
                           FROM tbl_cfd_expediciones
                          WHERE tbl_cfd_expediciones.cfd_id_expedicion = (( SELECT tbl_invserv_bodegas.cfd_id_expedicion
                                   FROM tbl_invserv_bodegas
                                  WHERE tbl_invserv_bodegas.id_bodega = m.id_bodega))))::bpchar))
            END
            ELSE ''::character varying
        END AS cfd_estado, 
        CASE
            WHEN (( SELECT tbl_invserv_bodegas.cfd_id_expedicion
               FROM tbl_invserv_bodegas
              WHERE tbl_invserv_bodegas.id_bodega = m.id_bodega)) <> 0 THEN 
            CASE
                WHEN (( SELECT tbl_sat_paises.nombre
                   FROM tbl_sat_paises
                  WHERE tbl_sat_paises.alfa3 = ((( SELECT tbl_cfd_expediciones.cfd_pais
                           FROM tbl_cfd_expediciones
                          WHERE tbl_cfd_expediciones.cfd_id_expedicion = (( SELECT tbl_invserv_bodegas.cfd_id_expedicion
                                   FROM tbl_invserv_bodegas
                                  WHERE tbl_invserv_bodegas.id_bodega = m.id_bodega))))::bpchar))) IS NULL THEN ( SELECT tbl_cfd_expediciones.cfd_pais
                   FROM tbl_cfd_expediciones
                  WHERE tbl_cfd_expediciones.cfd_id_expedicion = (( SELECT tbl_invserv_bodegas.cfd_id_expedicion
                           FROM tbl_invserv_bodegas
                          WHERE tbl_invserv_bodegas.id_bodega = m.id_bodega)))
                ELSE ( SELECT tbl_sat_paises.nombre
                   FROM tbl_sat_paises
                  WHERE tbl_sat_paises.alfa3 = ((( SELECT tbl_cfd_expediciones.cfd_pais
                           FROM tbl_cfd_expediciones
                          WHERE tbl_cfd_expediciones.cfd_id_expedicion = (( SELECT tbl_invserv_bodegas.cfd_id_expedicion
                                   FROM tbl_invserv_bodegas
                                  WHERE tbl_invserv_bodegas.id_bodega = m.id_bodega))))::bpchar))
            END
            ELSE ''::character varying
        END AS cfd_pais, 
        CASE
            WHEN (( SELECT tbl_invserv_bodegas.cfd_id_expedicion
               FROM tbl_invserv_bodegas
              WHERE tbl_invserv_bodegas.id_bodega = m.id_bodega)) <> 0 THEN ( SELECT tbl_cfd_expediciones.cfd_cp
               FROM tbl_cfd_expediciones
              WHERE tbl_cfd_expediciones.cfd_id_expedicion = (( SELECT tbl_invserv_bodegas.cfd_id_expedicion
                       FROM tbl_invserv_bodegas
                      WHERE tbl_invserv_bodegas.id_bodega = m.id_bodega)))
            ELSE ''::character varying
        END AS cfd_cp, 
        CASE
            WHEN m.tfd IS NOT NULL AND m.tfd > 1 THEN ( SELECT tbl_tfd.uuid
               FROM tbl_tfd
              WHERE tbl_tfd.id_cfd = m.id_cfd)
            ELSE ''::bpchar
        END AS tfd_uuid, 
        CASE
            WHEN m.tfd IS NOT NULL AND m.tfd > 1 THEN (( SELECT tbl_tfd.fechatimbre
               FROM tbl_tfd
              WHERE tbl_tfd.id_cfd = m.id_cfd))::timestamp with time zone
            ELSE now()
        END AS tfd_fechatimbre, 
        CASE
            WHEN m.tfd IS NOT NULL AND m.tfd > 1 THEN ( SELECT tbl_tfd.cadenaoriginal
               FROM tbl_tfd
              WHERE tbl_tfd.id_cfd = m.id_cfd)
            ELSE ''::character varying
        END AS tfd_cadenaoriginal, 
        CASE
            WHEN m.tfd IS NOT NULL AND m.tfd > 1 THEN ( SELECT tbl_tfd.nocertificadosat
               FROM tbl_tfd
              WHERE tbl_tfd.id_cfd = m.id_cfd)
            ELSE ''::character varying
        END AS tfd_nocertificadosat, 
        CASE
            WHEN m.tfd IS NOT NULL AND m.tfd > 1 THEN ( SELECT tbl_tfd.sellosat
               FROM tbl_tfd
              WHERE tbl_tfd.id_cfd = m.id_cfd)
            ELSE ''::character varying
        END AS tfd_sellosat
   FROM tbl_invserv_almacen_bod_mov_cab m
   JOIN tbl_invserv_bodegas c ON m.id_bodegadest = c.id_bodega;

--ALTER TABLE view_invserv_traspasos_impcab

--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_invserv_traspasos_impdet AS 
 SELECT m.id_movimiento, m.partida, m.id_prod, c.descripcion, m.cantidad, c.id_unidadsalida AS unidad
   FROM tbl_invserv_almacen_bod_mov_det m
   JOIN tbl_invserv_inventarios c ON m.id_prod::text = c.id_prod::text;
   


--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_invserv_traspasos_det AS 
 SELECT rd.id_movimiento AS id_factura, rd.partida, rd.cantidad, rd.id_prod, c.descripcion, c.id_unidadsalida, 0.0 AS precio, 0.0 AS descuento, 0.0 AS iva, 0.0 AS ieps, 0.0 AS ivaret, 0.0 AS isrret, ''::character varying AS obs, 0.0 AS importe, 0.0 AS importedesc, 0.0 AS importeiva, 0.0 AS importeieps, 0.0 AS importeivaret, 0.0 AS importeisrret, 0.0 AS totalpart, c.id_tipo
   FROM tbl_invserv_almacen_bod_mov_det rd
   JOIN tbl_invserv_inventarios c ON rd.id_prod::text = c.id_prod::text;

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('COMP_CXP');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('COMP_CXP_CONSULTAR');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('COMP_CXP_AGREGAR');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('COMP_CXP_PAGAR');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('COMP_CXP_SALDAR');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('COMP_CXP_CANCELAR');  
  


--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_public_bancos_cuentas_vs_compras AS 
 SELECT b.tipo, b.clave, b.cuenta, b.sigcheque, e.id_entidadcompra
   FROM tbl_bancos_cuentas b
   JOIN tbl_bancos_vs_compras e ON b.tipo = e.id_tipobanco AND b.clave = e.id_clavebanco
  WHERE b.status <> 'C'::bpchar;



--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_public_provee_cxp_conceptos_cat AS 
 SELECT c.id_concepto, 
        CASE
            WHEN c.desistema = B'1'::"bit" THEN ( SELECT m.msj1
               FROM tbl_msj m
              WHERE m.alc::text = 'CEF'::text AND m.mod::text = 'CXPC_ENLACES'::text AND m.sub::text = 'CATALOGO'::text AND m.elm::text = c.id_concepto::text)
            ELSE c.descripcion
        END AS descripcion, c.desistema, c.tipo, c.cc
   FROM tbl_provee_cxp_conceptos c;
   


--@FIN_BLOQUE
CREATE TABLE tbl_provee_cxp
(
  id_cp serial NOT NULL,
-- Inherited from table abstbl_cuentaspagos:  id_entidad smallint NOT NULL,
-- Inherited from table abstbl_cuentaspagos:  id_tipocp character(3) NOT NULL,
-- Inherited from table abstbl_cuentaspagos:  fecha timestamp without time zone NOT NULL,
-- Inherited from table abstbl_cuentaspagos:  id_tipoclipro character(2) NOT NULL,
-- Inherited from table abstbl_cuentaspagos:  id_claveclipro integer NOT NULL,
-- Inherited from table abstbl_cuentaspagos:  id_concepto smallint NOT NULL,
-- Inherited from table abstbl_cuentaspagos:  concepto character varying(80) NOT NULL,
-- Inherited from table abstbl_cuentaspagos:  id_tipodocorig character(4),
-- Inherited from table abstbl_cuentaspagos:  id_clavedocorig integer,
-- Inherited from table abstbl_cuentaspagos:  moneda smallint NOT NULL,
-- Inherited from table abstbl_cuentaspagos:  tc numeric(19,4) NOT NULL,
-- Inherited from table abstbl_cuentaspagos:  total numeric(19,4) NOT NULL,
-- Inherited from table abstbl_cuentaspagos:  saldo numeric(19,4) NOT NULL,
-- Inherited from table abstbl_cuentaspagos:  vencimiento timestamp without time zone NOT NULL,
-- Inherited from table abstbl_cuentaspagos:  ref character varying(25),
-- Inherited from table abstbl_cuentaspagos:  status character(1) NOT NULL,
-- Inherited from table abstbl_cuentaspagos:  id_pol integer,
-- Inherited from table abstbl_cuentaspagos:  id_aplicacion integer,
-- Inherited from table abstbl_cuentaspagos:  id_pagobancaj integer,
  CONSTRAINT pk_tbl_provee_cxp PRIMARY KEY (id_cp ),
  CONSTRAINT fk_tbl_provee_cxp_tbl_bancos_movimientos FOREIGN KEY (id_pagobancaj)
      REFERENCES tbl_bancos_movimientos (id) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE SET NULL,
  CONSTRAINT fk_tbl_provee_cxp_tbl_compras_entidades FOREIGN KEY (id_entidad)
      REFERENCES tbl_compras_entidades (id_entidadcompra) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_tbl_provee_cxp_tbl_cont_monedas FOREIGN KEY (moneda)
      REFERENCES tbl_cont_monedas (clave) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_tbl_provee_cxp_tbl_cont_polizas FOREIGN KEY (id_pol)
      REFERENCES tbl_cont_polizas (id) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE SET NULL,
  CONSTRAINT fk_tbl_provee_cxp_tbl_provee_cxp FOREIGN KEY (id_aplicacion)
      REFERENCES tbl_provee_cxp (id_cp) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE SET NULL,
  CONSTRAINT fk_tbl_provee_cxp_tbl_provee_cxp_conceptos FOREIGN KEY (id_concepto)
      REFERENCES tbl_provee_cxp_conceptos (id_concepto) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_tbl_provee_cxp_tbl_provee_provee FOREIGN KEY (id_tipoclipro, id_claveclipro)
      REFERENCES tbl_provee_provee (id_tipo, id_clave) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT ck_tbl_provee_cxp_id_tipocp CHECK (id_tipocp = 'ALT'::bpchar OR id_tipocp = 'PAG'::bpchar OR id_tipocp = 'SAL'::bpchar OR id_tipocp = 'ANT'::bpchar OR id_tipocp = 'APL'::bpchar OR id_tipocp = 'DPA'::bpchar OR id_tipocp = 'DEV'::bpchar),
  CONSTRAINT ck_tbl_provee_cxp_status CHECK (status = 'C'::bpchar OR status = 'G'::bpchar)
)
INHERITS (abstbl_cuentaspagos);
  


--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_catalog_provee_cxp_conceptos AS 
 SELECT c.id_concepto AS clave, c.descripcion, c.tipo AS especial
   FROM tbl_provee_cxp_conceptos c
  WHERE c.desistema = B'0'::"bit";
  
  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_provee_cxp_prestamo(
    _id_entidad smallint,
    _fecha timestamp without time zone,
    _id_tipoprovee character,
    _id_claveprovee integer,
    _concepto character varying,
    _doc character varying,
    _moneda smallint,
    _tc numeric,
    _total numeric,
    _id_formapago smallint,
    _id_bancaj smallint,
    _cantidad numeric,
    _tipomov character,
    _id_satbanco character,
    _id_satmetodospago character,
    _bancoext character varying,
    _cuentabanco character varying,
    _cheque character varying)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_ID_CXP int; _bancajmov int; _err int; _result varchar(255); _Vencimiento timestamp;   
	_errpart int; _resultpart varchar(255); _banresult varchar(255);
	_CC char(19); _BanCaj smallint; _mes smallint; _ano smallint; _IdMon smallint; _tcBAN numeric(19,4); _TotalBAN numeric(19,4);
	_ConceptoCon varchar(80); _id_clasificacion varchar(10); _Ref varchar(25); _Beneficiario varchar(80);
	_RFC varchar(15);
BEGIN
	_err := 0;
	_result := (select msj2 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'COMP_CXP' and 
			m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCOK'); 
	_CC :=  (select ID_CC from TBL_PROVEE_PROVEE where ID_Tipo = _ID_TipoProvee and ID_Clave =  _ID_ClaveProvee );
	_BanCaj := _ID_FormaPago;
	_Beneficiario := ( select Nombre from TBL_PROVEE_PROVEE where ID_Tipo = _ID_TipoProvee and ID_Clave = _ID_ClaveProvee);
	_RFC := ( select RFC from TBL_PROVEE_PROVEE where ID_Tipo = _ID_TipoProvee and ID_Clave = _ID_ClaveProvee);
	
	--_CC_Con := (select CC from TBL_CLIENT_CXC_CONCEPTOS where ID_Concepto = _ID_Concepto);
	_ConceptoCon := (select Descripcion from VIEW_PROVEE_CXP_CONCEPTOS where ID_Concepto = '1') || ' - ' || _Doc;
	_mes := date_part('month',_Fecha);
	_ano := date_part('year',_Fecha);
	_id_clasificacion := (select ID_Clasificacion from TBL_COMPRAS_ENTIDADES where ID_EntidadCompra = _ID_Entidad);

	IF(select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano and Cerrado = 1) > 0
	OR (select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano) < 1
	THEN
		_err := 3;
		_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_POLIZAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'ERROR: La fecha de poliza pertenece a un periodo cerrado o inexistente'
	END IF;

	_IdMon := (select ID_Moneda from TBL_BANCOS_CUENTAS where Tipo = _BanCaj and Clave = _ID_BanCaj);
	_TotalBAN := (case when _IdMon = 1 then _Cantidad else _Total end );
	_tcBAN := (case when _IdMon = 1 then 1.0 else _TC end);

	IF _IdMon <> 1 and _IdMon <> _Moneda
	THEN
		_err := 3;
		_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'COMP_CXP' and 
			m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'ERROR: Solo se pueden anticipar con bancos de moneda extranjera, pagos de la misma moneda extranjera';
	END IF;
	
	IF _err = 0
	THEN
		INSERT INTO TBL_PROVEE_CXP
		VALUES(default, _ID_Entidad, 'ANT', _Fecha, _ID_TipoProvee, _ID_ClaveProvee, '1', _Concepto,/*id_tipodocorig*/ null,/*id_clavedocorig*/ null,_Moneda,_TC,_Total,_Total,_Fecha,/*Ref*/null,'G',null,null,null)
		RETURNING currval(pg_get_serial_sequence('TBL_PROVEE_CXP', 'id_cp')) INTO _id_cxp;

		UPDATE  TBL_PROVEE_CXP
		SET ID_Aplicacion = _ID_CXP
		WHERE ID_CP = _ID_CXP;

		_Ref = 'CCXP|' || cast(_ID_CXP as varchar) || '|' || cast(_ID_Entidad as varchar) || '||';

		UPDATE TBL_PROVEE_SALDOS_MONEDAS
		SET Saldo = Saldo - _Total
		WHERE ID_Moneda = _Moneda AND ID_Tipo = _ID_TipoProvee AND ID_Clave = _ID_ClaveProvee;

		CREATE LOCAL TEMPORARY TABLE _TMP_BANCOS_MOVIMIENTOS_DETALLE (
			Part smallint NOT NULL ,
			Cuenta char(19) NOT NULL ,
			Concepto varchar(80) NOT NULL ,
			Parcial numeric(19,4) NOT NULL ,
			Moneda smallint NOT NULL ,
			TC numeric(19,4) NOT NULL ,
			Cantidad numeric(19,4) NOT NULL
		);

		IF _Moneda = 1 OR (_Moneda <> 1 AND _IdMon <> 1) -- Si el anticipo es en pesos o, El anticipo es e dls y el banco esta en esa misma moneda		
		THEN
			INSERT INTO _TMP_BANCOS_MOVIMIENTOS_DETALLE
			VALUES( '1', _CC, _ConceptoCon, _Total, _Moneda, _TC, _Total);
		 		
			SELECT * INTO _errpart, _resultpart, _bancajmov FROM  sp_bancos_movs_agregar( _BanCaj, _ID_BanCaj, _Fecha, _Concepto, _Beneficiario, 0.00, _Total, _tipomov, 'T', _IdMon, _tcBAN, _Ref, _Doc, _id_clasificacion, null , _ID_SatBanco, _RFC, _ID_SatMetodosPago, _BancoExt, _CuentaBanco, _Cheque) as ( err integer, res varchar, clave integer);
			
		ELSE -- Moneda extranjera con pago a cuenta de pesos.
			INSERT INTO _TMP_BANCOS_MOVIMIENTOS_DETALLE
			VALUES( '1', _CC, _ConceptoCon, _Total, _Moneda, _TC, _Cantidad);
		 		
			SELECT * INTO _errpart, _resultpart, _bancajmov FROM  sp_bancos_movs_agregar( _BanCaj, _ID_BanCaj, _Fecha, _Concepto, _Beneficiario, 0.00, _Cantidad, _tipomov, 'T', _IdMon, _tcBAN, _Ref, _Doc, _id_clasificacion, null, _ID_SatBanco, _RFC, _ID_SatMetodosPago, _BancoExt, _CuentaBanco, _Cheque) as ( err integer, res varchar, clave integer);
				
		END IF;
		
		IF _errpart <> 0
		THEN
			_err := _errpart;
			_result := _resultpart;
		ELSE
			-- Procede a hacer update al anticipo con el ID del movimiento de banco o caja 
			UPDATE  TBL_PROVEE_CXP
			SET ID_PagoBanCaj = _bancajmov
			WHERE ID_CP = _ID_CXP;
		END IF;
		
		DROP TABLE _TMP_BANCOS_MOVIMIENTOS_DETALLE;
				
	END IF;

	RETURN QUERY SELECT _err, _result, _id_cxp;

END
$BODY$
  LANGUAGE plpgsql;
  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_provee_cxp_alta(_id_entidad smallint, _fecha timestamp without time zone, _id_tipoprovee character, _id_claveprovee integer, _concepto character varying, _moneda smallint, _tc numeric, _total numeric, _cantidad numeric, _id_concepto smallint, id_tipodocorig character varying, id_clavedocorig integer, _claseref character varying)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_ID_CXP int; _err int; _result varchar(255); _Vencimiento timestamp; _VencimientoInterval varchar(10);  
	_Dias smallint; _errpart int; _resultpart varchar(255); _numpol int; _CC char(19); _CC_Con char(19); 
	_ConceptoCon varchar(80); _Ref varchar(25); _mes smallint; _ano smallint; _id_clasificacion varchar(10);
BEGIN
	_err := 0;
	_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'VEN_CXC' and 
			m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCOK'); 
	_Dias := (select Dias from TBL_PROVEE_PROVEE where ID_Tipo = _ID_TipoProvee and ID_Clave =  _ID_ClaveProvee );
	_VencimientoInterval := cast(_Dias as varchar) || ' day';
	_Vencimiento := _Fecha + _VencimientoInterval::interval; --DATEADD(day, @Dias, @Fecha)
	_CC :=  (select ID_CC from TBL_PROVEE_PROVEE where ID_Tipo = _ID_TipoProvee and ID_Clave =  _ID_ClaveProvee );
	_CC_Con = (select CC from TBL_PROVEE_CXP_CONCEPTOS where ID_Concepto = _ID_Concepto);
	_ConceptoCon = (select Descripcion from TBL_PROVEE_CXP_CONCEPTOS where ID_Concepto = _ID_Concepto);
	_mes := date_part('month',_Fecha);
	_ano := date_part('year',_Fecha);
	_id_clasificacion := (select ID_Clasificacion from TBL_COMPRAS_ENTIDADES where ID_EntidadCompra = _ID_Entidad);

	IF(select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano and Cerrado = 1) > 0
	OR (select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano) < 1
	THEN
		_err := 3;
		_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_POLIZAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'ERROR: La fecha de poliza pertenece a un periodo cerrado o inexistente'
	END IF;
	
	IF _err = 0
	THEN
		INSERT INTO TBL_PROVEE_CXP
		VALUES(default, _ID_Entidad, 'ALT', _Fecha, _ID_TipoProvee, _ID_ClaveProvee, _ID_Concepto, _Concepto, id_tipodocorig, id_clavedocorig,_Moneda,_TC,_Total,_Total,_Vencimiento,_claseref,'G',null,null,null)
		RETURNING currval(pg_get_serial_sequence('TBL_PROVEE_CXP', 'id_cp')) INTO _id_cxp;

		UPDATE  TBL_PROVEE_CXP
		SET ID_Aplicacion = _ID_CXP
		WHERE ID_CP = _ID_CXP;

		_Ref = 'CCXP|' || cast(_ID_CXP as varchar) || '|' || cast(_ID_Entidad as varchar) || '||';
		
		UPDATE TBL_PROVEE_SALDOS_MONEDAS
		SET Saldo = Saldo + _Total
		WHERE ID_Moneda = _Moneda AND ID_Tipo = _ID_TipoProvee AND ID_Clave =  _ID_ClaveProvee;
		
		IF _CC_Con IS NOT NULL -- si el concepto de alta tiene contraparte contable, registrar√° la poliza 
		THEN
			-- Primero registra y crea la tabla temporal de detalle de la poliza
			CREATE LOCAL TEMPORARY TABLE _TMP_CONT_POLIZAS_DETALLE (
				Part smallint NOT NULL ,
				Cuenta char(19) NOT NULL ,
				Concepto varchar(80) NOT NULL ,
				Parcial numeric(19,4) NOT NULL ,
				Moneda smallint NOT NULL ,
				TC numeric(19,4) NOT NULL ,
				Debe numeric(19,4) NOT NULL ,
				Haber numeric(19,4) NOT NULL
			);
			-- Fin de la tabla temporal

			-- Inserta el cargo al cliente
			INSERT INTO _TMP_CONT_POLIZAS_DETALLE
			VALUES (1, _CC, _ConceptoCon, _Total, _Moneda, _TC, 0.00, _Cantidad);
			
			-- Copia el abono al concepto del alta
			INSERT INTO _TMP_CONT_POLIZAS_DETALLE
			VALUES (2, _CC_Con, _ConceptoCon, _Total, _Moneda, _TC, _Cantidad, 0.00);
					
			-- Agrega ahora la poliza
			--sp_cont_polizas_agregar(_tipo character, _fecha timestamp without time zone, _concepto character varying, _interna bit, _ref character varying, _total numeric, _id_clasificacion character varying)

			SELECT * INTO _errpart, _resultpart, _numpol FROM sp_cont_polizas_agregar('DR', _Fecha, _Concepto,'0', _Ref, _Cantidad, _id_clasificacion ) as ( err integer, res varchar, clave integer );
      
			IF _errpart <> 0
			THEN
				_err := _errpart;
				_result := _resultpart;
			ELSE
				UPDATE  TBL_PROVEE_CXP
				SET ID_Pol = _numpol
				WHERE ID_CP = _ID_CXP;
			END IF;

			DROP TABLE _TMP_CONT_POLIZAS_DETALLE;
			
		END IF;
	END IF;

	RETURN QUERY SELECT _err, _result, _id_cxp;

END
$BODY$
  LANGUAGE plpgsql; 
  


--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_provee_cxp_modulo AS 
 SELECT c.id_cp AS clave, c.id_tipocp, c.id_tipoclipro AS id_tipoprovee, c.id_claveclipro AS id_claveprovee, c.id_entidad, 
        CASE
            WHEN c.saldo = 0::numeric THEN B'1'::bit(1)
            ELSE B'0'::bit(1)
        END AS pagada, c.fecha, p.nombre, c.concepto, c.moneda, mon.simbolo AS monedasim, c.tc, c.total, c.saldo, c.vencimiento, 
        CASE
            WHEN c.ref IS NULL THEN ''::character varying(25)
            ELSE c.ref
        END AS ref, c.status, 
        CASE
            WHEN c.id_pol IS NULL THEN (-1)
            ELSE c.id_pol
        END AS id_pol, 
        CASE
            WHEN c.id_pol IS NULL THEN ''::character varying::text
            ELSE ( SELECT (tbl_cont_polizas.tipo::text || ' - '::text) || tbl_cont_polizas.numero::character varying::text
               FROM tbl_cont_polizas
              WHERE tbl_cont_polizas.id = c.id_pol)
        END AS pol, c.id_concepto, con.descripcion, c.id_aplicacion, c.id_pagobancaj, 
        CASE
            WHEN c.id_pagobancaj IS NULL THEN ''::text
            ELSE ( SELECT (bc.cuenta::text || ' - '::text) || bm.num::text
               FROM tbl_bancos_movimientos bm
          JOIN tbl_bancos_cuentas bc ON bm.tipo = bc.tipo AND bm.clave = bc.clave
         WHERE bm.id = c.id_pagobancaj)
        END AS pagobancaj, round(c.total * c.tc, 2) AS totalpesos, round(c.saldo * c.tc, 2) AS saldopesos
   FROM tbl_provee_cxp c
   JOIN tbl_provee_provee p ON c.id_claveclipro = p.id_clave AND c.id_tipoclipro = p.id_tipo
   JOIN tbl_provee_cxp_conceptos con ON c.id_concepto = con.id_concepto
   JOIN tbl_cont_monedas mon ON c.moneda = mon.clave;
  
  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_provee_cxp_pagar(
    _id_entidad smallint,
    _id_cxp integer,
    _fecha timestamp without time zone,
    _doc character varying,
    _moneda smallint,
    _tc numeric,
    _total numeric,
    _id_formapago smallint,
    _id_bancaj smallint,
    _cantidad numeric,
    _obs character varying,
    _docamparado character varying,
    _essaldo bit,
    _id_concepto smallint,
    _regpol boolean,
    _id_tipodocorig character varying,
    _id_clavedocorig integer,
    _claseref character varying,
    _tipomov character,
    _id_satbanco character,
    _id_satmetodospago character,
    _bancoext character varying,
    _cuentabanco character varying,
    _cheque character varying)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_ID_CXPGEN int; _bancajmov int; _err int; _result varchar(255); _errpart int; _resultpart varchar(255); 
	_banresult varchar(255); _tcCXP numeric(19,4); _pagoCXP numeric(19,4); _CC_Con char(19); _CC char(19);
	_CC_DCAF char(19); _CC_DCEC char(19); _FormaPago char(1);
	_numpol int; _ID_TipoProvee char(2); _ID_ClaveProvee int; _ConceptoCon varchar(80);
	_Ref varchar(25); _RefCXP varchar(25); _mes smallint; _ano smallint; _Beneficiario varchar(80); _IdMon smallint; 
	_tcBAN numeric(19,4); _TotalBAN numeric(19,4); _BanCaj smallint; _id_clasificacion varchar(10);
	_pagada smallint; _tot numeric(19,4); _sald numeric(19,4); 
	_RFC varchar(15);
	--Contabilidad electronica
	_CC_COMP char(19); _CC_IVA char(19); _CC_IVAPN char(19); _CC_IEPS char(19); _CC_IEPSPN char(19); _polcxp int; _ivapnCXP boolean; _iepspnCXP boolean; _contPart smallint; _ajusteIVA numeric(19,4); _ajusteIEPS numeric(19,4);
	_compraSUBTOTAL numeric(19,4); _compraIVA numeric(19,4); _compraIEPS numeric(19,4); _compraTOTAL numeric(19,4);  _TipoDocCXP char(4); _ClaveDocCXP int;
BEGIN
	_err := 0;
	_result := (case when _EsSaldo = '0' then (select msj3 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'COMP_CXP' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCOK')
			else (select msj4 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'COMP_CXP' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCOK') end);
	_ID_TipoProvee := (select ID_TipoCliPro from TBL_PROVEE_CXP where ID_CP = _ID_CXP);
	_ID_ClaveProvee := (select ID_ClaveCliPro from TBL_PROVEE_CXP where ID_CP = _ID_CXP);
	_Beneficiario := (select Nombre from TBL_PROVEE_PROVEE where ID_Tipo = _ID_TipoProvee and ID_Clave = _ID_ClaveProvee);
	_CC :=  (select ID_CC from TBL_PROVEE_PROVEE where ID_Tipo = _ID_TipoProvee and ID_Clave =  _ID_ClaveProvee );
	_RFC := ( select RFC from TBL_PROVEE_PROVEE where ID_Tipo = _ID_TipoProvee and ID_Clave = _ID_ClaveProvee);
	
	_FormaPago := (case when _EsSaldo = '1' then 'S' else (select case when _ID_FormaPago = 1 Then 'C' else 'B' end) end);
	_BanCaj := _ID_FormaPago; -- 1 cajas 0 bancos
	_DocAmparado := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'COMP_CXP' and m.sub::text = 'BD' and m.elm::text = 'ETQ') || _DocAmparado;

	_polcxp := (select ID_Pol from TBL_PROVEE_CXP where ID_CP = _ID_CXP);
	_CC_COMP := (select valfanumerico from TBL_VARIABLES where ID_Variable = 'CC_COMP');
	_CC_IVA := (select valfanumerico from TBL_VARIABLES where ID_Variable = 'CC_IVAAC');
	_CC_IVAPN := (select valfanumerico from TBL_VARIABLES where ID_Variable = 'CC_IVAACPN');
	_CC_IEPS := (select valfanumerico from TBL_VARIABLES where ID_Variable = 'CC_IEPSC');
	_CC_IEPSPN := (select valfanumerico from TBL_VARIABLES where ID_Variable = 'CC_IEPSCPN');
	_TipoDocCXP := (select ID_TipoDocOrig from TBL_PROVEE_CXP where ID_CP = _ID_CXP);
	_ClaveDocCXP := (select ID_ClaveDocOrig from TBL_PROVEE_CXP where ID_CP = _ID_CXP);
	
	_CC_DCAF := (select valfanumerico from TBL_VARIABLES where ID_Variable = 'CC_DCAF');
	_CC_DCEC := (select valfanumerico from TBL_VARIABLES where ID_Variable = 'CC_DCEC');
	_tcCXP := (select TC from TBL_PROVEE_CXP where ID_CP = _ID_CXP);
	_pagoCXP := round((_total * _tcCXP),2);
	_bancajmov := null;
	_numpol := null;
	_CC_Con := (select CC from TBL_PROVEE_CXP_CONCEPTOS where ID_Concepto = _ID_Concepto);
	_ConceptoCon := (select Descripcion from VIEW_PROVEE_CXP_CONCEPTOS where ID_Concepto = _ID_Concepto) || ' - ' || _DocAmparado;

	_mes := date_part('month',_Fecha);
	_ano := date_part('year',_Fecha);
	--_PAGSAL := (case when _EsSaldo = '1' then 'SAL' else 'PAG' end);
	_id_clasificacion := (select ID_Clasificacion from TBL_COMPRAS_ENTIDADES where ID_EntidadCompra = _ID_Entidad);

	IF(select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano and Cerrado = 1) > 0
	OR (select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano) < 1
	THEN
		_err := 3;
		_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_POLIZAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'ERROR: La fecha de poliza pertenece a un periodo cerrado o inexistente'
	END IF;

	IF _CC_COMP = ''
	THEN
		_err := 3;
		_result := 'ERROR: La cuenta para compras a cr√©dito no existe o no se ha enlazado';	
	END IF;
	
	IF _CC_IVA = '' OR _CC_IVAPN = ''
	THEN
		_err := 3;
		_result := 'ERROR: La cuenta de iva acreditable efectivamente pagado o la de iva acreditable pendiente de pagar, no existe o no se ha enlazado';
	ELSE
		--Cuando exista version de contablilidad electr√≥nica en una cueta por pagar, extrae el iva pendiente de la p√≥liza. Esto indica un ajuste, de lo contrario no ajusta nada
		-- Por ejemplo cuando la cuenta por pagar era anterior a la contabilidad electronica, no hace ajuste de IVAs
		IF (select count(*) from TBL_CONT_POLIZAS_DETALLE where ID = _polcxp and Cuenta = _CC_IVAPN) > 0
		THEN
			IF _TipoDocCXP = 'CFAC'
			THEN
				_compraSUBTOTAL := (select SubTotal from tbl_compras_facturas_cab where id_vc = _ClaveDocCXP); 
				_compraIVA := (select IVA from tbl_compras_facturas_cab where id_vc = _ClaveDocCXP);
				_compraTOTAL := (select Total from tbl_compras_facturas_cab where id_vc = _ClaveDocCXP);
				_ivapnCXP := true;
			ELSIF _TipoDocCXP = 'CGAS'
			THEN
				_compraSUBTOTAL := (select SubTotal from tbl_compras_gastos_cab where id_vc = _ClaveDocCXP); 
				_compraIVA := (select IVA from tbl_compras_gastos_cab where id_vc = _ClaveDocCXP);
				_compraTOTAL := (select Total from tbl_compras_gastos_cab where id_vc = _ClaveDocCXP);
				_ivapnCXP := true;
			ELSE
				_ivapnCXP := false;
			END IF;
		ELSE
			_ivapnCXP := false;
		END IF;
	END IF;

	IF _CC_IEPS = '' OR _CC_IEPSPN = ''
	THEN
		_err := 3;
		_result := 'ERROR: La cuenta del IEPS efectivamente pagado o la de IEPS pendiente de pagar no existe o no se ha enlazado';
	ELSE
		--Cuando exista version de contablilidad electr√≥nica en una cueta por pagar, extrae el ieps pendiente de la p√≥liza. Esto indica un ajuste, de lo contrario no ajusta nada
		-- Por ejemplo cuando la cuenta por pagar era anterior a la contabilidad electronica, no hace ajuste de IVAs
		IF (select count(*) from TBL_CONT_POLIZAS_DETALLE where ID = _polcxp and Cuenta = _CC_IEPSPN) > 0
		THEN
			IF _TipoDocCXP = 'CFAC'
			THEN
				_compraSUBTOTAL := (select SubTotal from tbl_compras_facturas_cab where id_vc = _ClaveDocCXP); 
				_compraIEPS := (select IEPS from tbl_compras_facturas_cab where id_vc = _ClaveDocCXP);
				_compraTOTAL := (select Total from tbl_compras_facturas_cab where id_vc = _ClaveDocCXP);
				_iepspnCXP := true;
			ELSIF _TipoDocCXP = 'CGAS'
			THEN
				_compraSUBTOTAL := (select SubTotal from tbl_compras_gastos_cab where id_vc = _ClaveDocCXP); 
				_compraIEPS := (select IEPS from tbl_compras_gastos_cab where id_vc = _ClaveDocCXP);
				_compraTOTAL := (select Total from tbl_compras_gastos_cab where id_vc = _ClaveDocCXP);
				_iepspnCXP := true;
			ELSE
				_iepspnCXP := false;
			END IF;
		ELSE
			_iepspnCXP := false;
		END IF;
	END IF;
	
	IF _CC_DCAF = '' or _CC_DCEC = ''
	THEN
		_err := 3;
		_result := (select msj2 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'COMP_CXP' and 
			m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'ERROR: Las cuentas de diferencias cambiarias no se han registrado aun';
	END IF;
	
	IF _EsSaldo = '0' -- Si es pago en bancos, solo pueden pagarse cuentas en moneda extranjera con esa moneda o pesos, y si es en pesos solo con bancos en pesos
	THEN
		_IdMon := (case when _FormaPago = 'B' then ( select ID_Moneda from TBL_BANCOS_CUENTAS where Tipo = '0' and Clave = _ID_BanCaj ) 
							else ( select ID_Moneda from TBL_BANCOS_CUENTAS where Tipo = '1' and Clave = _ID_BanCaj ) end);
		_TotalBAN := (case when _IdMon = '1' then _Cantidad else _Total end);
		_tcBAN := (case when _IdMon = '1' then 1.0 else _TC end);
		IF _IdMon <> 1 and _IdMon <> _Moneda
		THEN
			_err := 3;
			_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'COMP_CXP' and 
				m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --ERROR: Solo se puede pagar con bancos de moneda extranjera, cuentas de la misma moneda extranjera';
		END IF;	
	END IF;
	
	IF _err = 0
	THEN
		_RefCXP := 'CCXP|' || cast(_ID_CXP as varchar) || '|' || cast(_ID_Entidad as varchar) || '||';

		IF _EsSaldo = '0' -- El pago se hace en efectivo o cheque
		THEN
			IF _IdMon = 1 -- Se paga con cuenta en pesos banco nacional
			THEN
				INSERT INTO TBL_PROVEE_CXP
				VALUES(default, _ID_Entidad, 'PAG', _Fecha, _ID_TipoProvee, _ID_ClaveProvee, _ID_Concepto, _Obs, _id_tipodocorig, _id_clavedocorig,_Moneda,_TC,_Total,0.00,_Fecha, _claseref, 'G',null,_ID_CXP,null)
				RETURNING currval(pg_get_serial_sequence('TBL_PROVEE_CXP', 'id_cp')) INTO _id_cxpgen;
			ELSE
				INSERT INTO TBL_PROVEE_CXP
				VALUES(default, _ID_Entidad, 'PAG', _Fecha, _ID_TipoProvee, _ID_ClaveProvee, _ID_Concepto, _Obs, _id_tipodocorig, _id_clavedocorig,_Moneda,_tcCXP,_Total,0.00,_Fecha,_claseref,'G',null,_ID_CXP,null)
				RETURNING currval(pg_get_serial_sequence('TBL_PROVEE_CXP', 'id_cp')) INTO _id_cxpgen;
			END IF;

			_Ref := 'CCXP|' || cast(_ID_CXPGEN as varchar) || '|' || cast(_ID_Entidad as varchar) || '||';
			
			CREATE LOCAL TEMPORARY TABLE _TMP_BANCOS_MOVIMIENTOS_DETALLE (
				Part smallint NOT NULL ,
				Cuenta char(19) NOT NULL ,
				Concepto varchar(80) NOT NULL ,
				Parcial numeric(19,4) NOT NULL ,
				Moneda smallint NOT NULL ,
				TC numeric(19,4) NOT NULL ,
				Cantidad numeric(19,4) NOT NULL
			);
		
			--RAISE NOTICE 'Cantidad %, _pagoCXP %', _Cantidad, _pagoCXP;
			IF _IdMon = 1 -- Se paga con cuenta en pesos banco nacional
			THEN
				_contPart := 1;
				INSERT INTO _TMP_BANCOS_MOVIMIENTOS_DETALLE
				VALUES(_contPart, _CC, (_DocAmparado || ' ' || _Doc), _Total, _Moneda, _tcCXP, _pagoCXP); -- se insertara en el proveee la cantidad que se le debe segun su CXP

				IF _ivapnCXP = true -- sera verdadero cuando sea entidad contable y versi√≥n contabilidad electronica 
				THEN
					--Calcula el iva de lo que se esta pagando con una regla de tres
					_contPart := _contPart + 1;
					_ajusteIVA := round( (((_compraIVA * _tcCXP) / (_compraTOTAL * _tcCXP)) * (_Total * _tcCXP)), 2);
					--round(     ((((_Total * _tcCXP) - (_compraIVA * _tcCXP)) *   (_compraIVA * _tcCXP)) / (_compraSUBTOTAL * _tcCXP))   , 2);
					INSERT INTO _TMP_BANCOS_MOVIMIENTOS_DETALLE
					VALUES(_contPart, _CC_IVA, 'Ajuste de los IVAs', _ajusteIVA, '1', '1.0', _ajusteIVA); 
					_contPart := _contPart + 1;
					INSERT INTO _TMP_BANCOS_MOVIMIENTOS_DETALLE
					VALUES(_contPart, _CC_IVAPN, 'Ajuste de los IVAs', _ajusteIVA, '1', '1.0', -_ajusteIVA); 
				END IF;

				IF _iepspnCXP = true -- sera verdadero cuando sea entidad contable y versi√≥n contabilidad electronica 
				THEN
					--Calcula el ieps de lo que se esta pagando con una regla de tres
					_contPart := _contPart + 1;
					_ajusteIEPS := round( (((_compraIEPS * _tcCXP) / (_compraTOTAL * _tcCXP)) * (_Total * _tcCXP)), 2);
					INSERT INTO _TMP_BANCOS_MOVIMIENTOS_DETALLE
					VALUES(_contPart, _CC_IEPS, 'Ajuste de los IEPSes', _ajusteIEPS, '1', '1.0', _ajusteIEPS); 
					_contPart := _contPart + 1;
					INSERT INTO _TMP_BANCOS_MOVIMIENTOS_DETALLE
					VALUES(_contPart, _CC_IEPSPN, 'Ajuste de los IEPSes', _ajusteIEPS, '1', '1.0', -_ajusteIEPS); 
				END IF;
				
				IF(_Cantidad < _pagoCXP) -- si la cantidad del pago es menor a la conversion en la deuda de la cxp signifiaganancia cambiaria
				THEN
					_contPart := _contPart + 1;
					--RAISE NOTICE 'perdida Parcial %, Ultimo %', (_PagoCXP - _Cantidad), -(_PagoCXP - _Cantidad);
					INSERT INTO _TMP_BANCOS_MOVIMIENTOS_DETALLE
					VALUES(_contPart, _CC_DCAF,/*Ganancia*/ (select msj3 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'COMP_CXP' and m.sub::text = 'BD' and m.elm::text = 'ETQ'), (_PagoCXP - _Cantidad),'1',1.0000,-(_PagoCXP - _Cantidad)); 
				ELSIF(_Cantidad > _pagoCXP) -- de lo contrario es una ganancia cambiaria
				THEN
					_contPart := _contPart + 1;
					--RAISE NOTICE 'ganancia Parcial %, Ultimo %', (_Cantidad - _PagoCXP), (_Cantidad - _PagoCXP);
					INSERT INTO _TMP_BANCOS_MOVIMIENTOS_DETALLE
					VALUES(_contPart, _CC_DCEC, /*Perdida*/(select msj2 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'COMP_CXP' and m.sub::text = 'BD' and m.elm::text = 'ETQ'), (_Cantidad - _PagoCXP),'1',1.0000,(_Cantidad - _PagoCXP));  					
				END IF;

				SELECT * INTO _errpart, _resultpart, _bancajmov FROM  sp_bancos_movs_agregar( _BanCaj, _ID_BanCaj, _Fecha, _Obs, _Beneficiario, 0.00, _TotalBAN, _tipomov, 'T', _IdMon, _tcBAN, _Ref, _Doc, _id_clasificacion, null, _ID_SatBanco, _RFC, _ID_SatMetodosPago, _BancoExt, _CuentaBanco, _Cheque ) as ( err integer, res varchar, clave integer);
			     
			ELSE
				_contPart := 1;
				INSERT INTO _TMP_BANCOS_MOVIMIENTOS_DETALLE
				VALUES( _contPart, _CC, (_DocAmparado || ' ' || _Doc), _Total, '1', _tcCXP, _Total); -- se insertara en el proveee la cantidad que se le debe segun su CXP
	
				IF _ivapnCXP = true -- sera verdadero cuando sea entidad contable y versi√≥n contabilidad electronica 
				THEN
					--Calcula el iva de lo que se esta pagando con una regla de tres
					_contPart := _contPart + 1;
					_ajusteIVA := round( ((_compraIVA / _compraTOTAL) * _Total), 2);
					--round(     (( (_Total - _compraIVA) *  _compraIVA) / _compraSUBTOTAL)   , 2);
					INSERT INTO _TMP_BANCOS_MOVIMIENTOS_DETALLE
					VALUES(_contPart, _CC_IVA, 'Ajuste de los IVAs', _ajusteIVA, '1', _tcCXP, _ajusteIVA); -- se insertara en el proveee la cantidad que se le debe segun su CXP
					_contPart := _contPart + 1;
					INSERT INTO _TMP_BANCOS_MOVIMIENTOS_DETALLE
					VALUES(_contPart, _CC_IVAPN, 'Ajuste de los IVAs', _ajusteIVA, '1', _tcCXP, -_ajusteIVA); -- se insertara en el proveee la cantidad que se le debe segun su CXP
				END IF;

				IF _iepspnCXP = true -- sera verdadero cuando sea entidad contable y versi√≥n contabilidad electronica 
				THEN
					--Calcula el ieps de lo que se esta pagando con una regla de tres
					_contPart := _contPart + 1;
					_ajusteIEPS := round( ((_compraIEPS / _compraTOTAL) * _Total), 2);
					INSERT INTO _TMP_BANCOS_MOVIMIENTOS_DETALLE
					VALUES(_contPart, _CC_IEPS, 'Ajuste de los IEPSes', _ajusteIEPS, '1', _tcCXP, _ajusteIEPS); -- se insertara en el proveee la cantidad que se le debe segun su CXP
					_contPart := _contPart + 1;
					INSERT INTO _TMP_BANCOS_MOVIMIENTOS_DETALLE
					VALUES(_contPart, _CC_IEPSPN, 'Ajuste de los IEPSes', _ajusteIEPS, '1', _tcCXP, -_ajusteIEPS); -- se insertara en el proveee la cantidad que se le debe segun su CXP
				END IF;

				SELECT * INTO _errpart, _resultpart, _bancajmov FROM  sp_bancos_movs_agregar( _BanCaj, _ID_BanCaj, _Fecha, _Obs, _Beneficiario, 0.00, _TotalBAN, _tipomov, 'T', _IdMon, _tcCXP, _Ref, _Doc, _id_clasificacion, null, _ID_SatBanco, _RFC, _ID_SatMetodosPago, _BancoExt, _CuentaBanco, _Cheque) as ( err integer, res varchar, clave integer);
				
			END IF;
			
			IF _errpart <> 0
			THEN
				_err := _errpart;
				_result := _resultpart;
			ELSE
				-- Procede a hacer update al anticipo con el ID del movimiento de banco o caja 
				UPDATE  TBL_PROVEE_CXP
				SET ID_PagoBanCaj = _bancajmov
				WHERE ID_CP = _ID_CXPGEN;
			END IF;
			
			DROP TABLE _TMP_BANCOS_MOVIMIENTOS_DETALLE;
		ELSE -- ES SALDO
			INSERT INTO TBL_PROVEE_CXP
			VALUES(default, _ID_Entidad, 'SAL', _Fecha, _ID_TipoProvee, _ID_ClaveProvee, _ID_Concepto, _Obs, _id_tipodocorig, _id_clavedocorig,_Moneda,_TC,_Total,0.00,_Fecha,_claseref,'G',null,_ID_CXP,null)
			RETURNING currval(pg_get_serial_sequence('TBL_PROVEE_CXP', 'id_cp')) INTO _id_cxpgen;

			_Ref := 'CCXP|' || cast(_ID_CXPGEN as varchar) || '|' || cast(_ID_Entidad as varchar) || '||';
			
			IF _CC_Con is not null AND _regpol = true --Si la cuenta del concepto es real y manda registro de poliza..... registra la poliza
			THEN
				-- Primero registra y crea la tabla temporal de detalle de la poliza
				CREATE LOCAL TEMPORARY TABLE _TMP_CONT_POLIZAS_DETALLE (
					Part smallint NOT NULL ,
					Cuenta char(19) NOT NULL ,
					Concepto varchar(80) NOT NULL ,
					Parcial numeric(19,4) NOT NULL ,
					Moneda smallint NOT NULL ,
					TC numeric(19,4) NOT NULL ,
					Debe numeric(19,4) NOT NULL ,
					Haber numeric(19,4) NOT NULL
				);
				-- Fin de la tabla temporal
				-- Inserta el cargo de la cuenta del concepto
				_contPart := 1;
				INSERT INTO _TMP_CONT_POLIZAS_DETALLE
				VALUES(_contPart, _CC_Con, (_DocAmparado || ' ' || _Doc), _Total, _Moneda, _TC, 0.0, _Cantidad);

				_contPart := _contPart + 1;
				INSERT INTO _TMP_CONT_POLIZAS_DETALLE
				VALUES(_contPart, _CC, _ConceptoCon, _Total, _Moneda, _tcCXP, _pagoCXP, 0.0); -- se insertara en el proveee la cantidad que se le debe segun su CXP

				IF(_Cantidad < _pagoCXP) -- si la cantidad del pago es menor a la conversion en la deuda de la cxp significaganancia cambiaria
				THEN
					--RAISE NOTICE 'cantMenor Parcial %, Ultimo %', (_PagoCXP - _Cantidad), -(_PagoCXP - _Cantidad);
					INSERT INTO _TMP_CONT_POLIZAS_DETALLE
					VALUES('3', _CC_DCAF, /*Ganancia*/(select msj3 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'COMP_CXP' and m.sub::text = 'BD' and m.elm::text = 'ETQ'), (_PagoCXP - _Cantidad),'1',1.0000, 0.0, (_PagoCXP - _Cantidad)); 
				ELSIF(_Cantidad > _pagoCXP) -- de lo contrario es una perdida cambiaria
				THEN
					--RAISE NOTICE 'cantMayor Parcial %, Ultimo %', (_Cantidad - _PagoCXP), (_Cantidad - _PagoCXP);
					INSERT INTO _TMP_CONT_POLIZAS_DETALLE
					VALUES('3', _CC_DCEC, /*Perdida*/(select msj2 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'COMP_CXP' and m.sub::text = 'BD' and m.elm::text = 'ETQ'), (_Cantidad - _PagoCXP),'1',1.0000, (_Cantidad - _PagoCXP), 0.0);  					
				END IF;
			
				SELECT * INTO _errpart, _resultpart, _numpol FROM sp_cont_polizas_agregar('DR', _Fecha, _Obs,'0', _Ref, _Cantidad, _id_clasificacion ) as ( err integer, res varchar, clave integer );
      				-- Agrega ahora la poliza
				IF _errpart <> 0
				THEN
					_err := _errpart;
					_result := _resultpart;
				ELSE
					UPDATE  TBL_PROVEE_CXP
					SET ID_Pol = _numpol
					WHERE ID_CP = _ID_CXPGEN;
				END IF;

				DROP TABLE _TMP_CONT_POLIZAS_DETALLE;
			END IF;
		END IF;

		-- procede a registrar la poliza de este movimiento
		IF _err = 0
		THEN
			--procede a actualizar el saldo y el status pagado de la cxp
			UPDATE  TBL_PROVEE_CXP
			SET Saldo = Saldo - _Total
			WHERE ID_CP = _ID_CXP;
			
			UPDATE TBL_PROVEE_SALDOS_MONEDAS
			SET Saldo = Saldo - _Total
			WHERE ID_Moneda = _Moneda AND ID_Tipo = _ID_TipoProvee AND ID_Clave =  _ID_ClaveProvee;
		END IF;
	END IF;

	RETURN QUERY SELECT _err, _result, _id_cxpgen;

END
$BODY$
  LANGUAGE plpgsql;
--ALTER FUNCTION sp_provee_cxp_pagar(smallint, integer, timestamp without time zone, character varying, smallint, numeric, numeric, smallint, smallint
  
--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_provee_cxp_aplanticipo(
    _id_entidad smallint,
    _id_cxp integer,
    _fecha timestamp without time zone,
    _obs character varying,
    _moneda smallint,
    _tc numeric,
    _total numeric,
    _cantidad numeric,
    _id_ant integer)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255); _errpart int; _resultpart varchar(255); _numpol int; 
	_ID_Concepto smallint; _ID_ConceptoANT smallint; _MonedaCXP smallint; _MonedaANT smallint;
	_tcCXP numeric(19,4); _tcANT numeric(19,4); _pagoCXP numeric(19,4); _saldoANT numeric(19,4); _CC_Con char(19); _CC char(19);
	_ConceptoCon varchar(80); _DocAmparado varchar(80); _id_cxpgen int; _id_cxpant int; _Ref varchar(25);
	_RefCXP varchar(25); _RefANT varchar(25); _mes smallint; _ano smallint; _CC_DCAF char(19); _CC_DCEC char(19);
	_ID_TipoProvee char(2); _ID_ClaveProvee int; _ID_TipoProveeAnt char(2); _ID_ClaveProveeAnt int; _id_clasificacion varchar(10);
	--Contabilidad electronica
	_CC_COMP char(19); _CC_IVA char(19); _CC_IVAPN char(19); _CC_IEPS char(19); _CC_IEPSPN char(19); _polcxp int; _ivapnCXP boolean; _iepspnCXP boolean; _contPart smallint; _ajusteIVA numeric(19,4); _ajusteIEPS numeric(19,4);
	_compraSUBTOTAL numeric(19,4); _compraIVA numeric(19,4); _compraIEPS numeric(19,4); _compraTOTAL numeric(19,4);  _TipoDocCXP char(4); _ClaveDocCXP int; _totalPol numeric(19,4);
BEGIN
	_err := 0;
	_result := (select msj5 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'COMP_CXP' and 
			m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCOK');
	_CC_DCAF := (select valfanumerico from TBL_VARIABLES where ID_Variable = 'CC_DCAF');
	_CC_DCEC := (select valfanumerico from TBL_VARIABLES where ID_Variable = 'CC_DCEC');
	_ID_TipoProvee := (select ID_TipoCliPro from TBL_PROVEE_CXP where ID_CP = _ID_CXP);
	_ID_ClaveProvee := (select ID_ClaveCliPro from TBL_PROVEE_CXP where ID_CP = _ID_CXP);
	_ID_TipoProveeAnt := (select ID_TipoCliPro from TBL_PROVEE_CXP where ID_CP = _ID_ANT);
	_ID_ClaveProveeAnt := (select ID_ClaveCliPro from TBL_PROVEE_CXP where ID_CP = _ID_ANT);
	_ID_Concepto := (select ID_Concepto from TBL_PROVEE_CXP where ID_CP = _ID_CXP);
	_ID_ConceptoANT := (select ID_Concepto from TBL_PROVEE_CXP where ID_CP = _ID_ANT);
	_CC :=  (select ID_CC from TBL_PROVEE_PROVEE where ID_Tipo = _ID_TipoProvee and ID_Clave =  _ID_ClaveProvee );
	_DocAmparado := (select msj4 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'COMP_CXP' and m.sub::text = 'BD' and m.elm::text = 'ETQ')  || cast(_ID_ANT as varchar);
	_tcCXP := (select TC from TBL_PROVEE_CXP where ID_CP = _ID_CXP);
	_tcANT := (select TC from TBL_PROVEE_CXP where ID_CP = _ID_ANT);
	_pagoCXP := round((_Total * _tcCXP),2);
	_saldoANT := (select Saldo from TBL_PROVEE_CXP where ID_CP = _ID_ANT);
	_MonedaCXP := (select Moneda from TBL_PROVEE_CXP where ID_CP = _ID_CXP);
	_MonedaANT := (select Moneda from TBL_PROVEE_CXP where ID_CP = _ID_ANT);
	_ConceptoCon := (select Descripcion from VIEW_PROVEE_CXP_CONCEPTOS where ID_Concepto = '1'); -- Concepto de Anticipo

	_polcxp := (select ID_Pol from TBL_PROVEE_CXP where ID_CP = _ID_CXP);
	_CC_COMP := (select valfanumerico from TBL_VARIABLES where ID_Variable = 'CC_COMP');
	_CC_IVA := (select valfanumerico from TBL_VARIABLES where ID_Variable = 'CC_IVAAC');
	_CC_IVAPN := (select valfanumerico from TBL_VARIABLES where ID_Variable = 'CC_IVAACPN');
	_CC_IEPS := (select valfanumerico from TBL_VARIABLES where ID_Variable = 'CC_IEPSC');
	_CC_IEPSPN := (select valfanumerico from TBL_VARIABLES where ID_Variable = 'CC_IEPSCPN');
	_TipoDocCXP := (select ID_TipoDocOrig from TBL_PROVEE_CXP where ID_CP = _ID_CXP);
	_ClaveDocCXP := (select ID_ClaveDocOrig from TBL_PROVEE_CXP where ID_CP = _ID_CXP);
	
	_mes := date_part('month',_Fecha);
	_ano := date_part('year',_Fecha);
	_id_clasificacion := (select ID_Clasificacion from TBL_COMPRAS_ENTIDADES where ID_EntidadCompra = _ID_Entidad);

	IF(select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano and Cerrado = 1) > 0
	OR (select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano) < 1
	THEN
		_err := 3;
		_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_POLIZAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'ERROR: La fecha de poliza pertenece a un periodo cerrado o inexistente'
	END IF;
	
	IF  (select Status from TBL_PROVEE_CXP where ID_CP = _ID_ANT) = 'C'
	THEN
		_err := 3;
		_result := 'ERROR: No se puede aplicar un anticipo cancelado';	
	END IF;

	IF _CC_COMP = ''
	THEN
		_err := 3;
		_result := 'ERROR: La cuenta para compras a cr√©dito no existe o no se ha enlazado';	
	END IF;
	
	IF _CC_IVA = '' OR _CC_IVAPN = ''
	THEN
		_err := 3;
		_result := 'ERROR: La cuenta de iva acreditable efectivamente pagado o la de iva acreditable pendiente de pagar no existe o no se ha enlazado';
	ELSE
		--Cuando exista version de contablilidad electr√≥nica en una cueta por pagar, extrae el iva pendiente de la p√≥liza. Esto indica un ajuste, de lo contrario no ajusta nada
		-- Por ejemplo cuando la cuenta por pagar era anterior a la contabilidad electronica, no hace ajuste de IVAs
		IF (select count(*) from TBL_CONT_POLIZAS_DETALLE where ID = _polcxp and Cuenta = _CC_IVAPN) > 0
		THEN
			IF _TipoDocCXP = 'CFAC'
			THEN
				_compraSUBTOTAL := (select SubTotal from tbl_compras_facturas_cab where id_vc = _ClaveDocCXP); 
				_compraIVA := (select IVA from tbl_compras_facturas_cab where id_vc = _ClaveDocCXP);
				_compraTOTAL := (select Total from tbl_compras_facturas_cab where id_vc = _ClaveDocCXP);
				_ivapnCXP := true;
			ELSIF _TipoDocCXP = 'CGAS'
			THEN
				_compraSUBTOTAL := (select SubTotal from tbl_compras_gastos_cab where id_vc = _ClaveDocCXP); 
				_compraIVA := (select IVA from tbl_compras_gastos_cab where id_vc = _ClaveDocCXP);
				_compraTOTAL := (select Total from tbl_compras_gastos_cab where id_vc = _ClaveDocCXP);
				_ivapnCXP := true;
			ELSE
				_ivapnCXP := false;
			END IF;
		ELSE
			_ivapnCXP := false;
		END IF;
	END IF;

	IF _CC_IEPS = '' OR _CC_IEPSPN = ''
	THEN
		_err := 3;
		_result := 'ERROR: La cuenta del IEPS efectivamente pagado o la de IEPS pendiente de pagar no existe o no se ha enlazado';
	ELSE
		--Cuando exista version de contablilidad electr√≥nica en una cueta por pagar, extrae el ieps pendiente de la p√≥liza. Esto indica un ajuste, de lo contrario no ajusta nada
		-- Por ejemplo cuando la cuenta por pagar era anterior a la contabilidad electronica, no hace ajuste de IEPSes
		IF (select count(*) from TBL_CONT_POLIZAS_DETALLE where ID = _polcxp and Cuenta = _CC_IEPSPN) > 0
		THEN
			IF _TipoDocCXP = 'CFAC'
			THEN
				_compraSUBTOTAL := (select SubTotal from tbl_compras_facturas_cab where id_vc = _ClaveDocCXP); 
				_compraIEPS := (select IEPS from tbl_compras_facturas_cab where id_vc = _ClaveDocCXP);
				_compraTOTAL := (select Total from tbl_compras_facturas_cab where id_vc = _ClaveDocCXP);
				_iepspnCXP := true;
			ELSIF _TipoDocCXP = 'CGAS'
			THEN
				_compraSUBTOTAL := (select SubTotal from tbl_compras_gastos_cab where id_vc = _ClaveDocCXP); 
				_compraIEPS := (select IEPS from tbl_compras_gastos_cab where id_vc = _ClaveDocCXP);
				_compraTOTAL := (select Total from tbl_compras_gastos_cab where id_vc = _ClaveDocCXP);
				_iepspnCXP := true;
			ELSE
				_iepspnCXP := false;
			END IF;
		ELSE
			_iepspnCXP := false;
		END IF;
	END IF;

	IF _CC_DCAF = '' or _CC_DCEC = ''
	THEN
		_err := 3;
		_result := (select msj2 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'COMP_CXP' and 
			m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'ERROR: Las cuentas de diferencias cambiarias no se han registrado aun';
	END IF;

	IF _ID_TipoProvee <> _ID_TipoProveeANT or _ID_ClaveProvee <> _ID_ClaveProveeANT or _ID_ConceptoANT <> '1' or _ID_Concepto = '1'
	THEN
		_err := 3;
		_result := (select msj3 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'COMP_CXP' and 
			m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR');  --'ERROR: El proveee del anticipo es distinto al de la cuenta por cobrar, o en su defecto se quiere aplicar el anticipo a una cuenta que representa un anticipo';
	END IF;

	IF _Moneda <> _MonedaCXP or _Moneda <> _MonedaANT or _TC <> _tcANT
	THEN
		_err := 3;
		_result := (select msj4 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'COMP_CXP' and 
			m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'ERROR: Las monedas de la cuenta y el anticipo son distintas, o el tipo de cambio del anticipo no es el mismo que el de esta aplicaci√≥n. No se puede aplicar el anticipo';
	END IF;

	IF _saldoANT < _Total
	THEN
		_err := 3;
		_result :=  (select msj5 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'COMP_CXP' and 
			m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'ERROR: El anticipo que se quiere aplicar es mayor al saldo de la cuenta del propio anticipo';
	END IF;

	IF _err = 0
	THEN	
		--Primero genera el descuento por aplicacion
		_RefANT := 'CCXP|' || cast(_ID_ANT as varchar) || '|' || cast(_ID_Entidad as varchar) || '||';

		INSERT INTO TBL_PROVEE_CXP
		VALUES(default, _ID_Entidad, 'DPA', _Fecha, _ID_TipoProvee, _ID_ClaveProvee, '101', _Obs,/*id_tipodocorig*/ null,/*id_clavedocorig*/ null,_Moneda,_TC,_Total,0.00,_Fecha,/*_RefANT*/ null,'G',null,_ID_ANT,null)
		RETURNING currval(pg_get_serial_sequence('TBL_PROVEE_CXP', 'id_cp')) INTO _id_cxpant;
		--VALUES(@ID_ANT,@numeroANT,@Fecha,101,@Moneda,@TC,@Total,'A','G',@ID_CXP,-1,@numero,@Obs)

		--Ahora genera la aplicacion
		_RefCXP := 'CCXP|' || cast(_ID_CXP as varchar) || '|' || cast(_ID_Entidad as varchar) || '||';

		INSERT INTO TBL_PROVEE_CXP
		VALUES(default, _ID_Entidad, 'APL', _Fecha, _ID_TipoProvee, _ID_ClaveProvee, '101', _Obs,'CCXP',_id_cxpant,_Moneda,_TC,_Total,( _pagoCXP - _Cantidad ),_Fecha,/*_RefCXP*/ null,'G',null,_ID_CXP,null)
		RETURNING currval(pg_get_serial_sequence('TBL_PROVEE_CXP', 'id_cp')) INTO _id_cxpgen;
			
		_Ref := 'CCXP|' || cast(_ID_CXPGEN as varchar) || '|' || cast(_ID_Entidad as varchar) || '||';

		IF _Cantidad <> _pagoCXP OR _ivapnCXP = true OR _iepspnCXP = true -- SI HAY DIFERENCIA CAMBIARIA o IVAs y/o IEPSes DE CONTABILIDAD ELECTRONICA POR AJUSTAR
		THEN
			
			-- Primero registra y crea la tabla temporal de detalle de la poliza
			CREATE LOCAL TEMPORARY TABLE _TMP_CONT_POLIZAS_DETALLE (
				Part smallint NOT NULL ,
				Cuenta char(19) NOT NULL ,
				Concepto varchar(80) NOT NULL ,
				Parcial numeric(19,4) NOT NULL ,
				Moneda smallint NOT NULL ,
				TC numeric(19,4) NOT NULL ,
				Debe numeric(19,4) NOT NULL ,
				Haber numeric(19,4) NOT NULL
			);
			-- Fin de la tabla temporal
			_contPart := 0;
			_totalPol := 0.0;
			IF _ivapnCXP = true -- sera verdadero cuando sea entidad contable y versi√≥n contabilidad electronica 
			THEN
				--Calcula el iva de lo que se esta aplicando con una regla de tres
				_contPart := _contPart + 1;
				_ajusteIVA := round( (((_compraIVA * _tcCXP) / (_compraTOTAL * _tcCXP)) * (_Total * _tcCXP)), 2);
				INSERT INTO _TMP_CONT_POLIZAS_DETALLE
				VALUES(_contPart, _CC_IVA, 'Ajuste de los IVAs', _ajusteIVA, '1', '1.0', _ajusteIVA, 0.0); 
				_contPart := _contPart + 1;
				INSERT INTO _TMP_CONT_POLIZAS_DETALLE
				VALUES(_contPart, _CC_IVAPN, 'Ajuste de los IVAs', _ajusteIVA, '1', '1.0', 0.0, _ajusteIVA); -- se insertara en el proveee la cantidad que se le debe segun su CXP
				_totalPol := _totalPol + _ajusteIVA;
			END IF;
			IF _iepspnCXP = true -- sera verdadero cuando sea entidad contable y versi√≥n contabilidad electronica 
			THEN
				--Calcula el ieps de lo que se esta aplicando con una regla de tres
				_contPart := _contPart + 1;
				_ajusteIEPS := round( (((_compraIEPS * _tcCXP) / (_compraTOTAL * _tcCXP)) * (_Total * _tcCXP)), 2);
				INSERT INTO _TMP_CONT_POLIZAS_DETALLE
				VALUES(_contPart, _CC_IEPS, 'Ajuste de los IEPSes', _ajusteIEPS, '1', '1.0', _ajusteIEPS, 0.0); 
				_contPart := _contPart + 1;
				INSERT INTO _TMP_CONT_POLIZAS_DETALLE
				VALUES(_contPart, _CC_IEPSPN, 'Ajuste de los IEPSes', _ajusteIEPS, '1', '1.0', 0.0, _ajusteIEPS); -- se insertara en el proveee la cantidad que se le debe segun su CXP
				_totalPol := _totalPol + _ajusteIEPS;
			END IF;
			
			IF _Cantidad < _pagoCXP -- si la cantidad del pago es menor a la conversion en la deuda de la cxp significaganancia cambiaria
			THEN
				_contPart := _contPart + 1;
				INSERT INTO _TMP_CONT_POLIZAS_DETALLE
				VALUES(_contPart, _CC_DCAF, /*Ganancia*/(select msj3 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'COMP_CXP' and m.sub::text = 'BD' and m.elm::text = 'ETQ') , (_PagoCXP - _Cantidad),'1',1.0000, 0.0, (_PagoCXP - _Cantidad)); 

				_contPart := _contPart + 1;
				INSERT INTO _TMP_CONT_POLIZAS_DETALLE
				VALUES(_contPart, _CC, _DocAmparado, (_PagoCXP - _Cantidad),'1',1.0000, (_PagoCXP - _Cantidad), 0.0);
							
				_totalPol := _totalPol + (_PagoCXP - _Cantidad);
			ELSIF _Cantidad > _pagoCXP -- de lo contrario es una perdida cambiaria
			THEN
				_contPart := _contPart + 1;
				INSERT INTO _TMP_CONT_POLIZAS_DETALLE
				VALUES(_contPart, _CC, _DocAmparado, (_Cantidad - _PagoCXP),'1',1.0000, 0.0, (_Cantidad - _PagoCXP));

				_contPart := _contPart + 1;
				INSERT INTO _TMP_CONT_POLIZAS_DETALLE
				VALUES(_contPart, _CC_DCEC, /*Perdida*/(select msj2 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'COMP_CXP' and m.sub::text = 'BD' and m.elm::text = 'ETQ') , (_Cantidad - _PagoCXP),'1',1.0000, (_Cantidad - _PagoCXP), 0.0); 
								
				_totalPol := _totalPol + (_Cantidad - _PagoCXP);
      			END IF;

      			SELECT * INTO _errpart, _resultpart, _numpol FROM sp_cont_polizas_agregar('DR', _Fecha, _Obs, '0', _Ref, _totalPol, _id_clasificacion ) as ( err integer, res varchar, clave integer );

			--Fin de la agregacion
		
			-- Agrega ahora la poliza
			IF _errpart <> 0
			THEN
				_err := _errpart;
				_result := _resultpart;
			ELSE
				UPDATE TBL_PROVEE_CXP
				SET ID_Pol = _numpol
				WHERE ID_CP = _id_cxpgen;
			END IF;

			DROP TABLE _TMP_CONT_POLIZAS_DETALLE;
		END IF;

		IF _err = 0
		THEN
			--procede a actualizar el saldo y el status pagado de la cxp
			UPDATE  TBL_PROVEE_CXP
			SET Saldo = Saldo - _Total
			WHERE ID_CP = _ID_CXP;
			
			UPDATE  TBL_PROVEE_CXP
			SET Saldo = Saldo - _Total
			WHERE ID_CP = _ID_ANT;
	
		END IF;
	
	END IF;
	
	RETURN QUERY SELECT _err, _result, _id_cxpgen;

END
$BODY$
  LANGUAGE plpgsql;
--ALTER FUNCTION sp_provee_cxp_aplanticipo(smallint, integer, timestamp without time zone, character varying, smallint, numeric, numeric
  
--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_provee_cxp_devanticipo(
    _id_entidad smallint,
    _id_cxp integer,
    _fecha timestamp without time zone,
    _doc character varying,
    _moneda smallint,
    _tc numeric,
    _total numeric,
    _id_formapago smallint,
    _id_bancaj smallint,
    _cantidad numeric,
    _obs character varying,
    _docamparado character varying,
    _essaldo bit,
    _id_concepto smallint,
    _tipomov character,
    _id_satbanco character,
    _id_satmetodospago character,
    _bancoext character varying,
    _cuentabanco character varying,
    _cheque character varying)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_id_cxpgen integer; _bancajmov int; _err int; _result varchar(255); _errpart int; _resultpart varchar(255); _numpol int; 
	_banresult varchar(255); _tcCXP numeric(19,4); _pagoCXP numeric(19,4); _CC_Con char(19); _CC char(19);
	_CC_DCAF char(19); _CC_DCEC char(19); _FormaPago char(1); _BanCaj smallint; 
	_numero smallint; _ID_TipoProvee char(2); _ID_ClaveProvee int; _ConceptoCon varchar(80);
	_Ref varchar(25); _RefCXP varchar(25); _mes smallint; _ano smallint; _Beneficiario varchar(80); _IdMon smallint; _tcBAN numeric; _TotalBAN numeric(19,4); _id_clasificacion varchar(10);
	_RFC varchar(15);
BEGIN
	_err := 0;
	_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'COMP_CXP' and 
			m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCOK2');
	_ID_TipoProvee := (select ID_TipoCliPro from TBL_PROVEE_CXP where ID_CP = _ID_CXP);
	_ID_ClaveProvee := (select ID_ClaveCliPro from TBL_PROVEE_CXP where ID_CP = _ID_CXP);
	_CC :=  (select ID_CC from TBL_PROVEE_PROVEE where ID_Tipo = _ID_TipoProvee and ID_Clave = _ID_ClaveProvee );
	_BanCaj := (select case when _ID_FormaPago = 1 Then '1' else '0' end); -- 1 cajas 0 bancos
	_FormaPago := (select case when _ID_FormaPago = 1 Then 'C' else 'B' end);
	_Beneficiario := ( select VAlfanumerico from TBL_VARIABLES where ID_Variable = 'EMPRESA');
	_RFC := ( select RFC from TBL_PROVEE_PROVEE where ID_Tipo = _ID_TipoProvee and ID_Clave = _ID_ClaveProvee);
	_DocAmparado := (select msj5 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'COMP_CXP' and m.sub::text = 'BD' and m.elm::text = 'ETQ')  || _DocAmparado;
	_CC_DCAF := (select valfanumerico from TBL_VARIABLES where ID_Variable = 'CC_DCAF');
	_CC_DCEC := (select valfanumerico from TBL_VARIABLES where ID_Variable = 'CC_DCEC');
	_tcCXP := (select TC from TBL_PROVEE_CXP where ID_CP = _ID_CXP);
	_pagoCXP := round((_total * _tcCXP),2);
	_bancajmov := null;
	_numpol := null;
	_CC_Con := (select CC from TBL_PROVEE_CXP_CONCEPTOS where ID_Concepto = _ID_Concepto);
	_ConceptoCon := (select Descripcion from VIEW_PROVEE_CXP_CONCEPTOS where ID_Concepto = _ID_Concepto);
	_mes := date_part('month',_Fecha);
	_ano := date_part('year',_Fecha);
	_id_clasificacion := (select ID_Clasificacion from TBL_COMPRAS_ENTIDADES where ID_EntidadCompra = _ID_Entidad);
	_IdMon := (case when _FormaPago = 'B' then ( select ID_Moneda from TBL_BANCOS_CUENTAS where Tipo = '0' and Clave = _ID_BanCaj ) 
						else ( select ID_Moneda from TBL_BANCOS_CUENTAS where Tipo = '1' and Clave = _ID_BanCaj ) end);
	_TotalBAN := (case when _IdMon = '1' then _Cantidad else _Total end);
	_tcBAN := (case when _IdMon = '1' then 1.0 else _TC end);
	
	IF(select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano and Cerrado = 1) > 0
	OR (select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano) < 1
	THEN
		_err := 3;
		_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_POLIZAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'ERROR: La fecha de poliza pertenece a un periodo cerrado o inexistente'
	END IF;

	IF _CC_DCAF = '' or _CC_DCEC = ''
	THEN
		_err := 3;
		_result :=  (select msj2 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'COMP_CXP' and 
			m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR');--'ERROR: Las cuentas de diferencias cambiarias no se han registrado aun';
	END IF;

	IF _IdMon <> 1 and _IdMon <> _Moneda
	THEN
		_err := 3;
		_result :=  (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'COMP_CXP' and 
			m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'ERROR: Solo se puede pagar con bancos de moneda extranjera, cuentas de la misma moneda extranjera';
	END IF;	

	IF _err = 0
	THEN
		_RefCXP := 'CCXP|' || cast(_ID_CXP as varchar) || '|' || cast(_ID_Entidad as varchar) || '||';

		IF _IdMon = 1 -- Se paga con cuenta en pesos banco nacional
		THEN
			INSERT INTO TBL_PROVEE_CXP
			VALUES(default, _ID_Entidad, 'DEV', _Fecha, _ID_TipoProvee, _ID_ClaveProvee, _ID_Concepto, _Obs,/*id_tipodocorig*/ null,/*id_clavedocorig*/ null,_Moneda,_TC,_Total,0.00,_Fecha,/*_RefCXP*/ null,'G',null,_ID_CXP,null)
			RETURNING currval(pg_get_serial_sequence('TBL_PROVEE_CXP', 'id_cp')) INTO _id_cxpgen;
		ELSE
			INSERT INTO TBL_PROVEE_CXP
			VALUES(default, _ID_Entidad, 'DEV', _Fecha, _ID_TipoProvee, _ID_ClaveProvee, _ID_Concepto, _Obs,/*id_tipodocorig*/ null,/*id_clavedocorig*/ null,_Moneda,_tcCXP,_Total,0.00,_Fecha,/*_RefCXP*/ null,'G',null,_ID_CXP,null)
			RETURNING currval(pg_get_serial_sequence('TBL_PROVEE_CXP', 'id_cp')) INTO _id_cxpgen;
		END IF;

		_Ref := 'CCXP|' || cast(_ID_CXPGEN as varchar) || '|' || cast(_ID_Entidad as varchar) || '||';

		--Crea tabla temporal de movimientos bancarios
		CREATE LOCAL TEMPORARY TABLE _TMP_BANCOS_MOVIMIENTOS_DETALLE (
			Part smallint NOT NULL ,
			Cuenta char(19) NOT NULL ,
			Concepto varchar(80) NOT NULL ,
			Parcial numeric(19,4) NOT NULL ,
			Moneda smallint NOT NULL ,
			TC numeric(19,4) NOT NULL ,
			Cantidad numeric(19,4) NOT NULL
		);
		--fin de la tabla temporal

		--Agrega los movimientos a la tabla temporal
		--RAISE NOTICE '_Cantidad %, _pagoCXP %', _Cantidad, _pagoCXP;

		IF _IdMon = 1 -- Se paga con cuenta en pesos banco nacional
		THEN
			INSERT INTO _TMP_BANCOS_MOVIMIENTOS_DETALLE
			VALUES( '1', _CC, (_DocAmparado || ' ' || _Doc), _Total, _Moneda, _tcCXP, _pagoCXP); 
			
			IF(_Cantidad < _pagoCXP) -- si la cantidad del pago es menor a la conversion en la deuda de la cxp significaperdida cambiaria
			THEN
				--RAISE NOTICE 'perdida Parcial %, Ultimo %', (_PagoCXP - _Cantidad), -(_PagoCXP - _Cantidad);
				INSERT INTO _TMP_BANCOS_MOVIMIENTOS_DETALLE
				VALUES('2', _CC_DCEC, /*Perdida*/(select msj2 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'COMP_CXP' and m.sub::text = 'BD' and m.elm::text = 'ETQ'), (_PagoCXP - _Cantidad),'1',1.0000,-(_PagoCXP - _Cantidad)); 
			ELSIF(_Cantidad > _pagoCXP) -- de lo contrario es una ganancia cambiaria
			THEN
				--RAISE NOTICE 'ganancia Parcial %, Ultimo %', (_Cantidad - _PagoCXP), (_Cantidad - _PagoCXP);
				INSERT INTO _TMP_BANCOS_MOVIMIENTOS_DETALLE
				VALUES('2', _CC_DCAF, /*Ganancia*/(select msj3 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'COMP_CXP' and m.sub::text = 'BD' and m.elm::text = 'ETQ'), (_Cantidad - _PagoCXP),'1',1.0000,(_Cantidad - _PagoCXP));  					
			END IF;
			SELECT * INTO _errpart, _resultpart, _bancajmov FROM  sp_bancos_movs_agregar( _BanCaj, _ID_BanCaj, _Fecha, _Obs, _Beneficiario, _TotalBAN, 0.00, _tipomov, 'T', _IdMon, _tcBAN, _Ref, _Doc, _id_clasificacion, null, _ID_SatBanco, _RFC, _ID_SatMetodosPago, _BancoExt, _CuentaBanco, _Cheque ) as ( err integer, res varchar, clave integer);
		ELSE
			INSERT INTO _TMP_BANCOS_MOVIMIENTOS_DETALLE
			VALUES( '1', _CC, (_DocAmparado || ' ' || _Doc), _Total, '1', _tcCXP, _Total); -- se insertara en el proveee la cantidad que se le debe segun su CXP

			SELECT * INTO _errpart, _resultpart, _bancajmov FROM  sp_bancos_movs_agregar( _BanCaj, _ID_BanCaj, _Fecha, _Obs, _Beneficiario, _TotalBAN, 0.00, _tipomov, 'T', _IdMon, _tcCXP, _Ref, _Doc, _id_clasificacion, null, _ID_SatBanco, _RFC, _ID_SatMetodosPago, _BancoExt, _CuentaBanco, _Cheque ) as ( err integer, res varchar, clave integer);
		END IF;
			
		IF _errpart <> 0
		THEN
			_err := _errpart;
			_result := _resultpart;
		ELSE
			-- Procede a hacer update a la devoluci√≥n de anticipo con el ID del movimiento de banco o caja 
			UPDATE  TBL_PROVEE_CXP
			SET ID_PagoBanCaj = _bancajmov
			WHERE ID_CP = _ID_CXPGEN;
		END IF;
			
		DROP TABLE _TMP_BANCOS_MOVIMIENTOS_DETALLE;
		

		IF _err = 0
		THEN
			--procede a actualizar el saldo y el status pagado de la cxp
			UPDATE  TBL_PROVEE_CXP
			SET Saldo = Saldo - _Total
			WHERE ID_CP = _ID_CXP;

			UPDATE TBL_PROVEE_SALDOS_MONEDAS
			SET Saldo = Saldo + _Total
			WHERE ID_Moneda = _Moneda AND ID_Tipo = _ID_TipoProvee AND ID_Clave =  _ID_ClaveProvee;
		END IF;
	
	END IF;
	
	RETURN QUERY SELECT _err, _result, _id_cxpgen;

END
$BODY$
  LANGUAGE plpgsql;
  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_provee_cxp_cancelar(_id_cxp integer)
  RETURNS SETOF record AS
$BODY$ DECLARE 
	_err int; _result varchar(255); _errpart int; _resultpart varchar(255); _Total numeric(19,4); _Moneda smallint; _TC numeric(19,4); _Cantidad numeric(19,4); _Saldo numeric(19,4);
	_ID_TipoProvee char(2); _ID_ClaveProvee int; _mes smallint; _ano smallint; _Fecha timestamp; _ID_Aplicacion int; _ID_ANT int; _ID_DPA int;
	_ID_TipoCP char(3); _ID_Pol int; _numret int; _ID_PagoBanCaj int;
BEGIN
	_err := 0;
	_result := (select msj2 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'COMP_CXP' and 
			m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCOK2'); 
	_Total := (select Total from TBL_PROVEE_CXP where ID_CP = _ID_CXP);
	_Moneda := (select Moneda from TBL_PROVEE_CXP where ID_CP = _ID_CXP);
	_TC := (select TC from TBL_PROVEE_CXP where ID_CP = _ID_CXP);
	_Cantidad := round((_Total * _TC),2);
	_Fecha := (select Fecha from TBL_PROVEE_CXP where ID_CP = _ID_CXP);
	_ID_TipoCP := (select ID_TipoCP from TBL_PROVEE_CXP where ID_CP = _ID_CXP);
	_ID_TipoProvee := (select ID_TipoCliPro from TBL_PROVEE_CXP where ID_CP = _ID_CXP);
	_ID_ClaveProvee := (select ID_ClaveCliPro from TBL_PROVEE_CXP where ID_CP = _ID_CXP);
	_ID_Pol := (select ID_Pol from TBL_PROVEE_CXP where ID_CP = _ID_CXP);
	_ID_PagoBanCaj := (select ID_PagoBanCaj from TBL_PROVEE_CXP where ID_CP = _ID_CXP);
	_ID_Aplicacion := (select ID_Aplicacion from TBL_PROVEE_CXP where ID_CP = _ID_CXP);
	
	_mes := date_part('month',_Fecha);
	_ano := date_part('year',_Fecha);
	
	IF(select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano and Cerrado = 1) > 0
	OR (select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano) < 1
	THEN
		_err := 3;
		_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_POLIZAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'ERROR: La fecha de poliza pertenece a un periodo cerrado o inexistente'
	END IF;

	-- si la cuenta o anticipo tiene activados ( no cancelados ) pagos, saldos aplicaciones etc, no permitira la cancelacion
	IF _ID_TipoCP = 'ALT' OR _ID_TipoCP = 'ANT' 
	THEN
		IF (select count(*) from TBL_PROVEE_CXP where ID_CP <> _ID_CXP and ID_Aplicacion = _ID_CXP and Status <> 'C') > 0
		THEN
			_err := 3;
			_result :=  (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'COMP_CXP' and 
				m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR2');--'ERROR: No se puede cancelar una cuenta o anticipo que tiene asociados, y sin cancelar, pagos, saldos, aplicaciones, etc.';
		END IF;
	END IF;

	-- si es un descuento por aplicacion, este no se puede cancelar, se debe cancelar la aplicaci√≥n del anticipo y este quedar√° cancelado autom√°ticamente
	IF _ID_TipoCP = 'DPA' 
	THEN
		_err := 3;
		_result := (select msj2 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'COMP_CXP' and 
				m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR2'); --ERROR: No se puede cancelar un descuento por aplicaci√≥n. Debes cancelar la aplicaci√≥n del anticipo a la cuenta por cobrar, para que este descuento quede cancelado';
	END IF;

	IF _err = 0
	THEN
		UPDATE TBL_PROVEE_CXP
		SET Status = 'C'
		WHERE ID_CP = _ID_CXP;
			
		IF _ID_TipoCP = 'ALT'
		THEN
			UPDATE TBL_PROVEE_SALDOS_MONEDAS
			SET Saldo = Saldo - _Total
			WHERE ID_Moneda = _Moneda AND ID_Tipo = _ID_TipoProvee AND ID_Clave =  _ID_ClaveProvee;
		
			--Procede a cancelar la poliza
			IF _ID_Pol is not null
			THEN
				SELECT * INTO _errpart, _resultpart, _numret FROM sp_cont_polizas_cancelar(_ID_Pol, _Fecha) as ( err integer, res varchar, clave integer );
				IF _errpart <> 0
				THEN
					_err := _errpart;
					_result := _resultpart;
				END IF;
			END IF;
		ELSIF _ID_TipoCP = 'ANT'
		THEN
			UPDATE TBL_PROVEE_SALDOS_MONEDAS
			SET Saldo = Saldo + _Total
			WHERE ID_Moneda = _Moneda AND ID_Tipo = _ID_TipoProvee AND ID_Clave =  _ID_ClaveProvee;
		
			SELECT * INTO _errpart, _resultpart, _numret FROM sp_bancos_movs_cancelar(_ID_PagoBanCaj) as ( err integer, res varchar, clave integer );
			IF _errpart <> 0
			THEN
				_err := _errpart;
				_result := _resultpart;
			END IF;
		ELSIF _ID_TipoCP = 'PAG'
		THEN
			UPDATE TBL_PROVEE_SALDOS_MONEDAS
			SET Saldo = Saldo + _Total
			WHERE ID_Moneda = _Moneda AND ID_Tipo = _ID_TipoProvee AND ID_Clave =  _ID_ClaveProvee;
		
			SELECT * INTO _errpart, _resultpart, _numret FROM sp_bancos_movs_cancelar(_ID_PagoBanCaj) as ( err integer, res varchar, clave integer );
			IF _errpart <> 0
			THEN
				_err := _errpart;
				_result := _resultpart;
			END IF;

			UPDATE TBL_PROVEE_CXP
			SET Saldo = Saldo + _Total
			WHERE ID_CP = _ID_Aplicacion;
		ELSIF _ID_TipoCP = 'SAL'
		THEN
			UPDATE TBL_PROVEE_SALDOS_MONEDAS
			SET Saldo = Saldo + _Total
			WHERE ID_Moneda = _Moneda AND ID_Tipo = _ID_TipoProvee AND ID_Clave =  _ID_ClaveProvee;
		
			--Procede a cancelar la poliza
			IF _ID_Pol is not null
			THEN
				SELECT * INTO _errpart, _resultpart, _numret FROM sp_cont_polizas_cancelar(_ID_Pol, _Fecha) as ( err integer, res varchar, clave integer );
				IF _errpart <> 0
				THEN
					_err := _errpart;
					_result := _resultpart;
				END IF;
			END IF;

			UPDATE TBL_PROVEE_CXP
			SET Saldo = Saldo + _Total
			WHERE ID_CP = _ID_Aplicacion;
		ELSIF _ID_TipoCP = 'DEV'
		THEN
			UPDATE TBL_PROVEE_SALDOS_MONEDAS
			SET Saldo = Saldo - _Total
			WHERE ID_Moneda = _Moneda AND ID_Tipo = _ID_TipoProvee AND ID_Clave =  _ID_ClaveProvee;
		
			SELECT * INTO _errpart, _resultpart, _numret FROM sp_bancos_movs_cancelar(_ID_PagoBanCaj) as ( err integer, res varchar, clave integer );
			IF _errpart <> 0
			THEN
				_err := _errpart;
				_result := _resultpart;
			END IF;

			UPDATE TBL_PROVEE_CXP
			SET Saldo = Saldo + _Total
			WHERE ID_CP = _ID_Aplicacion;
		ELSIF _ID_TipoCP = 'APL'
		THEN
			-- Captura el id de descuento por aplicacion, el id de anticipo, y el saldo de diferencias cambiarias de la aplicacion
			_ID_DPA := (select id_clavedocorig from TBL_PROVEE_CXP where ID_CP = _ID_CXP);
			_ID_ANT := (select ID_Aplicacion from TBL_PROVEE_CXP where ID_CP = _ID_DPA);
			--_Saldo :=  (select Saldo from TBL_PROVEE_CXP where ID_CP = _ID_CXP);

			--Ahora cancela el descuento por aplicacion
			UPDATE TBL_PROVEE_CXP
			SET Status = 'C'
			WHERE ID_CP = _ID_DPA;
		
			--Procede a cancelar la poliza
			IF _ID_Pol is not null
			THEN
				SELECT * INTO _errpart, _resultpart, _numret FROM sp_cont_polizas_cancelar(_ID_Pol, _Fecha) as ( err integer, res varchar, clave integer );
				IF _errpart <> 0
				THEN
					_err := _errpart;
					_result := _resultpart;
				END IF;
			END IF;
			
			UPDATE TBL_PROVEE_CXP
			SET Saldo = Saldo + _Total
			WHERE ID_CP = _ID_Aplicacion;
			
			UPDATE TBL_PROVEE_CXP
			SET Saldo = Saldo + _Total
			WHERE ID_CP = _ID_ANT;

		END IF;
	END IF;

	RETURN QUERY SELECT _err, _result, _id_cxp;

END
$BODY$
  LANGUAGE plpgsql;
  
  


INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('COMP_ORD');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('COMP_ORD_AGREGAR');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('COMP_ORD_CAMBIAR');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('COMP_ORD_CONSULTAR');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('COMP_ORD_CANCELAR');
 





--@FIN_BLOQUE
CREATE TABLE tbl_compras_vs_inventario
(
  id_tipo character(2) NOT NULL,
  id_proveedor integer NOT NULL,
  id_prod character varying(20) NOT NULL,
  id_moneda smallint NOT NULL,
  fecha timestamp without time zone NOT NULL,
  precio numeric(19,4) NOT NULL,
  descuento numeric(5,2) NOT NULL,
  CONSTRAINT pk_tbl_compras_vs_inventario PRIMARY KEY (id_tipo , id_proveedor , id_prod , id_moneda ),
  CONSTRAINT fk_tbl_compras_vs_inventario_tbl_cont_monedas FOREIGN KEY (id_moneda)
      REFERENCES tbl_cont_monedas (clave) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_tbl_compras_vs_inventario_tbl_invserv_inventarios FOREIGN KEY (id_prod)
      REFERENCES tbl_invserv_inventarios (id_prod) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_tbl_compras_vs_inventario_tbl_provee_provee FOREIGN KEY (id_tipo, id_proveedor)
      REFERENCES tbl_provee_provee (id_tipo, id_clave) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE
);



--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_compras_ordenes_modulo AS 
 SELECT rc.id_vc AS id_orden, rc.id_entidad, rc.numero, rc.fecha, rc.referencia, rc.status, rc.moneda, mon.simbolo, rc.tc, rc.mtotal AS total, rc.id_clipro AS id_proveedor, 
        CASE
            WHEN rc.id_clipro = 0 THEN 'Compra de Mostrador'::character varying
            ELSE ( SELECT p.nombre
               FROM tbl_provee_provee p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'PR'::bpchar)
        END AS proveedor, 
        CASE
            WHEN rc.ref IS NULL THEN ''::character varying
            ELSE rc.ref
        END AS ref, 
        CASE
            WHEN rc.id_factura = 0 THEN 0
            ELSE 
            CASE
                WHEN rc.tipoenlace = 'CFAC'::bpchar THEN ( SELECT tbl_compras_facturas_cab.numero
                   FROM tbl_compras_facturas_cab
                  WHERE tbl_compras_facturas_cab.id_vc = rc.id_factura)
                ELSE ( SELECT tbl_compras_recepciones_cab.numero
                   FROM tbl_compras_recepciones_cab
                  WHERE tbl_compras_recepciones_cab.id_vc = rc.id_factura)
            END
        END AS factura, rc.tipoenlace, rc.id_factura
   FROM tbl_compras_ordenes_cab rc
   JOIN tbl_cont_monedas mon ON rc.moneda = mon.clave;

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('COMP_REC');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('COMP_REC_AGREGAR');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('COMP_REC_CONSULTAR');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('COMP_REC_CANCELAR');



--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_compras_recepciones_modulo AS 
 SELECT rc.id_vc AS id_recepcion, rc.id_entidad, rc.numero, rc.fecha, rc.referencia, rc.status, rc.moneda, mon.simbolo, rc.tc, rc.mtotal AS total, rc.id_clipro AS id_proveedor, 
        CASE
            WHEN rc.id_clipro = 0 THEN 'proveedor de Mostrador'::character varying
            ELSE ( SELECT p.nombre
               FROM tbl_provee_provee p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'PR'::bpchar)
        END AS proveedor, 
        CASE
            WHEN rc.ref IS NULL THEN ''::character varying
            ELSE rc.ref
        END AS ref, rc.id_polcost, 
        CASE
            WHEN rc.id_factura = 0 THEN 0
            ELSE ( SELECT tbl_compras_facturas_cab.numero
               FROM tbl_compras_facturas_cab
              WHERE tbl_compras_facturas_cab.id_vc = rc.id_factura)
        END AS factura, 
        CASE
            WHEN rc.id_cfd IS NULL THEN 0
            ELSE rc.id_cfd
        END AS id_cfd, 
        CASE
            WHEN rc.tfd IS NULL THEN 0
            ELSE rc.tfd::integer
        END AS tfd, rc.id_factura
   FROM tbl_compras_recepciones_cab rc
   JOIN tbl_cont_monedas mon ON rc.moneda = mon.clave;
   
INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('COMP_FAC');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('COMP_FAC_AGREGAR');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('COMP_FAC_CONSULTAR');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('COMP_FAC_CANCELAR');   



--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_compras_facturas_modulo AS 
 SELECT rc.id_vc AS id_factura, rc.id_entidad, rc.numero, rc.fecha, rc.referencia, rc.status, rc.moneda, mon.simbolo, rc.tc, rc.mtotal AS total, rc.id_clipro AS id_proveedor, 
        CASE
            WHEN rc.id_clipro = 0 THEN 'Proveedor de Mostrador'::character varying
            ELSE ( SELECT p.nombre
               FROM tbl_provee_provee p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'PR'::bpchar)
        END AS proveedor, 
        CASE
            WHEN rc.ref IS NULL THEN ''::character varying
            ELSE rc.ref
        END AS ref, 
        CASE
            WHEN rc.id_pol IS NULL THEN (-1)
            ELSE rc.id_pol
        END AS id_pol, 
        CASE
            WHEN rc.id_polcost IS NULL THEN (-1)
            ELSE rc.id_polcost
        END AS id_polcost, 
        CASE
            WHEN rc.id_cfd IS NULL THEN 0
            ELSE rc.id_cfd
        END AS id_cfd, 
        CASE
            WHEN rc.tfd IS NULL THEN 0
            ELSE rc.tfd::integer
        END AS tfd
   FROM tbl_compras_facturas_cab rc
   JOIN tbl_cont_monedas mon ON rc.moneda = mon.clave;

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('COMP_DEV');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('COMP_DEV_DEVOLVER');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('COMP_DEV_REBAJAR');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('COMP_DEV_CONSULTAR');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('COMP_DEV_CANCELAR');



--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_compras_devoluciones_modulo AS 
 SELECT rc.id_vc AS id_devolucion, rc.id_entidad, rc.numero, rc.fecha, rc.referencia, rc.status, rc.moneda, mon.simbolo, rc.tc, rc.mtotal AS total, rc.id_clipro AS id_proveedor, 
        CASE
            WHEN rc.id_clipro = 0 THEN 'Proveedor de Mostrador'::character varying
            ELSE ( SELECT p.nombre
               FROM tbl_provee_provee p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'PR'::bpchar)
        END AS proveedor, rc.ref, rc.id_factura, ( SELECT tbl_compras_facturas_cab.numero
           FROM tbl_compras_facturas_cab
          WHERE tbl_compras_facturas_cab.id_vc = rc.id_factura) AS factura, 
        CASE
            WHEN rc.id_pol IS NULL THEN (-1)
            ELSE rc.id_pol
        END AS id_pol, 
        CASE
            WHEN rc.id_polcost IS NULL THEN (-1)
            ELSE rc.id_polcost
        END AS id_polcost, 
        CASE
            WHEN rc.id_cfd IS NULL THEN 0
            ELSE rc.id_cfd
        END AS id_cfd, 
        CASE
            WHEN rc.tfd IS NULL THEN 0
            ELSE rc.tfd::integer
        END AS tfd, rc.devreb
   FROM tbl_compras_devoluciones_cab rc
   JOIN tbl_cont_monedas mon ON rc.moneda = mon.clave;
   


--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_catalog_provee AS 
 SELECT c.id_numero AS clave, c.nombre AS descripcion, ''::text AS especial, c.id_entidad
   FROM tbl_provee_provee c
  WHERE c.status = 'A'::bpchar;

  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_compras_ordenes_agregar(_id_entidadcompra smallint, _numero integer, _id_proveedor integer, _fecha timestamp without time zone, _referencia character varying, _moneda smallint, _tc numeric, _condicion smallint, _obs character varying, _importe numeric, _descuento numeric, _subtotal numeric, _iva numeric, _total numeric, _fsipg_efectivo numeric, _fsipg_bancos numeric, _fsipg_cambio numeric, _id_bodega smallint, _id_enlace integer, _id_vendedor smallint, _tipoenlace character, _uuid character, _ieps numeric, _ivaret numeric, _isrret numeric)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255); _ID_Orden int; _mes smallint; _ano smallint; _claseref varchar(25);
BEGIN	
	_err := 0;
	_result := 'La Orden de Compra se ha registrado satisfactoriamente';

	_mes := date_part('month',_Fecha);
	_ano := date_part('year',_Fecha);

	IF _ID_Enlace is not null
	THEN
		_claseref = 'CCOT|' || cast(_ID_Enlace as varchar) || '|' || cast(_ID_EntidadCompra as varchar) || '||';
	END IF;
	
	IF(select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano and Cerrado = 1) > 0
	OR (select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano) < 1
	THEN
		_err := 3;
		_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_POLIZAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'ERROR: La fecha de poliza pertenece a un periodo cerrado o inexistente'
	END IF;
	
	IF (select count(*) from TBL_COMPRAS_ORDENES_CAB where ID_Entidad = _ID_EntidadCompra and Numero = _Numero) > 0
	THEN
		_err := 3;
		_result := 'ERROR: La clave de la orden de compra ya existe, No se puede duplicar';
	END IF;

	IF _err = 0
	THEN
		INSERT INTO TBL_COMPRAS_ORDENES_CAB(  id_entidad, numero, id_clipro, fecha, referencia, status, moneda, tc, fechaenvio, condicion, obs, 
			importe, descuento, subtotal, iva, total, ref, id_pol, id_polcost, id_bodega, mimporte, mdescuento, msubtotal, miva, mtotal, efectivo, bancos, cambio, id_vendedor, id_cfd, tfd, 
			ieps, ivaret, isrret, id_factura, tipoenlace )
		VALUES(_ID_EntidadCompra, _Numero, _ID_Proveedor, _Fecha, _Referencia, 'G' , _Moneda, _TC, _Fecha, _Condicion, _Obs,
				_Importe, _Descuento, _SubTotal, _IVA, _Total, _claseref, null, null, _ID_Bodega, _Importe, _Descuento, _SubTotal, _IVA,  _Total, 0.0, 0.0, 0.0, _ID_Vendedor, null, null, 
				_ieps, _ivaret, _isrret, null, null)
		 RETURNING currval(pg_get_serial_sequence('TBL_COMPRAS_ORDENES_CAB', 'id_vc')) INTO _id_orden;
		 
		-- actualiza el numero de pedido
		UPDATE TBL_COMPRAS_ENTIDADES
		SET Orden = _Numero + 1
		WHERE ID_EntidadCompra = _ID_EntidadCompra;
		
		-- inserta el detalle
		INSERT INTO TBL_COMPRAS_ORDENES_DET
		SELECT _ID_Orden, Partida, Cantidad, ID_Prod, Precio, Descuento, IVA, Obs, Importe, ImporteDesc, ImporteIVA, TotalPart, IEPS, ImporteIEPS, IVARet, ImporteIVARet, ISRRet, ImporteISRRet
		FROM _TMP_COMPRAS_FACTURAS_DET;

	END IF; -- fin

	RETURN QUERY SELECT _err, _result, _id_orden;

END
$BODY$
  LANGUAGE plpgsql;

--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_compras_ordenes_cab AS 
 SELECT rc.id_vc AS id_factura, rc.id_bodega, b.nombre, rc.id_clipro AS id_proveedor, 
        CASE
            WHEN rc.id_clipro = 0 THEN 0
            ELSE ( SELECT p.id_numero
               FROM tbl_provee_provee p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'PR'::bpchar)
        END AS numero, rc.fechaenvio, rc.condicion, rc.obs, mon.moneda, rc.mimporte AS importe, rc.mdescuento AS descuento, rc.msubtotal AS subtotal, rc.miva AS iva, rc.ieps, rc.ivaret, rc.isrret, rc.mtotal AS total, 
        CASE
            WHEN rc.id_clipro = 0 THEN ''::character varying
            ELSE ( SELECT p.direccion
               FROM tbl_provee_provee p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'PR'::bpchar)
        END AS direccion, 
        CASE
            WHEN rc.id_clipro = 0 THEN ''::character varying
            ELSE ( SELECT p.cp
               FROM tbl_provee_provee p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'PR'::bpchar)
        END AS cp, 
        CASE
            WHEN rc.id_clipro = 0 THEN ''::character varying
            ELSE ( SELECT p.tel
               FROM tbl_provee_provee p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'PR'::bpchar)
        END AS tel, 
        CASE
            WHEN rc.id_clipro = 0 THEN ''::character varying
            ELSE ( SELECT p.poblacion
               FROM tbl_provee_provee p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'PR'::bpchar)
        END AS poblacion, 
        CASE
            WHEN rc.id_clipro = 0 THEN ''::character varying
            ELSE ( SELECT p.colonia
               FROM tbl_provee_provee p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'PR'::bpchar)
        END AS colonia, 
        CASE
            WHEN rc.id_clipro = 0 THEN 'XAXX010101000'::character varying
            ELSE ( SELECT p.rfc
               FROM tbl_provee_provee p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'PR'::bpchar)
        END AS rfc
   FROM tbl_compras_ordenes_cab rc
   JOIN tbl_invserv_bodegas b ON rc.id_bodega = b.id_bodega
   JOIN tbl_cont_monedas mon ON rc.moneda = mon.clave;


--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_compras_ordenes_det AS 
 SELECT rd.id_vc AS id_factura, rd.partida, rd.cantidad, rd.id_prod, c.descripcion, c.id_unidadsalida, rd.precio, rd.descuento, rd.iva, rd.ieps, rd.ivaret, rd.isrret, rd.obs, rd.importe, rd.importedesc, rd.importeiva, rd.importeieps, rd.importeivaret, rd.importeisrret, rd.totalpart, c.id_tipo
   FROM tbl_compras_ordenes_det rd
   JOIN tbl_invserv_inventarios c ON rd.id_prod::text = c.id_prod::text;


--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_compras_recepciones_cab AS 
 SELECT rc.id_vc AS id_factura, rc.id_bodega, b.nombre, rc.id_clipro AS id_proveedor, 
        CASE
            WHEN rc.id_clipro = 0 THEN 0
            ELSE ( SELECT p.id_numero
               FROM tbl_provee_provee p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'PR'::bpchar)
        END AS numero, rc.fechaenvio, rc.condicion, rc.obs, mon.moneda, rc.mimporte AS importe, rc.mdescuento AS descuento, rc.msubtotal AS subtotal, rc.miva AS iva, rc.ieps, rc.ivaret, rc.isrret, rc.mtotal AS total, 
        CASE
            WHEN rc.id_clipro = 0 THEN ''::character varying
            ELSE ( SELECT p.direccion
               FROM tbl_provee_provee p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'PR'::bpchar)
        END AS direccion, 
        CASE
            WHEN rc.id_clipro = 0 THEN ''::character varying
            ELSE ( SELECT p.cp
               FROM tbl_provee_provee p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'PR'::bpchar)
        END AS cp, 
        CASE
            WHEN rc.id_clipro = 0 THEN ''::character varying
            ELSE ( SELECT p.tel
               FROM tbl_provee_provee p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'PR'::bpchar)
        END AS tel, 
        CASE
            WHEN rc.id_clipro = 0 THEN ''::character varying
            ELSE ( SELECT p.poblacion
               FROM tbl_provee_provee p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'PR'::bpchar)
        END AS poblacion, 
        CASE
            WHEN rc.id_clipro = 0 THEN ''::character varying
            ELSE ( SELECT p.colonia
               FROM tbl_provee_provee p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'PR'::bpchar)
        END AS colonia, 
        CASE
            WHEN rc.id_clipro = 0 THEN 'XAXX010101000'::character varying
            ELSE ( SELECT p.rfc
               FROM tbl_provee_provee p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'PR'::bpchar)
        END AS rfc
   FROM tbl_compras_recepciones_cab rc
   JOIN tbl_invserv_bodegas b ON rc.id_bodega = b.id_bodega
   JOIN tbl_cont_monedas mon ON rc.moneda = mon.clave;


--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_compras_recepciones_det AS 
 SELECT rd.id_vc AS id_factura, rd.partida, rd.cantidad, rd.id_prod, c.descripcion, c.id_unidadsalida, rd.precio, rd.descuento, rd.iva, rd.ieps, rd.ivaret, rd.isrret, rd.obs, rd.importe, rd.importedesc, rd.importeiva, rd.importeieps, rd.importeivaret, rd.importeisrret, rd.totalpart, c.id_tipo
   FROM tbl_compras_recepciones_det rd
   JOIN tbl_invserv_inventarios c ON rd.id_prod::text = c.id_prod::text;


--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_compras_facturas_cab AS 
 SELECT rc.id_vc AS id_factura, rc.id_bodega, b.nombre, rc.id_clipro AS id_proveedor, 
        CASE
            WHEN rc.id_clipro = 0 THEN 0
            ELSE ( SELECT p.id_numero
               FROM tbl_provee_provee p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'PR'::bpchar)
        END AS numero, rc.fechaenvio, rc.condicion, rc.obs, mon.moneda, rc.mimporte AS importe, rc.mdescuento AS descuento, rc.msubtotal AS subtotal, rc.miva AS iva, rc.ieps, rc.ivaret, rc.isrret, rc.mtotal AS total, 
        CASE
            WHEN rc.id_clipro = 0 THEN ''::character varying
            ELSE ( SELECT p.direccion
               FROM tbl_provee_provee p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'PR'::bpchar)
        END AS direccion, 
        CASE
            WHEN rc.id_clipro = 0 THEN ''::character varying
            ELSE ( SELECT p.cp
               FROM tbl_provee_provee p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'PR'::bpchar)
        END AS cp, 
        CASE
            WHEN rc.id_clipro = 0 THEN ''::character varying
            ELSE ( SELECT p.tel
               FROM tbl_provee_provee p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'PR'::bpchar)
        END AS tel, 
        CASE
            WHEN rc.id_clipro = 0 THEN ''::character varying
            ELSE ( SELECT p.poblacion
               FROM tbl_provee_provee p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'PR'::bpchar)
        END AS poblacion, 
        CASE
            WHEN rc.id_clipro = 0 THEN ''::character varying
            ELSE ( SELECT p.colonia
               FROM tbl_provee_provee p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'PR'::bpchar)
        END AS colonia, 
        CASE
            WHEN rc.id_clipro = 0 THEN 'XAXX010101000'::character varying
            ELSE ( SELECT p.rfc
               FROM tbl_provee_provee p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'PR'::bpchar)
        END AS rfc
   FROM tbl_compras_facturas_cab rc
   JOIN tbl_invserv_bodegas b ON rc.id_bodega = b.id_bodega
   JOIN tbl_cont_monedas mon ON rc.moneda = mon.clave;


--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_compras_facturas_det AS 
 SELECT rd.id_vc AS id_factura, rd.partida, rd.cantidad, rd.id_prod, c.descripcion, c.id_unidadsalida, rd.precio, rd.descuento, rd.iva, rd.ieps, rd.ivaret, rd.isrret, rd.obs, rd.importe, rd.importedesc, rd.importeiva, rd.importeieps, rd.importeivaret, rd.importeisrret, rd.totalpart, c.id_tipo
   FROM tbl_compras_facturas_det rd
   JOIN tbl_invserv_inventarios c ON rd.id_prod::text = c.id_prod::text;


--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_compras_devoluciones_cab AS 
 SELECT rc.id_vc AS id_factura, rc.id_bodega, b.nombre, rc.id_clipro AS id_proveedor, 
        CASE
            WHEN rc.id_clipro = 0 THEN 0
            ELSE ( SELECT p.id_numero
               FROM tbl_provee_provee p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'PR'::bpchar)
        END AS numero, rc.fechaenvio, rc.condicion, rc.obs, mon.moneda, rc.mimporte AS importe, rc.mdescuento AS descuento, rc.msubtotal AS subtotal, rc.miva AS iva, rc.ieps, rc.ivaret, rc.isrret, rc.mtotal AS total, 
        CASE
            WHEN rc.id_clipro = 0 THEN ''::character varying
            ELSE ( SELECT p.direccion
               FROM tbl_provee_provee p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'PR'::bpchar)
        END AS direccion, 
        CASE
            WHEN rc.id_clipro = 0 THEN ''::character varying
            ELSE ( SELECT p.cp
               FROM tbl_provee_provee p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'PR'::bpchar)
        END AS cp, 
        CASE
            WHEN rc.id_clipro = 0 THEN ''::character varying
            ELSE ( SELECT p.tel
               FROM tbl_provee_provee p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'PR'::bpchar)
        END AS tel, 
        CASE
            WHEN rc.id_clipro = 0 THEN ''::character varying
            ELSE ( SELECT p.poblacion
               FROM tbl_provee_provee p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'PR'::bpchar)
        END AS poblacion, 
        CASE
            WHEN rc.id_clipro = 0 THEN ''::character varying
            ELSE ( SELECT p.colonia
               FROM tbl_provee_provee p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'PR'::bpchar)
        END AS colonia, 
        CASE
            WHEN rc.id_clipro = 0 THEN 'XAXX010101000'::character varying
            ELSE ( SELECT p.rfc
               FROM tbl_provee_provee p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'PR'::bpchar)
        END AS rfc
   FROM tbl_compras_devoluciones_cab rc
   JOIN tbl_invserv_bodegas b ON rc.id_bodega = b.id_bodega
   JOIN tbl_cont_monedas mon ON rc.moneda = mon.clave;

--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_compras_devoluciones_det AS 
 SELECT rd.id_vc AS id_factura, rd.partida, rd.cantidad, rd.id_prod, c.descripcion, c.id_unidadsalida, rd.precio, rd.descuento, rd.iva, rd.ieps, rd.ivaret, rd.isrret, rd.obs, rd.importe, rd.importedesc, rd.importeiva, rd.importeieps, rd.importeivaret, rd.importeisrret, rd.totalpart, c.id_tipo
   FROM tbl_compras_devoluciones_det rd
   JOIN tbl_invserv_inventarios c ON rd.id_prod::text = c.id_prod::text;


--@FIN_BLOQUE
CREATE TABLE tbl_invserv_provee_codigos
(
  id_rfc character varying(15) NOT NULL,
  id_descripcion character varying(254) NOT NULL,
  id_prod character varying(20) NOT NULL,
  id_moneda smallint NOT NULL,
  precio numeric(19,4) NOT NULL,
  fecha timestamp without time zone NOT NULL,
  CONSTRAINT pk_tbl_invserv_provee_codigos PRIMARY KEY (id_rfc , id_descripcion , id_prod , id_moneda ),
  CONSTRAINT fk_tbl_invserv_provee_codigos_tbl_cont_monedas FOREIGN KEY (id_moneda)
      REFERENCES tbl_cont_monedas (clave) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_tbl_invserv_provee_codigos_tbl_invserv_inventarios FOREIGN KEY (id_prod)
      REFERENCES tbl_invserv_inventarios (id_prod) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE
);

   

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_compras_ordenes_cambiar(_id_entidadcompra smallint, _id_orden integer, _id_proveedor integer, _fecha timestamp without time zone, _referencia character varying, _moneda smallint, _tc numeric, _condicion smallint, _obs character varying, _importe numeric, _descuento numeric, _subtotal numeric, _iva numeric, _total numeric, _fsipg_efectivo numeric, _fsipg_bancos numeric, _fsipg_cambio numeric, _id_bodega smallint, _id_enlace integer, _id_vendedor smallint, _tipoenlace character, _uuid character, _ieps numeric, _ivaret numeric, _isrret numeric)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255); _mes smallint; _ano smallint;
BEGIN	
	_err := 0;
	_result := 'El Orden se ha cambiado satisfactoriamente';

	_mes := date_part('month',_Fecha);
	_ano := date_part('year',_Fecha);
	
	IF(select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano and Cerrado = 1) > 0
	OR (select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano) < 1
	THEN
		_err := 3;
		_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_POLIZAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'ERROR: La fecha de poliza pertenece a un periodo cerrado o inexistente'
	END IF;
	
	IF (select count(*) from TBL_COMPRAS_ORDENES_CAB where ID_VC = _ID_Orden) < 1
	THEN
		_err := 3;
		_result := 'ERROR: La clave de la orden de compra No existe, No se puede cambiar';
	END IF;

	IF _err = 0
	THEN
		DELETE FROM TBL_COMPRAS_ORDENES_DET
		WHERE ID_VC = _ID_Orden;
		
		UPDATE TBL_COMPRAS_ORDENES_CAB
		SET ID_CliPro = _ID_Proveedor, Fecha = _Fecha, Referencia = _Referencia, Moneda = _Moneda, TC = _TC, FechaEnvio = _Fecha, Condicion = _Condicion, Obs = _Obs,
				Importe = _Importe, Descuento = _Descuento, SubTotal = _SubTotal, IVA = _IVA, Total = _Total, ID_Bodega = _ID_Bodega, MImporte = _Importe, MDescuento = _Descuento, MSubTotal = _SubTotal, MIVA = _IVA, MTotal = _Total, 
				ID_Vendedor = _ID_Vendedor, IEPS = _IEPS, IVARet = _IVARet, ISRRet = _ISRRet
		WHERE ID_VC = _ID_Orden;	
				
		-- inserta el detalle
		INSERT INTO TBL_COMPRAS_ORDENES_DET
		SELECT _ID_Orden, Partida, Cantidad, ID_Prod, Precio, Descuento, IVA, Obs, Importe, ImporteDesc, ImporteIVA, TotalPart, IEPS, ImporteIEPS, IVARet, ImporteIVARet, ISRRet, ImporteISRRet
		FROM _TMP_COMPRAS_FACTURAS_DET;

	END IF; -- fin

	RETURN QUERY SELECT _err, _result, _id_orden;

END
$BODY$
  LANGUAGE plpgsql;


--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_compras_recepciones_agregar(_id_entidadcompra smallint, _numero integer, _id_proveedor integer, _fecha timestamp without time zone, _referencia character varying, _moneda smallint, _tc numeric, _condicion smallint, _obs character varying, _importe numeric, _descuento numeric, _subtotal numeric, _iva numeric, _total numeric, _fsipg_efectivo numeric, _fsipg_bancos numeric, _fsipg_cambio numeric, _id_bodega smallint, _id_enlace integer, _id_vendedor smallint, _tipoenlace character, _uuid character, _ieps numeric, _ivaret numeric, _isrret numeric)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255); _ID_Recepcion int; _mes smallint; _ano smallint;	_errpart int;  _resultpart varchar(255);  _ID_Movimiento int;  _concepto varchar(80); _Ref varchar(25);  
	_FijaCost bit; _costven numeric(19,4); _CC_COSTCOMP char(19); _AuditarAlm bit; _claseref varchar(25);
	_ID_CFD int; _TFD smallint; _REC_TMP_COMPRAS_FACTURAS_DET RECORD; _RFC varchar(15);
BEGIN	
	_err := 0;
	_result := 'La recepcion se ha registrado satisfactoriamente';
	_concepto := 'Compra Recepci√≥n ' || (select Descripcion from TBL_COMPRAS_ENTIDADES where ID_EntidadCompra = _ID_EntidadCompra) || ', numero ' || cast(_Numero as varchar) || 
				(case when _Referencia <> '' then ' y referencia ' || _Referencia || '.' else '.' end);
	_FijaCost = (select FijaCost from TBL_COMPRAS_ENTIDADES where ID_EntidadCompra = _ID_EntidadCompra);
	_AuditarAlm := ( select AuditarAlm from TBL_INVSERV_BODEGAS where ID_Bodega = _ID_Bodega );
	_mes := date_part('month',_Fecha);
	_ano := date_part('year',_Fecha);

	IF _ID_Enlace is not null
	THEN
		_claseref := _TipoEnlace || '|' || cast(_ID_Enlace as varchar) || '|' || cast(_ID_EntidadCompra as varchar) || '||';
	END IF;

	IF(select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano and Cerrado = 1) > 0
	OR (select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano) < 1
	THEN
		_err := 3;
		_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_POLIZAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'ERROR: La fecha de poliza pertenece a un periodo cerrado o inexistente'
	END IF;
	
	IF (select count(*) from TBL_COMPRAS_RECEPCIONES_CAB where ID_Entidad = _ID_EntidadCompra and Numero = _Numero) > 0
	THEN
		_err := 3;
		_result := 'ERROR: La clave de la recepci√≥n ya existe, No se puede duplicar';
	END IF;

	IF ( select ventero from TBL_VARIABLES where ID_Variable = 'MVCF' ) = 1
	THEN
		IF (select count(*) from TBL_INVSERV_CHFIS_CAB where ID_Bodega = _ID_Bodega and ( Cerrado = '1' or Generado = '1') and Status <> 'C' and Fecha >= _Fecha) > 0
		THEN
			_err := 3;
			_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ALM_CHFIS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR');--'ERROR: No se puede generar el movimiento al almacen porque ya existe un chequeo f?sico cerrado en esta bodega, con fecha posterior a este movimiento';
		END IF;
	END IF;

	IF _uuid <> ''
	THEN
		IF (select count(*) from TBL_CFDCOMP where UUID = _uuid) > 0
		THEN
			_ID_CFD := (select ID_CFD from TBL_CFDCOMP where UUID = _uuid) ;
			_TFD := 3;
		ELSE
			_err := 3;
			_result := 'ERROR: No se puede enlazar el CFDI al registro, porque no existe el UUID proporcionado';
		END IF;
	END IF;
	
	IF _err = 0
	THEN
		INSERT INTO TBL_COMPRAS_RECEPCIONES_CAB(  id_entidad, numero, id_clipro, fecha, referencia, status, moneda, tc, fechaenvio, condicion, obs, 
			importe, descuento, subtotal, iva, total, ref, id_pol, id_polcost, id_bodega, mimporte, mdescuento, msubtotal, miva, mtotal, efectivo, bancos, cambio, id_vendedor, id_cfd, tfd, 
			ieps, ivaret, isrret, id_factura )
		VALUES(_ID_EntidadCompra, _Numero, _ID_Proveedor, _Fecha, _Referencia, 'G' , _Moneda, _TC, _Fecha, _Condicion, _Obs,
				_Importe, _Descuento, _SubTotal, _IVA, _Total, _claseref, null, null, _ID_Bodega, _Importe, _Descuento, _SubTotal, _IVA,  _Total, 0.0, 0.0, 0.0, _ID_Vendedor, _ID_CFD, _TFD, 
				_ieps, _ivaret, _isrret, null)
		 RETURNING currval(pg_get_serial_sequence('TBL_COMPRAS_RECEPCIONES_CAB', 'id_vc')) INTO _id_recepcion;
		 
		-- actualiza el numero de recepcion
		UPDATE TBL_COMPRAS_ENTIDADES
		SET Recepcion = _Numero + 1
		WHERE ID_EntidadCompra = _ID_EntidadCompra;
		
		-- inserta el detalle
		INSERT INTO TBL_COMPRAS_RECEPCIONES_DET
		SELECT _ID_Recepcion, Partida, Cantidad, ID_Prod, Precio, Descuento, IVA, Obs, Importe, ImporteDesc, ImporteIVA, TotalPart, IEPS, ImporteIEPS, IVARet, ImporteIVARet, ISRRet, ImporteISRRet
		FROM _TMP_COMPRAS_FACTURAS_DET;

		_Ref := 'CREC|' || cast(_ID_Recepcion as varchar) || '|' || cast(_ID_EntidadCompra as varchar) || '||';

		-- Actualiza el status de la recepcion, ligando el ID del pedido o cotizacion
		IF _ID_Enlace is not null
		THEN
			UPDATE TBL_COMPRAS_ORDENES_CAB
			SET Status = 'F', ID_Factura = _ID_Recepcion, TipoEnlace = 'CREC'
			WHERE ID_VC = _ID_Enlace;
		END IF;

		IF _uuid <> ''
		THEN
			UPDATE TBL_CFDCOMP
			SET FSI_Tipo = 'REC', FSI_ID = _ID_Recepcion
			WHERE ID_CFD = _ID_CFD;

			_RFC := (select RFC from TBL_CFDCOMP where ID_CFD = _ID_CFD);
			
			FOR _REC_TMP_COMPRAS_FACTURAS_DET IN ( select * from _TMP_COMPRAS_FACTURAS_DET order by Partida asc ) 
			LOOP
				-- Procede a agregar el enlace del producto del proveedor al id_prod en forseti
				-- tbl_invserv_provee_codigos
				-- id_rfc  id_descripcion id_prod id_moneda precio
				if(select count(*) from TBL_INVSERV_PROVEE_CODIGOS where ID_RFC = _RFC and ID_Descripcion =  _REC_TMP_COMPRAS_FACTURAS_DET.Obs and ID_Prod = _REC_TMP_COMPRAS_FACTURAS_DET.ID_Prod and ID_Moneda = _Moneda) = 0
				then
					insert into TBL_INVSERV_PROVEE_CODIGOS
					values(_RFC, _REC_TMP_COMPRAS_FACTURAS_DET.Obs,  _REC_TMP_COMPRAS_FACTURAS_DET.ID_Prod, _Moneda, _REC_TMP_COMPRAS_FACTURAS_DET.Precio, _Fecha);
				else
					update TBL_INVSERV_PROVEE_CODIGOS
					set Precio =  _REC_TMP_COMPRAS_FACTURAS_DET.Precio, Fecha = _Fecha
					where ID_RFC = _RFC and ID_Descripcion = _REC_TMP_COMPRAS_FACTURAS_DET.Obs and ID_Prod =   _REC_TMP_COMPRAS_FACTURAS_DET.ID_Prod and ID_Moneda = _Moneda;
				end if;
			END LOOP; 
		END IF;
		
		--Procede a agregar el movimiento al almac√©n
		IF _err = 0 AND _FijaCost = '0' and (select count(*) from _TMP_COMPRAS_FACTURAS_DET where Tipo = 'P') > 0
		THEN
			CREATE LOCAL TEMPORARY TABLE _TMP_INVSERV_ALMACEN_MOVIM_DET (
				ID_Bodega smallint NOT NULL ,
				ID_Prod varchar(20) NOT NULL ,
				Partida smallint NOT NULL ,
				Cantidad numeric(9, 3) NOT NULL ,
				Costo numeric(19,4) NULL 
			); 

			insert into _TMP_INVSERV_ALMACEN_MOVIM_DET
			select _ID_Bodega, ID_Prod, Partida, Cantidad, round(Precio * _TC,4) 
			from _TMP_COMPRAS_FACTURAS_DET
			where Tipo = 'P'
			order by Partida ASC;
			
			SELECT * INTO _errpart, _resultpart, _ID_Movimiento 
			FROM sp_invserv_alm_movs_agregar(_Fecha, _ID_Bodega, (case when _AuditarAlm = '1' then 'G' else 'U' end), '1', _Concepto, '',/*1 ENT 2 SAL*/ '1', _Ref, 'CREC', _ID_Recepcion) 
			as ( err integer, res varchar, clave integer );
	      
			IF _errpart <> 0
			THEN
				_err := _errpart;
				_result := _resultpart;
			ELSE
				UPDATE TBL_COMPRAS_RECEPCIONES_CAB
				SET ID_PolCost = _ID_Movimiento
				WHERE ID_VC = _ID_Recepcion;
			END IF;
		
			DROP TABLE _TMP_INVSERV_ALMACEN_MOVIM_DET; 
		END IF;
		-- Fin del movimiento al almacen
		
	END IF; -- fin
	
	RETURN QUERY SELECT _err, _result, _id_recepcion;

END
$BODY$
  LANGUAGE plpgsql;
  
--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_compras_facturas_agregar(
    _id_entidadcompra smallint,
    _numero integer,
    _id_proveedor integer,
    _fecha timestamp without time zone,
    _referencia character varying,
    _moneda smallint,
    _tc numeric,
    _condicion smallint,
    _obs character varying,
    _importe numeric,
    _descuento numeric,
    _subtotal numeric,
    _iva numeric,
    _total numeric,
    _fsipg_efectivo numeric,
    _fsipg_bancos numeric,
    _fsipg_cambio numeric,
    _id_bodega smallint,
    _id_enlace integer,
    _id_vendedor smallint,
    _tipoenlace character,
    _uuid character,
    _ieps numeric,
    _ivaret numeric,
    _isrret numeric)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255); _ID_Factura int; _mes smallint; _ano smallint;	_errpart int;  _resultpart varchar(255);  _ID_Movimiento int;  _concepto varchar(80); _conceptocost varchar(80); _Ref varchar(25);  _claseref varchar(25); 
	_FijaCost bit; _costcomp numeric(19,4); _CC_COSTCOMP char(19); _AuditarAlm bit;
	_ID_CXP int; _numpol int; _clase varchar(1024); _bancajmov int;
	_nombrePro varchar(120); _Cantidad numeric(19,4); _ServComp bit; _CC_PRO char(19); 
	_CC_IVA char(19); _CC_IVAPN char(19); _CC_IEPS char(19); _CC_IEPSPN char(19); _CC_IVARet char(19); _CC_ISRRet char(19); _ImporteTotalPesos numeric(19,4); 
	_IVAPesos numeric(19,4); _IEPSPesos numeric(19,4); _IVARetPesos numeric(19,4); _ISRRetPesos numeric(19,4); _DescPesos numeric(19,4); _TotalPesos numeric(19,4);  
	_Fija bit; _FijaBAN bit; _CC_Desc char(19); _CC_COMPNP char(19); _CC_DCAF char(19);
	_CC_DCEC char(19); _diff numeric(19,4); _TotDebe numeric(19,4); _TotHaber numeric(19,4); _contPart smallint; 
	_totPart smallint; _CC_COMP char(19); _CC_COMCONT char(19); _tipoRetiro varchar(10); _Beneficiario varchar(80); _Pais character(3); _Pedimento varchar(5);
	 _contban smallint; _totalban smallint; _ID_FormaPago smallint; _ID_BanCaj smallint; _RefPago varchar(25); _banCHQ varchar(20); _IdMon smallint; _RecepcionAsociada bit; 
	_id_clasificacion varchar(10); _numPagos smallint; _RefExt int; _ID_CFD int; _TFD smallint;  
	_RFC varchar(15); _RFCBeneficiario varchar(15); _moneda_ce character(3); /*  _CuentaBeneficiario varchar(80); _BancoBeneficiario character(3); _CuentaOrigen varchar(50); _BancoOrigen character(3);  */
	--Iteracion
	_REC_TMP_PAGOS RECORD; _REC_TMP_COMPRAS_FACTURAS_DET RECORD; _TotalPesosMult numeric(19,4); _ParcialPesosMult numeric(19,4); _BanCaj smallint; _CC_BAN char(19);
BEGIN	
	_err := 0;
	_result := 'La factura de compra se ha registrado satisfactoriamente';
	--_ServComp := '1';
	_CC_IVA := (select valfanumerico from TBL_VARIABLES where ID_Variable = 'CC_IVAAC');
	_CC_IVAPN := (select valfanumerico from TBL_VARIABLES where ID_Variable = 'CC_IVAACPN');
	_CC_IEPS := (select valfanumerico from TBL_VARIABLES where ID_Variable = 'CC_IEPSC');
	_CC_IEPSPN := (select valfanumerico from TBL_VARIABLES where ID_Variable = 'CC_IEPSCPN');
	_CC_IVARet := (select valfanumerico from TBL_VARIABLES where ID_Variable = 'CC_IVARETC');
	_CC_ISRRet := (select valfanumerico from TBL_VARIABLES where ID_Variable = 'CC_ISRREC');
	_CC_Desc := (select valfanumerico from TBL_VARIABLES where ID_Variable = 'CC_DSC');
	_moneda_ce := (select id_satmoneda from TBL_CONT_MONEDAS where Clave = _moneda);
	_Cantidad := round((_Total * _TC), 2);
	_ImporteTotalPesos := ROUND((_Importe * _TC), 2);
	_IVAPesos :=  ROUND((_IVA * _TC), 2);
	_IEPSPesos :=  ROUND((_IEPS * _TC), 2);
	_IVARetPesos :=  ROUND((_IVARet * _TC), 2);
	_ISRRetPesos :=  ROUND((_ISRRet * _TC), 2);
	_DescPesos := ROUND((_Descuento * _TC), 2);
	_TotalPesos := ROUND((_Total * _TC), 2);	
	_concepto := 'Compra ' || (select Descripcion from TBL_COMPRAS_ENTIDADES where ID_EntidadCompra = _ID_EntidadCompra) || ', numero ' || cast(_Numero as varchar) || 
				(case when _Referencia <> '' then ' y referencia ' || _Referencia || '.' else '.' end);
	_conceptocost := 'Costo compra ' || (select Descripcion from TBL_COMPRAS_ENTIDADES where ID_EntidadCompra = _ID_EntidadCompra) || ', numero ' || cast(_Numero as varchar) || 
				(case when _Referencia <> '' then ' y referencia ' || _Referencia || '.' else '.' end);
	_Beneficiario := case when _ID_Proveedor = 0 then 'Al Portador' else ( select Nombre from TBL_PROVEE_PROVEE where ID_Tipo = 'PR' and ID_Clave = _ID_Proveedor) end;
  _Pais := case when _ID_Proveedor = 0 then 'MEX' else ( select Pais from TBL_PROVEE_PROVEE where ID_Tipo = 'PR' and ID_Clave = _ID_Proveedor) end;
  _Pedimento := case when _ID_Proveedor = 0 then '--' else ( select Pedimento from TBL_PROVEE_PROVEE where ID_Tipo = 'PR' and ID_Clave = _ID_Proveedor) end; 
  _RFCBeneficiario := case when _ID_Proveedor = 0 then 'XAXX010101000' else ( select RFC from TBL_PROVEE_PROVEE where ID_Tipo = 'PR' and ID_Clave = _ID_Proveedor) end;
	--_CuentaBeneficiario := case when _ID_Proveedor = 0 then '' else ( select MetodoDePago from TBL_PROVEE_PROVEE where ID_Tipo = 'PR' and ID_Clave = _ID_Proveedor) end;
	--_BancoBeneficiario := case when _ID_Proveedor = 0 then '000' else ( select ID_SatBanco from TBL_PROVEE_PROVEE where ID_Tipo = 'PR' and ID_Clave = _ID_Proveedor) end;
	_CC_PRO := (select ID_CC from TBL_PROVEE_PROVEE where ID_Tipo = 'PR' and ID_Clave = _ID_Proveedor);
	_Fija := (select Fija from TBL_COMPRAS_ENTIDADES where ID_EntidadCompra = _ID_EntidadCompra);
	_FijaCost := (select FijaCost from TBL_COMPRAS_ENTIDADES where ID_EntidadCompra = _ID_EntidadCompra);
	--_FijaBAN := case when _ID_FormaPago = 0 then (select Fijo from TBL_BANCOS_CUENTAS where Tipo = 1 and Clave = _ID_BanCaj)
		--				else (select Fijo from TBL_BANCOS_CUENTAS where Tipo = 0 and Clave = _ID_BanCaj) end
	_mes := date_part('month',_Fecha);
	_ano := date_part('year',_Fecha);
	_AuditarAlm := ( select AuditarAlm from TBL_INVSERV_BODEGAS where ID_Bodega = _ID_Bodega );
	_RecepcionAsociada := ( case when _ID_Enlace is not null and _TipoEnlace = 'CREC' then '1' else '0' end );
	_CC_DCAF := (select valfanumerico from TBL_VARIABLES where ID_Variable = 'CC_DCAF');
	_CC_DCEC := (select valfanumerico from TBL_VARIABLES where ID_Variable = 'CC_DCEC');
	_id_clasificacion := (select ID_Clasificacion from TBL_COMPRAS_ENTIDADES where ID_EntidadCompra = _ID_EntidadCompra);
	_numPagos = (select count(*) from _TMP_PAGOS);

	IF _ID_Enlace is not null
	THEN
		_claseref := _TipoEnlace || '|' || cast(_ID_Enlace as varchar) || '|' || cast(_ID_EntidadCompra as varchar) || '||';
	END IF;
	
	IF(select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano and Cerrado = 1) > 0
	OR (select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano) < 1
	THEN
		_err := 3;
		_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_POLIZAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'ERROR: La fecha de poliza pertenece a un periodo cerrado o inexistente'
	END IF;

	IF _CC_DCAF = '' or _CC_DCEC = ''
	THEN
		_err := 3;
		_result := (select msj2 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'COMP_CXP' and 
			m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'ERROR: Las cuentas de diferencias cambiarias no se han registrado aun';
	END IF;

	IF (select count(*) from TBL_COMPRAS_FACTURAS_CAB where ID_Entidad = _ID_EntidadCompra and Numero = _Numero) > 0
	THEN
		_err := 3;
		_result := 'ERROR: La clave de la factura ya existe, No se puede duplicar';
	END IF;

	IF ( select ventero from TBL_VARIABLES where ID_Variable = 'MVCF' ) = 1
	THEN
		IF (select count(*) from TBL_INVSERV_CHFIS_CAB where ID_Bodega = _ID_Bodega and ( Cerrado = '1' or Generado = '1') and Status <> 'C' and Fecha >= _Fecha) > 0
		THEN
			_err := 3;
			_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ALM_CHFIS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR');--'ERROR: No se puede generar el movimiento al almacen porque ya existe un chequeo f?sico cerrado en esta bodega, con fecha posterior a este movimiento';
		END IF;
	END IF;

	IF _Condicion = 0 
	THEN
		FOR _REC_TMP_PAGOS IN ( select * from _TMP_PAGOS order by Partida asc ) 
		LOOP
			_ID_FormaPago := _REC_TMP_PAGOS.ID_FormaPago;
			_ID_BanCaj := _REC_TMP_PAGOS.ID_BanCaj;
			_FijaBAN := (case when _ID_FormaPago = 1 then (select Fijo from TBL_BANCOS_CUENTAS where Tipo = 1 and Clave = _ID_BanCaj)
							else (select Fijo from TBL_BANCOS_CUENTAS where Tipo = 0 and Clave = _ID_BanCaj) end);
			_IdMon := (case when _ID_FormaPago = 1 then (select ID_Moneda from TBL_BANCOS_CUENTAS where Tipo = 1 and Clave = _ID_BanCaj)
							else (select ID_Moneda from TBL_BANCOS_CUENTAS where Tipo = 0 and Clave = _ID_BanCaj) end);
			
			IF _Fija <> _FijaBAN
			THEN
				_err := 3;
				_result := 'ERROR: No se puede agregar la compra porque al pagarse de contado requiere que los bancos o cajas manejen los mismos trazos contables que la compra';
				EXIT;
			END IF;

			IF _Moneda <> _IdMon 
			THEN
				_err := 3;
				_result := 'ERROR: No se puede agregar la compra porque al pagarse de contado requiere que los bancos o cajas manejen la misma moneda que la compra';
				EXIT;
			END IF;
			/*
			IF _ID_Proveedor = 0 and _Fija = '0' and _ID_FormaPago > 0
			THEN
				_err := 3;
				_result := 'ERROR: No se puede agregar una compra directa de mostrador pagada de contado con cheque o transferencia, porque no existe soporte para contabilidad electr√≥nica, selecciona un proveedor o una entidad Fija';
				EXIT;
			END IF; */
		END LOOP;
	ELSIF _Condicion = 1 -- Es a cr√©dito, por lo tanto revisa si el total de esta factura mas el total de la deuda con el proveedor rebasa el l√≠mite de cr√©dito, de ser asi, rechazar√° la compra
	THEN
		IF(select Dias from TBL_PROVEE_PROVEE where ID_Tipo = 'PR' and ID_Clave = _ID_Proveedor) > 0 -- tenemos credito con este proveedor
		THEN
			IF (select LimiteCredito from TBL_PROVEE_PROVEE where ID_Tipo = 'PR' and ID_Clave = _ID_Proveedor) > 0 AND 
				((_ImporteTotalPesos + getcliprosldtotmn('PR', _ID_Proveedor)) > (select LimiteCredito from TBL_PROVEE_PROVEE where ID_Tipo = 'PR' and ID_Clave = _ID_Proveedor))
			THEN
				_err := 3;
				_result := 'ERROR: No se puede agregar la compra a cr√©dito porque la suma de nuestras deudas con este proveedor, m√°s esta compra, sobrepasa nuestro l√≠mite de cr√©dito';
			END IF;
		ELSE -- no tenemos cr√©dito
			_err := 3;
			_result := 'ERROR: No se puede agregar la compra porque al pagarse a cr√©dito requiere que el proveedor nos brinde por lo menosu un d√≠a de cr√©dito';
		END IF;
	END IF;
	
	IF _IVA > 0.0 AND ( _CC_IVA = '' OR _CC_IVAPN = '' )
	THEN
		_err := 3;
		_result := 'ERROR: La cuenta de iva acreditable efectivamente pagado o la de iva acreditable pendiente de pagar no existe o no se ha enlazado';
	END IF;
	IF _IEPS > 0.0 AND ( _CC_IEPS = '' OR _CC_IEPSPN = '' )
	THEN
		_err := 3;
		_result := 'ERROR: La cuenta del IEPS efectivamente pagado o la de IEPS pendiente de pagar no existe o no se ha enlazado';
	END IF;
	IF _IVARet > 0.0 AND ( _CC_IVARet = '' )
	THEN
		_err := 3;
		_result := 'ERROR: La cuenta de IVA Retenido no existe o no se ha enlazado';
	END IF;
	IF _ISRRet > 0.0 AND ( _CC_ISRRet = '' )
	THEN
		_err := 3;
		_result := 'ERROR: La cuenta de ISR Retenido no existe o no se ha enlazado';
	END IF;
	IF _Descuento > 0.0 AND _CC_Desc = ''
	THEN
		_err := 3;
		_result := 'ERROR: La cuenta de descuento sobre compras no existe o no se ha enlazado';
	END IF;
	
	-- procede a realizar verificaci?n sobre los trazos
	IF _FijaCost = '0'
	THEN
		_CC_COSTCOMP := (select cc from TBL_INVSERV_COSTOS_CONCEPTOS where ID_Concepto = 1);
		IF _CC_COSTCOMP is null
		THEN
			_err := 3;
			_result := 'ERROR: La cuenta para el costo de compras no existe o no se ha enlazado';	
		END IF;
	END IF;

	IF _Condicion = 0
	THEN
		_CC_COMCONT := (select valfanumerico from TBL_VARIABLES where ID_Variable = 'CC_COMCONT');
		IF _CC_COMCONT = ''
		THEN
			_err := 3;
			_result := 'ERROR: La cuenta para compras de contado no existe o no se ha enlazado';	
		END IF;
	ELSE 
		_CC_COMP := (select valfanumerico from TBL_VARIABLES where ID_Variable = 'CC_COMP');
		IF _CC_COMP = ''
		THEN
			_err := 3;
			_result := 'ERROR: La cuenta para compras a cr√©dito no existe o no se ha enlazado';	
		END IF;
	END IF;

	IF _Condicion = 3
	THEN
		_CC_COMPNP := (select valfanumerico from TBL_VARIABLES where ID_Variable = 'CC_COMPNP');
		IF _CC_COMPNP = ''
		THEN
			_err := 3;
			_result := 'ERROR: La cuenta para registro de partida doble cuando no se establece ningun metodo de pago, no existe o no se ha enlazado';
		END IF;
	END IF;
	
	--VERIFICA SI ES CFDI Asociada
	IF _uuid <> ''
	THEN
		IF (select count(*) from TBL_CFDCOMP where UUID = _uuid) > 0
		THEN
			_ID_CFD := (select ID_CFD from TBL_CFDCOMP where UUID = _uuid) ;
			_TFD := 3;
		ELSE
			_err := 3;
			_result := 'ERROR: No se puede enlazar el CFDI al registro, porque no existe el UUID proporcionado';
		END IF;
	END IF;
	
	IF _err = 0
	THEN
		INSERT INTO TBL_COMPRAS_FACTURAS_CAB(  id_entidad, numero, id_clipro, fecha, referencia, status, moneda, tc, fechaenvio, condicion, obs, 
			importe, descuento, subtotal, iva, total, ref, id_pol, id_polcost, id_bodega, mimporte, mdescuento, msubtotal, miva, mtotal, efectivo, bancos, cambio, id_vendedor, id_cfd, tfd, 
			ieps, ivaret, isrret )
		VALUES(_ID_EntidadCompra, _Numero, _ID_Proveedor, _Fecha, _Referencia, (case when _RecepcionAsociada = '0' then (case when _AuditarAlm = '1' then 'G' else 'E' end) else 'E' end), _Moneda, _TC, _Fecha, _Condicion, _Obs,
				_Importe, _Descuento, _SubTotal, _IVA, _Total, _claseref, null, null, _ID_Bodega, _Importe, _Descuento, _SubTotal, _IVA,  _Total, _FSIPG_Efectivo, _FSIPG_Bancos, _FSIPG_Cambio, _ID_Vendedor, _ID_CFD, _TFD,
				_ieps, _ivaret, _isrret)
		 RETURNING currval(pg_get_serial_sequence('TBL_COMPRAS_FACTURAS_CAB', 'id_vc')) INTO _id_factura;
		 
		-- actualiza el numero de FACTURA
		UPDATE TBL_COMPRAS_ENTIDADES
		SET Doc = _Numero + 1
		WHERE ID_EntidadCompra = _ID_EntidadCompra;
		
		-- inserta el detalle
		INSERT INTO TBL_COMPRAS_FACTURAS_DET
		SELECT _ID_Factura, Partida, Cantidad, ID_Prod, Precio, Descuento, IVA, Obs, Importe, ImporteDesc, ImporteIVA, TotalPart, IEPS, ImporteIEPS, IVARet, ImporteIVARet, ISRRet, ImporteISRRet
		FROM _TMP_COMPRAS_FACTURAS_DET;

		_Ref := 'CFAC|' || cast(_ID_Factura as varchar) || '|' || cast(_ID_EntidadCompra as varchar) || '||';

		-- Actualiza el status de la orden o recepcion ligando el ID de la FACTURA
		IF _ID_Enlace is not null
		THEN
			IF _TipoEnlace = 'CORD'
			THEN
				UPDATE TBL_COMPRAS_ORDENES_CAB
				SET Status = 'F', ID_Factura = _ID_Factura, TipoEnlace = 'CFAC'
				WHERE ID_VC = _ID_Enlace;
			ELSE
				UPDATE TBL_COMPRAS_RECEPCIONES_CAB
				SET ID_Factura = _ID_Factura
				WHERE ID_VC = _ID_Enlace;
			END IF;
		END IF;

		IF _uuid <> ''
		THEN
			UPDATE TBL_CFDCOMP
			SET FSI_Tipo = 'FAC', FSI_ID = _ID_Factura
			WHERE ID_CFD = _ID_CFD;

			_RFC := (select RFC from TBL_CFDCOMP where ID_CFD = _ID_CFD);
			
			FOR _REC_TMP_COMPRAS_FACTURAS_DET IN ( select * from _TMP_COMPRAS_FACTURAS_DET order by Partida asc ) 
			LOOP
				-- Procede a agregar el enlace del producto del proveedor al id_prod en forseti
				if(select count(*) from TBL_INVSERV_PROVEE_CODIGOS where ID_RFC = _RFC and ID_Descripcion =  _REC_TMP_COMPRAS_FACTURAS_DET.Obs and ID_Prod = _REC_TMP_COMPRAS_FACTURAS_DET.ID_Prod and ID_Moneda = _Moneda) = 0
				then
					insert into TBL_INVSERV_PROVEE_CODIGOS
					values(_RFC, _REC_TMP_COMPRAS_FACTURAS_DET.Obs,  _REC_TMP_COMPRAS_FACTURAS_DET.ID_Prod, _Moneda, _REC_TMP_COMPRAS_FACTURAS_DET.Precio, _Fecha);
				else
					update TBL_INVSERV_PROVEE_CODIGOS
					set Precio =  _REC_TMP_COMPRAS_FACTURAS_DET.Precio, Fecha = _Fecha
					where ID_RFC = _RFC and ID_Descripcion = _REC_TMP_COMPRAS_FACTURAS_DET.Obs and ID_Prod =   _REC_TMP_COMPRAS_FACTURAS_DET.ID_Prod and ID_Moneda = _Moneda;
				end if;
			END LOOP; 
		END IF;

		--Si no es de mostrador, actualiza los ultimos precios de proveedores
		IF _ID_Proveedor > 0
		THEN
			FOR _REC_TMP_COMPRAS_FACTURAS_DET IN ( select * from _TMP_COMPRAS_FACTURAS_DET order by Partida asc ) 
			LOOP
				-- Procede a agregar el ultimo costo del producto o servicio correspondiente al Proveedor ( si existe lo actualiza de lo contrario lo inserta )
				if(select count(*) from TBL_COMPRAS_VS_INVENTARIO where ID_Tipo = 'PR' and ID_Proveedor = _ID_Proveedor and ID_Prod = _REC_TMP_COMPRAS_FACTURAS_DET.ID_Prod and ID_Moneda = _Moneda) = 0
				then
					insert into TBL_COMPRAS_VS_INVENTARIO
					values('PR', _ID_Proveedor,  _REC_TMP_COMPRAS_FACTURAS_DET.ID_Prod, _Moneda, _Fecha,  _REC_TMP_COMPRAS_FACTURAS_DET.Precio,  _REC_TMP_COMPRAS_FACTURAS_DET.Descuento);
				else
					update TBL_COMPRAS_VS_INVENTARIO
					set Fecha = _Fecha, Precio =  _REC_TMP_COMPRAS_FACTURAS_DET.Precio, Descuento =  _REC_TMP_COMPRAS_FACTURAS_DET.Descuento
					where ID_Tipo = 'PR' and ID_Proveedor = _ID_Proveedor and ID_Prod =   _REC_TMP_COMPRAS_FACTURAS_DET.ID_Prod and ID_Moneda = _Moneda;
				end if;
			END LOOP; 
		END IF; 

		-- Actualiza el precio de compra en el inventario
		UPDATE TBL_INVSERV_INVENTARIOS
		SET PrecioComp = tm.Precio, ID_Moneda = _Moneda
		FROM TBL_INVSERV_INVENTARIOS e, _TMP_COMPRAS_FACTURAS_DET tm 
		WHERE e.ID_Prod = tm.ID_Prod
			AND e.ID_Prod = TBL_INVSERV_INVENTARIOS.ID_Prod;
		
		--Crea tablas temporales indispensables... para contable. y contabilidad electronica
		CREATE LOCAL TEMPORARY TABLE _TMP_CONT_POLIZAS_DETALLE_TMP (
			Part smallint NOT NULL ,
			Cuenta char(19) NOT NULL ,
			Concepto varchar(80) NOT NULL ,
			Parcial numeric(19,4) NOT NULL ,
			Moneda smallint NOT NULL ,
			TC numeric(19,4) NOT NULL ,
			Debe numeric(19,4) NOT NULL ,
			Haber numeric(19,4) NOT NULL
		);
		CREATE LOCAL TEMPORARY TABLE _TMP_CONT_POLIZAS_DETALLE_CE_CHEQUES_TMP( 
			id_part smallint NOT NULL,
			num character varying(20) NOT NULL,
			banco character(3) NOT NULL,
			ctaori character varying(50) NOT NULL,
			fecha timestamp without time zone NOT NULL,
			monto numeric(19,4) NOT NULL,
			benef character varying(300) NOT NULL,
			rfc character varying(13) NOT NULL,
			banemisext character varying(150) NOT NULL,
			moneda character(3) NOT NULL,
			tipcamb numeric(19,5) NOT NULL
		); 
		CREATE LOCAL TEMPORARY TABLE _TMP_CONT_POLIZAS_DETALLE_CE_TRANSFERENCIAS_TMP ( 
			id_part smallint NOT NULL,
			ctaori character varying(50) NOT NULL,
			bancoori character(3) NOT NULL,
			monto numeric(19,4) NOT NULL,
			ctadest character varying(50) NOT NULL,
			bancodest character(3) NOT NULL,
			fecha timestamp without time zone NOT NULL,
			benef character varying(300) NOT NULL,
			rfc character varying(13) NOT NULL,
			bancooriext character varying(150) NOT NULL,
			bancodestext character varying(150) NOT NULL,
			moneda character(3) NOT NULL,
			tipcamb numeric(19,5) NOT NULL
		);
		CREATE LOCAL TEMPORARY TABLE _TMP_CONT_POLIZAS_DETALLE_CE_OTRMETODOPAGO_TMP (
			id_part smallint NOT NULL,
			metpagopol character(2) NOT NULL,
			fecha timestamp without time zone NOT NULL,
			benef character varying(300) NOT NULL,
			rfc character varying(13) NOT NULL,
			monto numeric(19,4) NOT NULL,
			moneda character(3) NOT NULL,
			tipcamb numeric(19,5) NOT NULL
		);
		CREATE LOCAL TEMPORARY TABLE _TMP_CONT_POLIZAS_DETALLE_CE_COMPROBANTES_TMP ( 
			id_part smallint NOT NULL, 
			uuid_cfdi character(36) NOT NULL, 
			monto numeric(19,4) NOT NULL, 
			rfc character varying(13) NOT NULL,
			id_tipo character varying(10) NOT NULL,
			moneda character(3) NOT NULL,
			tipcamb numeric(19,5) NOT NULL,
			cfd_cbb_serie character varying(10) NOT NULL,
			cfd_cbb_numfol integer NOT NULL,
			numfactext character varying(36) NOT NULL,
			taxid character varying(30) NOT NULL
		); 
		
		--fin polizas temporales para contable			
		-- Agrega a la tabla de temporal para: polizas final o detalles de bancos cajas final
		_contPart := 1;
		IF _Condicion = 0 
		THEN
			INSERT INTO _TMP_CONT_POLIZAS_DETALLE_TMP
			VALUES(_contPart, _CC_COMCONT, 'Importe de la compra', _Importe, _Moneda, _TC, _ImporteTotalPesos, 0.0);
		ELSE
			INSERT INTO _TMP_CONT_POLIZAS_DETALLE_TMP
			VALUES(_contPart, _CC_COMP, 'Importe de la compra', _Importe, _Moneda, _TC, _ImporteTotalPesos, 0.0);
		END IF;
		
		IF _uuid <> ''
		THEN
			INSERT INTO _TMP_CONT_POLIZAS_DETALLE_CE_COMPROBANTES_TMP
			VALUES(_contPart, _uuid, _Total, _RFCBeneficiario, 'CompNal', _moneda_ce, _TC, '', 0, '', '');
		END IF;
		
		-- procede a registrar los otros conceptos de la poliza ( EL IVA , Deuda con Proveedor ETC)
		IF _IVA > 0.0
		THEN
			_contPart := _contPart + 1;
			IF _Condicion = 0 -- es de contado, envia todo a iva efectivamente pagado
			THEN	
				INSERT INTO _TMP_CONT_POLIZAS_DETALLE_TMP
				VALUES(_contPart, _CC_IVA, 'Impuesto de la compra', _IVA, _Moneda, _TC, _IVAPesos, 0.0);
			ELSE -- de credito. o ningun m√©todo de pago. envia a pendiente de pagar
				INSERT INTO _TMP_CONT_POLIZAS_DETALLE_TMP
				VALUES(_contPart, _CC_IVAPN, 'Impuesto de la compra', _IVA, _Moneda, _TC, _IVAPesos, 0.0);
			END IF;
		END IF;

		IF _IEPS > 0.0
		THEN
			_contPart := _contPart + 1;
			IF _Condicion = 0 -- es de contado, envia todo a ieps a efectivamente pagado
			THEN	
				INSERT INTO _TMP_CONT_POLIZAS_DETALLE_TMP
				VALUES(_contPart, _CC_IEPS, 'Impuesto Especial sobre Producci√≥n y Servicio', _IEPS, _Moneda, _TC, _IEPSPesos, 0.0);	
			ELSE -- de credito. o ningun m√©todo de pago. envia a pendiente de pagar
				INSERT INTO _TMP_CONT_POLIZAS_DETALLE_TMP
				VALUES(_contPart, _CC_IEPSPN, 'Impuesto Especial sobre Producci√≥n y Servicio', _IEPS, _Moneda, _TC, _IEPSPesos, 0.0);	
			END IF;
		END IF;

		IF _IVARet > 0.0
		THEN
			_contPart := _contPart + 1;
			INSERT INTO _TMP_CONT_POLIZAS_DETALLE_TMP
			VALUES(_contPart, _CC_IVARet, 'Retenci√≥n de IVA', _IVARet, _Moneda, _TC, 0.0, _IVARetPesos);	
		END IF;

		IF _ISRRet > 0.0
		THEN
			_contPart := _contPart + 1;
			INSERT INTO _TMP_CONT_POLIZAS_DETALLE_TMP
			VALUES(_contPart, _CC_ISRRet, 'Retenci√≥n de ISR', _ISRRet, _Moneda, _TC, 0.0, _ISRRetPesos);	
		END IF;

		IF _Descuento > 0.0
		THEN
			_contPart := _contPart + 1;
			INSERT INTO _TMP_CONT_POLIZAS_DETALLE_TMP
			VALUES(_contPart, _CC_Desc, 'Descuento explicito', _Descuento, _Moneda, _TC, 0.0, _DescPesos);
		END IF;
			
		
		-- procede a registrar los movimiento en la caja, banco, Cuenta por cobrar, y la poliza en caso necesario
		IF _ID_Proveedor > 0 and _Condicion = 1 -- si es a credito y no de mostrador
		THEN
			SELECT * INTO _errpart, _resultpart, _id_cxp 
			FROM sp_provee_cxp_alta(_ID_EntidadCompra, _Fecha, 'PR', _ID_Proveedor, _Concepto, _Moneda, _TC, _Total, _Cantidad, '0', 'CFAC', _ID_Factura, _Ref) as ( err integer, res varchar, clave integer ); --este movimiento no registrara poliza porque el concepto 0 de cxp es de sistema 
			IF _errpart <> 0
			THEN
				_err := 3;
				_result := _resultpart;
			ELSE
				_clase = 'CCXP|' || cast(_ID_CXP as varchar) || '|' || cast(_ID_EntidadCompra as varchar) || '||';

				UPDATE TBL_COMPRAS_FACTURAS_CAB
				SET ID_Pol = _ID_CXP
				WHERE ID_VC = _ID_Factura;
				
				-- Procede a registrar la poliza si y solo si es una entidad dinamica
				-- Primero registra la deuda total del proveedor para la partida doble en tmp
				_contPart := _contPart + 1;
				INSERT INTO _TMP_CONT_POLIZAS_DETALLE_TMP
				VALUES(_contPart, _CC_PRO, 'Deuda total del Proveedor', _Total, _Moneda, _TC, 0.0, _TotalPesos);
					
				IF _Fija = '0'
				THEN
					-- Primero registra y crea la tabla temporal de detalle de la poliza
					CREATE LOCAL TEMPORARY TABLE _TMP_CONT_POLIZAS_DETALLE (
						Part smallint NOT NULL ,
						Cuenta char(19) NOT NULL ,
						Concepto varchar(80) NOT NULL ,
						Parcial numeric(19,4) NOT NULL ,
						Moneda smallint NOT NULL ,
						TC numeric(19,4) NOT NULL ,
						Debe numeric(19,4) NOT NULL ,
						Haber numeric(19,4) NOT NULL
					);
					CREATE LOCAL TEMPORARY TABLE _TMP_CONT_POLIZAS_DETALLE_CE_COMPROBANTES ( 
						id_part smallint NOT NULL, 
						uuid_cfdi character(36) NOT NULL, 
						monto numeric(19,4) NOT NULL, 
						rfc character varying(13) NOT NULL,
						id_tipo character varying(10) NOT NULL,
						moneda character(3) NOT NULL,
						tipcamb numeric(19,5) NOT NULL,
						cfd_cbb_serie character varying(10) NOT NULL,
						cfd_cbb_numfol integer NOT NULL,
						numfactext character varying(36) NOT NULL,
						taxid character varying(30) NOT NULL
 					); 
					-- Fin de la tabla temporal

					-- si existen diferencias de centavos al convertir en moneda nacional los tipos de cambio, los registra
					_TotHaber := (select sum(Haber) from _TMP_CONT_POLIZAS_DETALLE_TMP);
					_TotDebe := (select sum(Debe) from _TMP_CONT_POLIZAS_DETALLE_TMP);
					IF _TotDebe > _TotHaber
					THEN
						_diff := _TotDebe - _TotHaber;
						_contPart := _contPart + 1;
						INSERT INTO _TMP_CONT_POLIZAS_DETALLE_TMP
						VALUES(_contPart, _CC_DCEC, 'Diferencia en decimales', _diff, 1, 1.0, 0.0, _diff);
					ELSIF _TotDebe < _TotHaber
					THEN
						_diff := _TotHaber - _TotDebe;
						_contPart := _contPart + 1;
						INSERT INTO _TMP_CONT_POLIZAS_DETALLE_TMP
						VALUES(_contPart, _CC_DCAF, 'Diferencia en decimales', _diff, 1, 1.0, _diff, 0.0);
					END IF;
					
					-- Inserta desde _TMP_CONT_POLIZAS_DETALLE_TMP
					INSERT INTO _TMP_CONT_POLIZAS_DETALLE
					SELECT * FROM  _TMP_CONT_POLIZAS_DETALLE_TMP;
					INSERT INTO _TMP_CONT_POLIZAS_DETALLE_CE_COMPROBANTES
					SELECT * FROM  _TMP_CONT_POLIZAS_DETALLE_CE_COMPROBANTES_TMP;
	
					-- Agrega ahora la poliza principal
					--EXEC dbo.sp_cont_polizas_agregar_ext 'DR', @Fecha, @concepto, 0, @clase, @errpart OUTPUT, @numpol OUTPUT
					SELECT * INTO _errpart, _resultpart, _numpol 
					FROM sp_cont_polizas_agregar('DR', _Fecha, _Concepto,'0', _clase, _Cantidad, _id_clasificacion ) as ( err integer, res varchar, clave integer );
      					IF _errpart <> 0
					THEN
						_err := _errpart;
						_result := _resultpart;
					ELSE
						UPDATE  TBL_PROVEE_CXP
						SET ID_Pol = _numpol
						WHERE ID_CP = _ID_CXP;
					END IF;

					DROP TABLE _TMP_CONT_POLIZAS_DETALLE;
					DROP TABLE _TMP_CONT_POLIZAS_DETALLE_CE_COMPROBANTES;
				END IF;
			END IF; 
		ELSIF _Condicion = 0 -- es de contado
		THEN
			-- Termina la poliza dividiendo los pagos en sus cuentas de banco o caja
			_TotalPesosMult = 0.0;
			_ParcialPesosMult = 0.0;
			FOR _REC_TMP_PAGOS IN ( select * from _TMP_PAGOS order by Partida asc ) 
			LOOP
				_ParcialPesosMult := round((_REC_TMP_PAGOS.Total * _TC), 2);
				_TotalPesosMult := _TotalPesosMult + _ParcialPesosMult;
				_BanCaj := _REC_TMP_PAGOS.ID_FormaPago; -- 1 cajas 0 bancos
				_CC_BAN := (select CC from TBL_BANCOS_CUENTAS  where Tipo = _BanCaj and Clave = _REC_TMP_PAGOS.ID_BanCaj);
				--_CuentaOrigen := (select Descripcion from TBL_BANCOS_CUENTAS  where Tipo = _BanCaj and Clave = _REC_TMP_PAGOS.ID_BanCaj);
				--_BancoOrigen := (select ID_SatBanco from TBL_BANCOS_CUENTAS  where Tipo = _BanCaj and Clave = _REC_TMP_PAGOS.ID_BanCaj);
				_banCHQ := (select SigCheque from TBL_BANCOS_CUENTAS where Tipo = _BanCaj and Clave = _REC_TMP_PAGOS.ID_BanCaj)::varchar(20);
				_contPart := _contPart + 1;
				
				INSERT INTO _TMP_CONT_POLIZAS_DETALLE_TMP
				VALUES(_contPart, _CC_BAN, _REC_TMP_PAGOS.RefPago, _REC_TMP_PAGOS.Total, _Moneda, _TC, 0.0, _ParcialPesosMult);
				--Ingresa contablilidad electronica del pago...
							-- Actualiza la contabilidad electronica de este BANCO o CAJA a esta partida, ya sea por cheque, transferencia u otro metodo de pago
				IF _BanCaj = 0 -- Es banco
				THEN
					IF _REC_TMP_PAGOS.ID_SatMetodosPago = '02' -- se trata de un cheque
					THEN
						INSERT INTO _TMP_CONT_POLIZAS_DETALLE_CE_CHEQUES_TMP
						SELECT _contPart, _banCHQ, ID_SatBanco, Descripcion, _Fecha, _REC_TMP_PAGOS.Total, _Beneficiario, _RFCBeneficiario, BancoExt, _moneda_ce, _TC
						FROM TBL_BANCOS_CUENTAS 
						WHERE Tipo = _BanCaj and Clave = _REC_TMP_PAGOS.ID_BanCaj;
					ELSIF _REC_TMP_PAGOS.ID_SatMetodosPago = '03' --Es una transferencia
					THEN
						INSERT INTO _TMP_CONT_POLIZAS_DETALLE_CE_TRANSFERENCIAS_TMP
						SELECT _contPart, Descripcion, ID_SatBanco, _REC_TMP_PAGOS.Total, _REC_TMP_PAGOS.CuentaBanco, _REC_TMP_PAGOS.ID_SatBanco, _Fecha,  _Beneficiario, _RFCBeneficiario, BancoExt, _REC_TMP_PAGOS.BancoExt, _moneda_ce, _TC
						FROM TBL_BANCOS_CUENTAS 
						WHERE Tipo = _BanCaj and Clave = _REC_TMP_PAGOS.ID_BanCaj;
					ELSE --Es otro metodo de pago (Deposito o Retiro es lo mismo)
						INSERT INTO _TMP_CONT_POLIZAS_DETALLE_CE_OTRMETODOPAGO_TMP
						SELECT _contPart, _REC_TMP_PAGOS.ID_SatMetodosPago, _Fecha, _Beneficiario, _RFCBeneficiario, _REC_TMP_PAGOS.Total, _moneda_ce, _TC;
					END IF;
				ELSE -- BanCaj = 1 "Caja"
					IF _REC_TMP_PAGOS.ID_SatMetodosPago = '02' -- se trata de un cheque (Deposito o Retiro es lo mismo, toma los datos directos capturados en el dialogo)
					THEN
						INSERT INTO _TMP_CONT_POLIZAS_DETALLE_CE_CHEQUES_TMP
						SELECT _contPart, _REC_TMP_PAGOS.Cheque, _REC_TMP_PAGOS.ID_SatBanco, _REC_TMP_PAGOS.CuentaBanco, _Fecha, _REC_TMP_PAGOS.Total, _Beneficiario, _RFCBeneficiario, _REC_TMP_PAGOS.BancoExt, _moneda_ce, _TC;
					ELSE --Es otro metodo de pago (Deposito o Retiro es lo mismo)
						INSERT INTO _TMP_CONT_POLIZAS_DETALLE_CE_OTRMETODOPAGO_TMP
						SELECT _contPart, _REC_TMP_PAGOS.ID_SatMetodosPago, _Fecha, _Beneficiario, _RFCBeneficiario, _REC_TMP_PAGOS.Total, _moneda_ce, _TC;
					END IF;
				END IF;
			END LOOP;

			IF _Fija = '0'
			THEN
				-- Primero registra y crea la tabla temporal de detalle de la poliza
				CREATE LOCAL TEMPORARY TABLE _TMP_CONT_POLIZAS_DETALLE (
					Part smallint NOT NULL ,
					Cuenta char(19) NOT NULL ,
					Concepto varchar(80) NOT NULL ,
					Parcial numeric(19,4) NOT NULL ,
					Moneda smallint NOT NULL ,
					TC numeric(19,4) NOT NULL ,
					Debe numeric(19,4) NOT NULL ,
					Haber numeric(19,4) NOT NULL
				);
				CREATE LOCAL TEMPORARY TABLE _TMP_CONT_POLIZAS_DETALLE_CE_CHEQUES ( 
					id_part smallint NOT NULL,
					num character varying(20) NOT NULL,
					banco character(3) NOT NULL,
					ctaori character varying(50) NOT NULL,
					fecha timestamp without time zone NOT NULL,
					monto numeric(19,4) NOT NULL,
					benef character varying(300) NOT NULL,
					rfc character varying(13) NOT NULL,
					banemisext character varying(150) NOT NULL,
					moneda character(3) NOT NULL,
					tipcamb numeric(19,5) NOT NULL
				); 
				CREATE LOCAL TEMPORARY TABLE _TMP_CONT_POLIZAS_DETALLE_CE_TRANSFERENCIAS ( 
					id_part smallint NOT NULL,
					ctaori character varying(50) NOT NULL,
					bancoori character(3) NOT NULL,
					monto numeric(19,4) NOT NULL,
					ctadest character varying(50) NOT NULL,
					bancodest character(3) NOT NULL,
					fecha timestamp without time zone NOT NULL,
					benef character varying(300) NOT NULL,
					rfc character varying(13) NOT NULL,
					bancooriext character varying(150) NOT NULL,
					bancodestext character varying(150) NOT NULL,
					moneda character(3) NOT NULL,
					tipcamb numeric(19,5) NOT NULL
				);
				CREATE LOCAL TEMPORARY TABLE _TMP_CONT_POLIZAS_DETALLE_CE_OTRMETODOPAGO (
					id_part smallint NOT NULL,
					metpagopol character(2) NOT NULL,
					fecha timestamp without time zone NOT NULL,
					benef character varying(300) NOT NULL,
					rfc character varying(13) NOT NULL,
					monto numeric(19,4) NOT NULL,
					moneda character(3) NOT NULL,
					tipcamb numeric(19,5) NOT NULL
				);
				CREATE LOCAL TEMPORARY TABLE _TMP_CONT_POLIZAS_DETALLE_CE_COMPROBANTES ( 
					id_part smallint NOT NULL, 
					uuid_cfdi character(36) NOT NULL, 
					monto numeric(19,4) NOT NULL, 
					rfc character varying(13) NOT NULL,
					id_tipo character varying(10) NOT NULL,
					moneda character(3) NOT NULL,
					tipcamb numeric(19,5) NOT NULL,
					cfd_cbb_serie character varying(10) NOT NULL,
					cfd_cbb_numfol integer NOT NULL,
					numfactext character varying(36) NOT NULL,
					taxid character varying(30) NOT NULL
				); 
				-- Fin de la tabla temporal

				-- si existen diferencias de centavos al convertir en moneda nacional los tipos de cambio, los registra
				_TotHaber := (select sum(Haber) from _TMP_CONT_POLIZAS_DETALLE_TMP);
				_TotDebe := (select sum(Debe) from _TMP_CONT_POLIZAS_DETALLE_TMP);
				IF _TotDebe > _TotHaber
				THEN
					_diff := _TotDebe - _TotHaber;
					_contPart := _contPart + 1;
					INSERT INTO _TMP_CONT_POLIZAS_DETALLE_TMP
					VALUES(_contPart, _CC_DCEC, 'Diferencia en decimales', _diff, 1, 1.0, 0.0, _diff);
				ELSIF _TotDebe < _TotHaber
				THEN
					_diff := _TotHaber - _TotDebe;
					_contPart := _contPart + 1;
					INSERT INTO _TMP_CONT_POLIZAS_DETALLE_TMP
					VALUES(_contPart, _CC_DCAF, 'Diferencia en decimales', _diff, 1, 1.0, _diff, 0.0);
				END IF;

				-- Inserta desde _TMP_CONT_POLIZAS_DETALLE_TMP y DEMAS
				INSERT INTO _TMP_CONT_POLIZAS_DETALLE
				SELECT * FROM  _TMP_CONT_POLIZAS_DETALLE_TMP;
				INSERT INTO _TMP_CONT_POLIZAS_DETALLE_CE_CHEQUES
				SELECT * FROM  _TMP_CONT_POLIZAS_DETALLE_CE_CHEQUES_TMP;
				INSERT INTO _TMP_CONT_POLIZAS_DETALLE_CE_TRANSFERENCIAS
				SELECT * FROM  _TMP_CONT_POLIZAS_DETALLE_CE_TRANSFERENCIAS_TMP;
				INSERT INTO _TMP_CONT_POLIZAS_DETALLE_CE_OTRMETODOPAGO
				SELECT * FROM  _TMP_CONT_POLIZAS_DETALLE_CE_OTRMETODOPAGO_TMP;
				INSERT INTO _TMP_CONT_POLIZAS_DETALLE_CE_COMPROBANTES
				SELECT * FROM  _TMP_CONT_POLIZAS_DETALLE_CE_COMPROBANTES_TMP;
	
				-- Agrega ahora la poliza principal
				SELECT * INTO _errpart, _resultpart, _numpol 
				FROM sp_cont_polizas_agregar('EG', _Fecha, _Concepto,'0', '', _TotalPesos, _id_clasificacion ) as ( err integer, res varchar, clave integer );
      				IF _errpart <> 0
				THEN
					_err := _errpart;
					_result := _resultpart;
				END IF;
				
				DROP TABLE _TMP_CONT_POLIZAS_DETALLE;
				DROP TABLE _TMP_CONT_POLIZAS_DETALLE_CE_CHEQUES; 
				DROP TABLE _TMP_CONT_POLIZAS_DETALLE_CE_TRANSFERENCIAS;
				DROP TABLE _TMP_CONT_POLIZAS_DETALLE_CE_OTRMETODOPAGO;
				DROP TABLE _TMP_CONT_POLIZAS_DETALLE_CE_COMPROBANTES;
			END IF;

			--Ahora ejecuta los movimientos de caja y bancos
			_clase := '';
			FOR _REC_TMP_PAGOS IN ( select * from _TMP_PAGOS order by Partida asc ) 
			LOOP
				_BanCaj := _REC_TMP_PAGOS.ID_FormaPago; -- 1 cajas 0 bancos
				--_tipoRetiro := (select case when _REC_TMP_PAGOS.ID_FormaPago = 1 Then 'CHQ' else 'RET' end);
				SELECT * INTO _errpart, _resultpart, _bancajmov 
				FROM  sp_bancos_movs_agregar( _BanCaj, _REC_TMP_PAGOS.ID_BanCaj, _Fecha, _Concepto, _Beneficiario, 0.00, _REC_TMP_PAGOS.Total, _REC_TMP_PAGOS.TipoMov, 
						'G', _Moneda, _TC, _Ref, _REC_TMP_PAGOS.RefPago, _id_clasificacion, _numpol, _REC_TMP_PAGOS.ID_SatBanco, _RFCBeneficiario, _REC_TMP_PAGOS.ID_SatMetodosPago, 
																		_REC_TMP_PAGOS.BancoExt, _REC_TMP_PAGOS.CuentaBanco, _REC_TMP_PAGOS.Cheque) as ( err integer, res varchar, clave integer);
				IF _errpart <> 0
				THEN
					_err := _errpart;
					_result := _resultpart;
					EXIT;
				END IF;

				INSERT INTO TBL_COMPRAS_FACTURAS_PAGOS
				VALUES(_ID_Factura, _bancajmov);
				
				IF _numPagos > 1
				THEN
					IF _BanCaj = 0
					THEN
						_clase := _clase || 'MBAN|' || cast(_bancajmov as varchar) || '|' || cast(_REC_TMP_PAGOS.ID_BanCaj as varchar) || '||;';
					ELSE
						_clase := _clase || 'MCAJ|' || cast(_bancajmov as varchar) || '|' || cast(_REC_TMP_PAGOS.ID_BanCaj as varchar) || '||;';
					END IF;
				ELSE
					IF _BanCaj = 0
					THEN
						_clase := 'MBAN|' || cast(_bancajmov as varchar) || '|' || cast(_REC_TMP_PAGOS.ID_BanCaj as varchar) || '||';
					ELSE
						_clase := 'MCAJ|' || cast(_bancajmov as varchar) || '|' || cast(_REC_TMP_PAGOS.ID_BanCaj as varchar) || '||';
					END IF;
				END IF;
			END LOOP;

			IF _Fija = '0' -- Aqui registra la referencia de las polizas de ingreso a sus movimientos de caja o bancos
			THEN
				IF _numPagos > 1
				THEN
					INSERT INTO TBL_REFERENCIAS_EXT
					VALUES(default,_clase)
					RETURNING currval(pg_get_serial_sequence(' TBL_REFERENCIAS_EXT', 'id_ref')) INTO _RefExt;
					UPDATE TBL_CONT_POLIZAS
					SET Ref = 'REXT|' || cast(_RefExt as varchar) || '|||'
					WHERE ID = _numpol;
		 		ELSE
					UPDATE TBL_CONT_POLIZAS
					SET Ref = _clase
					WHERE ID = _numpol;
				END IF;
			END IF; 
		ELSIF _Condicion = 3 -- Es de ningun pago
		THEN
			_clase = 'CFAC|' || cast(_ID_Factura as varchar) || '|' || cast(_ID_EntidadCompra as varchar) || '||';

			-- Procede a registrar la poliza si y solo si es una entidad dinamica
			-- Primero registra la deuda total del proveedor para la partida doble en tmp
			_contPart := _contPart + 1;
			INSERT INTO _TMP_CONT_POLIZAS_DETALLE_TMP
			VALUES(_contPart, _CC_COMPNP, 'Documento por pagar', _Total, _Moneda, _TC, 0.0, _TotalPesos);
					
			IF _Fija = '0'
			THEN
				-- Primero registra y crea la tabla temporal de detalle de la poliza
				CREATE LOCAL TEMPORARY TABLE _TMP_CONT_POLIZAS_DETALLE (
					Part smallint NOT NULL ,
					Cuenta char(19) NOT NULL ,
					Concepto varchar(80) NOT NULL ,
					Parcial numeric(19,4) NOT NULL ,
					Moneda smallint NOT NULL ,
					TC numeric(19,4) NOT NULL ,
					Debe numeric(19,4) NOT NULL ,
					Haber numeric(19,4) NOT NULL
				);
				CREATE LOCAL TEMPORARY TABLE _TMP_CONT_POLIZAS_DETALLE_CE_COMPROBANTES ( 
					id_part smallint NOT NULL, 
					uuid_cfdi character(36) NOT NULL, 
					monto numeric(19,4) NOT NULL, 
					rfc character varying(13) NOT NULL,
					id_tipo character varying(10) NOT NULL,
					moneda character(3) NOT NULL,
					tipcamb numeric(19,5) NOT NULL,
					cfd_cbb_serie character varying(10) NOT NULL,
					cfd_cbb_numfol integer NOT NULL,
					numfactext character varying(36) NOT NULL,
					taxid character varying(30) NOT NULL
 				); 
				-- Fin de la tabla temporal
					-- si existen diferencias de centavos al convertir en moneda nacional los tipos de cambio, los registra
				_TotHaber := (select sum(Haber) from _TMP_CONT_POLIZAS_DETALLE_TMP);
				_TotDebe := (select sum(Debe) from _TMP_CONT_POLIZAS_DETALLE_TMP);
				IF _TotDebe > _TotHaber
				THEN
					_diff := _TotDebe - _TotHaber;
					_contPart := _contPart + 1;
					INSERT INTO _TMP_CONT_POLIZAS_DETALLE_TMP
					VALUES(_contPart, _CC_DCEC, 'Diferencia en decimales', _diff, 1, 1.0, 0.0, _diff);
				ELSIF _TotDebe < _TotHaber
				THEN
					_diff := _TotHaber - _TotDebe;
					_contPart := _contPart + 1;
					INSERT INTO _TMP_CONT_POLIZAS_DETALLE_TMP
					VALUES(_contPart, _CC_DCAF, 'Diferencia en decimales', _diff, 1, 1.0, _diff, 0.0);
				END IF;
				
				-- Inserta desde _TMP_CONT_POLIZAS_DETALLE_TMP
				INSERT INTO _TMP_CONT_POLIZAS_DETALLE
				SELECT * FROM  _TMP_CONT_POLIZAS_DETALLE_TMP;
				INSERT INTO _TMP_CONT_POLIZAS_DETALLE_CE_COMPROBANTES
				SELECT * FROM  _TMP_CONT_POLIZAS_DETALLE_CE_COMPROBANTES_TMP;

				-- Agrega ahora la poliza principal
				--EXEC dbo.sp_cont_polizas_agregar_ext 'DR', @Fecha, @concepto, 0, @clase, @errpart OUTPUT, @numpol OUTPUT
				SELECT * INTO _errpart, _resultpart, _numpol 
				FROM sp_cont_polizas_agregar('DR', _Fecha, _Concepto,'0', _clase, _Cantidad, _id_clasificacion ) as ( err integer, res varchar, clave integer );
 				IF _errpart <> 0
				THEN
					_err := _errpart;
					_result := _resultpart;
				ELSE
					UPDATE TBL_COMPRAS_FACTURAS_CAB
					SET ID_Pol = _numpol
					WHERE ID_VC = _ID_Factura;
				END IF;

				DROP TABLE _TMP_CONT_POLIZAS_DETALLE;
				DROP TABLE _TMP_CONT_POLIZAS_DETALLE_CE_COMPROBANTES;
			END IF;
		END IF;
		
		DROP TABLE _TMP_CONT_POLIZAS_DETALLE_TMP;
		DROP TABLE _TMP_CONT_POLIZAS_DETALLE_CE_CHEQUES_TMP; 
		DROP TABLE _TMP_CONT_POLIZAS_DETALLE_CE_TRANSFERENCIAS_TMP;
		DROP TABLE _TMP_CONT_POLIZAS_DETALLE_CE_OTRMETODOPAGO_TMP;
		DROP TABLE _TMP_CONT_POLIZAS_DETALLE_CE_COMPROBANTES_TMP;

		--Procede a agregar el movimiento al almac√©n
		IF _err = 0 AND _FijaCost = '0' AND _RecepcionAsociada = '0' and (select count(*) from _TMP_COMPRAS_FACTURAS_DET where Tipo = 'P') > 0
		THEN
			CREATE LOCAL TEMPORARY TABLE _TMP_INVSERV_ALMACEN_MOVIM_DET (
				ID_Bodega smallint NOT NULL ,
				ID_Prod varchar(20) NOT NULL ,
				Partida smallint NOT NULL ,
				Cantidad numeric(9, 3) NOT NULL ,
				Costo numeric(19,4) NULL 
			); 

			insert into _TMP_INVSERV_ALMACEN_MOVIM_DET
			select _ID_Bodega, ID_Prod, Partida, Cantidad, round(Precio * _TC,4)  --Precio es el costo de la compra
			from _TMP_COMPRAS_FACTURAS_DET
			where Tipo = 'P'
			order by Partida ASC;
		
			SELECT * INTO _errpart, _resultpart, _ID_Movimiento 
			FROM sp_invserv_alm_movs_agregar(_Fecha, _ID_Bodega, (case when _AuditarAlm = '1' then 'G' else 'U' end), '1', _ConceptoCost, '',/*1 ENT 2 SAL*/ '1', _Ref, 'CFAC', _ID_Factura) as ( err integer, res varchar, clave integer );
			IF _errpart <> 0
			THEN
				_err := _errpart;
				_result := _resultpart;
			ELSE
				UPDATE TBL_COMPRAS_FACTURAS_CAB
				SET ID_PolCost = _ID_Movimiento
				WHERE ID_VC = _ID_Factura;
			END IF;
	
			DROP TABLE _TMP_INVSERV_ALMACEN_MOVIM_DET; 
		END IF;
		-- Fin del movimiento al almacen

		--Procede a agregar la informaci√≥n para comercio exterior en caso de ser importaci√≥n
		IF _err = 0 AND _Moneda <> 1 AND _Pais <> 'MEX' and _Pedimento <> '--'
		THEN
      INSERT INTO TBL_COMPRAS_FACTURAS_COMEXT_CAB(id_vc,tipooperacion,clavedepedimento,certificadoorigen,numcertificadoorigen,numeroexportadorconfiable,
        incoterm,subdivision,observaciones,tipocambiousd,totalusd,emisor_curp,receptor_curp,receptor_numregidtrib,destinatario_numregidtrib,destinatario_rfc,
        destinatario_curp,destinatario_nombre,destinatario_domicilio_calle,destinatario_domicilio_numeroexterior,destinatario_domicilio_numerointerior,
        destinatario_domicilio_colonia,destinatario_domicilio_localidad,destinatario_domicilio_referencia,destinatario_domicilio_municipio,
        destinatario_domicilio_estado,destinatario_domicilio_pais,destinatario_domicilio_codigopostal)
      SELECT _ID_Factura, '-', _Pedimento, -1, '', '', 
        '', -1, _Obs, _TC, _Importe, '', '', registro_tributario, registro_tributario, '', 
        '', nombre, direccion, noext, noint, 
        colonia, poblacion, '', municipio,
        estado, pais, cp
      FROM TBL_PROVEE_PROVEE
      WHERE ID_Tipo = 'PR' and ID_Clave = _ID_Proveedor;
      
      -- inserta el detalle
      INSERT INTO TBL_COMPRAS_FACTURAS_COMEXT_DET(id_vc,partida,noidentificacion,fraccionarancelaria,cantidadaduana,unidadaduana,valorunitarioaduana,valordolares) 
      SELECT _ID_Factura, det.Partida, det.ID_Prod, '', det.Cantidad, (select coalesce(id_satunidad,99) from tbl_invserv_unidades where id_unidad = i.id_unidadsalida), round(det.Precio - det.Descuento,2), round(det.Importe - det.ImporteDesc,2)
      FROM _TMP_COMPRAS_FACTURAS_DET det INNER JOIN TBL_INVSERV_INVENTARIOS i 
        ON det.ID_Prod = i.ID_Prod
      WHERE det.Tipo = 'P';
      
      -- inserta el detalle
      INSERT INTO TBL_COMPRAS_FACTURAS_COMEXT_DET_DESCESP(id_vc,partida,descripcion,marca,modelo,submodelo,numeroserie)
      SELECT _ID_Factura, Partida, 1, '', '', '', ''
      FROM _TMP_COMPRAS_FACTURAS_DET
      WHERE Tipo = 'P';
		END IF;
		--Fin de comercio exterior
	END IF; 
	
	RETURN QUERY SELECT _err, _result, _id_factura;
END
$BODY$
  LANGUAGE plpgsql;
--ALTER FUNCTION sp_compras_facturas_agregar(smallint, integer, integer, timestamp without time zone, character varying, smallint, numeric, 

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_compras_facturas_comext(
    _id_vc integer,
    _tipooperacion character,
    _certificadoorigen smallint,
    _numcertificadoorigen character varying,
    _numeroexportadorconfiable character varying,
    _incoterm character varying,
    _subdivision smallint,
    _observaciones character varying,
    _tipocambiousd numeric,
    _totalusd numeric,
    _emisor_curp character varying,
    _receptor_curp character varying,
    _receptor_numregidtrib character varying,
    _destinatario_numregidtrib character varying,
    _destinatario_rfc character varying,
    _destinatario_curp character varying,
    _destinatario_nombre character varying,
    _destinatario_domicilio_calle character varying,
    _destinatario_domicilio_numeroexterior character varying,
    _destinatario_domicilio_numerointerior character varying,
    _destinatario_domicilio_colonia character varying,
    _destinatario_domicilio_localidad character varying,
    _destinatario_domicilio_referencia character varying,
    _destinatario_domicilio_municipio character varying,
    _destinatario_domicilio_estado character varying,
    _destinatario_domicilio_pais character,
    _destinatario_domicilio_codigopostal character varying)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255); _Fecha timestamp; _Mes smallint; _Ano smallint;
BEGIN
	_err := 0;
	_result := 'El complemento de importaci√≥n para esta factura se actualiz√≥ con √©xito';

  _Fecha := (select Fecha from tbl_compras_facturas_cab where id_vc = _id_vc);
  _Mes := date_part('month',_Fecha);
	_Ano := date_part('year',_Fecha);
	
	IF(select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano and Cerrado = 1) > 0
	OR (select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano) < 1
	THEN
		_err := 3;
		_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_POLIZAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'ERROR: La fecha de poliza pertenece a un periodo cerrado o inexistente'
	END IF;

  IF _err = 0
	THEN
    delete from tbl_compras_facturas_comext_det_descesp
    where id_vc = _id_vc;

    delete from tbl_compras_facturas_comext_det
    where id_vc = _id_vc;

    update tbl_compras_facturas_comext_cab
    set tipooperacion = _tipooperacion,
        certificadoorigen = _certificadoorigen,
        numcertificadoorigen = _numcertificadoorigen,
        numeroexportadorconfiable = _numeroexportadorconfiable,
        incoterm = _incoterm,
        subdivision = _subdivision,
        observaciones = _observaciones,
        tipocambiousd = _tipocambiousd,
        totalusd = _totalusd,
        emisor_curp = _emisor_curp,
        receptor_curp = _receptor_curp,
        receptor_numregidtrib = _receptor_numregidtrib,
        destinatario_numregidtrib = _destinatario_numregidtrib,
        destinatario_rfc = _destinatario_rfc,
        destinatario_curp = _destinatario_curp,
        destinatario_nombre = _destinatario_nombre,
        destinatario_domicilio_calle = _destinatario_domicilio_calle,
        destinatario_domicilio_numeroexterior = _destinatario_domicilio_numeroexterior,
        destinatario_domicilio_numerointerior = _destinatario_domicilio_numerointerior,
        destinatario_domicilio_colonia = _destinatario_domicilio_colonia,
        destinatario_domicilio_localidad = _destinatario_domicilio_localidad,
        destinatario_domicilio_referencia = _destinatario_domicilio_referencia,
        destinatario_domicilio_municipio = _destinatario_domicilio_municipio,
        destinatario_domicilio_estado = _destinatario_domicilio_estado,
        destinatario_domicilio_pais = _destinatario_domicilio_pais,
        destinatario_domicilio_codigopostal = _destinatario_domicilio_codigopostal
    where id_vc = _id_vc;

    insert into tbl_compras_facturas_comext_det(id_vc,partida,noidentificacion,fraccionarancelaria,cantidadaduana,unidadaduana,valorunitarioaduana,valordolares) 
    select _id_vc, partida, noidentificacion, fraccionarancelaria, cantidadaduana, unidadaduana, valorunitarioaduana, valordolares
    from _tmp_compras_facturas_comext_det;

    insert into tbl_compras_facturas_comext_det_descesp(id_vc,partida,descripcion,marca,modelo,submodelo,numeroserie)
    select _id_vc, partida, descripcion, marca, modelo, submodelo, numeroserie
    from _tmp_compras_facturas_comext_det_descesp;

  END IF;
  
  RETURN QUERY SELECT _err, _result, _id_vc;
  
END
$BODY$
  LANGUAGE plpgsql;
--ALTER FUNCTION sp_compras_facturas_comext(integer, character, smallint, character varying, character varying, character varying, smallint,

					     
--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_compras_gastos_agregar(
    _id_entidadcompra smallint,
    _numero integer,
    _id_proveedor integer,
    _fecha timestamp without time zone,
    _referencia character varying,
    _moneda smallint,
    _tc numeric,
    _condicion smallint,
    _obs character varying,
    _importe numeric,
    _descuento numeric,
    _subtotal numeric,
    _iva numeric,
    _total numeric,
    _fsipg_efectivo numeric,
    _fsipg_bancos numeric,
    _fsipg_cambio numeric,
    _id_bodega smallint,
    _id_enlace integer,
    _id_vendedor smallint,
    _tipoenlace character,
    _uuid character varying,
    _ieps numeric,
    _ivaret numeric,
    _isrret numeric)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255); _ID_Gasto int; _mes smallint; _ano smallint;	_errpart int;  _resultpart varchar(255);  _ID_Movimiento int;  _concepto varchar(80); _descripcion varchar(80); _Ref varchar(25); 
	_FijaCost bit; _ID_CXP int; _numpol int; _clase varchar(1024); _bancajmov int;
	_nombrePro varchar(120); _Cantidad numeric(19,4); _ServComp bit; _CC_PRO char(19); _CC_GND char(19); _GASNoDed numeric(19,4);  _GASDed numeric(19,4); _GASNoDedParcial numeric(19,4); _GASDedParcial numeric(19,4); _TOTALNoDed numeric(19,4);  
	_CC_IVA char(19); _CC_IVAPN char(19); _CC_IEPS char(19); _CC_IEPSPN char(19); _CC_IVARet char(19); _CC_ISRRet char(19); _ImporteTotalPesos numeric(19,4); 
	_IVAPesos numeric(19,4); _IEPSPesos numeric(19,4); _IVARetPesos numeric(19,4); _ISRRetPesos numeric(19,4); _DescPesos numeric(19,4); _TotalPesos numeric(19,4);  _IVANoDed numeric(19,6); _IVA_Deducible numeric(19,6);
	_Fija bit; _FijaBAN bit; _CC_Desc char(19); _CC_COMPNP char(19); _CC_DCAF char(19);
	_CC_DCEC char(19); _diff numeric(19,4); _TotDebe numeric(19,4); _TotHaber numeric(19,4); _contPart smallint; 
	_totPart smallint; _Beneficiario varchar(80);
	_contban smallint; _totalban smallint; _ID_FormaPago smallint; _ID_BanCaj smallint; _RefPago varchar(25); _banCHQ varchar(20); _IdMon smallint; 
	_id_clasificacion varchar(10); _numPagos smallint; _RefExt int; _ID_CFD int; _TFD smallint; 
	_RFC varchar(15); _RFCBeneficiario varchar(15); _moneda_ce character(3);  /*_CuentaBeneficiario varchar(80); _BancoBeneficiario character(3); _CuentaOrigen varchar(50); _BancoOrigen character(3);*/ _ContUUIDs smallint; _NumUUIDs smallint; _uuidx character(36);
	--Iteracion
	_REC_TMP_PAGOS RECORD; _REC_TMP_COMPRAS_GASTOS_DET RECORD; _REC_TMP_INVSERV_GASTOS_PORCENTAJES RECORD; _TotalPesosMult numeric(19,4); _ParcialPesosMult numeric(19,4); _BanCaj smallint; _CC_BAN char(19);
BEGIN	
	_err := 0;
	_result := 'El gasto se ha registrado satisfactoriamente';
	--_ServComp := '1';
	_CC_IVA := (select valfanumerico from TBL_VARIABLES where ID_Variable = 'CC_IVAAC');
	_CC_IVAPN := (select valfanumerico from TBL_VARIABLES where ID_Variable = 'CC_IVAACPN');
	_CC_IEPS := (select valfanumerico from TBL_VARIABLES where ID_Variable = 'CC_IEPSC');
	_CC_IEPSPN := (select valfanumerico from TBL_VARIABLES where ID_Variable = 'CC_IEPSCPN');
	_CC_IVARet := (select valfanumerico from TBL_VARIABLES where ID_Variable = 'CC_IVARETC');
	_CC_ISRRet := (select valfanumerico from TBL_VARIABLES where ID_Variable = 'CC_ISRRETC');
	_CC_Desc := (select valfanumerico from TBL_VARIABLES where ID_Variable = 'CC_DSC');
	_CC_GND = (select valfanumerico from TBL_VARIABLES where ID_Variable = 'CC_GND');
	_moneda_ce := (select id_satmoneda from TBL_CONT_MONEDAS where Clave = _moneda);
	_Cantidad := round((_Total * _TC), 2);
	_ImporteTotalPesos := ROUND((_Importe * _TC), 2);
	_IVAPesos :=  ROUND((_IVA * _TC), 2);
	_IEPSPesos :=  ROUND((_IEPS * _TC), 2);
	_IVARetPesos :=  ROUND((_IVARet * _TC), 2);
	_ISRRetPesos :=  ROUND((_ISRRet * _TC), 2);
	_DescPesos := ROUND((_Descuento * _TC), 2);
	_TotalPesos := ROUND((_Total * _TC), 2);	
	_IVANoDed := 0.0;
	_TOTALNoDed := 0.0;
	_concepto := 'Gasto ' || (select Descripcion from TBL_COMPRAS_ENTIDADES where ID_EntidadCompra = _ID_EntidadCompra) || ', numero ' || cast(_Numero as varchar) || 
				(case when _Referencia <> '' then ' y referencia ' || _Referencia || '.' else '.' end);
	_Beneficiario := case when _ID_Proveedor = 0 then 'Al Portador' else ( select Nombre from TBL_PROVEE_PROVEE where ID_Tipo = 'PR' and ID_Clave = _ID_Proveedor) end;
	_RFCBeneficiario := case when _ID_Proveedor = 0 then 'XAXX010101000' else ( select RFC from TBL_PROVEE_PROVEE where ID_Tipo = 'PR' and ID_Clave = _ID_Proveedor) end;
	_RFC := case when _ID_Proveedor = 0 then 'XAXX010101000' else ( select RFC from TBL_PROVEE_PROVEE where ID_Tipo = 'PR' and ID_Clave = _ID_Proveedor) end;
	--_CuentaBeneficiario := case when _ID_Proveedor = 0 then '' else ( select MetodoDePago from TBL_PROVEE_PROVEE where ID_Tipo = 'PR' and ID_Clave = _ID_Proveedor) end;
	--_BancoBeneficiario := case when _ID_Proveedor = 0 then '000' else ( select ID_SatBanco from TBL_PROVEE_PROVEE where ID_Tipo = 'PR' and ID_Clave = _ID_Proveedor) end;
	_CC_PRO := (select ID_CC from TBL_PROVEE_PROVEE where ID_Tipo = 'PR' and ID_Clave = _ID_Proveedor);
	_Fija := (select Fija from TBL_COMPRAS_ENTIDADES where ID_EntidadCompra = _ID_EntidadCompra);
	_FijaCost := (select FijaCost from TBL_COMPRAS_ENTIDADES where ID_EntidadCompra = _ID_EntidadCompra);
	--_FijaBAN := case when _ID_FormaPago = 0 then (select Fijo from TBL_BANCOS_CUENTAS where Tipo = 1 and Clave = _ID_BanCaj)
		--				else (select Fijo from TBL_BANCOS_CUENTAS where Tipo = 0 and Clave = _ID_BanCaj) end
	_mes := date_part('month',_Fecha);
	_ano := date_part('year',_Fecha);
	_CC_DCAF := (select valfanumerico from TBL_VARIABLES where ID_Variable = 'CC_DCAF');
	_CC_DCEC := (select valfanumerico from TBL_VARIABLES where ID_Variable = 'CC_DCEC');
	_id_clasificacion := (select ID_Clasificacion from TBL_COMPRAS_ENTIDADES where ID_EntidadCompra = _ID_EntidadCompra);
	_numPagos = (select count(*) from _TMP_PAGOS);

	IF(select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano and Cerrado = 1) > 0
	OR (select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano) < 1
	THEN
		_err := 3;
		_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_POLIZAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'ERROR: La fecha de poliza pertenece a un periodo cerrado o inexistente'
	END IF;

	IF _CC_DCAF = '' or _CC_DCEC = ''
	THEN
		_err := 3;
		_result := (select msj2 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'COMP_CXP' and 
			m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'ERROR: Las cuentas de diferencias cambiarias no se han registrado aun';
	END IF;

	IF (select count(*) from TBL_COMPRAS_GASTOS_CAB where ID_Entidad = _ID_EntidadCompra and Numero = _Numero) > 0
	THEN
		_err := 3;
		_result := 'ERROR: La clave del gasto ya existe, No se puede duplicar';
	END IF;

	IF _Condicion = 0 
	THEN
		FOR _REC_TMP_PAGOS IN ( select * from _TMP_PAGOS order by Partida asc ) 
		LOOP
			_ID_FormaPago := _REC_TMP_PAGOS.ID_FormaPago;
			_ID_BanCaj := _REC_TMP_PAGOS.ID_BanCaj;
			_FijaBAN := (case when _ID_FormaPago = 1 then (select Fijo from TBL_BANCOS_CUENTAS where Tipo = 1 and Clave = _ID_BanCaj)
							else (select Fijo from TBL_BANCOS_CUENTAS where Tipo = 0 and Clave = _ID_BanCaj) end);
			_IdMon := (case when _ID_FormaPago = 1 then (select ID_Moneda from TBL_BANCOS_CUENTAS where Tipo = 1 and Clave = _ID_BanCaj)
							else (select ID_Moneda from TBL_BANCOS_CUENTAS where Tipo = 0 and Clave = _ID_BanCaj) end);
			IF _Fija <> _FijaBAN
			THEN
				_err := 3;
				_result := 'ERROR: No se puede agregar el gasto porque al pagarse de contado requiere que los bancos o cajas manejen los mismos trazos contables que la compra';
				EXIT;
			END IF;

			IF _Moneda <> _IdMon 
			THEN
				_err := 3;
				_result := 'ERROR: No se puede agregar la compra porque al pagarse de contado requiere que los bancos o cajas manejen la misma moneda que la compra';
				EXIT;
			END IF;
			/*	
			IF _ID_Proveedor = 0 and _Fija = '0' and _ID_FormaPago > 1
			THEN
				_err := 3;
				_result := 'ERROR: No se puede agregar un gasto directo de mostrador pagado de contado con transferencia, porque no existe soporte para contabilidad electr√≥nica, selecciona un proveedor o una forma de pago distinta';
				EXIT;
			END IF;
			*/
		END LOOP;
	ELSIF _Condicion = 1 -- Es a cr√©dito, por lo tanto revisa si el total de esta factura mas el total de la deuda con el proveedor rebasa el l√≠mite de cr√©dito, de ser asi, rechazar√° la compra
	THEN
		IF(select Dias from TBL_PROVEE_PROVEE where ID_Tipo = 'PR' and ID_Clave = _ID_Proveedor) > 0 -- tenemos credito con este proveedor
		THEN
			IF (select LimiteCredito from TBL_PROVEE_PROVEE where ID_Tipo = 'PR' and ID_Clave = _ID_Proveedor) > 0 AND 
				((_ImporteTotalPesos + getcliprosldtotmn('PR', _ID_Proveedor)) > (select LimiteCredito from TBL_PROVEE_PROVEE where ID_Tipo = 'PR' and ID_Clave = _ID_Proveedor))
			THEN
				_err := 3;
				_result := 'ERROR: No se puede agregar la compra a cr√©dito porque la suma de nuestras deudas con este proveedor, m√°s esta compra, sobrepasa nuestro l√≠mite de cr√©dito';
			END IF;
		ELSE -- no tenemos cr√©dito
			_err := 3;
			_result := 'ERROR: No se puede agregar la compra porque al pagarse a cr√©dito requiere que el proveedor nos brinde por lo menos un d√≠a de cr√©dito';
		END IF;
	END IF;
	
	IF _IVA > 0.0 AND ( _CC_IVA = '' OR _CC_IVAPN = '' )
	THEN
		_err := 3;
		_result := 'ERROR: La cuenta de iva por pagar no existe o no se ha enlazado';
	END IF;
	IF _IEPS > 0.0 AND ( _CC_IEPS = '' OR _CC_IEPSPN = '' )
	THEN
		_err := 3;
		_result := 'ERROR: La cuenta del IEPS efectivamente pagado o la de IEPS pendiente de pagar no existe o no se ha enlazado';
	END IF;
	IF _IVARet > 0.0 AND ( _CC_IVARet = '' )
	THEN
		_err := 3;
		_result := 'ERROR: La cuenta de IVA Retenido no existe o no se ha enlazado';
	END IF;
	IF _ISRRet > 0.0 AND ( _CC_ISRRet = '' )
	THEN
		_err := 3;
		_result := 'ERROR: La cuenta de ISR Retenido no existe o no se ha enlazado';
	END IF;
	IF _Descuento > 0.0 AND _CC_Desc = ''
	THEN
		_err := 3;
		_result := 'ERROR: La cuenta de descuento sobre compras no existe o no se ha enlazado';
	END IF;

	IF _Condicion = 3
	THEN
		_CC_COMPNP := (select valfanumerico from TBL_VARIABLES where ID_Variable = 'CC_COMPNP');
		IF _CC_COMPNP = ''
		THEN
			_err := 3;
			_result := 'ERROR: La cuenta para registro de partida doble cuando no se establece ningun metodo de pago, no existe o no se ha enlazado';
		END IF;
	END IF;
	
	IF _CC_GND = ''
	THEN
		_err := 3;
		_result := 'ERROR: La cuenta de gastos no deducibles no existe o no se ha enlazado';
	END IF;

	--VERIFICA SI ES CFDI Asociada
	IF _uuid <> ''
	THEN
		_NumUUIDs := (char_length(_uuid) / 36);
		_TFD = 3;
		_ContUUIDs := 0;
		WHILE _ContUUIDs < _NumUUIDs
		LOOP
			_uuidx := substring(_uuid, ((_ContUUIDs * 36) + 1), 36);
			IF (select count(*) from TBL_CFDCOMP where UUID = _uuidx) = 0
			THEN
				_err := 3;
				_result := 'ERROR: No se puede enlazar el CFDI al registro, porque no existe el UUID proporcionado ' + _uuidx;
				EXIT;
			ELSE
				IF _NumUUIDs = 1 -- Si solo es un UUID asociado a este gasto, lo asocia al gasto directo
				THEN
					_ID_CFD := (select ID_CFD from TBL_CFDCOMP where UUID = _uuidx); 
				END IF;
			END IF;
			_ContUUIDs := _ContUUIDs + 1;
		END LOOP;
	END IF;
	
	IF _err = 0
	THEN
		INSERT INTO TBL_COMPRAS_GASTOS_CAB(  id_entidad, numero, id_clipro, fecha, referencia, status, moneda, tc, fechaenvio, condicion, obs, 
			importe, descuento, subtotal, iva, total, ref, id_pol, id_polcost, id_bodega, mimporte, mdescuento, msubtotal, miva, mtotal, efectivo, bancos, cambio, id_vendedor, id_cfd, tfd, 
			ieps, ivaret, isrret )
		VALUES(_ID_EntidadCompra, _Numero, _ID_Proveedor, _Fecha, _Referencia, 'G', _Moneda, _TC, _Fecha, _Condicion, _Obs,
				_Importe, _Descuento, _SubTotal, _IVA, _Total, null, null, null, _ID_Bodega, _Importe, _Descuento, _SubTotal, _IVA,  _Total, _FSIPG_Efectivo, _FSIPG_Bancos, _FSIPG_Cambio, _ID_Vendedor, _ID_CFD, _TFD,
				_ieps, _ivaret, _isrret)
		 RETURNING currval(pg_get_serial_sequence('TBL_COMPRAS_GASTOS_CAB', 'id_vc')) INTO _id_gasto;
		 
		-- actualiza el numero de GASTO
		UPDATE TBL_COMPRAS_ENTIDADES
		SET Doc = _Numero + 1
		WHERE ID_EntidadCompra = _ID_EntidadCompra;
		
		-- inserta el detalle
		INSERT INTO TBL_COMPRAS_GASTOS_DET
		SELECT _ID_Gasto, Partida, Cantidad, ID_Prod, Precio, Descuento, IVA, Obs, Importe, ImporteDesc, ImporteIVA, TotalPart, IEPS, ImporteIEPS, IVARet, ImporteIVARet, ISRRet, ImporteISRRet
		FROM _TMP_COMPRAS_FACTURAS_DET;

		_Ref := 'CGAS|' || cast(_ID_Gasto as varchar) || '|' || cast(_ID_EntidadCompra as varchar) || '||';

		IF _uuid <> ''
		THEN
			_NumUUIDs := (char_length(_uuid) / 36);
			_ContUUIDs := 0;
			WHILE _ContUUIDs < _NumUUIDs
			LOOP
				_uuidx := substring(_uuid, ((_ContUUIDs * 36) + 1), 36);
				UPDATE TBL_CFDCOMP
				SET FSI_Tipo = 'GAS', FSI_ID = _ID_Gasto
				WHERE UUID = _uuidx;
				IF _NumUUIDs > 1 --Ingresa en la tabla auxiliar de enlaces multiples del gasto hacia los CFDIs
				THEN
					insert into TBL_COMPRAS_GASTOS_CFD
					select _ID_Gasto, ID_CFD from TBL_CFDCOMP where UUID = _uuidx;
				END IF;
				_ContUUIDs := _ContUUIDs + 1;
			END LOOP;
			
			FOR _REC_TMP_COMPRAS_GASTOS_DET IN ( select * from _TMP_COMPRAS_FACTURAS_DET order by Partida asc ) 
			LOOP
				-- Procede a agregar el enlace del producto del proveedor al id_prod en forseti
				if(select count(*) from TBL_INVSERV_PROVEE_CODIGOS where ID_RFC = _RFC and ID_Descripcion =  _REC_TMP_COMPRAS_GASTOS_DET.Obs and ID_Prod = _REC_TMP_COMPRAS_GASTOS_DET.ID_Prod and ID_Moneda = _Moneda) = 0
				then
					insert into TBL_INVSERV_PROVEE_CODIGOS
					values(_RFC, _REC_TMP_COMPRAS_GASTOS_DET.Obs,  _REC_TMP_COMPRAS_GASTOS_DET.ID_Prod, _Moneda, _REC_TMP_COMPRAS_GASTOS_DET.Precio, _Fecha);
				else
					update TBL_INVSERV_PROVEE_CODIGOS
					set Precio =  _REC_TMP_COMPRAS_GASTOS_DET.Precio, Fecha = _Fecha
					where ID_RFC = _RFC and ID_Descripcion = _REC_TMP_COMPRAS_GASTOS_DET.Obs and ID_Prod =   _REC_TMP_COMPRAS_GASTOS_DET.ID_Prod and ID_Moneda = _Moneda;
				end if;
			END LOOP; 

		END IF;

		--Si no es de mostrador, actualiza los ultimos precios de proveedores
		IF _ID_Proveedor > 0
		THEN
			FOR _REC_TMP_COMPRAS_GASTOS_DET IN ( select * from _TMP_COMPRAS_FACTURAS_DET order by Partida asc ) 
			LOOP
				-- Procede a agregar el ultimo costo del producto o servicio correspondiente al Proveedor ( si existe lo actualiza de lo contrario lo inserta )
				if(select count(*) from TBL_COMPRAS_VS_INVENTARIO where ID_Tipo = 'PR' and ID_Proveedor = _ID_Proveedor and ID_Prod = _REC_TMP_COMPRAS_GASTOS_DET.ID_Prod and ID_Moneda = _Moneda) = 0
				then
					insert into TBL_COMPRAS_VS_INVENTARIO
					values('PR', _ID_Proveedor,  _REC_TMP_COMPRAS_GASTOS_DET.ID_Prod, _Moneda, _Fecha,  _REC_TMP_COMPRAS_GASTOS_DET.Precio,  _REC_TMP_COMPRAS_GASTOS_DET.Descuento);
				else
					update TBL_COMPRAS_VS_INVENTARIO
					set Fecha = _Fecha, Precio =  _REC_TMP_COMPRAS_GASTOS_DET.Precio, Descuento =  _REC_TMP_COMPRAS_GASTOS_DET.Descuento
					where ID_Tipo = 'PR' and ID_Proveedor = _ID_Proveedor and ID_Prod =   _REC_TMP_COMPRAS_GASTOS_DET.ID_Prod and ID_Moneda = _Moneda;
				end if;
			END LOOP; 
		END IF; 

		--Crea tabla temporal indispensable... para contable.
		CREATE LOCAL TEMPORARY TABLE _TMP_CONT_POLIZAS_DETALLE_TMP (
			Part smallint NOT NULL ,
			Cuenta char(19) NOT NULL ,
			Concepto varchar(80) NOT NULL ,
			Parcial numeric(19,4) NOT NULL ,
			Moneda smallint NOT NULL ,
			TC numeric(19,4) NOT NULL ,
			Debe numeric(19,4) NOT NULL ,
			Haber numeric(19,4) NOT NULL
		);
		CREATE LOCAL TEMPORARY TABLE _TMP_CONT_POLIZAS_DETALLE_CE_CHEQUES_TMP( 
			id_part smallint NOT NULL,
			num character varying(20) NOT NULL,
			banco character(3) NOT NULL,
			ctaori character varying(50) NOT NULL,
			fecha timestamp without time zone NOT NULL,
			monto numeric(19,4) NOT NULL,
			benef character varying(300) NOT NULL,
			rfc character varying(13) NOT NULL,
			banemisext character varying(150) NOT NULL,
			moneda character(3) NOT NULL,
			tipcamb numeric(19,5) NOT NULL
		); 
		CREATE LOCAL TEMPORARY TABLE _TMP_CONT_POLIZAS_DETALLE_CE_TRANSFERENCIAS_TMP ( 
			id_part smallint NOT NULL,
			ctaori character varying(50) NOT NULL,
			bancoori character(3) NOT NULL,
			monto numeric(19,4) NOT NULL,
			ctadest character varying(50) NOT NULL,
			bancodest character(3) NOT NULL,
			fecha timestamp without time zone NOT NULL,
			benef character varying(300) NOT NULL,
			rfc character varying(13) NOT NULL,
			bancooriext character varying(150) NOT NULL,
			bancodestext character varying(150) NOT NULL,
			moneda character(3) NOT NULL,
			tipcamb numeric(19,5) NOT NULL
		);
		CREATE LOCAL TEMPORARY TABLE _TMP_CONT_POLIZAS_DETALLE_CE_OTRMETODOPAGO_TMP (
			id_part smallint NOT NULL,
			metpagopol character(2) NOT NULL,
			fecha timestamp without time zone NOT NULL,
			benef character varying(300) NOT NULL,
			rfc character varying(13) NOT NULL,
			monto numeric(19,4) NOT NULL,
			moneda character(3) NOT NULL,
			tipcamb numeric(19,5) NOT NULL
		);
		CREATE LOCAL TEMPORARY TABLE _TMP_CONT_POLIZAS_DETALLE_CE_COMPROBANTES_TMP ( 
			id_part smallint NOT NULL, 
			uuid_cfdi character(36) NOT NULL, 
			monto numeric(19,4) NOT NULL, 
			rfc character varying(13) NOT NULL,
			id_tipo character varying(10) NOT NULL,
			moneda character(3) NOT NULL,
			tipcamb numeric(19,5) NOT NULL,
			cfd_cbb_serie character varying(10) NOT NULL,
			cfd_cbb_numfol integer NOT NULL,
			numfactext character varying(36) NOT NULL,
			taxid character varying(30) NOT NULL
		); 
		--fin polizas temporales para contable	
		
		_contPart := 1;
		FOR _REC_TMP_COMPRAS_GASTOS_DET IN ( select * from _TMP_COMPRAS_FACTURAS_DET order by Partida asc ) 
		LOOP
			--Agrega los √∫ltimos costos al cat√°logo de gastos
			UPDATE TBL_INVSERV_INVENTARIOS
			SET UltimoCosto = round(_REC_TMP_COMPRAS_GASTOS_DET.Precio / _TC,4)
			WHERE ID_Prod = _REC_TMP_COMPRAS_GASTOS_DET.ID_Prod;
			
			-- Procede a agregar las partidas del gasto a la p√≥liza
			_iva_deducible := (select IVA_Deducible from TBL_INVSERV_INVENTARIOS where ID_Prod = _REC_TMP_COMPRAS_GASTOS_DET.ID_Prod);
			_descripcion := (select descripcion from TBL_INVSERV_INVENTARIOS where ID_Prod = _REC_TMP_COMPRAS_GASTOS_DET.ID_Prod);
			
			IF _iva_deducible < 100.0
			THEN
				_IVANoDed := _IVANoDed + ( _REC_TMP_COMPRAS_GASTOS_DET.ImporteIVA - (( _REC_TMP_COMPRAS_GASTOS_DET.ImporteIVA * _iva_deducible) / 100 ));
			END IF;
						
			-- revisa en la tabla de cuentas contables a la que se ir√°n los gastos ( segun este ID de gasto )
			-- por ejemplo: 50% a gastos de ventas y el otro 50% a gastos de administraci√≥n.
			FOR _REC_TMP_INVSERV_GASTOS_PORCENTAJES  IN (select * from TBL_INVSERV_GASTOS_PORCENTAJES where ID_Prod = _REC_TMP_COMPRAS_GASTOS_DET.ID_Prod) 
			LOOP
				--GasNoDed deber√≠a calcularse aqui ( igual al iva no ded, y aplicarse en proporci√≥n a cada porcentaje del gasto para esta partida ). Creo que esto no lo lleva nadie como es, pero lo proporciono
				--Por si un dia alguien lo pide, aqui ya est√° desarrollarlo.
				_GASDedParcial := round(((_REC_TMP_COMPRAS_GASTOS_DET.Importe * _REC_TMP_INVSERV_GASTOS_PORCENTAJES.Porcentaje) / 100),2);
				_GASDed := round(round(((_REC_TMP_COMPRAS_GASTOS_DET.Importe * _REC_TMP_INVSERV_GASTOS_PORCENTAJES.Porcentaje) / 100),2) * _TC,2);
				IF _iva_deducible < 100.0
				THEN
					_GASNoDedParcial :=  round(( _GASDedParcial - (( _GASDedParcial * _iva_deducible) / 100 )),2);
					_GASNoDed :=  round(( _GASDed - (( _GASDed * _iva_deducible) / 100 )),2);
					_TOTALNoDed := _TOTALNoDed + _GASNoDedParcial;
					INSERT INTO _TMP_CONT_POLIZAS_DETALLE_TMP
					VALUES(_contPart, _REC_TMP_INVSERV_GASTOS_PORCENTAJES.ID_CC, _descripcion, _GASDedParcial - _GASNoDedParcial, _Moneda, _TC, _GASDed - _GASNoDed, 0.0);
				ELSE
					INSERT INTO _TMP_CONT_POLIZAS_DETALLE_TMP
					VALUES(_contPart, _REC_TMP_INVSERV_GASTOS_PORCENTAJES.ID_CC, _descripcion, _GASDedParcial, _Moneda, _TC, _GASDed, 0.0);
				END IF;
				--Agrega contabilidad electronica a la primera partida de esta poliza (Si existe UUID)
				IF _contPart = 1 and _uuid <> ''
				THEN
					_NumUUIDs := (char_length(_uuid) / 36);
					_ContUUIDs := 0;
					WHILE _ContUUIDs < _NumUUIDs
					LOOP
						_uuidx := substring(_uuid, ((_ContUUIDs * 36) + 1), 36);
						INSERT INTO _TMP_CONT_POLIZAS_DETALLE_CE_COMPROBANTES_TMP
						SELECT _contPart, _uuidx, Total, RFC, 'CompNal', _moneda_ce, _TC, '', 0, '', '' FROM TBL_CFDCOMP WHERE UUID = _uuidx;
						_ContUUIDs := _ContUUIDs + 1;
					END LOOP;
				END IF;
				_contPart := _contPart + 1;
			END LOOP;
		END LOOP; 

		-- procede a registrar los otros conceptos de la poliza ( EL IVA , Deuda con Proveedor ETC)
		IF _IVA > 0.0
		THEN
			IF _IVANoDed > 0.0
			THEN
				_contPart := _contPart + 1;
				_IVANoDed := round(_IVANoDed,2);
				_TOTALNoDed := round(_TOTALNoDed,2);
				IF _Condicion = 0 -- es de contado, envia todo a iva efectivamente pagado
				THEN
					INSERT INTO _TMP_CONT_POLIZAS_DETALLE_TMP
					VALUES(_contPart, _CC_IVA, 'Impuesto de la compra', _IVA - _IVANoDed, _Moneda, _TC, round((_IVA - _IVANoDed) * _TC, 2), 0.0);
				ELSE
					INSERT INTO _TMP_CONT_POLIZAS_DETALLE_TMP
					VALUES(_contPart, _CC_IVAPN, 'Impuesto de la compra', _IVA - _IVANoDed, _Moneda, _TC, round((_IVA - _IVANoDed) * _TC, 2), 0.0);
				END IF;
				_contPart := _contPart + 1;		
				INSERT INTO _TMP_CONT_POLIZAS_DETALLE_TMP
				VALUES(_contPart,_CC_GND, 'Gastos no deducibles', _IVANoDed + _TOTALNoDed, _Moneda, _TC, round(( _IVANoDed + _TOTALNoDed ) * _TC,2), 0.0);
			ELSE
				_contPart := _contPart + 1;
				IF _Condicion = 0 -- es de contado, envia todo a iva efectivamente pagado
				THEN
					INSERT INTO _TMP_CONT_POLIZAS_DETALLE_TMP
					VALUES(_contPart, _CC_IVA, 'Impuesto de la compra', _IVA, _Moneda, _TC, _IVAPesos, 0.0);
				ELSE
					INSERT INTO _TMP_CONT_POLIZAS_DETALLE_TMP
					VALUES(_contPart, _CC_IVAPN, 'Impuesto de la compra', _IVA, _Moneda, _TC, _IVAPesos, 0.0);
				END IF;
			END IF;
		END IF;

		IF _IEPS > 0.0
		THEN
			_contPart := _contPart + 1;
			IF _Condicion = 0 -- es de contado, envia todo a ieps a efectivamente pagado
			THEN	
				INSERT INTO _TMP_CONT_POLIZAS_DETALLE_TMP
				VALUES(_contPart, _CC_IEPS, 'Impuesto Especial sobre Producci√≥n y Servicio', _IEPS, _Moneda, _TC, _IEPSPesos, 0.0);	
			ELSE -- de credito. o ningun m√©todo de pago. envia a pendiente de pagar
				INSERT INTO _TMP_CONT_POLIZAS_DETALLE_TMP
				VALUES(_contPart, _CC_IEPSPN, 'Impuesto Especial sobre Producci√≥n y Servicio', _IEPS, _Moneda, _TC, _IEPSPesos, 0.0);	
			END IF;
		END IF;

		IF _IVARet > 0.0
		THEN
			_contPart := _contPart + 1;
			INSERT INTO _TMP_CONT_POLIZAS_DETALLE_TMP
			VALUES(_contPart, _CC_IVARet, 'Retenci√≥n de IVA', _IVARet, _Moneda, _TC, 0.0, _IVARetPesos);	
		END IF;

		IF _ISRRet > 0.0
		THEN
			_contPart := _contPart + 1;
			INSERT INTO _TMP_CONT_POLIZAS_DETALLE_TMP
			VALUES(_contPart, _CC_ISRRet, 'Retenci√≥n de ISR', _ISRRet, _Moneda, _TC, 0.0, _ISRRetPesos);	
		END IF;
		
		IF _Descuento > 0.0
		THEN
			_contPart := _contPart + 1;
			INSERT INTO _TMP_CONT_POLIZAS_DETALLE_TMP
			VALUES(_contPart, _CC_Desc, 'Descuento explicito', _Descuento, _Moneda, _TC, 0.0, _DescPesos);
		END IF;
			
		-- procede a registrar los movimiento en la caja, banco, Cuenta por cobrar, y la poliza en caso necesario
		IF _ID_Proveedor > 0 and _Condicion = 1 -- si es a credito y no de mostrador
		THEN
			SELECT * INTO _errpart, _resultpart, _id_cxp 
			FROM sp_provee_cxp_alta(_ID_EntidadCompra, _Fecha, 'PR', _ID_Proveedor, _Concepto, _Moneda, _TC, _Total, _Cantidad, '0', 'CGAS', _ID_Gasto, _Ref) as ( err integer, res varchar, clave integer ); --este movimiento no registrara poliza porque el concepto 0 de cxp es de sistema 
			IF _errpart <> 0
			THEN
				_err := 3;
				_result := _resultpart;
			ELSE
				_clase = 'CCXP|' || cast(_ID_CXP as varchar) || '|' || cast(_ID_EntidadCompra as varchar) || '||';

				UPDATE TBL_COMPRAS_GASTOS_CAB
				SET ID_Pol = _ID_CXP
				WHERE ID_VC = _ID_Gasto;
				
				-- Procede a registrar la poliza si y solo si es una entidad dinamica
				-- Primero registra la deuda total del proveedor para la partida doble en tmp
				_contPart := _contPart + 1;
				INSERT INTO _TMP_CONT_POLIZAS_DETALLE_TMP
				VALUES(_contPart, _CC_PRO, 'Deuda total del Proveedor', _Total, _Moneda, _TC, 0.0, _TotalPesos);
					
				IF _Fija = '0'
				THEN
					-- Primero registra y crea la tabla temporal de detalle de la poliza
					CREATE LOCAL TEMPORARY TABLE _TMP_CONT_POLIZAS_DETALLE (
						Part smallint NOT NULL ,
						Cuenta char(19) NOT NULL ,
						Concepto varchar(80) NOT NULL ,
						Parcial numeric(19,4) NOT NULL ,
						Moneda smallint NOT NULL ,
						TC numeric(19,4) NOT NULL ,
						Debe numeric(19,4) NOT NULL ,
						Haber numeric(19,4) NOT NULL
					);
					CREATE LOCAL TEMPORARY TABLE _TMP_CONT_POLIZAS_DETALLE_CE_COMPROBANTES ( 
						id_part smallint NOT NULL, 
						uuid_cfdi character(36) NOT NULL, 
						monto numeric(19,4) NOT NULL, 
						rfc character varying(13) NOT NULL,
						id_tipo character varying(10) NOT NULL,
						moneda character(3) NOT NULL,
						tipcamb numeric(19,5) NOT NULL,
						cfd_cbb_serie character varying(10) NOT NULL,
						cfd_cbb_numfol integer NOT NULL,
						numfactext character varying(36) NOT NULL,
						taxid character varying(30) NOT NULL
 					); 			
					-- Fin de la tabla temporal

					-- si existen diferencias de centavos al convertir en moneda nacional los tipos de cambio, los registra
					_TotHaber := (select sum(Haber) from _TMP_CONT_POLIZAS_DETALLE_TMP);
					_TotDebe := (select sum(Debe) from _TMP_CONT_POLIZAS_DETALLE_TMP);
					IF _TotDebe > _TotHaber
					THEN
						_diff := _TotDebe - _TotHaber;
						_contPart := _contPart + 1;
						INSERT INTO _TMP_CONT_POLIZAS_DETALLE_TMP
						VALUES(_contPart, _CC_DCEC, 'Diferencia en decimales', _diff, 1, 1.0, 0.0, _diff);
					ELSIF _TotDebe < _TotHaber
					THEN
						_diff := _TotHaber - _TotDebe;
						_contPart := _contPart + 1;
						INSERT INTO _TMP_CONT_POLIZAS_DETALLE_TMP
						VALUES(_contPart, _CC_DCAF, 'Diferencia en decimales', _diff, 1, 1.0, _diff, 0.0);
					END IF;
					
					-- Inserta desde _TMP_CONT_POLIZAS_DETALLE_TMP
					INSERT INTO _TMP_CONT_POLIZAS_DETALLE
					SELECT * FROM  _TMP_CONT_POLIZAS_DETALLE_TMP;
					INSERT INTO _TMP_CONT_POLIZAS_DETALLE_CE_COMPROBANTES
					SELECT * FROM  _TMP_CONT_POLIZAS_DETALLE_CE_COMPROBANTES_TMP;
	
					-- Agrega ahora la poliza principal
					--EXEC dbo.sp_cont_polizas_agregar_ext 'DR', @Fecha, @concepto, 0, @clase, @errpart OUTPUT, @numpol OUTPUT
					SELECT * INTO _errpart, _resultpart, _numpol 
					FROM sp_cont_polizas_agregar('DR', _Fecha, _Concepto,'0', _clase, _Cantidad, _id_clasificacion ) as ( err integer, res varchar, clave integer );
      					IF _errpart <> 0
					THEN
						_err := _errpart;
						_result := _resultpart;
					ELSE
						UPDATE  TBL_PROVEE_CXP
						SET ID_Pol = _numpol
						WHERE ID_CP = _ID_CXP;
					END IF;

					DROP TABLE _TMP_CONT_POLIZAS_DETALLE;
					DROP TABLE _TMP_CONT_POLIZAS_DETALLE_CE_COMPROBANTES;
				END IF;
			END IF; 
		ELSIF _Condicion = 0 -- es de contado
		THEN
			-- Termina la poliza dividiendo los pagos en sus cuentas de banco o caja
			_TotalPesosMult = 0.0;
			_ParcialPesosMult = 0.0;
			FOR _REC_TMP_PAGOS IN ( select * from _TMP_PAGOS order by Partida asc ) 
			LOOP
				_ParcialPesosMult := round((_REC_TMP_PAGOS.Total * _TC), 2);
				_TotalPesosMult := _TotalPesosMult + _ParcialPesosMult;
				_BanCaj := _REC_TMP_PAGOS.ID_FormaPago; -- 1 cajas 0 bancos
				_CC_BAN := (select CC from TBL_BANCOS_CUENTAS  where Tipo = _BanCaj and Clave = _REC_TMP_PAGOS.ID_BanCaj);
				--_CuentaOrigen := (select Descripcion from TBL_BANCOS_CUENTAS  where Tipo = _BanCaj and Clave = _REC_TMP_PAGOS.ID_BanCaj);
				--_BancoOrigen := (select ID_SatBanco from TBL_BANCOS_CUENTAS  where Tipo = _BanCaj and Clave = _REC_TMP_PAGOS.ID_BanCaj);
				_banCHQ := (select SigCheque from TBL_BANCOS_CUENTAS where Tipo = _BanCaj and Clave = _REC_TMP_PAGOS.ID_BanCaj)::varchar(20);
				_contPart := _contPart + 1;
				
				INSERT INTO _TMP_CONT_POLIZAS_DETALLE_TMP
				VALUES(_contPart, _CC_BAN, _REC_TMP_PAGOS.RefPago, _REC_TMP_PAGOS.Total, _Moneda, _TC, 0.0, _ParcialPesosMult);
				--Ingresa contablilidad electronica en caso de bancos
				IF _BanCaj = 0 -- Es banco
				THEN
					IF _REC_TMP_PAGOS.ID_SatMetodosPago = '02' -- se trata de un cheque
					THEN
						INSERT INTO _TMP_CONT_POLIZAS_DETALLE_CE_CHEQUES_TMP
						SELECT _contPart, _banCHQ, ID_SatBanco, Descripcion, _Fecha, _REC_TMP_PAGOS.Total, _Beneficiario, _RFCBeneficiario, BancoExt, _moneda_ce, _TC
						FROM TBL_BANCOS_CUENTAS 
						WHERE Tipo = _BanCaj and Clave = _REC_TMP_PAGOS.ID_BanCaj;
					ELSIF _REC_TMP_PAGOS.ID_SatMetodosPago = '03' --Es una transferencia
					THEN
						INSERT INTO _TMP_CONT_POLIZAS_DETALLE_CE_TRANSFERENCIAS_TMP
						SELECT _contPart, Descripcion, ID_SatBanco, _REC_TMP_PAGOS.Total, _REC_TMP_PAGOS.CuentaBanco, _REC_TMP_PAGOS.ID_SatBanco, _Fecha,  _Beneficiario, _RFCBeneficiario, BancoExt, _REC_TMP_PAGOS.BancoExt, _moneda_ce, _TC
						FROM TBL_BANCOS_CUENTAS 
						WHERE Tipo = _BanCaj and Clave = _REC_TMP_PAGOS.ID_BanCaj;
					ELSE --Es otro metodo de pago (Deposito o Retiro es lo mismo)
						INSERT INTO _TMP_CONT_POLIZAS_DETALLE_CE_OTRMETODOPAGO_TMP
						SELECT _contPart, _REC_TMP_PAGOS.ID_SatMetodosPago, _Fecha, _Beneficiario, _RFCBeneficiario, _REC_TMP_PAGOS.Total, _moneda_ce, _TC;
					END IF;
				ELSE -- BanCaj = 1 "Caja"
					IF _REC_TMP_PAGOS.ID_SatMetodosPago = '02' -- se trata de un cheque (Deposito o Retiro es lo mismo, toma los datos directos capturados en el dialogo)
					THEN
						INSERT INTO _TMP_CONT_POLIZAS_DETALLE_CE_CHEQUES_TMP
						SELECT _contPart, _REC_TMP_PAGOS.Cheque, _REC_TMP_PAGOS.ID_SatBanco, _REC_TMP_PAGOS.CuentaBanco, _Fecha, _REC_TMP_PAGOS.Total, _Beneficiario, _RFCBeneficiario, _REC_TMP_PAGOS.BancoExt, _moneda_ce, _TC;
					ELSE --Es otro metodo de pago (Deposito o Retiro es lo mismo)
						INSERT INTO _TMP_CONT_POLIZAS_DETALLE_CE_OTRMETODOPAGO_TMP
						SELECT _contPart, _REC_TMP_PAGOS.ID_SatMetodosPago, _Fecha, _Beneficiario, _RFCBeneficiario, _REC_TMP_PAGOS.Total, _moneda_ce, _TC;
					END IF;
				END IF;
			END LOOP;

			IF _Fija = '0'
			THEN
				-- Primero registra y crea la tabla temporal de detalle de la poliza
				CREATE LOCAL TEMPORARY TABLE _TMP_CONT_POLIZAS_DETALLE (
					Part smallint NOT NULL ,
					Cuenta char(19) NOT NULL ,
					Concepto varchar(80) NOT NULL ,
					Parcial numeric(19,4) NOT NULL ,
					Moneda smallint NOT NULL ,
					TC numeric(19,4) NOT NULL ,
					Debe numeric(19,4) NOT NULL ,
					Haber numeric(19,4) NOT NULL
				);
				CREATE LOCAL TEMPORARY TABLE _TMP_CONT_POLIZAS_DETALLE_CE_CHEQUES ( 
					id_part smallint NOT NULL,
					num character varying(20) NOT NULL,
					banco character(3) NOT NULL,
					ctaori character varying(50) NOT NULL,
					fecha timestamp without time zone NOT NULL,
					monto numeric(19,4) NOT NULL,
					benef character varying(300) NOT NULL,
					rfc character varying(13) NOT NULL,
					banemisext character varying(150) NOT NULL,
					moneda character(3) NOT NULL,
					tipcamb numeric(19,5) NOT NULL
				); 
				CREATE LOCAL TEMPORARY TABLE _TMP_CONT_POLIZAS_DETALLE_CE_TRANSFERENCIAS ( 
					id_part smallint NOT NULL,
					ctaori character varying(50) NOT NULL,
					bancoori character(3) NOT NULL,
					monto numeric(19,4) NOT NULL,
					ctadest character varying(50) NOT NULL,
					bancodest character(3) NOT NULL,
					fecha timestamp without time zone NOT NULL,
					benef character varying(300) NOT NULL,
					rfc character varying(13) NOT NULL,
					bancooriext character varying(150) NOT NULL,
					bancodestext character varying(150) NOT NULL,
					moneda character(3) NOT NULL,
					tipcamb numeric(19,5) NOT NULL
				);
				CREATE LOCAL TEMPORARY TABLE _TMP_CONT_POLIZAS_DETALLE_CE_OTRMETODOPAGO (
					id_part smallint NOT NULL,
					metpagopol character(2) NOT NULL,
					fecha timestamp without time zone NOT NULL,
					benef character varying(300) NOT NULL,
					rfc character varying(13) NOT NULL,
					monto numeric(19,4) NOT NULL,
					moneda character(3) NOT NULL,
					tipcamb numeric(19,5) NOT NULL
				);
				CREATE LOCAL TEMPORARY TABLE _TMP_CONT_POLIZAS_DETALLE_CE_COMPROBANTES ( 
					id_part smallint NOT NULL, 
					uuid_cfdi character(36) NOT NULL, 
					monto numeric(19,4) NOT NULL, 
					rfc character varying(13) NOT NULL,
					id_tipo character varying(10) NOT NULL,
					moneda character(3) NOT NULL,
					tipcamb numeric(19,5) NOT NULL,
					cfd_cbb_serie character varying(10) NOT NULL,
					cfd_cbb_numfol integer NOT NULL,
					numfactext character varying(36) NOT NULL,
					taxid character varying(30) NOT NULL
				); 
				-- Fin de la tabla temporal

				-- si existen diferencias de centavos al convertir en moneda nacional los tipos de cambio, los registra
				_TotHaber := (select sum(Haber) from _TMP_CONT_POLIZAS_DETALLE_TMP);
				_TotDebe := (select sum(Debe) from _TMP_CONT_POLIZAS_DETALLE_TMP);
				IF _TotDebe > _TotHaber
				THEN
					_diff := _TotDebe - _TotHaber;
					_contPart := _contPart + 1;
					INSERT INTO _TMP_CONT_POLIZAS_DETALLE_TMP
					VALUES(_contPart, _CC_DCEC, 'Diferencia en decimales', _diff, 1, 1.0, 0.0, _diff);
				ELSIF _TotDebe < _TotHaber
				THEN
					_diff := _TotHaber - _TotDebe;
					_contPart := _contPart + 1;
					INSERT INTO _TMP_CONT_POLIZAS_DETALLE_TMP
					VALUES(_contPart, _CC_DCAF, 'Diferencia en decimales', _diff, 1, 1.0, _diff, 0.0);
				END IF;

				-- Inserta desde _TMP_CONT_POLIZAS_DETALLE_TMP
				INSERT INTO _TMP_CONT_POLIZAS_DETALLE
				SELECT * FROM  _TMP_CONT_POLIZAS_DETALLE_TMP;
				INSERT INTO _TMP_CONT_POLIZAS_DETALLE_CE_CHEQUES
				SELECT * FROM  _TMP_CONT_POLIZAS_DETALLE_CE_CHEQUES_TMP;
				INSERT INTO _TMP_CONT_POLIZAS_DETALLE_CE_TRANSFERENCIAS
				SELECT * FROM  _TMP_CONT_POLIZAS_DETALLE_CE_TRANSFERENCIAS_TMP;
				INSERT INTO _TMP_CONT_POLIZAS_DETALLE_CE_OTRMETODOPAGO
				SELECT * FROM  _TMP_CONT_POLIZAS_DETALLE_CE_OTRMETODOPAGO_TMP;
				INSERT INTO _TMP_CONT_POLIZAS_DETALLE_CE_COMPROBANTES
				SELECT * FROM  _TMP_CONT_POLIZAS_DETALLE_CE_COMPROBANTES_TMP;
				
				-- Agrega ahora la poliza principal
				SELECT * INTO _errpart, _resultpart, _numpol 
				FROM sp_cont_polizas_agregar('EG', _Fecha, _Concepto,'0', '', _TotalPesos, _id_clasificacion ) as ( err integer, res varchar, clave integer );
      				IF _errpart <> 0
				THEN
					_err := _errpart;
					_result := _resultpart;
				END IF;
				
				DROP TABLE _TMP_CONT_POLIZAS_DETALLE;
				DROP TABLE _TMP_CONT_POLIZAS_DETALLE_CE_CHEQUES; 
				DROP TABLE _TMP_CONT_POLIZAS_DETALLE_CE_TRANSFERENCIAS;
				DROP TABLE _TMP_CONT_POLIZAS_DETALLE_CE_OTRMETODOPAGO;
				DROP TABLE _TMP_CONT_POLIZAS_DETALLE_CE_COMPROBANTES;
			END IF;

			--Ahora ejecuta los movimientos de caja y bancos
			_clase := '';
			FOR _REC_TMP_PAGOS IN ( select * from _TMP_PAGOS order by Partida asc ) 
			LOOP
				_BanCaj := _REC_TMP_PAGOS.ID_FormaPago; -- 1 cajas 0 bancos
				--_tipoRetiro := (select case when _REC_TMP_PAGOS.ID_FormaPago = 1 Then 'CHQ' else 'RET' end);
				SELECT * INTO _errpart, _resultpart, _bancajmov 
				FROM  sp_bancos_movs_agregar( _BanCaj, _REC_TMP_PAGOS.ID_BanCaj, _Fecha, _Concepto, _Beneficiario, 0.00, _REC_TMP_PAGOS.Total, _REC_TMP_PAGOS.TipoMov, 
						'G', _Moneda, _TC, _Ref, _REC_TMP_PAGOS.RefPago, _id_clasificacion, _numpol, _REC_TMP_PAGOS.ID_SatBanco, _RFCBeneficiario, _REC_TMP_PAGOS.ID_SatMetodosPago, 
																		_REC_TMP_PAGOS.BancoExt, _REC_TMP_PAGOS.CuentaBanco, _REC_TMP_PAGOS.Cheque) as ( err integer, res varchar, clave integer);
				IF _errpart <> 0
				THEN
					_err := _errpart;
					_result := _resultpart;
					EXIT;
				END IF;

				INSERT INTO TBL_COMPRAS_GASTOS_PAGOS
				VALUES(_ID_Gasto, _bancajmov);
				
				IF _numPagos > 1
				THEN
					IF _BanCaj = 0
					THEN
						_clase := _clase || 'MBAN|' || cast(_bancajmov as varchar) || '|' || cast(_REC_TMP_PAGOS.ID_BanCaj as varchar) || '||;';
					ELSE
						_clase := _clase || 'MCAJ|' || cast(_bancajmov as varchar) || '|' || cast(_REC_TMP_PAGOS.ID_BanCaj as varchar) || '||;';
					END IF;
				ELSE
					IF _BanCaj = 0
					THEN
						_clase := 'MBAN|' || cast(_bancajmov as varchar) || '|' || cast(_REC_TMP_PAGOS.ID_BanCaj as varchar) || '||';
					ELSE
						_clase := 'MCAJ|' || cast(_bancajmov as varchar) || '|' || cast(_REC_TMP_PAGOS.ID_BanCaj as varchar) || '||';
					END IF;
				END IF;
			END LOOP;

			IF _Fija = '0' -- Aqui registra la referencia de las polizas de ingreso a sus movimientos de caja o bancos
			THEN
				IF _numPagos > 1
				THEN
					INSERT INTO TBL_REFERENCIAS_EXT
					VALUES(default,_clase)
					RETURNING currval(pg_get_serial_sequence(' TBL_REFERENCIAS_EXT', 'id_ref')) INTO _RefExt;
					UPDATE TBL_CONT_POLIZAS
					SET Ref = 'REXT|' || cast(_RefExt as varchar) || '|||'
					WHERE ID = _numpol;
		 		ELSE
					UPDATE TBL_CONT_POLIZAS
					SET Ref = _clase
					WHERE ID = _numpol;
				END IF;
			END IF; 
		ELSIF _Condicion = 3 -- Es de ningun pago
		THEN
			_clase = 'CGAS|' || cast(_ID_Gasto as varchar) || '|' || cast(_ID_EntidadCompra as varchar) || '||';

			-- Procede a registrar la poliza si y solo si es una entidad dinamica
			-- Primero registra la deuda total del proveedor para la partida doble en tmp
			_contPart := _contPart + 1;
			INSERT INTO _TMP_CONT_POLIZAS_DETALLE_TMP
			VALUES(_contPart, _CC_COMPNP, 'Documento por pagar', _Total, _Moneda, _TC, 0.0, _TotalPesos);
					
			IF _Fija = '0'
			THEN
				-- Primero registra y crea la tabla temporal de detalle de la poliza
				CREATE LOCAL TEMPORARY TABLE _TMP_CONT_POLIZAS_DETALLE (
					Part smallint NOT NULL ,
					Cuenta char(19) NOT NULL ,
					Concepto varchar(80) NOT NULL ,
					Parcial numeric(19,4) NOT NULL ,
					Moneda smallint NOT NULL ,
					TC numeric(19,4) NOT NULL ,
					Debe numeric(19,4) NOT NULL ,
					Haber numeric(19,4) NOT NULL
				);
				CREATE LOCAL TEMPORARY TABLE _TMP_CONT_POLIZAS_DETALLE_CE_COMPROBANTES ( 
					id_part smallint NOT NULL, 
					uuid_cfdi character(36) NOT NULL, 
					monto numeric(19,4) NOT NULL, 
					rfc character varying(13) NOT NULL,
					id_tipo character varying(10) NOT NULL,
					moneda character(3) NOT NULL,
					tipcamb numeric(19,5) NOT NULL,
					cfd_cbb_serie character varying(10) NOT NULL,
					cfd_cbb_numfol integer NOT NULL,
					numfactext character varying(36) NOT NULL,
					taxid character varying(30) NOT NULL
 				); 			
				-- Fin de la tabla temporal
				-- si existen diferencias de centavos al convertir en moneda nacional los tipos de cambio, los registra
				_TotHaber := (select sum(Haber) from _TMP_CONT_POLIZAS_DETALLE_TMP);
				_TotDebe := (select sum(Debe) from _TMP_CONT_POLIZAS_DETALLE_TMP);
				IF _TotDebe > _TotHaber
				THEN
					_diff := _TotDebe - _TotHaber;
					_contPart := _contPart + 1;
					INSERT INTO _TMP_CONT_POLIZAS_DETALLE_TMP
					VALUES(_contPart, _CC_DCEC, 'Diferencia en decimales', _diff, 1, 1.0, 0.0, _diff);
				ELSIF _TotDebe < _TotHaber
				THEN
					_diff := _TotHaber - _TotDebe;
					_contPart := _contPart + 1;
					INSERT INTO _TMP_CONT_POLIZAS_DETALLE_TMP
					VALUES(_contPart, _CC_DCAF, 'Diferencia en decimales', _diff, 1, 1.0, _diff, 0.0);
				END IF;
				
				-- Inserta desde _TMP_CONT_POLIZAS_DETALLE_TMP
				INSERT INTO _TMP_CONT_POLIZAS_DETALLE
				SELECT * FROM  _TMP_CONT_POLIZAS_DETALLE_TMP;
				INSERT INTO _TMP_CONT_POLIZAS_DETALLE_CE_COMPROBANTES
				SELECT * FROM  _TMP_CONT_POLIZAS_DETALLE_CE_COMPROBANTES_TMP;

				-- Agrega ahora la poliza principal
				--EXEC dbo.sp_cont_polizas_agregar_ext 'DR', @Fecha, @concepto, 0, @clase, @errpart OUTPUT, @numpol OUTPUT
				SELECT * INTO _errpart, _resultpart, _numpol 
				FROM sp_cont_polizas_agregar('DR', _Fecha, _Concepto,'0', _clase, _Cantidad, _id_clasificacion ) as ( err integer, res varchar, clave integer );
				IF _errpart <> 0
				THEN
					_err := _errpart;
					_result := _resultpart;
				ELSE
					UPDATE TBL_COMPRAS_GASTOS_CAB
					SET ID_Pol = _numpol
					WHERE ID_VC = _ID_Gasto;
				END IF;

				DROP TABLE _TMP_CONT_POLIZAS_DETALLE;
				DROP TABLE _TMP_CONT_POLIZAS_DETALLE_CE_COMPROBANTES;
			END IF;
		END IF;
		
		DROP TABLE _TMP_CONT_POLIZAS_DETALLE_TMP;
		DROP TABLE _TMP_CONT_POLIZAS_DETALLE_CE_CHEQUES_TMP; 
		DROP TABLE _TMP_CONT_POLIZAS_DETALLE_CE_TRANSFERENCIAS_TMP;
		DROP TABLE _TMP_CONT_POLIZAS_DETALLE_CE_OTRMETODOPAGO_TMP;
		DROP TABLE _TMP_CONT_POLIZAS_DETALLE_CE_COMPROBANTES_TMP;
	
		--Procede a agregar el movimiento al almac√©n
		IF _err = 0 AND _FijaCost = '0' and (select count(*) from _TMP_COMPRAS_FACTURAS_DET d inner join TBL_INVSERV_INVENTARIOS i on d.ID_Prod = i.ID_Prod where i.NoSeVende = '1') > 0
		THEN
			CREATE LOCAL TEMPORARY TABLE _TMP_INVSERV_ALMACEN_MOVIM_DET (
				ID_Bodega smallint NOT NULL ,
				ID_Prod varchar(20) NOT NULL ,
				Partida smallint NOT NULL ,
				Cantidad numeric(9, 3) NOT NULL ,
				Costo numeric(19,4) NULL 
			); 

			insert into _TMP_INVSERV_ALMACEN_MOVIM_DET
			select _ID_Bodega, d.ID_Prod, d.Partida, d.Cantidad, 0.0
			from _TMP_COMPRAS_FACTURAS_DET d inner join TBL_INVSERV_INVENTARIOS i on d.ID_Prod = i.ID_Prod where i.NoSeVende = '1'
			order by Partida ASC;
		
			SELECT * INTO _errpart, _resultpart, _ID_Movimiento 
			FROM sp_invserv_alm_utensilios_agregar(_Fecha, _ID_Bodega, 'G', '-1', _Concepto, '','ENTRADA', _Ref, 'CGAS', _ID_Gasto) as ( err integer, res varchar, clave integer );
			IF _errpart <> 0
			THEN
				_err := _errpart;
				_result := _resultpart;
			ELSE
				UPDATE TBL_COMPRAS_GASTOS_CAB
				SET ID_PolCost = _ID_Movimiento
				WHERE ID_VC = _ID_Gasto;
			END IF;
	
			DROP TABLE _TMP_INVSERV_ALMACEN_MOVIM_DET; 
		END IF;
		-- Fin del movimiento al almacen
		
	END IF; 
	
	RETURN QUERY SELECT _err, _result, _id_gasto;
END
$BODY$
  LANGUAGE plpgsql;
--ALTER FUNCTION sp_compras_gastos_agregar(smallint, integer, integer, timestamp without time zone, character varying, smallint, numer
 
  
--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_compras_devoluciones_agregar(
    _id_entidadcompra smallint,
    _numero integer,
    _id_proveedor integer,
    _fecha timestamp without time zone,
    _referencia character varying,
    _moneda smallint,
    _tc numeric,
    _condicion smallint,
    _obs character varying,
    _importe numeric,
    _descuento numeric,
    _subtotal numeric,
    _iva numeric,
    _total numeric,
    _fsipg_efectivo numeric,
    _fsipg_bancos numeric,
    _fsipg_cambio numeric,
    _id_bodega smallint,
    _id_factura integer,
    _id_vendedor smallint,
    _fsipg_id_concepto smallint,
    _fsipg_desc_concepto character varying,
    _devreb character,
    _ieps numeric,
    _ivaret numeric,
    _isrret numeric)
  RETURNS SETOF record AS
$BODY$ 
DECLARE 
	_err int; _result varchar(255); _ID_Devolucion int; _mes smallint; _ano smallint; _errpart int;  _resultpart varchar(255); _ID_Movimiento int; _concepto varchar(80); _conceptocost varchar(80); _conceptoDescuento varchar(80); _Ref varchar(25); _claseref varchar(25);  
	_FijaCost bit; _costcom numeric(19,4); _CC_COSTCOM char(19); _AuditarAlm bit;
	_ID_CXP int; _ID_CXPSALDO int; _numpol int; _clase varchar(1024); _bancajmov int;
	_tipoRetiro varchar(10); _Cantidad numeric(19,4);/* _ServComp bit; */_CC_PRO char(19); 
	_CC_IVA char(19); _CC_IVAPN char(19); _CC_IEPS char(19); _CC_IEPSPN char(19); _CC_IVARet char(19); _CC_ISRRet char(19); _ImporteTotalPesos numeric(19,4); 
	_IVAPesos numeric(19,4); _IEPSPesos numeric(19,4); _IVARetPesos numeric(19,4); _ISRRetPesos numeric(19,4); _DescPesos numeric(19,4); _TotalPesos numeric(19,4);  
	_Fija bit; _FijaBAN bit; _CC_Desc char(19); _CC_COMPNP char(19); _CC_DCAF char(19);
	_CC_DCEC char(19); _diff numeric(19,4); _TotDebe numeric(19,4); _TotHaber numeric(19,4); _contPart smallint; 
	/*_totPart smallint; */_CC_DEVREB char(19);
	_contban smallint; _totalban smallint; _ID_FormaPago smallint; _ID_BanCaj smallint; _RefPago varchar(25); _IdMon smallint;
	_id_clasificacion varchar(10); _numPagos smallint; _RefExt int;
	_Beneficiario varchar(80); _RFCOrigen varchar(15); _moneda_ce character(3); /*_CuentaOrigen varchar(80); _BancoOrigen character(3); _CuentaDestino varchar(50); _BancoDestino character(3);*/
	_RFC varchar(15);	
	--Iteracion
	_REC_TMP_PAGOS RECORD; _REC_TMP_COMPRAS_FACTURAS_DET RECORD; _TotalPesosMult numeric(19,4); _ParcialPesosMult numeric(19,4); _BanCaj smallint; _CC_BAN char(19);
BEGIN	
	_err := 0;
	_result := 'La devolucion se ha registrado satisfactoriamente';
	--_ServComp := '1';
	_CC_IVA := (select valfanumerico from TBL_VARIABLES where ID_Variable = 'CC_IVAAC');
	_CC_IVAPN := (select valfanumerico from TBL_VARIABLES where ID_Variable = 'CC_IVAACPN');
	_CC_IEPS := (select valfanumerico from TBL_VARIABLES where ID_Variable = 'CC_IEPSC');
	_CC_IEPSPN := (select valfanumerico from TBL_VARIABLES where ID_Variable = 'CC_IEPSCPN');
	_CC_IVARet := (select valfanumerico from TBL_VARIABLES where ID_Variable = 'CC_IVARETC');
	_CC_ISRRet := (select valfanumerico from TBL_VARIABLES where ID_Variable = 'CC_ISRRETC');
	_CC_Desc := (select valfanumerico from TBL_VARIABLES where ID_Variable = 'CC_DSC');
	IF _Condicion = 0
	THEN
		_CC_DEVREB := (select valfanumerico from TBL_VARIABLES where ID_Variable = 'CC_DSCCONT');
		_ConceptoDescuento := 'Devolucion y/o rebaja sobre compra de contado';
	ELSIF _Condicion = 1
	THEN	
		_CC_DEVREB := (select cc from TBL_PROVEE_CXP_CONCEPTOS where ID_Concepto = _fsipg_id_concepto);
		_ConceptoDescuento := _fsipg_desc_concepto;
	ELSE
		_CC_DEVREB := (select valfanumerico from TBL_VARIABLES where ID_Variable = 'CC_DSC');
		_ConceptoDescuento := 'Devolucion y/o rebaja sobre compra de cr√©dito';
	END IF;
	_moneda_ce := (select id_satmoneda from TBL_CONT_MONEDAS where Clave = _moneda);
	_Cantidad := round((_Total * _TC), 2);
	_ImporteTotalPesos := ROUND((_Importe * _TC), 2);
	_IVAPesos :=  ROUND((_IVA * _TC), 2);
	_IEPSPesos :=  ROUND((_IEPS * _TC), 2);
	_IVARetPesos :=  ROUND((_IVARet * _TC), 2);
	_ISRRetPesos :=  ROUND((_ISRRet * _TC), 2);
	_DescPesos := ROUND((_Descuento * _TC), 2);
	_TotalPesos := ROUND((_Total * _TC), 2);	
	_concepto := 'Devolucion s/compra ' || (select Descripcion from TBL_COMPRAS_ENTIDADES where ID_EntidadCompra = _ID_EntidadCompra) || ', numero ' || cast(_Numero as varchar) || 
				(case when _Referencia <> '' then ' y referencia ' || _Referencia || '.' else '.' end);
	_conceptocost := 'Costo dev/com ' || (select Descripcion from TBL_COMPRAS_ENTIDADES where ID_EntidadCompra = _ID_EntidadCompra) || ', numero ' || cast(_Numero as varchar) || 
				(case when _Referencia <> '' then ' y referencia ' || _Referencia || '.' else '.' end);

	_Beneficiario := ( select VAlfanumerico from TBL_VARIABLES where ID_Variable = 'EMPRESA');
	_RFCOrigen := case when _ID_Proveedor = 0 then 'XAXX010101000' else ( select RFC from TBL_PROVEE_PROVEE where ID_Tipo = 'PR' and ID_Clave = _ID_Proveedor) end;
	--_CuentaOrigen := case when _ID_Proveedor = 0 then '' else ( select MetodoDePago from TBL_PROVEE_PROVEE where ID_Tipo = 'PR' and ID_Clave = _ID_Proveedor) end;
	--_BancoOrigen := case when _ID_Proveedor = 0 then '000' else ( select ID_SatBanco from TBL_PROVEE_PROVEE where ID_Tipo = 'PR' and ID_Clave = _ID_Proveedor) end;

	_CC_PRO := (select ID_CC from TBL_PROVEE_PROVEE where ID_Tipo = 'PR' and ID_Clave = _ID_Proveedor);
	_Fija := (select Fija from TBL_COMPRAS_ENTIDADES where ID_EntidadCompra = _ID_EntidadCompra);
	_FijaCost := (select FijaCost from TBL_COMPRAS_ENTIDADES where ID_EntidadCompra = _ID_EntidadCompra);
	_mes := date_part('month',_Fecha);
	_ano := date_part('year',_Fecha);
	_AuditarAlm := ( select AuditarAlm from TBL_INVSERV_BODEGAS where ID_Bodega = _ID_Bodega );
	_ID_CXP := ( select ID_CP from TBL_PROVEE_CXP where id_tipodocorig = 'CFAC' and id_clavedocorig = _ID_Factura);

	_CC_DCAF := (select valfanumerico from TBL_VARIABLES where ID_Variable = 'CC_DCAF');
	_CC_DCEC := (select valfanumerico from TBL_VARIABLES where ID_Variable = 'CC_DCEC');
	_id_clasificacion := (select ID_Clasificacion from TBL_COMPRAS_ENTIDADES where ID_EntidadCompra = _ID_EntidadCompra);
	_numPagos := (select count(*) from _TMP_PAGOS);

	_claseref := 'CFAC|' || cast(_ID_Factura as varchar) || '|' || cast(_ID_EntidadCompra as varchar) || '||';
	
	IF(select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano and Cerrado = 1) > 0
	OR (select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano) < 1
	THEN
		_err := 3;
		_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_POLIZAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'ERROR: La fecha de poliza pertenece a un periodo cerrado o inexistente'
	END IF;

	IF _CC_DCAF = '' or _CC_DCEC = ''
	THEN
		_err := 3;
		_result := (select msj2 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'COMP_CXP' and 
			m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'ERROR: Las cuentas de diferencias cambiarias no se han registrado aun';
	END IF;

	IF (select count(*) from TBL_COMPRAS_DEVOLUCIONES_CAB where ID_Entidad = _ID_EntidadCompra and Numero = _Numero) > 0
	THEN
		_err := 3;
		_result := 'ERROR: La clave de la devolucion ya existe, No se puede duplicar';
	END IF;

	IF ( select ventero from TBL_VARIABLES where ID_Variable = 'MVCF' ) = 1
	THEN
		IF (select count(*) from TBL_INVSERV_CHFIS_CAB where ID_Bodega = _ID_Bodega and ( Cerrado = '1' or Generado = '1') and Status <> 'C' and Fecha >= _Fecha) > 0
		THEN
			_err := 3;
			_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ALM_CHFIS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR');--'ERROR: No se puede generar el movimiento al almacen porque ya existe un chequeo f?sico cerrado en esta bodega, con fecha posterior a este movimiento';
		END IF;
	END IF;

	IF _Condicion = 0 
	THEN
		FOR _REC_TMP_PAGOS IN ( select * from _TMP_PAGOS order by Partida asc ) 
		LOOP
			_ID_FormaPago := _REC_TMP_PAGOS.ID_FormaPago;
			_ID_BanCaj := _REC_TMP_PAGOS.ID_BanCaj;
			_FijaBAN := (case when _ID_FormaPago = 1 then (select Fijo from TBL_BANCOS_CUENTAS where Tipo = 1 and Clave = _ID_BanCaj)
							else (select Fijo from TBL_BANCOS_CUENTAS where Tipo = 0 and Clave = _ID_BanCaj) end);
			_IdMon := (case when _ID_FormaPago = 1 then (select ID_Moneda from TBL_BANCOS_CUENTAS where Tipo = 1 and Clave = _ID_BanCaj)
							else (select ID_Moneda from TBL_BANCOS_CUENTAS where Tipo = 0 and Clave = _ID_BanCaj) end);

			IF _Fija <> _FijaBAN
			THEN
				_err := 3;
				_result := 'ERROR: No se puede agregar la compra porque al pagarse de contado requiere que los bancos manejen los mismos trazos contables que la compra';
				EXIT;
			END IF;

			IF _Moneda <> _IdMon 
			THEN
				_err := 3;
				_result := 'ERROR: No se puede agregar la compra porque al pagarse de contado requiere que los bancos manejen la misma moneda que la compra';
				EXIT;
			END IF;
		END LOOP;
	END IF;
	
	IF _IVA > 0.0 AND ( _CC_IVA = '' OR _CC_IVAPN = '' )
	THEN
		_err := 3;
		_result := 'ERROR: La cuenta de iva acreditable efectivamente pagado o la de iva acreditable pendiente de pagar, no existe o no se ha enlazado';
	END IF;
	IF _IEPS > 0.0 AND ( _CC_IEPS = '' OR _CC_IEPSPN = '' )
	THEN
		_err := 3;
		_result := 'ERROR: La cuenta del IEPS efectivamente pagado o la de IEPS pendiente de pagar no existe o no se ha enlazado';
	END IF;
	IF _IVARet > 0.0 AND ( _CC_IVARet = '' )
	THEN
		_err := 3;
		_result := 'ERROR: La cuenta de IVA Retenido no existe o no se ha enlazado';
	END IF;
	IF _ISRRet > 0.0 AND ( _CC_ISRRet = '' )
	THEN
		_err := 3;
		_result := 'ERROR: La cuenta de ISR Retenido no existe o no se ha enlazado';
	END IF;
	IF _Descuento > 0.0 AND _CC_Desc = ''
	THEN
		_err := 3;
		_result := 'ERROR: La cuenta de descuento sobre compras no existe o no se ha enlazado';
	END IF;

	IF _CC_DEVREB is null or _CC_DEVREB = ''
	THEN
		_err := 3;
		_result := 'ERROR: La cuenta de devoluciones sobre compras de contado o cr√©dito no se ha enlazado en variables, o en enlaces de cuentas por cobrar';
	END IF;

	-- procede a realizar verificaci?n sobre los trazos
	IF _FijaCost = '0'
	THEN
		_CC_COSTCOM := (select cc from TBL_INVSERV_COSTOS_CONCEPTOS where ID_Concepto = 53);
		IF _CC_COSTCOM is null
		THEN
			_err := 3;
			_result := 'ERROR: La cuenta para el costo de compras no existe o no se ha enlazado bien';	
		END IF;
	END IF;

	IF _Condicion = 3
	THEN
		_CC_COMPNP := (select valfanumerico from TBL_VARIABLES where ID_Variable = 'CC_COMPNP');
		IF _CC_COMPNP = ''
		THEN
			_err := 3;
			_result := 'ERROR: La cuenta para registro de partida doble cuando no se establece ningun metodo de pago, no existe o no se ha enlazado';
		END IF;
	END IF;
	
	IF _err = 0
	THEN
		INSERT INTO TBL_COMPRAS_DEVOLUCIONES_CAB(  id_entidad, numero, id_clipro, fecha, referencia, status, moneda, tc, fechaenvio, condicion, obs, 
			importe, descuento, subtotal, iva, total, ref, id_pol, id_polcost, id_bodega, mimporte, mdescuento, msubtotal, miva, mtotal, efectivo, bancos, cambio, id_vendedor, id_cfd, tfd, 
			ieps, ivaret, isrret, id_factura, devreb )
		VALUES(_ID_EntidadCompra, _Numero, _ID_Proveedor, _Fecha, _Referencia, (case when _AuditarAlm = '1' and _devreb = 'DEV' then 'G' else 'E' end) , _Moneda, _TC, _Fecha, _Condicion, _Obs,
				_Importe, _Descuento, _SubTotal, _IVA, _Total, _claseref, null, null, _ID_Bodega, _Importe, _Descuento, _SubTotal, _IVA,  _Total, _FSIPG_Efectivo, _FSIPG_Bancos, _FSIPG_Cambio, _ID_Vendedor, null, null, 
				_ieps, _ivaret, _isrret, _id_factura, _devreb)
		RETURNING currval(pg_get_serial_sequence('TBL_COMPRAS_DEVOLUCIONES_CAB', 'id_vc')) INTO _id_devolucion;
		 
		-- actualiza el numero de FACTURA
		UPDATE TBL_COMPRAS_ENTIDADES
		SET Devolucion = _Numero + 1
		WHERE ID_EntidadCompra = _ID_EntidadCompra;
		
		-- inserta el detalle
		INSERT INTO TBL_COMPRAS_DEVOLUCIONES_DET
		SELECT _ID_Devolucion, Partida, Cantidad, ID_Prod, Precio, Descuento, IVA, Obs, Importe, ImporteDesc, ImporteIVA, TotalPart, IEPS, ImporteIEPS, IVARet, ImporteIVARet, ISRRet, ImporteISRRet
		FROM _TMP_COMPRAS_FACTURAS_DET;

		_Ref := 'CDEV|' || cast(_ID_Devolucion as varchar) || '|' || cast(_ID_EntidadCompra as varchar) || '||';

		--Crea tabla temporal indispensable... para contable.
		CREATE LOCAL TEMPORARY TABLE _TMP_CONT_POLIZAS_DETALLE_TMP (
			Part smallint NOT NULL ,
			Cuenta char(19) NOT NULL ,
			Concepto varchar(80) NOT NULL ,
			Parcial numeric(19,4) NOT NULL ,
			Moneda smallint NOT NULL ,
			TC numeric(19,4) NOT NULL ,
			Debe numeric(19,4) NOT NULL ,
			Haber numeric(19,4) NOT NULL
		);
		CREATE LOCAL TEMPORARY TABLE _TMP_CONT_POLIZAS_DETALLE_CE_CHEQUES_TMP( 
			id_part smallint NOT NULL,
			num character varying(20) NOT NULL,
			banco character(3) NOT NULL,
			ctaori character varying(50) NOT NULL,
			fecha timestamp without time zone NOT NULL,
			monto numeric(19,4) NOT NULL,
			benef character varying(300) NOT NULL,
			rfc character varying(13) NOT NULL,
			banemisext character varying(150) NOT NULL,
			moneda character(3) NOT NULL,
			tipcamb numeric(19,5) NOT NULL
		); 
		CREATE LOCAL TEMPORARY TABLE _TMP_CONT_POLIZAS_DETALLE_CE_TRANSFERENCIAS_TMP ( 
			id_part smallint NOT NULL,
			ctaori character varying(50) NOT NULL,
			bancoori character(3) NOT NULL,
			monto numeric(19,4) NOT NULL,
			ctadest character varying(50) NOT NULL,
			bancodest character(3) NOT NULL,
			fecha timestamp without time zone NOT NULL,
			benef character varying(300) NOT NULL,
			rfc character varying(13) NOT NULL,
			bancooriext character varying(150) NOT NULL,
			bancodestext character varying(150) NOT NULL,
			moneda character(3) NOT NULL,
			tipcamb numeric(19,5) NOT NULL
		);
		CREATE LOCAL TEMPORARY TABLE _TMP_CONT_POLIZAS_DETALLE_CE_OTRMETODOPAGO_TMP (
			id_part smallint NOT NULL,
			metpagopol character(2) NOT NULL,
			fecha timestamp without time zone NOT NULL,
			benef character varying(300) NOT NULL,
			rfc character varying(13) NOT NULL,
			monto numeric(19,4) NOT NULL,
			moneda character(3) NOT NULL,
			tipcamb numeric(19,5) NOT NULL
		);
		-- Agrega a la tabla de temporal para: polizas final o detalles de bancos cajas final
		_contPart := 1;
		INSERT INTO _TMP_CONT_POLIZAS_DETALLE_TMP
		VALUES(_contPart, _CC_DEVREB, _ConceptoDescuento, _Importe, _Moneda, _TC, 0.0, _ImporteTotalPesos);

		-- procede a registrar los otros conceptos de la poliza ( EL IVA , Deuda con Proveedor ETC)
		IF _IVA > 0.0
		THEN
			_contPart := _contPart + 1;
			IF _Condicion = 0 -- es de contado, envia todo a descuento de iva efectivamente pagado
			THEN
				INSERT INTO _TMP_CONT_POLIZAS_DETALLE_TMP
				VALUES(_contPart, _CC_IVA, 'Parte de Impuesto devuelta', _IVA, _Moneda, _TC, 0.0, _IVAPesos);
			ELSE
				INSERT INTO _TMP_CONT_POLIZAS_DETALLE_TMP
				VALUES(_contPart, _CC_IVAPN, 'Parte de Impuesto devuelta', _IVA, _Moneda, _TC, 0.0, _IVAPesos);
			END IF;
		END IF;

		IF _IEPS > 0.0
		THEN
			_contPart := _contPart + 1;
			IF _Condicion = 0 -- es de contado, envia todo a ieps a efectivamente pagado
			THEN	
				INSERT INTO _TMP_CONT_POLIZAS_DETALLE_TMP
				VALUES(_contPart, _CC_IEPS, 'Impuesto Especial sobre Producci√≥n y Servicio', _IEPS, _Moneda, _TC, 0.0, _IEPSPesos);	
			ELSE -- de credito. o ningun m√©todo de pago. envia a pendiente de pagar
				INSERT INTO _TMP_CONT_POLIZAS_DETALLE_TMP
				VALUES(_contPart, _CC_IEPSPN, 'Impuesto Especial sobre Producci√≥n y Servicio', _IEPS, _Moneda, _TC, 0.0, _IEPSPesos);	
			END IF;
		END IF;

		IF _IVARet > 0.0
		THEN
			_contPart := _contPart + 1;
			INSERT INTO _TMP_CONT_POLIZAS_DETALLE_TMP
			VALUES(_contPart, _CC_IVARet, 'Retenci√≥n de IVA', _IVARet, _Moneda, _TC, _IVARetPesos, 0.0);	
		END IF;

		IF _ISRRet > 0.0
		THEN
			_contPart := _contPart + 1;
			INSERT INTO _TMP_CONT_POLIZAS_DETALLE_TMP
			VALUES(_contPart, _CC_ISRRet, 'Retenci√≥n de ISR', _ISRRet, _Moneda, _TC, _ISRRetPesos, 0.0);	
		END IF;
		
		IF _Descuento > 0.0
		THEN
			_contPart := _contPart + 1;
			INSERT INTO _TMP_CONT_POLIZAS_DETALLE_TMP
			VALUES(_contPart, _CC_Desc, 'Parte del descuento explicito devuelta', _Descuento, _Moneda, _TC, _DescPesos, 0.0);
		END IF;
			
		
		-- procede a registrar los movimientos en la caja, banco, Cuenta por cobrar, y la poliza en caso necesario
		IF _ID_Proveedor > 0 and _Condicion = 1 -- si es a credito y no de mostrador
		THEN
			SELECT * INTO _errpart, _resultpart, _id_cxpsaldo 
			FROM sp_provee_cxp_pagar(_ID_EntidadCompra, _ID_CXP, _Fecha,  '', _Moneda, _TC, _Total, '0', '0', _Cantidad, _ConceptoDescuento, cast(_ID_CXP as varchar), '1', _fsipg_id_concepto, false, 'CDEV', _ID_Devolucion, _Ref, null, null, null, null, null, null ) as ( err integer, res varchar, clave integer ); --este movimiento registrar√° la p√≥liza externa _numpol 
			IF _errpart <> 0
			THEN
				_err := 3;
				_result := _resultpart;
			ELSE
				_clase = 'CCXP|' || cast(_ID_CXPSALDO as varchar) || '|' || cast(_ID_EntidadCompra as varchar) || '||';

				UPDATE TBL_COMPRAS_DEVOLUCIONES_CAB
				SET ID_Pol = _ID_CXPSALDO
				WHERE ID_VC = _ID_Devolucion;
				
				-- Procede a registrar la poliza si y solo si es una entidad dinamica
				-- Primero registra la deuda total del proveee para la partida doble en tmp
				_contPart := _contPart + 1;
				INSERT INTO _TMP_CONT_POLIZAS_DETALLE_TMP
				VALUES(_contPart, _CC_PRO, 'Devoluci√≥n del Proveedor', _Total, _Moneda, _TC, _TotalPesos, 0.0);
					
				IF _Fija = '0'
				THEN
					-- Primero registra y crea la tabla temporal de detalle de la poliza
					CREATE LOCAL TEMPORARY TABLE _TMP_CONT_POLIZAS_DETALLE (
						Part smallint NOT NULL ,
						Cuenta char(19) NOT NULL ,
						Concepto varchar(80) NOT NULL ,
						Parcial numeric(19,4) NOT NULL ,
						Moneda smallint NOT NULL ,
						TC numeric(19,4) NOT NULL ,
						Debe numeric(19,4) NOT NULL ,
						Haber numeric(19,4) NOT NULL
					);
					-- Fin de la tabla temporal

					-- si existen diferencias de centavos al convertir en moneda nacional los tipos de cambio, los registra
					_TotHaber := (select sum(Haber) from _TMP_CONT_POLIZAS_DETALLE_TMP);
					_TotDebe := (select sum(Debe) from _TMP_CONT_POLIZAS_DETALLE_TMP);
					IF _TotDebe > _TotHaber
					THEN
						_diff := _TotDebe - _TotHaber;
						_contPart := _contPart + 1;
						INSERT INTO _TMP_CONT_POLIZAS_DETALLE_TMP
						VALUES(_contPart, _CC_DCAF, 'Diferencia en decimales', _diff, 1, 1.0, 0.0, _diff);
					ELSIF _TotDebe < _TotHaber
					THEN
						_diff := _TotHaber - _TotDebe;
						_contPart := _contPart + 1;
						INSERT INTO _TMP_CONT_POLIZAS_DETALLE_TMP
						VALUES(_contPart, _CC_DCEC, 'Diferencia en decimales', _diff, 1, 1.0, _diff, 0.0);
					END IF;
					
					-- Inserta desde _TMP_CONT_POLIZAS_DETALLE_TMP
					INSERT INTO _TMP_CONT_POLIZAS_DETALLE
					SELECT * FROM  _TMP_CONT_POLIZAS_DETALLE_TMP;

					-- Agrega ahora la poliza principal
					--EXEC dbo.sp_cont_polizas_agregar_ext 'DR', @Fecha, @concepto, 0, @clase, @errpart OUTPUT, @numpol OUTPUT
					SELECT * INTO _errpart, _resultpart, _numpol 
					FROM sp_cont_polizas_agregar('DR', _Fecha, _Concepto,'0', _clase, _Cantidad, _id_clasificacion ) as ( err integer, res varchar, clave integer );
      					IF _errpart <> 0
					THEN
						_err := _errpart;
						_result := _resultpart;
					ELSE
						UPDATE  TBL_PROVEE_CXP
						SET ID_Pol = _numpol
						WHERE ID_CP = _ID_CXPSALDO;
					END IF;

					DROP TABLE _TMP_CONT_POLIZAS_DETALLE;
			
				END IF;
			END IF; 
		ELSIF _Condicion = 0 -- es de contado
		THEN
			-- Termina la poliza dividiendo los pagos en sus cuentas de banco o caja
			_TotalPesosMult = 0.0;
			_ParcialPesosMult = 0.0;
			FOR _REC_TMP_PAGOS IN ( select * from _TMP_PAGOS order by Partida asc ) 
			LOOP
				_ParcialPesosMult := round((_REC_TMP_PAGOS.Total * _TC), 2);
				_TotalPesosMult := _TotalPesosMult + _ParcialPesosMult;
				_BanCaj := _REC_TMP_PAGOS.ID_FormaPago; -- 1 cajas 0 bancos
				_CC_BAN := (select CC from TBL_BANCOS_CUENTAS  where Tipo = _BanCaj and Clave = _REC_TMP_PAGOS.ID_BanCaj);
				--_CuentaDestino := (select Descripcion from TBL_BANCOS_CUENTAS  where Tipo = _BanCaj and Clave = _REC_TMP_PAGOS.ID_BanCaj);
				--_BancoDestino := (select ID_SatBanco from TBL_BANCOS_CUENTAS  where Tipo = _BanCaj and Clave = _REC_TMP_PAGOS.ID_BanCaj);
				_contPart := _contPart + 1;
				
				INSERT INTO _TMP_CONT_POLIZAS_DETALLE_TMP
				VALUES(_contPart, _CC_BAN, _REC_TMP_PAGOS.RefPago, _REC_TMP_PAGOS.Total, _Moneda, _TC, _ParcialPesosMult, 0.0);
				--Ingresa contablilidad electronica del pago...
				-- Actualiza la contabilidad electronica de este BANCO o CAJA a esta partida, ya sea por cheque, transferencia u otro metodo de pago
				IF _BanCaj = 0 -- Es banco
				THEN
					IF _REC_TMP_PAGOS.ID_SatMetodosPago = '02' -- se trata de un cheque
					THEN
						INSERT INTO _TMP_CONT_POLIZAS_DETALLE_CE_CHEQUES_TMP
						SELECT _contPart, _REC_TMP_PAGOS.Cheque, _REC_TMP_PAGOS.ID_SatBanco, _REC_TMP_PAGOS.CuentaBanco, _Fecha, _REC_TMP_PAGOS.Total, _Beneficiario, _RFCOrigen, _REC_TMP_PAGOS.BancoExt, _moneda_ce, _TC;
					ELSIF _REC_TMP_PAGOS.ID_SatMetodosPago = '03' --Es una transferencia
					THEN
						INSERT INTO _TMP_CONT_POLIZAS_DETALLE_CE_TRANSFERENCIAS_TMP
						SELECT _contPart, _REC_TMP_PAGOS.CuentaBanco, _REC_TMP_PAGOS.ID_SatBanco, _REC_TMP_PAGOS.Total, Descripcion, ID_SatBanco, _Fecha,  _Beneficiario, _RFCOrigen, _REC_TMP_PAGOS.BancoExt, BancoExt, _moneda_ce, _TC
						FROM TBL_BANCOS_CUENTAS 
						WHERE Tipo = _BanCaj and Clave = _REC_TMP_PAGOS.ID_BanCaj;
					ELSE --Es otro metodo de pago (Deposito o Retiro es lo mismo)
						INSERT INTO _TMP_CONT_POLIZAS_DETALLE_CE_OTRMETODOPAGO_TMP
						SELECT _contPart, _REC_TMP_PAGOS.ID_SatMetodosPago, _Fecha, _Beneficiario, _RFCOrigen, _REC_TMP_PAGOS.Total, _moneda_ce, _TC;
					END IF;
				ELSE -- BanCaj = 1 "Caja"
					IF _REC_TMP_PAGOS.ID_SatMetodosPago = '02' -- se trata de un cheque (Deposito o Retiro es lo mismo, toma los datos directos capturados en el dialogo)
					THEN
						INSERT INTO _TMP_CONT_POLIZAS_DETALLE_CE_CHEQUES_TMP
						SELECT _contPart, _REC_TMP_PAGOS.Cheque, _REC_TMP_PAGOS.ID_SatBanco, _REC_TMP_PAGOS.CuentaBanco, _Fecha, _REC_TMP_PAGOS.Total, _Beneficiario, _RFCOrigen, _REC_TMP_PAGOS.BancoExt, _moneda_ce, _TC;
					ELSE --Es otro metodo de pago (Deposito o Retiro es lo mismo)
						INSERT INTO _TMP_CONT_POLIZAS_DETALLE_CE_OTRMETODOPAGO_TMP
						SELECT _contPart, _REC_TMP_PAGOS.ID_SatMetodosPago, _Fecha, _Beneficiario, _RFCOrigen, _REC_TMP_PAGOS.Total, _moneda_ce, _TC;
					END IF;
				END IF;
			
			END LOOP;

			IF _Fija = '0'
			THEN
				-- Primero registra y crea la tabla temporal de detalle de la poliza
				CREATE LOCAL TEMPORARY TABLE _TMP_CONT_POLIZAS_DETALLE (
					Part smallint NOT NULL ,
					Cuenta char(19) NOT NULL ,
					Concepto varchar(80) NOT NULL ,
					Parcial numeric(19,4) NOT NULL ,
					Moneda smallint NOT NULL ,
					TC numeric(19,4) NOT NULL ,
					Debe numeric(19,4) NOT NULL ,
					Haber numeric(19,4) NOT NULL
				);
				CREATE LOCAL TEMPORARY TABLE _TMP_CONT_POLIZAS_DETALLE_CE_CHEQUES ( 
					id_part smallint NOT NULL,
					num character varying(20) NOT NULL,
					banco character(3) NOT NULL,
					ctaori character varying(50) NOT NULL,
					fecha timestamp without time zone NOT NULL,
					monto numeric(19,4) NOT NULL,
					benef character varying(300) NOT NULL,
					rfc character varying(13) NOT NULL,
					banemisext character varying(150) NOT NULL,
					moneda character(3) NOT NULL,
					tipcamb numeric(19,5) NOT NULL
				); 
				CREATE LOCAL TEMPORARY TABLE _TMP_CONT_POLIZAS_DETALLE_CE_TRANSFERENCIAS ( 
					id_part smallint NOT NULL,
					ctaori character varying(50) NOT NULL,
					bancoori character(3) NOT NULL,
					monto numeric(19,4) NOT NULL,
					ctadest character varying(50) NOT NULL,
					bancodest character(3) NOT NULL,
					fecha timestamp without time zone NOT NULL,
					benef character varying(300) NOT NULL,
					rfc character varying(13) NOT NULL,
					bancooriext character varying(150) NOT NULL,
					bancodestext character varying(150) NOT NULL,
					moneda character(3) NOT NULL,
					tipcamb numeric(19,5) NOT NULL
				);
				CREATE LOCAL TEMPORARY TABLE _TMP_CONT_POLIZAS_DETALLE_CE_OTRMETODOPAGO (
					id_part smallint NOT NULL,
					metpagopol character(2) NOT NULL,
					fecha timestamp without time zone NOT NULL,
					benef character varying(300) NOT NULL,
					rfc character varying(13) NOT NULL,
					monto numeric(19,4) NOT NULL,
					moneda character(3) NOT NULL,
					tipcamb numeric(19,5) NOT NULL
				);
				-- Fin de la tabla temporal

				-- si existen diferencias de centavos al convertir en moneda nacional los tipos de cambio, los registra
				_TotHaber := (select sum(Haber) from _TMP_CONT_POLIZAS_DETALLE_TMP);
				_TotDebe := (select sum(Debe) from _TMP_CONT_POLIZAS_DETALLE_TMP);
				IF _TotDebe > _TotHaber
				THEN
					_diff := _TotDebe - _TotHaber;
					_contPart := _contPart + 1;
					INSERT INTO _TMP_CONT_POLIZAS_DETALLE_TMP
					VALUES(_contPart, _CC_DCAF, 'Diferencia en decimales', _diff, 1, 1.0, 0.0, _diff);
				ELSIF _TotDebe < _TotHaber
				THEN
					_diff := _TotHaber - _TotDebe;
					_contPart := _contPart + 1;
					INSERT INTO _TMP_CONT_POLIZAS_DETALLE_TMP
					VALUES(_contPart, _CC_DCEC, 'Diferencia en decimales', _diff, 1, 1.0, _diff, 0.0);
				END IF;

				-- Inserta desde _TMP_CONT_POLIZAS_DETALLE_TMP
				INSERT INTO _TMP_CONT_POLIZAS_DETALLE
				SELECT * FROM  _TMP_CONT_POLIZAS_DETALLE_TMP;
				INSERT INTO _TMP_CONT_POLIZAS_DETALLE_CE_CHEQUES
				SELECT * FROM  _TMP_CONT_POLIZAS_DETALLE_CE_CHEQUES_TMP;
				INSERT INTO _TMP_CONT_POLIZAS_DETALLE_CE_TRANSFERENCIAS
				SELECT * FROM  _TMP_CONT_POLIZAS_DETALLE_CE_TRANSFERENCIAS_TMP;
				INSERT INTO _TMP_CONT_POLIZAS_DETALLE_CE_OTRMETODOPAGO
				SELECT * FROM  _TMP_CONT_POLIZAS_DETALLE_CE_OTRMETODOPAGO_TMP;
								
				-- Agrega ahora la poliza principal
				SELECT * INTO _errpart, _resultpart, _numpol 
				FROM sp_cont_polizas_agregar('IG', _Fecha, _Concepto,'0', '', _TotalPesos, _id_clasificacion ) as ( err integer, res varchar, clave integer );
      				IF _errpart <> 0
				THEN
					_err := _errpart;
					_result := _resultpart;
				END IF;
				
				DROP TABLE _TMP_CONT_POLIZAS_DETALLE;
				DROP TABLE _TMP_CONT_POLIZAS_DETALLE_CE_CHEQUES; 
				DROP TABLE _TMP_CONT_POLIZAS_DETALLE_CE_TRANSFERENCIAS;
				DROP TABLE _TMP_CONT_POLIZAS_DETALLE_CE_OTRMETODOPAGO;
			END IF;

			--Ahora ejecuta los movimientos de caja y bancos
			_clase := '';
			FOR _REC_TMP_PAGOS IN ( select * from _TMP_PAGOS order by Partida asc ) 
			LOOP
				_BanCaj := _REC_TMP_PAGOS.ID_FormaPago; -- 1 cajas 0 bancos
					
				SELECT * INTO _errpart, _resultpart, _bancajmov 
				FROM  sp_bancos_movs_agregar( _BanCaj, _REC_TMP_PAGOS.ID_BanCaj, _Fecha, _Concepto, _Beneficiario, _REC_TMP_PAGOS.Total, 0.00, _REC_TMP_PAGOS.TipoMov, 
					'G', _Moneda, _TC, _Ref, _REC_TMP_PAGOS.RefPago, _id_clasificacion, _numpol, _REC_TMP_PAGOS.ID_SatBanco, _RFCOrigen, _REC_TMP_PAGOS.ID_SatMetodosPago, 
																		_REC_TMP_PAGOS.BancoExt, _REC_TMP_PAGOS.CuentaBanco, _REC_TMP_PAGOS.Cheque) as ( err integer, res varchar, clave integer);
				IF _errpart <> 0
				THEN
					_err := _errpart;
					_result := _resultpart;
					EXIT;
				END IF;

				INSERT INTO TBL_COMPRAS_DEVOLUCIONES_PAGOS
				VALUES(_ID_Devolucion, _bancajmov);
				
				IF _numPagos > 1
				THEN
					IF _BanCaj = 0
					THEN
						_clase := _clase || 'MBAN|' || cast(_bancajmov as varchar) || '|' || cast(_REC_TMP_PAGOS.ID_BanCaj as varchar) || '||;';
					ELSE
						_clase := _clase || 'MCAJ|' || cast(_bancajmov as varchar) || '|' || cast(_REC_TMP_PAGOS.ID_BanCaj as varchar) || '||;';
					END IF;
				ELSE
					IF _BanCaj = 0
					THEN
						_clase := 'MBAN|' || cast(_bancajmov as varchar) || '|' || cast(_REC_TMP_PAGOS.ID_BanCaj as varchar) || '||';
					ELSE
						_clase := 'MCAJ|' || cast(_bancajmov as varchar) || '|' || cast(_REC_TMP_PAGOS.ID_BanCaj as varchar) || '||';
					END IF;
				END IF;
			END LOOP;

			IF _Fija = '0' -- Aqui registra la referencia de las polizas de ingreso a sus movimientos de caja o bancos
			THEN
				IF _numPagos > 1
				THEN
					INSERT INTO TBL_REFERENCIAS_EXT
					VALUES(default,_clase)
					RETURNING currval(pg_get_serial_sequence(' TBL_REFERENCIAS_EXT', 'id_ref')) INTO _RefExt;
					UPDATE TBL_CONT_POLIZAS
					SET Ref = 'REXT|' || cast(_RefExt as varchar) || '|||'
					WHERE ID = _numpol;
		 		ELSE
					UPDATE TBL_CONT_POLIZAS
					SET Ref = _clase
					WHERE ID = _numpol;
				END IF;
			END IF;
		ELSIF _Condicion = 3 -- ningun metodo de pago
		THEN
			_clase = 'CDEV|' || cast(_ID_Devolucion as varchar) || '|' || cast(_ID_EntidadCompra as varchar) || '||';
				
			-- Procede a registrar la poliza si y solo si es una entidad dinamica
			-- Primero registra la deuda total del proveee para la partida doble en tmp
			_contPart := _contPart + 1;
			INSERT INTO _TMP_CONT_POLIZAS_DETALLE_TMP
			VALUES(_contPart, _CC_COMPNP, 'Devoluci√≥n/rebaja del documento por pagar', _Total, _Moneda, _TC, _TotalPesos, 0.0);
					
			IF _Fija = '0'
			THEN
				-- Primero registra y crea la tabla temporal de detalle de la poliza
				CREATE LOCAL TEMPORARY TABLE _TMP_CONT_POLIZAS_DETALLE (
					Part smallint NOT NULL ,
					Cuenta char(19) NOT NULL ,
					Concepto varchar(80) NOT NULL ,
					Parcial numeric(19,4) NOT NULL ,
					Moneda smallint NOT NULL ,
					TC numeric(19,4) NOT NULL ,
					Debe numeric(19,4) NOT NULL ,
					Haber numeric(19,4) NOT NULL
				);
				-- Fin de la tabla temporal
				-- si existen diferencias de centavos al convertir en moneda nacional los tipos de cambio, los registra
				_TotHaber := (select sum(Haber) from _TMP_CONT_POLIZAS_DETALLE_TMP);
				_TotDebe := (select sum(Debe) from _TMP_CONT_POLIZAS_DETALLE_TMP);
				IF _TotDebe > _TotHaber
				THEN
					_diff := _TotDebe - _TotHaber;
					_contPart := _contPart + 1;
					INSERT INTO _TMP_CONT_POLIZAS_DETALLE_TMP
					VALUES(_contPart, _CC_DCAF, 'Diferencia en decimales', _diff, 1, 1.0, 0.0, _diff);
				ELSIF _TotDebe < _TotHaber
				THEN
					_diff := _TotHaber - _TotDebe;
					_contPart := _contPart + 1;
					INSERT INTO _TMP_CONT_POLIZAS_DETALLE_TMP
					VALUES(_contPart, _CC_DCEC, 'Diferencia en decimales', _diff, 1, 1.0, _diff, 0.0);
				END IF;
				
				-- Inserta desde _TMP_CONT_POLIZAS_DETALLE_TMP
				INSERT INTO _TMP_CONT_POLIZAS_DETALLE
				SELECT * FROM  _TMP_CONT_POLIZAS_DETALLE_TMP;
				-- Agrega ahora la poliza principal
				--EXEC dbo.sp_cont_polizas_agregar_ext 'DR', @Fecha, @concepto, 0, @clase, @errpart OUTPUT, @numpol OUTPUT
				SELECT * INTO _errpart, _resultpart, _numpol 
				FROM sp_cont_polizas_agregar('DR', _Fecha, _Concepto,'0', _clase, _Cantidad, _id_clasificacion ) as ( err integer, res varchar, clave integer );
				IF _errpart <> 0
				THEN
					_err := _errpart;
					_result := _resultpart;
				ELSE
					UPDATE TBL_COMPRAS_DEVOLUCIONES_CAB
					SET ID_Pol = _numpol
					WHERE ID_VC = _ID_Devolucion;
				END IF;

				DROP TABLE _TMP_CONT_POLIZAS_DETALLE;
			
			END IF;
		END IF;
		
		DROP TABLE _TMP_CONT_POLIZAS_DETALLE_TMP;
		DROP TABLE _TMP_CONT_POLIZAS_DETALLE_CE_CHEQUES_TMP; 
		DROP TABLE _TMP_CONT_POLIZAS_DETALLE_CE_TRANSFERENCIAS_TMP;
		DROP TABLE _TMP_CONT_POLIZAS_DETALLE_CE_OTRMETODOPAGO_TMP;
		
		--Procede a agregar el movimiento al almac√©n
		IF _err = 0 AND _FijaCost = '0' AND _DevReb = 'DEV' and (select count(*) from _TMP_COMPRAS_FACTURAS_DET where Tipo = 'P') > 0
		THEN
			CREATE LOCAL TEMPORARY TABLE _TMP_INVSERV_ALMACEN_MOVIM_DET (
				ID_Bodega smallint NOT NULL ,
				ID_Prod varchar(20) NOT NULL ,
				Partida smallint NOT NULL ,
				Cantidad numeric(9, 3) NOT NULL ,
				Costo numeric(19,4) NULL 
			); 

			insert into _TMP_INVSERV_ALMACEN_MOVIM_DET
			select _ID_Bodega, ID_Prod, Partida, Cantidad, Precio 
			from _TMP_COMPRAS_FACTURAS_DET
			order by Partida ASC;
		
			SELECT * INTO _errpart, _resultpart, _ID_Movimiento 
			FROM sp_invserv_alm_movs_agregar(_Fecha, _ID_Bodega, (case when _AuditarAlm = '1' then 'P' else 'U' end), '53', _ConceptoCost, '',/*1 ENT 2 SAL*/ '2', _Ref, 'CDEV', _ID_Devolucion) as ( err integer, res varchar, clave integer );
			IF _errpart <> 0
			THEN
				_err := _errpart;
				_result := _resultpart;
			ELSE
				UPDATE TBL_COMPRAS_DEVOLUCIONES_CAB
				SET ID_PolCost = _ID_Movimiento
				WHERE ID_VC = _ID_Devolucion;
			END IF;
	
			DROP TABLE _TMP_INVSERV_ALMACEN_MOVIM_DET; 
		END IF;
		-- Fin del movimiento al almacen
		
	END IF; 
	
	RETURN QUERY SELECT _err, _result, _id_devolucion;
END
$BODY$
  LANGUAGE plpgsql;
--ALTER FUNCTION sp_compras_devoluciones_agregar(smallint, integer, integer, timestamp without time zone, character varying, smallint, numeric


--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_cfdcomp_agregar(_rfc character varying, _fecha timestamp without time zone, _total numeric, _impuesto numeric, _efecto character, _pedimento character varying, _fechapedimento character varying, _aduana character varying, _fsi_tipo character, _fsi_id integer, _nocertificado character varying, _sello character varying, _lugarexpedicion character varying, _metododepago character varying, _uuid character, _fechatimbre timestamp without time zone, _nocertificadosat character varying, _sellosat character varying)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255); _ID_CFD int;
BEGIN	
 	_err := 0;
	_result := 'El comprobante fiscal digitapor internet de la compl se registro correctamente';
	
	IF _err = 0
	THEN
		IF(select count(*) from TBL_CFDCOMP where UUID = _UUID) = 0
		THEN 
			INSERT INTO TBL_CFDCOMP
			VALUES(default,_RFC, _Fecha, _Total, _Impuesto, _Efecto, 
							_Pedimento, _FechaPedimento, _Aduana, _FSI_Tipo, _FSI_ID, _NoCertificado, _Sello, _LugarExpedicion, _MetodoDePago,
							_UUID, _FechaTimbre, _NoCertificadoSat, _SelloSat)
			RETURNING currval(pg_get_serial_sequence('TBL_CFDCOMP', 'id_cfd')) INTO _id_cfd;
		ELSE 
			IF (select FSI_Tipo from TBL_CFDCOMP where UUID = _UUID) = 'ENT'
			THEN
				_ID_CFD := (select ID_CFD from TBL_CFDCOMP where UUID = _UUID);
			
				UPDATE TBL_CFDCOMP
				SET RFC = _RFC, Fecha = _Fecha, Total = _Total, Impuesto = _Impuesto, Efecto = _Efecto, 
							Pedimento = _Pedimento, FechaPedimento = _FechaPedimento, Aduana = _Aduana, FSI_Tipo = _FSI_Tipo, FSI_ID = _FSI_ID, NoCertificado = _NoCertificado, Sello = _Sello, LugarExpedicion = _LugarExpedicion, MetodoDePago = _MetodoDePago,
							FechaTimbre = _FechaTimbre, NoCertificadoSat = _NoCertificadoSat, SelloSat = _SelloSat
				WHERE ID_CFD = _ID_CFD;
			ELSE
				_err := 3;
				_result := 'ERROR: El CFDI ya tiene un registro asociado en la base de datos. No se puede agregar';
			END IF;
		END IF;
	END IF;

	RETURN QUERY SELECT _err, _result;

END
$BODY$
  LANGUAGE plpgsql;
    
--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_cfdcompotr_agregar(
    _fsi_tipo character,
    _fsi_id integer,
    _cfd_cbb_serie character varying,
    _cfd_cbb_numfol integer,
    _numfactext character varying,
    _uuid character,
    _ext character varying,
    _nombre_original character varying,
    _total numeric,
    _id_moneda smallint,
    _tc numeric)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255); _ID_CFD int;
BEGIN	
 	_err := 0;
	_result := 'El comprobante fiscal cbb o factura extranjera se carg√≥ con √©xito';
	
	IF _err = 0
	THEN
		IF(select count(*) from TBL_CFDCOMPOTR where  CFD_CBB_Serie = _CFD_CBB_Serie and CFD_CBB_NumFol = _CFD_CBB_NumFol and NumFactExt = _NumFactExt and Total = _Total and ID_Moneda = _ID_Moneda ) < 1
		THEN 
			INSERT INTO TBL_CFDCOMPOTR
			VALUES(default, _FSI_Tipo, _FSI_ID, _cfd_cbb_serie, _cfd_cbb_numfol, _numfactext, _uuid, _ext, _nombre_original, _total, _id_moneda, _tc, now())
			RETURNING currval(pg_get_serial_sequence('TBL_CFDCOMPOTR', 'id_cfd')) INTO _id_cfd;

		ELSE 
			IF(select FSI_Tipo from TBL_CFDCOMPOTR where  CFD_CBB_Serie = _CFD_CBB_Serie and CFD_CBB_NumFol = _CFD_CBB_NumFol and NumFactExt = _NumFactExt and  Total = _Total and ID_Moneda = _ID_Moneda ) = 'ENT'
			THEN
				_ID_CFD := (select ID_CFD from TBL_CFDCOMPOTR where  CFD_CBB_Serie = _CFD_CBB_Serie and CFD_CBB_NumFol = _CFD_CBB_NumFol and NumFactExt = _NumFactExt and Total = _Total and ID_Moneda = _ID_Moneda );

				UPDATE TBL_CFDCOMPOTR
				SET FSI_Tipo = _fsi_tipo, FSI_ID = _fsi_id, UUID = _uuid, EXT = _ext, Nombre_Original = _nombre_original, TC = _tc, Fecha = now()
				WHERE ID_CFD = _ID_CFD;
			ELSE
				_err := 3;
				_result := 'ERROR: El comprobante fiscal cbb o factura extranjera ya tiene un registro asociado en la base de datos. No se puede agregar';
			END IF;
		END IF;
	END IF;

	RETURN QUERY SELECT _err, _result;

END
$BODY$
  LANGUAGE plpgsql;
  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_cfd_enlazar(
    _fsi_tipo character,
    _fsi_id integer,
    _uuid character)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255); _ID_CFD int; _id_pol integer; _id_poliza integer; _id_part smallint; _total numeric(19,4); _id_provee integer; _condicion smallint; _cc character(19); _rfc varchar(15);
	_id_moneda smallint; _tc numeric(19,4);
BEGIN	
 	_err := 0;
	_result := 'El comprobante fiscal digital s enlaz√≥ correctamente';
	
	IF _uuid <> ''
	THEN
		IF (select count(*) from TBL_CFDCOMP where UUID = _uuid) > 0
		THEN
			_ID_CFD := (select ID_CFD from TBL_CFDCOMP where UUID = _uuid) ;
		ELSE
			_err := 3;
			_result := 'ERROR: No se puede enlazar el CFDI al registro, porque no existe el UUID proporcionado';
		END IF;
	END IF;

	IF _err = 0
	THEN
		UPDATE TBL_CFDCOMP
		SET FSI_Tipo = _FSI_Tipo, FSI_ID = _FSI_ID
		WHERE ID_CFD = _ID_CFD;

		IF _FSI_Tipo = 'FAC'
		THEN
			UPDATE TBL_COMPRAS_FACTURAS_CAB
			SET ID_CFD = _ID_CFD, TFD = 3
			WHERE ID_VC = _FSI_ID;

			_total := (select total from tbl_compras_facturas_cab where id_vc = _FSI_ID);
			--_id_provee := (select id_clipro from tbl_compras_facturas_cab where id_vc = _FSI_ID);
			_condicion := (select condicion from tbl_compras_facturas_cab where id_vc = _FSI_ID);
			--_rfc := (select rfc from tbl_provee_provee where id_tipo = 'PR' and id_clave = _id_provee);
			_id_moneda :=  (select moneda from tbl_compras_facturas_cab where id_vc = _FSI_ID);
			_tc :=  (select tc from tbl_compras_facturas_cab where id_vc = _FSI_ID);
			
			IF _condicion = 0 --Contado
			THEN
				_id_pol := (select id_mov from tbl_compras_facturas_pagos where id_factura = _FSI_ID limit 1 );
				_id_poliza := (select pol_id from tbl_bancos_movimientos where id = _id_pol);
				_cc :=  (select valfanumerico from TBL_VARIABLES where ID_Variable = 'CC_COMCONT');
			ELSIF _condicion = 1 --Credito
			THEN
				_id_pol := (select id_pol from tbl_compras_facturas_cab where id_vc = _FSI_ID);
				_id_poliza := (select id_pol from TBL_PROVEE_CXP where id_cp = _id_pol);
				_cc :=  (select valfanumerico from TBL_VARIABLES where ID_Variable = 'CC_COMP');
			ELSE -- Ningun m√©todo de pago
				_id_poliza := (select id_pol from tbl_compras_facturas_cab where id_vc = _FSI_ID);
				_cc :=  (select valfanumerico from TBL_VARIABLES where ID_Variable = 'CC_COMP');
			END IF;

			IF _id_poliza IS NOT NULL
			THEN
				_id_part := (select Part from TBL_CONT_POLIZAS_DETALLE where ID = _id_poliza and Cuenta = _cc limit 1);
			END IF;
			--raise notice 'CXP % TOT % PRO % CON % POL % RFC %',_id_pol, _total, _id_provee, _condicion, _id_poliza, _rfc;
		ELSIF _FSI_Tipo = 'REC'
		THEN
			UPDATE TBL_COMPRAS_RECEPCIONES_CAB
			SET ID_CFD = _ID_CFD, TFD = 3
			WHERE ID_VC = _FSI_ID;
		ELSIF _FSI_Tipo = 'GAS'
		THEN
			UPDATE TBL_COMPRAS_GASTOS_CAB
			SET ID_CFD = _ID_CFD, TFD = 3
			WHERE ID_VC = _FSI_ID;
			
			_total := (select total from tbl_compras_gastos_cab where id_vc = _FSI_ID);
			--_id_provee := (select id_clipro from tbl_compras_gastos_cab where id_vc = _FSI_ID);
			_condicion := (select condicion from tbl_compras_gastos_cab where id_vc = _FSI_ID);
			--_rfc := (select rfc from tbl_provee_provee where id_tipo = 'PR' and id_clave = _id_provee);
			_id_moneda :=  (select moneda from tbl_compras_gastos_cab where id_vc = _FSI_ID);
			_tc :=  (select tc from tbl_compras_gastos_cab where id_vc = _FSI_ID);
			
			IF _condicion = 0 --Contado
			THEN
				_id_pol := (select id_mov from tbl_compras_gastos_pagos where id_gasto = _FSI_ID limit 1 );
				_id_poliza := (select pol_id from tbl_bancos_movimientos where id = _id_pol);
			ELSIF _condicion = 1 --Credito
			THEN
				_id_pol := (select id_pol from tbl_compras_gastos_cab where id_vc = _FSI_ID);
				_id_poliza := (select id_pol from TBL_PROVEE_CXP where id_cp = _id_pol);
			ELSE
				_id_poliza := (select id_pol from tbl_compras_gastos_cab where id_vc = _FSI_ID);
			END IF;
			-- En gastos, el cfdi se enlaza a la primera partida de la poliza porque no existe base 
			-- de cuenta contable como Compras de Credito o de contado, que si existen en facturas de materias primas
			IF _id_poliza IS NOT NULL
			THEN
				_id_part := 1;
			END IF;
			raise notice 'PP % TOT % PRO % CON % POL % PART % RFC %',_id_pol, _total, _id_provee, _condicion, _id_poliza, _id_part, _rfc;
		ELSE -- IF _FSI_Tipo = 'DSV'
			UPDATE TBL_COMPRAS_DEVOLUCIONES_CAB
			SET ID_CFD = _ID_CFD, TFD = 3
			WHERE ID_VC = _FSI_ID;

			_total := (select total from tbl_compras_devoluciones_cab where id_vc = _FSI_ID);
			--_id_provee := (select id_clipro from tbl_compras_devoluciones_cab where id_vc = _FSI_ID);
			_condicion := (select condicion from tbl_compras_devoluciones_cab where id_vc = _FSI_ID);
			--_rfc := (select rfc from tbl_provee_provee where id_tipo = 'PR' and id_clave = _id_provee);
			_id_moneda :=  (select moneda from tbl_compras_devoluciones_cab where id_vc = _FSI_ID);
			_tc :=  (select tc from tbl_compras_devoluciones_cab where id_vc = _FSI_ID);
			
			IF _condicion = 0 --Contado
			THEN
				_id_pol := (select id_mov from tbl_compras_devoluciones_pagos where id_devolucion = _FSI_ID limit 1 );
				_id_poliza := (select pol_id from tbl_bancos_movimientos where id = _id_pol);
				_cc := (select valfanumerico from TBL_VARIABLES where ID_Variable = 'CC_DSCCONT');
			ELSIF _condicion = 1 --Credito
			THEN
				_id_pol := (select id_pol from tbl_compras_devoluciones_cab where id_vc = _FSI_ID);
				_id_poliza := (select id_pol from TBL_PROVEE_CXP where id_cp = _id_pol);
				_cc := (select cc from TBL_PROVEE_CXP_CONCEPTOS where ID_Concepto = (select id_concepto from TBL_PROVEE_CXP where id_cp = _id_pol) );
			ELSE
				_id_poliza := (select id_pol from tbl_compras_devoluciones_cab where id_vc = _FSI_ID);
				_cc := (select valfanumerico from TBL_VARIABLES where ID_Variable = 'CC_DSC');
			END IF;

			IF _id_poliza IS NOT NULL
			THEN
				_id_part := (select Part from TBL_CONT_POLIZAS_DETALLE where ID = _id_poliza and Cuenta = _cc limit 1);
			END IF;
		END IF;

		--Ahora enlaza a la contabilidad electr√≥nica en caso de  factura o gasto
		IF _id_poliza IS NOT NULL and _id_part IS NOT NULL
		THEN
			--Si existe la partida ingresa registro de comprobante .... Puede no ingresar en el caso que se haya cambiado la variable despues de ingresar la compra o gasto
			INSERT INTO TBL_CONT_POLIZAS_DETALLE_CE_COMPROBANTES( id_pol, id_part, uuid_cfdi, monto, rfc, id_tipo, moneda, tipcamb, cfd_cbb_serie, cfd_cbb_numfol, numfactext, taxid )
			SELECT _id_poliza, _id_part, _uuid, Total, RFC, 'CompNal',  (select id_satmoneda from tbl_cont_monedas where clave = _id_moneda), _tc, '', 0, '', ''
			FROM TBL_CFDCOMP 
			WHERE ID_CFD = _ID_CFD;
		END IF;
		
	END IF;

	RETURN QUERY SELECT _err, _result, _fsi_id;

END
$BODY$
  LANGUAGE plpgsql;
--ALTER FUNCTION sp_cfd_enlazar(character, integer, character)


--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_cfd_enlazarcbbext(
    _fsi_tipo character,
    _fsi_id integer,
    _uuid character)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255); _ID_CFD int; _id_pol integer; _id_poliza integer; _id_part smallint; _total numeric(19,4); _id_provee integer; _condicion smallint; _cc character(19); _rfc varchar(15);
	_TipoComprobante varchar(10); _taxid varchar(30); _id_moneda smallint; _CBBEXT smallint;
BEGIN	
 	_err := 0;
	_result := 'El comprobante fiscal digital se enlaz√≥ correctamente';
	
	IF _uuid <> ''
	THEN
		IF (select count(*) from TBL_CFDCOMPOTR where UUID = _uuid) > 0
		THEN
			_ID_CFD := (select ID_CFD from TBL_CFDCOMPOTR where UUID = _uuid) ;
		ELSE
			_err := 3;
			_result := 'ERROR: No se puede enlazar el CBB o Factura Extranjera al registro, porque no existe el Archivo proporcionado';
		END IF;
	END IF;

	IF _err = 0
	THEN
		UPDATE TBL_CFDCOMPOTR
		SET FSI_Tipo = _FSI_Tipo, FSI_ID = _FSI_ID
		WHERE ID_CFD = _ID_CFD;

		_TipoComprobante := (select CASE WHEN numfactext = '' THEN 'CompNalOtr' ELSE 'CompExt' END from tbl_cfdcompotr where id_cfd = _ID_CFD );
		_CBBEXT := (select CASE WHEN numfactext = '' THEN 4 ELSE 5 END from tbl_cfdcompotr where id_cfd = _ID_CFD );
		
		IF _FSI_Tipo = 'FAC'
		THEN
			UPDATE TBL_COMPRAS_FACTURAS_CAB
			SET ID_CFD = _ID_CFD, TFD = _CBBEXT
			WHERE ID_VC = _FSI_ID;

			--_total := (select total from tbl_compras_facturas_cab where id_vc = _FSI_ID);
			_id_provee := (select id_clipro from tbl_compras_facturas_cab where id_vc = _FSI_ID);
			_condicion := (select condicion from tbl_compras_facturas_cab where id_vc = _FSI_ID);
			if _id_provee = 0 
			then
				_rfc := 'XAXX010101000';
				_taxid := 'XEXX010101000';
			else
				_rfc := case when _TipoComprobante = 'CompNalOtr' then (select rfc from tbl_provee_provee where id_tipo = 'PR' and id_clave = _id_provee) else '' end;
				_taxid := case when _TipoComprobante = 'CompExt' then (select rfc from tbl_provee_provee where id_tipo = 'PR' and id_clave = _id_provee) else '' end;
			end if;
			_id_moneda :=  (select moneda from tbl_compras_facturas_cab where id_vc = _FSI_ID);
			
			IF _condicion = 0 --Contado
			THEN
				_id_pol := (select id_mov from tbl_compras_facturas_pagos where id_factura = _FSI_ID limit 1 );
				_id_poliza := (select pol_id from tbl_bancos_movimientos where id = _id_pol);
				_cc :=  (select valfanumerico from TBL_VARIABLES where ID_Variable = 'CC_COMCONT');
			ELSIF _condicion = 1
			THEN
				_id_pol := (select id_pol from tbl_compras_facturas_cab where id_vc = _FSI_ID);
				_id_poliza := (select id_pol from TBL_PROVEE_CXP where id_cp = _id_pol);
				_cc :=  (select valfanumerico from TBL_VARIABLES where ID_Variable = 'CC_COMP');
			ELSE
				_id_poliza := (select id_pol from tbl_compras_facturas_cab where id_vc = _FSI_ID);
				_cc :=  (select valfanumerico from TBL_VARIABLES where ID_Variable = 'CC_COMP');
			END IF;

			IF _id_poliza IS NOT NULL
			THEN
				_id_part := (select Part from TBL_CONT_POLIZAS_DETALLE where ID = _id_poliza and Cuenta = _cc limit 1);
			END IF;
			--raise notice 'CXP % TOT % PRO % CON % POL % RFC %',_id_pol, _total, _id_provee, _condicion, _id_poliza, _rfc;
		ELSIF _FSI_Tipo = 'REC'
		THEN
			UPDATE TBL_COMPRAS_RECEPCIONES_CAB
			SET ID_CFD = _ID_CFD, TFD = _CBBEXT
			WHERE ID_VC = _FSI_ID;
		ELSIF _FSI_Tipo = 'GAS'
		THEN
			UPDATE TBL_COMPRAS_GASTOS_CAB
			SET ID_CFD = _ID_CFD, TFD = _CBBEXT
			WHERE ID_VC = _FSI_ID;
			
			--_total := (select total from tbl_compras_gastos_cab where id_vc = _FSI_ID);
			_id_provee := (select id_clipro from tbl_compras_gastos_cab where id_vc = _FSI_ID);
			_condicion := (select condicion from tbl_compras_gastos_cab where id_vc = _FSI_ID);
			if _id_provee = 0 
			then
				_rfc := 'XAXX010101000';
				_taxid := 'XEXX010101000';
			else
				_rfc := case when _TipoComprobante = 'CompNalOtr' then (select rfc from tbl_provee_provee where id_tipo = 'PR' and id_clave = _id_provee) else '' end;
				_taxid := case when _TipoComprobante = 'CompExt' then (select rfc from tbl_provee_provee where id_tipo = 'PR' and id_clave = _id_provee) else '' end;
			end if;
			_id_moneda :=  (select moneda from tbl_compras_gastos_cab where id_vc = _FSI_ID);
			
			IF _condicion = 0 --Contado
			THEN
				_id_pol := (select id_mov from tbl_compras_gastos_pagos where id_gasto = _FSI_ID limit 1 );
				_id_poliza := (select pol_id from tbl_bancos_movimientos where id = _id_pol);
			ELSIF _condicion = 1
			THEN
				_id_pol := (select id_pol from tbl_compras_gastos_cab where id_vc = _FSI_ID);
				_id_poliza := (select id_pol from TBL_PROVEE_CXP where id_cp = _id_pol);
			ELSE
				_id_poliza := (select id_pol from tbl_compras_gastos_cab where id_vc = _FSI_ID);
			END IF;
			-- En gastos, el cfdi se enlaza a la primera partida de la poliza porque no existe base 
			-- de cuenta contable como Compras de Credito o de contado, que si existen en facturas de materias primas
			IF _id_poliza IS NOT NULL
			THEN
				_id_part := 1;
			END IF;
			raise notice 'PP % TOT % PRO % CON % POL % PART % RFC %',_id_pol, _total, _id_provee, _condicion, _id_poliza, _id_part, _rfc;
		ELSE -- IF _FSI_Tipo = 'DSV'
			UPDATE TBL_COMPRAS_DEVOLUCIONES_CAB
			SET ID_CFD = _ID_CFD, TFD = _CBBEXT
			WHERE ID_VC = _FSI_ID;

			--_total := (select total from tbl_compras_devoluciones_cab where id_vc = _FSI_ID);
			_id_provee := (select id_clipro from tbl_compras_devoluciones_cab where id_vc = _FSI_ID);
			_condicion := (select condicion from tbl_compras_devoluciones_cab where id_vc = _FSI_ID);
			if _id_provee = 0 
			then
				_rfc := 'XAXX010101000';
				_taxid := 'XEXX010101000';
			else
				_rfc := case when _TipoComprobante = 'CompNalOtr' then (select rfc from tbl_provee_provee where id_tipo = 'PR' and id_clave = _id_provee) else '' end;
				_taxid := case when _TipoComprobante = 'CompExt' then (select rfc from tbl_provee_provee where id_tipo = 'PR' and id_clave = _id_provee) else '' end;
			end if;
			_id_moneda :=  (select moneda from tbl_compras_devoluciones_cab where id_vc = _FSI_ID);
			
			IF _condicion = 0 --Contado
			THEN
				_id_pol := (select id_mov from tbl_compras_devoluciones_pagos where id_devolucion = _FSI_ID limit 1 );
				_id_poliza := (select pol_id from tbl_bancos_movimientos where id = _id_pol);
				_cc := (select valfanumerico from TBL_VARIABLES where ID_Variable = 'CC_DSCCONT');
			ELSIF _condicion = 1
			THEN
				_id_pol := (select id_pol from tbl_compras_devoluciones_cab where id_vc = _FSI_ID);
				_id_poliza := (select id_pol from TBL_PROVEE_CXP where id_cp = _id_pol);
				_cc := (select cc from TBL_PROVEE_CXP_CONCEPTOS where ID_Concepto = (select id_concepto from TBL_PROVEE_CXP where id_cp = _id_pol) );
			ELSE
				_id_poliza := (select id_pol from tbl_compras_devoluciones_cab where id_vc = _FSI_ID);
				_cc := (select valfanumerico from TBL_VARIABLES where ID_Variable = 'CC_DSC');
			END IF;

			IF _id_poliza IS NOT NULL
			THEN
				_id_part := (select Part from TBL_CONT_POLIZAS_DETALLE where ID = _id_poliza and Cuenta = _cc limit 1);
			END IF;
		END IF;

		--Ahora enlaza a la contabilidad electr√≥nica en caso de  factura o gasto
		IF _id_poliza IS NOT NULL and _id_part IS NOT NULL
		THEN
			--Si existe la partida ingresa registro de comprobante .... Puede no ingresar en el caso que se haya cambiado la variable despues de ingresar la compra o gasto
			INSERT INTO TBL_CONT_POLIZAS_DETALLE_CE_COMPROBANTES( id_pol, id_part, uuid_cfdi, monto, rfc, id_tipo, moneda, tipcamb, cfd_cbb_serie, cfd_cbb_numfol, numfactext, taxid )
			SELECT _id_poliza, _id_part, _uuid, Total, _RFC, _TipoComprobante, (select id_satmoneda from tbl_cont_monedas where clave = _id_moneda), TC, CFD_CBB_Serie, CFD_CBB_NumFol, NumFactExt, _TaxID 
			FROM TBL_CFDCOMPOTR
			WHERE ID_CFD = _ID_CFD;
		END IF;
		
	END IF;

	RETURN QUERY SELECT _err, _result, _fsi_id;

END
$BODY$
  LANGUAGE plpgsql;
--ALTER FUNCTION sp_cfd_enlazarcbbext(character, integer, character)

  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_compras_ordenes_cancelar(_id_orden integer, _id_entidadcompra smallint)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255);

BEGIN
	_err := 0;
	_result := 'La orden se cancel√≥ con exito';
	
	IF _err = 0
	THEN
		UPDATE TBL_COMPRAS_ORDENES_CAB
		SET Status = 'C'
		WHERE ID_VC = _ID_Orden;

	END IF;

	RETURN QUERY SELECT _err, _result, _id_orden;

END
$BODY$
  LANGUAGE plpgsql;
  
  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_compras_recepciones_cancelar(_id_recepcion integer, _id_entidadcompra smallint)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_Numero int; _Fecha timestamp; _ID_PolCost int; _err int; _result varchar(255); _errpart int; 
	_resultpart varchar(255); _Ref varchar(25); _ID_Movimiento int; _ID_Bodega smallint;
 	_mes smallint; _ano smallint; _ID_Orden int; _ID_CFD int; _TFD smallint;
BEGIN
	_err := 0;
	_result := 'La Recepcion se ha cancelado satisfactoriamente';
	_Fecha := (select Fecha from TBL_COMPRAS_RECEPCIONES_CAB where ID_VC = _ID_Recepcion);
	_Numero := (select Numero from TBL_COMPRAS_RECEPCIONES_CAB where ID_VC = _ID_Recepcion);
	_ID_Movimiento := (select ID_PolCost from TBL_COMPRAS_RECEPCIONES_CAB where ID_VC = _ID_Recepcion); -- el id del movimiento al almacen
	_ID_Bodega := (select ID_Bodega from TBL_COMPRAS_RECEPCIONES_CAB where ID_VC = _ID_Recepcion);

	_mes := date_part('month',_Fecha);
	_ano := date_part('year',_Fecha);
	
	_ID_Orden := (select ID_VC from TBL_COMPRAS_ORDENES_CAB where ID_Factura = _ID_Recepcion and TipoEnlace = 'VREC');
	
	_ID_CFD := (select ID_CFD from TBL_COMPRAS_RECEPCIONES_CAB WHERE ID_VC = _ID_Recepcion);
	_TFD := (select TFD from TBL_COMPRAS_RECEPCIONES_CAB WHERE ID_VC = _ID_Recepcion);
	
	IF(select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano and Cerrado = 1) > 0
	OR (select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano) < 1
	THEN
		_err := 3;
		_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_POLIZAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'ERROR: La fecha de poliza pertenece a un periodo cerrado o inexistente'
	END IF;

	IF ( select ventero from TBL_VARIABLES where ID_Variable = 'MVCF' ) = 1
	THEN
		IF (select count(*) from TBL_INVSERV_CHFIS_CAB where ID_Bodega = _ID_Bodega and ( Cerrado = '1' or Generado = '1') and Status <> 'C' and Fecha >= _Fecha) > 0
		THEN
			_err := 3;
			_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ALM_CHFIS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR');--'ERROR: No se puede generar el movimiento al almacen porque ya existe un chequeo f?sico cerrado en esta bodega, con fecha posterior a este movimiento';
		END IF;
	END IF;

	IF _err = 0
	THEN
		UPDATE TBL_COMPRAS_RECEPCIONES_CAB
		SET Status = 'C'
		WHERE ID_VC = _ID_Recepcion;
		
		-- procede a desligar el CFDI que supuestamente esta cancelado por el proveedor, ya previamente se movio a los documentos cancelados
		IF _ID_CFD is not null
		THEN
			IF (select FSI_Tipo from TBL_CFDCOMP where ID_CFD = _ID_CFD) = 'REC' and (select FSI_ID from TBL_CFDCOMP where ID_CFD = _ID_CFD) = _ID_Recepcion
			THEN 
				UPDATE TBL_CFDCOMP
				SET FSI_Tipo = 'ENT', FSI_ID = _ID_EntidadCompra
				WHERE ID_CFD = _ID_CFD;
			END IF;
			
			UPDATE TBL_COMPRAS_RECEPCIONES_CAB
			SET ID_CFD = null
			WHERE ID_VC = _ID_Recepcion;
		END IF;
		

		-- procede a desligar la orden asociada ( SI LO HAY PARA ESTA RECEPCION )
		IF _ID_Orden is not null
		THEN
			UPDATE TBL_COMPRAS_ORDENES_CAB
			SET Status = 'G', ID_Factura = 0, TipoEnlace = null
			WHERE ID_VC = _ID_Orden;
		END IF;
		
		-- procede a cancelar los detalles del movimiento al almacen
		IF _ID_Movimiento is not null
		THEN
			
			SELECT * INTO _errpart, _resultpart, _id_polcost FROM sp_invserv_alm_movs_cancelar( _id_movimiento ) as ( err integer, res varchar, clave integer );
			IF _errpart <> 0
			THEN
				_err := _errpart;
				_result := _resultpart;
			END IF;
		END IF;
	END IF;		

	RETURN QUERY SELECT _err, _result, _ID_Recepcion;

END
$BODY$
  LANGUAGE plpgsql;
  
--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_compras_facturas_cancelar(
    _id_factura integer,
    _id_entidadcompra smallint)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_Numero int; _Fecha timestamp; _ID_Pol int; _ID_PolCost int; _err int; _result varchar(255); _errpart int; 
	_resultpart varchar(255); _Ref varchar(25); _ID_CXP int; _ID_Movimiento int; _ID_Bodega smallint;
 	_ID_BanCaj int; _Condicion smallint; _mes smallint; _ano smallint; _ID_Orden int; _ID_Recepcion int;
 	_ID_CFD int; _TFD smallint; 
 	_REC_TMP_PAGOS RECORD; 
BEGIN
	_err := 0;
	_result := 'La Compra Factura se ha cancelado satisfactoriamente';
	_Fecha := (select Fecha from TBL_COMPRAS_FACTURAS_CAB where ID_VC = _ID_Factura);
	_Numero := (select Numero from TBL_COMPRAS_FACTURAS_CAB where ID_VC = _ID_Factura);
	_ID_Movimiento := (select ID_PolCost from TBL_COMPRAS_FACTURAS_CAB where ID_VC = _ID_Factura); -- el id del movimiento al almacen
	_ID_CXP := (select ID_Pol from TBL_COMPRAS_FACTURAS_CAB where ID_VC = _ID_Factura); 
	_ID_Bodega := (select ID_Bodega from TBL_COMPRAS_FACTURAS_CAB where ID_VC = _ID_Factura);
	_Condicion := (select Condicion from TBL_COMPRAS_FACTURAS_CAB where ID_VC = _ID_Factura);
	
	_mes := date_part('month',_Fecha);
	_ano := date_part('year',_Fecha);
	
	_ID_Orden := (select ID_VC from TBL_COMPRAS_ORDENES_CAB where ID_Factura = _ID_Factura and TipoEnlace = 'CFAC');
	_ID_Recepcion := (select ID_VC from TBL_COMPRAS_RECEPCIONES_CAB where ID_Factura = _ID_Factura);

	_ID_CFD := (select ID_CFD from TBL_COMPRAS_FACTURAS_CAB WHERE ID_VC = _ID_Factura);
	_TFD := (select TFD from TBL_COMPRAS_FACTURAS_CAB WHERE ID_VC = _ID_Factura);
	
	IF(select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano and Cerrado = 1) > 0
	OR (select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano) < 1
	THEN
		_err := 3;
		_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_POLIZAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'ERROR: La fecha de poliza pertenece a un periodo cerrado o inexistente'
	END IF;

	IF ( select ventero from TBL_VARIABLES where ID_Variable = 'MVCF' ) = 1
	THEN
		IF (select count(*) from TBL_INVSERV_CHFIS_CAB where ID_Bodega = _ID_Bodega and ( Cerrado = '1' or Generado = '1') and Status <> 'C' and Fecha >= _Fecha) > 0
		THEN
			_err := 3;
			_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ALM_CHFIS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR');--'ERROR: No se puede generar el movimiento al almacen porque ya existe un chequeo f?sico cerrado en esta bodega, con fecha posterior a este movimiento';
		END IF;
	END IF;

	IF _err = 0
	THEN
		UPDATE TBL_COMPRAS_FACTURAS_CAB
		SET Status = 'C'
		WHERE ID_VC = _ID_Factura;
		
		--procede a cancelar el CFD
		IF _ID_CFD is not null
		THEN
			IF (select FSI_Tipo from TBL_CFDCOMP where ID_CFD = _ID_CFD) = 'FAC' and (select FSI_ID from TBL_CFDCOMP where ID_CFD = _ID_CFD) = _ID_Factura
			THEN 
				UPDATE TBL_CFDCOMP
				SET FSI_Tipo = 'ENT', FSI_ID = _ID_EntidadCompra
				WHERE ID_CFD = _ID_CFD;
			END IF;
			
			UPDATE TBL_COMPRAS_FACTURAS_CAB
			SET ID_CFD = null
			WHERE ID_VC = _ID_Factura;
		END IF;

		-- procede a desligar la orden asociada ( SI LO HAY PARA ESTA FACTURA )
		IF _ID_Orden is not null
		THEN
			UPDATE TBL_COMPRAS_ORDENES_CAB
			SET Status = 'G', ID_Factura = 0, TipoEnlace = null
			WHERE ID_VC = _ID_Orden;
		END IF;

		IF _ID_Recepcion is not null
		THEN
			UPDATE TBL_COMPRAS_RECEPCIONES_CAB
			SET ID_Factura = 0
			WHERE ID_VC = _ID_Recepcion;
		END IF;

		--Procede a la cancelacion de la CXP o PAGOS
		IF _Condicion = 0
		THEN
			FOR _REC_TMP_PAGOS IN  (select ID_Mov from  tbl_compras_facturas_pagos where ID_Factura = _ID_Factura)
			LOOP
				SELECT * INTO _errpart, _resultpart, _id_bancaj FROM sp_bancos_movs_cancelar(_REC_TMP_PAGOS.ID_Mov) as ( err integer, res varchar, clave integer );
				IF _errpart <> 0
				THEN
					_err := 3;
					_result := _resultpart;
					EXIT;
				END IF;
			END LOOP;
		ELSIF _Condicion = 1
		THEN
			SELECT * INTO _errpart, _resultpart, _id_pol FROM sp_provee_cxp_cancelar(_id_cxp) as ( err integer, res varchar, clave integer );
			IF _errpart <> 0
			THEN
				_err := 3;
				_result := _resultpart;
			END IF;
		ELSE --Ningun pago... id_cxp es en realidad la poliza del documento por pagar
			--Procede a cancelar la poliza
			IF _ID_CXP is not null
			THEN
				SELECT * INTO _errpart, _resultpart, _id_pol FROM sp_cont_polizas_cancelar(_ID_CXP, _Fecha) as ( err integer, res varchar, clave integer );
				IF _errpart <> 0
				THEN
					_err := 3;
					_result := _resultpart;
				END IF;
			END IF;
		END IF;
		
		-- procede a cancelar los detalles del movimiento al almacen
		IF _err = 0 AND _ID_Movimiento is not null
		THEN
			SELECT * INTO _errpart, _resultpart, _id_polcost FROM sp_invserv_alm_movs_cancelar( _id_movimiento ) as ( err integer, res varchar, clave integer );
			IF _errpart <> 0
			THEN
				_err := _errpart;
				_result := _resultpart;
			END IF;
		END IF;

	END IF;		

	RETURN QUERY SELECT _err, _result, _ID_Factura;

END
$BODY$
  LANGUAGE plpgsql;
--ALTER FUNCTION sp_compras_facturas_cancelar(integer, smallint)
  
  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_compras_devoluciones_cancelar(
    _id_devolucion integer,
    _id_entidadcompra smallint)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_Numero int; _Fecha timestamp; _ID_Pol int; _ID_PolCost int; _err int; _result varchar(255); _errpart int; 
	_resultpart varchar(255); _Ref varchar(25); _ID_CXP int; _ID_Movimiento int; _ID_Bodega smallint;
 	_ID_BanCaj int; _Condicion smallint; _mes smallint; _ano smallint; 
 	_ID_CFD int; _TFD smallint;
 	_REC_TMP_PAGOS RECORD; 
BEGIN
	_err := 0;
	_result := 'La Devoluci√≥n se ha cancelado satisfactoriamente';
	_Fecha := (select Fecha from TBL_COMPRAS_DEVOLUCIONES_CAB where ID_VC = _ID_Devolucion);
	_Numero := (select Numero from TBL_COMPRAS_DEVOLUCIONES_CAB where ID_VC = _ID_Devolucion);
	_ID_Movimiento := (select ID_PolCost from TBL_COMPRAS_DEVOLUCIONES_CAB where ID_VC = _ID_Devolucion); -- el id del movimiento al almacen
	_ID_CXP := (select ID_Pol from TBL_COMPRAS_DEVOLUCIONES_CAB where ID_VC = _ID_Devolucion); 
	_ID_Bodega := (select ID_Bodega from TBL_COMPRAS_DEVOLUCIONES_CAB where ID_VC = _ID_Devolucion);
	_Condicion := (select Condicion from TBL_COMPRAS_DEVOLUCIONES_CAB where ID_VC = _ID_Devolucion);
	
	_mes := date_part('month',_Fecha);
	_ano := date_part('year',_Fecha);
	
	_ID_CFD := (select ID_CFD from TBL_COMPRAS_DEVOLUCIONES_CAB WHERE ID_VC = _ID_Devolucion);
	_TFD := (select TFD from TBL_COMPRAS_DEVOLUCIONES_CAB WHERE ID_VC = _ID_Devolucion);

	IF(select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano and Cerrado = 1) > 0
	OR (select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano) < 1
	THEN
		_err := 3;
		_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_POLIZAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'ERROR: La fecha de poliza pertenece a un periodo cerrado o inexistente'
	END IF;

	IF ( select ventero from TBL_VARIABLES where ID_Variable = 'MVCF' ) = 1
	THEN
		IF (select count(*) from TBL_INVSERV_CHFIS_CAB where ID_Bodega = _ID_Bodega and ( Cerrado = '1' or Generado = '1') and Status <> 'C' and Fecha >= _Fecha) > 0
		THEN
			_err := 3;
			_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ALM_CHFIS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR');--'ERROR: No se puede generar el movimiento al almacen porque ya existe un chequeo f?sico cerrado en esta bodega, con fecha posterior a este movimiento';
		END IF;
	END IF;

	IF _err = 0
	THEN
		UPDATE TBL_COMPRAS_DEVOLUCIONES_CAB
		SET Status = 'C'
		WHERE ID_VC = _ID_Devolucion;
		
		--procede a cancelar el CFD
		IF _ID_CFD is not null
		THEN
			IF (select FSI_Tipo from TBL_CFDCOMP where ID_CFD = _ID_CFD) = 'DSC' and (select FSI_ID from TBL_CFDCOMP where ID_CFD = _ID_CFD) = _ID_Devolucion
			THEN 
				UPDATE TBL_CFDCOMP
				SET FSI_Tipo = 'ENT', FSI_ID = _ID_EntidadCompra
				WHERE ID_CFD = _ID_CFD;
			END IF;
			
			UPDATE TBL_COMPRAS_DEVOLUCIONES_CAB
			SET ID_CFD = null
			WHERE ID_VC = _ID_Devolucion;
		END IF;

		--Procede a la cancelacion de la CXP o PAGOS
		IF _Condicion = 0
		THEN
			FOR _REC_TMP_PAGOS IN  (select ID_Mov from  tbl_compras_devoluciones_pagos where ID_Devolucion = _ID_Devolucion)
			LOOP
				SELECT * INTO _errpart, _resultpart, _id_bancaj FROM sp_bancos_movs_cancelar(_REC_TMP_PAGOS.ID_Mov) as ( err integer, res varchar, clave integer );
				IF _errpart <> 0
				THEN
					_err := 3;
					_result := _resultpart;
					EXIT;
				END IF;
			END LOOP;
	
		ELSE
			SELECT * INTO _errpart, _resultpart, _id_pol FROM sp_provee_cxp_cancelar(_id_cxp) as ( err integer, res varchar, clave integer );
			IF _errpart <> 0
			THEN
				_err := 3;
				_result := _resultpart;
			END IF;

		END IF;
		
		-- procede a cancelar los detalles del movimiento al almacen
		IF _err = 0 AND _ID_Movimiento is not null
		THEN
			SELECT * INTO _errpart, _resultpart, _id_polcost FROM sp_invserv_alm_movs_cancelar( _id_movimiento ) as ( err integer, res varchar, clave integer );
			IF _errpart <> 0
			THEN
				_err := _errpart;
				_result := _resultpart;
			END IF;
		END IF;

	END IF;		

	RETURN QUERY SELECT _err, _result, _ID_Devolucion;

END
$BODY$
  LANGUAGE plpgsql;
--ALTER FUNCTION sp_compras_devoluciones_cancelar(integer, smallint)


--@FIN_BLOQUE
INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('COMP_GAS');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('COMP_GAS_AGREGAR');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('COMP_GAS_CONSULTAR');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('COMP_GAS_CANCELAR');     

--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_compras_gastos_cab AS 
 SELECT rc.id_vc AS id_factura, rc.id_bodega, b.nombre, rc.id_clipro AS id_proveedor, 
        CASE
            WHEN rc.id_clipro = 0 THEN 0
            ELSE ( SELECT p.id_numero
               FROM tbl_provee_provee p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'PR'::bpchar)
        END AS numero, rc.fechaenvio, rc.condicion, rc.obs, mon.moneda, rc.mimporte AS importe, rc.mdescuento AS descuento, rc.msubtotal AS subtotal, rc.miva AS iva, rc.ieps, rc.ivaret, rc.isrret, rc.mtotal AS total, 
        CASE
            WHEN rc.id_clipro = 0 THEN ''::character varying
            ELSE ( SELECT p.direccion
               FROM tbl_provee_provee p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'PR'::bpchar)
        END AS direccion, 
        CASE
            WHEN rc.id_clipro = 0 THEN ''::character varying
            ELSE ( SELECT p.cp
               FROM tbl_provee_provee p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'PR'::bpchar)
        END AS cp, 
        CASE
            WHEN rc.id_clipro = 0 THEN ''::character varying
            ELSE ( SELECT p.tel
               FROM tbl_provee_provee p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'PR'::bpchar)
        END AS tel, 
        CASE
            WHEN rc.id_clipro = 0 THEN ''::character varying
            ELSE ( SELECT p.poblacion
               FROM tbl_provee_provee p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'PR'::bpchar)
        END AS poblacion, 
        CASE
            WHEN rc.id_clipro = 0 THEN ''::character varying
            ELSE ( SELECT p.colonia
               FROM tbl_provee_provee p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'PR'::bpchar)
        END AS colonia, 
        CASE
            WHEN rc.id_clipro = 0 THEN 'XAXX010101000'::character varying
            ELSE ( SELECT p.rfc
               FROM tbl_provee_provee p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'PR'::bpchar)
        END AS rfc
   FROM tbl_compras_gastos_cab rc
   JOIN tbl_invserv_bodegas b ON rc.id_bodega = b.id_bodega
   JOIN tbl_cont_monedas mon ON rc.moneda = mon.clave;


--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_compras_gastos_det AS 
 SELECT rd.id_vc AS id_factura, rd.partida, rd.cantidad, rd.id_prod, c.descripcion, c.id_unidadsalida, rd.precio, rd.descuento, rd.iva, rd.ieps, rd.ivaret, rd.isrret, rd.obs, rd.importe, rd.importedesc, rd.importeiva, rd.importeieps, rd.importeivaret, rd.importeisrret, rd.totalpart, c.id_tipo
   FROM tbl_compras_gastos_det rd
   JOIN tbl_invserv_inventarios c ON rd.id_prod::text = c.id_prod::text;

--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_compras_gastos_modulo AS 
 SELECT rc.id_vc AS id_gasto, rc.id_entidad, rc.numero, rc.fecha, rc.referencia, rc.status, rc.moneda, mon.simbolo, rc.tc, rc.mtotal AS total, rc.id_clipro AS id_proveedor, 
        CASE
            WHEN rc.id_clipro = 0 THEN 'Proveedor de Mostrador'::character varying
            ELSE ( SELECT p.nombre
               FROM tbl_provee_provee p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'PR'::bpchar)
        END AS proveedor, 
        CASE
            WHEN rc.ref IS NULL THEN ''::character varying
            ELSE rc.ref
        END AS ref, 
        CASE
            WHEN rc.id_pol IS NULL THEN (-1)
            ELSE rc.id_pol
        END AS id_pol, 
        CASE
            WHEN rc.id_polcost IS NULL THEN (-1)
            ELSE rc.id_polcost
        END AS id_polcost, 
        CASE
            WHEN rc.id_cfd IS NULL THEN 0
            ELSE rc.id_cfd
        END AS id_cfd, 
        CASE
            WHEN rc.tfd IS NULL THEN 0
            ELSE rc.tfd::integer
        END AS tfd
   FROM tbl_compras_gastos_cab rc
   JOIN tbl_cont_monedas mon ON rc.moneda = mon.clave;



--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_compras_invserv_datos_x_proveedor AS 
 SELECT e.id_prod, e.id_proveedor AS id_provee, e.precio, e.id_moneda AS moneda
   FROM tbl_compras_vs_inventario e;
   


--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_public_provee_provee AS 
 SELECT e.id_tipo, e.id_clave, e.nombre, e.descuento
   FROM tbl_provee_provee e;

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_compras_gastos_cancelar(
    _id_gasto integer,
    _id_entidadcompra smallint)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_Numero int; _Fecha timestamp; _ID_Pol int; _ID_PolCost int; _err int; _result varchar(255); _errpart int; 
	_resultpart varchar(255); _Ref varchar(25); _ID_CXP int; _ID_Movimiento int; _ID_Bodega smallint;
 	_ID_BanCaj int; _Condicion smallint; _mes smallint; _ano smallint;
 	_ID_CFD int; _TFD smallint; 
 	_REC_TMP_PAGOS RECORD; 
BEGIN
	_err := 0;
	_result := 'La Compra Gasto se ha cancelado satisfactoriamente';
	_Fecha := (select Fecha from TBL_COMPRAS_GASTOS_CAB where ID_VC = _ID_Gasto);
	_Numero := (select Numero from TBL_COMPRAS_GASTOS_CAB where ID_VC = _ID_Gasto);
	_ID_Movimiento := (select ID_PolCost from TBL_COMPRAS_GASTOS_CAB where ID_VC = _ID_Gasto); -- el id del movimiento al almacen
	_ID_CXP := (select ID_Pol from TBL_COMPRAS_GASTOS_CAB where ID_VC = _ID_Gasto); 
	_ID_Bodega := (select ID_Bodega from TBL_COMPRAS_GASTOS_CAB where ID_VC = _ID_Gasto);
	_Condicion := (select Condicion from TBL_COMPRAS_GASTOS_CAB where ID_VC = _ID_Gasto);
	
	_mes := date_part('month',_Fecha);
	_ano := date_part('year',_Fecha);
	
	_ID_CFD := (select ID_CFD from TBL_COMPRAS_GASTOS_CAB WHERE ID_VC = _ID_Gasto);
	_TFD := (select TFD from TBL_COMPRAS_GASTOS_CAB WHERE ID_VC = _ID_Gasto);
	
	IF(select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano and Cerrado = 1) > 0
	OR (select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano) < 1
	THEN
		_err := 3;
		_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_POLIZAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'ERROR: La fecha de poliza pertenece a un periodo cerrado o inexistente'
	END IF;

	IF _err = 0
	THEN
		UPDATE TBL_COMPRAS_GASTOS_CAB
		SET Status = 'C'
		WHERE ID_VC = _ID_Gasto;
		
		--procede a cancelar el CFD
		IF _ID_CFD is not null OR _TFD is not null
		THEN
			IF _ID_CFD is not null --El gasto solo esta enlazado a un UUID
			THEN
				IF (select FSI_Tipo from TBL_CFDCOMP where ID_CFD = _ID_CFD) = 'GAS' and (select FSI_ID from TBL_CFDCOMP where ID_CFD = _ID_CFD) = _ID_Gasto
				THEN 
					UPDATE TBL_CFDCOMP
					SET FSI_Tipo = 'ENT', FSI_ID = _ID_EntidadCompra
					WHERE ID_CFD = _ID_CFD;
				END IF;
			ELSE -- ENLAZADO A VARIOS UUIDs
				UPDATE TBL_CFDCOMP
				SET FSI_Tipo = 'ENT', FSI_ID = _ID_EntidadCompra
				WHERE FSI_Tipo = 'GAS' AND FSI_ID = _ID_Gasto;
				--Elimina las asociaciones al gasto
				DELETE FROM TBL_COMPRAS_GASTOS_CFD
				WHERE ID_Gasto = _ID_Gasto;
			END IF;
			
			UPDATE TBL_COMPRAS_GASTOS_CAB
			SET ID_CFD = null
			WHERE ID_VC = _ID_Gasto;
		END IF;

		--Procede a la cancelacion de la CXP o PAGOS
		IF _Condicion = 0
		THEN
			FOR _REC_TMP_PAGOS IN  (select ID_Mov from  tbl_compras_gastos_pagos where ID_Gasto = _ID_Gasto)
			LOOP
				SELECT * INTO _errpart, _resultpart, _id_bancaj FROM sp_bancos_movs_cancelar(_REC_TMP_PAGOS.ID_Mov) as ( err integer, res varchar, clave integer );
				IF _errpart <> 0
				THEN
					_err := 3;
					_result := _resultpart;
					EXIT;
				END IF;
			END LOOP;
		ELSIF _Condicion = 1
		THEN
			SELECT * INTO _errpart, _resultpart, _id_pol FROM sp_provee_cxp_cancelar(_id_cxp) as ( err integer, res varchar, clave integer );
			IF _errpart <> 0
			THEN
				_err := 3;
				_result := _resultpart;
			END IF;
		ELSE --Ningun pago... id_cxp es en realidad la poliza del documento por pagar
			--Procede a cancelar la poliza
			IF _ID_CXP is not null
			THEN
				SELECT * INTO _errpart, _resultpart, _id_pol FROM sp_cont_polizas_cancelar(_ID_CXP, _Fecha) as ( err integer, res varchar, clave integer );
				IF _errpart <> 0
				THEN
					_err := 3;
					_result := _resultpart;
				END IF;
			END IF;
		END IF;
		
		-- procede a cancelar los detalles del movimiento al almacen
		IF _err = 0 AND _ID_Movimiento is not null
		THEN
			SELECT * INTO _errpart, _resultpart, _id_polcost FROM sp_invserv_alm_utensilios_cancelar( _id_movimiento ) as ( err integer, res varchar, clave integer );
			IF _errpart <> 0
			THEN
				_err := _errpart;
				_result := _resultpart;
			END IF;
		END IF;
		
	END IF;		

	RETURN QUERY SELECT _err, _result, _ID_Gasto;

END
$BODY$
  LANGUAGE plpgsql;
--ALTER FUNCTION sp_compras_gastos_cancelar(integer, smallint)
  
--@FIN_BLOQUE
INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('VEN_POL');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('VEN_POL_PRODUCTOS');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('VEN_POL_CLIENTES');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('VEN_POL_ENTIDAD');  



--@FIN_BLOQUE
CREATE TABLE tbl_client_vs_inventario
(
  id_tipo character(2) NOT NULL,
  id_cliente integer NOT NULL,
  id_prod character varying(20) NOT NULL,
  id_moneda smallint NOT NULL,
  fecha timestamp without time zone NOT NULL,
  precio numeric(19,4) NOT NULL,
  descuento numeric(5,2) NOT NULL,
  CONSTRAINT pk_tbl_client_vs_inventario PRIMARY KEY (id_tipo , id_cliente , id_prod , id_moneda ),
  CONSTRAINT fk_tbl_client_vs_inventario_tbl_client_client FOREIGN KEY (id_tipo, id_cliente)
      REFERENCES tbl_client_client (id_tipo, id_clave) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_tbl_client_vs_inventario_tbl_cont_monedas FOREIGN KEY (id_moneda)
      REFERENCES tbl_cont_monedas (clave) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_tbl_client_vs_inventario_tbl_invserv_inventarios FOREIGN KEY (id_prod)
      REFERENCES tbl_invserv_inventarios (id_prod) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE
);



--@FIN_BLOQUE
CREATE TABLE tbl_provee_vs_inventario
(
  id_tipo character(2) NOT NULL,
  id_proveedor integer NOT NULL,
  id_prod character varying(20) NOT NULL,
  id_moneda smallint NOT NULL,
  fecha timestamp without time zone NOT NULL,
  precio numeric(19,4) NOT NULL,
  descuento numeric(5,2) NOT NULL,
  CONSTRAINT pk_tbl_provee_vs_inventario PRIMARY KEY (id_tipo , id_proveedor , id_prod , id_moneda ),
  CONSTRAINT fk_tbl_provee_vs_inventario_tbl_cont_monedas FOREIGN KEY (id_moneda)
      REFERENCES tbl_cont_monedas (clave) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_tbl_provee_vs_inventario_tbl_invserv_inventarios FOREIGN KEY (id_prod)
      REFERENCES tbl_invserv_inventarios (id_prod) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_tbl_provee_vs_inventario_tbl_provee_provee FOREIGN KEY (id_tipo, id_proveedor)
      REFERENCES tbl_provee_provee (id_tipo, id_clave) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE
);



--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_invserv_inventarios_precios AS 
 SELECT tbl_invserv_inventarios.id_tipo, tbl_invserv_inventarios.id_prod AS clave, tbl_invserv_inventarios.descripcion, tbl_invserv_inventarios.id_linea AS linea, tbl_invserv_inventarios.id_unidadsalida AS unidad, tbl_invserv_inventarios.status, tbl_invserv_inventarios.seproduce, tbl_invserv_inventarios.nosevende, tbl_invserv_inventarios.precio AS p1, tbl_invserv_inventarios.precio2 AS p2, tbl_invserv_inventarios.precio3 AS p3, tbl_invserv_inventarios.precio4 AS p4, tbl_invserv_inventarios.precio5 AS p5, tbl_invserv_inventarios.precioweb AS pw, tbl_invserv_inventarios.precioofertaweb AS pow, tbl_invserv_inventarios.preciomin AS pmin, tbl_invserv_inventarios.preciomax AS pmax, 
        CASE
            WHEN tbl_invserv_inventarios.seproduce = B'0'::"bit" THEN tbl_invserv_inventarios.preciocomp
            ELSE tbl_invserv_inventarios.ultimocosto
        END AS pcomp, 
        CASE
            WHEN tbl_invserv_inventarios.seproduce = B'0'::"bit" THEN tbl_invserv_inventarios.id_moneda::integer
            ELSE 1
        END AS id_moneda
   FROM tbl_invserv_inventarios;



--@FIN_BLOQUE
CREATE TABLE tbl_politicas_invserv_cant_vs_precio
(
  id_prod character varying(20) NOT NULL,
  cantdesde numeric(9,3) NOT NULL,
  canthasta numeric(9,3) NOT NULL,
  cantdesde2 numeric(9,3) NOT NULL,
  canthasta2 numeric(9,3) NOT NULL,
  cantdesde3 numeric(9,3) NOT NULL,
  canthasta3 numeric(9,3) NOT NULL,
  cantdesde4 numeric(9,3) NOT NULL,
  canthasta4 numeric(9,3) NOT NULL,
  cantdesde5 numeric(9,3) NOT NULL,
  canthasta5 numeric(9,3) NOT NULL,
  CONSTRAINT pk_tbl_politicas_invserv_cant_vs_precio PRIMARY KEY (id_prod ),
  CONSTRAINT fk_tbl_politicas_invserv_cant_vs_precio_tbl_invserv_inventarios FOREIGN KEY (id_prod)
      REFERENCES tbl_invserv_inventarios (id_prod) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE
);



--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_invserv_inventarios_vs_client AS 
 SELECT i.id_cliente AS id_client, i.id_prod, c.nombre, i.fecha, i.precio, i.id_moneda AS moneda, cat.descripcion, c.id_numero, mon.moneda AS nombremoneda, cat.id_unidadsalida AS unidad
   FROM tbl_client_vs_inventario i
   JOIN tbl_client_client c ON i.id_cliente = c.id_clave AND c.id_tipo = 'CL'::bpchar
   JOIN tbl_invserv_inventarios cat ON i.id_prod::text = cat.id_prod::text
   JOIN tbl_cont_monedas mon ON i.id_moneda = mon.clave;



--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_invserv_inventarios_vs_provee AS 
 SELECT i.id_proveedor AS id_provee, i.id_prod, c.nombre, i.fecha, i.precio, i.id_moneda AS moneda
   FROM tbl_provee_vs_inventario i
   JOIN tbl_provee_provee c ON i.id_proveedor = c.id_clave AND c.id_tipo = 'PR'::bpchar;



--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_ventas_politicas_ent_desc_mod AS 
 SELECT e.id_entidadventa AS id_entidad, c.id_prod AS clave, c.descripcion, c.id_tipo, c.id_linea AS linea, c.status, c.nosevende, 
        CASE
            WHEN (( SELECT tbl_ventas_politicas_ent_desc.p1
               FROM tbl_ventas_politicas_ent_desc
              WHERE tbl_ventas_politicas_ent_desc.id_entidad = e.id_entidadventa AND tbl_ventas_politicas_ent_desc.id_prod::text = c.id_prod::text)) IS NULL THEN ''::character varying
            ELSE ( SELECT tbl_ventas_politicas_ent_desc.p1::character varying AS p1
               FROM tbl_ventas_politicas_ent_desc
              WHERE tbl_ventas_politicas_ent_desc.id_entidad = e.id_entidadventa AND tbl_ventas_politicas_ent_desc.id_prod::text = c.id_prod::text)
        END AS p1, 
        CASE
            WHEN (( SELECT tbl_ventas_politicas_ent_desc.p2
               FROM tbl_ventas_politicas_ent_desc
              WHERE tbl_ventas_politicas_ent_desc.id_entidad = e.id_entidadventa AND tbl_ventas_politicas_ent_desc.id_prod::text = c.id_prod::text)) IS NULL THEN ''::character varying
            ELSE ( SELECT tbl_ventas_politicas_ent_desc.p2::character varying AS p2
               FROM tbl_ventas_politicas_ent_desc
              WHERE tbl_ventas_politicas_ent_desc.id_entidad = e.id_entidadventa AND tbl_ventas_politicas_ent_desc.id_prod::text = c.id_prod::text)
        END AS p2, 
        CASE
            WHEN (( SELECT tbl_ventas_politicas_ent_desc.p3
               FROM tbl_ventas_politicas_ent_desc
              WHERE tbl_ventas_politicas_ent_desc.id_entidad = e.id_entidadventa AND tbl_ventas_politicas_ent_desc.id_prod::text = c.id_prod::text)) IS NULL THEN ''::character varying
            ELSE ( SELECT tbl_ventas_politicas_ent_desc.p3::character varying AS p3
               FROM tbl_ventas_politicas_ent_desc
              WHERE tbl_ventas_politicas_ent_desc.id_entidad = e.id_entidadventa AND tbl_ventas_politicas_ent_desc.id_prod::text = c.id_prod::text)
        END AS p3, 
        CASE
            WHEN (( SELECT tbl_ventas_politicas_ent_desc.p4
               FROM tbl_ventas_politicas_ent_desc
              WHERE tbl_ventas_politicas_ent_desc.id_entidad = e.id_entidadventa AND tbl_ventas_politicas_ent_desc.id_prod::text = c.id_prod::text)) IS NULL THEN ''::character varying
            ELSE ( SELECT tbl_ventas_politicas_ent_desc.p4::character varying AS p4
               FROM tbl_ventas_politicas_ent_desc
              WHERE tbl_ventas_politicas_ent_desc.id_entidad = e.id_entidadventa AND tbl_ventas_politicas_ent_desc.id_prod::text = c.id_prod::text)
        END AS p4, 
        CASE
            WHEN (( SELECT tbl_ventas_politicas_ent_desc.p5
               FROM tbl_ventas_politicas_ent_desc
              WHERE tbl_ventas_politicas_ent_desc.id_entidad = e.id_entidadventa AND tbl_ventas_politicas_ent_desc.id_prod::text = c.id_prod::text)) IS NULL THEN ''::character varying
            ELSE ( SELECT tbl_ventas_politicas_ent_desc.p5::character varying AS p5
               FROM tbl_ventas_politicas_ent_desc
              WHERE tbl_ventas_politicas_ent_desc.id_entidad = e.id_entidadventa AND tbl_ventas_politicas_ent_desc.id_prod::text = c.id_prod::text)
        END AS p5, 
        CASE
            WHEN (( SELECT tbl_ventas_politicas_ent_desc.aplicacion
               FROM tbl_ventas_politicas_ent_desc
              WHERE tbl_ventas_politicas_ent_desc.id_entidad = e.id_entidadventa AND tbl_ventas_politicas_ent_desc.id_prod::text = c.id_prod::text)) IS NULL THEN 0
            ELSE (( SELECT tbl_ventas_politicas_ent_desc.aplicacion
               FROM tbl_ventas_politicas_ent_desc
              WHERE tbl_ventas_politicas_ent_desc.id_entidad = e.id_entidadventa AND tbl_ventas_politicas_ent_desc.id_prod::text = c.id_prod::text))::integer
        END AS aplicacion
   FROM tbl_invserv_inventarios c, tbl_ventas_entidades e
  WHERE c.id_tipo = 'P'::bpchar AND c.status = 'V'::bpchar AND c.nosevende = B'0'::"bit" AND e.id_tipoentidad = 0;
   

  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_invserv_cambio_precios(_id_prod character varying, _id_cliente integer, _precio numeric, _precio2 numeric, _precio3 numeric, _precio4 numeric, _precio5 numeric, _preciomin numeric, _preciomax numeric)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255); _cveres varchar(20);
BEGIN
	_err := 0;
	_result := '';
	
	IF _ID_Cliente <> 0 -- si se esta actualizando precio especial a in cliente
	THEN
		DELETE FROM TBL_CLIENT_VS_INVENTARIO -- de lo contrario actualiza
		WHERE ID_Tipo = 'CL' and ID_Cliente = _ID_Cliente;	
	
		INSERT INTO TBL_CLIENT_VS_INVENTARIO
		SELECT 'CL', ID_Client, ID_Prod, Moneda, Now(), Precio, 0.0
		FROM _TMP_CLIENT_VS_INVENTARIO;

		_result := 'Los precios del cliente se han actualizado satisfactoriamente';
		_cveres := cast(_ID_Cliente as varchar);
		
	ELSIF _ID_Prod = ''
	THEN
		UPDATE TBL_INVSERV_INVENTARIOS
		SET Precio = P1, Precio2 = P2, Precio3 = P3, Precio4 = P4, Precio5 = P5, PrecioMin = PMin, PrecioMax = PMax
		FROM TBL_INVSERV_INVENTARIOS i, _TMP_INVSERV_PRECIOS p
		WHERE	i.ID_Prod = p.ID_Prod and TBL_INVSERV_INVENTARIOS.ID_Prod = i.ID_Prod;
		
		_result := 'Los precios de * productos se actualizaron correctamente';
		_cveres := '*';
		
	ELSE
 		-- Actualiza todos los precios de mostrador
		UPDATE TBL_INVSERV_INVENTARIOS 
		SET Precio = _Precio, Precio2 = _Precio2, Precio3 = _Precio3, Precio4 = _Precio4, Precio5 = _Precio5,
				PrecioMin = _PrecioMin, PrecioMax = _PrecioMax
		WHERE ID_Prod = _ID_Prod;

		_result := 'Los precios para el producto se actualizaron correctamente';
		_cveres := _ID_Prod;
		
	 END IF;
	
	RETURN QUERY SELECT _err, _result, _cveres;

END
$BODY$
  LANGUAGE plpgsql;
  
  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_politicas_invserv_cant_vs_precio_agregar_cambiar(_id_prod_linea character varying, _prod_linea character, _cantdesde numeric, _canthasta numeric, _cantdesde2 numeric, _canthasta2 numeric, _cantdesde3 numeric, _canthasta3 numeric, _cantdesde4 numeric, _canthasta4 numeric, _cantdesde5 numeric, _canthasta5 numeric)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255); _cveres varchar(20);
BEGIN
	 _err := 0;
	
	IF _Prod_Linea = 'PROD'
	THEN
		IF (select count(*)
				from TBL_POLITICAS_INVSERV_CANT_VS_PRECIO 
									where ID_Prod = _ID_Prod_Linea) = 0 -- si no existen politicas de este producto, agrega
		THEN
			INSERT INTO TBL_POLITICAS_INVSERV_CANT_VS_PRECIO 
			VALUES(_ID_Prod_Linea, _CantDesde, _CantHasta, 
						 _CantDesde2, _CantHasta2, 
						 _CantDesde3, _CantHasta3, 
						 _CantDesde4, _CantHasta4, 
						 _CantDesde5, _CantHasta5 );

			_result := 'La pol√≠tica por producto se registr√≥ satisfactoriamente'; 
	
		ELSE
			UPDATE TBL_POLITICAS_INVSERV_CANT_VS_PRECIO 
			SET CantDesde = _CantDesde, CantHasta = _CantHasta,
					CantDesde2 = _CantDesde2, CantHasta2 = _CantHasta2,
					CantDesde3 = _CantDesde3, CantHasta3 = _CantHasta3, 
					CantDesde4 = _CantDesde4, CantHasta4 = _CantHasta4, 
					CantDesde5 = _CantDesde5, CantHasta5 = _CantHasta5
			WHERE ID_Prod = _ID_Prod_Linea;
			
			_result := 'La pol√≠tica por producto se actualizo con exito';
			
		END IF;
	ELSE
 		-- Ahora inserta o actualiza todos los de una linea
		-- Empieza por actualizar los existentes
		UPDATE TBL_POLITICAS_INVSERV_CANT_VS_PRECIO 
		SET CantDesde = _CantDesde, CantHasta = _CantHasta, 
					CantDesde2 = _CantDesde2, CantHasta2 = _CantHasta2, 
					CantDesde3 = _CantDesde3, CantHasta3 = _CantHasta3, 
					CantDesde4 = _CantDesde4, CantHasta4 = _CantHasta4, 
					CantDesde5 = _CantDesde5, CantHasta5 = _CantHasta5
		FROM TBL_POLITICAS_INVSERV_CANT_VS_PRECIO p, TBL_INVSERV_INVENTARIOS i 
		WHERE p.ID_Prod = i.ID_Prod and TBL_POLITICAS_INVSERV_CANT_VS_PRECIO.ID_Prod = p.ID_Prod and
											i.ID_Linea = _ID_Prod_Linea and 
															p.ID_Prod in 
																	( select ID_Prod 
																		from TBL_POLITICAS_INVSERV_CANT_VS_PRECIO );

		-- Ahora inserta los nuevos
		INSERT INTO TBL_POLITICAS_INVSERV_CANT_VS_PRECIO 
	 	SELECT ID_Prod,  _CantDesde, _CantHasta, 
						 _CantDesde2, _CantHasta2, 
						 _CantDesde3, _CantHasta3, 
						 _CantDesde4, _CantHasta4, 
						 _CantDesde5, _CantHasta5
		FROM TBL_INVSERV_INVENTARIOS
		WHERE ID_Linea = _ID_Prod_Linea and 
					ID_Prod not in 
							( select ID_Prod 
								from TBL_POLITICAS_INVSERV_CANT_VS_PRECIO );

		_result := 'La pol√≠tica por linea  se actualiz√≥ satisfactoriamente';
	
	END IF;
	
	RETURN QUERY SELECT _err, _result, _ID_Prod_Linea;

END
$BODY$
  LANGUAGE plpgsql;

  
  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_invserv_inventarios_clientes_vs_descuentos(_id_client integer)
  RETURNS SETOF record AS
$BODY$
DECLARE
	_err int; _result varchar(255);
BEGIN
	_err := 0;
	_result := 'Los descuentos de este cliente se actualizaron'; 
	
	-- si no existe el producto lo agregara
	IF (select count(*) from TBL_CLIENT_CLIENT where ID_Tipo = 'CL' and ID_Clave = _ID_Client) < 1
	THEN
		_err := 3;
		_result := 'ERROR: La clave del cliente no existe, no se actualizo';
	END IF;

	IF _err = 0
	THEN	
		DELETE FROM TBL_CLIENT_VS_DESCUENTOS
		WHERE ID_Tipo = 'CL' and ID_Client = _ID_Client;

		INSERT INTO TBL_CLIENT_VS_DESCUENTOS
		SELECT 'CL', _ID_Client, ID_Prod, Now(), Descuento, Descuento2, Descuento3, Descuento4, Descuento5
		FROM _TMP_CLIENT_VS_DESCUENTOS;
	
	END IF;
	
	RETURN QUERY SELECT _err, _result, _ID_Client;

END
$BODY$
  LANGUAGE plpgsql;
  
  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_politicas_invserv_cant_aumento_precios(_procfin character varying, _id_prod_linea character varying, _prod_linea character, _dec smallint, _p1 numeric, _p2 numeric, _p3 numeric, _p4 numeric, _p5 numeric, _pmin numeric, _pmax numeric)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255); 
BEGIN
	_err := 0;
	
	IF _Prod_Linea = 'PROD'
	THEN
		IF _ProcFin = 'PRUEBA'
		THEN
			RETURN QUERY 
			select ID_Prod, Descripcion, 
				Precio as P1A, round((Precio + ((Precio * _P1)/100)),_Dec) as P1M, 
				Precio2 as P2A, round((Precio2 + ((Precio2 * _P2)/100)),_Dec) as P2M,
				Precio3 as P3A, round((Precio3 + ((Precio3 * _P3)/100)),_Dec) as P3M,
				Precio4 as P4A, round((Precio4 + ((Precio4 * _P4)/100)),_Dec) as P4M,
				Precio5 as P5A, round((Precio5 + ((Precio5 * _P5)/100)),_Dec) as P5M,
				PrecioMin as PMinA, round((PrecioMin + ((PrecioMin * _PMin)/100)),_Dec) as PMinM,
				PrecioMax as PMaxA, round((PrecioMax + ((PrecioMax * _PMax)/100)),_Dec) as PMaxM
			from TBL_INVSERV_INVENTARIOS 
			where Status = 'V' and ID_Prod = _ID_Prod_Linea;
		ELSE
			UPDATE TBL_INVSERV_INVENTARIOS  
			SET
			Precio = round((Precio + ((Precio * _P1)/100)),_Dec), 
			Precio2 = round((Precio2 + ((Precio2 * _P2)/100)),_Dec),
			Precio3 = round((Precio3 + ((Precio3 * _P3)/100)),_Dec),
			Precio4 = round((Precio4 + ((Precio4 * _P4)/100)),_Dec),
			Precio5 = round((Precio5 + ((Precio5 * _P5)/100)),_Dec),
			PrecioMin = round((PrecioMin + ((PrecioMin * _PMin)/100)),_Dec),
			PrecioMax = round((PrecioMax + ((PrecioMax * _PMax)/100)),_Dec)
			where ID_Prod = _ID_Prod_Linea;

			_result := 'El aumento / disminucion del producto se registro satisfactoriamente';
	
			RETURN QUERY SELECT _err, _result, _ID_Prod_Linea;
		END IF;
	ELSE
		IF _ProcFin = 'PRUEBA'
		THEN
			RETURN QUERY 
			select ID_Prod, Descripcion, 
				Precio as P1A, round((Precio + ((Precio * _P1)/100)),_Dec) as P1M, 
				Precio2 as P2A, round((Precio2 + ((Precio2 * _P2)/100)),_Dec) as P2M,
				Precio3 as P3A, round((Precio3 + ((Precio3 * _P3)/100)),_Dec) as P3M,
				Precio4 as P4A, round((Precio4 + ((Precio4 * _P4)/100)),_Dec) as P4M,
				Precio5 as P5A, round((Precio5 + ((Precio5 * _P5)/100)),_Dec) as P5M,
				PrecioMin as PMinA, round((PrecioMin + ((PrecioMin * _PMin)/100)),_Dec) as PMinM,
				PrecioMax as PMaxA, round((PrecioMax + ((PrecioMax * _PMax)/100)),_Dec) as PMaxM
			from TBL_INVSERV_INVENTARIOS 
			where Status = 'V' and ID_Linea = _ID_Prod_Linea;
		ELSE
			UPDATE TBL_INVSERV_INVENTARIOS  
			SET
			Precio = round((Precio + ((Precio * _P1)/100)),_Dec), 
			Precio2 = round((Precio2 + ((Precio2 * _P2)/100)),_Dec),
			Precio3 = round((Precio3 + ((Precio3 * _P3)/100)),_Dec),
			Precio4 = round((Precio4 + ((Precio4 * _P4)/100)),_Dec),
			Precio5 = round((Precio5 + ((Precio5 * _P5)/100)),_Dec),
			PrecioMin = round((PrecioMin + ((PrecioMin * _PMin)/100)),_Dec),
			PrecioMax = round((PrecioMax + ((PrecioMax * _PMax)/100)),_Dec)
			where ID_Linea = _ID_Prod_Linea;
			
			_result := 'El aumento / disminuci√≥n de la linea se actualiz√≥ satisfactoriamente';
	
			RETURN QUERY SELECT _err, _result, _ID_Prod_Linea;
		END IF;

	END IF;
END
$BODY$
  LANGUAGE plpgsql;

  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_ventas_politicas_ent_desc(_id_entidad smallint)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255); _REC_TMP_VENTAS_POLITICAS_ENT_DESC RECORD;
BEGIN
	_err := 0;
	_result := 'Los descuentos de esta entidad se actualizaron correctamente'; 
	
	IF(select count(*) from TBL_VENTAS_ENTIDADES where ID_TipoEntidad = 0 and ID_EntidadVenta = _ID_Entidad) < 1
	THEN
		_err := 3;
		_result := 'ERROR: La clave de la entidad no existe, no se actualizo';
	END IF;

	IF _err = 0
	THEN	
		-- Ahora inserta o actualiza todos los productos
		FOR _REC_TMP_VENTAS_POLITICAS_ENT_DESC IN ( select * from  _TMP_VENTAS_POLITICAS_ENT_DESC ) 
		LOOP
			IF (select count(*) from TBL_VENTAS_POLITICAS_ENT_DESC where ID_Entidad = _ID_Entidad and ID_Prod = _REC_TMP_VENTAS_POLITICAS_ENT_DESC.ID_Prod) < 1
			THEN
				INSERT INTO TBL_VENTAS_POLITICAS_ENT_DESC
				VALUES( 	_REC_TMP_VENTAS_POLITICAS_ENT_DESC.ID_Prod, 
							_REC_TMP_VENTAS_POLITICAS_ENT_DESC.P1, 
							_REC_TMP_VENTAS_POLITICAS_ENT_DESC.P2, 
							_REC_TMP_VENTAS_POLITICAS_ENT_DESC.P3, 
							_REC_TMP_VENTAS_POLITICAS_ENT_DESC.P4, 
							_REC_TMP_VENTAS_POLITICAS_ENT_DESC.P5 	);
			ELSE
				UPDATE TBL_VENTAS_POLITICAS_ENT_DESC
				SET 
					P1 = _REC_TMP_VENTAS_POLITICAS_ENT_DESC.P1, 
					P2 = _REC_TMP_VENTAS_POLITICAS_ENT_DESC.P2, 
					P3 = _REC_TMP_VENTAS_POLITICAS_ENT_DESC.P3, 
					P4 = _REC_TMP_VENTAS_POLITICAS_ENT_DESC.P4, 
					P5 = _REC_TMP_VENTAS_POLITICAS_ENT_DESC.P5
				WHERE ID_Entidad = _ID_Entidad and ID_Prod = _REC_TMP_VENTAS_POLITICAS_ENT_DESC.ID_Prod;
			END IF;
		END LOOP;
			
	END IF;
	
	RETURN QUERY SELECT _err, _result, _id_entidad;
END
$BODY$
  LANGUAGE plpgsql;
  


--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_ventas_invserv_datos_x_cliente AS 
 SELECT tbl_client_vs_inventario.id_prod, tbl_client_vs_inventario.id_cliente AS id_client, tbl_client_vs_inventario.precio, tbl_client_vs_inventario.id_moneda AS moneda
   FROM tbl_client_vs_inventario;

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('PROD');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('PROD_FORMULAS');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('PROD_FORMULAS_AGREGAR');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('PROD_FORMULAS_CAMBIAR');



--@FIN_BLOQUE
CREATE TABLE tbl_produccion_formulas_cab
(
  id_formula serial NOT NULL,
  id_prod character varying(20) NOT NULL,
  formula character varying(80) NOT NULL,
  cantidad numeric(9,3) NOT NULL,
  unidadunica bit(1) NOT NULL,
  masmenos numeric(9,3) NOT NULL,
  principal bit(1) NOT NULL,
  CONSTRAINT pk_tbl_produccion_formulas_cab PRIMARY KEY (id_formula ),
  CONSTRAINT fk_tbl_produccion_formulas_cab_tbl_invserv_inventarios FOREIGN KEY (id_prod)
      REFERENCES tbl_invserv_inventarios (id_prod) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE
);



--@FIN_BLOQUE
CREATE TABLE tbl_produccion_formulas_procesos
(
  id_proceso serial NOT NULL,
  id_formula integer NOT NULL,
  nombre character varying(255) NOT NULL,
  tiempo smallint NOT NULL,
  principal bit(1) NOT NULL,
  id_subprod character varying(20),
  porcentaje numeric(8,6),
  cantidad numeric(9,3),
  masmenos numeric(9,3),
  CONSTRAINT pk_tbl_produccion_formulas_procesos PRIMARY KEY (id_proceso ),
  CONSTRAINT fk_tbl_produccion_formulas_procesos_tbl_invserv_inventarios FOREIGN KEY (id_subprod)
      REFERENCES tbl_invserv_inventarios (id_prod) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE SET NULL,
  CONSTRAINT fk_tbl_produccion_formulas_procesos_tbl_produccion_formulas_cab FOREIGN KEY (id_formula)
      REFERENCES tbl_produccion_formulas_cab (id_formula) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE
);



--@FIN_BLOQUE
CREATE TABLE tbl_produccion_formulas_detprod
(
  id_proceso integer NOT NULL,
  id_prod character varying(20) NOT NULL,
  cantidad numeric(12,6) NOT NULL,
  masmenos numeric(12,6) NOT NULL,
  principal bit(1) NOT NULL,
  CONSTRAINT pk_tbl_produccion_formulas_detprod PRIMARY KEY (id_proceso , id_prod ),
  CONSTRAINT fk_tbl_produccion_formulas_detprod_tbl_invserv_inventarios FOREIGN KEY (id_prod)
      REFERENCES tbl_invserv_inventarios (id_prod) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_tbl_produccion_formulas_detprod_tbl_produccion_formulas_proc FOREIGN KEY (id_proceso)
      REFERENCES tbl_produccion_formulas_procesos (id_proceso) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE
);



--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_prod_formulas_modulo AS 
 SELECT f.id_formula, ( SELECT count(*) AS count
           FROM tbl_produccion_formulas_procesos
          WHERE tbl_produccion_formulas_procesos.id_formula = f.id_formula) AS numproc, c.id_linea, f.id_prod AS clave, c.descripcion, f.formula, f.cantidad, c.id_unidad AS unidad, f.unidadunica, f.masmenos, f.principal
   FROM tbl_produccion_formulas_cab f
   JOIN tbl_invserv_inventarios c ON f.id_prod::text = c.id_prod::text;
   


--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_prod_formulas_proc AS 
 SELECT p.id_proceso, p.id_formula, p.nombre, p.tiempo, p.principal, p.id_subprod, i.descripcion, i.id_unidadsalida AS unidad, p.porcentaje, p.cantidad, p.masmenos
   FROM tbl_produccion_formulas_procesos p
   LEFT JOIN tbl_invserv_inventarios i ON p.id_subprod::text = i.id_prod::text;



--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_prod_formulas_detprod AS 
 SELECT f.id_proceso, f.id_prod, c.descripcion, f.cantidad, c.id_unidadsalida AS unidad, c.costopromedio AS cp, c.ultimocosto AS uc, f.masmenos, f.principal
   FROM tbl_produccion_formulas_detprod f
   JOIN tbl_invserv_inventarios c ON f.id_prod::text = c.id_prod::text;

  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_prod_formulas_agregar(_id_prod character varying, _formula character varying, _cantidad numeric, _unidadunica bit, _masmenos numeric)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255); _ID_Formula int; _ID_Proceso int; _Principal bit; _REC_TMP_PRODUCCION_FORMULAS_PROCESOS RECORD;
BEGIN	
	_err := 0;
	_result := 'La formula se agrego correctamente';
	_Principal := case when (select count(*) from TBL_PRODUCCION_FORMULAS_CAB where ID_Prod = _ID_Prod and Principal = '1' ) > 0 then '0' else '1' end;

	-- inserta la formula dandole un numero automatico, por eso cualquier formula tendra su proceso
	INSERT INTO TBL_PRODUCCION_FORMULAS_CAB
	VALUES(default, _ID_Prod, _Formula, _Cantidad, _UnidadUnica, _MasMenos, _Principal)
	RETURNING currval(pg_get_serial_sequence('TBL_PRODUCCION_FORMULAS_CAB', 'id_formula')) INTO _id_formula;

	
	-- ahora inserta los productos
	FOR _REC_TMP_PRODUCCION_FORMULAS_PROCESOS IN ( select * from _TMP_PRODUCCION_FORMULAS_PROCESOS order by ID_Proceso asc ) 
	LOOP
		INSERT INTO TBL_PRODUCCION_FORMULAS_PROCESOS
		VALUES(default, _ID_Formula, _REC_TMP_PRODUCCION_FORMULAS_PROCESOS.Nombre, _REC_TMP_PRODUCCION_FORMULAS_PROCESOS.Tiempo, _Principal, _REC_TMP_PRODUCCION_FORMULAS_PROCESOS.ID_SubProd,
			_REC_TMP_PRODUCCION_FORMULAS_PROCESOS.Porcentaje, _REC_TMP_PRODUCCION_FORMULAS_PROCESOS.Cantidad, _REC_TMP_PRODUCCION_FORMULAS_PROCESOS.MasMenos)
		RETURNING currval(pg_get_serial_sequence('TBL_PRODUCCION_FORMULAS_PROCESOS', 'id_proceso')) INTO _id_proceso;

		INSERT INTO TBL_PRODUCCION_FORMULAS_DETPROD
		SELECT _ID_Proceso, ID_Prod, Cantidad, MasMenos, Principal
		FROM _TMP_PRODUCCION_FORMULAS_DETPROD
		WHERE ID_Proceso = _REC_TMP_PRODUCCION_FORMULAS_PROCESOS.ID_Proceso;

	END LOOP;
	
	RETURN QUERY SELECT _err, _result, _id_formula;

END
$BODY$
  LANGUAGE plpgsql;
  
  
  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_prod_formulas_cambiar(_id_formula integer, _id_prod character varying, _formula character varying, _cantidad numeric, _unidadunica bit, _masmenos numeric)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255); _ID_Proceso int; _Principal bit; _REC_TMP_PRODUCCION_FORMULAS_PROCESOS RECORD;
BEGIN	
	_err := 0;
	_result := 'La formula se cambio correctamente';
	_Principal := (select Principal from TBL_PRODUCCION_FORMULAS_CAB where ID_Formula = _ID_Formula);

	-- si no existe la formula no la cambia
	IF(select count(*) from TBL_PRODUCCION_FORMULAS_CAB where ID_Formula = _ID_Formula) < 1
	THEN
		_err := 3;
		_result := 'ERROR: La clave de la formula no existe, no se puede cambiar';
	END IF;

	IF _err = 0
	THEN
		-- cambia la formula
		UPDATE TBL_PRODUCCION_FORMULAS_CAB
		SET Formula = _Formula, Cantidad = _Cantidad, UnidadUnica = _UnidadUnica, MasMenos = _MasMenos
		WHERE ID_Formula = _ID_Formula;

		-- primero Elimina los procesos
		DELETE FROM TBL_PRODUCCION_FORMULAS_PROCESOS
		WHERE ID_Formula = _ID_Formula;
	
		-- ahora inserta los productos
		FOR _REC_TMP_PRODUCCION_FORMULAS_PROCESOS IN ( select * from _TMP_PRODUCCION_FORMULAS_PROCESOS order by ID_Proceso asc ) 
		LOOP
			INSERT INTO TBL_PRODUCCION_FORMULAS_PROCESOS
			VALUES(default, _ID_Formula, _REC_TMP_PRODUCCION_FORMULAS_PROCESOS.Nombre, _REC_TMP_PRODUCCION_FORMULAS_PROCESOS.Tiempo, _Principal, _REC_TMP_PRODUCCION_FORMULAS_PROCESOS.ID_SubProd,
				_REC_TMP_PRODUCCION_FORMULAS_PROCESOS.Porcentaje, _REC_TMP_PRODUCCION_FORMULAS_PROCESOS.Cantidad, _REC_TMP_PRODUCCION_FORMULAS_PROCESOS.MasMenos)
			RETURNING currval(pg_get_serial_sequence('TBL_PRODUCCION_FORMULAS_PROCESOS', 'id_proceso')) INTO _id_proceso;

			INSERT INTO TBL_PRODUCCION_FORMULAS_DETPROD
			SELECT _ID_Proceso, ID_Prod, Cantidad, MasMenos, Principal
			FROM _TMP_PRODUCCION_FORMULAS_DETPROD
			WHERE ID_Proceso = _REC_TMP_PRODUCCION_FORMULAS_PROCESOS.ID_Proceso;

		END LOOP;
	END IF;
	
	RETURN QUERY SELECT _err, _result, _id_formula;

END
$BODY$
  LANGUAGE plpgsql;
  
  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_prod_formulas_principal(_id_formula integer)
  RETURNS SETOF record AS
$BODY$
DECLARE
	_err int; _result varchar(255); _ID_Prod varchar(20);
BEGIN
	_err := 0;
	_ID_Prod := (select ID_Prod from TBL_PRODUCCION_FORMULAS_CAB where ID_Formula = _ID_Formula);
	_result := 'La formula se aplico como principal';

	-- si no existe la formula no la cambia
	IF(select count(*) from TBL_PRODUCCION_FORMULAS_CAB where ID_Formula = _ID_Formula) < 1
	THEN
		_err := 3;
		_result := 'ERROR: La clave de la formula no existe, no se puede cambiar';
	END IF;

	IF _err = 0
	THEN
		-- cambia la formula
		UPDATE TBL_PRODUCCION_FORMULAS_CAB
		SET Principal = '1'
		WHERE ID_Formula = _ID_Formula;
	
		-- Ahora establece las demas como secundarias ( si las hay )
		UPDATE TBL_PRODUCCION_FORMULAS_CAB
		SET Principal = '0'
		WHERE ID_Prod = _ID_Prod and ID_Formula <> _ID_Formula;

	END IF;
	
	RETURN QUERY SELECT _err, _result, _id_formula;

END
$BODY$
  LANGUAGE plpgsql;
  
INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('PROD_PRODUCCION');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('PROD_PRODUCCION_AGREGAR');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('PROD_PRODUCCION_CANCELAR');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('PROD_PRODUCCION_CONSULTAR');




--@FIN_BLOQUE
CREATE TABLE tbl_produccion_reportes_cab
(
  id_reporte serial NOT NULL,
  id_entidadprod smallint NOT NULL,
  numero integer NOT NULL,
  fecha timestamp without time zone NOT NULL,
  concepto character varying(255),
  status character(1) NOT NULL,
  numproc smallint NOT NULL,
  actualproc smallint NOT NULL,
  cerrada bit(1) NOT NULL,
  id_bodegamp smallint NOT NULL,
  id_bodegapt smallint NOT NULL,
  obs character varying(255),
  directa bit(1) NOT NULL,
  CONSTRAINT pk_tbl_produccion_reportes_cab PRIMARY KEY (id_reporte ),
  CONSTRAINT fk_tbl_produccion_reportes_cab_tbl_invserv_bodegas FOREIGN KEY (id_bodegamp)
      REFERENCES tbl_invserv_bodegas (id_bodega) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_tbl_produccion_reportes_cab_tbl_invserv_bodegas1 FOREIGN KEY (id_bodegapt)
      REFERENCES tbl_invserv_bodegas (id_bodega) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_tbl_produccion_reportes_cab_tbl_produccion_entidades FOREIGN KEY (id_entidadprod)
      REFERENCES tbl_produccion_entidades (id_entidadprod) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE
);



--@FIN_BLOQUE
CREATE TABLE tbl_produccion_reportes_det
(
  id_reporte integer NOT NULL,
  partida smallint NOT NULL,
  fecha timestamp without time zone NOT NULL,
  cantidad numeric(9,3) NOT NULL,
  loteref character varying(255),
  id_prod character varying(20) NOT NULL,
  id_formula integer,
  numproc smallint NOT NULL,
  actualproc smallint NOT NULL,
  terminada bit(1) NOT NULL,
  id_pol integer,
  obs character varying(80),
  masmenos numeric(9,3) NOT NULL,
  CONSTRAINT pk_tbl_produccion_reportes_det PRIMARY KEY (id_reporte , partida ),
  CONSTRAINT fk_tbl_produccion_reportes_det_tbl_invserv_inventarios FOREIGN KEY (id_prod)
      REFERENCES tbl_invserv_inventarios (id_prod) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_tbl_produccion_reportes_det_tbl_produccion_formulas_cab FOREIGN KEY (id_formula)
      REFERENCES tbl_produccion_formulas_cab (id_formula) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE SET NULL,
  CONSTRAINT fk_tbl_produccion_reportes_det_tbl_produccion_reportes_cab FOREIGN KEY (id_reporte)
      REFERENCES tbl_produccion_reportes_cab (id_reporte) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE
);



--@FIN_BLOQUE
CREATE TABLE tbl_produccion_reportes_procesos
(
  id_reporte integer NOT NULL,
  partida smallint NOT NULL,
  id_proceso smallint NOT NULL,
  nombre character varying(255) NOT NULL,
  fecha timestamp without time zone NOT NULL,
  id_subprod character varying(20),
  porcentaje numeric(8,6),
  cantidad numeric(9,3),
  id_pol integer,
  id_polsp integer,
  masmenos numeric(9,3),
  fechasp timestamp without time zone NOT NULL,
  CONSTRAINT pk_tbl_produccion_reportes_procesos PRIMARY KEY (id_reporte , partida , id_proceso ),
  CONSTRAINT fk_tbl_produccion_reportes_procesos_tbl_invserv_inventarios FOREIGN KEY (id_subprod)
      REFERENCES tbl_invserv_inventarios (id_prod) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE SET NULL,
  CONSTRAINT fk_tbl_produccion_reportes_procesos_tbl_produccion_reportes_det FOREIGN KEY (id_reporte, partida)
      REFERENCES tbl_produccion_reportes_det (id_reporte, partida) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE
);



--@FIN_BLOQUE
CREATE TABLE tbl_produccion_reportes_detprod
(
  id_reporte integer NOT NULL,
  partida smallint NOT NULL,
  id_proceso smallint NOT NULL,
  id_prod character varying(20) NOT NULL,
  secuencia smallint NOT NULL,
  cantidad numeric(9,3) NOT NULL,
  masmenos numeric(9,3) NOT NULL,
  CONSTRAINT pk_tbl_produccion_reportes_detprod PRIMARY KEY (id_reporte , partida , id_proceso , id_prod ),
  CONSTRAINT fk_tbl_produccion_reportes_detprod_tbl_invserv_inventarios FOREIGN KEY (id_prod)
      REFERENCES tbl_invserv_inventarios (id_prod) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_tbl_produccion_reportes_detprod_tbl_produccion_reportes_proc FOREIGN KEY (id_reporte, partida, id_proceso)
      REFERENCES tbl_produccion_reportes_procesos (id_reporte, partida, id_proceso) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE
);




--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_prod_reportes_modulo AS 
 SELECT rc.id_reporte, rc.cerrada AS cda, rc.id_entidadprod AS id_entidad, rc.numero, rc.fecha, rc.status, rc.numproc, rc.actualproc AS actual, rc.concepto, rc.id_bodegamp, ( SELECT tbl_invserv_bodegas.nombre
           FROM tbl_invserv_bodegas
          WHERE tbl_invserv_bodegas.id_bodega = rc.id_bodegamp) AS bodega_mp, rc.id_bodegapt, ( SELECT tbl_invserv_bodegas.nombre
           FROM tbl_invserv_bodegas
          WHERE tbl_invserv_bodegas.id_bodega = rc.id_bodegapt) AS bodega_pt, rc.obs, rc.directa
   FROM tbl_produccion_reportes_cab rc;

   
  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION view_prod_entidades_ids(_id_usuario character varying, _entidad character varying)
  RETURNS SETOF record AS
$BODY$  
BEGIN
	IF _ID_Usuario = 'cef-su' OR (select count(*) from tbl_usuarios_submodulo_roles where id_usuario = _id_usuario and id_rol = 'cef-prod') > 0
	THEN
		IF _Entidad = 'CEF-X' -- Regresa todo el set
		THEN
			RETURN QUERY
			SELECT   _id_usuario as id_usuario, e.ID_EntidadProd AS ID_Entidad, e.ID_TipoEntidad AS ID_Tipo, e.Serie, e.Nombre as Descripcion, e.Doc, e.Formato, 
				e.ID_BodegaMP, e.ID_BodegaPT, (select Nombre from TBL_INVSERV_BODEGAS where ID_Bodega = e.ID_BodegaMP) as BodegaMP,
				(select Nombre from TBL_INVSERV_BODEGAS where ID_Bodega = e.ID_BodegaPT) as BodegaPT,
				(select AuditarAlm from TBL_INVSERV_BODEGAS where ID_Bodega = e.ID_BodegaMP) as AuditarAlm,
				(select ManejoStocks from TBL_INVSERV_BODEGAS where ID_Bodega = e.ID_BodegaPT) as ManejoStocks
			FROM TBL_PRODUCCION_ENTIDADES e 
			ORDER BY e.ID_EntidadProd ASC; 
			
		ELSIF _Entidad = 'CEF-1'
		THEN
			RETURN QUERY 
			SELECT   _id_usuario as id_usuario, e.ID_EntidadProd AS ID_Entidad, e.ID_TipoEntidad AS ID_Tipo, e.Serie, e.Nombre as Descripcion, e.Doc, e.Formato, 
				e.ID_BodegaMP, e.ID_BodegaPT, (select Nombre from TBL_INVSERV_BODEGAS where ID_Bodega = e.ID_BodegaMP) as BodegaMP,
				(select Nombre from TBL_INVSERV_BODEGAS where ID_Bodega = e.ID_BodegaPT) as BodegaPT,
				(select AuditarAlm from TBL_INVSERV_BODEGAS where ID_Bodega = e.ID_BodegaMP) as AuditarAlm,
				(select ManejoStocks from TBL_INVSERV_BODEGAS where ID_Bodega = e.ID_BodegaPT) as ManejoStocks
			FROM TBL_PRODUCCION_ENTIDADES e 
			ORDER BY e.ID_EntidadProd ASC
			LIMIT 1;
		ELSE
			RETURN QUERY 
			SELECT   _id_usuario as id_usuario, e.ID_EntidadProd AS ID_Entidad, e.ID_TipoEntidad AS ID_Tipo, e.Serie, e.Nombre as Descripcion, e.Doc, e.Formato, 
				e.ID_BodegaMP, e.ID_BodegaPT, (select Nombre from TBL_INVSERV_BODEGAS where ID_Bodega = e.ID_BodegaMP) as BodegaMP,
				(select Nombre from TBL_INVSERV_BODEGAS where ID_Bodega = e.ID_BodegaPT) as BodegaPT,
				(select AuditarAlm from TBL_INVSERV_BODEGAS where ID_Bodega = e.ID_BodegaMP) as AuditarAlm,
				(select ManejoStocks from TBL_INVSERV_BODEGAS where ID_Bodega = e.ID_BodegaPT) as ManejoStocks
			FROM TBL_PRODUCCION_ENTIDADES e 
			WHERE e.ID_EntidadProd = _Entidad::smallint;
		END IF;
	ELSE
		IF _Entidad = 'CEF-X' -- Regresa todo el set
		THEN
			RETURN QUERY 
			SELECT DISTINCT _ID_Usuario as ID_Usuario, e.ID_EntidadProd AS ID_Entidad, e.ID_TipoEntidad AS ID_Tipo, e.Serie, e.Nombre as Descripcion, e.Doc, e.Formato, 
				e.ID_BodegaMP, e.ID_BodegaPT, (select Nombre from TBL_INVSERV_BODEGAS where ID_Bodega = e.ID_BodegaMP) as BodegaMP,
				(select Nombre from TBL_INVSERV_BODEGAS where ID_Bodega = e.ID_BodegaPT) as BodegaPT,
				(select AuditarAlm from TBL_INVSERV_BODEGAS where ID_Bodega = e.ID_BodegaMP) as AuditarAlm,
				(select ManejoStocks from TBL_INVSERV_BODEGAS where ID_Bodega = e.ID_BodegaPT) as ManejoStocks
			FROM TBL_PRODUCCION_ENTIDADES e  INNER JOIN
				TBL_USUARIOS_SUBMODULO_PRODUCCION u ON e.ID_EntidadProd = u.ID_EntidadProd
			WHERE (u.id_usuario = _ID_Usuario OR u.id_usuario IN
				(select sr.ID_Rol from tbl_usuarios_submodulo_roles sr where sr.id_usuario = _ID_Usuario))
			ORDER BY e.ID_EntidadProd ASC;

		ELSIF _Entidad = 'CEF-1'
		THEN
			RETURN QUERY 
			SELECT DISTINCT _ID_Usuario as ID_Usuario, e.ID_EntidadProd AS ID_Entidad, e.ID_TipoEntidad AS ID_Tipo, e.Serie, e.Nombre as Descripcion, e.Doc, e.Formato, 
				e.ID_BodegaMP, e.ID_BodegaPT, (select Nombre from TBL_INVSERV_BODEGAS where ID_Bodega = e.ID_BodegaMP) as BodegaMP,
				(select Nombre from TBL_INVSERV_BODEGAS where ID_Bodega = e.ID_BodegaPT) as BodegaPT,
				(select AuditarAlm from TBL_INVSERV_BODEGAS where ID_Bodega = e.ID_BodegaMP) as AuditarAlm,
				(select ManejoStocks from TBL_INVSERV_BODEGAS where ID_Bodega = e.ID_BodegaPT) as ManejoStocks
			FROM TBL_PRODUCCION_ENTIDADES e  INNER JOIN
				TBL_USUARIOS_SUBMODULO_PRODUCCION u ON e.ID_EntidadProd = u.ID_EntidadProd
			WHERE (u.id_usuario = _ID_Usuario OR u.id_usuario IN
				(select sr.ID_Rol from tbl_usuarios_submodulo_roles sr where sr.id_usuario = _ID_Usuario))
			ORDER BY e.ID_EntidadProd ASC
			LIMIT 1;

		ELSE
			RETURN QUERY
			SELECT DISTINCT _ID_Usuario as ID_Usuario, e.ID_EntidadProd AS ID_Entidad, e.ID_TipoEntidad AS ID_Tipo, e.Serie, e.Nombre as Descripcion, e.Doc, e.Formato, 
				e.ID_BodegaMP, e.ID_BodegaPT, (select Nombre from TBL_INVSERV_BODEGAS where ID_Bodega = e.ID_BodegaMP) as BodegaMP,
				(select Nombre from TBL_INVSERV_BODEGAS where ID_Bodega = e.ID_BodegaPT) as BodegaPT,
				(select AuditarAlm from TBL_INVSERV_BODEGAS where ID_Bodega = e.ID_BodegaMP) as AuditarAlm,
				(select ManejoStocks from TBL_INVSERV_BODEGAS where ID_Bodega = e.ID_BodegaPT) as ManejoStocks
			FROM TBL_PRODUCCION_ENTIDADES e  INNER JOIN
				TBL_USUARIOS_SUBMODULO_PRODUCCION u ON e.ID_EntidadProd = u.ID_EntidadProd
			WHERE (u.id_usuario = _ID_Usuario OR u.id_usuario IN
				(select sr.ID_Rol from tbl_usuarios_submodulo_roles sr where sr.id_usuario = _ID_Usuario))
			AND e.ID_EntidadProd = _Entidad::smallint;
			
		END IF;
	END IF;
END
$BODY$
  LANGUAGE plpgsql;
  


--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_prod_reportes_add AS 
 SELECT f.id_formula, f.id_prod, c.descripcion, ( SELECT count(*) AS count
           FROM tbl_produccion_formulas_procesos
          WHERE tbl_produccion_formulas_procesos.id_formula = f.id_formula) AS numproc, f.formula, f.unidadunica, f.cantidad, c.id_unidadsalida AS unidad, c.status, f.principal
   FROM tbl_produccion_formulas_cab f
   JOIN tbl_invserv_inventarios c ON f.id_prod::text = c.id_prod::text
  WHERE c.status = 'V'::bpchar;
  


--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_catalog_formulas AS 
 SELECT f.id_prod AS clave, c.descripcion, f.formula AS especial
   FROM tbl_produccion_formulas_cab f
   JOIN tbl_invserv_inventarios c ON f.id_prod::text = c.id_prod::text
  WHERE c.status = 'V'::bpchar;



--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_prod_reportes_det AS 
 SELECT rc.id_reporte, rc.partida, rc.fecha, rc.cantidad, rc.masmenos, cp.id_unidadsalida AS unidad, rc.loteref AS lote, rc.id_prod AS clave, cp.descripcion, rc.id_formula, cf.formula, rc.obs, rc.numproc, rc.actualproc, rc.terminada, 
        CASE
            WHEN rc.id_pol IS NULL THEN (-1)
            ELSE rc.id_pol
        END AS id_pol
   FROM tbl_produccion_reportes_det rc
   JOIN tbl_invserv_inventarios cp ON rc.id_prod::text = cp.id_prod::text
   JOIN tbl_produccion_formulas_cab cf ON rc.id_formula = cf.id_formula;
   


--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_prod_reportes_proc AS 
 SELECT p.id_reporte, p.partida, p.id_proceso, p.nombre, p.fecha, p.fechasp, p.id_subprod AS clave, i.descripcion, i.id_unidadsalida AS unidad, p.porcentaje, p.cantidad, p.masmenos, 
        CASE
            WHEN p.id_polsp IS NULL THEN (-1)
            ELSE p.id_polsp
        END AS id_polsp, 
        CASE
            WHEN p.id_pol IS NULL THEN (-1)
            ELSE p.id_pol
        END AS id_pol
   FROM tbl_produccion_reportes_procesos p
   LEFT JOIN tbl_invserv_inventarios i ON p.id_subprod::text = i.id_prod::text;



--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_prod_reportes_detprod AS 
 SELECT f.id_reporte, f.partida, f.id_proceso, f.id_prod, f.secuencia, c.descripcion, f.masmenos, f.cantidad, c.id_unidadsalida AS unidad, c.costopromedio AS cp, c.ultimocosto AS uc
   FROM tbl_produccion_reportes_detprod f
   JOIN tbl_invserv_inventarios c ON f.id_prod::text = c.id_prod::text;
   
  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_prod_reportes_agregar(_id_entidadprod smallint, _numero integer, _fecha timestamp without time zone, _concepto character varying, _id_bodegamp smallint, _id_bodegapt smallint, _obs character varying, _directa bit, _numproc smallint)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255); _ID_Reporte int; _mes smallint; _ano smallint; _errpart int; _resultpart varchar(255); _ID_Movimiento int; 
	_Refer varchar(35); _Ref varchar(35); _Fija bit; _AuditarAlmMP bit; _AuditarAlmPT bit; _conceptocost varchar(80);  _FechaAlm timestamp without time zone; _FechaMP timestamp without time zone; _FechaSP timestamp without time zone;
	_costoPartida numeric(19,4); _totalMPpartida numeric(19,4); _totalMPProceso numeric(19,4); _costoMP numeric(19,4); _totalMPsubproducto numeric(19,4); _costoSubProducto numeric(19,4);
	--Iteracion
	_DET RECORD; _PROC RECORD; _DETPROD RECORD;
BEGIN
	_err := 0;
	_result := 'El reporte se agrego correctamente';
	_mes := date_part('month',_Fecha);
	_ano := date_part('year',_Fecha);
	_Fija := (select Fija from TBL_PRODUCCION_ENTIDADES where ID_EntidadProd = _ID_EntidadProd);
	_conceptocost := 'Costo de producci√≥n ' || (select Descripcion from TBL_PRODUCCION_ENTIDADES where ID_EntidadProd = _ID_EntidadProd) || ', numero ' || cast(_Numero as varchar);
	_AuditarAlmMP := ( select AuditarAlm from TBL_INVSERV_BODEGAS where ID_Bodega = _ID_BodegaMP );
	_AuditarAlmPT := ( select AuditarAlm from TBL_INVSERV_BODEGAS where ID_Bodega = _ID_BodegaPT );
	_FechaAlm := _Fecha;
	-- HACE LA REVISION PREVIA de contabilidad este o no cerrada o sea o no directa..... segun fecha
	IF(select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano and Cerrado = 1) > 0
	OR (select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano) < 1
	THEN
		_err := 3;
		_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_POLIZAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'ERROR: La fecha de poliza pertenece a un periodo cerrado o inexistente'
	END IF;

	-- Ahora si est√° directa y tiene varios procesos alguna formula, hace revision de los siguientes procesos
	IF _Directa = '1' AND _NumProc > 1
	THEN
		FOR _PROC IN ( select * from _TMP_PRODUCCION_REPORTES_PROCESOS) 
		LOOP
			_FechaAlm := _FechaAlm + _PROC.Tiempo::interval;
		END LOOP;
		
		_mes := date_part('month', _FechaAlm);
		_ano := date_part('year', _FechaAlm);

		IF(select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano and Cerrado = 1) > 0
			OR (select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano) < 1
		THEN
			_err := 3;
			_result := 'ERROR: La fecha de por lo menos un proceso en este reporte pertenece a un periodo cerrado o inexistente';
		END IF;

		IF ( select ventero from TBL_VARIABLES where ID_Variable = 'MVCF' ) = 1
		THEN
			IF (select count(*) from TBL_INVSERV_CHFIS_CAB where ID_Bodega = _ID_BodegaMP and ( Cerrado = '1' or Generado = '1') and Status <> 'C' and Fecha >= _FechaAlm) > 0
			THEN
				_err := 3;
				_result := 'ERROR: No se puede generar el movimiento al almacen porque ya existe un chequeo f?sico cerrado en la bodega de Materia Prima, con fecha posterior a por lo menos un proceso';
			END IF;

			IF (select count(*) from TBL_INVSERV_CHFIS_CAB where ID_Bodega = _ID_BodegaPT and ( Cerrado = '1' or Generado = '1') and Status <> 'C' and Fecha >= _FechaAlm) > 0
			THEN
				_err := 3;
				_result :=  'ERROR: No se puede generar el movimiento al almacen porque ya existe un chequeo f?sico cerrado en la bodega de Producto Terminado, con fecha posterior a por lo menos un proceso';
			END IF;
		END IF;
	END IF;

	IF (select count(*) from TBL_PRODUCCION_REPORTES_CAB where ID_EntidadProd = _ID_EntidadProd and Numero = _Numero) > 0 
	THEN
		_err := 3;
		_result = 'ERROR: Ya existe el numero de reporte para esta entidad.';
	END IF;
	
	IF _Fija = '0'
	THEN
		IF (select cc from TBL_INVSERV_COSTOS_CONCEPTOS where ID_Concepto = 51) is null
		THEN
			_err := 3;
			_result := 'ERROR: La cuenta para almacen de productos en proceso no existe o no se ha enlazado';	
		END IF;

		IF (select cc from TBL_INVSERV_COSTOS_CONCEPTOS where ID_Concepto = 0) is null
		THEN
			_err := 3;
			_result := 'ERROR: La cuenta para almacen de productos fabricados no existe o no se ha enlazado';	
		END IF;
	END IF;
	
	IF _AuditarAlmMP <> _AuditarAlmPT
	THEN
		_err := 3;
		_result := 'ERROR: Los trazos de la bodega de Materia Prima y la de Producto Terminado son distintos';
	END IF;

	IF _err = 0
	THEN
		INSERT INTO TBL_PRODUCCION_REPORTES_CAB
		VALUES(default, _ID_EntidadProd, _Numero, _Fecha, _Concepto, case when _Directa = '0' and _AuditarAlmMP = '0' and _AuditarAlmPT = '0' then 'E' else 'G' end, _NumProc, case when _Directa = '1' then _NumProc else 0 end, _Directa, _ID_BodegaMP, _ID_BodegaPT, _Obs, _Directa)
		RETURNING currval(pg_get_serial_sequence('TBL_PRODUCCION_REPORTES_CAB', 'id_reporte')) INTO _id_reporte;

		_Refer := 'PPRD|' || cast(_ID_Reporte as varchar) || '|' || cast(_ID_EntidadProd as varchar) || '|'; 
		
		-- Ahora inserta el detalle y sus procesos
		-- inserta el detalle
		INSERT INTO TBL_PRODUCCION_REPORTES_DET
		SELECT _ID_Reporte, Partida, _Fecha, Cantidad, LoteRef, ID_Prod, td.ID_Formula, 
			( SELECT count(*) AS count FROM tbl_produccion_formulas_procesos WHERE tbl_produccion_formulas_procesos.id_formula = td.ID_Formula), 
			case when _Directa = '1' then ( SELECT count(*) AS count FROM tbl_produccion_formulas_procesos WHERE tbl_produccion_formulas_procesos.id_formula = td.ID_Formula) else 0 end, _Directa, null, Obs, MasMenos
		FROM _TMP_PRODUCCION_REPORTES_DET td;

		-- inserta los procesos
		INSERT INTO TBL_PRODUCCION_REPORTES_PROCESOS
		SELECT _ID_Reporte, Partida, ID_Proceso, Nombre, _Fecha, ID_SubProd, Porcentaje, Cantidad, null, null, MasMenos, _Fecha
		FROM _TMP_PRODUCCION_REPORTES_PROCESOS;
		
		-- inserta el detalle de productos en procesos
		INSERT INTO TBL_PRODUCCION_REPORTES_DETPROD
		SELECT _ID_Reporte, Partida, ID_Proceso, ID_Prod, Secuencia, Cantidad, MasMenos
		FROM _TMP_PRODUCCION_REPORTES_DETPROD;

		--Calcula las fechas de los PT, SP y MP
		_FechaMP := _Fecha;

		FOR _DET IN ( select * from _TMP_PRODUCCION_REPORTES_DET order by Partida asc ) 
		LOOP
			FOR _PROC IN ( select * from _TMP_PRODUCCION_REPORTES_PROCESOS where Partida = _DET.Partida order by ID_Proceso asc ) 
			LOOP
					_FechaSP := _FechaMP + _PROC.Tiempo::interval;
					UPDATE tbl_produccion_reportes_procesos
					SET Fecha = _FechaMP, FechaSP = _FechaSP
					WHERE ID_Reporte = _ID_Reporte and Partida = _DET.Partida and ID_Proceso = _PROC.ID_Proceso;
					_FechaMP := _FechaSP;

			END LOOP;

			UPDATE tbl_produccion_reportes_det
			SET Fecha = _FechaSP
			WHERE ID_Reporte = _ID_Reporte and Partida = _DET.Partida;

		END LOOP;
	
		-- actualiza el numero de Reporte
		UPDATE TBL_PRODUCCION_ENTIDADES
		SET Doc = _Numero + 1
		WHERE ID_EntidadProd = _ID_EntidadProd;

		
		IF _Directa = '1' AND _Fija = '0'
		THEN
			CREATE LOCAL TEMPORARY TABLE _TMP_INVSERV_ALMACEN_MOVIM_DET (
				ID_Bodega smallint NOT NULL ,
				ID_Prod varchar(20) NOT NULL ,
				Partida smallint NOT NULL ,
				Cantidad numeric(9, 3) NOT NULL ,
				Costo numeric(19,4) NULL 
			);

			_FechaAlm := _Fecha;

			FOR _DET IN ( select * from _TMP_PRODUCCION_REPORTES_DET order by Partida asc ) 
			LOOP
				_costoPartida := 0.0;
				_totalMPpartida := 0.0;
				FOR _PROC IN ( select * from _TMP_PRODUCCION_REPORTES_PROCESOS where Partida = _DET.Partida order by ID_Proceso asc ) 
				LOOP
					--Procede a agregar el movimiento al almac√©n de los detalles de Materias Primas del proceso en curso
					insert into _TMP_INVSERV_ALMACEN_MOVIM_DET (ID_Bodega, ID_Prod, Partida, Cantidad, Costo)
					select _ID_BodegaMP, ID_Prod, Secuencia, Cantidad, 0.0 --0.0 no es el costo, sin embargo lo ignorar√° en la tarjeta de almacen y se calcular√° el costo porque el concepto de produccion 51, indica recalcular costo
					from _TMP_PRODUCCION_REPORTES_DETPROD
					where Partida = _DET.Partida and ID_Proceso = _PROC.ID_Proceso 
					order by Secuencia asc;

					_Ref := _Refer || cast(_DET.Partida as varchar) || '|' || cast(_PROC.ID_Proceso as varchar) || '/MP';
					 
					SELECT * INTO _errpart, _resultpart, _ID_Movimiento 
					FROM sp_invserv_alm_movs_agregar(_FechaAlm, _ID_BodegaMP, (case when _AuditarAlmMP = '1' then 'P' else 'U' end), '51', _PROC.Nombre, '',/*1 ENT 2 SAL*/ '2', _Ref, 'PPRD', _ID_Reporte) as ( err integer, res varchar, clave integer );
					IF _errpart <> 0
					THEN
						_err := _errpart;
						_result := _resultpart;
					ELSE
						UPDATE tbl_produccion_reportes_procesos
						SET ID_Pol = _ID_Movimiento
						WHERE ID_Reporte = _ID_Reporte and Partida = _DET.Partida and ID_Proceso = _PROC.ID_Proceso;
					END IF;

					TRUNCATE TABLE _TMP_INVSERV_ALMACEN_MOVIM_DET;

					_totalMPProceso := 0.0;
					FOR _DETPROD IN ( select * from _TMP_PRODUCCION_REPORTES_DETPROD where Partida = _DET.Partida and ID_Proceso = _PROC.ID_Proceso order by Secuencia asc ) 
					LOOP
						--Calculamos el costo del proceso y del producto terminado
						_costoMP :=  (select case when tipocosteo = '0' then UltimoCosto else CostoPromedio end from TBL_INVSERV_INVENTARIOS where ID_Prod = _DETPROD.ID_Prod);
						_totalMPProceso := _totalMPProceso + (_DETPROD.Cantidad * _costoMP);
					END LOOP;
									
					--Inserta el subproducto del proceso (Si este proceso maneja subproducto)
					_FechaAlm := _FechaAlm + _PROC.Tiempo::interval;
					IF _PROC.ID_SubProd is not null
					THEN
						IF _PROC.Porcentaje <> 0.0 AND _PROC.Cantidad <> 0.0
						THEN
							_totalMPsubproducto := ((_totalMPProceso * _PROC.Porcentaje) / 100);
							_costoSubProducto := round( (_totalMPsubproducto / _PROC.Cantidad), 4);
							_totalMPpartida := _totalMPpartida + (_totalMPproceso - _totalMPsubproducto);
						ELSE
							_costoSubProducto = 0.0;
							_totalMPpartida := _totalMPpartida + _totalMPproceso;
						END IF;
						
						insert into _TMP_INVSERV_ALMACEN_MOVIM_DET (ID_Bodega, ID_Prod, Partida, Cantidad, Costo)
						select _ID_BodegaMP, ID_SubProd, 1, Cantidad, _costoSubProducto --Costo calculado
						from _TMP_PRODUCCION_REPORTES_PROCESOS
						where Partida = _DET.Partida and ID_Proceso = _PROC.ID_Proceso;

						_Ref := _Refer || cast(_DET.Partida as varchar) || '|' || cast(_PROC.ID_Proceso as varchar) || '/SP';
					
						SELECT * INTO _errpart, _resultpart, _ID_Movimiento 
						FROM sp_invserv_alm_movs_agregar(_FechaAlm, _ID_BodegaMP, (case when _AuditarAlmMP = '1' then 'G' else 'U' end), '0', _PROC.Nombre, '',/*1 ENT 2 SAL*/ '1', _Ref, 'PPRD', _ID_Reporte) as ( err integer, res varchar, clave integer );
	      					IF _errpart <> 0
						THEN
							_err := _errpart;
							_result := _resultpart;
						ELSE
							UPDATE tbl_produccion_reportes_procesos
							SET ID_PolSP = _ID_Movimiento
							WHERE ID_Reporte = _ID_Reporte and Partida = _DET.Partida and ID_Proceso = _PROC.ID_Proceso;
						END IF;

						TRUNCATE TABLE _TMP_INVSERV_ALMACEN_MOVIM_DET;
					ELSE
						_totalMPpartida := _totalMPpartida + _totalMPproceso;
					END IF;
						
				END LOOP;

				_costoPartida := round( (_totalMPpartida / _DET.Cantidad), 4);
				insert into _TMP_INVSERV_ALMACEN_MOVIM_DET (ID_Bodega, ID_Prod, Partida, Cantidad, Costo)
				select _ID_BodegaPT, ID_Prod, 1, Cantidad, _costoPartida
				from _TMP_PRODUCCION_REPORTES_DET
				where Partida = _DET.Partida;

				_Ref := _Refer || cast(_DET.Partida as varchar) || '|0/PT';
				
				SELECT * INTO _errpart, _resultpart, _ID_Movimiento 
				FROM sp_invserv_alm_movs_agregar(_FechaAlm, _ID_BodegaPT, (case when _AuditarAlmPT = '1' then 'G' else 'U' end), '0', _ConceptoCost, '',/*1 ENT 2 SAL*/ '1', _Ref, 'PPRD', _ID_Reporte) as ( err integer, res varchar, clave integer );
	      			IF _errpart <> 0
				THEN
					_err := _errpart;
					_result := _resultpart;
				ELSE
					UPDATE tbl_produccion_reportes_det
					SET ID_Pol = _ID_Movimiento
					WHERE ID_Reporte = _ID_Reporte and Partida = _DET.Partida;
				END IF;

				TRUNCATE TABLE _TMP_INVSERV_ALMACEN_MOVIM_DET;
			
			END LOOP;
					
			DROP TABLE _TMP_INVSERV_ALMACEN_MOVIM_DET; 
			-- Fin del movimiento al almacen
					
		END IF;

	END IF;
	
	RETURN QUERY SELECT _err, _result, _id_reporte;

END
$BODY$
  LANGUAGE plpgsql;
  
  
  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_prod_reportes_aplicar(_id_entidadprod smallint, _id_bodegamp smallint, _id_bodegapt smallint, _tipo_part character, _id_reporte integer, _partida smallint, _id_proceso smallint, _fecha timestamp without time zone, _cantidad numeric)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255); _mes smallint; _ano smallint; _errpart int; _resultpart varchar(255); _ID_Movimiento int; _Numero int;
	_Refer varchar(35); _Ref varchar(35); _Fija bit; _AuditarAlmMP bit; _AuditarAlmPT bit; _conceptocost varchar(80);  _FechaAlm timestamp without time zone; _FechaMP timestamp without time zone; _FechaSP timestamp without time zone;
	_costoPartida numeric(19,4); _totalMPpartida numeric(19,4); _totalMPProceso numeric(19,4); _costoMP numeric(19,4); _totalMPsubproducto numeric(19,4); _costoSubProducto numeric(19,4);
	--Iteracion
	_DET TBL_PRODUCCION_REPORTES_DET%ROWTYPE; _REC_PROC RECORD; _PROC TBL_PRODUCCION_REPORTES_PROCESOS%ROWTYPE; _DETPROD RECORD;
BEGIN
	_err := 0;
	_result := 'El proceso del reporte se aplico con exito';
	_mes := date_part('month',_Fecha);
	_ano := date_part('year',_Fecha);
	_Fija := (select Fija from TBL_PRODUCCION_ENTIDADES where ID_EntidadProd = _ID_EntidadProd);
	_Numero := (select Numero from TBL_PRODUCCION_REPORTES_CAB where ID_Reporte = _ID_Reporte); 
	_conceptocost := 'Costo de producci√≥n ' || (select Descripcion from TBL_PRODUCCION_ENTIDADES where ID_EntidadProd = _ID_EntidadProd) || ', numero ' || cast(_Numero as varchar);
	_AuditarAlmMP := ( select AuditarAlm from TBL_INVSERV_BODEGAS where ID_Bodega = _ID_BodegaMP );
	_AuditarAlmPT := ( select AuditarAlm from TBL_INVSERV_BODEGAS where ID_Bodega = _ID_BodegaPT );
	
	-- HACE LA REVISION PREVIA de contabilidad este o no cerrada o sea o no directa..... segun fecha
	IF(select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano and Cerrado = 1) > 0
	OR (select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano) < 1
	THEN
		_err := 3;
		_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_POLIZAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'ERROR: La fecha de poliza pertenece a un periodo cerrado o inexistente'
	END IF;

	IF (select count(*) from TBL_PRODUCCION_REPORTES_CAB where ID_Reporte = _ID_Reporte) < 1 
	THEN
		_err := 3;
		_result = 'ERROR: No existe el reporte mandado. No se puede aplicar el proceso.';
	END IF;
	
	IF _Fija = '0'
	THEN
		IF (select cc from TBL_INVSERV_COSTOS_CONCEPTOS where ID_Concepto = 51) is null
		THEN
			_err := 3;
			_result := 'ERROR: La cuenta para almacen de productos en proceso no existe o no se ha enlazado';	
		END IF;

		IF (select cc from TBL_INVSERV_COSTOS_CONCEPTOS where ID_Concepto = 0) is null
		THEN
			_err := 3;
			_result := 'ERROR: La cuenta para almacen de productos fabricados no existe o no se ha enlazado';	
		END IF;
	END IF;
	
	IF _AuditarAlmMP <> _AuditarAlmPT
	THEN
		_err := 3;
		_result := 'ERROR: Los trazos de la bodega de Materia Prima y la de Producto Terminado son distintos';
	END IF;

	IF ( select ventero from TBL_VARIABLES where ID_Variable = 'MVCF' ) = 1
	THEN
		IF (select count(*) from TBL_INVSERV_CHFIS_CAB where ID_Bodega = _ID_BodegaMP and ( Cerrado = '1' or Generado = '1') and Status <> 'C' and Fecha >= _Fecha) > 0
		THEN
			_err := 3;
			_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ALM_CHFIS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR');--'ERROR: No se puede generar el movimiento al almacen porque ya existe un chequeo f?sico cerrado en esta bodega, con fecha posterior a este movimiento';
		END IF;

		IF (select count(*) from TBL_INVSERV_CHFIS_CAB where ID_Bodega = _ID_BodegaPT and ( Cerrado = '1' or Generado = '1') and Status <> 'C' and Fecha >= _Fecha) > 0
		THEN
			_err := 3;
			_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ALM_CHFIS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR');--'ERROR: No se puede generar el movimiento al almacen porque ya existe un chequeo f?sico cerrado en esta bodega, con fecha posterior a este movimiento';
		END IF;
	END IF;
	
	IF _err = 0
	THEN

		_Refer := 'PPRD|' || cast(_ID_Reporte as varchar) || '|' || cast(_ID_EntidadProd as varchar) || '|'; 
		
		IF _tipo_part = 'MP'
		THEN
			UPDATE TBL_PRODUCCION_REPORTES_DETPROD
			SET Cantidad = tmp.Cantidad, MasMenos = 0.0
			FROM  TBL_PRODUCCION_REPORTES_DETPROD dp, _tmp_produccion_reportes_detprod tmp
			WHERE dp.ID_Reporte = _ID_Reporte and dp.Partida = _Partida and dp.ID_Proceso = _ID_Proceso and dp.Secuencia = tmp.Secuencia
				and dp.ID_Reporte =  TBL_PRODUCCION_REPORTES_DETPROD.ID_Reporte and dp.Partida =  TBL_PRODUCCION_REPORTES_DETPROD.Partida and dp.ID_Proceso =  TBL_PRODUCCION_REPORTES_DETPROD.ID_Proceso and dp.Secuencia =  TBL_PRODUCCION_REPORTES_DETPROD.Secuencia;

			UPDATE TBL_PRODUCCION_REPORTES_PROCESOS
			SET Fecha = _Fecha
			WHERE ID_Reporte = _ID_Reporte and Partida = _Partida and ID_Proceso = _ID_Proceso;

			IF (select ID_SubProd from TBL_PRODUCCION_REPORTES_PROCESOS where ID_Reporte = _ID_Reporte and Partida = _Partida and ID_Proceso = _ID_Proceso) is null
			THEN
				UPDATE TBL_PRODUCCION_REPORTES_DET
				SET ActualProc = ActualProc + 1
				WHERE  ID_Reporte = _ID_Reporte and Partida = _Partida;

				UPDATE TBL_PRODUCCION_REPORTES_CAB
				SET ActualProc = ActualProc + 1
				WHERE  ID_Reporte = _ID_Reporte;
			ELSE
				UPDATE TBL_PRODUCCION_REPORTES_DET
				SET Terminada = '1'
				WHERE  ID_Reporte = _ID_Reporte and Partida = _Partida;
			END IF;

			IF _Fija = '0'
			THEN
				CREATE LOCAL TEMPORARY TABLE _TMP_INVSERV_ALMACEN_MOVIM_DET (
					ID_Bodega smallint NOT NULL ,
					ID_Prod varchar(20) NOT NULL ,
					Partida smallint NOT NULL ,
					Cantidad numeric(9, 3) NOT NULL ,
					Costo numeric(19,4) NULL 
				);

				SELECT * INTO _PROC FROM TBL_PRODUCCION_REPORTES_PROCESOS WHERE ID_Reporte = _ID_Reporte AND Partida = _Partida AND ID_Proceso = _ID_Proceso;
				
				insert into _TMP_INVSERV_ALMACEN_MOVIM_DET (ID_Bodega, ID_Prod, Partida, Cantidad, Costo)
				select _ID_BodegaMP, ID_Prod, Secuencia, Cantidad, 0.0 --0.0 no es el costo, sin embargo lo ignorar√° en la tarjeta de almacen y se calcular√° el costo porque el concepto de produccion 51, indica recalcular costo
				from TBL_PRODUCCION_REPORTES_DETPROD
				where ID_Reporte = _ID_Reporte and Partida = _Partida and ID_Proceso = _ID_Proceso 
				order by Secuencia asc;

				_Ref := _Refer || cast(_Partida as varchar) || '|' || cast(_ID_Proceso as varchar) || '/MP';
					 
				SELECT * INTO _errpart, _resultpart, _ID_Movimiento 
				FROM sp_invserv_alm_movs_agregar(_Fecha, _ID_BodegaMP, (case when _AuditarAlmMP = '1' then 'P' else 'U' end), '51', _PROC.Nombre, '',/*1 ENT 2 SAL*/ '2', _Ref, 'PPRD', _ID_Reporte) as ( err integer, res varchar, clave integer );
				IF _errpart <> 0
				THEN
					_err := _errpart;
					_result := _resultpart;
				ELSE
					UPDATE tbl_produccion_reportes_procesos
					SET ID_Pol = _ID_Movimiento
					WHERE ID_Reporte = _ID_Reporte and Partida = _Partida and ID_Proceso = _ID_Proceso;
				END IF;

				DROP TABLE _TMP_INVSERV_ALMACEN_MOVIM_DET;
			END IF;
		ELSIF _tipo_part = 'SP'
		THEN
			UPDATE TBL_PRODUCCION_REPORTES_PROCESOS
			SET Cantidad = _Cantidad, FechaSP = _Fecha
			WHERE ID_Reporte = _ID_Reporte and Partida = _Partida and ID_Proceso = _ID_Proceso;

			UPDATE TBL_PRODUCCION_REPORTES_DET
			SET Terminada = '0', ActualProc = ActualProc + 1
			WHERE  ID_Reporte = _ID_Reporte and Partida = _Partida;

			UPDATE TBL_PRODUCCION_REPORTES_CAB
			SET ActualProc = ActualProc + 1
			WHERE  ID_Reporte = _ID_Reporte;

			IF _Fija = '0'
			THEN
				CREATE LOCAL TEMPORARY TABLE _TMP_INVSERV_ALMACEN_MOVIM_DET (
					ID_Bodega smallint NOT NULL ,
					ID_Prod varchar(20) NOT NULL ,
					Partida smallint NOT NULL ,
					Cantidad numeric(9, 3) NOT NULL ,
					Costo numeric(19,4) NULL 
				);

				SELECT * INTO _PROC FROM TBL_PRODUCCION_REPORTES_PROCESOS WHERE ID_Reporte = _ID_Reporte AND Partida = _Partida AND ID_Proceso = _ID_Proceso;
				_totalMPProceso := 0.0;
				FOR _DETPROD IN ( select * from TBL_PRODUCCION_REPORTES_DETPROD where ID_Reporte = _ID_Reporte and Partida = _Partida and ID_Proceso = _ID_Proceso order by Secuencia asc ) 
				LOOP
					--Calculamos el costo del proceso y del producto terminado
					_costoMP :=  (select case when tipocosteo = '0' then (select UltimoCosto from TBL_INVSERV_COSTOS_DETALLE where ID_Movimiento = _PROC.ID_Pol and ID_Prod = _DETPROD.ID_Prod ) else (select CostoPromedio from TBL_INVSERV_COSTOS_DETALLE where ID_Movimiento = _PROC.ID_Pol and ID_Prod = _DETPROD.ID_Prod ) end from TBL_INVSERV_INVENTARIOS where ID_Prod = _DETPROD.ID_Prod);
					_totalMPProceso := _totalMPProceso + (_DETPROD.Cantidad * _costoMP);
				END LOOP;
									
				--Inserta el subproducto del proceso
				IF _PROC.Porcentaje <> 0.0 AND _PROC.Cantidad <> 0.0
				THEN
					_totalMPsubproducto := ((_totalMPProceso * _PROC.Porcentaje) / 100);
					_costoSubProducto := round( (_totalMPsubproducto / _PROC.Cantidad), 4);
				ELSE
					_costoSubProducto = 0.0;
				END IF;
						
				insert into _TMP_INVSERV_ALMACEN_MOVIM_DET (ID_Bodega, ID_Prod, Partida, Cantidad, Costo)
				select _ID_BodegaMP, ID_SubProd, 1, Cantidad, _costoSubProducto --Costo calculado
				from TBL_PRODUCCION_REPORTES_PROCESOS
				where ID_Reporte = _ID_Reporte and Partida = _Partida and ID_Proceso = _ID_Proceso;

				_Ref := _Refer || cast(_Partida as varchar) || '|' || cast(_ID_Proceso as varchar) || '/SP';
					
				SELECT * INTO _errpart, _resultpart, _ID_Movimiento 
				FROM sp_invserv_alm_movs_agregar(_Fecha, _ID_BodegaMP, (case when _AuditarAlmMP = '1' then 'G' else 'U' end), '0', _PROC.Nombre, '',/*1 ENT 2 SAL*/ '1', _Ref, 'PPRD', _ID_Reporte) as ( err integer, res varchar, clave integer );
	      			IF _errpart <> 0
				THEN
					_err := _errpart;
					_result := _resultpart;
				ELSE
					UPDATE tbl_produccion_reportes_procesos
					SET ID_PolSP = _ID_Movimiento
					WHERE ID_Reporte = _ID_Reporte and Partida = _Partida and ID_Proceso = _ID_Proceso;
				END IF;

				DROP TABLE _TMP_INVSERV_ALMACEN_MOVIM_DET;
			END IF;
		ELSIF _tipo_part = 'PT'
		THEN
			UPDATE TBL_PRODUCCION_REPORTES_DET
			SET Terminada = '1', Cantidad = _Cantidad, Fecha = _Fecha
			WHERE  ID_Reporte = _ID_Reporte and Partida = _Partida;

			IF (select NumProc - ActualProc from TBL_PRODUCCION_REPORTES_CAB where ID_Reporte = _ID_Reporte) = 0
			THEN
				UPDATE TBL_PRODUCCION_REPORTES_CAB
				SET Cerrada = '1'
				WHERE  ID_Reporte = _ID_Reporte;
			END IF;

			IF _Fija = '0'
			THEN
				CREATE LOCAL TEMPORARY TABLE _TMP_INVSERV_ALMACEN_MOVIM_DET (
					ID_Bodega smallint NOT NULL ,
					ID_Prod varchar(20) NOT NULL ,
					Partida smallint NOT NULL ,
					Cantidad numeric(9, 3) NOT NULL ,
					Costo numeric(19,4) NULL 
				);

				SELECT * INTO _DET FROM TBL_PRODUCCION_REPORTES_DET WHERE ID_Reporte = _ID_Reporte AND Partida = _Partida;
				_costoPartida := 0.0;
				_totalMPpartida := 0.0;

				FOR _REC_PROC IN ( select * from TBL_PRODUCCION_REPORTES_PROCESOS where ID_Reporte = _ID_Reporte AND Partida = _Partida order by ID_Proceso asc ) 
				LOOP
					_totalMPProceso := 0.0;
					FOR _DETPROD IN ( select * from TBL_PRODUCCION_REPORTES_DETPROD where ID_Reporte = _ID_Reporte and Partida = _Partida and ID_Proceso = _REC_PROC.ID_Proceso order by Secuencia asc ) 
					LOOP
						--Calculamos el costo del proceso y del producto terminado
						_costoMP :=  (select case when tipocosteo = '0' then (select UltimoCosto from TBL_INVSERV_COSTOS_DETALLE where ID_Movimiento = _REC_PROC.ID_Pol and ID_Prod = _DETPROD.ID_Prod ) else (select CostoPromedio from TBL_INVSERV_COSTOS_DETALLE where ID_Movimiento = _REC_PROC.ID_Pol and ID_Prod = _DETPROD.ID_Prod ) end from TBL_INVSERV_INVENTARIOS where ID_Prod = _DETPROD.ID_Prod);
						_totalMPProceso := _totalMPProceso + (_DETPROD.Cantidad * _costoMP);
					END LOOP;
									
					--Inserta el subproducto del proceso
					IF _REC_PROC.ID_SubProd is not null
					THEN
						IF _REC_PROC.Porcentaje <> 0.0 AND _REC_PROC.Cantidad <> 0.0
						THEN
							_totalMPsubproducto := ((_totalMPProceso * _REC_PROC.Porcentaje) / 100);
							_totalMPpartida := _totalMPpartida + (_totalMPproceso - _totalMPsubproducto);
						ELSE
							_totalMPpartida := _totalMPpartida + _totalMPproceso;
						END IF;
					ELSE
						_totalMPpartida := _totalMPpartida + _totalMPproceso;
					END IF;
				END LOOP;		

				_costoPartida := round( (_totalMPpartida / _DET.Cantidad), 4);

				insert into _TMP_INVSERV_ALMACEN_MOVIM_DET (ID_Bodega, ID_Prod, Partida, Cantidad, Costo)
				select _ID_BodegaPT, ID_Prod, 1, Cantidad, _costoPartida
				from TBL_PRODUCCION_REPORTES_DET
				where ID_Reporte = _ID_Reporte and Partida = _Partida;

				_Ref := _Refer || cast(_Partida as varchar) || '|0/PT';
				
				SELECT * INTO _errpart, _resultpart, _ID_Movimiento 
				FROM sp_invserv_alm_movs_agregar(_Fecha, _ID_BodegaPT, (case when _AuditarAlmPT = '1' then 'G' else 'U' end), '0', _ConceptoCost, '',/*1 ENT 2 SAL*/ '1', _Ref, 'PPRD', _ID_Reporte) as ( err integer, res varchar, clave integer );
	      			IF _errpart <> 0
				THEN
					_err := _errpart;
					_result := _resultpart;
				ELSE
					UPDATE tbl_produccion_reportes_det
					SET ID_Pol = _ID_Movimiento
					WHERE ID_Reporte = _ID_Reporte and Partida = _Partida;
				END IF;
				
				DROP TABLE _TMP_INVSERV_ALMACEN_MOVIM_DET;
			END IF;
			
		END IF;
	END IF;
	
	RETURN QUERY SELECT _err, _result, _id_reporte;

END
$BODY$
  LANGUAGE plpgsql;
  

  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_prod_reportes_cancelar(_id_reporte integer, _id_entidadprod smallint)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255); _mes smallint; _ano smallint; _errpart int; _resultpart varchar(255); _ID_Movimiento int; _ID_BodegaMP smallint; _ID_BodegaPT smallint; _Fecha timestamp without time zone;
	_Fija bit; _AuditarAlmMP bit; _AuditarAlmPT bit; _MVCF int;
	--Iteracion
	_DET RECORD; _PROC RECORD; _DETPROD RECORD;
BEGIN
	_err := 0;
	_result := 'El reporte se cancelo satisfactoriamente';
	_Fecha :=  (select Fecha from TBL_PRODUCCION_REPORTES_CAB where ID_Reporte = _ID_Reporte);
	_mes := date_part('month',_Fecha);
	_ano := date_part('year',_Fecha);
	_Fija := (select Fija from TBL_PRODUCCION_ENTIDADES where ID_EntidadProd = _ID_EntidadProd);
	_ID_BodegaMP := (select ID_BodegaMP from TBL_PRODUCCION_REPORTES_CAB where ID_Reporte = _ID_Reporte);
	_ID_BodegaPT := (select ID_BodegaPT from TBL_PRODUCCION_REPORTES_CAB where ID_Reporte = _ID_Reporte);
	_AuditarAlmMP := ( select AuditarAlm from TBL_INVSERV_BODEGAS where ID_Bodega = _ID_BodegaMP );
	_AuditarAlmPT := ( select AuditarAlm from TBL_INVSERV_BODEGAS where ID_Bodega = _ID_BodegaPT );
	_MVCF := ( select ventero from TBL_VARIABLES where ID_Variable = 'MVCF' );
	
	-- HACE LA REVISION PREVIA de contabilidad este o no cerrada o sea o no directa..... segun fecha
	IF(select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano and Cerrado = 1) > 0
	OR (select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano) < 1
	THEN
		_err := 3;
		_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_POLIZAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'ERROR: La fecha de poliza pertenece a un periodo cerrado o inexistente'
	END IF;
	
	FOR _DET IN ( select * from TBL_PRODUCCION_REPORTES_DET where ID_Reporte = _ID_Reporte and ID_Pol is not null) 
	LOOP
		_mes := date_part('month', _DET.Fecha);
		_ano := date_part('year', _DET.Fecha);

		IF(select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano and Cerrado = 1) > 0
			OR (select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano) < 1
		THEN
			_err := 3;
			_result := 'ERROR: La fecha de por lo menos un lote en este reporte pertenece a un periodo cerrado o inexistente';
		END IF;
		
		IF _MVCF = 1
		THEN
			IF (select count(*) from TBL_INVSERV_CHFIS_CAB where ID_Bodega = _ID_BodegaPT and ( Cerrado = '1' or Generado = '1') and Status <> 'C' and Fecha >= _DET.Fecha) > 0
			THEN
				_err := 3;
				_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ALM_CHFIS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR');--'ERROR: No se puede generar el movimiento al almacen porque ya existe un chequeo f?sico cerrado en esta bodega, con fecha posterior a este movimiento';
			END IF;
		END IF;
	END LOOP;
	
	FOR _PROC IN ( select * from TBL_PRODUCCION_REPORTES_PROCESOS where ID_Reporte = _ID_Reporte and ID_Pol is not null) 
	LOOP
		_mes := date_part('month', _PROC.Fecha);
		_ano := date_part('year', _PROC.Fecha);

		IF(select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano and Cerrado = 1) > 0
			OR (select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano) < 1
		THEN
			_err := 3;
			_result := 'ERROR: La fecha de por lo menos un proceso en este reporte pertenece a un periodo cerrado o inexistente';
		END IF;

		IF _MVCF = 1
		THEN
			IF (select count(*) from TBL_INVSERV_CHFIS_CAB where ID_Bodega = _ID_BodegaMP and ( Cerrado = '1' or Generado = '1') and Status <> 'C' and Fecha >= _PROC.Fecha) > 0
			THEN
				_err := 3;
				_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ALM_CHFIS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR');--'ERROR: No se puede generar el movimiento al almacen porque ya existe un chequeo f?sico cerrado en esta bodega, con fecha posterior a este movimiento';
			END IF;
		END IF;
		
		IF _PROC.ID_PolSP is not null
		THEN
			_mes := date_part('month', _PROC.FechaSP);
			_ano := date_part('year', _PROC.FechaSP);

			IF(select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano and Cerrado = 1) > 0
				OR (select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano) < 1
			THEN
				_err := 3;
				_result := 'ERROR: La fecha de por lo menos un sup-producto de un proceso en este reporte pertenece a un periodo cerrado o inexistente';
			END IF;

			IF _MVCF = 1
			THEN
				IF (select count(*) from TBL_INVSERV_CHFIS_CAB where ID_Bodega = _ID_BodegaMP and ( Cerrado = '1' or Generado = '1') and Status <> 'C' and Fecha >= _PROC.FechaSP) > 0
				THEN
					_err := 3;
					_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ALM_CHFIS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR');--'ERROR: No se puede generar el movimiento al almacen porque ya existe un chequeo f?sico cerrado en esta bodega, con fecha posterior a este movimiento';
				END IF;
			END IF;
		END IF;
	END LOOP;
	
	IF (select count(*) from TBL_PRODUCCION_REPORTES_CAB where ID_Reporte = _ID_Reporte) < 1 
	THEN
		_err := 3;
		_result = 'ERROR: No existe el reporte mandado. No se puede cancelar.';
	END IF;
	
	IF _AuditarAlmMP <> _AuditarAlmPT
	THEN
		_err := 3;
		_result := 'ERROR: Los trazos de la bodega de Materia Prima y la de Producto Terminado son distintos';
	END IF;

	IF _err = 0
	THEN
		UPDATE TBL_PRODUCCION_REPORTES_CAB
		SET Status = 'C'
		WHERE ID_Reporte = _ID_Reporte;
		
		FOR _DET IN ( select * from TBL_PRODUCCION_REPORTES_DET where ID_Reporte = _ID_Reporte and ID_Pol is not null) 
		LOOP
			SELECT * INTO _errpart, _resultpart, _id_movimiento FROM sp_invserv_alm_movs_cancelar( _DET.ID_Pol ) as ( err integer, res varchar, clave integer );
			IF _errpart <> 0
			THEN
				_err := _errpart;
				_result := _resultpart;
				EXIT;
			END IF;
		END LOOP;
	
		IF _err = 0
		THEN
			FOR _PROC IN ( select * from TBL_PRODUCCION_REPORTES_PROCESOS where ID_Reporte = _ID_Reporte and ID_Pol is not null) 
			LOOP
				SELECT * INTO _errpart, _resultpart, _id_movimiento FROM sp_invserv_alm_movs_cancelar( _PROC.ID_Pol ) as ( err integer, res varchar, clave integer );
				IF _errpart <> 0
				THEN
					_err := _errpart;
					_result := _resultpart;
					EXIT;
				END IF;

				IF _PROC.ID_PolSP is not null
				THEN
					SELECT * INTO _errpart, _resultpart, _id_movimiento FROM sp_invserv_alm_movs_cancelar( _PROC.ID_PolSP ) as ( err integer, res varchar, clave integer );
					IF _errpart <> 0
					THEN
						_err := _errpart;
						_result := _resultpart;
						EXIT;
					END IF;
				END IF;
			END LOOP;
		END IF;



		
		
	END IF;
	
	RETURN QUERY SELECT _err, _result, _id_reporte;

END
$BODY$
  LANGUAGE plpgsql; 
  
--////////////////////////////////////////////////////////////////
-- SP AUDITAR
--////////////////////////////////////////////////////////////////
  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_invserv_alm_movs_auditar(_id_movimiento integer)
  RETURNS SETOF record AS
$BODY$
DECLARE  
	_Numero int; _Fecha timestamp; _Ref varchar(35); _err int; _result varchar(255); _ID_Bodega smallint; 
	_ID_Concepto smallint; _Tipo char(3); _Status char(1); _StatusFinal char(1); _AuditarAlm bit; _AuditarAlmESP bit; _mes smallint; _ano smallint; _MVCF int;  
	--Internas
	_SERIE varchar(8); _NumeroExt int; _BodExt smallint; _StatusEnt char(1); _StatusSal char(1); _NumFact int; _EntFact smallint;
	
BEGIN		
	_err := 0;
	_result := (select msj4 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ALM_MOVIM' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCOK');--'El movimiento se ha auditado / revertido';
	_ID_Concepto := (select ID_Concepto from TBL_INVSERV_ALMACEN_MOVIM_CAB where ID_Movimiento = _ID_Movimiento);
	_Fecha := (select Fecha from TBL_INVSERV_ALMACEN_MOVIM_CAB where ID_Movimiento = _ID_Movimiento);
	_Ref := (select Ref from TBL_INVSERV_ALMACEN_MOVIM_CAB where ID_Movimiento = _ID_Movimiento);
	_ID_Bodega := (select ID_Bodega from TBL_INVSERV_ALMACEN_MOVIM_CAB where ID_Movimiento = _ID_Movimiento);
	_Tipo := (select Tipo from TBL_INVSERV_COSTOS_CONCEPTOS where ID_Concepto = _ID_Concepto);
	_Status := (select Status from TBL_INVSERV_ALMACEN_MOVIM_CAB where ID_Movimiento = _ID_Movimiento);
	_AuditarAlm := (select AuditarAlm from TBL_INVSERV_BODEGAS where ID_Bodega = _ID_Bodega);
	_mes := date_part('month',_Fecha);
	_ano := date_part('year',_Fecha);
	
	_MVCF = ( select ventero from TBL_VARIABLES where ID_Variable = 'MVCF' );	

	raise notice 'Con:%Tipo:%Status:%,',_ID_Concepto,_Tipo,_Status;
	
	IF(select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano and Cerrado = 1) > 0
	OR (select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano) < 1
	THEN
		_err := 3;
		_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_POLIZAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'ERROR: La fecha de poliza pertenece a un periodo cerrado o inexistente'
	END IF;

	IF split_part(_Ref, '|', 1) = 'CHFI' 
	THEN
		_err := 3;
		_result := (select msj2 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ALM_MOVIM' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR');--ERROR: No se pueden revertir movimientos creados desde un chequeo f?sico, cancela el chequeo directamente';
	ELSE
		IF _MVCF = 1
		THEN
			IF (select count(*) from TBL_INVSERV_CHFIS_CAB where ID_Bodega = _ID_Bodega and ( Cerrado = '1' or Generado = '1') and Status <> 'C' and Fecha >= _Fecha) > 0
			THEN
				_err := 3;
				_result := 'ERROR: No se puede auditar/revertir el movimiento al almacen porque ya existe un chequeo f√≠sico cerrado en esta bodega, con fecha posterior a este movimiento';
			END IF;
		END IF;

		-- Si se trata de una factura y esta se intenta revertir, buscar√° cierres de caja que la contemplen. En caso de encontrar alguno, rechazar√° la reversi√≥n
		IF split_part(_Ref, '|', 1) = 'VFAC' AND _Status = 'U' --Cuando el estaus es U de auditado, el proceso intentar√° revertir el movimiento 
		THEN
			_NumeroExt := cast( split_part(_Ref, '|', 2) as int);
			_EntFact := (select ID_Entidad from tbl_ventas_facturas_cab where ID_VC = _NumeroExt);
			_NumFact := (select Numero from tbl_ventas_facturas_cab where ID_VC = _NumeroExt);

			IF (select count(*) from tbl_ventas_cierres_facturas where id_entidad = _EntFact and numero = _NumFact) > 0
			THEN
				_err := 3;
				_result := 'ERROR: No se pueden revertir movimientos pertenecientes a facturas que ya est√°n dentro de alg√∫n cierre de caja';
			END IF;
		END IF;
	END IF;
	
	IF _err = 0 AND _Ref <> '' -- solo se audita o revierten movimientos creados por procesos externos com Producir, Facturar etc.
	THEN
		IF _AuditarAlm = '1' -- esta bodega es auditable
		THEN
			IF _Tipo = 'ENT' -- es entrada
			THEN
				IF _Status = 'U' -- esta auditado, tiene que revertir el almacen
				THEN
					_StatusFinal := 'R';

					UPDATE TBL_INVSERV_ALMACEN_MOVIM_CAB 
					SET Status = 'R'
					WHERE ID_Movimiento = _ID_Movimiento;
				
					UPDATE TBL_INVSERV_COSTOS_DETALLE
					SET Status = 'R'
					WHERE ID_Movimiento = _ID_Movimiento;
					
					UPDATE TBL_INVSERV_EXISTENCIAS
					SET Existencia = e.Existencia - ( 	SELECT SUM(Entrada)
										FROM TBL_INVSERV_COSTOS_DETALLE 
										WHERE ID_Movimiento = _ID_Movimiento and ID_Prod = e.ID_Prod
										GROUP BY ID_Prod 	)
					FROM TBL_INVSERV_EXISTENCIAS e, TBL_INVSERV_COSTOS_DETALLE tm 
					WHERE tm.ID_Movimiento = _ID_Movimiento and e.ID_Prod = tm.ID_Prod AND e.ID_Bodega = _ID_Bodega
						AND e.ID_Prod = TBL_INVSERV_EXISTENCIAS.ID_Prod
						AND e.ID_Bodega = TBL_INVSERV_EXISTENCIAS.ID_Bodega;	
				ELSIF _Status = 'G' -- Esta guardado, tiene que auditar y agregar al almacen
				THEN
					_StatusFinal := 'U';

					UPDATE TBL_INVSERV_ALMACEN_MOVIM_CAB 
					SET Status = 'U'
					WHERE ID_Movimiento = _ID_Movimiento;
					
					UPDATE TBL_INVSERV_COSTOS_DETALLE
					SET Status = 'U'
					WHERE ID_Movimiento = _ID_Movimiento;
				
					UPDATE TBL_INVSERV_EXISTENCIAS
					SET Existencia = e.Existencia + (	SELECT SUM(Entrada)
										FROM TBL_INVSERV_COSTOS_DETALLE 
										WHERE ID_Movimiento = _ID_Movimiento and ID_Prod = e.ID_Prod
										GROUP BY ID_Prod 	)
					FROM TBL_INVSERV_EXISTENCIAS e, TBL_INVSERV_COSTOS_DETALLE tm 
					WHERE tm.ID_Movimiento = _ID_Movimiento and e.ID_Prod = tm.ID_Prod AND e.ID_Bodega = _ID_Bodega
						AND e.ID_Prod = TBL_INVSERV_EXISTENCIAS.ID_Prod
						AND e.ID_Bodega = TBL_INVSERV_EXISTENCIAS.ID_Bodega;
				
				ELSE
					_err := 3;
					_result := (select msj3 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ALM_MOVIM' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'ERROR: Este movimiento esta revertido o cancelado. No puede auditar otra vez.';
				END IF;
			
 			ELSE -- Es una salida
			
				IF _Status = 'U' -- esta auditado, tiene que revertir pero no aumenta el almacen hasta que se cancela la factura o el movimiento que lo cre?
				THEN
					_StatusFinal := 'R';

					UPDATE TBL_INVSERV_ALMACEN_MOVIM_CAB 
					SET Status = 'R'
					WHERE ID_Movimiento = _ID_Movimiento;
					
					UPDATE TBL_INVSERV_COSTOS_DETALLE
					SET Status = 'R'
					WHERE ID_Movimiento = _ID_Movimiento;
					
				ELSIF _Status = 'P' -- Esta pendiente, tiene que auditar ( no descuenta el almacen porque quedo descontado al momento de facturar etc )
				THEN
					_StatusFinal := 'U';

					UPDATE TBL_INVSERV_ALMACEN_MOVIM_CAB 
					SET Status = 'U'
					WHERE ID_Movimiento = _ID_Movimiento;
					
					UPDATE TBL_INVSERV_COSTOS_DETALLE
					SET Status = 'U'
					WHERE ID_Movimiento = _ID_Movimiento;

				ELSE
					_err := 3;
					_result := (select msj3 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ALM_MOVIM' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'ERROR: Este movimiento esta revertido o cancelado. No puede auditar otra vez.';
				END IF;	
			END IF;
		
		ELSE
			_err := 3;
			_result := (select msj4 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ALM_MOVIM' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR');--'ERROR: Esta bodega no es auditable.';
		END IF; 
	END IF;
		
	--Ahora el proceso largo de modificar el status del proceso que los cre√≥
	IF _err = 0 and _Ref <> '' and _Ref is not null
	THEN
		IF split_part(_Ref, '|', 1) = 'VDEV' -- Se trata de una Devolucion s/venta
		THEN
			_NumeroExt := cast( split_part(_Ref, '|', 2) as int);
			
			UPDATE TBL_VENTAS_DEVOLUCIONES_CAB
			SET Status = ( case when _StatusFinal = 'U' then 'E' else 'R' end )
			WHERE ID_VC = _NumeroExt;

		ELSIF split_part(_Ref, '|', 1) = 'VFAC' -- Se trata de una factura
		THEN
			_NumeroExt := cast( split_part(_Ref, '|', 2) as int);
			
			UPDATE TBL_VENTAS_FACTURAS_CAB
			SET Status = ( case when _StatusFinal = 'U' then 'E' else 'R' end )
			WHERE ID_VC = _NumeroExt;
					
		ELSIF split_part(_Ref, '|', 1) = 'VREM' -- Se trata de una remision
		THEN
			_NumeroExt := cast( split_part(_Ref, '|', 2) as int);
			
			UPDATE TBL_VENTAS_REMISIONES_CAB
			SET Status = ( case when _StatusFinal = 'U' then 'E' else 'R' end )
			WHERE ID_VC = _NumeroExt;
					
		ELSIF split_part(_Ref, '|', 1) = 'CDEV' -- Se trata de una Devolucion s/compra
		THEN
			_NumeroExt := cast( split_part(_Ref, '|', 2) as int);
			
			UPDATE TBL_COMPRAS_DEVOLUCIONES_CAB
			SET Status = ( case when _StatusFinal = 'U' then 'E' else 'R' end )
			WHERE ID_VC = _NumeroExt;

		ELSIF split_part(_Ref, '|', 1) = 'CFAC' -- Se trata de una compra factura
		THEN
			_NumeroExt := cast( split_part(_Ref, '|', 2) as int);
			
			UPDATE TBL_COMPRAS_FACTURAS_CAB
			SET Status = ( case when _StatusFinal = 'U' then 'E' else 'R' end )
			WHERE ID_VC = _NumeroExt;

		ELSIF split_part(_Ref, '|', 1) = 'CREC' -- Se trata de una recepcion
		THEN
			_NumeroExt := cast( split_part(_Ref, '|', 2) as int);
			
			UPDATE TBL_COMPRAS_RECEPCIONES_CAB
			SET Status = ( case when _StatusFinal = 'U' then 'E' else 'R' end )
			WHERE ID_VC = _NumeroExt;
					
		ELSIF split_part(_Ref, '|', 1) = 'PALM' -- Se trata de una plantilla
		THEN
			_NumeroExt := cast( split_part(_Ref, '|', 2) as int);
			
			UPDATE TBL_INVSERV_ALMACEN_MOVIM_PLANT_CAB
			SET Status = ( case when _StatusFinal = 'U' then 'E' else 'R' end )
			WHERE ID_MovimPlant = _NumeroExt;
					
		ELSIF split_part(_Ref, '|', 1) = 'TALM' -- Se trata de un TRASPASO DE MATERIAL
		THEN
			IF split_part(_Ref, '|', 5) = 'ENT' -- Se trata de una ENTRADA de material
			THEN
				_SERIE := split_part(_Ref, '|', 3);
				_BodExt := cast(_SERIE as smallint);
				_NumeroExt := cast( split_part(_Ref, '|', 2) as int);
				_StatusSal := ( select Status from TBL_INVSERV_ALMACEN_MOVIM_CAB where Ref = ('TALM|' || cast(_NumeroExt as varchar) || '|' || _SERIE || '||SAL') ); 
				_AuditarAlmESP = (select AuditarAlm from TBL_INVSERV_BODEGAS where ID_Bodega = ( select ID_Bodega from TBL_INVSERV_ALMACEN_MOVIM_CAB where Ref = ('TALM|' || cast(_NumeroExt as varchar) || '|' || _SERIE || '||SAL') ) );  

				UPDATE TBL_INVSERV_ALMACEN_BOD_MOV_CAB
				SET	Status = ( case when _StatusFinal = 'U' 
							then ( case 	when _AuditarAlmESP = '1'
									then ( case 	when _StatusSal = 'P' 
											then 'P' 
											when _StatusSal = 'R' 
											then 'P' else 'E' end )
									else 'E' end )
							else ( case 	when _AuditarAlmESP = '1'
									then ( case 	when _StatusSal = 'P' 
											then 'P' 
											when _StatusSal = 'U' 
											then 'P' else 'R' end ) 
									else 'R' end )
							end )
				WHERE ID_Movimiento = _NumeroExt;
						
			ELSIF split_part(_Ref, '|', 5) = 'SAL'  -- Se trata de una salida hacia bodega
			THEN
				_SERIE := split_part(_Ref, '|', 3);
				_BodExt := cast(_SERIE as smallint);
				_NumeroExt := cast( split_part(_Ref, '|', 2) as int);
				_StatusEnt := ( select Status from TBL_INVSERV_ALMACEN_MOVIM_CAB where Ref = ('TALM|' || cast(_NumeroExt as varchar) || '|' || _SERIE || '||ENT') ); 
				_AuditarAlmESP = (select AuditarAlm from TBL_INVSERV_BODEGAS where ID_Bodega = ( select ID_Bodega from TBL_INVSERV_ALMACEN_MOVIM_CAB where Ref = ('TALM|' || cast(_NumeroExt as varchar) || '|' || _SERIE || '||ENT') ) );  

			
				UPDATE TBL_INVSERV_ALMACEN_BOD_MOV_CAB
				SET	Status = ( case 	when _StatusFinal = 'U' 
								then ( case 	when _AuditarAlmESP = '1'
										then ( case 	when _StatusEnt = 'G' 
												then 'P' 
												when _StatusEnt = 'R' 
												then 'P' else 'E' end )
										else 'E' end )
								else ( case 	when _AuditarAlmESP = '1'
										then ( case 	when _StatusEnt = 'G' 
												then 'P' 
												when _StatusEnt = 'U' 
												then 'P' else 'R' end ) 
										else 'R' end )
								end )
				WHERE ID_Movimiento = _NumeroExt;
				
			END IF;
		ELSIF split_part(_Ref, '|', 1) = 'PPRD' -- Se trata de un reporte de produccion
		THEN
			_NumeroExt := cast( split_part(_Ref, '|', 2) as int);
	
			-- sea el status final U o R del movimiento al almacen, el reporte quedar√° pendiente porque no se cierra aun
			IF (select Cerrada from TBL_PRODUCCION_REPORTES_CAB where ID_Reporte = _NumeroExt) = '0'
			THEN
				UPDATE TBL_PRODUCCION_REPORTES_CAB 
				SET	Status = 'P'
				WHERE ID_Reporte = _NumeroExt;
			ELSE 
				-- Si esta cerrado, entonces verifica los dem√°s status de los movimientos al almacen revertir o emitir el reporte
				IF _StatusFinal = 'U'
				THEN
					IF (	select count(*) from TBL_INVSERV_ALMACEN_MOVIM_CAB 
						where ID_Movimiento in (	select ID_Pol  from tbl_produccion_reportes_det 
													where ID_Reporte = _NumeroExt and ID_Pol is not null) and Status = 'U') = (	select count(*)  from tbl_produccion_reportes_det
																																where ID_Reporte = _NumeroExt and ID_Pol is not null ) 	AND
					     (	select count(*) from TBL_INVSERV_ALMACEN_MOVIM_CAB 
						where ID_Movimiento in ( 	select ID_Pol from tbl_produccion_reportes_procesos
													where ID_Reporte = _NumeroExt and ID_Pol is not null) and Status = 'U') = (	select count(*) from tbl_produccion_reportes_procesos
																																where ID_Reporte = _NumeroExt and ID_Pol is not null) 	AND
					     (	select count(*) from TBL_INVSERV_ALMACEN_MOVIM_CAB 
						where ID_Movimiento in ( 	select ID_PolSP from tbl_produccion_reportes_procesos
													where ID_Reporte = _NumeroExt and ID_PolSP is not null) and Status = 'U') = (	select count(*) from tbl_produccion_reportes_procesos
																																	where ID_Reporte = _NumeroExt and ID_PolSP is not null) 
					THEN
						UPDATE TBL_PRODUCCION_REPORTES_CAB 
						SET	Status = 'E'
						WHERE ID_Reporte = _NumeroExt;
					ELSE
						UPDATE TBL_PRODUCCION_REPORTES_CAB 
						SET	Status = 'P'
						WHERE ID_Reporte = _NumeroExt;
					END IF;
				ELSE -- _StausFinal = R
					IF (	select count(*) from TBL_INVSERV_ALMACEN_MOVIM_CAB 
						where ID_Movimiento in (	select ID_Pol  from tbl_produccion_reportes_det 
													where ID_Reporte = _NumeroExt and ID_Pol is not null) and Status = 'R') = (	select count(*)  from tbl_produccion_reportes_det
																															where ID_Reporte = _NumeroExt and ID_Pol is not null ) 	AND
					     (	select count(*) from TBL_INVSERV_ALMACEN_MOVIM_CAB 
						where ID_Movimiento in ( 	select ID_Pol from tbl_produccion_reportes_procesos
													where ID_Reporte = _NumeroExt and ID_Pol is not null) and Status = 'R') = (	select count(*) from tbl_produccion_reportes_procesos
																															where ID_Reporte = _NumeroExt and ID_Pol is not null) 	AND
					     (	select count(*) from TBL_INVSERV_ALMACEN_MOVIM_CAB 
						where ID_Movimiento in ( 	select ID_PolSP from tbl_produccion_reportes_procesos
													where ID_Reporte = _NumeroExt and ID_PolSP is not null) and Status = 'R') = (	select count(*) from tbl_produccion_reportes_procesos
																																where ID_Reporte = _NumeroExt and ID_PolSP is not null) 
					THEN
						UPDATE TBL_PRODUCCION_REPORTES_CAB 
						SET	Status = 'R'
						WHERE ID_Reporte = _NumeroExt;
					ELSE
						UPDATE TBL_PRODUCCION_REPORTES_CAB 
						SET	Status = 'P'
						WHERE ID_Reporte = _NumeroExt;
					END IF;
				END IF;
			END IF;
			 
		END IF;

	END IF;
	
	RETURN QUERY SELECT _err, _result, _ID_Movimiento;

END
$BODY$
  LANGUAGE plpgsql;
--FIN sp_invserv_alm_movs_auditar
  
  
--////////////////////////////////////////////////////////////////
-- NOMINAS
--////////////////////////////////////////////////////////////////


INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('NOM');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('NOM_MOVIMIENTOS');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('NOM_MOVIMIENTOS_AGREGAR');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('NOM_MOVIMIENTOS_CAMBIAR');



--@FIN_BLOQUE
CREATE TABLE tbl_nom_categorias
(
  id_categoria smallint NOT NULL,
  descripcion character varying(20) NOT NULL,
  sueldo numeric(8,2) NOT NULL,
  sueldoam numeric(8,6) NOT NULL,
  integradoam numeric(8,6) NOT NULL,
  vales numeric(8,2) NOT NULL,
  valesam numeric(8,6) NOT NULL,
  CONSTRAINT pk_tbl_nom_categorias PRIMARY KEY (id_categoria )
);



--@FIN_BLOQUE
CREATE TABLE tbl_nom_departamentos
(
  id_departamento character(4) NOT NULL,
  nombre character varying(40) NOT NULL,
  CONSTRAINT pk_tbl_nom_departamentos PRIMARY KEY (id_departamento )
);



--@FIN_BLOQUE
CREATE TABLE tbl_nom_turnos
(
  id_turno smallint NOT NULL,
  descripcion character varying(40) NOT NULL,
  elunes timestamp without time zone,
  slunes timestamp without time zone,
  emartes timestamp without time zone,
  smartes timestamp without time zone,
  emiercoles timestamp without time zone,
  smiercoles timestamp without time zone,
  ejueves timestamp without time zone,
  sjueves timestamp without time zone,
  eviernes timestamp without time zone,
  sviernes timestamp without time zone,
  esabado timestamp without time zone,
  ssabado timestamp without time zone,
  edomingo timestamp without time zone,
  sdomingo timestamp without time zone,
  hnalunes numeric(4,2) NOT NULL,
  healunes numeric(4,2) NOT NULL,
  hnamartes numeric(4,2) NOT NULL,
  heamartes numeric(4,2) NOT NULL,
  hnamiercoles numeric(4,2) NOT NULL,
  heamiercoles numeric(4,2) NOT NULL,
  hnajueves numeric(4,2) NOT NULL,
  heajueves numeric(4,2) NOT NULL,
  hnaviernes numeric(4,2) NOT NULL,
  heaviernes numeric(4,2) NOT NULL,
  hnasabado numeric(4,2) NOT NULL,
  heasabado numeric(4,2) NOT NULL,
  hnadomingo numeric(4,2) NOT NULL,
  headomingo numeric(4,2) NOT NULL,
  ttlun smallint NOT NULL,
  ttmar smallint NOT NULL,
  ttmie smallint NOT NULL,
  ttjue smallint NOT NULL,
  ttvie smallint NOT NULL,
  ttsab smallint NOT NULL,
  ttdom smallint NOT NULL,
  CONSTRAINT pk_tbl_nom_turnos PRIMARY KEY (id_turno )
);

INSERT INTO TBL_NOM_TURNOS
VALUES(1,'turno general','1970-01-01 08:00:00','1970-01-01 17:00:00','1970-01-01 08:00:00','1970-01-01 17:00:00','1970-01-01 08:00:00','1970-01-01 17:00:00','1970-01-01 08:00:00','1970-01-01 17:00:00','1970-01-01 08:00:00','1970-01-01 17:00:00',null,null,null,null,8.00,11.20,8.00,11.20,8.00,11.20,8.00,11.20,8.00,11.20,0.00,11.20,0.00,11.20,0,0,0,0,0,0,0);



--@FIN_BLOQUE
CREATE TABLE tbl_nom_vacaciones
(
  id_vacaciones smallint NOT NULL,
  desde numeric(5,3) NOT NULL,
  hasta numeric(5,3) NOT NULL,
  dias smallint NOT NULL,
  pv numeric(2,2) NOT NULL,
  CONSTRAINT pk_tbl_nom_vacaciones PRIMARY KEY (id_vacaciones )
);



--@FIN_BLOQUE
CREATE TABLE tbl_nom_movimientos_nomina
(
  id_movimiento smallint NOT NULL,
  tipo_movimiento character varying(5) NOT NULL,
  descripcion character varying(40) NOT NULL,
  deduccion bit(1) NOT NULL,
  imss bit(1) NOT NULL,
  ispt bit(1) NOT NULL,
  dospor bit(1) NOT NULL,
  sar bit(1) NOT NULL,
  infonavit bit(1) NOT NULL,
  ptu bit(1) NOT NULL,
  id_sat character(3),
  CONSTRAINT pk_tbl_nom_movimientos_nomina PRIMARY KEY (id_movimiento )
);

INSERT INTO TBL_NOM_MOVIMIENTOS_NOMINA(ID_Movimiento,Tipo_Movimiento,Descripcion,Deduccion,IMSS,ISPT,DOSPOR,SAR,INFONAVIT,PTU,ID_SAT)
VALUES('110','SAL','SUELDO','0','0','0','0','0','0','0','001');
INSERT INTO TBL_NOM_MOVIMIENTOS_NOMINA(ID_Movimiento,Tipo_Movimiento,Descripcion,Deduccion,IMSS,ISPT,DOSPOR,SAR,INFONAVIT,PTU,ID_SAT)
VALUES('120','IAE','Aguinaldo Exento','0','0','0','0','0','0','0','002');
INSERT INTO TBL_NOM_MOVIMIENTOS_NOMINA(ID_Movimiento,Tipo_Movimiento,Descripcion,Deduccion,IMSS,ISPT,DOSPOR,SAR,INFONAVIT,PTU,ID_SAT)
VALUES('130','IAG','Aguinaldo Gravado','0','0','0','0','0','0','0','002');
INSERT INTO TBL_NOM_MOVIMIENTOS_NOMINA(ID_Movimiento,Tipo_Movimiento,Descripcion,Deduccion,IMSS,ISPT,DOSPOR,SAR,INFONAVIT,PTU,ID_SAT)
VALUES('140','IHEE','HORAS EXTRAS EXENTAS','0','0','0','0','0','0','0','019');
INSERT INTO TBL_NOM_MOVIMIENTOS_NOMINA(ID_Movimiento,Tipo_Movimiento,Descripcion,Deduccion,IMSS,ISPT,DOSPOR,SAR,INFONAVIT,PTU,ID_SAT)
VALUES('150','IHEG','HORAS EXTRAS GRAVADAS','0','0','0','0','0','0','0','019');
INSERT INTO TBL_NOM_MOVIMIENTOS_NOMINA(ID_Movimiento,Tipo_Movimiento,Descripcion,Deduccion,IMSS,ISPT,DOSPOR,SAR,INFONAVIT,PTU,ID_SAT)
VALUES('160','IHDE','Horas Domingo Exentas','0','0','0','0','0','0','0','019');
INSERT INTO TBL_NOM_MOVIMIENTOS_NOMINA(ID_Movimiento,Tipo_Movimiento,Descripcion,Deduccion,IMSS,ISPT,DOSPOR,SAR,INFONAVIT,PTU,ID_SAT)
VALUES('170','IHDG','Horas Domingo Gravadas','0','0','0','0','0','0','0','019');
INSERT INTO TBL_NOM_MOVIMIENTOS_NOMINA(ID_Movimiento,Tipo_Movimiento,Descripcion,Deduccion,IMSS,ISPT,DOSPOR,SAR,INFONAVIT,PTU,ID_SAT)
VALUES('180','IHTE','Horas Triples Exentas','0','0','0','0','0','0','0','019');
INSERT INTO TBL_NOM_MOVIMIENTOS_NOMINA(ID_Movimiento,Tipo_Movimiento,Descripcion,Deduccion,IMSS,ISPT,DOSPOR,SAR,INFONAVIT,PTU,ID_SAT)
VALUES('190','IHTG','Horas Triples Gravadas','0','0','0','0','0','0','0','019');
INSERT INTO TBL_NOM_MOVIMIENTOS_NOMINA(ID_Movimiento,Tipo_Movimiento,Descripcion,Deduccion,IMSS,ISPT,DOSPOR,SAR,INFONAVIT,PTU,ID_SAT)
VALUES('200','PDE','Prima Dominical Exenta','0','0','0','0','0','0','0','020');
INSERT INTO TBL_NOM_MOVIMIENTOS_NOMINA(ID_Movimiento,Tipo_Movimiento,Descripcion,Deduccion,IMSS,ISPT,DOSPOR,SAR,INFONAVIT,PTU,ID_SAT)
VALUES('210','PDG','Prima Dominical Gravada','0','0','0','0','0','0','0','020');
INSERT INTO TBL_NOM_MOVIMIENTOS_NOMINA(ID_Movimiento,Tipo_Movimiento,Descripcion,Deduccion,IMSS,ISPT,DOSPOR,SAR,INFONAVIT,PTU,ID_SAT)
VALUES('220','IHE','Horas Extras','0','0','0','0','0','0','0','019');
INSERT INTO TBL_NOM_MOVIMIENTOS_NOMINA(ID_Movimiento,Tipo_Movimiento,Descripcion,Deduccion,IMSS,ISPT,DOSPOR,SAR,INFONAVIT,PTU,ID_SAT)
VALUES('230','IDV','VACACIONES','0','0','0','0','0','0','0','001');
INSERT INTO TBL_NOM_MOVIMIENTOS_NOMINA(ID_Movimiento,Tipo_Movimiento,Descripcion,Deduccion,IMSS,ISPT,DOSPOR,SAR,INFONAVIT,PTU,ID_SAT)
VALUES('240','IDVXF','Vacaciones Externas','0','0','0','0','0','0','0','001');
INSERT INTO TBL_NOM_MOVIMIENTOS_NOMINA(ID_Movimiento,Tipo_Movimiento,Descripcion,Deduccion,IMSS,ISPT,DOSPOR,SAR,INFONAVIT,PTU,ID_SAT)
VALUES('250','IDAV','Vacaciones Anticipadas','0','0','0','0','0','0','0','001');
INSERT INTO TBL_NOM_MOVIMIENTOS_NOMINA(ID_Movimiento,Tipo_Movimiento,Descripcion,Deduccion,IMSS,ISPT,DOSPOR,SAR,INFONAVIT,PTU,ID_SAT)
VALUES('260','IDVP','Vacaciones Pagadas','0','0','0','0','0','0','0','001');
INSERT INTO TBL_NOM_MOVIMIENTOS_NOMINA(ID_Movimiento,Tipo_Movimiento,Descripcion,Deduccion,IMSS,ISPT,DOSPOR,SAR,INFONAVIT,PTU,ID_SAT)
VALUES('270','IDVD','Vacaciones Disfrutadas','0','0','0','0','0','0','0','001');
INSERT INTO TBL_NOM_MOVIMIENTOS_NOMINA(ID_Movimiento,Tipo_Movimiento,Descripcion,Deduccion,IMSS,ISPT,DOSPOR,SAR,INFONAVIT,PTU,ID_SAT)
VALUES('280','IPVE','PRIMA VACACIONAL EXENTA','0','0','0','0','0','0','0','021');
INSERT INTO TBL_NOM_MOVIMIENTOS_NOMINA(ID_Movimiento,Tipo_Movimiento,Descripcion,Deduccion,IMSS,ISPT,DOSPOR,SAR,INFONAVIT,PTU,ID_SAT)
VALUES('290','IPVG','PRIMA VACACIONAL GRAVADA','0','0','0','0','0','0','0','021');
INSERT INTO TBL_NOM_MOVIMIENTOS_NOMINA(ID_Movimiento,Tipo_Movimiento,Descripcion,Deduccion,IMSS,ISPT,DOSPOR,SAR,INFONAVIT,PTU,ID_SAT)
VALUES('300','VALS','DESPENSA BASICA','0','0','0','0','0','0','0','029');
INSERT INTO TBL_NOM_MOVIMIENTOS_NOMINA(ID_Movimiento,Tipo_Movimiento,Descripcion,Deduccion,IMSS,ISPT,DOSPOR,SAR,INFONAVIT,PTU,ID_SAT)
VALUES('310','AAP','Ajuste a Pagos Negativos','0','0','0','0','0','0','0','016');
INSERT INTO TBL_NOM_MOVIMIENTOS_NOMINA(ID_Movimiento,Tipo_Movimiento,Descripcion,Deduccion,IMSS,ISPT,DOSPOR,SAR,INFONAVIT,PTU,ID_SAT)
VALUES('610','FLT','Falta','1','0','0','0','0','0','0','020');
INSERT INTO TBL_NOM_MOVIMIENTOS_NOMINA(ID_Movimiento,Tipo_Movimiento,Descripcion,Deduccion,IMSS,ISPT,DOSPOR,SAR,INFONAVIT,PTU,ID_SAT)
VALUES('620','DSP','Permiso Sin Goce de Sueldo','1','0','0','0','0','0','0','004');
INSERT INTO TBL_NOM_MOVIMIENTOS_NOMINA(ID_Movimiento,Tipo_Movimiento,Descripcion,Deduccion,IMSS,ISPT,DOSPOR,SAR,INFONAVIT,PTU,ID_SAT)
VALUES('630','DAP','Descuento por Retardos','1','0','0','0','0','0','0','004');
INSERT INTO TBL_NOM_MOVIMIENTOS_NOMINA(ID_Movimiento,Tipo_Movimiento,Descripcion,Deduccion,IMSS,ISPT,DOSPOR,SAR,INFONAVIT,PTU,ID_SAT)
VALUES('640','DPI','Descuento por Retardos Acumulados','1','0','0','0','0','0','0','004');
INSERT INTO TBL_NOM_MOVIMIENTOS_NOMINA(ID_Movimiento,Tipo_Movimiento,Descripcion,Deduccion,IMSS,ISPT,DOSPOR,SAR,INFONAVIT,PTU,ID_SAT)
VALUES('650','IXM','Incapacidad Por Maternidad','1','0','0','0','0','0','0','006');
INSERT INTO TBL_NOM_MOVIMIENTOS_NOMINA(ID_Movimiento,Tipo_Movimiento,Descripcion,Deduccion,IMSS,ISPT,DOSPOR,SAR,INFONAVIT,PTU,ID_SAT)
VALUES('660','IXE','Incapacidad Por Enfermedad','1','0','0','0','0','0','0','006');
INSERT INTO TBL_NOM_MOVIMIENTOS_NOMINA(ID_Movimiento,Tipo_Movimiento,Descripcion,Deduccion,IMSS,ISPT,DOSPOR,SAR,INFONAVIT,PTU,ID_SAT)
VALUES('670','IXA','Incapacidad Por Accidente','1','0','0','0','0','0','0','006');
INSERT INTO TBL_NOM_MOVIMIENTOS_NOMINA(ID_Movimiento,Tipo_Movimiento,Descripcion,Deduccion,IMSS,ISPT,DOSPOR,SAR,INFONAVIT,PTU,ID_SAT)
VALUES('680','IMSS','I.M.S.S.','1','0','0','0','0','0','0','001');
INSERT INTO TBL_NOM_MOVIMIENTOS_NOMINA(ID_Movimiento,Tipo_Movimiento,Descripcion,Deduccion,IMSS,ISPT,DOSPOR,SAR,INFONAVIT,PTU,ID_SAT)
VALUES('690','ISPT','I.S.P.T.','1','0','0','0','0','0','0','002');
INSERT INTO TBL_NOM_MOVIMIENTOS_NOMINA(ID_Movimiento,Tipo_Movimiento,Descripcion,Deduccion,IMSS,ISPT,DOSPOR,SAR,INFONAVIT,PTU,ID_SAT)
VALUES('700','ISPSB','Subsidio Acreditable','1','0','0','0','0','0','0','004');
INSERT INTO TBL_NOM_MOVIMIENTOS_NOMINA(ID_Movimiento,Tipo_Movimiento,Descripcion,Deduccion,IMSS,ISPT,DOSPOR,SAR,INFONAVIT,PTU,ID_SAT)
VALUES('710','CRDFS','SUBSIDIO AL EMPLEO','1','0','0','0','0','0','0','004');
INSERT INTO TBL_NOM_MOVIMIENTOS_NOMINA(ID_Movimiento,Tipo_Movimiento,Descripcion,Deduccion,IMSS,ISPT,DOSPOR,SAR,INFONAVIT,PTU,ID_SAT)
VALUES('720','INFON','DESCUENTO INFONAVIT','1','0','0','0','0','0','0','010');
INSERT INTO TBL_NOM_MOVIMIENTOS_NOMINA(ID_Movimiento,Tipo_Movimiento,Descripcion,Deduccion,IMSS,ISPT,DOSPOR,SAR,INFONAVIT,PTU,ID_SAT)
VALUES('730','FONAC','Abono Credito Fonacot','1','0','0','0','0','0','0','011');
INSERT INTO TBL_NOM_MOVIMIENTOS_NOMINA(ID_Movimiento,Tipo_Movimiento,Descripcion,Deduccion,IMSS,ISPT,DOSPOR,SAR,INFONAVIT,PTU,ID_SAT)
VALUES('740','CSIN','Cuota Sindical','1','0','0','0','0','0','0','019');
INSERT INTO TBL_NOM_MOVIMIENTOS_NOMINA(ID_Movimiento,Tipo_Movimiento,Descripcion,Deduccion,IMSS,ISPT,DOSPOR,SAR,INFONAVIT,PTU,ID_SAT)
VALUES('750','ACA','Ahorro','1','0','0','0','0','0','0','004');
INSERT INTO TBL_NOM_MOVIMIENTOS_NOMINA(ID_Movimiento,Tipo_Movimiento,Descripcion,Deduccion,IMSS,ISPT,DOSPOR,SAR,INFONAVIT,PTU,ID_SAT)
VALUES('760','ASP','Pago de Ajustes Anteriores','1','0','0','0','0','0','0','004');


--@FIN_BLOQUE
CREATE TABLE tbl_nom_masemp
(
  id_empleado character(6) NOT NULL,
  id_compania smallint NOT NULL,
  id_sucursal smallint NOT NULL,
  id_departamento character(4) NOT NULL,
  id_turno smallint NOT NULL,
  id_turno_comedor smallint NOT NULL,
  id_categoria smallint NOT NULL,
  nombre character varying(20) NOT NULL,
  apellido_paterno character varying(20) NOT NULL,
  apellido_materno character varying(20) NOT NULL,
  fecha_de_nacimiento timestamp without time zone NOT NULL,
  fecha_de_ingreso timestamp without time zone NOT NULL,
  fecha_cambio_empresa timestamp without time zone,
  zona_economica smallint NOT NULL,
  rfc_letras character varying(4) NOT NULL,
  rfc_fecha character(6) NOT NULL,
  rfc_homoclave character varying(3) NOT NULL,
  rfc_digito character(1) NOT NULL,
  curp character varying(40) NOT NULL,
  calculosimplificado bit(1) NOT NULL,
  tipo_de_nomina smallint NOT NULL,
  jornada smallint NOT NULL,
  sindicalizado bit(1) NOT NULL,
  horas_por_jornada numeric(4,2) NOT NULL,
  status smallint NOT NULL,
  motivo_baja character varying(40) NOT NULL,
  reparto_de_utilidades bit(1) NOT NULL,
  premio_de_puntualidad bit(1) NOT NULL,
  castigo_impuntualidad bit(1) NOT NULL,
  puesto character varying(40) NOT NULL,
  salario_nominal numeric(8,2) NOT NULL,
  salario_diario numeric(8,2) NOT NULL,
  salario_por_hora numeric(10,4) NOT NULL,
  salario_integrado numeric(8,2) NOT NULL,
  aplica_horas_extras bit(1) NOT NULL,
  fecha_vacaciones timestamp without time zone NOT NULL,
  dias_vacaciones smallint NOT NULL,
  prima_de_vacaciones numeric(3,3) NOT NULL,
  num_registro_imss character varying(15) NOT NULL,
  jefe_inmediato character varying(35) NOT NULL,
  calle character varying(35) NOT NULL,
  numero character varying(10) NOT NULL,
  colonia character varying(35) NOT NULL,
  codigo_postal character varying(5) NOT NULL,
  delegacion character varying(35) NOT NULL,
  estado_civil character varying(15) NOT NULL,
  nombre_esposo character varying(40) NOT NULL,
  num_de_hijos smallint NOT NULL,
  nombre_de_hijos character varying(254) NOT NULL,
  nombre_padre character varying(40) NOT NULL,
  vive bit(1) NOT NULL,
  nombre_madre character varying(40) NOT NULL,
  viva bit(1) NOT NULL,
  escolaridad character varying(15) NOT NULL,
  trabajo_anterior_grupo character(4) NOT NULL,
  ultimo_trabajo character varying(40) NOT NULL,
  recomendado_por character varying(40) NOT NULL,
  en_accidente_avisar character varying(40) NOT NULL,
  fecha_para_liquidaciones timestamp without time zone,
  fecha_cambio_obrero_empleado timestamp without time zone,
  cuenta_bancaria character varying(18) NOT NULL,
  historial_puestos character varying(40) NOT NULL,
  registro_infonavit character varying(13) NOT NULL,
  prestamo_infonavit numeric(10,2) NOT NULL,
  porcentaje_descuento numeric(4,4) NOT NULL,
  prestamo_vsm numeric(8,2) NOT NULL,
  descuento_vsm numeric(10,4) NOT NULL,
  fecha_alta_infonavit timestamp without time zone,
  fecha_liquidacion_infonavit timestamp without time zone,
  registro_fonacot character varying(10) NOT NULL,
  numero_de_credito character varying(5) NOT NULL,
  prestamo_fonacot numeric(8,2) NOT NULL,
  ayuda_vales_de_despensa bit(1) NOT NULL,
  importe_vales_de_despensa numeric(8,2) NOT NULL,
  id_xaction character varying(20) NOT NULL,
  compensacionanual bit(1) NOT NULL,
  salario_mixto numeric(8,2) NOT NULL,
  calculomixto bit(1) NOT NULL,
  compensacionanualfija numeric(19,4) NOT NULL,
  regimen smallint NOT NULL,
  id_satbanco character(3) NOT NULL,
  noint character varying(10) NOT NULL,
  localidad character varying(80) NOT NULL,
  estado character varying(40) NOT NULL,
  pais character varying(20) NOT NULL,
  smtp smallint NOT NULL,
  email character varying(254) NOT NULL,
  pcs numeric(8,6) NOT NULL,
  CONSTRAINT pk_tbl_nom_masemp PRIMARY KEY (id_empleado),
  CONSTRAINT fk_tbl_nom_masemp_tbl_companias FOREIGN KEY (id_compania, id_sucursal)
      REFERENCES tbl_companias (id_compania, id_sucursal) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_tbl_nom_masemp_tbl_nom_categorias FOREIGN KEY (id_categoria)
      REFERENCES tbl_nom_categorias (id_categoria) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_tbl_nom_masemp_tbl_nom_departamentos FOREIGN KEY (id_departamento)
      REFERENCES tbl_nom_departamentos (id_departamento) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_tbl_nom_masemp_tbl_nom_turnos FOREIGN KEY (id_turno)
      REFERENCES tbl_nom_turnos (id_turno) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE
);

--@FIN_BLOQUE
CREATE TABLE tbl_nom_masemp_ptu
(
  ano smallint NOT NULL,
  id_empleado character(6) NOT NULL,
  salario_diario numeric(19,4) NOT NULL,
  sindicalizado bit(1) NOT NULL,
  dias numeric(5,2) NOT NULL,
  ixa numeric(5,2) NOT NULL,
  ixe numeric(5,2) NOT NULL,
  ixm numeric(5,2) NOT NULL,
  diastotales numeric(5,2) NOT NULL,
  sueldo numeric(19,4) NOT NULL,
  ptue numeric(19,4) NOT NULL,
  ptug numeric(19,4) NOT NULL,
  factordias numeric(10,8),
  factorsueldo numeric(10,8),
  ptudias numeric(19,4),
  ptusueldo numeric(19,4),
  CONSTRAINT pk_tbl_nom_masemp_ptu PRIMARY KEY (ano, id_empleado),
  CONSTRAINT fk_tbl_nom_masemp_ptu_tbl_nom_masemp FOREIGN KEY (id_empleado)
      REFERENCES tbl_nom_masemp (id_empleado) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE
);
--ALTER TABLE tbl_nom_masemp_ptu

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('NOM_DEPARTAMENTOS');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('NOM_DEPARTAMENTOS_AGREGAR');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('NOM_DEPARTAMENTOS_CAMBIAR');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('NOM_TURNOS');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('NOM_TURNOS_AGREGAR');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('NOM_TURNOS_CAMBIAR');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('NOM_CATEGORIAS');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('NOM_CATEGORIAS_AGREGAR');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('NOM_CATEGORIAS_CAMBIAR');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('NOM_EMPLEADOS');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('NOM_EMPLEADOS_AGREGAR');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('NOM_EMPLEADOS_CAMBIAR');

  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION view_nomina_entidades_ids(_id_usuario character varying, _entidad character varying)
  RETURNS SETOF record AS
$BODY$  
BEGIN
	IF _ID_Usuario = 'cef-su' OR (select count(*) from tbl_usuarios_submodulo_roles where id_usuario = _id_usuario and id_rol = 'cef-nom') > 0
	THEN
		IF _Entidad = 'CEF-X' -- Regresa todo el set
		THEN
			RETURN QUERY
			SELECT _id_usuario as id_usuario, e.ID_Sucursal, e.Tipo, e.Periodo, e.Descripcion, e.Nombre, e.Fmt_Nomina, e.Fmt_Recibo, e.CFD
			FROM  TBL_COMPANIAS e 
			ORDER BY e.ID_Sucursal ASC;
		ELSIF _Entidad = 'CEF-1'
		THEN
			RETURN QUERY 
			SELECT _id_usuario as id_usuario, e.ID_Sucursal, e.Tipo, e.Periodo, e.Descripcion, e.Nombre, e.Fmt_Nomina, e.Fmt_Recibo, e.CFD
			FROM  TBL_COMPANIAS e 
			ORDER BY e.ID_Sucursal ASC
			LIMIT 1;
		ELSE
			RETURN QUERY 
			SELECT      _id_usuario as id_usuario, e.ID_Sucursal, e.Tipo, e.Periodo, e.Descripcion, e.Nombre, e.Fmt_Nomina, e.Fmt_Recibo, e.CFD
			FROM  TBL_COMPANIAS e 
			WHERE e.ID_Compania = 0 and e.ID_Sucursal = _Entidad::smallint;
		END IF;
	ELSE
		IF _Entidad = 'CEF-X' -- Regresa todo el set
		THEN
			RETURN QUERY 
			SELECT _ID_Usuario as ID_Usuario, e.ID_Sucursal, e.Tipo, e.Periodo, e.Descripcion, e.Nombre, e.Fmt_Nomina, e.Fmt_Recibo, e.CFD
			FROM TBL_COMPANIAS e INNER JOIN 
				TBL_USUARIOS_SUBMODULO_NOMINA u ON e.ID_Compania = u.ID_Compania and e.ID_Sucursal = u.ID_Sucursal
			WHERE (u.id_usuario = _ID_Usuario OR u.id_usuario IN
				(select sr.ID_Rol from tbl_usuarios_submodulo_roles sr where sr.id_usuario = _ID_Usuario))
			ORDER BY e.ID_Sucursal ASC;
		ELSIF _Entidad = 'CEF-1'
		THEN
			RETURN QUERY 
			SELECT _ID_Usuario as ID_Usuario, e.ID_Sucursal, e.Tipo, e.Periodo, e.Descripcion, e.Nombre, e.Fmt_Nomina, e.Fmt_Recibo, e.CFD
			FROM TBL_COMPANIAS e INNER JOIN 
				TBL_USUARIOS_SUBMODULO_NOMINA u ON e.ID_Compania = u.ID_Compania and e.ID_Sucursal = u.ID_Sucursal
			WHERE (u.id_usuario = _ID_Usuario OR u.id_usuario IN
				(select sr.ID_Rol from tbl_usuarios_submodulo_roles sr where sr.id_usuario = _ID_Usuario))
			ORDER BY e.ID_Sucursal ASC
			LIMIT 1;
		ELSE
			RETURN QUERY
			SELECT _ID_Usuario as ID_Usuario, e.ID_Sucursal, e.Tipo, e.Periodo, e.Descripcion, e.Nombre, e.Fmt_Nomina, e.Fmt_Recibo, e.CFD
			FROM TBL_COMPANIAS e INNER JOIN 
				TBL_USUARIOS_SUBMODULO_NOMINA u ON e.ID_Compania = u.ID_Compania and e.ID_Sucursal = u.ID_Sucursal
			WHERE (u.id_usuario = _ID_Usuario OR u.id_usuario IN
				(select sr.ID_Rol from tbl_usuarios_submodulo_roles sr where sr.id_usuario = _ID_Usuario))
			AND e.ID_Compania = 0 and e.ID_Sucursal = _Entidad::smallint;
		END IF;
	END IF;
END
$BODY$
  LANGUAGE plpgsql;
  
INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('NOM_ISR');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('NOM_ISR_AGREGAR');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('NOM_ISR_CAMBIAR');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('NOM_IMSS');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('NOM_IMSS_AGREGAR');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('NOM_IMSS_CAMBIAR');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('NOM_AGUINALDO');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('NOM_AGUINALDO_AGREGAR');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('NOM_AGUINALDO_CAMBIAR');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('NOM_VACACIONES');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('NOM_VACACIONES_AGREGAR');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('NOM_VACACIONES_CAMBIAR');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('NOM_CREDSAL');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('NOM_CREDSAL_AGREGAR');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('NOM_CREDSAL_CAMBIAR');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('NOM_ASISTENCIAS');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('NOM_ASISTENCIAS_AGREGAR');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('NOM_ASISTENCIAS_CAMBIAR');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('NOM_ASISTENCIAS_ELIMINAR');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('NOM_PERMISOS');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('NOM_PERMISOS_AGREGAR');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('NOM_PERMISOS_CAMBIAR');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('NOM_PERMISOS_ELIMINAR');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('NOM_AGUINALDO_ELIMINAR');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('NOM_VACACIONES_ELIMINAR');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('NOM_ISR_ELIMINAR');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('NOM_IMSS_ELIMINAR');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('NOM_CREDSAL_ELIMINAR');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('NOM_FONACOT_ELIMINAR');


--@FIN_BLOQUE
CREATE TABLE tbl_nom_aguinaldo
(
  id_aguinaldo smallint NOT NULL,
  desde numeric(5,3) NOT NULL,
  hasta numeric(5,3) NOT NULL,
  dias smallint NOT NULL,
  CONSTRAINT pk_tbl_nom_aguinaldo PRIMARY KEY (id_aguinaldo )
);



--@FIN_BLOQUE
CREATE TABLE tbl_nom_asistencias
(
  id_empleado character(6) NOT NULL,
  id_fechamovimiento timestamp without time zone NOT NULL,
  entrada timestamp without time zone,
  salida timestamp without time zone,
  indicador smallint NOT NULL,
  entrada2 timestamp without time zone,
  salida2 timestamp without time zone,
  CONSTRAINT pk_tbl_nom_asistencias PRIMARY KEY (id_empleado , id_fechamovimiento ),
  CONSTRAINT fk_tbl_nom_asistencias_tbl_nom_masemp FOREIGN KEY (id_empleado)
      REFERENCES tbl_nom_masemp (id_empleado) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE
);



--@FIN_BLOQUE
CREATE TABLE tbl_nom_credito_salario
(
  id_cs smallint NOT NULL,
  ingresos_desde numeric(10,2) NOT NULL,
  ingresos_hasta numeric(10,2) NOT NULL,
  csm numeric(10,2) NOT NULL,
  CONSTRAINT pk_tbl_nom_credito_salario PRIMARY KEY (id_cs )
);



--@FIN_BLOQUE
CREATE TABLE tbl_nom_imss
(
  id_imss smallint NOT NULL,
  concepto character varying(40) NOT NULL,
  cuota_patron numeric(9,6) NOT NULL,
  cuota_trabajador numeric(9,6) NOT NULL,
  total numeric(9,6) NOT NULL,
  CONSTRAINT pk_tbl_nom_imss PRIMARY KEY (id_imss )
);



--@FIN_BLOQUE
CREATE TABLE tbl_nom_isr
(
  id_isr smallint NOT NULL,
  limite_inferior numeric(10,2) NOT NULL,
  limite_superior numeric(10,2) NOT NULL,
  cuota_fija numeric(10,2) NOT NULL,
  porcentaje_exd numeric(10,6) NOT NULL,
  subsidio numeric(10,2) NOT NULL,
  subsidio_sim numeric(10,2) NOT NULL,
  CONSTRAINT pk_tbl_nom_isr PRIMARY KEY (id_isr)
);
--ALTER TABLE tbl_nom_isr


--@FIN_BLOQUE
CREATE TABLE tbl_nom_isr_anualizado
(
  id_isr smallint NOT NULL,
  limite_inferior numeric(10,2) NOT NULL,
  limite_superior numeric(10,2) NOT NULL,
  cuota_fija numeric(10,2) NOT NULL,
  porcentaje_exd numeric(10,6) NOT NULL,
  subsidio numeric(10,2) NOT NULL,
  subsidio_sim numeric(10,2) NOT NULL,
  CONSTRAINT pk_tbl_nom_isr_anualizado PRIMARY KEY (id_isr)
);
--ALTER TABLE tbl_nom_isr_anualizado


--@FIN_BLOQUE
CREATE TABLE tbl_nom_movimientos
(
  id_movimiento smallint NOT NULL,
  descripcion character varying(50) NOT NULL,
  id_sistema smallint NOT NULL,
  diascompletos bit(1) NOT NULL,
  aplicaaltipo smallint NOT NULL,
  porempleado bit(1) NOT NULL,
  CONSTRAINT pk_tbl_nom_movimientos PRIMARY KEY (id_movimiento )
);



--@FIN_BLOQUE
CREATE TABLE tbl_nom_permisos
(
  id_empleado character(6) NOT NULL,
  id_movimiento smallint NOT NULL,
  id_fechamovimiento timestamp without time zone NOT NULL,
  diascompletos bit(1) NOT NULL,
  fechahora_desde timestamp without time zone NOT NULL,
  fechahora_hasta timestamp without time zone NOT NULL,
  num_de_dias smallint NOT NULL,
  num_de_horas numeric(4,2) NOT NULL,
  tiempo_por_pagar numeric(5,2),
  obs character varying(254) NOT NULL,
  CONSTRAINT pk_tbl_nom_permisos PRIMARY KEY (id_empleado , id_movimiento , id_fechamovimiento ),
  CONSTRAINT fk_tbl_nom_permisos_tbl_nom_masemp FOREIGN KEY (id_empleado)
      REFERENCES tbl_nom_masemp (id_empleado) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_tbl_nom_permisos_tbl_nom_movimientos FOREIGN KEY (id_movimiento)
      REFERENCES tbl_nom_movimientos (id_movimiento) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE
);



--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_nom_isr AS 
 SELECT n.id_isr, n.limite_inferior, n.limite_superior, n.cuota_fija, n.porcentaje_exd, n.subsidio, n.subsidio_sim, a.limite_inferior AS limite_inferior_anual, a.limite_superior AS limite_superior_anual, a.cuota_fija AS cuota_fija_anual, a.porcentaje_exd AS porcentaje_exd_anual, a.subsidio AS subsidio_anual, a.subsidio_sim AS subsidio_sim_anual
   FROM tbl_nom_isr n
   JOIN tbl_nom_isr_anualizado a ON n.id_isr = a.id_isr;

--ALTER TABLE view_nom_isr

--@FIN_BLOQUE
CREATE TABLE tbl_nom_asistencias_chequeos
(
  id_empleado character(6) NOT NULL,
  id_fechahora timestamp without time zone NOT NULL,
  CONSTRAINT pk_tbl_nom_asistencias_chequeos PRIMARY KEY (id_empleado , id_fechahora ),
  CONSTRAINT fk_tbl_nom_asistencias_chequeos_tbl_nom_masemp FOREIGN KEY (id_empleado)
      REFERENCES tbl_nom_masemp (id_empleado) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE
);



--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_nom_asistencias_chequeos AS 
 SELECT com.descripcion AS compania, a.id_fechahora AS id_fecha, c.id_empleado, (((c.nombre::text || ' '::text) || c.apellido_paterno::text) || ' '::text) || c.apellido_materno::text AS nombre, com.id_sucursal
   FROM tbl_nom_masemp c
   JOIN tbl_nom_asistencias_chequeos a ON a.id_empleado = c.id_empleado
   JOIN tbl_companias com ON c.id_compania = com.id_compania AND c.id_sucursal = com.id_sucursal;



--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_nom_permisos AS 
 SELECT c.id_compania, c.id_sucursal, com.descripcion AS compania, p.id_empleado, p.id_movimiento, p.id_fechamovimiento, (((c.nombre::text || ' '::text) || c.apellido_paterno::text) || ' '::text) || c.apellido_materno::text AS nombre, m.descripcion, p.fechahora_desde AS desde, 
        CASE
            WHEN p.diascompletos = B'1'::"bit" THEN p.fechahora_hasta - '1 day'::interval
            ELSE p.fechahora_hasta
        END AS hasta, p.diascompletos, p.num_de_dias, p.num_de_horas, p.tiempo_por_pagar, p.obs
   FROM tbl_nom_permisos p
   JOIN tbl_nom_masemp c ON p.id_empleado = c.id_empleado
   JOIN tbl_nom_movimientos m ON p.id_movimiento = m.id_movimiento
   JOIN tbl_companias com ON c.id_compania = com.id_compania AND c.id_sucursal = com.id_sucursal
  WHERE p.id_movimiento > 0;

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('NOM_PLANTILLAS');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('NOM_PLANTILLAS_AGREGAR');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('NOM_PLANTILLAS_CAMBIAR');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('NOM_PLANTILLAS_ELIMINAR');



--@FIN_BLOQUE
CREATE TABLE tbl_nom_plantillas
(
  id_plantilla serial NOT NULL,
  id_movimiento smallint NOT NULL,
  fecha timestamp without time zone NOT NULL,
  descripcion character varying(254) NOT NULL,
  bid_empleado bit(1) NOT NULL,
  id_empleado character(6),
  bnomina bit(1) NOT NULL,
  ano smallint,
  numero_nomina smallint,
  btipo_nomina bit(1) NOT NULL,
  tipo_de_nomina smallint,
  bcompania_sucursal bit(1) NOT NULL,
  id_compania smallint,
  id_sucursal smallint,
  bnivel_confianza bit(1) NOT NULL,
  nivel_de_confianza smallint,
  aplicacion smallint NOT NULL,
  horas numeric(4,2),
  dias smallint,
  veces_importe smallint,
  importe numeric(10,2),
  bexento bit(1) NOT NULL,
  exento numeric(10,2),
  mixto bit(1) NOT NULL,
  inclusiones bit(1) NOT NULL,
  calcular bit(1) NOT NULL,
  CONSTRAINT pk_tbl_nom_plantillas PRIMARY KEY (id_plantilla ),
  CONSTRAINT fk_tbl_nom_plantillas_tbl_companias FOREIGN KEY (id_compania, id_sucursal)
      REFERENCES tbl_companias (id_compania, id_sucursal) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION,
  CONSTRAINT fk_tbl_nom_plantillas_tbl_nom_masemp FOREIGN KEY (id_empleado)
      REFERENCES tbl_nom_masemp (id_empleado) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION,
  CONSTRAINT fk_tbl_nom_plantillas_tbl_nom_movimientos_nomina FOREIGN KEY (id_movimiento)
      REFERENCES tbl_nom_movimientos_nomina (id_movimiento) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE
);



--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_nom_plantillas_modulo AS 
 SELECT p.id_plantilla, p.bid_empleado, p.bnomina, p.btipo_nomina, p.bcompania_sucursal, p.bnivel_confianza, 
        CASE
            WHEN p.bcompania_sucursal = B'0'::"bit" AND p.bid_empleado = B'0'::"bit" THEN ''::character varying
            WHEN p.bcompania_sucursal = B'1'::"bit" AND p.bid_empleado = B'0'::"bit" THEN ( SELECT tbl_companias.descripcion
               FROM tbl_companias
              WHERE tbl_companias.id_compania = p.id_compania AND tbl_companias.id_sucursal = p.id_sucursal)
            WHEN p.bcompania_sucursal = B'0'::"bit" AND p.bid_empleado = B'1'::"bit" THEN ( SELECT sc.descripcion
               FROM tbl_companias sc
          JOIN tbl_nom_masemp sm ON sc.id_compania = sm.id_compania AND sc.id_sucursal = sm.id_sucursal
         WHERE sm.id_empleado = p.id_empleado)
            ELSE ''::character varying
        END AS compania, p.fecha, p.id_movimiento, 
        CASE
            WHEN p.bid_empleado = B'1'::"bit" THEN p.id_empleado
            ELSE ''::bpchar
        END AS id_empleado, m.descripcion AS movimiento, p.descripcion, (((((
        CASE
            WHEN p.btipo_nomina = B'1'::"bit" THEN '  TIPO DE NOMINA: '::text || (( SELECT 
                    CASE
                        WHEN p.tipo_de_nomina = 1 OR p.tipo_de_nomina = 2 OR p.tipo_de_nomina = 12 THEN '<b>NORMAL</b> '::text
                        WHEN p.tipo_de_nomina = 3 OR p.tipo_de_nomina = 4 OR p.tipo_de_nomina = 34 THEN '<b>ESPECIAL</b> '::text
                        WHEN p.tipo_de_nomina = 5 OR p.tipo_de_nomina = 6 OR p.tipo_de_nomina = 56 THEN '<b>AGUINALDO</b> '::text
                        WHEN p.tipo_de_nomina = 7 OR p.tipo_de_nomina = 8 OR p.tipo_de_nomina = 78 THEN '<b>VALES</b> '::text
                        ELSE '<b>DESCONOCIDA</b> '::text
                    END AS "case"))
            ELSE ''::text
        END || 
        CASE
            WHEN p.bid_empleado = B'1'::"bit" THEN '  EMPLEADO: <b>'::text || (( SELECT ((((tbl_nom_masemp.nombre::text || ' '::text) || tbl_nom_masemp.apellido_paterno::text) || ' '::text) || tbl_nom_masemp.apellido_materno::text) || '</b>'::text
               FROM tbl_nom_masemp
              WHERE tbl_nom_masemp.id_empleado = p.id_empleado))
            ELSE ''::text
        END) || 
        CASE
            WHEN p.bnomina = B'1'::"bit" THEN ((('  NUMERO: <b>'::text || p.numero_nomina::character varying::text) || ' '::text) || p.ano::character varying::text) || '</b>'::text
            ELSE ''::text
        END) || 
        CASE
            WHEN p.bcompania_sucursal = B'1'::"bit" THEN '  NOMINA: <b>'::text || (( SELECT tbl_companias.descripcion::text || '</b>'::text
               FROM tbl_companias
              WHERE tbl_companias.id_compania = p.id_compania AND tbl_companias.id_sucursal = p.id_sucursal))
            ELSE ''::text
        END) || 
        CASE
            WHEN p.bnivel_confianza = B'1'::"bit" THEN '  TIPO DE EMPLEADOS: '::text || (( SELECT 
                    CASE
                        WHEN p.nivel_de_confianza = 1 THEN '<b>SINDICALIZADOS</b>'::text
                        ELSE '<b>NO SINDICALIZADOS</b>'::text
                    END AS "case"))
            ELSE ''::text
        END) || 
        CASE
            WHEN p.aplicacion = 0 THEN ('  HORAS: <b>'::text || p.horas::character varying::text) || '</b>'::text
            WHEN p.aplicacion = 1 THEN (('  DIAS DE SALARIO: <b>'::text || p.dias::character varying::text) || 
            CASE
                WHEN p.mixto = B'1'::"bit" THEN ' MIXTO '::text
                ELSE ''::text
            END) || '</b>'::text
            ELSE ('  IMPORTE: <b>'::text || p.importe::character varying::text) || '</b>'::text
        END) || 
        CASE
            WHEN p.bexento = B'1'::"bit" THEN ('  EXENTO: <b>'::text || p.exento::character varying::text) || '</b>'::text
            ELSE ''::text
        END AS aplicacion, p.calcular
   FROM tbl_nom_plantillas p
   JOIN tbl_nom_movimientos_nomina m ON p.id_movimiento = m.id_movimiento;

--@FIN_BLOQUE
INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('NOM_FONACOT');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('NOM_FONACOT_AGREGAR');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('NOM_FONACOT_CAMBIAR');



--@FIN_BLOQUE
CREATE TABLE tbl_nom_fonacot_cab
(
  id_credito character varying(10) NOT NULL,
  id_empleado character(6) NOT NULL,
  fecha timestamp without time zone NOT NULL,
  meses smallint NOT NULL,
  plazo smallint NOT NULL,
  importe numeric(19,4) NOT NULL,
  retencion numeric(19,4) NOT NULL,
  CONSTRAINT pk_tbl_nom_fonacot_cab PRIMARY KEY (id_credito ),
  CONSTRAINT fk_tbl_nom_fonacot_cab_tbl_nom_masemp FOREIGN KEY (id_empleado)
      REFERENCES tbl_nom_masemp (id_empleado) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE
);



--@FIN_BLOQUE
CREATE TABLE tbl_nom_fonacot_det
(
  id_credito character varying(10) NOT NULL,
  fecha timestamp without time zone NOT NULL,
  descuento numeric(19,4) NOT NULL,
  CONSTRAINT pk_tbl_nom_fonacot_det PRIMARY KEY (id_credito , fecha ),
  CONSTRAINT fk_tbl_nom_fonacot_det_tbl_nom_fonacot_cab FOREIGN KEY (id_credito)
      REFERENCES tbl_nom_fonacot_cab (id_credito) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE
);



--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_nom_fonacot AS 
 SELECT f.id_credito, f.id_empleado, (((m.nombre::text || ' '::text) || m.apellido_paterno::text) || ' '::text) || m.apellido_materno::text AS nombre, f.fecha, f.meses, f.plazo, f.importe, f.retencion, ( SELECT 
                CASE
                    WHEN sum(tbl_nom_fonacot_det.descuento) IS NULL THEN 0.0
                    ELSE sum(tbl_nom_fonacot_det.descuento)
                END AS sum
           FROM tbl_nom_fonacot_det
          WHERE tbl_nom_fonacot_det.id_credito::text = f.id_credito::text) AS descuentos
   FROM tbl_nom_fonacot_cab f
   JOIN tbl_nom_masemp m ON f.id_empleado = m.id_empleado;
   
INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('NOM_CIERRE');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('NOM_CIERRE_AGREGAR');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('NOM_CIERRE_CAMBIAR');



--@FIN_BLOQUE
CREATE TABLE tbl_nom_diario_cab
(
  id_compania smallint NOT NULL,
  id_sucursal smallint NOT NULL,
  id_fechamovimiento timestamp without time zone NOT NULL,
  cerrado bit(1) NOT NULL,
  CONSTRAINT pk_tbl_nom_diario_cab PRIMARY KEY (id_compania , id_sucursal , id_fechamovimiento ),
  CONSTRAINT fk_tbl_nom_diario_cab_tbl_companias FOREIGN KEY (id_compania, id_sucursal)
      REFERENCES tbl_companias (id_compania, id_sucursal) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE
);



--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_nom_diario_cierre_modulo AS 
 SELECT com.descripcion AS compania, d.id_compania, d.id_sucursal, d.id_fechamovimiento, d.cerrado
   FROM tbl_nom_diario_cab d
   JOIN tbl_companias com ON d.id_compania = com.id_compania AND d.id_sucursal = com.id_sucursal;
   
INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('NOM_NOMINA');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('NOM_NOMINA_AGREGAR');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('NOM_NOMINA_CAMBIAR');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('NOM_NOMINA_ELIMINAR');



--@FIN_BLOQUE
CREATE TABLE tbl_nom_calculo_nomina
(
  id_nomina serial NOT NULL,
  id_compania smallint NOT NULL,
  id_sucursal smallint NOT NULL,
  ano smallint NOT NULL,
  numero_nomina smallint NOT NULL,
  tipo smallint NOT NULL,
  fecha_desde timestamp without time zone NOT NULL,
  fecha_hasta timestamp without time zone NOT NULL,
  dias smallint NOT NULL,
  cerrado bit(1) NOT NULL,
  mes smallint NOT NULL,
  status character(1) NOT NULL,
  formapago character(1) NOT NULL,
  id_mov integer NOT NULL,
  id_pol integer NOT NULL,
  CONSTRAINT pk_tbl_nom_calculo_nomina PRIMARY KEY (id_nomina ),
  CONSTRAINT fk_tbl_nom_calculo_nomina_tbl_companias FOREIGN KEY (id_compania, id_sucursal)
      REFERENCES tbl_companias (id_compania, id_sucursal) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE
);



--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_nom_nominas_modulo AS 
 SELECT cn.id_nomina, cn.id_compania, cn.id_sucursal, com.descripcion AS compania, cn.ano, cn.tipo, 
        CASE
            WHEN cn.tipo = 1 OR cn.tipo = 2 THEN 'Normal'::text
            WHEN cn.tipo = 3 OR cn.tipo = 4 THEN 'Especial'::text
            WHEN cn.tipo = 5 OR cn.tipo = 6 THEN 'Aguinaldo'::text
            WHEN cn.tipo = 7 OR cn.tipo = 8 THEN 'Vales'::text
            ELSE 'OTRA'::text
        END AS tipo_nomina, cn.numero_nomina, cn.fecha_desde, cn.fecha_hasta, cn.dias, cn.cerrado, 
        CASE
            WHEN cn.cerrado = B'0'::"bit" THEN 'ABIERTA'::text
            ELSE 'PROTEGIDA'::text
        END AS proteccion, cn.status, cn.id_pol, ''::text AS pol, cn.formapago, cn.id_mov, 
        CASE
            WHEN cn.formapago = 'N'::bpchar THEN ''::text
            ELSE (((( SELECT tbl_bancos_cuentas.cuenta
               FROM tbl_bancos_cuentas
              WHERE tbl_bancos_cuentas.tipo = (( SELECT tbl_bancos_movimientos.tipo
                       FROM tbl_bancos_movimientos
                      WHERE tbl_bancos_movimientos.id = cn.id_mov)) AND tbl_bancos_cuentas.clave = (( SELECT tbl_bancos_movimientos.clave
                       FROM tbl_bancos_movimientos
                      WHERE tbl_bancos_movimientos.id = cn.id_mov))))::text) || ' '::text) || ((( SELECT tbl_bancos_movimientos.num
               FROM tbl_bancos_movimientos
              WHERE tbl_bancos_movimientos.id = cn.id_mov))::text)
        END AS pago
   FROM tbl_nom_calculo_nomina cn
   JOIN tbl_companias com ON cn.id_compania = com.id_compania AND cn.id_sucursal = com.id_sucursal;


--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_nom_departamentos_agregar(_id_departamento character, _nombre character varying)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255);
BEGIN
	_err := 0;
	_result := 'El departamento  se registr√≥ satisfactoriamente';
	
	-- si existe uno marcar? error
	IF(select count(*) from TBL_NOM_DEPARTAMENTOS where ID_Departamento = _ID_Departamento) > 0
	THEN
		_err := 1;
		_result := 'ERROR: Ya existe un departamento con esta clave ';
	END IF;
	
	IF _err = 0
	THEN
		INSERT INTO TBL_NOM_DEPARTAMENTOS
		VALUES( _ID_Departamento, _Nombre );
		
	END IF;
		
	RETURN QUERY SELECT _err, _result, _id_departamento;

END
$BODY$
  LANGUAGE plpgsql;
  
  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_nom_departamentos_cambiar(_id_departamento character, _nombre character varying)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255);
BEGIN
	_err := 0;
	_result := 'El departamento se cambio satisfactoriamente';
	
	IF(select count(*) from TBL_NOM_DEPARTAMENTOS where ID_Departamento = _ID_Departamento) < 1
	THEN
		_err := 3;
		_result := 'ERROR: No existe un departamento con esta clave ';
	END IF;
	
	IF _err = 0
	THEN
		UPDATE TBL_NOM_DEPARTAMENTOS
		SET Nombre = _Nombre
		WHERE ID_Departamento = _ID_Departamento;
		
	END IF;
		
	RETURN QUERY SELECT _err, _result, _id_departamento;

END
$BODY$
  LANGUAGE plpgsql;
  
  


--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_catalog_nomdep AS 
 SELECT c.id_departamento AS clave, c.nombre AS descripcion, ''::text AS especial
   FROM tbl_nom_departamentos c;
   



--@FIN_BLOQUE
CREATE TABLE tbl_nom_movimientos_nomina_det
(
  id_movimiento smallint NOT NULL,
  cuenta character(19) NOT NULL,
  id_departamento character(4) NOT NULL,
  CONSTRAINT pk_tbl_nom_movimientos_nomina_det PRIMARY KEY (id_movimiento , id_departamento ),
  CONSTRAINT fk_tbl_nom_movimientos_nomina_det_tbl_cont_catalogo FOREIGN KEY (cuenta)
      REFERENCES tbl_cont_catalogo (cuenta) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_tbl_nom_movimientos_nomina_det_tbl_nom_departamentos FOREIGN KEY (id_departamento)
      REFERENCES tbl_nom_departamentos (id_departamento) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_tbl_nom_movimientos_nomina_det_tbl_nom_movimientos_nomina FOREIGN KEY (id_movimiento)
      REFERENCES tbl_nom_movimientos_nomina (id_movimiento) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE
);

  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_nom_movimientos_nomina_agregar(_id_movimiento smallint, _tipo_movimiento character varying, _descripcion character varying, _deduccion bit, _imss bit, _ispt bit, _dospor bit, _sar bit, _infonavit bit, _ptu bit, _id_sat character)
  RETURNS SETOF record AS
$BODY$
DECLARE
	_err int; _result varchar(255);
BEGIN
	_err := 0;
	_result := 'El movimiento se registro satisfactoriamente';
	
	IF(select count(*) from TBL_NOM_MOVIMIENTOS_NOMINA where ID_Movimiento = _ID_Movimiento) > 0
	THEN
		_err := 3;
		_result := 'ERROR: Ya existe un movimiento con esta clave ';
	END IF;
	
	IF(select count(*) from TBL_NOM_MOVIMIENTOS_NOMINA where Tipo_Movimiento = _Tipo_Movimiento and Tipo_Movimiento <> 'DIN' ) > 0
	THEN
		_err := 3;
		_result := 'ERROR: Ya existe el tipo de movimiento fijo';
	END IF;

	IF _err = 0
	THEN
		INSERT INTO TBL_NOM_MOVIMIENTOS_NOMINA
		VALUES( _ID_Movimiento, _Tipo_Movimiento, _Descripcion, _Deduccion, _IMSS, _ISPT, _DOSPOR, _SAR, _INFONAVIT, _PTU, _ID_SAT );
		
		INSERT INTO TBL_NOM_MOVIMIENTOS_NOMINA_DET
		SELECT _ID_Movimiento, Cuenta, ID_Departamento
		FROM _TMP_NOM_MOVIMIENTOS_NOMINA_DET;
		
	END IF;
		
	RETURN QUERY SELECT _err, _result, _id_movimiento;

END
$BODY$
  LANGUAGE plpgsql;



--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_nom_movimientos_nomina_detalles AS 
 SELECT m.id_movimiento, m.cuenta, c.nombre, m.id_departamento, d.nombre AS nombre_departamento
   FROM tbl_nom_movimientos_nomina_det m
   JOIN tbl_cont_catalogo c ON m.cuenta = c.cuenta
   JOIN tbl_nom_departamentos d ON m.id_departamento = d.id_departamento;

  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_nom_movimientos_nomina_cambiar(_id_movimiento smallint, _tipo_movimiento character varying, _descripcion character varying, _deduccion bit, _imss bit, _ispt bit, _dospor bit, _sar bit, _infonavit bit, _ptu bit, _id_sat character)
  RETURNS SETOF record AS
$BODY$
DECLARE
	_err int; _result varchar(255); _tipomov varchar(5);
BEGIN
	_err := 0;
	_result := 'El movimiento se cambi√≥ satisfactoriamente';
	
	IF(select count(*) from TBL_NOM_MOVIMIENTOS_NOMINA where ID_Movimiento = _ID_Movimiento) < 1
	THEN
		_err := 3;
		_result := 'ERROR: No existe un movimiento con esta clave ';
	END IF;
	
	IF _err = 0
	THEN
		_tipomov = (select Tipo_Movimiento from TBL_NOM_MOVIMIENTOS_NOMINA where ID_Movimiento = _ID_Movimiento);
		
		DELETE FROM TBL_NOM_MOVIMIENTOS_NOMINA_DET
		WHERE ID_Movimiento = _ID_Movimiento;

		IF _tipomov = 'DIN'
		THEN
			UPDATE TBL_NOM_MOVIMIENTOS_NOMINA
			SET Descripcion = _Descripcion,  Deduccion = _Deduccion,
				IMSS = _IMSS, ISPT = _ISPT, DOSPOR = _DOSPOR, SAR = _SAR, INFONAVIT = _INFONAVIT, PTU = _PTU, ID_SAT = _ID_SAT
			WHERE ID_Movimiento = _ID_Movimiento;
		ELSE
			UPDATE TBL_NOM_MOVIMIENTOS_NOMINA
			SET ID_SAT = _ID_SAT
			WHERE ID_Movimiento = _ID_Movimiento;
		END IF;
		
		INSERT INTO TBL_NOM_MOVIMIENTOS_NOMINA_DET
		SELECT _ID_Movimiento, Cuenta, ID_Departamento
		FROM _TMP_NOM_MOVIMIENTOS_NOMINA_DET;
		
	END IF;
		
	RETURN QUERY SELECT _err, _result, _id_movimiento;

END
$BODY$
  LANGUAGE plpgsql;
  
  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_nom_categorias_agregar(_id_categoria smallint, _descripcion character varying, _sueldo numeric, _sueldoam numeric, _integradoam numeric, _vales numeric, _valesam numeric)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255);
BEGIN
	_err := 0;
	_result := 'La categoria se registr√≥ satisfactoriamente';
	
	-- si existe marcar? error
	IF(select count(*) from TBL_NOM_CATEGORIAS where ID_Categoria = _ID_Categoria) > 0
	THEN
		_err := 3;
		_result := 'ERROR: Ya existe una categor?a con la clave ';
	END IF;
	
	IF _err = 0
	THEN
		INSERT INTO TBL_NOM_CATEGORIAS
		VALUES( _ID_Categoria, _Descripcion, _Sueldo, _SueldoAM, _IntegradoAM, _Vales, _ValesAM );
		
	END IF;
		
	RETURN QUERY SELECT _err, _result, _id_categoria;

END
$BODY$
  LANGUAGE plpgsql;
  
  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_nom_categorias_cambiar(
    _id_categoria smallint,
    _descripcion character varying,
    _sueldo numeric,
    _sueldoam numeric,
    _integradoam numeric,
    _vales numeric,
    _valesam numeric)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255);
BEGIN
	_err := 0;
	_result := 'La categor√≠a se cambi√≥ satisfactoriamente, y todos los empleados con este sueldo se actualizaron';
	
	-- si existe marcar? error
	IF(select count(*) from TBL_NOM_CATEGORIAS where ID_Categoria = _ID_Categoria) < 1
	THEN
		_err := 3;
		_result := 'ERROR: No existe una categor√≠a con la clave ';
	END IF;
	
	IF _err = 0
	THEN
		UPDATE TBL_NOM_CATEGORIAS
		SET Descripcion = _Descripcion, Sueldo = _Sueldo, SueldoAM = _SueldoAM, IntegradoAM = _IntegradoAM, Vales = _Vales, ValesAM = _ValesAM
		WHERE ID_Categoria = _ID_Categoria;
		
		-- ahora calcula y cambia los salarios del catalogo de empleados
		UPDATE TBL_NOM_MASEMP
		SET Salario_Diario = ( CASE WHEN Salario_Diario = 0 then _Sueldo else round( ((Salario_Diario * _SueldoAM) + Salario_Diario), 2) end ),
			Importe_Vales_de_Despensa = ( CASE WHEN Importe_Vales_de_Despensa = 0 then _Vales else round(  ((Importe_Vales_de_Despensa * _ValesAM) + Importe_Vales_de_Despensa), 2) end ),
			Salario_Integrado = round( ((Salario_Integrado * _IntegradoAM) + Salario_Integrado),2),
			Salario_Mixto = ( CASE WHEN Salario_Mixto = 0 then _Sueldo else round( ((Salario_Mixto * _SueldoAM) + Salario_Mixto), 2) end )
		WHERE ID_Categoria = _ID_Categoria and Status = 0;

		UPDATE TBL_NOM_MASEMP
		SET Salario_Nominal = round(Salario_Diario * Jornada,4), 
				Salario_por_Hora = round(Salario_Diario / 8,4)
		WHERE ID_Categoria = _ID_Categoria and Status = 0;

	END IF;
		
	RETURN QUERY SELECT _err, _result, _id_categoria;

END
$BODY$
  LANGUAGE plpgsql;
  


--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_nom_turnos AS 
 SELECT tbl_nom_turnos.id_turno, tbl_nom_turnos.descripcion, 
        CASE
            WHEN tbl_nom_turnos.elunes IS NULL THEN 0
            ELSE 1
        END AS lunes, tbl_nom_turnos.elunes, tbl_nom_turnos.slunes, 
        CASE
            WHEN tbl_nom_turnos.emartes IS NULL THEN 0
            ELSE 1
        END AS martes, tbl_nom_turnos.emartes, tbl_nom_turnos.smartes, 
        CASE
            WHEN tbl_nom_turnos.emiercoles IS NULL THEN 0
            ELSE 1
        END AS miercoles, tbl_nom_turnos.emiercoles, tbl_nom_turnos.smiercoles, 
        CASE
            WHEN tbl_nom_turnos.ejueves IS NULL THEN 0
            ELSE 1
        END AS jueves, tbl_nom_turnos.ejueves, tbl_nom_turnos.sjueves, 
        CASE
            WHEN tbl_nom_turnos.eviernes IS NULL THEN 0
            ELSE 1
        END AS viernes, tbl_nom_turnos.eviernes, tbl_nom_turnos.sviernes, 
        CASE
            WHEN tbl_nom_turnos.esabado IS NULL THEN 0
            ELSE 1
        END AS sabado, tbl_nom_turnos.esabado, tbl_nom_turnos.ssabado, 
        CASE
            WHEN tbl_nom_turnos.edomingo IS NULL THEN 0
            ELSE 1
        END AS domingo, tbl_nom_turnos.edomingo, tbl_nom_turnos.sdomingo, tbl_nom_turnos.hnalunes, tbl_nom_turnos.healunes, tbl_nom_turnos.hnamartes, tbl_nom_turnos.heamartes, tbl_nom_turnos.hnamiercoles, tbl_nom_turnos.heamiercoles, tbl_nom_turnos.hnajueves, tbl_nom_turnos.heajueves, tbl_nom_turnos.hnaviernes, tbl_nom_turnos.heaviernes, tbl_nom_turnos.hnasabado, tbl_nom_turnos.heasabado, tbl_nom_turnos.hnadomingo, tbl_nom_turnos.headomingo, tbl_nom_turnos.ttlun, tbl_nom_turnos.ttmar, tbl_nom_turnos.ttmie, tbl_nom_turnos.ttjue, tbl_nom_turnos.ttvie, tbl_nom_turnos.ttsab, tbl_nom_turnos.ttdom
   FROM tbl_nom_turnos;
   
  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_nom_turnos_agregar(_id_turno smallint, _descripcion character varying, _elunes timestamp without time zone, _slunes timestamp without time zone, _emartes timestamp without time zone, _smartes timestamp without time zone, _emiercoles timestamp without time zone, _smiercoles timestamp without time zone, _ejueves timestamp without time zone, _sjueves timestamp without time zone, _eviernes timestamp without time zone, _sviernes timestamp without time zone, _esabado timestamp without time zone, _ssabado timestamp without time zone, _edomingo timestamp without time zone, _sdomingo timestamp without time zone, _hnalunes numeric, _healunes numeric, _hnamartes numeric, _heamartes numeric, _hnamiercoles numeric, _heamiercoles numeric, _hnajueves numeric, _heajueves numeric, _hnaviernes numeric, _heaviernes numeric, _hnasabado numeric, _heasabado numeric, _hnadomingo numeric, _headomingo numeric, _ttlun smallint, _ttmar smallint, _ttmie smallint, _ttjue smallint, _ttvie smallint, _ttsab 
smallint, _ttdom smallint)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255);
BEGIN
	_err := 0;
	_result := 'El turno  se registr√≥ satisfactoriamente';
	
	-- si ya existe el turno marcar? error
	IF(select count(*) from TBL_NOM_TURNOS where ID_Turno = _ID_Turno ) > 0
	THEN
		_err := 3;
		_result := 'ERROR: Ya existe la clave de este turno';
	END IF;
	
	IF _err = 0
	THEN
		INSERT INTO TBL_NOM_TURNOS
		VALUES( _ID_Turno, _Descripcion, _ELunes, _SLunes, _EMartes, _SMartes, _EMiercoles, _SMiercoles,
						_EJueves, _SJueves, _EViernes, _SViernes, _ESabado, _SSabado, _EDomingo, _SDomingo,
						_HNALunes, _HEALunes, _HNAMartes, _HEAMartes, _HNAMiercoles, _HEAMiercoles, _HNAJueves, 
						_HEAJueves, _HNAViernes, _HEAViernes, _HNASabado, _HEASabado, _HNADomingo, _HEADomingo,
						_TTLun, _TTMar, _TTMie, _TTJue, _TTVie, _TTSab, _TTDom );
	END IF;
		
	RETURN QUERY SELECT _err, _result, _id_turno;

END
$BODY$
  LANGUAGE plpgsql;

  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_nom_turnos_cambiar(_id_turno smallint, _descripcion character varying, _elunes timestamp without time zone, _slunes timestamp without time zone, _emartes timestamp without time zone, _smartes timestamp without time zone, _emiercoles timestamp without time zone, _smiercoles timestamp without time zone, _ejueves timestamp without time zone, _sjueves timestamp without time zone, _eviernes timestamp without time zone, _sviernes timestamp without time zone, _esabado timestamp without time zone, _ssabado timestamp without time zone, _edomingo timestamp without time zone, _sdomingo timestamp without time zone, _hnalunes numeric, _healunes numeric, _hnamartes numeric, _heamartes numeric, _hnamiercoles numeric, _heamiercoles numeric, _hnajueves numeric, _heajueves numeric, _hnaviernes numeric, _heaviernes numeric, _hnasabado numeric, _heasabado numeric, _hnadomingo numeric, _headomingo numeric, _ttlun smallint, _ttmar smallint, _ttmie smallint, _ttjue smallint, _ttvie smallint, _ttsab 
smallint, _ttdom smallint)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255);
BEGIN
	_err := 0;
	_result := 'El turno  se cambi√≥ con √©xito';
	
	-- si ya existe el turno marcar? error
	IF(select count(*) from TBL_NOM_TURNOS where ID_Turno = _ID_Turno ) < 1
	THEN
		_err := 3;
		_result := 'ERROR: No existe el turno especificado no se puede cambiar';
	END IF;
	
	IF _err = 0
	THEN
		UPDATE TBL_NOM_TURNOS
		SET Descripcion = _Descripcion, ELunes = _ELunes, SLunes = _SLunes, EMartes = _EMartes, 
				SMartes = _SMartes, EMiercoles = _EMiercoles, SMiercoles = _SMiercoles, EJueves = _EJueves, 
				SJueves = _SJueves, EViernes = _EViernes, SViernes = _SViernes, ESabado = _ESabado, 
				SSabado = _SSabado, EDomingo = _EDomingo, SDomingo = _SDomingo, HNALunes = _HNALunes, HEALunes = _HEALunes,
				HNAMartes = _HNAMartes, HEAMartes = _HEAMartes, HNAMiercoles = _HNAMiercoles, HEAMiercoles = _HEAMiercoles,
				HNAJueves = _HNAJueves, HEAJueves = _HEAJueves, HNAViernes = _HNAViernes, HEAViernes = _HEAViernes,
				HNASabado = _HNASabado, HEASabado = _HEASabado, HNADomingo = _HNADomingo, HEADomingo = _HEADomingo,
				TTLun = _TTLun, TTMar = _TTMar, TTMie = _TTMie, TTJue = _TTJue, TTVie = _TTVie, TTSab = _TTSab, TTDom = _TTDom
		WHERE ID_Turno = _ID_Turno;
	END IF;
		
	RETURN QUERY SELECT _err, _result, _id_turno;

END
$BODY$
  LANGUAGE plpgsql;
  
  


--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_nom_masemp AS 
 SELECT c.id_empleado, com.descripcion AS compania_sucursal, c.id_departamento, dep.nombre AS nombre_departamento, c.id_turno, c.id_turno_comedor, c.id_categoria, c.nombre, c.apellido_paterno, c.apellido_materno, c.fecha_de_nacimiento, c.fecha_de_ingreso, 
        CASE
            WHEN c.fecha_cambio_empresa IS NULL THEN 0
            ELSE 1
        END AS clave_cambio_empresa, c.fecha_cambio_empresa, c.zona_economica, c.rfc_letras, c.rfc_fecha, c.rfc_homoclave, c.rfc_digito, c.curp, c.calculosimplificado, 
        CASE
            WHEN c.tipo_de_nomina = 1 THEN 0
            ELSE 1
        END AS tipo_de_nomina, c.jornada, c.sindicalizado, c.horas_por_jornada, 
        CASE
            WHEN c.status = 2 THEN 1
            ELSE 0
        END AS status, c.motivo_baja, c.reparto_de_utilidades, c.premio_de_puntualidad, c.castigo_impuntualidad, c.puesto, c.salario_nominal, c.salario_diario, c.salario_por_hora, c.salario_integrado, c.aplica_horas_extras, c.fecha_vacaciones, c.dias_vacaciones, c.prima_de_vacaciones, c.num_registro_imss, c.jefe_inmediato, c.calle, c.numero, c.colonia, c.codigo_postal, c.delegacion, c.estado_civil, c.nombre_esposo, c.num_de_hijos, c.nombre_de_hijos, c.nombre_padre, c.vive, c.nombre_madre, c.viva, c.escolaridad, c.trabajo_anterior_grupo, c.ultimo_trabajo, c.recomendado_por, c.en_accidente_avisar, c.fecha_para_liquidaciones, 
        CASE
            WHEN c.fecha_cambio_obrero_empleado IS NULL THEN 0
            ELSE 1
        END AS obremp, c.fecha_cambio_obrero_empleado, c.cuenta_bancaria, c.historial_puestos, c.registro_infonavit, c.prestamo_infonavit, c.porcentaje_descuento, c.prestamo_vsm, c.descuento_vsm, 
        CASE
            WHEN c.fecha_alta_infonavit IS NULL THEN 0
            ELSE 1
        END AS clave_alta_infonavit, c.fecha_alta_infonavit, 
        CASE
            WHEN c.fecha_liquidacion_infonavit IS NULL THEN 0
            ELSE 1
        END AS clave_liquidacion_infonavit, c.fecha_liquidacion_infonavit, c.registro_fonacot, c.numero_de_credito, c.prestamo_fonacot, c.ayuda_vales_de_despensa, c.importe_vales_de_despensa, c.id_xaction, c.compensacionanual, c.salario_mixto, c.calculomixto, c.compensacionanualfija, c.regimen, c.id_satbanco, c.noint, c.localidad, c.estado, c.pais, c.pcs
   FROM tbl_nom_masemp c
   JOIN tbl_companias com ON c.id_compania = com.id_compania AND c.id_sucursal = com.id_sucursal
   JOIN tbl_nom_departamentos dep ON c.id_departamento = dep.id_departamento;
   
   
  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_nom_masemp_agregar(_id_empleado character, _compania_sucursal character varying, _id_departamento character, _id_turno smallint, _id_turno_comedor smallint, _id_categoria smallint, _nombre character varying, _apellido_paterno character varying, _apellido_materno character varying, _fecha_de_nacimiento timestamp without time zone, _fecha_de_ingreso timestamp without time zone, _fecha_cambio_empresa timestamp without time zone, _zona_economica smallint, _rfc_letras character varying, _rfc_fecha character, _rfc_homoclave character varying, _rfc_digito character, _curp character varying, _calculosimplificado bit, _tipo_de_nomina smallint, _jornada smallint, _sindicalizado bit, _horas_por_jornada numeric, _status smallint, _motivo_baja character varying, _reparto_de_utilidades bit, _premio_de_puntualidad bit, _castigo_impuntualidad bit, _puesto character varying, _salario_nominal numeric, _salario_diario numeric, _salario_por_hora numeric, _salario_integrado numeric, 
_aplica_horas_extras bit, _fecha_vacaciones timestamp without time zone, _dias_vacaciones smallint, _prima_de_vacaciones numeric, _num_registro_imss character varying, _jefe_inmediato character varying, _calle character varying, _numero character varying, _colonia character varying, _codigo_postal character varying, _delegacion character varying, _estado_civil character varying, _nombre_esposo character varying, _num_de_hijos smallint, _nombre_de_hijos character varying, _nombre_padre character varying, _vivo bit, _nombre_madre character varying, _viva bit, _escolaridad character varying, _trabajo_anterior_grupo character, _ultimo_trabajo character varying, _recomendado_por character varying, _en_accidente_avisar character varying, _fecha_para_liquidaciones timestamp without time zone, _fecha_cambio_obrero_empleado timestamp without time zone, _cuenta_bancaria character varying, _historial_puestos character varying, _registro_infonavit character varying, _prestamo_infonavit numeric, _porcentaje_descuento 
numeric, 
_prestamo_vsm numeric, _descuento_vsm numeric, _fecha_alta_infonavit timestamp without time zone, _fecha_liquidacion_infonavit timestamp without time zone, _registro_fonacot character varying, _numero_de_credito character varying, _prestamo_fonacot numeric, _ayuda_vales_de_despensa bit, _importe_vales_de_despensa numeric, _id_xaction character varying, _compensacionanual bit, _salario_mixto numeric, _calculomixto bit, _compensacionanualfija numeric, _regimen smallint, _id_satbanco character, _noint character varying, _localidad character varying, _estado character varying, _pais character varying, _smtp smallint, _email character varying, _pcs numeric)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255); _ID_Compania smallint; _ID_Sucursal smallint;
BEGIN
	_err := 0;
	_result := 'El empleado se registr√≥ satisfactoriamente';
	
	_ID_Compania := (select ID_Compania from TBL_COMPANIAS where Descripcion = _Compania_Sucursal);
	_ID_Sucursal := (select ID_Sucursal from TBL_COMPANIAS where Descripcion = _Compania_Sucursal);

	-- si existe un empleado marcar error
	IF(select count(*) from TBL_NOM_MASEMP where ID_Empleado = _ID_Empleado) > 0
	THEN
		_err := 3;
		_result := 'ERROR: Ya existe un empleado con esta clave ';
	END IF;
	-- Si no existe la compaia o sucursal marcar error
	IF _ID_Compania is null or _ID_Sucursal is null
	THEN
		_err := 3;
		_result := 'ERROR: No existe la compania o sucursal: '  || _Compania_Sucursal;
	END IF;

	IF _err = 0
	THEN
		INSERT INTO TBL_NOM_MASEMP
		VALUES( _ID_Empleado,_ID_Compania,_ID_Sucursal,_ID_Departamento,_ID_Turno,_ID_Turno_Comedor,_ID_Categoria,_Nombre,_Apellido_Paterno, 
						_Apellido_Materno,_Fecha_de_Nacimiento,_Fecha_de_Ingreso,_Fecha_Cambio_Empresa,_Zona_Economica,_RFC_Letras,_RFC_Fecha,
						_RFC_Homoclave,_RFC_Digito,_CURP,_CalculoSimplificado,_Tipo_de_Nomina,_Jornada,_Sindicalizado,_Horas_por_Jornada,_Status,
						_Motivo_Baja,_Reparto_de_Utilidades,_Premio_de_Puntualidad,_Castigo_Impuntualidad,_Puesto,_Salario_Nominal,
						_Salario_Diario,_Salario_por_Hora,_Salario_Integrado,_Aplica_Horas_Extras,_Fecha_Vacaciones,_Dias_Vacaciones,
						_Prima_de_Vacaciones,_Num_Registro_IMSS,_Jefe_Inmediato,_Calle,_Numero,_Colonia,_Codigo_Postal,_Delegacion,_Estado_Civil,
						_Nombre_Esposo,_Num_de_Hijos,_Nombre_de_Hijos,_Nombre_Padre,_Vivo,
						_Nombre_Madre,_Viva,_Escolaridad,_Trabajo_Anterior_Grupo,_Ultimo_Trabajo,_Recomendado_Por,_En_Accidente_Avisar,
						_Fecha_para_Liquidaciones,_Fecha_Cambio_Obrero_Empleado,_Cuenta_Bancaria,_Historial_Puestos,
						_Registro_Infonavit, _Prestamo_Infonavit, _Porcentaje_Descuento, _Prestamo_VSM, _Descuento_VSM, _Fecha_Alta_Infonavit,
						_Fecha_Liquidacion_Infonavit, _Registro_Fonacot, _Numero_de_Credito, _Prestamo_Fonacot, _Ayuda_Vales_de_Despensa, _Importe_Vales_de_Despensa, 
						_ID_XAction, _CompensacionAnual, _Salario_Mixto, _CalculoMixto, _CompensacionAnualFija,
						_regimen, _id_satbanco, _noint, _localidad, _estado, _pais, _smtp, _email, _pcs );
		
	END IF;
		
	RETURN QUERY SELECT _err, _result, _id_empleado;

END
$BODY$
  LANGUAGE plpgsql;
  
  
  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_nom_masemp_cambiar(_id_empleado character, _compania_sucursal character varying, _id_departamento character, _id_turno smallint, _id_turno_comedor smallint, _id_categoria smallint, _nombre character varying, _apellido_paterno character varying, _apellido_materno character varying, _fecha_de_nacimiento timestamp without time zone, _fecha_de_ingreso timestamp without time zone, _fecha_cambio_empresa timestamp without time zone, _zona_economica smallint, _rfc_letras character varying, _rfc_fecha character, _rfc_homoclave character varying, _rfc_digito character, _curp character varying, _calculosimplificado bit, _tipo_de_nomina smallint, _jornada smallint, _sindicalizado bit, _horas_por_jornada numeric, _status smallint, _motivo_baja character varying, _reparto_de_utilidades bit, _premio_de_puntualidad bit, _castigo_impuntualidad bit, _puesto character varying, _salario_nominal numeric, _salario_diario numeric, _salario_por_hora numeric, _salario_integrado numeric, 
_aplica_horas_extras bit, _fecha_vacaciones timestamp without time zone, _dias_vacaciones smallint, _prima_de_vacaciones numeric, _num_registro_imss character varying, _jefe_inmediato character varying, _calle character varying, _numero character varying, _colonia character varying, _codigo_postal character varying, _delegacion character varying, _estado_civil character varying, _nombre_esposo character varying, _num_de_hijos smallint, _nombre_de_hijos character varying, _nombre_padre character varying, _vivo bit, _nombre_madre character varying, _viva bit, _escolaridad character varying, _trabajo_anterior_grupo character, _ultimo_trabajo character varying, _recomendado_por character varying, _en_accidente_avisar character varying, _fecha_para_liquidaciones timestamp without time zone, _fecha_cambio_obrero_empleado timestamp without time zone, _cuenta_bancaria character varying, _historial_puestos character varying, _registro_infonavit character varying, _prestamo_infonavit numeric, _porcentaje_descuento 
numeric, 
_prestamo_vsm numeric, _descuento_vsm numeric, _fecha_alta_infonavit timestamp without time zone, _fecha_liquidacion_infonavit timestamp without time zone, _registro_fonacot character varying, _numero_de_credito character varying, _prestamo_fonacot numeric, _ayuda_vales_de_despensa bit, _importe_vales_de_despensa numeric, _id_xaction character varying, _compensacionanual bit, _salario_mixto numeric, _calculomixto bit, _compensacionanualfija numeric, _regimen smallint, _id_satbanco character, _noint character varying, _localidad character varying, _estado character varying, _pais character varying, _smtp smallint, _email character varying, _pcs numeric)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255); _ID_Compania smallint; _ID_Sucursal smallint;
BEGIN
	_err := 0;
	_result := 'El empleado se cambi√≥ con √©xito';
	
	_ID_Compania := (select ID_Compania from TBL_COMPANIAS where Descripcion = _Compania_Sucursal);
	_ID_Sucursal := (select ID_Sucursal from TBL_COMPANIAS where Descripcion = _Compania_Sucursal);

	-- si existe un empleado marcar error
	IF(select count(*) from TBL_NOM_MASEMP where ID_Empleado = _ID_Empleado) < 1
	THEN
		_err := 3;
		_result := 'ERROR: No existe un empleado con esta clave, no se puede cambiar';
	END IF;
	-- Si no existe la compaia o sucursal marcar error
	IF _ID_Compania is null or _ID_Sucursal is null
	THEN
		_err := 3;
		_result := 'ERROR: No existe la n√≥mina: '  || _Compania_Sucursal;
	END IF;

	IF _err = 0
	THEN
		UPDATE TBL_NOM_MASEMP
		SET ID_Compania = _ID_Compania, ID_Sucursal = _ID_Sucursal, ID_Departamento = _ID_Departamento, 
				ID_Turno = _ID_Turno, ID_Turno_Comedor = _ID_Turno_Comedor, ID_Categoria = _ID_Categoria, Nombre = _Nombre, 
				Apellido_Paterno = _Apellido_Paterno, Apellido_Materno = _Apellido_Materno, 
				Fecha_de_Nacimiento = _Fecha_de_Nacimiento, Fecha_de_Ingreso = _Fecha_de_Ingreso, Fecha_Cambio_Empresa = _Fecha_Cambio_Empresa,
				Zona_Economica = _Zona_Economica, RFC_Letras = _RFC_Letras, RFC_Fecha = _RFC_Fecha,
				RFC_Homoclave	= _RFC_Homoclave, RFC_Digito = _RFC_Digito, CURP = _CURP, 
				CalculoSimplificado = _CalculoSimplificado, Tipo_de_Nomina = _Tipo_de_Nomina, Jornada = _Jornada, Sindicalizado = _Sindicalizado,
				Horas_por_Jornada = _Horas_por_Jornada, Status = _Status, Motivo_Baja = _Motivo_Baja,
				Reparto_de_Utilidades = _Reparto_de_Utilidades, Premio_de_Puntualidad = _Premio_de_Puntualidad,
				Castigo_Impuntualidad = _Castigo_Impuntualidad, Puesto = _Puesto, Salario_Nominal = _Salario_Nominal,
				Salario_Diario = _Salario_Diario, Salario_por_Hora = _Salario_por_Hora, 
				Salario_Integrado = _Salario_Integrado, Aplica_Horas_Extras = _Aplica_Horas_Extras,
				Fecha_Vacaciones = _Fecha_Vacaciones, Dias_Vacaciones = _Dias_Vacaciones, 
				Prima_de_Vacaciones = _Prima_de_Vacaciones, Num_Registro_IMSS = _Num_Registro_IMSS,
				Jefe_Inmediato = _Jefe_Inmediato, Calle = _Calle, Numero = _Numero, Colonia = _Colonia, Codigo_Postal = _Codigo_Postal,
				Delegacion = _Delegacion, Estado_Civil = _Estado_Civil, Nombre_Esposo = _Nombre_Esposo,
				Num_de_Hijos = _Num_de_Hijos, Nombre_de_Hijos = _Nombre_de_Hijos, 
				Nombre_Padre = _Nombre_Padre, Vive = _Vivo, Nombre_Madre = _Nombre_Madre, Viva = _Viva,
				Escolaridad = _Escolaridad, Trabajo_Anterior_Grupo = _Trabajo_Anterior_Grupo, 
				Ultimo_Trabajo = _Ultimo_Trabajo, Recomendado_Por = _Recomendado_Por, 
				En_Accidente_Avisar = _En_Accidente_Avisar, Fecha_para_Liquidaciones = _Fecha_para_Liquidaciones,
				Fecha_Cambio_Obrero_Empleado = _Fecha_Cambio_Obrero_Empleado, Cuenta_Bancaria = _Cuenta_Bancaria,
				Historial_Puestos = _Historial_Puestos, Registro_Infonavit = _Registro_Infonavit, Prestamo_Infonavit = _Prestamo_Infonavit,
				Porcentaje_Descuento = _Porcentaje_Descuento, Prestamo_VSM = _Prestamo_VSM, Descuento_VSM = _Descuento_VSM, Fecha_Alta_Infonavit = _Fecha_Alta_Infonavit,
				Fecha_Liquidacion_Infonavit = _Fecha_Liquidacion_Infonavit, Registro_Fonacot = _Registro_Fonacot, Numero_de_Credito = _Numero_de_Credito,
				Prestamo_Fonacot = _Prestamo_Fonacot, Ayuda_Vales_de_Despensa = _Ayuda_Vales_de_Despensa, Importe_Vales_de_Despensa = _Importe_Vales_de_Despensa, 
				ID_XAction = _ID_XAction, CompensacionAnual = _CompensacionAnual, Salario_Mixto = _Salario_Mixto, CalculoMixto = _CalculoMixto, CompensacionAnualFija = _CompensacionAnualFija,
				regimen = _regimen, id_satbanco = _id_satbanco, noint = _noint, localidad = _localidad, estado = _estado, pais = _pais, smtp = _smtp, email = _email, pcs = _pcs 
		WHERE ID_Empleado = _ID_Empleado;
		
	END IF;
		
	RETURN QUERY SELECT _err, _result, _id_empleado;

END
$BODY$
  LANGUAGE plpgsql;

  
  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_nom_isr_agregar(_id_isr smallint, _limite_inferior numeric, _limite_superior numeric, _cuota_fija numeric, _porcentaje_exd numeric, _subsidio numeric, _subsidio_sim numeric, _limite_inferior_anual numeric, _limite_superior_anual numeric, _cuota_fija_anual numeric, _porcentaje_exd_anual numeric, _subsidio_anual numeric, _subsidio_sim_anual numeric)
  RETURNS SETOF record AS
$BODY$
DECLARE  
	_err int; _result varchar(255);
BEGIN
	_err := 0;
	_result := 'El movimiento de isr se registr√≥ satisfactoriamente';
	
	-- si existe marcar? error
	IF(select count(*) from TBL_NOM_ISR where ID_Isr = _ID_Isr) > 0
	THEN
		_err := 3;
		_result := 'ERROR: Ya existe un movimiento con esta clave ';
	END IF;
	
	IF _err = 0
	THEN

		INSERT INTO TBL_NOM_ISR
		VALUES( _ID_Isr, _Limite_Inferior, _Limite_Superior, 
									_Cuota_Fija, _Porcentaje_Exd, _Subsidio, _Subsidio_SIM );

		INSERT INTO TBL_NOM_ISR_ANUALIZADO
		VALUES( _ID_Isr, _Limite_Inferior_Anual, _Limite_Superior_Anual, 
			_Cuota_Fija_Anual, _Porcentaje_Exd_Anual, _Subsidio_Anual, _Subsidio_SIM_Anual );

	END IF;
		
	RETURN QUERY SELECT _err, _result, _id_isr;

END
$BODY$
  LANGUAGE plpgsql;
  
  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_nom_isr_cambiar(_id_isr smallint, _limite_inferior numeric, _limite_superior numeric, _cuota_fija numeric, _porcentaje_exd numeric, _subsidio numeric, _subsidio_sim numeric, _limite_inferior_anual numeric, _limite_superior_anual numeric, _cuota_fija_anual numeric, _porcentaje_exd_anual numeric, _subsidio_anual numeric, _subsidio_sim_anual numeric)
  RETURNS SETOF record AS
$BODY$
DECLARE  
	_err int; _result varchar(255);
BEGIN
	_err := 0;
	_result := 'El movimiento de isr se cambi√≥ con √©xito';
	
	-- si existe marcar? error
	IF(select count(*) from TBL_NOM_ISR where ID_Isr = _ID_Isr) < 1
	THEN
		_err := 3;
		_result := 'ERROR: No existe un movimiento con esta clave, no se puede cambiar ';
	END IF;
	
	IF _err = 0
	THEN

		UPDATE TBL_NOM_ISR
		SET Limite_Inferior = _Limite_Inferior, Limite_Superior = _Limite_Superior, 
					Cuota_Fija = _Cuota_Fija, Porcentaje_Exd = _Porcentaje_Exd, 
								Subsidio = _Subsidio, Subsidio_SIM = _Subsidio_SIM 
		WHERE ID_Isr = _ID_Isr;
	
		UPDATE TBL_NOM_ISR_ANUALIZADO
		SET Limite_Inferior = _Limite_Inferior_Anual, Limite_Superior = _Limite_Superior_Anual, 
				Cuota_Fija = _Cuota_Fija_Anual, Porcentaje_Exd = _Porcentaje_Exd_Anual,
						Subsidio = _Subsidio_Anual, Subsidio_SIM = _Subsidio_SIM_Anual
 		WHERE ID_Isr = _ID_Isr;
	END IF;
		
	RETURN QUERY SELECT _err, _result, _id_isr;

END
$BODY$
  LANGUAGE plpgsql;
  
--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_nom_isr_eliminar(_id_isr smallint)
  RETURNS SETOF record AS
$BODY$
DECLARE  
	_err int; _result varchar(255);
BEGIN
	_err := 0;
	_result := 'El movimiento de isr se elimin√≥ de la base de datos';
	
	-- si existe marcar? error
	IF(select count(*) from TBL_NOM_ISR where ID_Isr = _ID_Isr) < 1
	THEN
		_err := 3;
		_result := 'ERROR: No existe un movimiento con esta clave, no se puede eliminar';
	END IF;
	
	IF _err = 0
	THEN
		DELETE FROM TBL_NOM_ISR
		WHERE ID_Isr = _ID_Isr;
	
		DELETE FROM TBL_NOM_ISR_ANUALIZADO
		WHERE ID_Isr = _ID_Isr;
	END IF;
		
	RETURN QUERY SELECT _err, _result, _id_isr;

END
$BODY$
  LANGUAGE plpgsql;
--FIN sp_nom_isr_eliminar
  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_nom_imss_agregar(_id_imss smallint, _concepto character varying, _cuota_patron numeric, _cuota_trabajador numeric, _total numeric)
  RETURNS SETOF record AS
$BODY$
DECLARE  
	_err int; _result varchar(255);
BEGIN
	_err := 0;
	_result := 'El movimiento de IMSS se registr√≥ satisfactoriamente';
	
	-- si existe marcar? error
	IF(select count(*) from TBL_NOM_IMSS where ID_Imss = _ID_Imss) > 0
	THEN
		_err := 3;
		_result := 'ERROR: Ya existe un movimiento con esta clave ';
	END IF;
	
	IF _err = 0
	THEN
		INSERT INTO TBL_NOM_IMSS
		VALUES( _ID_Imss, _Concepto, _Cuota_Patron, _Cuota_Trabajador, _Total );
	END IF;
		
	RETURN QUERY SELECT _err, _result, _id_imss;

END
$BODY$
  LANGUAGE plpgsql;
  
  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_nom_imss_cambiar(_id_imss smallint, _concepto character varying, _cuota_patron numeric, _cuota_trabajador numeric, _total numeric)
  RETURNS SETOF record AS
$BODY$
DECLARE  
	_err int; _result varchar(255);
BEGIN
	_err := 0;
	_result := 'El movimiento de IMSS se cambi√≥ con √©xito';
	
	-- si existe marcar? error
	IF(select count(*) from TBL_NOM_IMSS where ID_Imss = _ID_Imss) < 1
	THEN
		_err := 3;
		_result := 'ERROR: No existe un movimiento con esta clave, no se puede cambiar ';
	END IF;
	
	IF _err = 0
	THEN
		UPDATE TBL_NOM_IMSS
		SET Concepto = _Concepto, Cuota_Patron = _Cuota_Patron, 
								Cuota_Trabajador = _Cuota_Trabajador, Total = _Total
		WHERE ID_Imss = _ID_Imss;
	END IF;
		
	RETURN QUERY SELECT _err, _result, _id_imss;

END
$BODY$
  LANGUAGE plpgsql;
  
--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_nom_imss_eliminar(_id_imss smallint)
  RETURNS SETOF record AS
$BODY$
DECLARE  
	_err int; _result varchar(255);
BEGIN
	_err := 0;
	_result := 'El movimiento de IMSS se elimin√≥ de la base de datos';
	
	-- si existe marcar? error
	IF(select count(*) from TBL_NOM_IMSS where ID_Imss = _ID_Imss) < 1
	THEN
		_err := 3;
		_result := 'ERROR: No existe un movimiento con esta clave, no se puede eliminar';
	END IF;
	
	IF _err = 0
	THEN
		DELETE FROM TBL_NOM_IMSS
		WHERE ID_Imss = _ID_Imss;
	END IF;
		
	RETURN QUERY SELECT _err, _result, _id_imss;

END
$BODY$
  LANGUAGE plpgsql;
--FIN sp_nom_imss_eliminar
  
--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_nom_credito_salario_agregar(_id_cs smallint, _ingresos_desde numeric, _ingresos_hasta numeric, _csm numeric)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255);
BEGIN
	_err := 0;
	_result := 'El movimiento de cr√©dito al salario se registr√≥ satisfactoriamente';
	
	IF(select count(*) from TBL_NOM_CREDITO_SALARIO where ID_CS = _ID_CS) > 0
	THEN
		_err := 3;
		_result := 'ERROR: Ya existe un movimiento con esta clave';
	END IF;
	
	IF _err = 0
	THEN
		INSERT INTO TBL_NOM_CREDITO_SALARIO
		VALUES( _ID_CS, _Ingresos_Desde, _Ingresos_Hasta, _CSM );
		
	END IF;
		
	RETURN QUERY SELECT _err, _result, _id_cs;

END
$BODY$
  LANGUAGE plpgsql;
  
  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_nom_credito_salario_cambiar(_id_cs smallint, _ingresos_desde numeric, _ingresos_hasta numeric, _csm numeric)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255);
BEGIN
	_err := 0;
	_result := 'El movimiento de cr√©dito al salario se rcambi√≥ con √©xito';
	
	IF(select count(*) from TBL_NOM_CREDITO_SALARIO where ID_CS = _ID_CS) < 1
	THEN
		_err := 3;
		_result := 'ERROR: No existe un movimiento con esta clave, no se puede cambiar';
	END IF;
	
	IF _err = 0
	THEN
		UPDATE TBL_NOM_CREDITO_SALARIO
		SET Ingresos_Desde = _Ingresos_Desde, Ingresos_Hasta = _Ingresos_Hasta, CSM = _CSM
		WHERE ID_CS = _ID_CS;		
	END IF;
		
	RETURN QUERY SELECT _err, _result, _id_cs;

END
$BODY$
  LANGUAGE plpgsql;
  
--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_nom_credito_salario_eliminar(_id_cs smallint)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255);
BEGIN
	_err := 0;
	_result := 'El movimiento de cr√©dito al salario se elimin√≥ de la base de datos';
	
	IF(select count(*) from TBL_NOM_CREDITO_SALARIO where ID_CS = _ID_CS) < 1
	THEN
		_err := 3;
		_result := 'ERROR: No existe un movimiento con esta clave, no se puede eliminar';
	END IF;
	
	IF _err = 0
	THEN
		DELETE FROM TBL_NOM_CREDITO_SALARIO
		WHERE ID_CS = _ID_CS;		
	END IF;
		
	RETURN QUERY SELECT _err, _result, _id_cs;

END
$BODY$
  LANGUAGE plpgsql;
--FIN sp_nom_credito_salario_eliminar
  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_nom_aguinaldo_agregar(_id_aguinaldo smallint, _desde numeric, _hasta numeric, _dias smallint)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255);
BEGIN
	_err := 0;
	_result := 'El movimiento de Aguinaldo se registr√≥ satisfactoriamente';
	
	-- si existe marcar? error
	IF(select count(*) from TBL_NOM_AGUINALDO where ID_Aguinaldo = _ID_Aguinaldo) > 0
	THEN
		_err := 3;
		_result := 'ERROR: Ya existe un movimiento con esta clave';
	END IF;
	
	IF _err = 0
	THEN
		INSERT INTO TBL_NOM_AGUINALDO
		VALUES( _ID_Aguinaldo, _Desde, _Hasta, _Dias );
		
	END IF;
		
	RETURN QUERY SELECT _err, _result, _id_aguinaldo;

END
$BODY$
  LANGUAGE plpgsql;
  
  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_nom_aguinaldo_cambiar(_id_aguinaldo smallint, _desde numeric, _hasta numeric, _dias smallint)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255);
BEGIN
	_err := 0;
	_result := 'El movimiento de Aguinaldo se cambi√≥ con √©xito';
	
	-- si existe marcar? error
	IF(select count(*) from TBL_NOM_AGUINALDO where ID_Aguinaldo = _ID_Aguinaldo) < 1
	THEN
		_err := 3;
		_result := 'ERROR: No existe un movimiento con esta clave, no se puede cambiar';
	END IF;
	
	IF _err = 0
	THEN
		UPDATE TBL_NOM_AGUINALDO
		SET Desde = _Desde, Hasta = _Hasta, Dias = _Dias
		WHERE ID_Aguinaldo = _ID_Aguinaldo;
	END IF;
		
	RETURN QUERY SELECT _err, _result, _id_aguinaldo;

END
$BODY$
  LANGUAGE plpgsql;
  
--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_nom_aguinaldo_eliminar(_id_aguinaldo smallint)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255);
BEGIN
	_err := 0;
	_result := 'El movimiento de Aguinaldo se elimin√≥ de la base de datos';
	
	-- si existe marcar? error
	IF(select count(*) from TBL_NOM_AGUINALDO where ID_Aguinaldo = _ID_Aguinaldo) < 1
	THEN
		_err := 3;
		_result := 'ERROR: No existe un movimiento con esta clave, no se puede eliminar';
	END IF;
	
	IF _err = 0
	THEN
		DELETE FROM TBL_NOM_AGUINALDO
		WHERE ID_Aguinaldo = _ID_Aguinaldo;
	END IF;
		
	RETURN QUERY SELECT _err, _result, _id_aguinaldo;

END
$BODY$
  LANGUAGE plpgsql;
--FIN sp_nom_aguinaldo_eliminar

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_nom_vacaciones_agregar(_id_vacaciones smallint, _desde numeric, _hasta numeric, _dias smallint, _pv numeric)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255);
BEGIN
	_err := 0;
	_result := 'El movimiento de vacaciones se cse registr√≥ satisfactoriamente';
	
	-- si existe marcar? error
	IF(select count(*) from TBL_NOM_VACACIONES where ID_Vacaciones = _ID_Vacaciones) > 0
	THEN
		_err := 3;
		_result := 'ERROR: Ya existe un movimiento con esta clave';
	END IF;
	
	IF _err = 0
	THEN
		INSERT INTO TBL_NOM_VACACIONES
		VALUES( _ID_Vacaciones, _Desde, _Hasta, _Dias, _PV );
		
	END IF;
		
	RETURN QUERY SELECT _err, _result, _id_vacaciones;

END
$BODY$
  LANGUAGE plpgsql;
  
  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_nom_vacaciones_cambiar(_id_vacaciones smallint, _desde numeric, _hasta numeric, _dias smallint, _pv numeric)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255);
BEGIN
	_err := 0;
	_result := 'El movimiento de vacaciones se cambi√≥ con √©xito';
	
	-- si existe marcar? error
	IF(select count(*) from TBL_NOM_VACACIONES where ID_Vacaciones = _ID_Vacaciones) < 1
	THEN
		_err := 3;
		_result := 'ERROR: No existe un movimiento con esta clave, no se puede cambiar';
	END IF;
	
	IF _err = 0
	THEN
		UPDATE TBL_NOM_VACACIONES
		SET Desde = _Desde, Hasta = _Hasta, Dias = _Dias, PV = _PV
		WHERE ID_Vacaciones = _ID_Vacaciones;
	END IF;
		
	RETURN QUERY SELECT _err, _result, _id_vacaciones;

END
$BODY$
  LANGUAGE plpgsql;
  
--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_nom_vacaciones_eliminar(_id_vacaciones smallint)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255);
BEGIN
	_err := 0;
	_result := 'El movimiento de vacaciones se elimin√≥ de la base de datos';
	
	-- si existe marcar? error
	IF(select count(*) from TBL_NOM_VACACIONES where ID_Vacaciones = _ID_Vacaciones) < 1
	THEN
		_err := 3;
		_result := 'ERROR: No existe un movimiento con esta clave, no se puede eliminar';
	END IF;
	
	IF _err = 0
	THEN
		DELETE FROM TBL_NOM_VACACIONES
		WHERE ID_Vacaciones = _ID_Vacaciones;
	END IF;
		
	RETURN QUERY SELECT _err, _result, _id_vacaciones;

END
$BODY$
  LANGUAGE plpgsql;
--FIN sp_nom_vacaciones_eliminar

--@FIN_BLOQUE
insert into tbl_nom_movimientos (ID_Movimiento,Descripcion,ID_Sistema,DiasCompletos,AplicaAltipo,PorEmpleado)
values(-32,'PAGO DE TIEMPO ANTICIPADO (3)',0,'0',1,'1');
insert into tbl_nom_movimientos (ID_Movimiento,Descripcion,ID_Sistema,DiasCompletos,AplicaAltipo,PorEmpleado)
values(-31,'PAGO DE TIEMPO ANTICIPADO (2)',0,'0',1,'1');
insert into tbl_nom_movimientos (ID_Movimiento,Descripcion,ID_Sistema,DiasCompletos,AplicaAltipo,PorEmpleado)
values(-30,'PAGO DE TIEMPO ANTICIPADO',0,'0',1,'1');
insert into tbl_nom_movimientos (ID_Movimiento,Descripcion,ID_Sistema,DiasCompletos,AplicaAltipo,PorEmpleado)
values(-26,'FALTA DE GRUPO, DIA POR PAGAR',0,'1',-1,'0');
insert into tbl_nom_movimientos (ID_Movimiento,Descripcion,ID_Sistema,DiasCompletos,AplicaAltipo,PorEmpleado)
values(-25,'ASISTENCIA TOTAL O PARCIAL "TIEMPO POR PAGAR"',0,'0',-1,'1');
insert into tbl_nom_movimientos (ID_Movimiento,Descripcion,ID_Sistema,DiasCompletos,AplicaAltipo,PorEmpleado)
values(-24,'SALIR ANTES SIN PAGO DE TIEMPO',0,'0',1,'1');
insert into tbl_nom_movimientos (ID_Movimiento,Descripcion,ID_Sistema,DiasCompletos,AplicaAltipo,PorEmpleado)
values(-23,'ENTRAR TARDE SIN PAGO DE TIEMPO',0,'0',1,'1');
insert into tbl_nom_movimientos (ID_Movimiento,Descripcion,ID_Sistema,DiasCompletos,AplicaAltipo,PorEmpleado)
values(-22,'SALIR ANTES CON PAGO DE TIEMPO',0,'0',1,'1');
insert into tbl_nom_movimientos (ID_Movimiento,Descripcion,ID_Sistema,DiasCompletos,AplicaAltipo,PorEmpleado)
values(-21,'ENTRAR TARDE CON PAGO DE TIEMPO',0,'0',1,'1');
insert into tbl_nom_movimientos (ID_Movimiento,Descripcion,ID_Sistema,DiasCompletos,AplicaAltipo,PorEmpleado)
values(-20,'DIA FESTIVO',0,'1',0,'0');
insert into tbl_nom_movimientos (ID_Movimiento,Descripcion,ID_Sistema,DiasCompletos,AplicaAltipo,PorEmpleado)
values(-19,'PAGO DE TIEMPO',0,'0',1,'1');
insert into tbl_nom_movimientos (ID_Movimiento,Descripcion,ID_Sistema,DiasCompletos,AplicaAltipo,PorEmpleado)
values(-18,'DIAS SIN PAGO DE TIEMPO',0,'1',1,'1');
insert into tbl_nom_movimientos (ID_Movimiento,Descripcion,ID_Sistema,DiasCompletos,AplicaAltipo,PorEmpleado)
values(-17,'SALIR/ENTRAR SIN PAGO DE TIEMPO',0,'0',1,'1');
insert into tbl_nom_movimientos (ID_Movimiento,Descripcion,ID_Sistema,DiasCompletos,AplicaAltipo,PorEmpleado)
values(-16,'DIAS CON PAGO DE TIEMPO',0,'1',1,'1');
insert into tbl_nom_movimientos (ID_Movimiento,Descripcion,ID_Sistema,DiasCompletos,AplicaAltipo,PorEmpleado)
values(-15,'SALIR/ENTRAR CON PAGO DE TIEMPO',0,'0',1,'1');
insert into tbl_nom_movimientos (ID_Movimiento,Descripcion,ID_Sistema,DiasCompletos,AplicaAltipo,PorEmpleado)
values(-14,'HORAS EXTRAS',0,'0',0,'1');
insert into tbl_nom_movimientos (ID_Movimiento,Descripcion,ID_Sistema,DiasCompletos,AplicaAltipo,PorEmpleado)
values(-13,'INCAPACIDAD POR ACCIDENTE',0,'1',0,'1');
insert into tbl_nom_movimientos (ID_Movimiento,Descripcion,ID_Sistema,DiasCompletos,AplicaAltipo,PorEmpleado)
values(-12,'INCAPACIDAD POR ENFERMEDAD',0,'1',0,'1');
insert into tbl_nom_movimientos (ID_Movimiento,Descripcion,ID_Sistema,DiasCompletos,AplicaAltipo,PorEmpleado)
values(-11,'INCAPACIDAD POR MATERNIDAD',0,'1',0,'1');
insert into tbl_nom_movimientos (ID_Movimiento,Descripcion,ID_Sistema,DiasCompletos,AplicaAltipo,PorEmpleado)
values(-10,'PRIMA VACACIONAL',0,'1',0,'1');
insert into tbl_nom_movimientos (ID_Movimiento,Descripcion,ID_Sistema,DiasCompletos,AplicaAltipo,PorEmpleado)
values(-9,'VACACIONES DISFRUTADAS',0,'1',0,'1');
insert into tbl_nom_movimientos (ID_Movimiento,Descripcion,ID_Sistema,DiasCompletos,AplicaAltipo,PorEmpleado)
values(-8,'VACACIONES PAGADAS',0,'1',0,'1');
insert into tbl_nom_movimientos (ID_Movimiento,Descripcion,ID_Sistema,DiasCompletos,AplicaAltipo,PorEmpleado)
values(-7,'ANTICIPO DE VACACIONES',0,'1',0,'1');
insert into tbl_nom_movimientos (ID_Movimiento,Descripcion,ID_Sistema,DiasCompletos,AplicaAltipo,PorEmpleado)
values(-6,'VACACIONES EXTERNAS',0,'1',0,'1');
insert into tbl_nom_movimientos (ID_Movimiento,Descripcion,ID_Sistema,DiasCompletos,AplicaAltipo,PorEmpleado)
values(-5,'VACACIONES',0,'1',0,'1');
insert into tbl_nom_movimientos (ID_Movimiento,Descripcion,ID_Sistema,DiasCompletos,AplicaAltipo,PorEmpleado)
values(-4,'DIA NO LABORABLE',0,'1',-1,'1');
insert into tbl_nom_movimientos (ID_Movimiento,Descripcion,ID_Sistema,DiasCompletos,AplicaAltipo,PorEmpleado)
values(-3,'FALTA',0,'1',2,'1');
insert into tbl_nom_movimientos (ID_Movimiento,Descripcion,ID_Sistema,DiasCompletos,AplicaAltipo,PorEmpleado)
values(-2,'ASISTENCIA PARCIAL',0,'0',-1,'1');
insert into tbl_nom_movimientos (ID_Movimiento,Descripcion,ID_Sistema,DiasCompletos,AplicaAltipo,PorEmpleado)
values(-1,'ASISTENCIA COMPLETA',0,'1',-1,'1');
insert into tbl_nom_movimientos (ID_Movimiento,Descripcion,ID_Sistema,DiasCompletos,AplicaAltipo,PorEmpleado)
values(130,'FALTA',-3,'0',-2,'0');
insert into tbl_nom_movimientos (ID_Movimiento,Descripcion,ID_Sistema,DiasCompletos,AplicaAltipo,PorEmpleado)
values(150,'VACACIONES',-5,'0',-2,'0');
insert into tbl_nom_movimientos (ID_Movimiento,Descripcion,ID_Sistema,DiasCompletos,AplicaAltipo,PorEmpleado)
values(160,'VACACIONES EXTERNAS',-6,'0',-2,'0');
insert into tbl_nom_movimientos (ID_Movimiento,Descripcion,ID_Sistema,DiasCompletos,AplicaAltipo,PorEmpleado)
values(170,'ANTICIPO DE VACACIONES',-7,'0',-2,'0');
insert into tbl_nom_movimientos (ID_Movimiento,Descripcion,ID_Sistema,DiasCompletos,AplicaAltipo,PorEmpleado)
values(180,'VACACIONES PAGADAS',-8,'0',-2,'0');
insert into tbl_nom_movimientos (ID_Movimiento,Descripcion,ID_Sistema,DiasCompletos,AplicaAltipo,PorEmpleado)
values(190,'VACACIONES DISFRUTADAS',-9,'0',-2,'0');
insert into tbl_nom_movimientos (ID_Movimiento,Descripcion,ID_Sistema,DiasCompletos,AplicaAltipo,PorEmpleado)
values(200,'PRIMA VACACIONAL',-10,'0',-2,'0');
insert into tbl_nom_movimientos (ID_Movimiento,Descripcion,ID_Sistema,DiasCompletos,AplicaAltipo,PorEmpleado)
values(210,'INCAPACIDAD POR MATERNIDAD',-11,'0',-2,'0');
insert into tbl_nom_movimientos (ID_Movimiento,Descripcion,ID_Sistema,DiasCompletos,AplicaAltipo,PorEmpleado)
values(220,'INCAPACIDAD POR ENFERMEDAD',-12,'0',-2,'0');
insert into tbl_nom_movimientos (ID_Movimiento,Descripcion,ID_Sistema,DiasCompletos,AplicaAltipo,PorEmpleado)
values(230,'INCAPACIDAD POR ACCIDENTE',-13,'0',-2,'0');
insert into tbl_nom_movimientos (ID_Movimiento,Descripcion,ID_Sistema,DiasCompletos,AplicaAltipo,PorEmpleado)
values(240,'HORAS EXTRAS',-14,'0',-2,'0');
insert into tbl_nom_movimientos (ID_Movimiento,Descripcion,ID_Sistema,DiasCompletos,AplicaAltipo,PorEmpleado)
values(250,'SALIR/ENTRAR CON PAGO DE TIEMPO',-15,'0',-2,'0');
insert into tbl_nom_movimientos (ID_Movimiento,Descripcion,ID_Sistema,DiasCompletos,AplicaAltipo,PorEmpleado)
values(260,'DIAS CON PAGO DE TIEMPO',-16,'0',-2,'0');
insert into tbl_nom_movimientos (ID_Movimiento,Descripcion,ID_Sistema,DiasCompletos,AplicaAltipo,PorEmpleado)
values(270,'SALIR/ENTRAR SIN PAGO DE TIEMPO',-17,'0',-2,'0');
insert into tbl_nom_movimientos (ID_Movimiento,Descripcion,ID_Sistema,DiasCompletos,AplicaAltipo,PorEmpleado)
values(280,'DIAS SIN PAGO DE TIEMPO',-18,'0',-2,'0');
insert into tbl_nom_movimientos (ID_Movimiento,Descripcion,ID_Sistema,DiasCompletos,AplicaAltipo,PorEmpleado)
values(290,'PAGO DE TIEMPO',-19,'0',-2,'0');
insert into tbl_nom_movimientos (ID_Movimiento,Descripcion,ID_Sistema,DiasCompletos,AplicaAltipo,PorEmpleado)
values(300,'DIA FESTIVO',-20,'0',-2,'0');
insert into tbl_nom_movimientos (ID_Movimiento,Descripcion,ID_Sistema,DiasCompletos,AplicaAltipo,PorEmpleado)
values(310,'ENTRAR TARDE CON PAGO DE TIEMPO',-21,'0',-2,'0');
insert into tbl_nom_movimientos (ID_Movimiento,Descripcion,ID_Sistema,DiasCompletos,AplicaAltipo,PorEmpleado)
values(320,'SALIR ANTES CON PAGO DE TIEMPO',-22,'0',-2,'0');
insert into tbl_nom_movimientos (ID_Movimiento,Descripcion,ID_Sistema,DiasCompletos,AplicaAltipo,PorEmpleado)
values(330,'ENTRAR TARDE SIN PAGO DE TIEMPO',-23,'0',-2,'0');
insert into tbl_nom_movimientos (ID_Movimiento,Descripcion,ID_Sistema,DiasCompletos,AplicaAltipo,PorEmpleado)
values(340,'SALIR ANTES SIN PAGO DE TIEMPO',-24,'0',-2,'0');
insert into tbl_nom_movimientos (ID_Movimiento,Descripcion,ID_Sistema,DiasCompletos,AplicaAltipo,PorEmpleado)
values(400,'PAGO DE TIEMPO ANTICIPADO',-30,'0',-2,'0');
insert into tbl_nom_movimientos (ID_Movimiento,Descripcion,ID_Sistema,DiasCompletos,AplicaAltipo,PorEmpleado)
values(410,'PAGO DE TIEMPO ANTICIPADO (2)',-31,'0',-2,'0');
insert into tbl_nom_movimientos (ID_Movimiento,Descripcion,ID_Sistema,DiasCompletos,AplicaAltipo,PorEmpleado)
values(420,'PAGO DE TIEMPO ANTICIPADO (3)',-32,'0',-2,'0');



--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_catalog_movimientos AS 
 SELECT m.id_movimiento AS clave, ( SELECT mn.msj1
           FROM tbl_msj mn
          WHERE mn.alc::text = 'CEF'::text AND mn.mod::text = 'NOMINA'::text AND mn.sub::text = 'CAT_MOV'::text AND mn.elm::text = m.id_sistema::text) AS descripcion, ( SELECT (((
                CASE
                    WHEN tbl_nom_movimientos.diascompletos = B'0'::"bit" THEN 'H'::text
                    ELSE 'D'::text
                END || '/'::text) || 
                CASE
                    WHEN tbl_nom_movimientos.aplicaaltipo = (-1) THEN 'S'::text
                    WHEN tbl_nom_movimientos.aplicaaltipo = 0 THEN 'I'::text
                    WHEN tbl_nom_movimientos.aplicaaltipo = 1 THEN 'E'::text
                    WHEN tbl_nom_movimientos.aplicaaltipo = 2 THEN 'C'::text
                    ELSE '?'::text
                END) || '/'::text) || 
                CASE
                    WHEN tbl_nom_movimientos.porempleado = B'0'::"bit" THEN 'N'::text
                    ELSE 'E'::text
                END
           FROM tbl_nom_movimientos
          WHERE tbl_nom_movimientos.id_movimiento = m.id_sistema) AS especial
   FROM tbl_nom_movimientos m
  WHERE m.id_movimiento > 0;
  
--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_catalog_movimientos_sis AS 
 SELECT m.id_movimiento AS clave, ( SELECT mn.msj1
           FROM tbl_msj mn
          WHERE mn.alc::text = 'CEF'::text AND mn.mod::text = 'NOMINA'::text AND mn.sub::text = 'CAT_MOV'::text AND mn.elm::text = m.id_movimiento::text) AS descripcion, ( SELECT (((
                CASE
                    WHEN tbl_nom_movimientos.diascompletos = B'0'::"bit" THEN 'H'::text
                    ELSE 'D'::text
                END || '/'::text) || 
                CASE
                    WHEN tbl_nom_movimientos.aplicaaltipo = (-1) THEN 'S'::text
                    WHEN tbl_nom_movimientos.aplicaaltipo = 0 THEN 'I'::text
                    WHEN tbl_nom_movimientos.aplicaaltipo = 1 THEN 'E'::text
                    WHEN tbl_nom_movimientos.aplicaaltipo = 2 THEN 'C'::text
                    ELSE '?'::text
                END) || '/'::text) || 
                CASE
                    WHEN tbl_nom_movimientos.porempleado = B'0'::"bit" THEN 'N'::text
                    ELSE 'E'::text
                END
           FROM tbl_nom_movimientos
          WHERE tbl_nom_movimientos.id_movimiento = m.id_movimiento) AS especial
   FROM tbl_nom_movimientos m
  WHERE m.id_movimiento < 0
  ORDER BY m.id_movimiento DESC;

--ALTER TABLE view_catalog_movimientos_sis

--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_catalog_empleados AS 
 SELECT tbl_nom_masemp.id_empleado AS clave, (((tbl_nom_masemp.nombre::text || ' '::text) || tbl_nom_masemp.apellido_paterno::text) || ' '::text) || tbl_nom_masemp.apellido_materno::text AS descripcion, ''::text AS especial, tbl_nom_masemp.id_sucursal
   FROM tbl_nom_masemp
  WHERE tbl_nom_masemp.status = 0;
  
 

--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_nom_movimientos AS 
 SELECT c.id_movimiento, ( SELECT mn.msj1
           FROM tbl_msj mn
          WHERE mn.alc::text = 'CEF'::text AND mn.mod::text = 'NOMINA'::text AND mn.sub::text = 'CAT_MOV'::text AND mn.elm::text = c.id_sistema::text) AS descripcion, c.id_sistema, ( SELECT mn.msj1
           FROM tbl_msj mn
          WHERE mn.alc::text = 'CEF'::text AND mn.mod::text = 'NOMINA'::text AND mn.sub::text = 'CAT_MOV'::text AND mn.elm::text = c.id_sistema::text) AS nombre, ( SELECT tbl_nom_movimientos.diascompletos
           FROM tbl_nom_movimientos
          WHERE tbl_nom_movimientos.id_movimiento = c.id_sistema) AS dc, ( SELECT tbl_nom_movimientos.aplicaaltipo
           FROM tbl_nom_movimientos
          WHERE tbl_nom_movimientos.id_movimiento = c.id_sistema) AS aplicaaltipo, ( SELECT tbl_nom_movimientos.porempleado
           FROM tbl_nom_movimientos
          WHERE tbl_nom_movimientos.id_movimiento = c.id_sistema) AS porempleado
   FROM tbl_nom_movimientos c
  WHERE c.id_movimiento > 0;

  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_nom_permisos_agregar(
    _id_empleado character,
    _id_movimiento smallint,
    _id_fechamovimiento timestamp without time zone,
    _diascompletos bit,
    _fechahora_desde timestamp without time zone,
    _fechahora_hasta timestamp without time zone,
    _num_de_dias smallint,
    _num_de_horas numeric,
    _tiempo_por_pagar numeric,
    _obs character varying,
    _prmgrp bit,
    _id_sucursal smallint)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255); _ID_Sistema smallint; _ID_Registro varchar(255); 
	_ID_Fecha timestamp; _ID_HoraDesde timestamp; _ID_HoraHasta timestamp;
	_Dif smallint;
BEGIN
	_err := 0;
	
	if _prmgrp = '0' --No es de grupo
	then
		_result := 'El permiso de empleado se agreg√≥ satisfactoriamente';
		_ID_Registro := _ID_Empleado::varchar || '_' || cast(_ID_Movimiento as varchar) || '_' || date_part('day', _ID_FechaMovimiento)::varchar || '/' || date_part('month', _ID_FechaMovimiento)::varchar || '/' || date_part('year', _ID_FechaMovimiento)::varchar; 
	else
		_result := 'El permiso de grupo se agreg√≥ satisfactoriamente';
		_ID_Registro := 'FSINOMINA-' || cast(_ID_Sucursal as varchar) || '_' || cast(_ID_Movimiento as varchar) || '_' || date_part('day', _ID_FechaMovimiento)::varchar || '/' || date_part('month', _ID_FechaMovimiento)::varchar || '/' || date_part('year', _ID_FechaMovimiento)::varchar; 
	end if;
	
	_ID_Sistema := ( select ID_Sistema from TBL_NOM_MOVIMIENTOS where ID_Movimiento = _ID_Movimiento );

	IF _prmgrp = '0' --No es de grupo
	THEN
		-- si ya existe este permiso marcar? error
		IF _DiasCompletos = '1' -- revisa por los de dias completos, es decir revisa solo los que la fecha de movimiento sean igual a la de movimiento y no los que se insertan uno a uno cuando son de horas y no de dias completos, pero se especifico hasta una fecha con dias despues
		THEN
			IF(select count(*) from TBL_NOM_PERMISOS where ID_Empleado = _ID_Empleado 
							and ID_Movimiento = _ID_Movimiento and ID_FechaMovimiento = _ID_FechaMovimiento) > 0
			THEN
				_err := 3;
				_result := 'ERROR: Ya existe la clave del movimiento con la fecha especific a da y para este empleado ';
			END IF;
			-- si ya existe este permiso de sistema marcar? error
			IF(select count(*) from TBL_NOM_PERMISOS where ID_Empleado = _ID_Empleado 
							and ID_Movimiento = _ID_Sistema and ID_FechaMovimiento = _ID_FechaMovimiento) > 0
			THEN
				_err := 3;
				_result := 'ERROR: Ya existe este permiso. Pudo generarse en un cierre de dia, o estar  vinculado a este mismo ID de sistema ';		
			END IF;
		
			IF(( ( select count(*) from TBL_NOM_PERMISOS where ID_Empleado = _ID_Empleado and 
				ID_Movimiento = _ID_Sistema and 
				_ID_FechaMovimiento >= FechaHora_Desde and 
				_ID_FechaMovimiento < FechaHora_Hasta  ) > 0 ) OR (
				( select count(*) from TBL_NOM_PERMISOS where ID_Empleado = _ID_Empleado and 
				ID_Movimiento = _ID_Sistema  and 
				_FechaHora_Hasta > FechaHora_Desde and 
				_FechaHora_Hasta <= FechaHora_Hasta  ) > 0 ) 	OR	(
				( select count(*) from TBL_NOM_PERMISOS where ID_Empleado = _ID_Empleado and 
				ID_Movimiento = _ID_Sistema and 
				ID_FechaMovimiento >= _ID_FechaMovimiento and  
				ID_FechaMovimiento < _FechaHora_Hasta ) > 0 ))
			THEN
				_err := 1;
				_result := 'ERROR: Este permiso se intercala con otro. No se puede insertar este permiso porque se duplicar√≠a en algun cierre de dia.';
			END IF;
		ELSE
			-- Revisa que los id fecha movimiento en el rango en el que estan desde ID_FechaMovimiento hasta ID_FechaHora_Hasta
			_ID_Fecha := _ID_FechaMovimiento;
			
			WHILE _ID_Fecha <= _FechaHora_Hasta
			LOOP
				IF(select count(*) from TBL_NOM_PERMISOS where ID_Empleado = _ID_Empleado 
							and ID_Movimiento = _ID_Movimiento and ID_FechaMovimiento = _ID_Fecha) > 0
				THEN
					_err := 3;
					_result := 'ERROR: Ya existe la clave del movimiento con esta fecha para este empleado ';
					EXIT;
				END IF;
				-- si ya existe este permiso de sistema marcar? error
				IF(select count(*) from TBL_NOM_PERMISOS where ID_Empleado = _ID_Empleado 
							and ID_Movimiento = _ID_Sistema and ID_FechaMovimiento = _ID_Fecha) > 0
				THEN
					_err := 3;
					_result :=  'ERROR: Ya existe este permiso. Pudo generarse en un cierre de dia, o estar  vinculado a este mismo ID de sistema ';
					EXIT;
				END IF;

				_ID_Fecha = _ID_Fecha + '1 day'::interval;
			END LOOP;

		END IF;
	ELSE -- es permiso de grupo
		IF(select count(*) from TBL_NOM_PERMISOS_GRUPO where ID_Compania = 0 and ID_Sucursal = _ID_Sucursal 
						and ID_Movimiento = _ID_Movimiento and ID_FechaMovimiento = _ID_FechaMovimiento) > 0
		THEN
			_err := 3;
			_result := 'ERROR: Ya existe la clave del movimiento de grupo con la fecha especific a da y para esta n√≥mina';
		END IF;
		-- si ya existe este permiso de sistema marcar? error
		IF(select count(*) from TBL_NOM_PERMISOS_GRUPO where ID_Compania = 0 and ID_Sucursal = _ID_Sucursal 
						and ID_Movimiento = _ID_Sistema and ID_FechaMovimiento = _ID_FechaMovimiento) > 0
		THEN
			_err := 3;
			_result := 'ERROR: Ya existe este permiso de grupo. Pudo generarse en un cierre de dia, o estar  vinculado a este mismo ID de sistema ';		
		END IF;
		
		IF(( ( select count(*) from TBL_NOM_PERMISOS_GRUPO where ID_Compania = 0 and ID_Sucursal = _ID_Sucursal and 
				ID_Movimiento = _ID_Sistema and 
				_ID_FechaMovimiento >= FechaHora_Desde and 
				_ID_FechaMovimiento < FechaHora_Hasta  ) > 0 ) OR (
				( select count(*) from TBL_NOM_PERMISOS_GRUPO where ID_Compania = 0 and ID_Sucursal = _ID_Sucursal and 
				ID_Movimiento = _ID_Sistema  and 
				_FechaHora_Hasta > FechaHora_Desde and 
				_FechaHora_Hasta <= FechaHora_Hasta  ) > 0 ) 	OR	(
				( select count(*) from TBL_NOM_PERMISOS_GRUPO where ID_Compania = 0 and ID_Sucursal = _ID_Sucursal and 
				ID_Movimiento = _ID_Sistema and 
				ID_FechaMovimiento >= _ID_FechaMovimiento and  
				ID_FechaMovimiento < _FechaHora_Hasta ) > 0 ))
		THEN
			_err := 3;
			_result := 'ERROR: Este permiso de grupo se intercala con otro. No se puede insertar este permiso porque se duplicar√≠a en algun cierre de dia.';
		END IF;
	END IF;
	
	IF _err = 0
	THEN
		IF _prmgrp = '0' -- No es permiso de grupo
		THEN
			IF _DiasCompletos = '1'
			THEN
				INSERT INTO TBL_NOM_PERMISOS
				VALUES( _ID_Empleado, _ID_Movimiento, _ID_FechaMovimiento, _DiasCompletos, _FechaHora_Desde, 
							_FechaHora_Hasta, _Num_de_Dias, _Num_de_Horas, _Tiempo_por_Pagar, _Obs );
							
				INSERT INTO TBL_NOM_PERMISOS
				VALUES( _ID_Empleado, _ID_Sistema, _ID_FechaMovimiento, _DiasCompletos, _FechaHora_Desde, 
							_FechaHora_Hasta, _Num_de_Dias, _Num_de_Horas, _Tiempo_por_Pagar, _Obs );
			ELSE
				_ID_Fecha := _ID_FechaMovimiento;
				_ID_HoraDesde := _FechaHora_Desde;
				_ID_HoraHasta := _FechaHora_Hasta;
				--_Dif = DATEDIFF(day,_ID_FechaMovimiento,_FechaHora_Hasta)
				_Dif := DATE_PART('day', _FechaHora_Hasta - _ID_FechaMovimiento); 
				--_ID_HoraHasta = DATEADD(day, (-_Dif), _ID_HoraHasta)
				_ID_HoraHasta := _ID_HoraHasta - (_Dif::varchar || ' day')::interval;
						
				WHILE _ID_Fecha <= _FechaHora_Hasta
				LOOP
					INSERT INTO TBL_NOM_PERMISOS
					VALUES( _ID_Empleado, _ID_Movimiento, _ID_Fecha, _DiasCompletos, _ID_HoraDesde, 
								_ID_HoraHasta, 0, _Num_de_Horas, _Num_de_Horas, _Obs  );
					
					INSERT INTO TBL_NOM_PERMISOS
					VALUES( _ID_Empleado, _ID_Sistema, _ID_Fecha, _DiasCompletos, _ID_HoraDesde, 
								_ID_HoraHasta, 0, _Num_de_Horas, _Num_de_Horas, _Obs  );
					
					_ID_Fecha := _ID_Fecha + '1 day'::interval;
					_ID_HoraDesde := _ID_HoraDesde + '1 day'::interval;
					_ID_HoraHasta := _ID_HoraHasta + '1 day'::interval;

				END LOOP;

			END IF;
		ELSE -- Es de grupo
			INSERT INTO TBL_NOM_PERMISOS_GRUPO
			VALUES( 0, _ID_Sucursal, _ID_Movimiento, _ID_FechaMovimiento, _DiasCompletos, _FechaHora_Desde, 
							_FechaHora_Hasta, _Num_de_Dias, _Num_de_Horas, _Tiempo_por_Pagar );
							
			INSERT INTO TBL_NOM_PERMISOS_GRUPO
			VALUES( 0, _ID_Sucursal, _ID_Sistema, _ID_FechaMovimiento, _DiasCompletos, _FechaHora_Desde, 
							_FechaHora_Hasta, _Num_de_Dias, _Num_de_Horas, _Tiempo_por_Pagar );
		END IF;
	END IF;
		
	RETURN QUERY SELECT _err, _result, _id_registro;

END
$BODY$
  LANGUAGE plpgsql;
  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_nom_permisos_cambiar(
    _id_empleado character,
    _id_movimiento smallint,
    _id_fechamovimiento timestamp without time zone,
    _diascompletos bit,
    _fechahora_desde timestamp without time zone,
    _fechahora_hasta timestamp without time zone,
    _num_de_dias smallint,
    _num_de_horas numeric,
    _tiempo_por_pagar numeric,
    _obs character varying,
    _prmgrp bit,
    _id_sucursal smallint)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255); _ID_Sistema smallint; _ID_Registro varchar(255); 
BEGIN
	_err := 0;

	if _prmgrp = '0' --No es de grupo
	then
		_result := 'El permiso de empleado se cambi√≥ satisfactoriamente';
		_ID_Registro := _ID_Empleado::varchar || '_' || cast(_ID_Movimiento as varchar) || '_' || date_part('day', _ID_FechaMovimiento)::varchar || '/' || date_part('month', _ID_FechaMovimiento)::varchar || '/' || date_part('year', _ID_FechaMovimiento)::varchar; 
	else
		_result := 'El permiso de grupo se cambi√≥ satisfactoriamente';
		_ID_Registro := 'FSINOMINA-' || cast(_ID_Sucursal as varchar) || '_' || cast(_ID_Movimiento as varchar) || '_' || date_part('day', _ID_FechaMovimiento)::varchar || '/' || date_part('month', _ID_FechaMovimiento)::varchar || '/' || date_part('year', _ID_FechaMovimiento)::varchar; 
	end if;
	
	_ID_Sistema := ( select ID_Sistema from TBL_NOM_MOVIMIENTOS where ID_Movimiento = _ID_Movimiento );

	IF _prmgrp = '0' --No es de grupo
	THEN
		-- si no existe este permiso marcar? error
		IF(select count(*) from TBL_NOM_PERMISOS where ID_Empleado = _ID_Empleado 
							and ID_Movimiento = _ID_Movimiento and ID_FechaMovimiento = _ID_FechaMovimiento) < 1
		THEN
			_err := 3;
			_result := 'ERROR: No existe la clave del movimiento con esta fecha para este empleado. No se puede cambiar';
		END IF;
		
		IF(select count(*) from TBL_NOM_PERMISOS where ID_Empleado = _ID_Empleado 
							and ID_Movimiento = _ID_Sistema and ID_FechaMovimiento = _ID_FechaMovimiento) < 1
		THEN
			_err := 3;
			_result := 'ERROR: No existe la concordancia del ID de sistema con esta fecha para este empleado. No se puede cambiar ';
		END IF;

		IF _DiasCompletos = '1' --Si es permiso de dias completos, verifica que no se empalmen las fechas
		THEN
			IF(( ( select count(*) from TBL_NOM_PERMISOS where ID_Empleado = _ID_Empleado and 
				ID_Movimiento = _ID_Sistema and ID_FechaMovimiento <> _ID_FechaMovimiento and 
				_ID_FechaMovimiento >= FechaHora_Desde and 
				_ID_FechaMovimiento < FechaHora_Hasta  ) > 0 ) OR (
				( select count(*) from TBL_NOM_PERMISOS where ID_Empleado = _ID_Empleado and 
				ID_Movimiento = _ID_Sistema  and ID_FechaMovimiento <> _ID_FechaMovimiento and 
				_FechaHora_Hasta > FechaHora_Desde and 
				_FechaHora_Hasta <= FechaHora_Hasta  ) > 0 ) 	OR	(
				( select count(*) from TBL_NOM_PERMISOS where ID_Empleado = _ID_Empleado and 
				ID_Movimiento = _ID_Sistema and ID_FechaMovimiento <> _ID_FechaMovimiento and 
				ID_FechaMovimiento >= _ID_FechaMovimiento and  
				ID_FechaMovimiento < _FechaHora_Hasta ) > 0 ))
			THEN
				_err := 3;
				_result := 'ERROR: Este permiso se intercala con otro. No se puede cambiar este permiso porque se duplicar√≠a en algun cierre de dia.';
			END IF;
		END IF;
	ELSE -- Es permiso de grupo
		IF(select count(*) from TBL_NOM_PERMISOS_GRUPO where ID_Compania = 0 and ID_Sucursal = _ID_Sucursal 
						and ID_Movimiento = _ID_Movimiento and ID_FechaMovimiento = _ID_FechaMovimiento) < 1
		THEN
			_err := 3;
			_result := 'ERROR: No existe la clave del movimiento de grupo con la fecha especific a da y para esta n√≥mina';
		END IF;
		-- si no existe este permiso de sistema marcar? error
		IF(select count(*) from TBL_NOM_PERMISOS_GRUPO where ID_Compania = 0 and ID_Sucursal = _ID_Sucursal 
						and ID_Movimiento = _ID_Sistema and ID_FechaMovimiento = _ID_FechaMovimiento) < 1
		THEN
			_err := 3;
			_result := 'ERROR: No existe la concordancia del ID de sistema con esta fecha para esta n√≥mina. No se puede cambiar ';		
		END IF;
		
		IF(( ( select count(*) from TBL_NOM_PERMISOS_GRUPO where ID_Compania = 0 and ID_Sucursal = _ID_Sucursal and 
				ID_Movimiento = _ID_Sistema and ID_FechaMovimiento <> _ID_FechaMovimiento and 
				_ID_FechaMovimiento >= FechaHora_Desde and 
				_ID_FechaMovimiento < FechaHora_Hasta  ) > 0 ) OR (
				( select count(*) from TBL_NOM_PERMISOS_GRUPO where ID_Compania = 0 and ID_Sucursal = _ID_Sucursal and 
				ID_Movimiento = _ID_Sistema  and ID_FechaMovimiento <> _ID_FechaMovimiento and 
				_FechaHora_Hasta > FechaHora_Desde and 
				_FechaHora_Hasta <= FechaHora_Hasta  ) > 0 ) 	OR	(
				( select count(*) from TBL_NOM_PERMISOS_GRUPO where ID_Compania = 0 and ID_Sucursal = _ID_Sucursal and 
				ID_Movimiento = _ID_Sistema and ID_FechaMovimiento <> _ID_FechaMovimiento and 
				ID_FechaMovimiento >= _ID_FechaMovimiento and  
				ID_FechaMovimiento < _FechaHora_Hasta ) > 0 ))
			THEN
				_err := 3;
				_result := 'ERROR: Este permiso se intercala con otro. No se puede cambiar este permiso porque se duplicar√≠a en algun cierre de dia.';
			END IF;
	END IF;
	
	IF _err = 0
	THEN
		IF _prmgrp = '0' -- No es permiso de grupo
		THEN
			UPDATE TBL_NOM_PERMISOS
			SET DiasCompletos = _DiasCompletos, FechaHora_Desde = _FechaHora_Desde, FechaHora_Hasta = _FechaHora_Hasta, 
					Num_de_Dias = _Num_de_Dias, Num_de_Horas = _Num_de_Horas, Tiempo_por_Pagar = _Tiempo_por_Pagar, Obs = _Obs 
			WHERE ID_Empleado = _ID_Empleado and 
						ID_Movimiento = _ID_Movimiento and 
						ID_FechaMovimiento = _ID_FechaMovimiento;
			
			UPDATE TBL_NOM_PERMISOS
			SET DiasCompletos = _DiasCompletos, FechaHora_Desde = _FechaHora_Desde, FechaHora_Hasta = _FechaHora_Hasta, 
					Num_de_Dias = _Num_de_Dias, Num_de_Horas = _Num_de_Horas, Tiempo_por_Pagar = _Tiempo_por_Pagar, Obs = _Obs 
			WHERE ID_Empleado = _ID_Empleado and 
						ID_Movimiento = _ID_Sistema and 
						ID_FechaMovimiento = _ID_FechaMovimiento;
		ELSE
			UPDATE TBL_NOM_PERMISOS_GRUPO
			SET DiasCompletos = _DiasCompletos, FechaHora_Desde = _FechaHora_Desde, FechaHora_Hasta = _FechaHora_Hasta, 
					Num_de_Dias = _Num_de_Dias, Num_de_Horas = _Num_de_Horas, Tiempo_por_Pagar = _Tiempo_por_Pagar 
			WHERE ID_Compania = 0 and ID_Sucursal = _ID_Sucursal and 
						ID_Movimiento = _ID_Movimiento and 
						ID_FechaMovimiento = _ID_FechaMovimiento;
			
			UPDATE TBL_NOM_PERMISOS_GRUPO
			SET DiasCompletos = _DiasCompletos, FechaHora_Desde = _FechaHora_Desde, FechaHora_Hasta = _FechaHora_Hasta, 
					Num_de_Dias = _Num_de_Dias, Num_de_Horas = _Num_de_Horas, Tiempo_por_Pagar = _Tiempo_por_Pagar 
			WHERE ID_Compania = 0 and ID_Sucursal = _ID_Sucursal and  
						ID_Movimiento = _ID_Sistema and 
						ID_FechaMovimiento = _ID_FechaMovimiento;
		END IF;
	END IF;
		
	RETURN QUERY SELECT _err, _result, _id_registro;

END
$BODY$
  LANGUAGE plpgsql;
  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_nom_permisos_eliminar(
    _id_empleado character,
    _id_movimiento smallint,
    _id_fechamovimiento timestamp without time zone,
    _prmgrp bit,
    _id_sucursal smallint)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255); _ID_Sistema smallint; _ID_Registro varchar(255); 
BEGIN
	_err := 0;

	if _prmgrp = '0' --No es de grupo
	then
		_result := 'El permiso de empleado se elimin√≥ de la base de datos';
		_ID_Registro := _ID_Empleado::varchar || '_' || cast(_ID_Movimiento as varchar) || '_' || date_part('day', _ID_FechaMovimiento)::varchar || '-' || date_part('month', _ID_FechaMovimiento)::varchar || '-' || date_part('year', _ID_FechaMovimiento)::varchar; 
	else
		_result := 'El permiso de grupo se elimin√≥ de la base de datos';
		_ID_Registro := 'FSINOMINA-' || cast(_ID_Sucursal as varchar) || '_' || cast(_ID_Movimiento as varchar) || '_' || date_part('day', _ID_FechaMovimiento)::varchar || '/' || date_part('month', _ID_FechaMovimiento)::varchar || '/' || date_part('year', _ID_FechaMovimiento)::varchar; 
	end if;
	
	_ID_Sistema := ( select ID_Sistema from TBL_NOM_MOVIMIENTOS where ID_Movimiento = _ID_Movimiento );
	
	-- si no existe este permiso marcar? error
	IF _prmgrp = '0'
	THEN
		IF(select count(*) from TBL_NOM_PERMISOS where ID_Empleado = _ID_Empleado 
							and ID_Movimiento = _ID_Movimiento and ID_FechaMovimiento = _ID_FechaMovimiento) < 1
		THEN
			_err := 3;
			_result := 'ERROR: No existe la clave del movimiento con esta fecha para este empleado. No se puede eliminar';
		END IF;
	ELSE -- es de grupo
		IF(select count(*) from TBL_NOM_PERMISOS_GRUPO where ID_Compania = 0 and ID_Sucursal = _ID_Sucursal 
							and ID_Movimiento = _ID_Movimiento and ID_FechaMovimiento = _ID_FechaMovimiento) < 1
		THEN
			_err := 3;
			_result := 'ERROR: No existe la clave del movimiento con esta fecha para este grupo. No se puede eliminar';
		END IF;
	END IF;
	
	IF _err = 0
	THEN
		IF _prmgrp = '0'
		THEN
			DELETE FROM TBL_NOM_PERMISOS
			WHERE ID_Empleado = _ID_Empleado and 
					ID_Movimiento = _ID_Movimiento and 
					ID_FechaMovimiento = _ID_FechaMovimiento;

			DELETE FROM TBL_NOM_PERMISOS
			WHERE ID_Empleado = _ID_Empleado and 
					ID_Movimiento = _ID_Sistema and 
					ID_FechaMovimiento = _ID_FechaMovimiento;
		ELSE
			DELETE FROM TBL_NOM_PERMISOS_GRUPO
			WHERE ID_Compania = 0 and ID_Sucursal = _ID_Sucursal and 
					ID_Movimiento = _ID_Movimiento and 
					ID_FechaMovimiento = _ID_FechaMovimiento;

			DELETE FROM TBL_NOM_PERMISOS_GRUPO
			WHERE ID_Compania = 0 and ID_Sucursal = _ID_Sucursal and 
					ID_Movimiento = _ID_Sistema and 
					ID_FechaMovimiento = _ID_FechaMovimiento;
		END IF;
	END IF;
		
	RETURN QUERY SELECT _err, _result, _id_registro;

END
$BODY$
  LANGUAGE plpgsql;


--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_catalog_nommov AS 
 SELECT m.id_movimiento AS clave, 
        CASE
            WHEN m.tipo_movimiento::text <> 'DIN'::text THEN ( SELECT ms.msj1
               FROM tbl_msj ms
              WHERE ms.alc::text = 'CEF'::text AND ms.mod::text = 'NOMINA'::text AND ms.sub::text = 'CAT_MOVNOM'::text AND ms.elm::text = m.tipo_movimiento::text)
            ELSE m.descripcion
        END AS descripcion, 
        CASE
            WHEN m.deduccion = B'0'::"bit" THEN 
            CASE
                WHEN m.tipo_movimiento::text = 'DIN'::text THEN 'd+'::text
                ELSE 'f+'::text
            END
            ELSE 
            CASE
                WHEN m.tipo_movimiento::text = 'DIN'::text THEN 'd-'::text
                ELSE 'f-'::text
            END
        END AS especial
   FROM tbl_nom_movimientos_nomina m;
   


--@FIN_BLOQUE
CREATE TABLE tbl_nom_plantillas_exclusiones
(
  id_plantilla integer NOT NULL,
  id_empleado character(6) NOT NULL,
  CONSTRAINT pk_tbl_nom_plantillas_exclusiones PRIMARY KEY (id_plantilla , id_empleado ),
  CONSTRAINT fk_tbl_nom_plantillas_exclusiones_tbl_nom_masemp FOREIGN KEY (id_empleado)
      REFERENCES tbl_nom_masemp (id_empleado) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_tbl_nom_plantillas_exclusiones_tbl_nom_plantillas FOREIGN KEY (id_plantilla)
      REFERENCES tbl_nom_plantillas (id_plantilla) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE
);



--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_nom_plantillas_exclusiones AS 
 SELECT e.id_plantilla, e.id_empleado, (((c.nombre::text || ' '::text) || c.apellido_paterno::text) || ' '::text) || c.apellido_materno::text AS nombre
   FROM tbl_nom_plantillas_exclusiones e
   JOIN tbl_nom_masemp c ON e.id_empleado = c.id_empleado;



--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_nom_plantillas_cons AS 
 SELECT p.id_plantilla, p.id_movimiento, m.descripcion AS movimiento, p.fecha, p.descripcion, p.bid_empleado, 
        CASE
            WHEN p.bid_empleado = B'1'::"bit" THEN p.id_empleado
            ELSE ''::bpchar
        END AS id_empleado, 
        CASE
            WHEN p.bid_empleado = B'1'::"bit" THEN ( SELECT (((tbl_nom_masemp.nombre::text || ' '::text) || tbl_nom_masemp.apellido_paterno::text) || ' '::text) || tbl_nom_masemp.apellido_materno::text
               FROM tbl_nom_masemp
              WHERE tbl_nom_masemp.id_empleado = p.id_empleado)
            ELSE ''::text
        END AS empleado, p.bnomina, 
        CASE
            WHEN p.bnomina = B'1'::"bit" THEN p.ano::integer
            ELSE 0
        END AS ano, 
        CASE
            WHEN p.bnomina = B'1'::"bit" THEN p.numero_nomina::integer
            ELSE 0
        END AS numero_nomina, p.btipo_nomina, 
        CASE
            WHEN p.btipo_nomina = B'1'::"bit" THEN p.tipo_de_nomina::integer
            ELSE (-1)
        END AS tipo_de_nomina, p.bcompania_sucursal, 
        CASE
            WHEN p.bcompania_sucursal = B'1'::"bit" THEN ( SELECT tbl_companias.descripcion
               FROM tbl_companias
              WHERE tbl_companias.id_compania = p.id_compania AND tbl_companias.id_sucursal = p.id_sucursal)
            ELSE '_FSI_CS'::character varying
        END AS scompania_sucursal, p.bnivel_confianza, 
        CASE
            WHEN p.bnivel_confianza = B'1'::"bit" THEN p.nivel_de_confianza::integer
            ELSE (-1)
        END AS nivel_de_confianza, p.aplicacion, 
        CASE
            WHEN p.aplicacion = 0 THEN p.horas
            ELSE 0::numeric
        END AS horas, 
        CASE
            WHEN p.aplicacion = 1 THEN p.dias::integer
            ELSE 0
        END AS dias, 
        CASE
            WHEN p.aplicacion = 2 THEN p.veces_importe::integer
            ELSE 0
        END AS veces_importe, 
        CASE
            WHEN p.aplicacion = 2 THEN p.importe
            ELSE 0::numeric
        END AS importe, p.bexento, 
        CASE
            WHEN p.bexento = B'1'::"bit" THEN p.exento
            ELSE 0::numeric
        END AS exento, p.mixto, p.inclusiones, 
        CASE
            WHEN p.aplicacion = 0 THEN p.horas
            WHEN p.aplicacion = 1 THEN p.dias::numeric
            WHEN p.aplicacion = 2 THEN p.importe
            ELSE 0::numeric
        END AS cantidad
   FROM tbl_nom_plantillas p
   JOIN tbl_nom_movimientos_nomina m ON p.id_movimiento = m.id_movimiento;

  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_nom_plantillas_agregar(_id_movimiento smallint, _fecha timestamp without time zone, _descripcion character varying, _bid_empleado bit, _id_empleado character, _bnomina bit, _ano smallint, _numero_nomina smallint, _btipo_nomina bit, _tipo_de_nomina smallint, _bcompania_sucursal bit, _compania_sucursal character varying, _bnivel_confianza bit, _nivel_de_confianza smallint, _aplicacion smallint, _horas numeric, _dias smallint, _veces_importe smallint, _importe numeric, _bexento bit, _exento numeric, _mixto bit, _inclusiones bit)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255);  _ID_Compania smallint; _ID_Sucursal smallint; _ID_Plantilla int;
BEGIN
	_err := 0;
	_result := 'La plantilla se registr√≥ satisfactoriamente.';
	_ID_Compania := (select ID_Compania from TBL_COMPANIAS where Descripcion = _Compania_Sucursal);
	_ID_Sucursal := (select ID_Sucursal from TBL_COMPANIAS where Descripcion = _Compania_Sucursal);

	IF(select Tipo_Movimiento from TBL_NOM_MOVIMIENTOS_NOMINA where ID_Movimiento = _ID_Movimiento) <> 'DIN'
	THEN
		_err := 3;
		_result := 'ERROR: No se puede agregar una plantilla por un concepto de movimiento de sistema';
	END IF;
	
	IF _err = 0
	THEN
		INSERT INTO TBL_NOM_PLANTILLAS
		VALUES( default, _ID_Movimiento, _Fecha, _Descripcion, _bID_Empleado, _ID_Empleado, _bNomina, _Ano, _Numero_Nomina, 
						_bTipo_Nomina, _Tipo_de_Nomina, _bCompania_Sucursal, _ID_Compania, _ID_Sucursal, _bNivel_Confianza, _Nivel_de_Confianza, _Aplicacion, _Horas, _Dias, _Veces_Importe, _Importe, 
						_bExento, _Exento, _Mixto, _Inclusiones, '1' )
		RETURNING currval(pg_get_serial_sequence('TBL_NOM_PLANTILLAS', 'id_plantilla')) INTO _id_plantilla;
		
		
		INSERT INTO TBL_NOM_PLANTILLAS_EXCLUSIONES
		SELECT _ID_Plantilla, ID_Empleado
		FROM _TMP_PLANTILLAS_EXCLUSIONES;		

	END IF;
		
	RETURN QUERY SELECT _err, _result, _id_plantilla;

END
$BODY$
  LANGUAGE plpgsql;
  
  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_nom_plantillas_cambiar(_id_plantilla integer, _id_movimiento smallint, _fecha timestamp without time zone, _descripcion character varying, _bid_empleado bit, _id_empleado character, _bnomina bit, _ano smallint, _numero_nomina smallint, _btipo_nomina bit, _tipo_de_nomina smallint, _bcompania_sucursal bit, _compania_sucursal character varying, _bnivel_confianza bit, _nivel_de_confianza smallint, _aplicacion smallint, _horas numeric, _dias smallint, _veces_importe smallint, _importe numeric, _bexento bit, _exento numeric, _mixto bit, _inclusiones bit)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255);  _ID_Compania smallint; _ID_Sucursal smallint;
BEGIN
	_err := 0;
	_result := 'La plantilla se cambi√≥ con exito.';
	_ID_Compania := (select ID_Compania from TBL_COMPANIAS where Descripcion = _Compania_Sucursal);
	_ID_Sucursal := (select ID_Sucursal from TBL_COMPANIAS where Descripcion = _Compania_Sucursal);

	IF(select Tipo_Movimiento from TBL_NOM_MOVIMIENTOS_NOMINA where ID_Movimiento = _ID_Movimiento) <> 'DIN'
	THEN
		_err := 3;
		_result := 'ERROR: No se puede cambiar una plantilla por un concepto de movimiento de sistema';
	END IF;
	
	IF(select count(*) from TBL_NOM_PLANTILLAS where ID_Plantilla = _ID_Plantilla) < 1
	THEN
		_err := 3;
		_result := 'ERROR: No existe una plantilla con esta clave, No se puede cambiar ';
	END IF;
	
	IF _err = 0
	THEN
		UPDATE TBL_NOM_PLANTILLAS
		SET ID_Movimiento = _ID_Movimiento, Fecha = _Fecha, Descripcion = _Descripcion, bID_Empleado = _bID_Empleado, ID_Empleado = _ID_Empleado, bNomina = _bNomina, Ano = _Ano, Numero_Nomina = _Numero_Nomina, 
				bTipo_Nomina = _bTipo_Nomina, Tipo_de_Nomina = _Tipo_de_Nomina, bCompania_Sucursal = _bCompania_Sucursal, ID_Compania = _ID_Compania, ID_Sucursal = _ID_Sucursal, bNivel_Confianza = _bNivel_Confianza, Nivel_de_Confianza = _Nivel_de_Confianza, Aplicacion = _Aplicacion, Horas = _Horas, 
				Dias = _Dias, Veces_Importe = _Veces_Importe, Importe = _Importe, bExento = _bExento, Exento = _Exento, Mixto = _Mixto, Inclusiones = _Inclusiones
		WHERE ID_Plantilla = _ID_Plantilla;

		DELETE FROM TBL_NOM_PLANTILLAS_EXCLUSIONES
		WHERE ID_Plantilla = _ID_Plantilla;
		
		INSERT INTO TBL_NOM_PLANTILLAS_EXCLUSIONES
		SELECT _ID_Plantilla, ID_Empleado
		FROM _TMP_PLANTILLAS_EXCLUSIONES;		

	END IF;
		
	RETURN QUERY SELECT _err, _result, _id_plantilla;

END
$BODY$
  LANGUAGE plpgsql;
  
  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_nom_plantillas_eliminar(_id_plantilla integer)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255); 
BEGIN
	_err := 0;
	_result := 'La plantilla se elimin√≥ de la base de datos.';
	
	IF(select count(*) from TBL_NOM_PLANTILLAS where ID_Plantilla = _ID_Plantilla) < 1
	THEN
		_err := 3;
		_result := 'ERROR: No existe una plantilla con esta clave, No hay nada que eliminar ';
	END IF;
	
	IF _err = 0
	THEN
		DELETE FROM TBL_NOM_PLANTILLAS
		WHERE ID_Plantilla = _ID_Plantilla;
	END IF;
		
	RETURN QUERY SELECT _err, _result, _id_plantilla;

END
$BODY$
  LANGUAGE plpgsql;
  
  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_nom_plantillas_inhibir(_id_plantilla integer)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255); _Calcular bit;
BEGIN
	_err := 0;
	_result := 'La plantilla ha quedado inhibida/desinhibida.';
	
	IF(select count(*) from TBL_NOM_PLANTILLAS where ID_Plantilla = _ID_Plantilla) < 1
	THEN
		_err := 3;
		_result := 'ERROR: No existe una plantilla con esta clave, No hay nada que hacer ';
	END IF;
	
	IF _err = 0
	THEN
		_Calcular := (select case when Calcular = '1' then '0' else '1' end	from TBL_NOM_PLANTILLAS where ID_Plantilla = _ID_Plantilla);

		UPDATE TBL_NOM_PLANTILLAS
		SET Calcular = _Calcular
		WHERE ID_Plantilla = _ID_Plantilla;
		
	END IF;
		
	RETURN QUERY SELECT _err, _result, _id_plantilla;

END
$BODY$
  LANGUAGE plpgsql;



--@FIN_BLOQUE
CREATE TABLE tbl_nom_calculo_nomina_esp
(
  id_nomina integer NOT NULL,
  id_empleado character(6) NOT NULL,
  dias numeric(5,2) NOT NULL,
  faltas numeric(4,2) NOT NULL,
  recibo smallint NOT NULL,
  he numeric(9,6) NOT NULL,
  hd numeric(9,6) NOT NULL,
  id_cfd integer,
  tfd smallint,
  gravado numeric(10,2) NOT NULL,
  exento numeric(10,2) NOT NULL,
  deduccion numeric(10,2) NOT NULL,
  isr numeric(10,2) NOT NULL,
  ht numeric(9,6) NOT NULL,
  ixa numeric(5,2) NOT NULL,
  ixe numeric(5,2) NOT NULL,
  ixm numeric(5,2) NOT NULL,
  diashorasextras smallint NOT NULL,
  CONSTRAINT pk_tbl_nom_calculo_nomina_esp PRIMARY KEY (id_nomina , id_empleado ),
  CONSTRAINT fk_tbl_nom_calculo_nomina_esp_tbl_nom_calculo_nomina FOREIGN KEY (id_nomina)
      REFERENCES tbl_nom_calculo_nomina (id_nomina) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_tbl_nom_calculo_nomina_esp_tbl_nom_masemp FOREIGN KEY (id_empleado)
      REFERENCES tbl_nom_masemp (id_empleado) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE
);



--@FIN_BLOQUE
CREATE TABLE tbl_nom_calculo_nomina_his_det_imp
(
  id_nomina integer NOT NULL,
  id_empleado character(6) NOT NULL,
  impdap numeric(10,2),
  impdsp numeric(10,2),
  diasnomina smallint,
  dt numeric(5,2),
  sa numeric(19,4),
  saa numeric(19,4),
  da numeric(5,2),
  daa numeric(5,2),
  impan numeric(19,4),
  ga numeric(19,4),
  gaa numeric(19,4),
  fi numeric(19,4),
  li numeric(19,4),
  salariotope numeric(19,4),
  exedente numeric(19,4),
  cf numeric(19,4),
  cfdtgaa numeric(19,4),
  cfdt numeric(19,4),
  ime numeric(19,4),
  im numeric(19,4),
  aim numeric(19,4),
  ispt numeric(10,2),
  subsidio numeric(19,4),
  cfs numeric(19,4),
  subtot numeric(19,4),
  subtotgaa numeric(19,4),
  ispsb numeric(10,2),
  CONSTRAINT pk_tbl_nom_calculo_nomina_his_det_imp PRIMARY KEY (id_nomina , id_empleado ),
  CONSTRAINT fk_tbl_nom_calculo_nomina_his_det_imp_tbl_nom_calculo_nomina FOREIGN KEY (id_nomina)
      REFERENCES tbl_nom_calculo_nomina (id_nomina) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_tbl_nom_calculo_nomina_his_det_imp_tbl_nom_masemp FOREIGN KEY (id_empleado)
      REFERENCES tbl_nom_masemp (id_empleado) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE
);



--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_nom_calculo_nomina_esp AS 
 SELECT cne.id_nomina, cne.id_empleado, (((c.nombre::text || ' '::text) || c.apellido_paterno::text) || ' '::text) || c.apellido_materno::text AS nombre, cne.dias, cne.faltas, cne.recibo, cne.he, cne.hd, cne.ht, cne.diashorasextras, cne.ixa, cne.ixe, cne.ixm, 
        CASE
            WHEN cne.id_cfd IS NULL THEN 0
            ELSE cne.id_cfd
        END AS id_cfd, 
        CASE
            WHEN cne.tfd IS NULL THEN 0
            ELSE cne.tfd::integer
        END AS tfd, cne.gravado, cne.exento, cne.deduccion
   FROM tbl_nom_calculo_nomina_esp cne
   JOIN tbl_nom_masemp c ON cne.id_empleado = c.id_empleado;



--@FIN_BLOQUE
CREATE TABLE tbl_nom_calculo_nomina_det
(
  id_nomina integer NOT NULL,
  id_empleado character(6) NOT NULL,
  id_movimiento smallint NOT NULL,
  gravado numeric(10,2) NOT NULL,
  exento numeric(10,2) NOT NULL,
  deduccion numeric(10,2) NOT NULL,
  CONSTRAINT pk_tbl_nom_calculo_nomina_det PRIMARY KEY (id_nomina , id_empleado , id_movimiento ),
  CONSTRAINT fk_tbl_nom_calculo_nomina_det_tbl_nom_calculo_nomina FOREIGN KEY (id_nomina)
      REFERENCES tbl_nom_calculo_nomina (id_nomina) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_tbl_nom_calculo_nomina_det_tbl_nom_masemp FOREIGN KEY (id_empleado)
      REFERENCES tbl_nom_masemp (id_empleado) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_tbl_nom_calculo_nomina_det_tbl_nom_movimientos_nomina FOREIGN KEY (id_movimiento)
      REFERENCES tbl_nom_movimientos_nomina (id_movimiento) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE
);



--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_nom_calculo_nomina_det AS 
 SELECT cn.id_nomina, cnd.id_empleado, cnd.id_movimiento, 
        CASE
            WHEN cm.tipo_movimiento::text <> 'DIN'::text THEN ( SELECT ms.msj1
               FROM tbl_msj ms
              WHERE ms.alc::text = 'CEF'::text AND ms.mod::text = 'NOMINA'::text AND ms.sub::text = 'CAT_MOVNOM'::text AND ms.elm::text = cm.tipo_movimiento::text)
            ELSE cm.descripcion
        END AS descripcion, cnd.gravado, cnd.exento, cnd.deduccion, cnd.gravado + cnd.exento + cnd.deduccion AS total, cm.deduccion AS esdeduccion, cm.tipo_movimiento AS tipo, cm.id_sat
   FROM tbl_nom_calculo_nomina cn
   JOIN tbl_nom_calculo_nomina_det cnd ON cn.id_nomina = cnd.id_nomina
   JOIN tbl_nom_movimientos_nomina cm ON cnd.id_movimiento = cm.id_movimiento;

  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_nom_prod_nomina_agregar(_id_compania smallint, _id_sucursal smallint, _ano smallint, _numero_nomina smallint, _tipo smallint, _fecha_desde timestamp without time zone, _fecha_hasta timestamp without time zone, _dias smallint, _cerrado bit, _mes smallint)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255); _ID_Nomina int;
BEGIN
	_err := 0;
	_result := 'El cabecero de n√≥mina se agrego correctamente';

	-- si existe marcar? error
	IF (select count(*) from TBL_NOM_CALCULO_NOMINA where ID_Compania = _ID_Compania and 
										Ano = _Ano and Numero_Nomina = _Numero_Nomina and Tipo = _Tipo ) > 0
	THEN
		_err := 3;
		_result := 'ERROR: El cabecero de n√≥mina que se intenta agregar ya existe ';
	END IF;
	
	IF _err = 0
	THEN
		
		INSERT INTO TBL_NOM_CALCULO_NOMINA
		VALUES(default, _ID_Compania, _ID_Sucursal, _Ano, _Numero_Nomina, _Tipo, _Fecha_Desde, _Fecha_Hasta, _Dias, _Cerrado, _Mes, 'G', 'N', -1, -1 )
		RETURNING currval(pg_get_serial_sequence('TBL_NOM_CALCULO_NOMINA', 'id_nomina')) INTO _id_nomina;
		
	
		IF _Tipo = 1 or _Tipo = 2
		THEN
			UPDATE TBL_COMPANIAS
			SET Numero = _Numero_Nomina + 1, Fecha = _Fecha_Hasta + '1 day'::interval
			WHERE ID_Compania = _ID_Compania and ID_Sucursal = _ID_Sucursal;
			
		END IF;
	END IF;
		
	RETURN QUERY SELECT _err, _result, _id_nomina;

END
$BODY$
  LANGUAGE plpgsql;
  
  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_nom_prod_nomina_cambiar(_id_compania smallint, _id_sucursal smallint, _ano smallint, _numero_nomina smallint, _tipo smallint, _fecha_desde timestamp without time zone, _fecha_hasta timestamp without time zone, _dias smallint, _cerrado bit, _mes smallint)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255); _ID_Nomina int;
BEGIN
	_err := 0;
	_result := 'El cabecero de n√≥mina se cambio correctamente';

	-- si existe marcar? error
	IF (select count(*) from TBL_NOM_CALCULO_NOMINA where ID_Compania = _ID_Compania and 
										Ano = _Ano and Numero_Nomina = _Numero_Nomina and Tipo = _Tipo ) < 1
	THEN
		_err := 3;
		_result := 'ERROR: El cabecero de n√≥mina que se intenta cambiar no existe... No hay nada para cambiar ';
	END IF;
	
	IF _err = 0
	THEN
		_ID_Nomina = ( SELECT ID_Nomina FROM TBL_NOM_CALCULO_NOMINA WHERE ID_Compania = _ID_Compania and ID_Sucursal = _ID_Sucursal and Ano = _Ano and Numero_Nomina = _Numero_Nomina and Tipo = _Tipo);

		UPDATE TBL_NOM_CALCULO_NOMINA
		SET Fecha_Desde = _Fecha_Desde, Fecha_Hasta = _Fecha_Hasta, Dias = _Dias, Cerrado = _Cerrado, Mes = _Mes
		WHERE ID_Nomina = _ID_Nomina;
		
	END IF;
		
	RETURN QUERY SELECT _err, _result, _id_nomina;

END
$BODY$
  LANGUAGE plpgsql;
  
  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_nom_prod_nomina_eliminar(_id_nomina integer)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255);
BEGIN
	_err := 0;
	_result := 'La n√≥mina se elimin√≥ de la base de datos';

	-- si no existe marcar? error
	IF (select count(*) from TBL_NOM_CALCULO_NOMINA where ID_Nomina = _ID_Nomina ) < 1
	THEN
		_err := 3;
		_result := 'ERROR: El cabecero de n√≥mina que se intenta eliminar no existe... No hay nada para borrar ';
	END IF;
	
	IF _err = 0
	THEN
		DELETE FROM TBL_NOM_CALCULO_NOMINA
		WHERE ID_Nomina = _ID_Nomina;
		
	END IF;
		
	RETURN QUERY SELECT _err, _result, _id_nomina;

END
$BODY$
  LANGUAGE plpgsql;
  
  
  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_nom_prod_nomina_actualizar_esp(_id_nomina integer, _id_empleado character, _faltas numeric, _recibo smallint, _he numeric, _hd numeric, _ht numeric, _dhe smallint, _ixa numeric, _ixe numeric, _ixm numeric, _uuid character)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255);  _Dias numeric(5, 2); _ISR numeric(10,2); _ID_Compania smallint; _ID_Sucursal smallint; _ID_CFD int; _TFD smallint;  
BEGIN
	_err := 0;
	_ID_Compania := (select _ID_Compania from TBL_NOM_CALCULO_NOMINA where ID_Nomina = _ID_Nomina);
	_ID_Sucursal := (select _ID_Sucursal from TBL_NOM_CALCULO_NOMINA where ID_Nomina = _ID_Nomina);
	_Dias := (select Dias from TBL_NOM_CALCULO_NOMINA where ID_Nomina = _ID_Nomina);
	_ISR :=  (select sum(cnd.Deduccion) from _TMP_NOM_CALCULO_NOMINA_DET cnd join TBL_NOM_MOVIMIENTOS_NOMINA mn on cnd.ID_Movimiento = mn.ID_Movimiento	where mn.tipo_movimiento = 'ISPT' );
	IF _ISR is null THEN _ISR := 0;	END IF;

	
	IF (select count(*) from TBL_NOM_CALCULO_NOMINA where ID_Nomina = _ID_Nomina) < 1
	THEN
		_err := 3;
		_result := 'ERROR: No existe la n√≥mina';
	END IF;
	
	IF (select count(*) from TBL_NOM_MASEMP where ID_Empleado = _ID_Empleado) < 1
	THEN
		_err := 3;
		_result := 'ERROR: No existe el empleado especificado';
	END IF;
	
	--VERIFICA SI ES CFD
	IF (select CFD from TBL_COMPANIAS where ID_Compania = _ID_Compania and ID_Sucursal = _ID_Sucursal) <> '00'
	THEN
		IF _uuid <> '' -- Es emisor directo de CFDI, por lo tanto no puede enlazar un CFDI Externo
		THEN
			_err := 3;
			_result := 'ERROR: No se puede enlazar ningun CFDI porque esta entidad de venta genera sus propios CFDIs';
		END IF;
	ELSE -- Si no es Emisor directo de CFDI comprueba si es carga con CFDI externo
		IF _uuid <> ''
		THEN
			IF (select count(*) from TBL_CFDNOM where UUID = _uuid) > 0
			THEN
				_ID_CFD := (select ID_CFD from TBL_CFDNOM where UUID = _uuid) ;
				_TFD := 3;
			ELSE
				_err := 3;
				_result := 'ERROR: No se puede enlazar el CFDI al registro, porque no existe el UUID proporcionado';
			END IF;
		END IF;
	END IF;
	
	IF _err = 0
	THEN
		IF ( select count(*) from TBL_NOM_CALCULO_NOMINA_ESP where ID_Nomina = _ID_Nomina and ID_Empleado = _ID_Empleado ) > 0
		THEN
			-- si existe actualiza
			_result := 'El recibo del empleado para esta nomina se actualiz√≥ correctamente';
	
			DELETE FROM TBL_NOM_CALCULO_NOMINA_DET
			WHERE ID_Nomina = _ID_Nomina and ID_Empleado = _ID_Empleado;

			UPDATE TBL_NOM_CALCULO_NOMINA_ESP
			SET Dias = _Dias, Faltas = _Faltas, Recibo = _Recibo, HE = _HE, HD = _HD, HT = _HT, DiasHorasExtras = _DHE, IXA = _IXA, IXE = _IXE, IXM = _IXM,
				Gravado = (select coalesce(sum(Gravado),0.0) from _TMP_NOM_CALCULO_NOMINA_DET), Exento = (select coalesce(sum(Exento),0.0) from _TMP_NOM_CALCULO_NOMINA_DET), 
				Deduccion = (select coalesce(sum(Deduccion),0.0) from _TMP_NOM_CALCULO_NOMINA_DET), 
				Isr = _ISR, ID_CFD = _ID_CFD, TFD = _TFD
			WHERE ID_Nomina = _ID_Nomina and ID_Empleado = _ID_Empleado;

			INSERT INTO TBL_NOM_CALCULO_NOMINA_DET
			SELECT _ID_Nomina, _ID_Empleado, ID_Movimiento, Gravado, Exento, Deduccion
			FROM _TMP_NOM_CALCULO_NOMINA_DET;
			
		ELSE
			-- de lo contrario inserta
			_result := 'El recibo del empleado para esta nomina se agrego correctamente';
	
			INSERT INTO TBL_NOM_CALCULO_NOMINA_ESP
			SELECT _ID_Nomina, _ID_Empleado, _Dias, _Faltas, _Recibo, _HE, _HD, _ID_CFD, _TFD, (select coalesce(sum(Gravado),0.0) from _TMP_NOM_CALCULO_NOMINA_DET) as Gravado, (select coalesce(sum(Exento),0.0) from _TMP_NOM_CALCULO_NOMINA_DET) as Exento, 
				(select coalesce(sum(Deduccion),0.0) from _TMP_NOM_CALCULO_NOMINA_DET) as Deduccion, 
				_ISR, _HT, _IXA, _IXE, _IXM, _DHE;  

			INSERT INTO TBL_NOM_CALCULO_NOMINA_DET
			SELECT _ID_Nomina, _ID_Empleado, ID_Movimiento, Gravado, Exento, Deduccion
			FROM _TMP_NOM_CALCULO_NOMINA_DET;
			
		END IF;

		IF _uuid <> ''
		THEN
			UPDATE TBL_CFDNOM
			SET FSI_Tipo = 'NOM', FSI_ID = _ID_Nomina, FSI_Esp1 = _ID_Empleado
			WHERE ID_CFD = _ID_CFD;
			
			UPDATE TBL_CFD
			SET FSI_Tipo = 'NOM', FSI_ID = _ID_Nomina, FSI_Esp1 = _ID_Empleado
			WHERE ID_CFD = _ID_CFD;
		END IF;
		
	END IF;

	RETURN QUERY SELECT _err, _result, _id_nomina;

END
$BODY$
  LANGUAGE plpgsql;
  
  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_nom_prod_nomina_eliminar_esp(_id_nomina integer, _id_empleado character)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255); 
BEGIN
	_err := 0;
	_result := 'El empleado de esta n√≥mina se elimino junto a sus movimientos';

	IF (select count(*) from TBL_NOM_CALCULO_NOMINA_ESP 
		where ID_Nomina = _ID_Nomina and ID_Empleado = _ID_Empleado) < 1
	THEN
		_err := 3;
		_result := 'ERROR: No existe este empleado en esta nomina';
	END IF;
	
	IF _err = 0
	THEN
		DELETE FROM TBL_NOM_CALCULO_NOMINA_DET
		WHERE ID_Nomina = _ID_Nomina and ID_Empleado = _ID_Empleado;
	
		DELETE FROM TBL_NOM_CALCULO_NOMINA_ESP
		WHERE ID_Nomina = _ID_Nomina and ID_Empleado = _ID_Empleado;
	END IF;

	RETURN QUERY SELECT _err, _result, _id_nomina;

END
$BODY$
  LANGUAGE plpgsql;
  


--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_nom_asistencias AS 
 SELECT com.descripcion AS compania, a.id_fechamovimiento, c.id_empleado, (((c.nombre::text || ' '::text) || c.apellido_paterno::text) || ' '::text) || c.apellido_materno::text AS nombre, 1 AS re, a.entrada, 
        CASE
            WHEN a.salida IS NULL THEN 0
            ELSE 1
        END AS rs, a.salida, a.indicador, 
        CASE
            WHEN a.entrada2 IS NULL THEN 0
            ELSE 1
        END AS re2, a.entrada2, 
        CASE
            WHEN a.salida2 IS NULL THEN 0
            ELSE 1
        END AS rs2, a.salida2, ''::text AS resultado
   FROM tbl_nom_masemp c
   JOIN tbl_nom_asistencias a ON a.id_empleado = c.id_empleado
   JOIN tbl_companias com ON c.id_compania = com.id_compania AND c.id_sucursal = com.id_sucursal;
   
  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_nom_asistencias_client_agregar(_ipc smallint, _id_empleadocompania character varying, _id_fechahora timestamp without time zone)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255); _ID_Registro varchar(255); _ID_Fecha timestamp;
	_ID_Compania smallint; _ID_Sucursal smallint;
BEGIN
	_err := 0;
	_ID_Registro := _ID_EmpleadoCompania || '_' || date_part('day', _ID_FechaHora)::varchar || '/' || date_part('month', _ID_FechaHora)::varchar || '/' || date_part('year', _ID_FechaHora)::varchar || '-' || date_part('hour', _ID_FechaHora)::varchar || ':' || date_part('minute', _ID_FechaHora)::varchar; 

	IF _IPC = 1 -- Por empleado
	THEN
		_result := 'La asistencia se captur√≥ satisfactoriamente';
		
		IF ( select count(*)
					from TBL_NOM_ASISTENCIAS_CHEQUEOS 
					where ID_Empleado = _ID_EmpleadoCompania and ID_FechaHora = _ID_FechaHora ) > 0
		THEN
			_err := 3;
			_result := 'ERROR: Ya existe un registro de este empleado en esta fecha';
		END IF;

		IF _err = 0
		THEN
			INSERT INTO TBL_NOM_ASISTENCIAS_CHEQUEOS
			VALUES(_ID_EmpleadoCompania, _ID_FechaHora);
		END IF;
	
	ELSE -- Por compania
 		_result := 'Las asistencias de todos los empleados de esta compa√±ia se capturaron satisfactoriamente';
		_ID_Compania := (select ID_Compania from TBL_COMPANIAS where Descripcion = _ID_EmpleadoCompania limit 1);		
		_ID_Sucursal := (select ID_Sucursal from TBL_COMPANIAS where Descripcion = _ID_EmpleadoCompania limit 1);		
		
		IF ( select count(*) from TBL_NOM_ASISTENCIAS_CHEQUEOS 
					where ID_FechaHora = _ID_FechaHora and ID_Empleado in 
							( select a.ID_Empleado from TBL_NOM_ASISTENCIAS_CHEQUEOS a inner join TBL_NOM_MASEMP e on
									a.ID_Empleado = e.ID_Empleado
								where a.ID_FechaHora = _ID_FechaHora and 
									e.ID_Compania = _ID_Compania and e.ID_Sucursal = _ID_Sucursal and e.Status = 0 ) ) > 0
		THEN
			_err := 3;
			_result := 'ERROR: Existe por lo menos un registro de un empleado de esta compa√±ia en esta fecha y hora especificos. No se pueden agregar los empleados';
		END IF;
		

		IF _err = 0
		THEN
			INSERT INTO TBL_NOM_ASISTENCIAS_CHEQUEOS
			SELECT ID_Empleado, _ID_FechaHora
			FROM TBL_NOM_MASEMP 
			WHERE ID_Compania = _ID_Compania and ID_Sucursal = _ID_Sucursal and Status = 0;
		END IF;
	END IF;

	RETURN QUERY SELECT _err, _result, _id_registro;

END
$BODY$
  LANGUAGE plpgsql;

  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_nom_asistencias_client_cambiar(_id_empleado character, _id_fechahora timestamp without time zone, _id_fechahoraold timestamp without time zone)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255); _ID_Registro varchar(255);
BEGIN
	_err := 0;
	_ID_Registro := _ID_Empleado || '_' || date_part('day', _ID_FechaHoraOld)::varchar || '/' || date_part('month', _ID_FechaHoraOld)::varchar || '/' || date_part('year', _ID_FechaHoraOld)::varchar || '-' || date_part('hour', _ID_FechaHoraOld)::varchar || ':' || date_part('minute', _ID_FechaHoraOld)::varchar; 
	_result := 'La asistencia se cambi√≥ con √©xito';
	
	IF ( select count(*)
				from TBL_NOM_ASISTENCIAS_CHEQUEOS 
					where ID_Empleado = _ID_Empleado and ID_FechaHora = _ID_FechaHoraOld ) < 1
	THEN
		_err := 3;
		_result := 'ERROR: NO existe un registro de este empleado en esta fecha y hora especifica';
	END IF;

	IF ( select count(*)
					from TBL_NOM_ASISTENCIAS_CHEQUEOS 
					where ID_Empleado = _ID_Empleado and ID_FechaHora = _ID_FechaHora ) > 0
	THEN
		_err := 3;
		_result := 'ERROR: Ya existe un registro de este empleado con fecha a la que se intenta cambiar';
	END IF;
		
	IF _err = 0
	THEN
		UPDATE TBL_NOM_ASISTENCIAS_CHEQUEOS
		SET ID_FechaHora = _ID_FechaHora
		WHERE ID_Empleado = _ID_Empleado and ID_FechaHora = _ID_FechaHoraOld;
	END IF;

	RETURN QUERY SELECT _err, _result, _id_registro;

END
$BODY$
  LANGUAGE plpgsql;

  
  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_nom_asistencias_client_eliminar(_id_empleado character, _id_fechahora timestamp without time zone)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255); _ID_Registro varchar(255);
BEGIN
	_err := 0;
	_ID_Registro := _ID_Empleado || '_' || date_part('day', _ID_FechaHora)::varchar || '/' || date_part('month', _ID_FechaHora)::varchar || '/' || date_part('year', _ID_FechaHora)::varchar || '-' || date_part('hour', _ID_FechaHora)::varchar || ':' || date_part('minute', _ID_FechaHora)::varchar; 
	_result := 'La asistencia se elimin√≥ de la base de datos';
	
	IF ( select count(*)
				from TBL_NOM_ASISTENCIAS_CHEQUEOS 
					where ID_Empleado = _ID_Empleado and ID_FechaHora = _ID_FechaHora ) < 1
	THEN
		_err := 3;
		_result := 'ERROR: NO existe un registro de este empleado en esta fecha y hora especifica, no hay nada que eliminar';
	END IF;

	IF _err = 0
	THEN
		DELETE FROM TBL_NOM_ASISTENCIAS_CHEQUEOS
		WHERE ID_Empleado = _ID_Empleado and ID_FechaHora = _ID_FechaHora;
	END IF;

	RETURN QUERY SELECT _err, _result, _id_registro;

END
$BODY$
  LANGUAGE plpgsql;
  


--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_nom_movimientos_nomina_modulo AS 
 SELECT mn.id_movimiento, mn.tipo_movimiento, 
        CASE
            WHEN mn.tipo_movimiento::text <> 'DIN'::text THEN ( SELECT ms.msj1
               FROM tbl_msj ms
              WHERE ms.alc::text = 'CEF'::text AND ms.mod::text = 'NOMINA'::text AND ms.sub::text = 'CAT_MOVNOM'::text AND ms.elm::text = mn.tipo_movimiento::text)
            ELSE mn.descripcion
        END AS descripcion, mn.deduccion, mn.imss, mn.ispt, mn.dospor, mn.sar, mn.infonavit, mn.ptu, mn.id_sat
   FROM tbl_nom_movimientos_nomina mn;

  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_nom_calculo_nomina_proteger(_id_nomina integer)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255);
BEGIN
	_err := 0;
	
	-- si no existe marcar? error
	IF (select count(*) from TBL_NOM_CALCULO_NOMINA where ID_Nomina = _ID_Nomina ) < 1
	THEN
		_err := 3;
		_result := 'ERROR: El cabecero de n√≥mina que se intenta proteger/desproteger no existe.';
	END IF;
	
	IF _err = 0
	THEN
		
		IF(select Cerrado from TBL_NOM_CALCULO_NOMINA where ID_Nomina = _ID_Nomina) = '1' 
		THEN 	-- Esta protegida, procede a desproteger
			UPDATE TBL_NOM_CALCULO_NOMINA
			SET Cerrado = '0'
			WHERE ID_Nomina = _ID_Nomina;
			_result = 'La n√≥mina ha quedado desprotegida para poder volver a calcularla o moverla directamente';
		ELSE
			UPDATE TBL_NOM_CALCULO_NOMINA
			SET Cerrado = '1'
			WHERE ID_Nomina = _ID_Nomina;
			_result = 'La n√≥mina ha quedado protegida para poder generarla';
		END IF;
		
	END IF;
		
	RETURN QUERY SELECT _err, _result, _id_nomina;

END
$BODY$
  LANGUAGE plpgsql;
  
  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_nom_calculo_nomina_generar(_id_nomina integer)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(4000); _errpart int; _resultpart varchar(255); _numpol int; _bancajmov int; _clase varchar(50);
		_banresult varchar(255); _Tipo smallint; _Numero_Nomina smallint; _Ano smallint; _Fecha timestamp; _Mes smallint; 
					_ID_Sucursal smallint; _ContCuenTipo smallint; _ContCuenClave smallint; _FijaCuenTipo smallint; _FijaCuenClave smallint; 
					_BanTipo smallint; _BanClave smallint; _BanFijo bit; _Concepto varchar(80); _id_clasificacion varchar(10); _Ref varchar(25); 
					_contTotal smallint; _contNum smallint; _contTotalDep smallint; _contNumDep smallint; _contPart smallint; _CC character(19);
	-- segundo declare
	_ID_Movimiento smallint; _ID_Departamento char(4); _Departamento varchar(40); _ID_Cuenta char(19); _Gravado numeric(19,4); _Exento numeric(19,4); _Deduccion numeric(19,4); _TotalBAN numeric(19,4);
	-- contabilidad electronica
	_CE boolean; _CuentaOrigen varchar(50); _BancoOrigen character(3); _REC_RECIBOS RECORD; _UUID character(36); _id_pol integer; _id_poliza integer; _id_part smallint; _id_satMP character(2);
	 --iteracion
	_REC_MOVIMIENTOS RECORD; _REC_DEPARTAMENTO RECORD; _REC_MASEMP RECORD; 
		
BEGIN
	_err := 0;
	_result := 'La n√≥mina ha quedado generada y el pago se ha aplicado correctamente';
	-- Define el tipo de nomina para saber si existe nomina de vales
	_Tipo := (select Tipo from TBL_NOM_CALCULO_NOMINA where ID_Nomina = _ID_Nomina );
	_Numero_Nomina := (select Numero_Nomina from TBL_NOM_CALCULO_NOMINA where ID_Nomina = _ID_Nomina );
	_Ano := (select Ano from TBL_NOM_CALCULO_NOMINA where ID_Nomina = _ID_Nomina );
	_Fecha := (select Fecha_Hasta from TBL_NOM_CALCULO_NOMINA where ID_Nomina = _ID_Nomina );
	_ID_Sucursal := (select ID_Sucursal from TBL_NOM_CALCULO_NOMINA where ID_Nomina = _ID_Nomina );
	_Mes := date_part('month',_Fecha);
	_Ano := date_part('year',_Fecha);
	_id_clasificacion := (select ID_Clasificacion from TBL_COMPANIAS where ID_Compania = 0 and ID_Sucursal = _ID_Sucursal);
	_Concepto := 'Pago n√≥mina ' || (select Descripcion from TBL_COMPANIAS where ID_Compania = 0 and ID_Sucursal = _ID_Sucursal) || ' ' || cast(_Numero_Nomina as varchar) || ' - ' || cast(_Ano as varchar) || ' Tipo ' || cast(_Tipo as varchar);  
	_ContCuenTipo := (select ContCuenTipo from TBL_COMPANIAS where ID_Compania = 0 and ID_Sucursal = _ID_Sucursal);
	_ContCuenClave := (select ContCuenClave from TBL_COMPANIAS where ID_Compania = 0 and ID_Sucursal = _ID_Sucursal);
	_FijaCuenTipo := (select FijaCuenTipo from TBL_COMPANIAS where ID_Compania = 0 and ID_Sucursal = _ID_Sucursal);
	_FijaCuenClave := (select FijaCuenClave from TBL_COMPANIAS where ID_Compania = 0 and ID_Sucursal = _ID_Sucursal);
	
	_Ref := 'NNOM|' || cast(_ID_Nomina as varchar) || '|' || cast(_ID_Sucursal as varchar) || '||';
			
	IF(_Tipo = 3 or _Tipo = 4) -- Significa nomina especial
	THEN
		_CE := false;
		_BanTipo := (select Tipo from TBL_BANCOS_CUENTAS where Tipo = _FijaCuenTipo and Clave = _FijaCuenClave);
		_BanClave := (select Clave from TBL_BANCOS_CUENTAS where Tipo = _FijaCuenTipo and Clave = _FijaCuenClave);
		_BanFijo := (select Fijo from TBL_BANCOS_CUENTAS where Tipo = _FijaCuenTipo and Clave = _FijaCuenClave);
		_CC := (select CC from TBL_BANCOS_CUENTAS where Tipo = _FijaCuenTipo and Clave = _FijaCuenClave);
		
		IF _BanFijo = '0' -- el banco o caja no es fijo, sino contable... Error porque intentamos pagar nomina especial
		THEN
			_err := 3;
			_result := 'ERROR: No se puede pagar una n√≥mina especial con banco o cajas contables'; 
		END IF;
	ELSE
		_CE := true;
		_BanTipo := (select Tipo from TBL_BANCOS_CUENTAS where Tipo = _ContCuenTipo and Clave = _ContCuenClave);
		_BanClave := (select Clave from TBL_BANCOS_CUENTAS where Tipo = _ContCuenTipo and Clave = _ContCuenClave);
		_BanFijo := (select Fijo from TBL_BANCOS_CUENTAS where Tipo = _ContCuenTipo and Clave = _ContCuenClave);
		_CC := (select CC from TBL_BANCOS_CUENTAS where Tipo = _ContCuenTipo and Clave = _ContCuenClave); -- la cuenta contable del banco
		
		IF _BanFijo = '1' -- el banco o caja no es contable sino fija... Error porque intentamos pagar nomina NO  especial
		THEN
			_err := 3;
			_result := 'ERROR: No se puede pagar una n√≥mina contable con banco o cajas fijas'; 
		ELSE
			IF _BanTipo = 0 -- Se paga con bancos
			THEN
				FOR _REC_MASEMP IN ( SELECT ID_Empleado, Cuenta_Bancaria, ID_SatBanco FROM TBL_NOM_MASEMP WHERE ID_Empleado
												IN (SELECT ID_Empleado FROM TBL_NOM_CALCULO_NOMINA_ESP WHERE ID_Nomina = _ID_Nomina) ) 
				LOOP -- por los distintos empleados
					IF _REC_MASEMP.Cuenta_Bancaria = '' OR _REC_MASEMP.ID_SatBanco = '000'
					THEN
						_err := 3;
						_result := 'ERROR: No existe soporte para contabilidad electr√≥nica para las transferencias al empleado. Clave: ' || _REC_MASEMP.ID_Empleado; 
						EXIT;
					END IF; 
				END LOOP;
			END IF; -- No es transferencia, se paga en efectivo
		END IF;
	END IF;

	IF (select count(*) from TBL_NOM_CALCULO_NOMINA where ID_Nomina = _ID_Nomina) < 1 -- Si no existe la nomina revisa:
	THEN
		_err := 3;
		_result := 'ERROR: Esta n√≥mina no existe. No se puede generar'; 
	END IF;
	
	IF(select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano and Cerrado = 1) > 0
		OR (select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano) < 1
	THEN
		_err := 3;
		_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_POLIZAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'ERROR: La fecha de poliza pertenece a un periodo cerrado o inexistente'
	END IF;

	IF(_BanTipo is null or _BanClave is null)
	THEN
		_err := 3;
		_result := 'ERROR: No se han enlazado bancos o cajas para generar este tipo de n√≥mina.'; 
	ELSIF (select ID_Moneda from TBL_BANCOS_CUENTAS where Tipo = _BanTipo and Clave = _BanClave) <> 1
	THEN
		_err := 3;
		_result := 'ERROR: El banco o caja enlazado tiene una moneda extranjera. No se puede generar la n√≥mina'; 
	END IF;

	IF _err = 0
	THEN
		CREATE LOCAL TEMPORARY TABLE _TMP_CONT_POLIZAS_DETALLE2 (
			Part smallint NOT NULL ,
			Cuenta char(19) NOT NULL ,
			Concepto varchar(80) NOT NULL ,
			Parcial numeric(19,4) NOT NULL ,
			Moneda smallint NOT NULL ,
			TC numeric(19,4) NOT NULL ,
			Debe numeric(19,4) NOT NULL ,
			Haber numeric(19,4) NOT NULL 
		);

		_contPart := 0;
		
		FOR _REC_MOVIMIENTOS IN ( SELECT DISTINCT ID_Movimiento FROM TBL_NOM_CALCULO_NOMINA_DET	WHERE ID_Nomina = _ID_Nomina ) 
		LOOP -- por los distintos movimientos en esta n√≥mina
			_ID_Movimiento := _REC_MOVIMIENTOS.ID_Movimiento;
			
			FOR _REC_DEPARTAMENTO IN ( 	SELECT DISTINCT ID_Departamento 
											FROM TBL_NOM_MASEMP
											WHERE ID_Empleado IN      ( 	SELECT DISTINCT ID_Empleado 
																		FROM TBL_NOM_CALCULO_NOMINA_DET
																		WHERE ID_Nomina = _ID_Nomina and ID_Movimiento = _ID_Movimiento  )		) 
			LOOP --por los distintos departamentos
				_ID_Departamento := _REC_DEPARTAMENTO.ID_Departamento;
				_ID_Cuenta := (	select Cuenta from TBL_NOM_MOVIMIENTOS_NOMINA_DET where ID_Movimiento = _ID_Movimiento and ID_Departamento = _ID_Departamento );
				_Departamento := (  select Nombre from TBL_NOM_DEPARTAMENTOS where ID_Departamento = _ID_Departamento );
				IF(_ID_Cuenta is null)
				THEN
					_err := 3;
					_result := 'ERROR: No est√°n enlazadas todas las cuentas contables a los departamentos del movimiento ' || cast(_ID_Movimiento as varchar) || '. No se puede Generar<BR>Debes enlazar primero las cuentas a los departamentos en el cat√°logo de movimientos';
					EXIT;
				END IF;
				-- Asigna cantidades de la nomina
				_contPart := _contPart + 1;				
				_Gravado := ( 	select sum(n.Gravado) from TBL_NOM_CALCULO_NOMINA_DET n inner join TBL_NOM_MASEMP m on n.ID_Empleado = m.ID_Empleado
													where n.ID_Nomina = _ID_Nomina and n.ID_Movimiento = _ID_Movimiento and m.ID_Departamento = _ID_Departamento );
				_Exento = ( 	select sum(n.Exento) from TBL_NOM_CALCULO_NOMINA_DET n inner join TBL_NOM_MASEMP m on n.ID_Empleado = m.ID_Empleado
													where n.ID_Nomina = _ID_Nomina and n.ID_Movimiento = _ID_Movimiento and m.ID_Departamento = _ID_Departamento );
				_Deduccion = ( 	select sum(n.Deduccion) from TBL_NOM_CALCULO_NOMINA_DET n inner join TBL_NOM_MASEMP m on n.ID_Empleado = m.ID_Empleado
													where n.ID_Nomina = _ID_Nomina and n.ID_Movimiento = _ID_Movimiento and m.ID_Departamento = _ID_Departamento );
				-- Aqui va agregando la poliza
				INSERT INTO _TMP_CONT_POLIZAS_DETALLE2
				VALUES(_contPart, _ID_Cuenta, _Departamento, _Gravado + _Exento - _Deduccion, 1, 1.0, _Gravado + _Exento, -_Deduccion);
				
			END LOOP; --For empleados

			IF _err > 0
			THEN
				EXIT;
			END IF;	
			
		END LOOP; --For movimientos

		_TotalBAN := ( select SUM(Debe) - SUM(Haber) from _TMP_CONT_POLIZAS_DETALLE2 );
		--RAISE NOTICE 'TOTAL DEBE: %',  ( select SUM(Debe)  from _TMP_CONT_POLIZAS_DETALLE2 );
		--RAISE NOTICE 'TOTAL HABER: %',  ( select SUM(Haber)  from _TMP_CONT_POLIZAS_DETALLE2 );
		if _err = 0
		then
			if _TotalBAN is null or _TotalBAN <= 0.0
			then 
				_err = 3;
				_result := 'ERROR: Al parecer esta n√≥mina no contiene ningun recibo o el total del pago de la n√≥mina es un importe de cero o un importe negativo. No se puede generar el pago de esta n√≥mina'; 
			end if;
		end if; 
		  
		IF _err = 0 and _CE = false
		THEN
			-- Agrega ahora el movimiento a la caja o banco fijo
			CREATE LOCAL TEMPORARY TABLE _TMP_BANCOS_MOVIMIENTOS_DETALLE (
				Part serial NOT NULL ,
				Cuenta char(19) NOT NULL ,
				Concepto varchar(80) NOT NULL ,
				Parcial numeric(19,4) NOT NULL ,
				Moneda smallint NOT NULL ,
				TC numeric(19,4) NOT NULL ,
				Cantidad numeric(19,4) NOT NULL
			);

			--Agrega los movimientos a la tabla temporal
			INSERT INTO _TMP_BANCOS_MOVIMIENTOS_DETALLE(Cuenta, Concepto, Parcial, Moneda, TC, Cantidad)
			SELECT Cuenta, Concepto, SUM(Parcial), Moneda, TC, SUM(Debe) - SUM(Haber)
			FROM _TMP_CONT_POLIZAS_DETALLE2
			GROUP BY Cuenta, Concepto, Moneda, TC;

		    --SELECT * INTO _errpart, _resultpart, _bancajmov FROM  sp_bancos_movs_agregar( _BanCaj, _ID_BanCaj, _Fecha, _Obs, _Beneficiario, 0.00, _TotalBAN, _tipomov, 'T', _IdMon, _tcCXP, _Ref, _Doc, _id_clasificacion, null, _ID_SatBanco, _RFC, _ID_SatMetodosPago, _BancoExt, _CuentaBanco, _Cheque) as ( err integer, res varchar, clave integer);
			SELECT * INTO _errpart, _banresult, _bancajmov FROM  sp_bancos_movs_agregar( _BanTipo, _BanClave, _Fecha, _Concepto, '', 0.00, _TotalBAN, 'RET', 'T', '1', 1.0, _Ref, '', _id_clasificacion, null, '000', '', '99','','','' ) as ( err integer, res varchar, clave integer);
			IF _errpart <> 0
			THEN
				_err := 3;
				_result := _banresult;
			ELSE
				UPDATE  TBL_NOM_CALCULO_NOMINA
				SET Status = 'P', FormaPago = (case when _BanTipo = 0 then 'B' else 'C' end), 
							ID_Mov = _bancajmov
				WHERE ID_Nomina = _ID_Nomina;
			END IF;

			-- Fin del movimiento bancario	
			DROP TABLE _TMP_BANCOS_MOVIMIENTOS_DETALLE;
						
		ELSIF _err = 0 and _CE = true
		THEN
			_CuentaOrigen := (select Descripcion from TBL_BANCOS_CUENTAS  where Tipo = _BanTipo and Clave = _BanClave);
			_BancoOrigen := (select ID_SatBanco from TBL_BANCOS_CUENTAS  where Tipo = _BanTipo and Clave = _BanClave);
				
			CREATE LOCAL TEMPORARY TABLE _TMP_CONT_POLIZAS_DETALLE (
				Part serial NOT NULL ,
				Cuenta char(19) NOT NULL ,
				Concepto varchar(80) NOT NULL ,
				Parcial numeric(19,4) NOT NULL ,
				Moneda smallint NOT NULL ,
				TC numeric(19,4) NOT NULL ,
				Debe numeric(19,4) NOT NULL ,
				Haber numeric(19,4) NOT NULL
			);
			CREATE LOCAL TEMPORARY TABLE _TMP_CONT_POLIZAS_DETALLE_CE_TRANSFERENCIAS ( 
				id_part smallint NOT NULL,
				ctaori character varying(50) NOT NULL,
				bancoori character(3) NOT NULL,
				monto numeric(19,4) NOT NULL,
				ctadest character varying(50) NOT NULL,
				bancodest character(3) NOT NULL,
				fecha timestamp without time zone NOT NULL,
				benef character varying(300) NOT NULL,
				rfc character varying(13) NOT NULL,
				bancooriext character varying(150) NOT NULL,
				bancodestext character varying(150) NOT NULL,
				moneda character(3) NOT NULL,
				tipcamb numeric(19,5) NOT NULL
			);
			CREATE LOCAL TEMPORARY TABLE _TMP_CONT_POLIZAS_DETALLE_CE_OTRMETODOPAGO (
				id_part smallint NOT NULL,
				metpagopol character(2) NOT NULL,
				fecha timestamp without time zone NOT NULL,
				benef character varying(300) NOT NULL,
				rfc character varying(13) NOT NULL,
				monto numeric(19,4) NOT NULL,
				moneda character(3) NOT NULL,
				tipcamb numeric(19,5) NOT NULL
			);

			INSERT INTO _TMP_CONT_POLIZAS_DETALLE( Cuenta, Concepto, Parcial, Moneda, TC, Debe, Haber )
			SELECT Cuenta, Concepto, SUM(Parcial), Moneda, TC, SUM(Debe), SUM(Haber)
			FROM _TMP_CONT_POLIZAS_DETALLE2
			GROUP BY Cuenta, Concepto, Moneda, TC;
			
			INSERT INTO _TMP_CONT_POLIZAS_DETALLE
			VALUES(default, _CC, _Concepto, _TotalBan, '1', '1.0', 0.0, _TotalBan)
			RETURNING currval(pg_get_serial_sequence('_TMP_CONT_POLIZAS_DETALLE', 'part')) INTO _contPart;

			FOR _REC_RECIBOS IN ( 	select esp.ID_Nomina, esp.Recibo, esp.ID_Empleado, e.Nombre || ' ' || e.Apellido_Paterno || ' ' || e.Apellido_Materno as Nombre, e.Cuenta_Bancaria, e.ID_SatBanco, 
										e.RFC_Letras || e.RFC_Fecha || e.RFC_Homoclave as RFC, esp.Gravado + esp.Exento + esp.Deduccion as Neto 
									from tbl_nom_calculo_nomina_esp esp inner join tbl_nom_masemp e on esp.ID_Empleado = e.ID_Empleado
									where esp.ID_Nomina = _ID_Nomina ) 
			LOOP -- por los distintos recibos
				raise notice 'ID_Empleado: % Neto: %', _REC_RECIBOS.ID_Empleado, _REC_RECIBOS.Neto;
				IF _BanTipo = '0' --Se paga con entidad bancaria
				THEN
					_id_satMP = '03';
					INSERT INTO _TMP_CONT_POLIZAS_DETALLE_CE_TRANSFERENCIAS
					VALUES(_contPart, _CuentaOrigen, _BancoOrigen, _REC_RECIBOS.Neto, _REC_RECIBOS.Cuenta_Bancaria, _REC_RECIBOS.ID_SatBanco, _Fecha, _REC_RECIBOS.Nombre, _REC_RECIBOS.RFC,'','','MXN',1.0);
				ELSE
					_id_satMP = '01';
					INSERT INTO _TMP_CONT_POLIZAS_DETALLE_CE_OTRMETODOPAGO
					VALUES(_contPart, '01', _Fecha, _REC_RECIBOS.Nombre, _REC_RECIBOS.RFC, _REC_RECIBOS.Neto, 'MXN', 1.0);
				END IF;
			END LOOP;

			-- Agrega ahora la poliza principal
			SELECT * INTO _errpart, _resultpart, _numpol 
			FROM sp_cont_polizas_agregar('EG', _Fecha, _Concepto,'0', '', _TotalBan, _id_clasificacion ) as ( err integer, res varchar, clave integer );
      			IF _errpart <> 0
			THEN
				_err := _errpart;
				_result := _resultpart;
			ELSE -- Genera el movimiento bancario
			   --SELECT * INTO _errpart, _resultpart, _bancajmov FROM  sp_bancos_movs_agregar( _BanCaj, _ID_BanCaj, _Fecha, _Obs, _Beneficiario, 0.00, _TotalBAN, _tipomov, 'T', _IdMon, _tcCXP, _Ref, _Doc, _id_clasificacion, null, _ID_SatBanco, _RFC, _ID_SatMetodosPago, _BancoExt, _CuentaBanco, _Cheque) as ( err integer, res varchar, clave integer);
				SELECT * INTO _errpart, _banresult, _bancajmov FROM  sp_bancos_movs_agregar( _BanTipo, _BanClave, _Fecha, _Concepto, '', 0.00, _TotalBAN, 'RET', 'T', '1', 1.0, _Ref, '', _id_clasificacion, _numpol, '000', '',_id_satMP,'','','' ) as ( err integer, res varchar, clave integer);
				IF _errpart <> 0
				THEN
					_err := 3;
					_result := _banresult;
				ELSE
					IF _BanTipo = 0
					THEN
						_clase := 'MBAN|' || cast(_bancajmov as varchar) || '|' || cast(_BanClave as varchar) || '||;';
					ELSE
						_clase := 'MCAJ|' || cast(_bancajmov as varchar) || '|' || cast(_BanClave as varchar) || '||;';
					END IF;

					UPDATE  TBL_NOM_CALCULO_NOMINA
					SET Status = 'P', FormaPago = (case when _BanTipo = 0 then 'B' else 'C' end), 
							ID_Mov = _bancajmov
					WHERE ID_Nomina = _ID_Nomina;

					UPDATE TBL_CONT_POLIZAS
					SET Ref = _clase
					WHERE ID = _numpol;
				END IF;
			END IF;			
					
			DROP TABLE _TMP_CONT_POLIZAS_DETALLE;
			DROP TABLE _TMP_CONT_POLIZAS_DETALLE_CE_TRANSFERENCIAS;
			DROP TABLE _TMP_CONT_POLIZAS_DETALLE_CE_OTRMETODOPAGO;
		END IF;
		
		DROP TABLE _TMP_CONT_POLIZAS_DETALLE2;

		--Ahora genera contabilidad electronica de los recibos que tienen CFDI externos enlazados
		IF(_err = 0 and _Tipo <> 3 and _Tipo <> 4) -- Significa nominaque no es especial
		THEN
			_id_pol := (select id_mov from tbl_nom_calculo_nomina where id_nomina = _id_nomina ); --Extrae el movimiento bancario
			_id_poliza := (select pol_id from tbl_bancos_movimientos where id = _id_pol); --Extrae la poliza del movimiento
			IF _id_poliza IS NOT NULL
			THEN
				_id_part := (select Part from TBL_CONT_POLIZAS_DETALLE where ID = _id_poliza and Cuenta = _cc limit 1);
			END IF;
			--Ahora enlaza a la contabilidad electr√≥nica
			IF _id_poliza IS NOT NULL and _id_part IS NOT NULL
			THEN
				--Si existe la partida ingresa registro de comprobante ....
				FOR _REC_RECIBOS IN ( 	select esp.ID_Nomina, esp.ID_Empleado, esp.ID_CFD, esp.TFD, e.RFC_Letras || e.RFC_Fecha || e.RFC_Homoclave as RFC, esp.Gravado + esp.Exento + esp.Deduccion as Total
										from tbl_nom_calculo_nomina_esp esp inner join tbl_nom_masemp e on esp.ID_Empleado = e.ID_Empleado
										where esp.ID_Nomina = _ID_Nomina ) 
				LOOP -- por los distintos recibos
					--raise notice 'CFD % TFD %', _REC_RECIBOS.ID_CFD, _REC_RECIBOS.TFD;
					IF _REC_RECIBOS.TFD = 3
					THEN
						_UUID := (SELECT UUID FROM TBL_CFDNOM WHERE ID_CFD = _REC_RECIBOS.ID_CFD LIMIT 1);
						--raise notice 'UUID %', (SELECT UUID FROM TBL_CFDNOM WHERE ID_CFD = _REC_RECIBOS.ID_CFD LIMIT 1);
						INSERT INTO TBL_CONT_POLIZAS_DETALLE_CE_COMPROBANTES
						VALUES(default, _id_poliza, _id_part, _uuid, _REC_RECIBOS.Total, _REC_RECIBOS.RFC);
					END IF;
				END LOOP;
				
				
			END IF;
		
		END IF;
	
	END IF;
	
	RETURN QUERY SELECT _err, _result, _id_nomina;

END
$BODY$
  LANGUAGE plpgsql;
--ALTER FUNCTION sp_nom_calculo_nomina_generar(integer)


--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_cfd_nomina_recibos_cab_generar AS 
 SELECT ve.id_sucursal, ve.descripcion, ve.cfd, ''::character varying AS cfd_serie, 0 AS cfd_folio, 0 AS cfd_folioini, 0 AS cfd_foliofin, 0 AS cfd_noaprobacion, 2000 AS cfd_anoaprobacion, ve.cfd_nocertificado, 
        CASE
            WHEN ve.cfd_nocertificado::text <> ''::text THEN ( SELECT tbl_cfd_certificados.cfd_archivocertificado
               FROM tbl_cfd_certificados
              WHERE tbl_cfd_certificados.cfd_nocertificado::text = ve.cfd_nocertificado::text)
            ELSE ''::character varying
        END AS cfd_archivocertificado, 
        CASE
            WHEN ve.cfd_nocertificado::text <> ''::text THEN (( SELECT tbl_cfd_certificados.cfd_caducidadcertificado
               FROM tbl_cfd_certificados
              WHERE tbl_cfd_certificados.cfd_nocertificado::text = ve.cfd_nocertificado::text))::timestamp with time zone
            ELSE now()
        END AS cfd_caducidadcertificado, 
        CASE
            WHEN ve.cfd_nocertificado::text <> ''::text THEN ( SELECT tbl_cfd_certificados.cfd_archivollave
               FROM tbl_cfd_certificados
              WHERE tbl_cfd_certificados.cfd_nocertificado::text = ve.cfd_nocertificado::text)
            ELSE ''::character varying
        END AS cfd_archivollave, 
        CASE
            WHEN ve.cfd_nocertificado::text <> ''::text THEN ( SELECT tbl_cfd_certificados.cfd_clavellave
               FROM tbl_cfd_certificados
              WHERE tbl_cfd_certificados.cfd_nocertificado::text = ve.cfd_nocertificado::text)
            ELSE ''::character varying
        END AS cfd_clavellave, ve.cfd_id_expedicion, 
        CASE
            WHEN ve.cfd_id_expedicion <> 0 THEN ( SELECT tbl_cfd_expediciones.cfd_calle
               FROM tbl_cfd_expediciones
              WHERE tbl_cfd_expediciones.cfd_id_expedicion = ve.cfd_id_expedicion)
            ELSE ''::character varying
        END AS cfd_calle, 
        CASE
            WHEN ve.cfd_id_expedicion <> 0 THEN ( SELECT tbl_cfd_expediciones.cfd_noext
               FROM tbl_cfd_expediciones
              WHERE tbl_cfd_expediciones.cfd_id_expedicion = ve.cfd_id_expedicion)
            ELSE ''::character varying
        END AS cfd_noext, 
        CASE
            WHEN ve.cfd_id_expedicion <> 0 THEN ( SELECT tbl_cfd_expediciones.cfd_noint
               FROM tbl_cfd_expediciones
              WHERE tbl_cfd_expediciones.cfd_id_expedicion = ve.cfd_id_expedicion)
            ELSE ''::character varying
        END AS cfd_noint, 
        CASE
            WHEN ve.cfd_id_expedicion <> 0 THEN ( SELECT tbl_cfd_expediciones.cfd_colonia
               FROM tbl_cfd_expediciones
              WHERE tbl_cfd_expediciones.cfd_id_expedicion = ve.cfd_id_expedicion)
            ELSE ''::character varying
        END AS cfd_colonia, 
        CASE
            WHEN ve.cfd_id_expedicion <> 0 THEN ( SELECT tbl_cfd_expediciones.cfd_localidad
               FROM tbl_cfd_expediciones
              WHERE tbl_cfd_expediciones.cfd_id_expedicion = ve.cfd_id_expedicion)
            ELSE ''::character varying
        END AS cfd_localidad, 
        CASE
            WHEN ve.cfd_id_expedicion <> 0 THEN ( SELECT tbl_cfd_expediciones.cfd_municipio
               FROM tbl_cfd_expediciones
              WHERE tbl_cfd_expediciones.cfd_id_expedicion = ve.cfd_id_expedicion)
            ELSE ''::character varying
        END AS cfd_municipio, 
        CASE
            WHEN ve.cfd_id_expedicion <> 0 THEN ( SELECT tbl_cfd_expediciones.cfd_estado
               FROM tbl_cfd_expediciones
              WHERE tbl_cfd_expediciones.cfd_id_expedicion = ve.cfd_id_expedicion)
            ELSE ''::character varying
        END AS cfd_estado, 
        CASE
            WHEN ve.cfd_id_expedicion <> 0 THEN ( SELECT tbl_cfd_expediciones.cfd_pais
               FROM tbl_cfd_expediciones
              WHERE tbl_cfd_expediciones.cfd_id_expedicion = ve.cfd_id_expedicion)
            ELSE ''::character varying
        END AS cfd_pais, 
        CASE
            WHEN ve.cfd_id_expedicion <> 0 THEN ( SELECT tbl_cfd_expediciones.cfd_cp
               FROM tbl_cfd_expediciones
              WHERE tbl_cfd_expediciones.cfd_id_expedicion = ve.cfd_id_expedicion)
            ELSE ''::character varying
        END AS cfd_cp, fc.id_nomina, fc.numero_nomina AS numero, fc.ano, fc.tipo, fc.fecha_desde, fc.fecha_hasta, fc.dias, fc.cerrado, fc.mes, fc.status, fc.formapago, fc.id_mov, fc.id_pol, 1 AS moneda, 'Pesos'::character varying AS monedasim, 1 AS tc, 0 AS condicion, esp.id_empleado, esp.gravado + esp.exento AS importe, esp.deduccion - esp.isr AS descuento, esp.gravado + esp.exento AS subtotal, esp.isr, esp.gravado + esp.exento + esp.deduccion AS total, (((emp.nombre::text || ' '::text) || emp.apellido_paterno::text) || ' '::text) || emp.apellido_materno::text AS nombre, ((emp.rfc_letras::text || emp.rfc_fecha::text) || emp.rfc_homoclave::text)::character varying AS rfc, emp.calle, emp.numero AS noext, emp.noint, emp.colonia, emp.localidad, emp.delegacion AS municipio, emp.estado, emp.pais, emp.codigo_postal AS cp, 
        CASE
            WHEN emp.cuenta_bancaria::text = ''::text THEN '01'::text
            ELSE '03'::text
        END AS metododepago, 'MXN'::character(3) AS monedasat, emp.curp, emp.regimen AS tiporegimen, emp.num_registro_imss AS numseguridadsocial, esp.dias - esp.faltas AS numdiaspagados, dep.nombre AS departamento, emp.cuenta_bancaria AS clabe, emp.id_satbanco AS banco, emp.fecha_de_ingreso AS fechainiciorellaboral, emp.puesto, 
        CASE
            WHEN ve.periodo = 'sem'::bpchar THEN 'semanal'::text
            WHEN ve.periodo = 'qui'::bpchar THEN 'quincenal'::text
            ELSE 'mensual'::text
        END AS periodicidadpago, esp.gravado AS totalgravado, esp.exento AS totalexento, esp.deduccion AS totaldeducciones, esp.deduccion AS totaldedgravadas, 0.0 AS totaldedexentas, esp.he AS horasextras, esp.ht AS horastriples, esp.hd AS horasdomingo, esp.ixa, esp.ixe, esp.ixm, esp.diashorasextras
   FROM tbl_nom_calculo_nomina fc
   JOIN tbl_companias ve ON fc.id_compania = ve.id_compania AND fc.id_sucursal = ve.id_sucursal
   JOIN tbl_nom_calculo_nomina_esp esp ON fc.id_nomina = esp.id_nomina
   JOIN tbl_nom_masemp emp ON esp.id_empleado = emp.id_empleado
   JOIN tbl_nom_departamentos dep ON emp.id_departamento = dep.id_departamento;

--ALTER TABLE view_cfd_nomina_recibos_cab_generar

--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_nomina_recibos_impcab AS 
 SELECT ve.id_sucursal, ve.descripcion, 
        CASE
            WHEN esp.id_cfd IS NOT NULL AND esp.id_cfd <> 0 THEN ( SELECT tbl_cfd.serie
               FROM tbl_cfd
              WHERE tbl_cfd.id_cfd = esp.id_cfd)
            ELSE ''::character varying
        END AS cfd_serie, 
        CASE
            WHEN esp.id_cfd IS NOT NULL AND esp.id_cfd <> 0 THEN ( SELECT tbl_cfd.folio
               FROM tbl_cfd
              WHERE tbl_cfd.id_cfd = esp.id_cfd)
            ELSE 0
        END AS cfd_folio, 
        CASE
            WHEN esp.id_cfd IS NOT NULL AND esp.id_cfd <> 0 THEN ( SELECT tbl_cfd.noaprobacion
               FROM tbl_cfd
              WHERE tbl_cfd.id_cfd = esp.id_cfd)
            ELSE 0
        END AS cfd_noaprobacion, 
        CASE
            WHEN esp.id_cfd IS NOT NULL AND esp.id_cfd <> 0 THEN (( SELECT tbl_cfd.anoaprobacion
               FROM tbl_cfd
              WHERE tbl_cfd.id_cfd = esp.id_cfd))::integer
            ELSE 0
        END AS cfd_anoaprobacion, 
        CASE
            WHEN esp.id_cfd IS NOT NULL AND esp.id_cfd <> 0 THEN ( SELECT tbl_cfd.nocertificado
               FROM tbl_cfd
              WHERE tbl_cfd.id_cfd = esp.id_cfd)
            ELSE ''::character varying
        END AS cfd_nocertificado, 
        CASE
            WHEN esp.id_cfd IS NOT NULL AND esp.id_cfd <> 0 THEN (( SELECT tbl_cfd.fecha
               FROM tbl_cfd
              WHERE tbl_cfd.id_cfd = esp.id_cfd))::timestamp with time zone
            ELSE now()
        END AS cfd_fecha, 
        CASE
            WHEN esp.id_cfd IS NOT NULL AND esp.id_cfd <> 0 THEN ( SELECT tbl_cfd.cadenaoriginal
               FROM tbl_cfd
              WHERE tbl_cfd.id_cfd = esp.id_cfd)
            ELSE ''::character varying
        END AS cfd_cadenaoriginal, 
        CASE
            WHEN esp.id_cfd IS NOT NULL AND esp.id_cfd <> 0 THEN ( SELECT tbl_cfd.sello
               FROM tbl_cfd
              WHERE tbl_cfd.id_cfd = esp.id_cfd)
            ELSE ''::character varying
        END AS cfd_sello, 
        CASE
            WHEN esp.id_cfd IS NOT NULL AND esp.id_cfd <> 0 THEN ( SELECT tbl_cfd.lugarexpedicion
               FROM tbl_cfd
              WHERE tbl_cfd.id_cfd = esp.id_cfd)
            ELSE ''::character varying
        END AS cfd_lugarexpedicion, 
        CASE
            WHEN esp.id_cfd IS NOT NULL AND esp.id_cfd <> 0 THEN ( SELECT tbl_cfd.metododepago
               FROM tbl_cfd
              WHERE tbl_cfd.id_cfd = esp.id_cfd)
            ELSE ''::character varying
        END AS cfd_metododepago, 
        CASE
            WHEN ve.cfd_id_expedicion <> 0 THEN ( SELECT tbl_cfd_expediciones.cfd_nombre
               FROM tbl_cfd_expediciones
              WHERE tbl_cfd_expediciones.cfd_id_expedicion = ve.cfd_id_expedicion)
            ELSE ''::character varying
        END AS cfd_nombre, 
        CASE
            WHEN ve.cfd_id_expedicion <> 0 THEN ( SELECT tbl_cfd_expediciones.cfd_calle
               FROM tbl_cfd_expediciones
              WHERE tbl_cfd_expediciones.cfd_id_expedicion = ve.cfd_id_expedicion)
            ELSE ''::character varying
        END AS cfd_calle, 
        CASE
            WHEN ve.cfd_id_expedicion <> 0 THEN ( SELECT tbl_cfd_expediciones.cfd_noext
               FROM tbl_cfd_expediciones
              WHERE tbl_cfd_expediciones.cfd_id_expedicion = ve.cfd_id_expedicion)
            ELSE ''::character varying
        END AS cfd_noext, 
        CASE
            WHEN ve.cfd_id_expedicion <> 0 THEN ( SELECT tbl_cfd_expediciones.cfd_noint
               FROM tbl_cfd_expediciones
              WHERE tbl_cfd_expediciones.cfd_id_expedicion = ve.cfd_id_expedicion)
            ELSE ''::character varying
        END AS cfd_noint, 
        CASE
            WHEN ve.cfd_id_expedicion <> 0 THEN ( SELECT tbl_cfd_expediciones.cfd_colonia
               FROM tbl_cfd_expediciones
              WHERE tbl_cfd_expediciones.cfd_id_expedicion = ve.cfd_id_expedicion)
            ELSE ''::character varying
        END AS cfd_colonia, 
        CASE
            WHEN ve.cfd_id_expedicion <> 0 THEN ( SELECT tbl_cfd_expediciones.cfd_localidad
               FROM tbl_cfd_expediciones
              WHERE tbl_cfd_expediciones.cfd_id_expedicion = ve.cfd_id_expedicion)
            ELSE ''::character varying
        END AS cfd_localidad, 
        CASE
            WHEN ve.cfd_id_expedicion <> 0 THEN ( SELECT tbl_cfd_expediciones.cfd_municipio
               FROM tbl_cfd_expediciones
              WHERE tbl_cfd_expediciones.cfd_id_expedicion = ve.cfd_id_expedicion)
            ELSE ''::character varying
        END AS cfd_municipio, 
        CASE
            WHEN ve.cfd_id_expedicion <> 0 THEN 
            CASE
                WHEN (( SELECT tbl_sat_estados.nombre
                   FROM tbl_sat_estados
                  WHERE tbl_sat_estados.codestado::text = ((( SELECT tbl_cfd_expediciones.cfd_estado
                           FROM tbl_cfd_expediciones
                          WHERE tbl_cfd_expediciones.cfd_id_expedicion = ve.cfd_id_expedicion))::text) AND tbl_sat_estados.codpais3 = ((( SELECT tbl_cfd_expediciones.cfd_pais
                           FROM tbl_cfd_expediciones
                          WHERE tbl_cfd_expediciones.cfd_id_expedicion = ve.cfd_id_expedicion))::bpchar))) IS NULL THEN ( SELECT tbl_cfd_expediciones.cfd_estado
                   FROM tbl_cfd_expediciones
                  WHERE tbl_cfd_expediciones.cfd_id_expedicion = ve.cfd_id_expedicion)
                ELSE ( SELECT tbl_sat_estados.nombre
                   FROM tbl_sat_estados
                  WHERE tbl_sat_estados.codestado::text = ((( SELECT tbl_cfd_expediciones.cfd_estado
                           FROM tbl_cfd_expediciones
                          WHERE tbl_cfd_expediciones.cfd_id_expedicion = ve.cfd_id_expedicion))::text) AND tbl_sat_estados.codpais3 = ((( SELECT tbl_cfd_expediciones.cfd_pais
                           FROM tbl_cfd_expediciones
                          WHERE tbl_cfd_expediciones.cfd_id_expedicion = ve.cfd_id_expedicion))::bpchar))
            END
            ELSE ''::character varying
        END AS cfd_estado, 
        CASE
            WHEN ve.cfd_id_expedicion <> 0 THEN 
            CASE
                WHEN (( SELECT tbl_sat_paises.nombre
                   FROM tbl_sat_paises
                  WHERE tbl_sat_paises.alfa3 = ((( SELECT tbl_cfd_expediciones.cfd_pais
                           FROM tbl_cfd_expediciones
                          WHERE tbl_cfd_expediciones.cfd_id_expedicion = ve.cfd_id_expedicion))::bpchar))) IS NULL THEN ( SELECT tbl_cfd_expediciones.cfd_pais
                   FROM tbl_cfd_expediciones
                  WHERE tbl_cfd_expediciones.cfd_id_expedicion = ve.cfd_id_expedicion)
                ELSE ( SELECT tbl_sat_paises.nombre
                   FROM tbl_sat_paises
                  WHERE tbl_sat_paises.alfa3 = ((( SELECT tbl_cfd_expediciones.cfd_pais
                           FROM tbl_cfd_expediciones
                          WHERE tbl_cfd_expediciones.cfd_id_expedicion = ve.cfd_id_expedicion))::bpchar))
            END
            ELSE ''::character varying
        END AS cfd_pais, 
        CASE
            WHEN ve.cfd_id_expedicion <> 0 THEN ( SELECT tbl_cfd_expediciones.cfd_cp
               FROM tbl_cfd_expediciones
              WHERE tbl_cfd_expediciones.cfd_id_expedicion = ve.cfd_id_expedicion)
            ELSE ''::character varying
        END AS cfd_cp, fc.id_nomina, fc.numero_nomina AS numero, fc.ano, fc.tipo, fc.fecha_desde, fc.fecha_hasta, fc.dias, fc.cerrado, fc.mes, fc.status, fc.formapago, fc.id_mov, fc.id_pol, 1 AS moneda, '$'::character varying AS monedasim, 1 AS tc, 0 AS condicion, esp.id_empleado, esp.gravado + esp.exento AS importe, esp.deduccion - esp.isr AS descuento, esp.gravado + esp.exento AS subtotal, esp.isr, esp.gravado + esp.exento + esp.deduccion AS total, (((emp.nombre::text || ' '::text) || emp.apellido_paterno::text) || ' '::text) || emp.apellido_materno::text AS nombre, ((emp.rfc_letras::text || emp.rfc_fecha::text) || emp.rfc_homoclave::text)::character varying AS rfc, emp.calle, emp.numero AS noext, emp.noint, emp.colonia, emp.localidad, emp.delegacion AS municipio, emp.estado, emp.pais, emp.codigo_postal AS cp, 
        CASE
            WHEN emp.cuenta_bancaria::text = ''::text THEN 'efectivo'::text
            ELSE 'transferencia bancaria'::text
        END AS metododepago, emp.curp, emp.regimen AS tiporegimen, emp.num_registro_imss AS numseguridadsocial, esp.dias - esp.faltas AS numdiaspagados, dep.nombre AS departamento, emp.cuenta_bancaria AS clabe, emp.id_satbanco AS banco, emp.fecha_de_ingreso AS fechainiciorellaboral, emp.puesto, 
        CASE
            WHEN ve.periodo = 'sem'::bpchar THEN 'semanal'::text
            WHEN ve.periodo = 'qui'::bpchar THEN 'quincenal'::text
            ELSE 'mensual'::text
        END AS periodicidadpago, esp.gravado AS totalgravado, esp.exento AS totalexento, esp.deduccion AS totaldeducciones, esp.deduccion AS totaldedgravadas, 0.0 AS totaldedexentas, esp.he AS horasextras, esp.ht AS horastriples, esp.hd AS horasdomingo, esp.ixa, esp.ixe, esp.ixm, esp.diashorasextras, 
        CASE
            WHEN esp.tfd IS NOT NULL AND esp.tfd > 1 THEN ( SELECT tbl_tfd.uuid
               FROM tbl_tfd
              WHERE tbl_tfd.id_cfd = esp.id_cfd
              ORDER BY tbl_tfd.fechatimbre DESC
             LIMIT 1)
            ELSE ''::bpchar
        END AS tfd_uuid, 
        CASE
            WHEN esp.tfd IS NOT NULL AND esp.tfd > 1 THEN (( SELECT tbl_tfd.fechatimbre
               FROM tbl_tfd
              WHERE tbl_tfd.id_cfd = esp.id_cfd
              ORDER BY tbl_tfd.fechatimbre DESC
             LIMIT 1))::timestamp with time zone
            ELSE now()
        END AS tfd_fechatimbre, 
        CASE
            WHEN esp.tfd IS NOT NULL AND esp.tfd > 1 THEN ( SELECT tbl_tfd.cadenaoriginal
               FROM tbl_tfd
              WHERE tbl_tfd.id_cfd = esp.id_cfd
              ORDER BY tbl_tfd.fechatimbre DESC
             LIMIT 1)
            ELSE ''::character varying
        END AS tfd_cadenaoriginal, 
        CASE
            WHEN esp.tfd IS NOT NULL AND esp.tfd > 1 THEN ( SELECT tbl_tfd.nocertificadosat
               FROM tbl_tfd
              WHERE tbl_tfd.id_cfd = esp.id_cfd
              ORDER BY tbl_tfd.fechatimbre DESC
             LIMIT 1)
            ELSE ''::character varying
        END AS tfd_nocertificadosat, 
        CASE
            WHEN esp.tfd IS NOT NULL AND esp.tfd > 1 THEN ( SELECT tbl_tfd.sellosat
               FROM tbl_tfd
              WHERE tbl_tfd.id_cfd = esp.id_cfd
              ORDER BY tbl_tfd.fechatimbre DESC
             LIMIT 1)
            ELSE ''::character varying
        END AS tfd_sellosat
   FROM tbl_nom_calculo_nomina fc
   JOIN tbl_companias ve ON fc.id_compania = ve.id_compania AND fc.id_sucursal = ve.id_sucursal
   JOIN tbl_nom_calculo_nomina_esp esp ON fc.id_nomina = esp.id_nomina
   JOIN tbl_nom_masemp emp ON esp.id_empleado = emp.id_empleado
   JOIN tbl_nom_departamentos dep ON emp.id_departamento = dep.id_departamento;

--ALTER TABLE view_nomina_recibos_impcab

--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_nomina_recibos_impdet AS 
 SELECT cn.id_nomina, cnd.id_empleado, cnd.id_movimiento, 
        CASE
            WHEN cm.tipo_movimiento::text <> 'DIN'::text THEN ( SELECT ms.msj1
               FROM tbl_msj ms
              WHERE ms.alc::text = 'CEF'::text AND ms.mod::text = 'NOMINA'::text AND ms.sub::text = 'CAT_MOVNOM'::text AND ms.elm::text = cm.tipo_movimiento::text)
            ELSE cm.descripcion
        END AS descripcion, cnd.gravado, cnd.exento, cnd.gravado + cnd.exento AS percepcion, cnd.deduccion, cnd.gravado + cnd.exento + cnd.deduccion AS total, cm.deduccion AS esdeduccion, cm.tipo_movimiento AS tipo, cm.id_sat
   FROM tbl_nom_calculo_nomina cn
   JOIN tbl_nom_calculo_nomina_det cnd ON cn.id_nomina = cnd.id_nomina
   JOIN tbl_nom_movimientos_nomina cm ON cnd.id_movimiento = cm.id_movimiento;
   


--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_ventas_cotizaciones_modulo AS 
 SELECT rc.id_vc AS id_cotizacion, rc.id_entidad, rc.numero, rc.fecha, rc.referencia, rc.status, rc.moneda, mon.simbolo, rc.tc, rc.mtotal AS total, rc.id_clipro AS id_cliente, 
        CASE
            WHEN rc.id_clipro = 0 THEN 'Cliente de Mostrador'::character varying
            ELSE ( SELECT p.nombre
               FROM tbl_client_client p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'CL'::bpchar)
        END AS cliente, 
        CASE
            WHEN rc.id_factura = 0 THEN 0
            ELSE 
            CASE
                WHEN rc.tipoenlace = 'VFAC'::bpchar THEN ( SELECT tbl_ventas_facturas_cab.numero
                   FROM tbl_ventas_facturas_cab
                  WHERE tbl_ventas_facturas_cab.id_vc = rc.id_factura)
                WHEN rc.tipoenlace = 'VREM'::bpchar THEN ( SELECT tbl_ventas_remisiones_cab.numero
                   FROM tbl_ventas_remisiones_cab
                  WHERE tbl_ventas_remisiones_cab.id_vc = rc.id_factura)
                ELSE ( SELECT tbl_ventas_pedidos_cab.numero
                   FROM tbl_ventas_pedidos_cab
                  WHERE tbl_ventas_pedidos_cab.id_vc = rc.id_factura)
            END
        END AS factura, rc.id_vendedor, v.nombre AS vendedornombre, rc.tipoenlace, rc.id_factura
   FROM tbl_ventas_cotizaciones_cab rc
   JOIN tbl_vendedores v ON rc.id_vendedor = v.id_vendedor
   JOIN tbl_cont_monedas mon ON rc.moneda = mon.clave;



--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_ventas_pedidos_modulo AS 
 SELECT rc.id_vc AS id_pedido, rc.id_entidad, rc.numero, rc.fecha, rc.referencia, rc.status, rc.moneda, mon.simbolo, rc.tc, rc.mtotal AS total, rc.id_clipro AS id_cliente, 
        CASE
            WHEN rc.id_clipro = 0 THEN 'Cliente de Mostrador'::character varying
            ELSE ( SELECT p.nombre
               FROM tbl_client_client p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'CL'::bpchar)
        END AS cliente, 
        CASE
            WHEN rc.ref IS NULL THEN ''::character varying
            ELSE rc.ref
        END AS ref, 
        CASE
            WHEN rc.id_factura = 0 THEN 0
            ELSE 
            CASE
                WHEN rc.tipoenlace = 'VFAC'::bpchar THEN ( SELECT tbl_ventas_facturas_cab.numero
                   FROM tbl_ventas_facturas_cab
                  WHERE tbl_ventas_facturas_cab.id_vc = rc.id_factura)
                ELSE ( SELECT tbl_ventas_remisiones_cab.numero
                   FROM tbl_ventas_remisiones_cab
                  WHERE tbl_ventas_remisiones_cab.id_vc = rc.id_factura)
            END
        END AS factura, rc.id_vendedor, v.nombre AS vendedornombre, rc.tipoenlace, rc.id_factura
   FROM tbl_ventas_pedidos_cab rc
   JOIN tbl_vendedores v ON rc.id_vendedor = v.id_vendedor
   JOIN tbl_cont_monedas mon ON rc.moneda = mon.clave;
   


--@FIN_BLOQUE
CREATE TABLE TBL_TFD_CANCELRESP (
	ID_Cancel serial NOT NULL ,
	UUID char (36) NOT NULL ,
	UUIDResp char (36) NOT NULL ,
	Fecha timestamp NOT NULL ,
	EstatusUUID smallint NOT NULL ,
	RespAck varchar (8000) NOT NULL ,
	CONSTRAINT PK_TBL_TFD_CANCELRESP PRIMARY KEY 
	(
		ID_Cancel
	) 
);


INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('REP');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('REP_REPORTES');



--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_reportes_su AS 
 SELECT 'cef-su'::character varying AS id_usuario, tbl_reports.id_report
   FROM tbl_reports;
 
  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION view_reportes(
    _id_usuario character varying,
    _tipo character varying,
    _entidad character varying)
  RETURNS SETOF record AS
$BODY$ 
DECLARE
	_modulo character varying(30) ;
BEGIN
		
	IF _ID_Usuario = 'cef-su'
	THEN
		IF _Entidad = 'CEF-X' -- Regresa todo el set
		THEN
			IF position( '_' in _tipo ) = 0 THEN _modulo := _tipo || '_%'; ELSE _modulo := _tipo; END IF;
			
			RETURN QUERY
			SELECT _id_usuario as id_usuario, m.id_report, m.description, ms.msj2 as tipo, m.subtipo, m.clave, m.graficar
			FROM tbl_reports m JOIN tbl_msj ms ON 
				ms.alc::text = 'CEF'::text AND ms.mod::text = 'PERMISOS'::text AND ms.sub::text = 'CATALOGO'::text AND ms.elm::text = m.tipo::text
			WHERE m.tipo LIKE _modulo
			ORDER BY m.id_report ASC; 
		ELSE -- _Entidad = 'CEF-1' --Regresa el reporte especificado en _tipo... _tipo contendr√° el id del reporte
			RETURN QUERY 
			SELECT _id_usuario as id_usuario, m.id_report, m.description, ms.msj2 as tipo, m.subtipo, m.clave, m.graficar
			FROM tbl_reports m JOIN tbl_msj ms ON 
				ms.alc::text = 'CEF'::text AND ms.mod::text = 'PERMISOS'::text AND ms.sub::text = 'CATALOGO'::text AND ms.elm::text = m.tipo::text
			WHERE m.id_report = _tipo::smallint;
		END IF;
	ELSE
		IF _Entidad = 'CEF-X' -- Regresa todo el set
		THEN
			IF position( '_' in _tipo ) = 0 THEN _modulo := _tipo || '_%'; ELSE _modulo := _tipo; END IF;
			
			RETURN QUERY 
			SELECT _id_usuario as id_usuario, m.id_report, m.description, ms.msj2 as tipo, m.subtipo, m.clave, m.graficar
			FROM tbl_reports m JOIN tbl_msj ms ON 
				ms.alc::text = 'CEF'::text AND ms.mod::text = 'PERMISOS'::text AND ms.sub::text = 'CATALOGO'::text AND ms.elm::text = m.tipo::text
			JOIN tbl_usuarios_submodulo_reportes u ON m.id_report = u.id_report
			WHERE m.tipo LIKE _modulo AND u.id_usuario = _id_usuario
			ORDER BY m.id_report ASC;
		ELSE -- _Entidad = 'CEF-1' --Especifico
			RETURN QUERY 
			SELECT _id_usuario as id_usuario, m.id_report, m.description, ms.msj2 as tipo, m.subtipo, m.clave, m.graficar
			FROM tbl_reports m JOIN tbl_msj ms ON 
				ms.alc::text = 'CEF'::text AND ms.mod::text = 'PERMISOS'::text AND ms.sub::text = 'CATALOGO'::text AND ms.elm::text = m.tipo::text
			JOIN tbl_usuarios_submodulo_reportes u ON m.id_report = u.id_report
			WHERE m.id_report = _tipo::smallint  AND u.id_usuario = _id_usuario;
		END IF;
	END IF;
END
$BODY$
  LANGUAGE plpgsql;
--ALTER FUNCTION view_reportes(character varying, character varying, character varying)



--@FIN_BLOQUE
CREATE TABLE tbl_reports_filter
(
  id_report smallint NOT NULL,
  id_column smallint NOT NULL,
  instructions character varying(254) NOT NULL,
  isrange bit(1) NOT NULL,
  pridataname character varying(254) NOT NULL,
  pridefault character varying(8000),
  secdataname character varying(254) NOT NULL,
  secdefault character varying(8000),
  binddatatype character varying(50) NOT NULL,
  fromcatalog bit(1) NOT NULL,
  select_clause character varying(8000) NOT NULL,
  CONSTRAINT pk_tbl_reports_filter PRIMARY KEY (id_report , id_column ),
  CONSTRAINT fk_tbl_reports_filter_tbl_reports FOREIGN KEY (id_report)
      REFERENCES tbl_reports (id_report) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT ck_tbl_reports_filter CHECK (binddatatype::text = 'INT'::text OR binddatatype::text = 'STRING'::text OR binddatatype::text = 'BYTE'::text OR binddatatype::text = 'BOOL'::text OR binddatatype::text = 'TIME'::text OR binddatatype::text = 'NUMERIC'::text OR binddatatype::text = 'MONEY'::text)
);
   


--@FIN_BLOQUE
CREATE TABLE tbl_reports_sentences
(
  id_report smallint NOT NULL,
  id_sentence smallint NOT NULL,
  id_iscompute smallint NOT NULL,
  select_clause character varying(8000) NOT NULL,
  tabprintpnt numeric(5,2),
  format character varying(254),
  CONSTRAINT pk_tbl_reports_sentences PRIMARY KEY (id_report , id_sentence , id_iscompute ),
  CONSTRAINT fk_tbl_reports_sentences_tbl_reports FOREIGN KEY (id_report)
      REFERENCES tbl_reports (id_report) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT ck_tbl_reports_sentences CHECK (id_sentence = 1 OR id_sentence = 2 OR id_sentence = 3)
);



--@FIN_BLOQUE
CREATE TABLE tbl_reports_sentences_columns
(
  id_report smallint NOT NULL,
  id_sentence smallint NOT NULL,
  id_iscompute smallint NOT NULL,
  id_column smallint NOT NULL,
  colname character varying(254) NOT NULL,
  binddatatype character varying(50) NOT NULL,
  willshow bit(1) NOT NULL,
  format character varying(254) NOT NULL,
  ancho numeric(5,2) NOT NULL,
  alinhor character varying(20),
  fgcolor character(6),
  CONSTRAINT pk_tbl_reports_sentences_columns PRIMARY KEY (id_report , id_sentence , id_iscompute , id_column ),
  CONSTRAINT fk_tbl_reports_sentences_columns_tbl_reports_sentences FOREIGN KEY (id_report, id_sentence, id_iscompute)
      REFERENCES tbl_reports_sentences (id_report, id_sentence, id_iscompute) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT ck_tbl_reports_sentences_columns CHECK (id_iscompute = 0 OR id_iscompute = 1)
);

--@FIN_BLOQUE
CREATE TABLE tbl_reports_help
(
  id_report smallint NOT NULL,
  help text NOT NULL,
  CONSTRAINT pk_tbl_reports_help PRIMARY KEY (id_report),
  CONSTRAINT fk_tbl_reports_help_tbl_reports FOREIGN KEY (id_report)
      REFERENCES tbl_reports (id_report) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE
);
--ALTER TABLE tbl_reports_help


--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_cfd_canceltimbre(_uuid character, _uuidresp character, _estatusuuid integer, _respack character varying)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255);
BEGIN
	_err := 0;
	_result := 'El Timbre Fiscal Digital se cancelo correctamente';

	IF _err = 0
	THEN
		INSERT INTO TBL_TFD_CANCELRESP
		VALUES(default, _UUID, _UUIDResp, NOW(), _EstatusUUID, _RespAck);
	END IF;

	RETURN QUERY SELECT _err, _result;
	
END
$BODY$
  LANGUAGE plpgsql;
  
  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_cfd_cancelar(_id_cfd integer)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err integer; _result varchar(255); 
BEGIN
	_err := 0;
	_result := 'El comprobante fiscal digital se cancelo correctamente';

	IF _err = 0
	THEN
		UPDATE TBL_CFD
		SET Estatus = 0
		WHERE ID_CFD = _ID_CFD;
	END IF;
	
	RETURN QUERY SELECT _err, _result, _id_cfd;

END
$BODY$
  LANGUAGE plpgsql;
  


--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_cont_balanza_modulo AS 
 SELECT cd.mes, 
    cd.ano, 
    r.tipo, 
    c.cuenta, 
    c.acum AS ac, 
    c.nombre, 
    cd.saldoinicial AS inicial, 
    cd.retiros AS cargos, 
    cd.abonos, 
    cd.saldofinal AS final
   FROM tbl_cont_catalogo c
   JOIN tbl_cont_catalogo_detalle cd ON c.cuenta = cd.cuenta
   JOIN tbl_cont_rubros r ON c.cuenta::text >= "substring"(r.cuentainicial::text, 1, 4) AND c.cuenta::text <= ("substring"(r.cuentafinal::text, 1, 4) || '999999999999999'::text);

--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_cont_balanza_general AS 
 SELECT cd.mes, cd.ano, r.tipo, getlevelaccount(c.cuenta) AS nivel, c.cuenta, c.acum AS ac, c.nombre, cd.retiros AS cargos, cd.abonos, 
        CASE
            WHEN cd.retiros > cd.abonos THEN cd.retiros - cd.abonos
            ELSE 0.0
        END AS deudor, 
        CASE
            WHEN cd.abonos > cd.retiros THEN cd.abonos - cd.retiros
            ELSE 0.0
        END AS acreedor, 
        CASE
            WHEN cd.retiros > cd.abonos AND (r.tipo = 'AC'::bpchar OR r.tipo = 'AF'::bpchar OR r.tipo = 'AD'::bpchar OR r.tipo = 'PC'::bpchar OR r.tipo = 'PL'::bpchar OR r.tipo = 'PD'::bpchar OR r.tipo = 'CC'::bpchar) THEN cd.retiros - cd.abonos
            ELSE 0.0
        END AS activo, 
        CASE
            WHEN cd.abonos > cd.retiros AND (r.tipo = 'AC'::bpchar OR r.tipo = 'AF'::bpchar OR r.tipo = 'AD'::bpchar OR r.tipo = 'PC'::bpchar OR r.tipo = 'PL'::bpchar OR r.tipo = 'PD'::bpchar OR r.tipo = 'CC'::bpchar) THEN cd.abonos - cd.retiros
            ELSE 0.0
        END AS pasivo, 
        CASE
            WHEN cd.retiros > cd.abonos AND (r.tipo = 'RI'::bpchar OR r.tipo = 'RC'::bpchar OR r.tipo = 'RG'::bpchar OR r.tipo = 'RO'::bpchar OR r.tipo = 'IP'::bpchar) THEN cd.retiros - cd.abonos
            ELSE 0.0
        END AS perdida, 
        CASE
            WHEN cd.abonos > cd.retiros AND (r.tipo = 'RI'::bpchar OR r.tipo = 'RC'::bpchar OR r.tipo = 'RG'::bpchar OR r.tipo = 'RO'::bpchar OR r.tipo = 'IP'::bpchar) THEN cd.abonos - cd.retiros
            ELSE 0.0
        END AS ganancia
   FROM tbl_cont_catalogo c
   JOIN tbl_cont_catalogo_detalle cd ON c.cuenta = cd.cuenta
   JOIN tbl_cont_rubros r ON c.cuenta::text >= "substring"(r.cuentainicial::text, 1, 4) AND c.cuenta::text <= ("substring"(r.cuentafinal::text, 1, 4) || '999999999999999'::text);

--ALTER TABLE view_cont_balanza_general
  
--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION rep_bancaj_estadocuenta(
    _acum bit,
    _bancaj smallint,
    _clave smallint,
    _mes smallint,
    _ano smallint,
    _orden bit)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_SaldoIni numeric(19,4); _Depositos numeric(19,4); 
		_Retiros numeric(19,4); _SaldoFin numeric(19,4); _SaldoFinEst numeric(19,4);
BEGIN
	IF _Acum = '0'
	THEN
		if _Orden = '0'
		then
			RETURN QUERY 
			select Num, Fecha, Concepto, Beneficiario, Doc as Ref,  Deposito, Retiro, Saldo
			from TBL_BANCOS_MOVIMIENTOS
			where Tipo = _BanCaj and Clave = _Clave and Estatus <> 'C' and date_part('Month',Fecha) = _Mes and date_part('Year',Fecha) = _Ano
			order by Fecha asc, Num asc;
		else
			RETURN QUERY 
			select Num, Fecha, Concepto, Beneficiario, Doc as Ref,  Deposito, Retiro, Saldo
			from TBL_BANCOS_MOVIMIENTOS
			where Tipo = _BanCaj and Clave = _Clave and Estatus <> 'C' and date_part('Month',Fecha) = _Mes and date_part('Year',Fecha) = _Ano
			order by Fecha desc, Num desc;
		end if;
	ELSE
		_SaldoIni := coalesce( ( 	select SaldoIni
								from TBL_BANCOS_CUENTAS_SALDOS
								where Tipo = _BanCaj and Clave = _Clave and Mes = _Mes and Ano = _Ano), 0);
		_SaldoFin := coalesce( ( 	select SaldoFin
									from TBL_BANCOS_CUENTAS_SALDOS
									where Tipo = _BanCaj and Clave = _Clave and Mes = _Mes and Ano = _Ano), 0);
		_Depositos := ( 	select coalesce(sum(Deposito),0)
						from TBL_BANCOS_MOVIMIENTOS  
						where Tipo = _BanCaj and Clave = _Clave and Estatus <> 'C' and date_part('Month',Fecha) = _Mes and date_part('Year',Fecha) = _Ano );
		_Retiros := ( select coalesce(sum(Retiro),0)
					from TBL_BANCOS_MOVIMIENTOS
					where Tipo = _BanCaj and Clave = _Clave and Estatus <> 'C' and date_part('Month',Fecha) = _Mes and date_part('Year',Fecha) = _Ano );

		RETURN QUERY 
		select 'TOTALES:'::varchar as Totales, _SaldoIni as Inicial, _Depositos as Depositos, 
			 _Retiros as Retiros, _SaldoFin as Saldo;
	END IF;
END
$BODY$
  LANGUAGE plpgsql;
--ALTER FUNCTION rep_bancaj_estadocuenta(bit, smallint, smallint, smallint, smallint, bit)

--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_catalog_bancos AS 
 SELECT c.clave, 
    c.cuenta AS descripcion, 
    c.id_clasificacion AS especial
   FROM tbl_bancos_cuentas c
  WHERE c.tipo = 0;



--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_catalog_cajas AS 
 SELECT c.clave, 
    c.cuenta AS descripcion, 
    c.id_clasificacion AS especial
   FROM tbl_bancos_cuentas c
  WHERE c.tipo = 1;
  
  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION view_usuarios_submodulo_bancos(_id_usuario character varying, _tipo smallint, _entidad smallint)
  RETURNS SETOF record AS
$BODY$  
DECLARE  
	_rolCEF boolean;
BEGIN
	IF _Tipo = 0
	THEN
		IF (select count(*) from tbl_usuarios_submodulo_roles where id_usuario = _id_usuario and id_rol = 'cef-ban') > 0
		THEN
			_rolCEF = true;
		ELSE
			_rolCEF = false;
		END IF;
	ELSE
		IF (select count(*) from tbl_usuarios_submodulo_roles where id_usuario = _id_usuario and id_rol = 'cef-caj') > 0
		THEN
			_rolCEF = true;
		ELSE
			_rolCEF = false;
		END IF;
	END IF;

	IF _ID_Usuario = 'cef-su' OR _rolCEF
	THEN
		IF _Entidad = -1
		THEN
			RETURN QUERY 
			SELECT _id_usuario as id_usuario, c.tipo, c.clave, c.cuenta, 1 AS permitido
			FROM tbl_bancos_cuentas c
			WHERE c.tipo = _tipo
			ORDER BY c.clave; 
		ELSE
			RETURN QUERY 
			SELECT _id_usuario as id_usuario, c.tipo, c.clave, c.cuenta, 1 AS permitido
			FROM tbl_bancos_cuentas c
			WHERE c.tipo = _tipo and c.clave = _entidad;
		END IF;
	ELSE
		IF _Entidad = -1
		THEN
			RETURN QUERY 
			SELECT _id_usuario as id_usuario, c.tipo, c.clave, c.cuenta, c.permitido 
			FROM view_usuarios_submodulo_bancos c
			WHERE c.id_usuario = _id_usuario and c.tipo = _tipo
			ORDER BY c.clave;
		ELSE
			RETURN QUERY 
			SELECT _id_usuario as id_usuario, c.tipo, c.clave, c.cuenta, c.permitido 
			FROM view_usuarios_submodulo_bancos c
			WHERE c.id_usuario = _id_usuario and c.tipo = _tipo and c.clave = _entidad and c.permitido = 1;
		END IF;
	END IF;
END
$BODY$
  LANGUAGE plpgsql;

   

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION view_usuarios_submodulo_bodegas(_id_usuario character varying, _entidad smallint)
  RETURNS SETOF record AS
$BODY$  
BEGIN
	IF _ID_Usuario = 'cef-su' OR  (select count(*) from tbl_usuarios_submodulo_roles where id_usuario = _id_usuario and id_rol = 'cef-alm') > 0
	THEN
		IF _Entidad = -1
		THEN
			RETURN QUERY 
			SELECT _id_usuario as id_usuario, c.id_bodega, c.nombre, 1 AS permitido
			FROM tbl_invserv_bodegas c
			ORDER BY c.id_bodega;
		ELSE
			RETURN QUERY 
			SELECT _id_usuario as id_usuario, c.id_bodega, c.nombre, 1 AS permitido
			FROM tbl_invserv_bodegas c
			WHERE c.id_bodega = _entidad;
		END IF;
	ELSE
		IF _Entidad = -1
		THEN
	RETURN QUERY 
			SELECT _id_usuario as id_usuario, c.id_bodega, c.nombre, c.permitido 
			FROM view_usuarios_submodulo_bodegas c
			WHERE c.id_usuario = _id_usuario
			ORDER BY c.id_bodega;
		ELSE
			RETURN QUERY 
			SELECT _id_usuario as id_usuario, c.id_bodega, c.nombre, c.permitido 
			FROM view_usuarios_submodulo_bodegas c
			WHERE c.id_usuario = _id_usuario and c.id_bodega = _entidad and c.permitido = 1;
		END IF;
	END IF;
END
$BODY$
  LANGUAGE plpgsql;

  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION view_usuarios_submodulo_compras(_id_usuario character varying, _entidad smallint)
  RETURNS SETOF record AS
$BODY$  
BEGIN
	IF _ID_Usuario = 'cef-su' OR  (select count(*) from tbl_usuarios_submodulo_roles where id_usuario = _id_usuario and id_rol = 'cef-comp') > 0
	THEN
		IF _Entidad = -1
		THEN
			RETURN QUERY 
			SELECT _id_usuario as id_usuario, c.id_entidadcompra, c.descripcion, 1 AS permitido
			FROM tbl_compras_entidades c
			ORDER BY c.id_entidadcompra;
		ELSE
			RETURN QUERY 
			SELECT _id_usuario as id_usuario, c.id_entidadcompra, c.descripcion, 1 AS permitido
			FROM tbl_compras_entidades c
			WHERE c.id_entidadcompra = _entidad;
		END IF;
	ELSE
		IF _Entidad = -1
		THEN
			RETURN QUERY 
			SELECT _id_usuario as id_usuario, c.id_entidadcompra, c.descripcion, c.permitido 
			FROM view_usuarios_submodulo_compras c
			WHERE c.id_usuario = _id_usuario
			ORDER BY c.id_entidadcompra;
		ELSE
			RETURN QUERY 
			SELECT _id_usuario as id_usuario, c.id_entidadcompra, c.descripcion, c.permitido 
			FROM view_usuarios_submodulo_compras c
			WHERE c.id_usuario = _id_usuario and c.id_entidadcompra = _entidad and c.permitido = 1;
		END IF;
	END IF;
END
$BODY$
  LANGUAGE plpgsql;

  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION view_usuarios_submodulo_nomina(_id_usuario character varying, _entidad smallint)
  RETURNS SETOF record AS
$BODY$  
BEGIN
	IF _ID_Usuario = 'cef-su' OR  (select count(*) from tbl_usuarios_submodulo_roles where id_usuario = _id_usuario and id_rol = 'cef-nom') > 0
	THEN
		IF _Entidad = -1
		THEN
			RETURN QUERY 
			SELECT _id_usuario as id_usuario, c.id_compania, c.id_sucursal, c.descripcion, 1 AS permitido
			FROM tbl_companias c
			ORDER BY c.id_sucursal;
		ELSE
			RETURN QUERY 
			SELECT _id_usuario as id_usuario, c.id_compania, c.id_sucursal, c.descripcion, 1 AS permitido
			FROM tbl_companias c
			WHERE c.id_compania = 0 and id_sucursal = _entidad;
		END IF;
	ELSE
		IF _Entidad = -1
		THEN
			RETURN QUERY 
			SELECT _id_usuario as id_usuario, c.id_compania, c.id_sucursal, c.descripcion, c.permitido 
			FROM view_usuarios_submodulo_nomina c
			WHERE c.id_usuario = _id_usuario and c.id_compania = 0
			ORDER BY c.id_sucursal;
		ELSE
			RETURN QUERY 
			SELECT _id_usuario as id_usuario, c.id_compania, c.id_sucursal, c.descripcion, c.permitido 
			FROM view_usuarios_submodulo_nomina c
			WHERE c.id_usuario = _id_usuario and c.id_compania = 0 and c.id_sucursal = _entidad and c.permitido = 1;
		END IF;
		
	END IF;
END
$BODY$
  LANGUAGE plpgsql;

  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION view_usuarios_submodulo_produccion(_id_usuario character varying, _entidad smallint)
  RETURNS SETOF record AS
$BODY$  
BEGIN
	IF _ID_Usuario = 'cef-su' OR  (select count(*) from tbl_usuarios_submodulo_roles where id_usuario = _id_usuario and id_rol = 'cef-prod') > 0
	THEN
		IF _Entidad = -1
		THEN
			RETURN QUERY 
			SELECT _id_usuario as id_usuario, c.id_entidadprod, c.descripcion, 1 AS permitido
			FROM tbl_produccion_entidades c
			ORDER BY c.id_entidadprod;
		ELSE
			RETURN QUERY 
			SELECT _id_usuario as id_usuario, c.id_entidadprod, c.descripcion, 1 AS permitido
			FROM tbl_produccion_entidades c
			WHERE c.id_entidadprod = _entidad;
		END IF;
	ELSE
		IF _Entidad = -1
		THEN
			RETURN QUERY 
			SELECT _id_usuario as id_usuario, c.id_entidadprod, c.descripcion, c.permitido 
			FROM view_usuarios_submodulo_produccion c
			WHERE c.id_usuario = _id_usuario
			ORDER BY c.id_entidadprod;
		ELSE
			RETURN QUERY 
			SELECT _id_usuario as id_usuario, c.id_entidadprod, c.descripcion, c.permitido 
			FROM view_usuarios_submodulo_produccion c
			WHERE c.id_usuario = _id_usuario and c.id_entidadprod = _entidad and c.permitido = 1;
		END IF;
		
	END IF;
END
$BODY$
  LANGUAGE plpgsql;

  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION view_usuarios_submodulo_ventas(_id_usuario character varying, _entidad smallint)
  RETURNS SETOF record AS
$BODY$  
BEGIN
	IF _ID_Usuario = 'cef-su' OR  (select count(*) from tbl_usuarios_submodulo_roles where id_usuario = _id_usuario and id_rol = 'cef-ven') > 0
	THEN
		IF _Entidad = -1
		THEN
			RETURN QUERY 
			SELECT _id_usuario as id_usuario, c.id_entidadventa, c.descripcion, 1 AS permitido
			FROM tbl_ventas_entidades c
			ORDER BY c.id_entidadventa;
		ELSE
			RETURN QUERY 
			SELECT _id_usuario as id_usuario, c.id_entidadventa, c.descripcion, 1 AS permitido
			FROM tbl_ventas_entidades c
			WHERE c.id_entidadventa = _entidad;
		END IF;
	ELSE
		IF _Entidad = -1
		THEN
			RETURN QUERY 
			SELECT _id_usuario as id_usuario, c.id_entidadventa, c.descripcion, c.permitido 
			FROM view_usuarios_submodulo_ventas c
			WHERE c.id_usuario = _id_usuario
			ORDER BY c.id_entidadventa;
		ELSE
			RETURN QUERY 
			SELECT _id_usuario as id_usuario, c.id_entidadventa, c.descripcion, c.permitido 
			FROM view_usuarios_submodulo_ventas c
			WHERE c.id_usuario = _id_usuario and c.id_entidadventa = _entidad and c.permitido = 1;
		END IF;
		
	END IF;
END
$BODY$
  LANGUAGE plpgsql;
  


--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_cajas_vs_gengasto AS 
 SELECT c.tipo, c.clave, p.id_entidadcompra, p.descripcion, 
        CASE
            WHEN (( SELECT count(*) AS count
               FROM tbl_bancos_vs_compras ce
              WHERE ce.id_entidadcompra = p.id_entidadcompra AND ce.id_tipobanco = c.tipo AND ce.id_clavebanco = c.clave)) = 0 THEN 0
            ELSE 1
        END AS enlazado
   FROM tbl_compras_entidades p, tbl_bancos_cuentas c
  WHERE p.status <> 'C'::bpchar AND c.tipo = 1 AND p.id_tipoentidad = 2;
  
  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_cajas_vales_generargasto(
    _id_tipo smallint,
    _id_clave smallint,
    _id_entidadcompra smallint,
    _fecha timestamp without time zone,
    _referencia character varying)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255); _errpart int; _resultpart varchar(255); _ID_Cierre int; _ID_ProxCierre int; _ProxNumero int; _ID_Gasto int; _Status char(1); _ID_TipoVales char(1); _IVA numeric(5,2); _FactNum int;
	_Total numeric(19,4); _Importe numeric(19,4); _ImporteIVA numeric(19,4); _ID_Bodega smallint; _Concepto varchar(80);
BEGIN
	_err := 0;
	_result := (select msj5 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'BANCAJ_VALES' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCOK');
	
	_ID_Cierre := ( select ID_Cierre from TBL_CAJAS_CIERRE where Numero = 0 and ID_Tipo = _ID_Tipo and ID_Clave = _ID_Clave );
	_ID_ProxCierre := ( select max(ID_Cierre) from TBL_CAJAS_CIERRE ) + 1; 
	_ProxNumero := ( select max(Numero) from TBL_CAJAS_CIERRE where ID_Tipo = _ID_Tipo and ID_Clave = _ID_Clave ) + 1;
	_Status := ( select Status from TBL_CAJAS_CIERRE where ID_Cierre = _ID_Cierre );
	_ID_TipoVales := (select case when Fija = '1' then 'F' else 'A' end from TBL_COMPRAS_ENTIDADES where ID_EntidadCompra = _ID_EntidadCompra);
	_IVA := (select IVA from TBL_COMPRAS_ENTIDADES where ID_EntidadCompra = _ID_EntidadCompra);
	_FactNum := (select Doc from TBL_COMPRAS_ENTIDADES where ID_EntidadCompra = _ID_EntidadCompra);
	_ID_Bodega := (select ID_Bodega from TBL_COMPRAS_ENTIDADES where ID_EntidadCompra = _ID_EntidadCompra);
	_Concepto :=  (select msj3 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'BANCAJ_VALES' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCOK2'); --Gasto autom√°tico generado desde vales
	
	IF _Status = 'P'
	THEN
		_err := 3;
		_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'BANCAJ_VALES' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --No se puede agregar el vale porque en estos momentos la caja esta protegida
	END IF;

	IF ( select count(*) from TBL_CAJAS_CIERRE_VALES v where v.ID_Tipo = _ID_TipoVales and v.ID_Cierre = ( select id_cierre from tbl_cajas_cierre where id_tipo = _id_tipo and id_clave = _id_clave and numero = 0 )) < 1
	THEN
		_err := 3;
		_result := (select msj5 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'BANCAJ_VALES' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --ERROR: No se puede generar el gasto porque no existen vales para la generaci√≥n o la entidad del gasto no es compatible al tipo de vales en esta caja. 
	END IF;

	IF _err = 0
	THEN
		CREATE LOCAL TEMPORARY TABLE _TMP_COMPRAS_FACTURAS_DET (
			Partida serial NOT NULL ,
			Cantidad numeric(9, 3) NOT NULL ,
			ID_Prod varchar(20) NOT NULL ,
			Precio numeric(19,4) NOT NULL ,
			Descuento numeric(5, 2) NOT NULL ,
			IVA numeric(14,6) NOT NULL ,
			Obs varchar(80) NULL ,
			Importe numeric(19,4) NOT NULL ,
			ImporteDesc numeric(19,4) NOT NULL ,
			ImporteIVA numeric(19,4) NOT NULL ,
			TotalPart numeric(19,4) NOT NULL ,
			IEPS numeric(9,6) NOT NULL,
			ImporteIEPS numeric(19,4) NOT NULL,
			IVARet numeric(9,6) NOT NULL,
			ImporteIVARet numeric(19,4) NOT NULL,
			ISRRet numeric(9,6) NOT NULL,
			ImporteISRRet numeric(19,4) NOT NULL,
    			Tipo char(1) NOT NULL ,
			Unidad varchar(80) NULL ,
			PrecioSD numeric(19,4) NOT NULL 
		);

   		INSERT INTO _TMP_COMPRAS_FACTURAS_DET(Cantidad, ID_Prod, Precio, Descuento, IVA, Obs, Importe, ImporteDesc, ImporteIVA, TotalPart, IEPS, ImporteIEPS, IVARet, ImporteIVARet, ISRRet, ImporteISRRet, Tipo, Unidad, PrecioSD)
		SELECT 1.0, v.ID_Gasto, 
			case when i.IVA = '0' then v.Total else case when _IVA = 0.0 then v.Total else v.Total - (v.Total *  _IVA / 100.0) end end, 
			0.0,
			case when i.IVA = '0' then 0.0 else _IVA end, 
			v.Concepto, 
			case when i.IVA = '0' then v.Total else case when _IVA = 0.0 then v.Total else v.Total - (v.Total *  _IVA / 100.0) end end, 
			0.0, 
			case when i.IVA = '0' then 0.0 else (v.Total * _IVA / 100.0) end, v.Total, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 'G',i.ID_UnidadSalida,v.Total
		FROM TBL_CAJAS_CIERRE_VALES v JOIN TBL_INVSERV_INVENTARIOS i ON
			v.ID_Gasto = i.ID_Prod
		WHERE v.ID_Tipo = _ID_TipoVales and v.ID_Cierre = (	select id_cierre from tbl_cajas_cierre where id_tipo = _ID_Tipo and id_clave = _ID_Clave and numero = 0 )
		ORDER BY v.Fecha ASC;

		-- Genera los importes
		_Total := (select round(sum(TotalPart),2) from _TMP_COMPRAS_FACTURAS_DET);
		_Importe := (select round(sum(Importe),2) from _TMP_COMPRAS_FACTURAS_DET);
		_ImporteIVA := (select round(sum(ImporteIVA),2) from _TMP_COMPRAS_FACTURAS_DET);

		--Ahora genera la temporal del pago
		CREATE LOCAL TEMPORARY TABLE _TMP_PAGOS (
			Partida serial NOT NULL ,
    			ID_FormaPago smallint NOT NULL ,
    			ID_BanCaj smallint NOT NULL ,
    			Total numeric(19,4) NOT NULL ,
    			RefPago varchar(20) NULL ,
    			TipoMov character(3) NOT NULL ,
    			ID_SatBanco character(3) NOT NULL ,
    			ID_SatMetodosPago character(2) NOT NULL ,
    			BancoExt character varying(150) NOT NULL ,
    			CuentaBanco character varying(50) NOT NULL ,
    			Cheque character varying(20) NOT NULL
    		);
    			
    		INSERT INTO _TMP_PAGOS (ID_FormaPago, ID_BanCaj, Total, RefPago, TipoMov, ID_SatBanco, ID_SatMetodosPago, BancoExt, CuentaBanco, Cheque)
    		SELECT 1, _ID_Clave, sum(v.Total), '***', 'RET', '000', '01', '', '','0'
    		FROM TBL_CAJAS_CIERRE_VALES v 
		WHERE v.ID_Tipo = _ID_TipoVales and v.ID_Cierre = (	select id_cierre from tbl_cajas_cierre where id_tipo = _ID_Tipo and id_clave = _ID_Clave and numero = 0 );

		-- Ahora genera el gasto;
		SELECT * INTO _errpart, _resultpart, _id_gasto
		FROM sp_compras_gastos_agregar(_ID_EntidadCompra,_FactNum,'0',_Fecha,_referencia,'1','1.00','0',_Concepto,_Importe,'0.00',_Importe,_ImporteIVA,_Total,_Total,'0.00','0.00',_ID_Bodega,null,'0',null,'','0.00','0.00','0.00') as ( err integer, res varchar, clave integer );
       		IF _errpart <> 0
		THEN
			_err := _errpart;
			_result := _resultpart;
		END IF;

		--Traspasa los vales de la generaci√≥n  a un cierre nuevo cerrado
		INSERT INTO TBL_CAJAS_CIERRE( id_cierre, numero, id_tipo, id_clave, fecha, obs, status)
		VALUES(_ID_ProxCierre, _ProxNumero, _ID_Tipo, _ID_Clave, _Fecha, _Concepto, 'P'); 

		UPDATE TBL_CAJAS_CIERRE_VALES
		SET ID_Cierre = _ID_ProxCierre
		WHERE ID_Tipo = _ID_TipoVales and ID_Cierre = _ID_Cierre;
		
		--Finalmente borra las tablas temporales
		DROP TABLE _TMP_PAGOS;
		DROP TABLE _TMP_COMPRAS_FACTURAS_DET;
	END IF;
	
	RETURN QUERY SELECT _err, _result, _ID_Clave;
	
END
$BODY$
  LANGUAGE plpgsql;  
  
  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_bancos_actualizar_sdos()
  RETURNS SETOF record AS
$BODY$
DECLARE 	
	_err int; _Mes smallint; _Ano smallint; 
	_deposito numeric(19,4); _retiro numeric(19,4); 
	_idmovimiento int; _saldoini numeric(19,4); _saldofin numeric(19,4); _saldomed numeric(19,4); 
	_PER RECORD; _MOV RECORD; _ENT RECORD;
BEGIN
	_err := 0;
	
	-- crea la tabla temporal de saldos de la cual se actualizar?n los saldos finales
	CREATE LOCAL TEMPORARY TABLE _TMP_BANCOS_MOVIMIENTOS (
		Tipo smallint NOT NULL,
		Clave smallint NOT NULL ,
		ID_Movimiento int NOT NULL ,
		Deposito numeric(19,4) NOT NULL ,
		Retiro numeric(19,4) NOT NULL ,
		Saldo numeric(19,4) NOT NULL 
	);

	CREATE LOCAL TEMPORARY TABLE _TMP_BANCOS_CUENTAS_SALDOS(
		Mes smallint NOT NULL,
		Ano smallint NOT NULL,
		Tipo smallint NOT NULL,
		Clave smallint NOT NULL ,
		SaldoIni numeric(19,4) NOT NULL,
		SaldoFin numeric(19,4) NOT NULL
	);	

	_Mes := (	select Mes -- el ultimo mes cerrado ( si no hay meses cerrados sera nulo )
				from TBL_CONT_CATALOGO_PERIODOS
				where Mes <> 13 and Cerrado = '1' 
				order by Ano Desc, Mes Desc limit 1);
	_Ano := (	select Ano -- igual en el a?o
				from TBL_CONT_CATALOGO_PERIODOS 
				where Mes <> 13 and Cerrado = '1' 
				order by Ano Desc, Mes Desc limit 1);

	--raise notice 'Ultimo Cerrado: mes % ano %', _Mes, _Ano;
	
	FOR _ENT IN
		( 	SELECT Tipo, Clave FROM TBL_BANCOS_CUENTAS ORDER BY Tipo Asc, Clave Asc  )
	LOOP
		_saldoini := (select SaldoFin from TBL_BANCOS_CUENTAS_SALDOS where Mes = _Mes and Ano = _Ano and Tipo = _ENT.Tipo and Clave = _ENT.Clave);
		_saldomed := (select SaldoFin from TBL_BANCOS_CUENTAS_SALDOS where Mes = _Mes and Ano = _Ano and Tipo = _ENT.Tipo and Clave = _ENT.Clave);
		_saldofin := _saldomed;
		--raise notice 'ENTIDAD: %/% INI: % FIN: %', _ENT.Tipo, _ENT.Clave, _saldoini, _saldomed;
		
		FOR _PER IN (select * from TBL_CONT_CATALOGO_PERIODOS where Cerrado = '0' order by Ano Asc, Mes Asc)
		LOOP
			IF _PER.Mes = 13
			THEN
				CONTINUE;
			END IF;	
			--raise notice 'Actual: mes % ano %', _PER.Mes, _PER.Ano;
	
			FOR _MOV IN 
					(	SELECT c.ID, c.Deposito, c.Retiro, c.Saldo
						FROM TBL_BANCOS_MOVIMIENTOS c 
						WHERE c.Tipo = _ENT.Tipo and c.Clave = _ENT.Clave and date_part('Month',c.Fecha) = _PER.Mes and date_part('Year',c.Fecha) = _PER.Ano and c.Estatus <> 'C' 
						ORDER BY c.Fecha ASC, c.ID ASC	)
			LOOP
				--raise notice 'dep % ret %', _MOV.Deposito, _MOV.Retiro;
				IF _MOV.Deposito > _MOV.Retiro -- significa que es un deposito al banco
				THEN
					_saldofin := _saldomed + _MOV.Deposito;
				ELSE -- de lo contrario es un retiro al banco
					_saldofin := _saldomed - _MOV.Retiro;
				END IF;

				--raise notice 'saldoini % dep % ret % saldofin %', _saldoini, _MOV.Deposito, _MOV.Retiro, _saldofin;
				INSERT INTO _TMP_BANCOS_MOVIMIENTOS (Tipo, Clave, ID_Movimiento, Deposito, Retiro, Saldo)
				VALUES(_ENT.Tipo, _ENT.Clave,_MOV.ID, _MOV.Deposito, _MOV.Retiro, _SaldoFin);

				_saldomed := _saldofin;
			END LOOP;
			--Agrega el saldo del banco de este periodo
			INSERT INTO _TMP_BANCOS_CUENTAS_SALDOS
			VALUES(_PER.Mes, _PER.Ano, _ENT.Tipo, _ENT.Clave, _SaldoIni, _SaldoFin);

			_saldoini := _saldofin;
			_saldomed := _saldofin;
	
		END LOOP;

	END LOOP;
		
	-- Actualiza los saldos de bancos y caja con las tablas temporales	
	UPDATE TBL_BANCOS_MOVIMIENTOS
	SET Saldo = tm.Saldo	
	FROM _TMP_BANCOS_MOVIMIENTOS tm, TBL_BANCOS_MOVIMIENTOS c 
	WHERE	tm.ID_Movimiento = c.ID and 
	c.ID = TBL_BANCOS_MOVIMIENTOS.ID;

	-- Actualiza los saldos finales del mes actual de bancos y cajas
	UPDATE TBL_BANCOS_CUENTAS_SALDOS
	SET	SaldoIni = tm.SaldoIni, SaldoFin = tm.SaldoFin
	FROM _TMP_BANCOS_CUENTAS_SALDOS tm,  TBL_BANCOS_CUENTAS_SALDOS c
	WHERE tm.Tipo = c.Tipo and tm.Clave = c.Clave and tm.Mes = c.Mes and tm.Ano = c.Ano and
		c.Tipo = TBL_BANCOS_CUENTAS_SALDOS.Tipo and c.Clave = TBL_BANCOS_CUENTAS_SALDOS.Clave and c.Mes = TBL_BANCOS_CUENTAS_SALDOS.Mes and c.Ano = TBL_BANCOS_CUENTAS_SALDOS.Ano;

	-- Actualiza los saldos entidades de cuentas
	_Mes := (	select Mes -- el ultimo mes abierto ( si no hay meses abiertos sera nulo )
				from TBL_CONT_CATALOGO_PERIODOS
				where Mes <> 13 and Cerrado = '0' 
				order by Ano Desc, Mes Desc limit 1);
	_Ano := (	select Ano -- igual en el a?o
				from TBL_CONT_CATALOGO_PERIODOS 
				where Mes <> 13 and Cerrado = '0' 
				order by Ano Desc, Mes Desc limit 1);

	IF _Mes is not null AND _ano is not null
	THEN
		--raise notice 'FINAL DEL PERIODO: mes % ano %', _Mes, _Ano;
	
		UPDATE TBL_BANCOS_CUENTAS
		SET Saldo = c.SaldoFin 
		FROM TBL_BANCOS_CUENTAS e, TBL_BANCOS_CUENTAS_SALDOS c 
		WHERE
			e.Tipo = c.Tipo and  e.Clave = c.Clave and 
			c.Tipo = TBL_BANCOS_CUENTAS.Tipo and c.Clave = TBL_BANCOS_CUENTAS.Clave and
			c.Ano = _Ano and c.Mes = _Mes;
	END IF;

	DROP TABLE _TMP_BANCOS_MOVIMIENTOS ;
	DROP TABLE _TMP_BANCOS_CUENTAS_SALDOS;
	
	RETURN QUERY 
	SELECT 0 as err, 'LOS SALDOS DE BANCOS Y CAJAS SE ACTUALIZARON SATISFACTORIAMENTE'::varchar as res;
END
$BODY$
  LANGUAGE plpgsql;
  
  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_client_actualizar_sdos()
  RETURNS SETOF record AS
$BODY$
DECLARE 	
	_err int; _Mes smallint; _Ano smallint; 
	_saldoini numeric(19,4); _saldofin numeric(19,4); _saldomed numeric(19,4); 
	_alt numeric(19,4); _ant numeric(19,4); _pag numeric(19,4); _sal numeric(19,4); _apl numeric(19,4); _dpa numeric(19,4); _dev numeric(19,4);  
	_PER RECORD; _MON RECORD; _CLI RECORD;
BEGIN
	_err := 0;
	
	-- crea la tabla temporal de saldos de la cual se actualizar?n los saldos finales
	CREATE LOCAL TEMPORARY TABLE _TMP_CLIENT_SALDOS(
		mes smallint NOT NULL,
		ano smallint NOT NULL,
		id_moneda integer NOT NULL,
		id_tipo character(2) NOT NULL,
		id_clave integer NOT NULL,
		saldoini numeric(19,4) NOT NULL,
		saldofin numeric(19,4) NOT NULL
	);	

	_Mes := (	select Mes -- el ultimo mes cerrado ( si no hay meses cerrados sera nulo )
				from TBL_CONT_CATALOGO_PERIODOS
				where Mes <> 13 and Cerrado = '1' 
				order by Ano Desc, Mes Desc limit 1);
	_Ano := (	select Ano -- igual en el a?o
				from TBL_CONT_CATALOGO_PERIODOS 
				where Mes <> 13 and Cerrado = '1' 
				order by Ano Desc, Mes Desc limit 1);

	--raise notice 'Ultimo Cerrado: mes % ano %', _Mes, _Ano;
	
	FOR _CLI IN
		( 	SELECT ID_Tipo, ID_Clave FROM TBL_CLIENT_CLIENT ORDER BY ID_Tipo Asc, ID_Clave Asc  )
	LOOP
		--raise notice 'CLIENTE: %/%', _CLI.ID_Tipo, _CLI.ID_Clave;
		FOR _MON IN (	SELECT Clave FROM TBL_CONT_MONEDAS ORDER BY Clave Asc )	
		LOOP
			--raise notice 'MONEDA: %', _MON.Clave;
			_saldoini := (select SaldoFin from TBL_CLIENT_SALDOS where Mes = _Mes and Ano = _Ano and ID_Tipo = _CLI.ID_Tipo and ID_Clave = _CLI.ID_Clave and ID_Moneda = _MON.Clave);
			_saldomed := (select SaldoFin from TBL_CLIENT_SALDOS where Mes = _Mes and Ano = _Ano and ID_Tipo = _CLI.ID_Tipo and ID_Clave = _CLI.ID_Clave and ID_Moneda = _MON.Clave);
					
			FOR _PER IN (select * from TBL_CONT_CATALOGO_PERIODOS where Cerrado = '0' order by Ano Asc, Mes Asc)
			LOOP
				IF _PER.Mes = 13
				THEN
					CONTINUE;
				END IF;	
				--raise notice 'Actual: mes % ano %', _PER.Mes, _PER.Ano;
				_alt := (	SELECT coalesce(sum(c.Total), 0.00) FROM TBL_CLIENT_CXC c 
						WHERE c.ID_TipoCliPro = _CLI.ID_Tipo and c.ID_ClaveCliPro = _CLI.ID_Clave and date_part('Month',c.Fecha) = _PER.Mes and date_part('Year',c.Fecha) = _PER.Ano and c.Status <> 'C' and 
									c.Moneda = _MON.Clave and c.ID_TipoCP = 'ALT'	);
				_ant := (SELECT coalesce(sum(c.Total), 0.00) FROM TBL_CLIENT_CXC c 
						WHERE c.ID_TipoCliPro = _CLI.ID_Tipo and c.ID_ClaveCliPro = _CLI.ID_Clave and date_part('Month',c.Fecha) = _PER.Mes and date_part('Year',c.Fecha) = _PER.Ano and c.Status <> 'C' and 
									c.Moneda = _MON.Clave and c.ID_TipoCP = 'ANT'	);
				_pag := (SELECT coalesce(sum(c.Total), 0.00) FROM TBL_CLIENT_CXC c 
						WHERE c.ID_TipoCliPro = _CLI.ID_Tipo and c.ID_ClaveCliPro = _CLI.ID_Clave and date_part('Month',c.Fecha) = _PER.Mes and date_part('Year',c.Fecha) = _PER.Ano and c.Status <> 'C' and 
									c.Moneda = _MON.Clave and c.ID_TipoCP = 'PAG'	);
				_sal := (	SELECT coalesce(sum(c.Total), 0.00) FROM TBL_CLIENT_CXC c 
						WHERE c.ID_TipoCliPro = _CLI.ID_Tipo and c.ID_ClaveCliPro = _CLI.ID_Clave and date_part('Month',c.Fecha) = _PER.Mes and date_part('Year',c.Fecha) = _PER.Ano and c.Status <> 'C' and 
									c.Moneda = _MON.Clave and c.ID_TipoCP = 'SAL'	);
				_apl := (	SELECT coalesce(sum(c.Total), 0.00) FROM TBL_CLIENT_CXC c 
						WHERE c.ID_TipoCliPro = _CLI.ID_Tipo and c.ID_ClaveCliPro = _CLI.ID_Clave and date_part('Month',c.Fecha) = _PER.Mes and date_part('Year',c.Fecha) = _PER.Ano and c.Status <> 'C' and 
									c.Moneda = _MON.Clave and c.ID_TipoCP = 'APL'	);
				_dpa := (SELECT coalesce(sum(c.Total), 0.00) FROM TBL_CLIENT_CXC c 
						WHERE c.ID_TipoCliPro = _CLI.ID_Tipo and c.ID_ClaveCliPro = _CLI.ID_Clave and date_part('Month',c.Fecha) = _PER.Mes and date_part('Year',c.Fecha) = _PER.Ano and c.Status <> 'C' and 
									c.Moneda = _MON.Clave and c.ID_TipoCP = 'DPA'	);
				_dev := (SELECT coalesce(sum(c.Total), 0.00) FROM TBL_CLIENT_CXC c 
						WHERE c.ID_TipoCliPro = _CLI.ID_Tipo and c.ID_ClaveCliPro = _CLI.ID_Clave and date_part('Month',c.Fecha) = _PER.Mes and date_part('Year',c.Fecha) = _PER.Ano and c.Status <> 'C' and 
									c.Moneda = _MON.Clave and c.ID_TipoCP = 'DEV'	);

				--raise notice 'ALT % ANT % PAG % SAL % APL % DPA % DEV %', _alt, _ant, _pag, _sal, _apl, _dpa, _dev;

				_saldofin := _saldomed + _alt - _ant -_pag - _sal - _apl + _dpa + _dev;
				--raise notice 'SALDO: %', _saldofin;

				--Agrega el saldo del cliente de este periodo
				INSERT INTO _TMP_CLIENT_SALDOS(mes,ano,id_moneda,id_tipo,id_clave,saldoini,saldofin)
				VALUES(_PER.Mes, _PER.Ano, _MON.Clave,_CLI.ID_Tipo, _CLI.ID_Clave, _SaldoIni, _SaldoFin);
				
				_saldoini := _saldofin;
				_saldomed := _saldofin;
											
			END LOOP;
					
		END LOOP;

	END LOOP;

	-- Actualiza los saldos finales
	UPDATE TBL_CLIENT_SALDOS
	SET	SaldoIni = tm.SaldoIni, SaldoFin = tm.SaldoFin
	FROM _TMP_CLIENT_SALDOS tm,  TBL_CLIENT_SALDOS c
	WHERE tm.ID_Tipo = c.ID_Tipo and tm.ID_Clave = c.ID_Clave and tm.Mes = c.Mes and tm.Ano = c.Ano and tm.ID_Moneda = c.ID_Moneda and
		c.ID_Tipo = TBL_CLIENT_SALDOS.ID_Tipo and c.ID_Clave = TBL_CLIENT_SALDOS.ID_Clave and c.Mes = TBL_CLIENT_SALDOS.Mes and c.Ano = TBL_CLIENT_SALDOS.Ano and c.ID_Moneda = TBL_CLIENT_SALDOS.ID_Moneda;
	
	-- Actualiza los saldos entidades de cuentas
	_Mes := (	select Mes -- el ultimo mes abierto ( si no hay meses abiertos sera nulo )
				from TBL_CONT_CATALOGO_PERIODOS
				where Mes <> 13 and Cerrado = '0' 
				order by Ano Desc, Mes Desc limit 1);
	_Ano := (	select Ano -- igual en el a?o
				from TBL_CONT_CATALOGO_PERIODOS 
				where Mes <> 13 and Cerrado = '0' 
				order by Ano Desc, Mes Desc limit 1);

	IF _Mes is not null AND _Ano is not null
	THEN
		--raise notice 'FINAL DEL PERIODO: mes % ano %', _Mes, _Ano;

		UPDATE TBL_CLIENT_SALDOS_MONEDAS
		SET Saldo = c.SaldoFin 
		FROM TBL_CLIENT_SALDOS_MONEDAS e, TBL_CLIENT_SALDOS c 
		WHERE
			e.ID_Tipo = c.ID_Tipo and  e.ID_Clave = c.ID_Clave and e.ID_Moneda = c.ID_Moneda and
			c.ID_Tipo = TBL_CLIENT_SALDOS_MONEDAS.ID_Tipo and c.ID_Clave = TBL_CLIENT_SALDOS_MONEDAS.ID_Clave and c.ID_Moneda = TBL_CLIENT_SALDOS_MONEDAS.ID_Moneda and
			c.Ano = _Ano and c.Mes = _Mes;
	END IF;

	DROP TABLE _TMP_CLIENT_SALDOS ;
	
	RETURN QUERY 
	SELECT 0 as err, 'LOS SALDOS DE CLIENTES SE ACTUALIZARON SATISFACTORIAMENTE'::varchar as res;
END
$BODY$
  LANGUAGE plpgsql;
  
  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_provee_actualizar_sdos()
  RETURNS SETOF record AS
$BODY$
DECLARE 	
	_err int; _Mes smallint; _Ano smallint; 
	_saldoini numeric(19,4); _saldofin numeric(19,4); _saldomed numeric(19,4); 
	_alt numeric(19,4); _ant numeric(19,4); _pag numeric(19,4); _sal numeric(19,4); _apl numeric(19,4); _dpa numeric(19,4); _dev numeric(19,4);  
	_PER RECORD; _MON RECORD; _PRO RECORD;
BEGIN
	_err := 0;
	
	-- crea la tabla temporal de saldos de la cual se actualizar?n los saldos finales
	CREATE LOCAL TEMPORARY TABLE _TMP_PROVEE_SALDOS(
		mes smallint NOT NULL,
		ano smallint NOT NULL,
		id_moneda integer NOT NULL,
		id_tipo character(2) NOT NULL,
		id_clave integer NOT NULL,
		saldoini numeric(19,4) NOT NULL,
		saldofin numeric(19,4) NOT NULL
	);	

	_Mes := (	select Mes -- el ultimo mes cerrado ( si no hay meses cerrados sera nulo )
				from TBL_CONT_CATALOGO_PERIODOS
				where Mes <> 13 and Cerrado = '1' 
				order by Ano Desc, Mes Desc limit 1);
	_Ano := (	select Ano -- igual en el a?o
				from TBL_CONT_CATALOGO_PERIODOS 
				where Mes <> 13 and Cerrado = '1' 
				order by Ano Desc, Mes Desc limit 1);

	--raise notice 'Ultimo Cerrado: mes % ano %', _Mes, _Ano;
	
	FOR _PRO IN
		( 	SELECT ID_Tipo, ID_Clave FROM TBL_PROVEE_PROVEE ORDER BY ID_Tipo Asc, ID_Clave Asc  )
	LOOP
		--raise notice 'PROVEEDOR: %/%', _PRO.ID_Tipo, _PRO.ID_Clave;
		FOR _MON IN (	SELECT Clave FROM TBL_CONT_MONEDAS ORDER BY Clave Asc )	
		LOOP
			--raise notice 'MONEDA: %', _MON.Clave;
			_saldoini := (select SaldoFin from TBL_PROVEE_SALDOS where Mes = _Mes and Ano = _Ano and ID_Tipo = _PRO.ID_Tipo and ID_Clave = _PRO.ID_Clave and ID_Moneda = _MON.Clave);
			_saldomed := (select SaldoFin from TBL_PROVEE_SALDOS where Mes = _Mes and Ano = _Ano and ID_Tipo = _PRO.ID_Tipo and ID_Clave = _PRO.ID_Clave and ID_Moneda = _MON.Clave);
					
			FOR _PER IN (select * from TBL_CONT_CATALOGO_PERIODOS where Cerrado = '0' order by Ano Asc, Mes Asc)
			LOOP
				IF _PER.Mes = 13
				THEN
					CONTINUE;
				END IF;	
				--raise notice 'Actual: mes % ano %', _PER.Mes, _PER.Ano;
				_alt := (	SELECT coalesce(sum(c.Total), 0.00) FROM TBL_PROVEE_CXP c 
						WHERE c.ID_TipoCliPro = _PRO.ID_Tipo and c.ID_ClaveCliPro = _PRO.ID_Clave and date_part('Month',c.Fecha) = _PER.Mes and date_part('Year',c.Fecha) = _PER.Ano and c.Status <> 'C' and 
									c.Moneda = _MON.Clave and c.ID_TipoCP = 'ALT'	);
				_ant := (SELECT coalesce(sum(c.Total), 0.00) FROM TBL_PROVEE_CXP c 
						WHERE c.ID_TipoCliPro = _PRO.ID_Tipo and c.ID_ClaveCliPro = _PRO.ID_Clave and date_part('Month',c.Fecha) = _PER.Mes and date_part('Year',c.Fecha) = _PER.Ano and c.Status <> 'C' and 
									c.Moneda = _MON.Clave and c.ID_TipoCP = 'ANT'	);
				_pag := (SELECT coalesce(sum(c.Total), 0.00) FROM TBL_PROVEE_CXP c 
						WHERE c.ID_TipoCliPro = _PRO.ID_Tipo and c.ID_ClaveCliPro = _PRO.ID_Clave and date_part('Month',c.Fecha) = _PER.Mes and date_part('Year',c.Fecha) = _PER.Ano and c.Status <> 'C' and 
									c.Moneda = _MON.Clave and c.ID_TipoCP = 'PAG'	);
				_sal := (	SELECT coalesce(sum(c.Total), 0.00) FROM TBL_PROVEE_CXP c 
						WHERE c.ID_TipoCliPro = _PRO.ID_Tipo and c.ID_ClaveCliPro = _PRO.ID_Clave and date_part('Month',c.Fecha) = _PER.Mes and date_part('Year',c.Fecha) = _PER.Ano and c.Status <> 'C' and 
									c.Moneda = _MON.Clave and c.ID_TipoCP = 'SAL'	);
				_apl := (	SELECT coalesce(sum(c.Total), 0.00) FROM TBL_PROVEE_CXP c 
						WHERE c.ID_TipoCliPro = _PRO.ID_Tipo and c.ID_ClaveCliPro = _PRO.ID_Clave and date_part('Month',c.Fecha) = _PER.Mes and date_part('Year',c.Fecha) = _PER.Ano and c.Status <> 'C' and 
									c.Moneda = _MON.Clave and c.ID_TipoCP = 'APL'	);
				_dpa := (SELECT coalesce(sum(c.Total), 0.00) FROM TBL_PROVEE_CXP c 
						WHERE c.ID_TipoCliPro = _PRO.ID_Tipo and c.ID_ClaveCliPro = _PRO.ID_Clave and date_part('Month',c.Fecha) = _PER.Mes and date_part('Year',c.Fecha) = _PER.Ano and c.Status <> 'C' and 
									c.Moneda = _MON.Clave and c.ID_TipoCP = 'DPA'	);
				_dev := (SELECT coalesce(sum(c.Total), 0.00) FROM TBL_PROVEE_CXP c 
						WHERE c.ID_TipoCliPro = _PRO.ID_Tipo and c.ID_ClaveCliPro = _PRO.ID_Clave and date_part('Month',c.Fecha) = _PER.Mes and date_part('Year',c.Fecha) = _PER.Ano and c.Status <> 'C' and 
									c.Moneda = _MON.Clave and c.ID_TipoCP = 'DEV'	);

				--raise notice 'ALT % ANT % PAG % SAL % APL % DPA % DEV %', _alt, _ant, _pag, _sal, _apl, _dpa, _dev;

				_saldofin := _saldomed + _alt - _ant -_pag - _sal - _apl + _dpa + _dev;
				--raise notice 'SALDO: %', _saldofin;

				--Agrega el saldo del PROVEEe de este periodo
				INSERT INTO _TMP_PROVEE_SALDOS(mes,ano,id_moneda,id_tipo,id_clave,saldoini,saldofin)
				VALUES(_PER.Mes, _PER.Ano, _MON.Clave,_PRO.ID_Tipo, _PRO.ID_Clave, _SaldoIni, _SaldoFin);
				
				_saldoini := _saldofin;
				_saldomed := _saldofin;
											
			END LOOP;
					
		END LOOP;

	END LOOP;

	-- Actualiza los saldos finales
	UPDATE TBL_PROVEE_SALDOS
	SET	SaldoIni = tm.SaldoIni, SaldoFin = tm.SaldoFin
	FROM _TMP_PROVEE_SALDOS tm,  TBL_PROVEE_SALDOS c
	WHERE tm.ID_Tipo = c.ID_Tipo and tm.ID_Clave = c.ID_Clave and tm.Mes = c.Mes and tm.Ano = c.Ano and tm.ID_Moneda = c.ID_Moneda and
		c.ID_Tipo = TBL_PROVEE_SALDOS.ID_Tipo and c.ID_Clave = TBL_PROVEE_SALDOS.ID_Clave and c.Mes = TBL_PROVEE_SALDOS.Mes and c.Ano = TBL_PROVEE_SALDOS.Ano and c.ID_Moneda = TBL_PROVEE_SALDOS.ID_Moneda;
	
	-- Actualiza los saldos entidades de cuentas
	_Mes := (	select Mes -- el ultimo mes abierto ( si no hay meses abiertos sera nulo )
				from TBL_CONT_CATALOGO_PERIODOS
				where Mes <> 13 and Cerrado = '0' 
				order by Ano Desc, Mes Desc limit 1);
	_Ano := (	select Ano -- igual en el a?o
				from TBL_CONT_CATALOGO_PERIODOS 
				where Mes <> 13 and Cerrado = '0' 
				order by Ano Desc, Mes Desc limit 1);

	IF _Mes is not null AND _Ano is not null
	THEN
		--raise notice 'FINAL DEL PERIODO: mes % ano %', _Mes, _Ano;

		UPDATE TBL_PROVEE_SALDOS_MONEDAS
		SET Saldo = c.SaldoFin 
		FROM TBL_PROVEE_SALDOS_MONEDAS e, TBL_PROVEE_SALDOS c 
		WHERE
			e.ID_Tipo = c.ID_Tipo and  e.ID_Clave = c.ID_Clave and e.ID_Moneda = c.ID_Moneda and
			c.ID_Tipo = TBL_PROVEE_SALDOS_MONEDAS.ID_Tipo and c.ID_Clave = TBL_PROVEE_SALDOS_MONEDAS.ID_Clave and c.ID_Moneda = TBL_PROVEE_SALDOS_MONEDAS.ID_Moneda and
			c.Ano = _Ano and c.Mes = _Mes;
	END IF;

	DROP TABLE _TMP_PROVEE_SALDOS ;
	
	RETURN QUERY 
	SELECT 0 as err, 'LOS SALDOS DE PROVEEDORES SE ACTUALIZARON SATISFACTORIAMENTE'::varchar as res;
END
$BODY$
  LANGUAGE plpgsql;
  
  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_cont_catalogo_actualizar_sdos()
  RETURNS SETOF record AS
$BODY$
DECLARE 	
	_err int; _Mes smallint; _Ano smallint; 
	_saldoini numeric(19,4); _saldofin numeric(19,4); _saldomed numeric(19,4); _saldopol numeric(19,4); 
	_abonos numeric(19,4); _retiros numeric(19,4); 
	_PER RECORD; _CTA RECORD; _POL RECORD; 
BEGIN
	_err := 0;
	
	-- crea la tabla temporal de saldos de la cual se actualizar?n los saldos finales
	CREATE LOCAL TEMPORARY TABLE _TMP_CONT_CATALOGO_DETALLE
	(
		mes smallint NOT NULL,
		ano integer NOT NULL,
		cuenta character(19) NOT NULL,
		saldoinicial numeric(19,4) NOT NULL,
		abonos numeric(19,4) NOT NULL,
		retiros numeric(19,4) NOT NULL,
		saldofinal numeric(19,4)
	);	

	CREATE LOCAL TEMPORARY TABLE _TMP_CONT_POLIZAS_DETALLE
	(
		id integer NOT NULL,
		part smallint NOT NULL,
		saldo numeric(19,4)
	);
	
	CREATE LOCAL TEMPORARY TABLE _TMP_CONT_RESULTADOS
	(
		mes smallint NOT NULL,
		ano smallint NOT NULL,
		resultado numeric(19,4) NOT NULL
	);
	
	_Mes := (	select Mes -- el ultimo mes cerrado ( si no hay meses cerrados sera nulo )
				from TBL_CONT_CATALOGO_PERIODOS
				where Cerrado = '1' 
				order by Ano Desc, Mes Desc limit 1);
	_Ano := (	select Ano -- igual en el a?o
				from TBL_CONT_CATALOGO_PERIODOS 
				where Cerrado = '1' 
				order by Ano Desc, Mes Desc limit 1);

	FOR _CTA IN
		( 	SELECT Cuenta FROM TBL_CONT_CATALOGO WHERE Acum = '0' ORDER BY Cuenta Asc  )
	LOOP
		--raise notice 'Cuenta: %', _CTA.Cuenta;
		_saldoini := (select SaldoFinal from TBL_CONT_CATALOGO_DETALLE where Mes = _Mes and Ano = _Ano and Cuenta = _CTA.Cuenta);
		_saldomed := (select SaldoFinal from TBL_CONT_CATALOGO_DETALLE where Mes = _Mes and Ano = _Ano and Cuenta = _CTA.Cuenta);
		_saldopol := (select SaldoFinal from TBL_CONT_CATALOGO_DETALLE where Mes = _Mes and Ano = _Ano and Cuenta = _CTA.Cuenta);

		FOR _PER IN (select * from TBL_CONT_CATALOGO_PERIODOS where Cerrado = '0' order by Ano Asc, Mes Asc)
		LOOP
			-- Mes 13 deber√≠a contar la p√≥liza de cierre anual.
			IF _PER.Mes = 13
			THEN
				_retiros := ( SELECT coalesce(sum(d.Debe),0.0) 
							FROM TBL_CONT_POLIZAS_DETALLE_CA d 
							WHERE d.Mes = _PER.Mes and d.Ano = _PER.Ano and d.Cuenta = _CTA.Cuenta ); 
				_abonos := ( SELECT coalesce(sum(d.Haber),0.0) 
							FROM TBL_CONT_POLIZAS_DETALLE_CA d 
							WHERE d.Mes = _PER.Mes and d.Ano = _PER.Ano and d.Cuenta = _CTA.Cuenta );
				_saldopol := _saldopol + _retiros - _abonos;
			ELSE	--Recorre poliza por poliza en la que aparece esta cuenta para actualizar
				_retiros := 0.0;
				_abonos := 0.0;
				FOR _POL IN (select p.fecha, d.id, d.part, d.debe, d.haber from TBL_CONT_POLIZAS_DETALLE d join TBL_CONT_POLIZAS p on p.ID = d.ID where p.Status <> 'C' and date_part('month',p.Fecha) = _PER.Mes and date_part('year',p.Fecha) = _PER.Ano and d.Cuenta = _CTA.Cuenta order by p.fecha, d.id, d.Part )
				LOOP
					_retiros := _retiros + _POL.Debe; 
					_abonos := _abonos + _POL.Haber;
					_saldopol := _saldopol + _POL.Debe - _POL.Haber;

					INSERT INTO _TMP_CONT_POLIZAS_DETALLE(id,part,saldo) 
					VALUES(_POL.ID,_POL.Part,_saldopol);
				END LOOP;
				/* Version anterior cuando no se registraba saldo en la poliza
				_retiros := ( SELECT coalesce(sum(d.Debe),0.0) 
							FROM TBL_CONT_POLIZAS_DETALLE d JOIN TBL_CONT_POLIZAS p ON
								p.ID = d.ID
							WHERE p.Status <> 'C' and date_part('month',p.Fecha) = _PER.Mes and date_part('year',p.Fecha) = _PER.Ano and d.Cuenta = _CTA.Cuenta ); 
				_abonos := ( SELECT coalesce(sum(d.Haber),0.0) 
							FROM TBL_CONT_POLIZAS_DETALLE d JOIN TBL_CONT_POLIZAS p ON
								p.ID = d.ID
							WHERE p.Status <> 'C' and date_part('month',p.Fecha) = _PER.Mes and date_part('year',p.Fecha) = _PER.Ano and d.Cuenta = _CTA.Cuenta ); 
				*/
			END IF;
			
			_saldofin := _saldomed + _retiros - _abonos;
			--raise notice '%/%:   % % - %', _PER.Mes, _PER.Ano, _abonos, _retiros, _saldofin;
			
			--Agrega el saldo del cliente de este periodo
			INSERT INTO _TMP_CONT_CATALOGO_DETALLE(mes,ano,cuenta,saldoinicial,abonos,retiros,saldofinal) 
			VALUES(_PER.Mes, _PER.Ano, _CTA.Cuenta, _SaldoIni, _Abonos, _Retiros, _SaldoFin);
				
			_saldoini := _saldofin;
			_saldomed := _saldofin;

										
		END LOOP;

	END LOOP;

	-- Actualiza los saldos finales
	UPDATE TBL_CONT_CATALOGO_DETALLE
	SET	SaldoInicial = tm.SaldoInicial, Abonos = tm.Abonos, Retiros = tm.Retiros, SaldoFinal = tm.SaldoFinal
	FROM _TMP_CONT_CATALOGO_DETALLE tm, TBL_CONT_CATALOGO_DETALLE c
	WHERE tm.Cuenta = c.Cuenta and tm.Mes = c.Mes and tm.Ano = c.Ano and 
		c.Cuenta = TBL_CONT_CATALOGO_DETALLE.Cuenta and c.Mes = TBL_CONT_CATALOGO_DETALLE.Mes and c.Ano = TBL_CONT_CATALOGO_DETALLE.Ano;

	-- Actualiza los saldos en polizas
	UPDATE TBL_CONT_POLIZAS_DETALLE
	SET	Saldo = tm.Saldo
	FROM _TMP_CONT_POLIZAS_DETALLE tm, TBL_CONT_POLIZAS_DETALLE c
	WHERE tm.ID = c.ID and tm.Part = c.Part and 
		c.ID = TBL_CONT_POLIZAS_DETALLE.ID and c.Part = TBL_CONT_POLIZAS_DETALLE.Part;

	--/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	-- CREA LOS SALDOS ACUMULATIVOS DE PRIMER NIVEL
	CREATE LOCAL TEMPORARY TABLE _TMP_CONT_CATALOGO_DETALLE1 AS
	SELECT d.Mes, d.Ano, substring(d.Cuenta,1,4) as Cuenta, sum(d.SaldoInicial) as TotSI, sum(d.Retiros) as TotC, sum(d.Abonos) as TotA, sum(d.SaldoFinal) as TotSF 
	FROM TBL_CONT_CATALOGO_DETALLE d JOIN TBL_CONT_CATALOGO c ON 
		c.Cuenta = d.Cuenta AND c.Acum = '0' JOIN TBL_CONT_CATALOGO_PERIODOS p ON
			p.Mes = d.Mes and p.Ano = d.Ano and p.Cerrado = '0'
	GROUP BY d.Mes, d.Ano, substring(d.Cuenta,1,4);

	UPDATE TBL_CONT_CATALOGO_DETALLE 
	SET SaldoInicial = tm.TotSI, Retiros = tm.TotC, Abonos = tm.TotA, SaldoFinal = tm.TotSF 
	FROM _TMP_CONT_CATALOGO_DETALLE1 tm, TBL_CONT_CATALOGO_DETALLE d
	WHERE d.Mes = tm.Mes AND d.Ano = tm.Ano AND d.Cuenta = tm.Cuenta || '000000000000000' and 
		d.Mes = TBL_CONT_CATALOGO_DETALLE.Mes AND d.Ano = TBL_CONT_CATALOGO_DETALLE.Ano AND d.Cuenta = TBL_CONT_CATALOGO_DETALLE.Cuenta;

	DROP TABLE _TMP_CONT_CATALOGO_DETALLE1;
	-- CREA LOS SALDOS ACUMULATIVOS DE SEGUNDO NIVEL
	CREATE LOCAL TEMPORARY TABLE _TMP_CONT_CATALOGO_DETALLE1 AS
	SELECT d.Mes, d.Ano, substring(d.Cuenta,1,7) as Cuenta, sum(d.SaldoInicial) as TotSI, sum(d.Retiros) as TotC, sum(d.Abonos) as TotA, sum(d.SaldoFinal) as TotSF 
	FROM TBL_CONT_CATALOGO_DETALLE d JOIN TBL_CONT_CATALOGO c ON 
		c.Cuenta = d.Cuenta AND c.Acum = '0' JOIN TBL_CONT_CATALOGO_PERIODOS p ON
			p.Mes = d.Mes and p.Ano = d.Ano and p.Cerrado = '0'
	GROUP BY d.Mes, d.Ano, substring(d.Cuenta,1,7);

	UPDATE TBL_CONT_CATALOGO_DETALLE 
	SET SaldoInicial = tm.TotSI, Retiros = tm.TotC, Abonos = tm.TotA, SaldoFinal = tm.TotSF 
	FROM _TMP_CONT_CATALOGO_DETALLE1 tm, TBL_CONT_CATALOGO_DETALLE d
	WHERE d.Mes = tm.Mes AND d.Ano = tm.Ano AND d.Cuenta = tm.Cuenta || '000000000000' and 
		d.Mes = TBL_CONT_CATALOGO_DETALLE.Mes AND d.Ano = TBL_CONT_CATALOGO_DETALLE.Ano AND d.Cuenta = TBL_CONT_CATALOGO_DETALLE.Cuenta;

	DROP TABLE _TMP_CONT_CATALOGO_DETALLE1;
	-- CREA LOS SALDOS ACUMULATIVOS DE TERCER NIVEL
	CREATE LOCAL TEMPORARY TABLE _TMP_CONT_CATALOGO_DETALLE1 AS
	SELECT d.Mes, d.Ano, substring(d.Cuenta,1,10) as Cuenta, sum(d.SaldoInicial) as TotSI, sum(d.Retiros) as TotC, sum(d.Abonos) as TotA, sum(d.SaldoFinal) as TotSF 
	FROM TBL_CONT_CATALOGO_DETALLE d JOIN TBL_CONT_CATALOGO c ON 
		c.Cuenta = d.Cuenta AND c.Acum = '0' JOIN TBL_CONT_CATALOGO_PERIODOS p ON
			p.Mes = d.Mes and p.Ano = d.Ano and p.Cerrado = '0'
	GROUP BY d.Mes, d.Ano, substring(d.Cuenta,1,10);

	UPDATE TBL_CONT_CATALOGO_DETALLE 
	SET SaldoInicial = tm.TotSI, Retiros = tm.TotC, Abonos = tm.TotA, SaldoFinal = tm.TotSF 
	FROM _TMP_CONT_CATALOGO_DETALLE1 tm, TBL_CONT_CATALOGO_DETALLE d
	WHERE d.Mes = tm.Mes AND d.Ano = tm.Ano AND d.Cuenta = tm.Cuenta || '000000000' and 
		d.Mes = TBL_CONT_CATALOGO_DETALLE.Mes AND d.Ano = TBL_CONT_CATALOGO_DETALLE.Ano AND d.Cuenta = TBL_CONT_CATALOGO_DETALLE.Cuenta;

	DROP TABLE _TMP_CONT_CATALOGO_DETALLE1;
	-- CREA LOS SALDOS ACUMULATIVOS DE CUARTO NIVEL
	CREATE LOCAL TEMPORARY TABLE _TMP_CONT_CATALOGO_DETALLE1 AS
	SELECT d.Mes, d.Ano, substring(d.Cuenta,1,13) as Cuenta, sum(d.SaldoInicial) as TotSI, sum(d.Retiros) as TotC, sum(d.Abonos) as TotA, sum(d.SaldoFinal) as TotSF 
	FROM TBL_CONT_CATALOGO_DETALLE d JOIN TBL_CONT_CATALOGO c ON 
		c.Cuenta = d.Cuenta AND c.Acum = '0' JOIN TBL_CONT_CATALOGO_PERIODOS p ON
			p.Mes = d.Mes and p.Ano = d.Ano and p.Cerrado = '0'
	GROUP BY d.Mes, d.Ano, substring(d.Cuenta,1,13);

	UPDATE TBL_CONT_CATALOGO_DETALLE 
	SET SaldoInicial = tm.TotSI, Retiros = tm.TotC, Abonos = tm.TotA, SaldoFinal = tm.TotSF 
	FROM _TMP_CONT_CATALOGO_DETALLE1 tm, TBL_CONT_CATALOGO_DETALLE d
	WHERE d.Mes = tm.Mes AND d.Ano = tm.Ano AND d.Cuenta = tm.Cuenta || '000000' and 
		d.Mes = TBL_CONT_CATALOGO_DETALLE.Mes AND d.Ano = TBL_CONT_CATALOGO_DETALLE.Ano AND d.Cuenta = TBL_CONT_CATALOGO_DETALLE.Cuenta;

	DROP TABLE _TMP_CONT_CATALOGO_DETALLE1;
	-- CREA LOS SALDOS ACUMULATIVOS DE QUINTO NIVEL
	CREATE LOCAL TEMPORARY TABLE _TMP_CONT_CATALOGO_DETALLE1 AS
	SELECT d.Mes, d.Ano, substring(d.Cuenta,1,16) as Cuenta, sum(d.SaldoInicial) as TotSI, sum(d.Retiros) as TotC, sum(d.Abonos) as TotA, sum(d.SaldoFinal) as TotSF 
	FROM TBL_CONT_CATALOGO_DETALLE d JOIN TBL_CONT_CATALOGO c ON 
		c.Cuenta = d.Cuenta AND c.Acum = '0' JOIN TBL_CONT_CATALOGO_PERIODOS p ON
			p.Mes = d.Mes and p.Ano = d.Ano and p.Cerrado = '0'
	GROUP BY d.Mes, d.Ano, substring(d.Cuenta,1,16);

	UPDATE TBL_CONT_CATALOGO_DETALLE 
	SET SaldoInicial = tm.TotSI, Retiros = tm.TotC, Abonos = tm.TotA, SaldoFinal = tm.TotSF 
	FROM _TMP_CONT_CATALOGO_DETALLE1 tm, TBL_CONT_CATALOGO_DETALLE d
	WHERE d.Mes = tm.Mes AND d.Ano = tm.Ano AND d.Cuenta = tm.Cuenta || '000' and 
		d.Mes = TBL_CONT_CATALOGO_DETALLE.Mes AND d.Ano = TBL_CONT_CATALOGO_DETALLE.Ano AND d.Cuenta = TBL_CONT_CATALOGO_DETALLE.Cuenta;

	DROP TABLE _TMP_CONT_CATALOGO_DETALLE1;
	--//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	-- Calcula el resultado del ejercicio
	UPDATE TBL_CONT_RESULTADOS
	SET Resultado =
		(select case when sum(d.SaldoFinal) - sum(d.SaldoInicial) is null then 0.0000 
			     else sum(d.SaldoFinal) - sum(d.SaldoInicial) end
	   		from TBL_CONT_CATALOGO_DETALLE d INNER JOIN TBL_CONT_CATALOGO c ON 
			d.Cuenta = c.Cuenta INNER JOIN TBL_CONT_RUBROS r ON
	   		substring(d.Cuenta,1,4) between r.CuentaInicial and r.CuentaFinal
  	   		where c.Acum = '0' and d.Mes = tm.Mes and d.Ano = tm.Ano and (r.Tipo = 'RI' or r.Tipo = 'RC' or r.Tipo = 'RG' or
				r.Tipo = 'RO'))
	FROM TBL_CONT_CATALOGO_PERIODOS tm, TBL_CONT_RESULTADOS c
	WHERE tm.Cerrado = '0' and
		tm.Mes = c.Mes and tm.Ano = c.Ano and 
		c.Mes = TBL_CONT_RESULTADOS.Mes and c.Ano = TBL_CONT_RESULTADOS.Ano;

	-- Actualiza los saldos entidades de cuentas
	_Mes := (	select Mes -- el ultimo mes abierto ( si no hay meses abiertos sera nulo )
				from TBL_CONT_CATALOGO_PERIODOS
				where Mes <> 13 and Cerrado = '0' 
				order by Ano Desc, Mes Desc limit 1);
	_Ano := (	select Ano -- igual en el a?o
				from TBL_CONT_CATALOGO_PERIODOS 
				where Mes <> 13 and Cerrado = '0' 
				order by Ano Desc, Mes Desc limit 1);

	IF _Mes is not null AND _Ano is not null
	THEN
		--raise notice 'FINAL DEL PERIODO: mes % ano %', _Mes, _Ano;

		UPDATE TBL_CONT_CATALOGO
		SET Saldo = c.SaldoFinal 
		FROM TBL_CONT_CATALOGO e, TBL_CONT_CATALOGO_DETALLE c 
		WHERE
			e.Cuenta = c.Cuenta and
			c.Cuenta =  TBL_CONT_CATALOGO.Cuenta and
			c.Ano = _Ano and c.Mes = _Mes;
	END IF;

	DROP TABLE _TMP_CONT_CATALOGO_DETALLE ;
	DROP TABLE _TMP_CONT_RESULTADOS ;
	DROP TABLE _TMP_CONT_POLIZAS_DETALLE;
	
	RETURN QUERY 
	SELECT 0 as err, 'LOS SALDOS DE CUENTAS CONTABLES SE ACTUALIZARON SATISFACTORIAMENTE'::varchar as res;
END
$BODY$
  LANGUAGE plpgsql;
--ALTER FUNCTION sp_cont_catalogo_actualizar_sdos()



--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_cont_estado_resultados AS 
 SELECT d.mes, d.ano, r.clave, r.tipo, r.nombre AS rubro, d.cuenta, c.nombre, 
        CASE
            WHEN getlevelaccount(d.cuenta) = 1 THEN 0.0
            WHEN (d.saldofinal - d.saldoinicial) < 0::numeric AND (r.tipo = 'RI'::bpchar OR r.tipo = 'RO'::bpchar) THEN abs(d.saldofinal - d.saldoinicial)
            WHEN (d.saldofinal - d.saldoinicial) > 0::numeric AND (r.tipo = 'RI'::bpchar OR r.tipo = 'RO'::bpchar) THEN - (d.saldofinal - d.saldoinicial)
            ELSE d.saldofinal - d.saldoinicial
        END AS parcial, 
        CASE
            WHEN getlevelaccount(d.cuenta) <> 1 THEN 0.0
            WHEN (d.saldofinal - d.saldoinicial) < 0::numeric AND (r.tipo = 'RI'::bpchar OR r.tipo = 'RO'::bpchar) THEN abs(d.saldofinal - d.saldoinicial)
            WHEN (d.saldofinal - d.saldoinicial) > 0::numeric AND (r.tipo = 'RI'::bpchar OR r.tipo = 'RO'::bpchar) THEN - (d.saldofinal - d.saldoinicial)
            ELSE d.saldofinal - d.saldoinicial
        END AS saldo
   FROM tbl_cont_catalogo_detalle d
   JOIN tbl_cont_catalogo c ON d.cuenta = c.cuenta
   JOIN tbl_cont_rubros r ON "substring"(d.cuenta::text, 1, 4) >= r.cuentainicial::text AND "substring"(d.cuenta::text, 1, 4) <= r.cuentafinal::text
  WHERE c.acum = B'1'::"bit" AND (r.tipo = 'RI'::bpchar OR r.tipo = 'RC'::bpchar OR r.tipo = 'RG'::bpchar OR r.tipo = 'RO'::bpchar);

--ALTER TABLE view_cont_estado_resultados


--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_cont_estado_resultados_det AS 
 SELECT d.mes, d.ano, r.tipo, getlevelaccount(d.cuenta) AS nivel, c.acum, d.cuenta, c.nombre, 
        CASE
            WHEN getlevelaccount(d.cuenta) = 1 THEN 0.0
            WHEN (d.saldofinal - d.saldoinicial) < 0::numeric AND (r.tipo = 'RI'::bpchar OR r.tipo = 'RO'::bpchar) THEN abs(d.saldofinal - d.saldoinicial)
            WHEN (d.saldofinal - d.saldoinicial) > 0::numeric AND (r.tipo = 'RI'::bpchar OR r.tipo = 'RO'::bpchar) THEN - (d.saldofinal - d.saldoinicial)
            ELSE d.saldofinal - d.saldoinicial
        END AS parcial, 
        CASE
            WHEN getlevelaccount(d.cuenta) <> 1 THEN 0.0
            WHEN (d.saldofinal - d.saldoinicial) < 0::numeric AND (r.tipo = 'RI'::bpchar OR r.tipo = 'RO'::bpchar) THEN abs(d.saldofinal - d.saldoinicial)
            WHEN (d.saldofinal - d.saldoinicial) > 0::numeric AND (r.tipo = 'RI'::bpchar OR r.tipo = 'RO'::bpchar) THEN - (d.saldofinal - d.saldoinicial)
            ELSE d.saldofinal - d.saldoinicial
        END AS saldo
   FROM tbl_cont_catalogo_detalle d
   JOIN tbl_cont_catalogo c ON d.cuenta = c.cuenta
   JOIN tbl_cont_rubros r ON "substring"(d.cuenta::text, 1, 4) >= r.cuentainicial::text AND "substring"(d.cuenta::text, 1, 4) <= r.cuentafinal::text
  WHERE r.tipo = 'RI'::bpchar OR r.tipo = 'RC'::bpchar OR r.tipo = 'RG'::bpchar OR r.tipo = 'RO'::bpchar;

--ALTER TABLE view_cont_estado_resultados_det
   

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION rep_cont_resultados(
    _mes smallint,
    _mes2 smallint,
    _ano smallint,
    _detallado bit)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_TotalVentas numeric(19,4);_TotalCostos numeric(19,4);_TotalGastos numeric(19,4);
					_TotalOtros numeric(19,4); _ResultadoXD numeric(19,4);

BEGIN

	CREATE LOCAL TEMPORARY TABLE _TMP_RESULTADOS (
		Part serial NOT NULL ,
		Clave varchar(50) NOT NULL ,
		Concepto varchar (400) NOT NULL ,
		Parcial numeric(19,4) NOT NULL ,
		Total numeric(19,4) NOT NULL ,
		Suma numeric(19,4) NOT NULL ,
		AC char (1) NOT NULL
	);
	_TotalVentas := ( select sum(Saldo) from view_cont_estado_resultados
				where Tipo = 'RI' and	Mes between _Mes and _Mes2 and Ano = _Ano );
	_TotalCostos := ( select sum(Saldo) from view_cont_estado_resultados
				where Tipo = 'RC' and	Mes between _Mes and _Mes2 and Ano = _Ano );
	_TotalGastos := ( select sum(Saldo) from view_cont_estado_resultados
				where Tipo = 'RG' and	Mes between _Mes and _Mes2 and Ano = _Ano );
	_TotalOtros := ( select sum(Saldo) from view_cont_estado_resultados
				where Tipo = 'RO' and	Mes between _Mes and _Mes2 and Ano = _Ano );
	_ResultadoXD := (_TotalVentas - _TotalCostos - _TotalGastos + _TotalOtros); 

	insert into _TMP_RESULTADOS(Clave,Concepto,Parcial,Total,Suma,AC)
	select '<b>CUENTA</b>', '<b>VENTAS_INGRESOS</b>', 0,0,0, '';
	insert into _TMP_RESULTADOS(Clave,Concepto,Parcial,Total,Suma,AC)
	select '------', '------------------------------------------------', 0, 0, coalesce(sum(Saldo),0), '' 
	from view_cont_estado_resultados 
	where Tipo = 'RI' and Saldo <> 0.0000 and Mes between _Mes and _Mes2 and Ano = _Ano;
	if _Detallado = '0'
	then
		insert into _TMP_RESULTADOS(Clave,Concepto,Parcial,Total,Suma,AC)
		select substring(Cuenta,1,4), Nombre, 0, sum(Saldo), 0, '+' 
		from view_cont_estado_resultados
		where Tipo = 'RI' and Saldo <> 0.0000 and  
		Mes between _Mes and _Mes2 and Ano = _Ano
		group by Cuenta, Nombre
		order by Cuenta;
	else
		insert into _TMP_RESULTADOS(Clave,Concepto,Parcial,Total,Suma,AC)
		select case 	when Nivel = 1 then substring(Cuenta,1,4) 
									when Nivel = 2 then '&nbsp;&nbsp;&nbsp;' || substring(Cuenta,5,3) 
									when Nivel = 3 then '&nbsp;&nbsp;&nbsp;&nbsp;' || substring(Cuenta,8,3) 
									when Nivel = 4 then '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;' || substring(Cuenta,11,3) 
									when Nivel = 5 then '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;' || substring(Cuenta,14,3) 
									else '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;' || substring(Cuenta,17,3) end, 
						case 	when Nivel = 1 then Nombre 
									when Nivel = 2 then '&nbsp;&nbsp;' || Nombre 
									when Nivel = 3 then '&nbsp;&nbsp;&nbsp;' || Nombre 
									when Nivel = 4 then '&nbsp;&nbsp;&nbsp;&nbsp;' || Nombre 
									when Nivel = 5 then '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;' || Nombre 
									else '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;' || Nombre end, 
						case when sum(Parcial) = 0.0000 then 0 else sum(Parcial) end, 
						case when sum(Saldo) = 0.0000 then 0 else sum(Saldo) end, 0, 
						case when Acum = '1' then '+' else ' ' end
		from view_cont_estado_resultados_det
		where Tipo = 'RI' and (Saldo <> 0.0000 or Parcial <> 0.0000) and  
		Mes between _Mes and _Mes2 and Ano = _Ano
		group by Nivel, Acum, Cuenta, Nombre
		order by Cuenta; 
	end if;

	insert into _TMP_RESULTADOS(Clave,Concepto,Parcial,Total,Suma,AC)
	select '&nbsp;','',0,0,0,'';

	insert into _TMP_RESULTADOS(Clave,Concepto,Parcial,Total,Suma,AC)
	select '<b>CUENTA</b>', '<b>COSTO_DE_VENTAS</b>', 0,0,0, '';
	insert into _TMP_RESULTADOS(Clave,Concepto,Parcial,Total,Suma,AC)
	select '------', '------------------------------------------------', 0, 0, coalesce(sum(Saldo),0), '' 
	from view_cont_estado_resultados 
	where Tipo = 'RC' and Saldo <> 0.0000 and Mes between _Mes and _Mes2 and Ano = _Ano;
	if _Detallado = '0'
	then
		insert into _TMP_RESULTADOS(Clave,Concepto,Parcial,Total,Suma,AC)
		select substring(Cuenta,1,4), Nombre, 0, sum(Saldo), 0, '+' from view_cont_estado_resultados
		where Tipo = 'RC' and Saldo <> 0.0000 and  
		Mes between _Mes and _Mes2 and Ano = _Ano
		group by Cuenta, Nombre
		order by Cuenta;
	else
		insert into _TMP_RESULTADOS(Clave,Concepto,Parcial,Total,Suma,AC)
		select case 	when Nivel = 1 then substring(Cuenta,1,4) 
									when Nivel = 2 then '&nbsp;&nbsp;&nbsp;' || substring(Cuenta,5,3) 
									when Nivel = 3 then '&nbsp;&nbsp;&nbsp;&nbsp;' || substring(Cuenta,8,3) 
									when Nivel = 4 then '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;' || substring(Cuenta,11,3) 
									when Nivel = 5 then '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;' || substring(Cuenta,14,3) 
									else '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;' || substring(Cuenta,17,3) end, 
						case 	when Nivel = 1 then Nombre 
									when Nivel = 2 then '&nbsp;&nbsp;' || Nombre 
									when Nivel = 3 then '&nbsp;&nbsp;&nbsp;' || Nombre 
									when Nivel = 4 then '&nbsp;&nbsp;&nbsp;&nbsp;' || Nombre 
									when Nivel = 5 then '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;' || Nombre 
									else '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;' || Nombre end, 
						case when sum(Parcial) = 0.0000 then 0 else sum(Parcial) end, 
						case when sum(Saldo) = 0.0000 then 0 else sum(Saldo) end, 0, 
						case when Acum = '1' then '+' else ' ' end
		from view_cont_estado_resultados_det
		where Tipo = 'RC' and (Saldo <> 0.0000 or Parcial <> 0.0000) and  
		Mes between _Mes and _Mes2 and Ano = _Ano
		group by Nivel, Acum, Cuenta, Nombre
		order by Cuenta; 
	end if;

	insert into _TMP_RESULTADOS(Clave,Concepto,Parcial,Total,Suma,AC)
	select '&nbsp;','',0,0,0,'';

	insert into _TMP_RESULTADOS(Clave,Concepto,Parcial,Total,Suma,AC)
	select '','<b>UTILIDAD O PERDIDA BRUTA:</b>', 0, 0, coalesce((_TotalVentas - _TotalCostos),0), '';

	insert into _TMP_RESULTADOS(Clave,Concepto,Parcial,Total,Suma,AC)
	select '&nbsp;','',0,0,0,'';

	insert into _TMP_RESULTADOS(Clave,Concepto,Parcial,Total,Suma,AC)
	select '<b>CUENTA</b>', '<b>GASTOS_DE_OPERACION</b>', 0,0,0, '';
	insert into _TMP_RESULTADOS(Clave,Concepto,Parcial,Total,Suma,AC)
	select '------', '------------------------------------------------', 0, 0, coalesce(sum(Saldo),0), '' 
	from view_cont_estado_resultados 
	where Tipo = 'RG' and Saldo <> 0.0000 and Mes between _Mes and _Mes2 and Ano = _Ano; 
	if _Detallado = '0'
	then
		insert into _TMP_RESULTADOS(Clave,Concepto,Parcial,Total,Suma,AC)
		select substring(Cuenta,1,4), Nombre, 0, sum(Saldo), 0, '+' from view_cont_estado_resultados
		where Tipo = 'RG' and Saldo <> 0.0000 and  
		Mes between _Mes and _Mes2 and Ano = _Ano
		group by Cuenta, Nombre
		order by Cuenta;
	else
		insert into _TMP_RESULTADOS(Clave,Concepto,Parcial,Total,Suma,AC)
		select case 	when Nivel = 1 then substring(Cuenta,1,4) 
									when Nivel = 2 then '&nbsp;&nbsp;&nbsp;' || substring(Cuenta,5,3) 
									when Nivel = 3 then '&nbsp;&nbsp;&nbsp;&nbsp;' || substring(Cuenta,8,3) 
									when Nivel = 4 then '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;' || substring(Cuenta,11,3) 
									when Nivel = 5 then '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;' || substring(Cuenta,14,3) 
									else '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;' || substring(Cuenta,17,3) end, 
						case 	when Nivel = 1 then Nombre 
									when Nivel = 2 then '&nbsp;&nbsp;' || Nombre 
									when Nivel = 3 then '&nbsp;&nbsp;&nbsp;' || Nombre 
									when Nivel = 4 then '&nbsp;&nbsp;&nbsp;&nbsp;' || Nombre 
									when Nivel = 5 then '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;' || Nombre 
									else '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;' || Nombre end, 
						case when sum(Parcial) = 0.0000 then 0 else sum(Parcial) end, 
						case when sum(Saldo) = 0.0000 then 0 else sum(Saldo) end, 0, 
						case when Acum = '1' then '+' else ' ' end
		from view_cont_estado_resultados_det
		where Tipo = 'RG' and (Saldo <> 0.0000 or Parcial <> 0.0000) and  
		Mes between _Mes and _Mes2 and Ano = _Ano
		group by Nivel, Acum, Cuenta, Nombre
		order by Cuenta; 
	end if;

	insert into _TMP_RESULTADOS(Clave,Concepto,Parcial,Total,Suma,AC)
	select '&nbsp;','',0,0,0,'';

	insert into _TMP_RESULTADOS(Clave,Concepto,Parcial,Total,Suma,AC)
	select '', '<b>UTILIDAD O PERDIDA OPERACIONAL:</b>', 0, 0, coalesce((_TotalVentas - _TotalCostos - _TotalGastos),0), '';

	insert into _TMP_RESULTADOS(Clave,Concepto,Parcial,Total,Suma,AC)
	select '&nbsp;','',0,0,0,'';

	insert into _TMP_RESULTADOS(Clave,Concepto,Parcial,Total,Suma,AC)
	select '<b>CUENTA</b>', '<b>OTROS_GASTOS_Y_PRODUCTOS</b>', 0,0,0, '';
	insert into _TMP_RESULTADOS(Clave,Concepto,Parcial,Total,Suma,AC)
	select '------', '------------------------------------------------', 0, 0, coalesce(sum(Saldo),0), ''
	from view_cont_estado_resultados 
	where Tipo = 'RO' and Saldo <> 0.0000 and Mes between _Mes and _Mes2 and Ano = _Ano;
	if _Detallado = '0'
	then
		insert into _TMP_RESULTADOS(Clave,Concepto,Parcial,Total,Suma,AC)
		select substring(Cuenta,1,4), Nombre, 0, sum(Saldo), 0, '+' from view_cont_estado_resultados
		where Tipo = 'RO' and Saldo <> 0.0000 and  
		Mes between _Mes and _Mes2 and Ano = _Ano
		group by Cuenta, Nombre
		order by Cuenta;
	else
		insert into _TMP_RESULTADOS(Clave,Concepto,Parcial,Total,Suma,AC)
		select case 	when Nivel = 1 then substring(Cuenta,1,4) 
									when Nivel = 2 then '&nbsp;&nbsp;&nbsp;' || substring(Cuenta,5,3) 
									when Nivel = 3 then '&nbsp;&nbsp;&nbsp;&nbsp;' || substring(Cuenta,8,3) 
									when Nivel = 4 then '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;' || substring(Cuenta,11,3) 
									when Nivel = 5 then '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;' || substring(Cuenta,14,3) 
									else '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;' || substring(Cuenta,17,3) end, 
						case 	when Nivel = 1 then Nombre 
									when Nivel = 2 then '&nbsp;&nbsp;' || Nombre 
									when Nivel = 3 then '&nbsp;&nbsp;&nbsp;' || Nombre 
									when Nivel = 4 then '&nbsp;&nbsp;&nbsp;&nbsp;' || Nombre 
									when Nivel = 5 then '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;' || Nombre 
									else '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;' || Nombre end, 
						case when sum(Parcial) = 0.0000 then 0 else sum(Parcial) end, 
						case when sum(Saldo) = 0.0000 then 0 else sum(Saldo) end, 0, 
						case when Acum = '1' then '+' else ' ' end
		from view_cont_estado_resultados_det
		where Tipo = 'RO' and (Saldo <> 0.0000 or Parcial <> 0.0000) and  
		Mes between _Mes and _Mes2 and Ano = _Ano
		group by Nivel, Acum, Cuenta, Nombre
		order by Cuenta; 
	end if;

	insert into _TMP_RESULTADOS(Clave,Concepto,Parcial,Total,Suma,AC)
	select '&nbsp;','',0,0,0,'';

	insert into _TMP_RESULTADOS(Clave,Concepto,Parcial,Total,Suma,AC)
	select '','<b>UTILIDAD O PERDIDA NETA:</b>', 0, 0, coalesce((_TotalVentas - _TotalCostos - _TotalGastos + _TotalOtros),0), '';

	insert into _TMP_RESULTADOS(Clave,Concepto,Parcial,Total,Suma,AC)
	select '&nbsp;','',0,0,0,'';

	RETURN QUERY
	select Clave, Concepto, Parcial, Total, Suma, AC from _TMP_RESULTADOS
	order by part ASC;

	DROP TABLE _TMP_RESULTADOS;
END
$BODY$
  LANGUAGE plpgsql;
--ALTER FUNCTION rep_cont_resultados(smallint, smallint, smallint, bit)


--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_cont_balance_general AS 
 SELECT d.mes, 
    d.ano, 
    r.clave, 
    r.tipo, 
    r.nombre AS rubro, 
    d.cuenta, 
    c.nombre, 
        CASE
            WHEN getlevelaccount(d.cuenta) = 1 THEN 0.0
            WHEN d.saldofinal < 0::numeric AND (r.tipo = 'PC'::bpchar OR r.tipo = 'PL'::bpchar OR r.tipo = 'PD'::bpchar OR r.tipo = 'CC'::bpchar) THEN abs(d.saldofinal)
            WHEN d.saldofinal > 0::numeric AND (r.tipo = 'PC'::bpchar OR r.tipo = 'PL'::bpchar OR r.tipo = 'PD'::bpchar OR r.tipo = 'CC'::bpchar) THEN - d.saldofinal
            ELSE d.saldofinal
        END AS parcial, 
        CASE
            WHEN getlevelaccount(d.cuenta) <> 1 THEN 0.0
            WHEN d.saldofinal < 0::numeric AND (r.tipo = 'PC'::bpchar OR r.tipo = 'PL'::bpchar OR r.tipo = 'PD'::bpchar OR r.tipo = 'CC'::bpchar) THEN abs(d.saldofinal)
            WHEN d.saldofinal > 0::numeric AND (r.tipo = 'PC'::bpchar OR r.tipo = 'PL'::bpchar OR r.tipo = 'PD'::bpchar OR r.tipo = 'CC'::bpchar) THEN - d.saldofinal
            ELSE d.saldofinal
        END AS saldo
   FROM tbl_cont_catalogo_detalle d
   JOIN tbl_cont_catalogo c ON d.cuenta = c.cuenta
   JOIN tbl_cont_rubros r ON "substring"(d.cuenta::text, 1, 4) >= r.cuentainicial::text AND "substring"(d.cuenta::text, 1, 4) <= r.cuentafinal::text
  WHERE c.acum = B'1'::"bit" AND d.saldofinal <> 0.0 AND (r.tipo = 'AC'::bpchar OR r.tipo = 'AF'::bpchar OR r.tipo = 'AD'::bpchar OR r.tipo = 'PC'::bpchar OR r.tipo = 'PL'::bpchar OR r.tipo = 'PD'::bpchar OR r.tipo = 'CC'::bpchar);

--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_cont_balance_general_orden AS 
 SELECT d.mes, d.ano, r.clave, r.tipo, r.nombre AS rubro, getlevelaccount(d.cuenta) AS nivel, d.cuenta, c.nombre, d.retiros AS debe, d.abonos AS haber
   FROM tbl_cont_catalogo_detalle d
   JOIN tbl_cont_catalogo c ON d.cuenta = c.cuenta
   JOIN tbl_cont_rubros r ON "substring"(d.cuenta::text, 1, 4) >= r.cuentainicial::text AND "substring"(d.cuenta::text, 1, 4) <= r.cuentafinal::text
  WHERE c.acum = B'1'::"bit" AND d.retiros <> 0.0 AND r.tipo = 'IP'::bpchar;

--ALTER TABLE view_cont_balance_general_orden

--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_cont_balance_general_det_orden AS 
 SELECT d.mes, d.ano, r.tipo, getlevelaccount(d.cuenta) AS nivel, c.acum, d.cuenta, c.nombre, d.retiros AS debe, d.abonos AS haber
   FROM tbl_cont_catalogo_detalle d
   JOIN tbl_cont_catalogo c ON d.cuenta = c.cuenta
   JOIN tbl_cont_rubros r ON "substring"(d.cuenta::text, 1, 4) >= r.cuentainicial::text AND "substring"(d.cuenta::text, 1, 4) <= r.cuentafinal::text
  WHERE d.retiros <> 0.0 AND r.tipo = 'IP'::bpchar;

--ALTER TABLE view_cont_balance_general_det_orden

--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_cont_balance_general_det AS 
 SELECT d.mes, 
    d.ano, 
    r.tipo, 
    getlevelaccount(d.cuenta) AS nivel, 
    c.acum, 
    d.cuenta, 
    c.nombre, 
        CASE
            WHEN getlevelaccount(d.cuenta) = 1 THEN 0.0
            WHEN d.saldofinal < 0::numeric AND (r.tipo = 'PC'::bpchar OR r.tipo = 'PL'::bpchar OR r.tipo = 'PD'::bpchar OR r.tipo = 'CC'::bpchar) THEN abs(d.saldofinal)
            WHEN d.saldofinal > 0::numeric AND (r.tipo = 'PC'::bpchar OR r.tipo = 'PL'::bpchar OR r.tipo = 'PD'::bpchar OR r.tipo = 'CC'::bpchar) THEN - d.saldofinal
            ELSE d.saldofinal
        END AS parcial, 
        CASE
            WHEN getlevelaccount(d.cuenta) <> 1 THEN 0.0
            WHEN d.saldofinal < 0::numeric AND (r.tipo = 'PC'::bpchar OR r.tipo = 'PL'::bpchar OR r.tipo = 'PD'::bpchar OR r.tipo = 'CC'::bpchar) THEN abs(d.saldofinal)
            WHEN d.saldofinal > 0::numeric AND (r.tipo = 'PC'::bpchar OR r.tipo = 'PL'::bpchar OR r.tipo = 'PD'::bpchar OR r.tipo = 'CC'::bpchar) THEN - d.saldofinal
            ELSE d.saldofinal
        END AS saldo
   FROM tbl_cont_catalogo_detalle d
   JOIN tbl_cont_catalogo c ON d.cuenta = c.cuenta
   JOIN tbl_cont_rubros r ON "substring"(d.cuenta::text, 1, 4) >= r.cuentainicial::text AND "substring"(d.cuenta::text, 1, 4) <= r.cuentafinal::text
  WHERE d.saldofinal <> 0.0 AND (r.tipo = 'AC'::bpchar OR r.tipo = 'AF'::bpchar OR r.tipo = 'AD'::bpchar OR r.tipo = 'PC'::bpchar OR r.tipo = 'PL'::bpchar OR r.tipo = 'PD'::bpchar OR r.tipo = 'CC'::bpchar);

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION rep_cont_balance(
    _mes smallint,
    _ano smallint,
    _detallado bit)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_TotalAC numeric(19,4); _TotalAD numeric(19,4); _TotalAF numeric(19,4); _TotalActivo numeric(19,4); _TotalPC numeric(19,4);
		_TotalPL numeric(19,4); _TotalPD numeric(19,4); _TotalPasivo numeric(19,4); _TotalCC numeric(19,4); _ResultadoEA numeric(19,4);
BEGIN

	CREATE LOCAL TEMPORARY TABLE _TMP_BALANCE (
		Part serial NOT NULL ,
		Clave varchar (50) NOT NULL ,
		Concepto varchar (400) NOT NULL ,
		Parcial numeric(19,4) NOT NULL ,
		Total numeric(19,4) NOT NULL ,
		Suma numeric(19,4) NOT NULL ,
		AC char (1) NOT NULL
	);

	_TotalAC := ( select coalesce(sum(Saldo),0) from view_cont_balance_general
				where Tipo = 'AC' and	Mes = _Mes and Ano = _Ano );
	_TotalAF := ( select coalesce(sum(Saldo),0) from view_cont_balance_general
				where Tipo = 'AF' and	Mes = _Mes and Ano = _Ano );
	_TotalAD := ( select coalesce(sum(Saldo),0) from view_cont_balance_general
				where Tipo = 'AD' and	Mes = _Mes and Ano = _Ano );
	_TotalPC := ( select coalesce(sum(Saldo),0) from view_cont_balance_general
				where Tipo = 'PC' and	Mes = _Mes and Ano = _Ano );
	_TotalPL := ( select coalesce(sum(Saldo),0) from view_cont_balance_general
				where Tipo = 'PL' and	Mes = _Mes and Ano = _Ano );
	_TotalPD := ( select coalesce(sum(Saldo),0) from view_cont_balance_general
				where Tipo = 'PD' and	Mes = _Mes and Ano = _Ano );
	_TotalCC := ( select coalesce(sum(Saldo),0) from view_cont_balance_general
				where Tipo = 'CC' and	Mes = _Mes and Ano = _Ano );

	_ResultadoEA = case when (	select coalesce(sum(Resultado),0) from TBL_CONT_RESULTADOS 
																	where Ano < _Ano or (Ano = _Ano and Mes <= _Mes) ) <= 0.0  
													then	abs( (	select coalesce(sum(Resultado),0) from TBL_CONT_RESULTADOS 
																				where Ano < _Ano or (Ano = _Ano and Mes <= _Mes) ) )
													else -((	select coalesce(sum(Resultado),0) from TBL_CONT_RESULTADOS 
																		where Ano < _Ano or (Ano = _Ano and Mes <= _Mes) ) )
													end;

	insert into _TMP_BALANCE(Clave,Concepto,Parcial,Total,Suma,AC)
	select '<b>CUENTA</b>', '<b>ACTIVO_CIRCULANTE</b>',0,0,0,'';
	insert into _TMP_BALANCE(Clave,Concepto,Parcial,Total,Suma,AC)
	select '------', '------------------------------------------------',0,0,coalesce(sum(Saldo),0), '' from view_cont_balance_general
	where Tipo = 'AC' and Saldo <> 0.0000 and  
		Mes = _Mes and Ano = _Ano;
	if _Detallado = '0'
	then
		insert into _TMP_BALANCE(Clave,Concepto,Parcial,Total,Suma,AC)
		select substring(Cuenta,1,4), Nombre, 0, sum(Saldo), 0, '+' from view_cont_balance_general
		where Tipo = 'AC' and Saldo <> 0.0000 and  
		Mes = _Mes and Ano = _Ano
		group by Cuenta, Nombre
		order by Cuenta;
	else
		insert into _TMP_BALANCE(Clave,Concepto,Parcial,Total,Suma,AC)
		select case 	when Nivel = 1 then substring(Cuenta,1,4) 
									when Nivel = 2 then '&nbsp;&nbsp;&nbsp;' || substring(Cuenta,5,3) 
									when Nivel = 3 then '&nbsp;&nbsp;&nbsp;&nbsp;' || substring(Cuenta,8,3) 
									when Nivel = 4 then '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;' || substring(Cuenta,11,3) 
									when Nivel = 5 then '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;' || substring(Cuenta,14,3) 
									else '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;' || substring(Cuenta,17,3) end, 
						case 	when Nivel = 1 then Nombre 
									when Nivel = 2 then '&nbsp;&nbsp;' || Nombre 
									when Nivel = 3 then '&nbsp;&nbsp;&nbsp;' || Nombre 
									when Nivel = 4 then '&nbsp;&nbsp;&nbsp;&nbsp;' || Nombre 
									when Nivel = 5 then '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;' || Nombre 
									else '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;' || Nombre end, 
						case when sum(Parcial) = 0.0000 then 0 else sum(Parcial) end, 
						case when sum(Saldo) = 0.0000 then 0 else sum(Saldo) end, 0,
						case when Acum = '1' then '+' else ' ' end
		from view_cont_balance_general_det
		where Tipo = 'AC' and (Saldo <> 0.0000 or Parcial <> 0.0000) and  
		Mes = _Mes and Ano = _Ano
		group by Nivel, Acum, Cuenta, Nombre
		order by Cuenta; 
	end if;

	insert into _TMP_BALANCE(Clave,Concepto,Parcial,Total,Suma,AC)
	select '&nbsp;','',0,0,0,'';

	insert into _TMP_BALANCE(Clave,Concepto,Parcial,Total,Suma,AC)
	select '<b>CUENTA</b>', '<b>ACTIVO_FIJO</b>',0,0,0,'';
	insert into _TMP_BALANCE(Clave,Concepto,Parcial,Total,Suma,AC)
	select '------', '------------------------------------------------',0,0,coalesce(sum(Saldo),0), '' from view_cont_balance_general
	where Tipo = 'AF' and Saldo <> 0.0000 and  
		Mes = _Mes and Ano = _Ano;
	if _Detallado = '0'
	then
		insert into _TMP_BALANCE(Clave,Concepto,Parcial,Total,Suma,AC)
		select substring(Cuenta,1,4), Nombre, 0, sum(Saldo), 0, '+' from view_cont_balance_general
		where Tipo = 'AF' and Saldo <> 0.0000 and  
		Mes = _Mes and Ano = _Ano
		group by Cuenta, Nombre
		order by Cuenta;
	else
		insert into _TMP_BALANCE(Clave,Concepto,Parcial,Total,Suma,AC)
		select case 	when Nivel = 1 then substring(Cuenta,1,4) 
									when Nivel = 2 then '&nbsp;&nbsp;&nbsp;' || substring(Cuenta,5,3) 
									when Nivel = 3 then '&nbsp;&nbsp;&nbsp;&nbsp;' || substring(Cuenta,8,3) 
									when Nivel = 4 then '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;' || substring(Cuenta,11,3) 
									when Nivel = 5 then '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;' || substring(Cuenta,14,3) 
									else '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;' || substring(Cuenta,17,3) end, 
						case 	when Nivel = 1 then Nombre 
									when Nivel = 2 then '&nbsp;&nbsp;' || Nombre 
									when Nivel = 3 then '&nbsp;&nbsp;&nbsp;' || Nombre 
									when Nivel = 4 then '&nbsp;&nbsp;&nbsp;&nbsp;' || Nombre 
									when Nivel = 5 then '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;' || Nombre 
									else '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;' || Nombre end, 
						case when sum(Parcial) = 0.0000 then 0 else sum(Parcial) end, 
						case when sum(Saldo) = 0.0000 then 0 else sum(Saldo) end, 0,
						case when Acum = '1' then '+' else ' ' end
		from view_cont_balance_general_det
		where Tipo = 'AF' and (Saldo <> 0.0000 or Parcial <> 0.0000) and  
		Mes = _Mes and Ano = _Ano
		group by Nivel, Acum, Cuenta, Nombre
		order by Cuenta; 
	end if;

	insert into _TMP_BALANCE(Clave,Concepto,Parcial,Total,Suma,AC)
	select '&nbsp;','',0,0,0, '';

	insert into _TMP_BALANCE(Clave,Concepto,Parcial,Total,Suma,AC)
	select '<b>CUENTA</b>', '<b>ACTIVO_DIFERIDO</b>',0,0,0,'';
	insert into _TMP_BALANCE(Clave,Concepto,Parcial,Total,Suma,AC)
	select '------', '------------------------------------------------',0,0,coalesce(sum(Saldo),0), '' from view_cont_balance_general
	where Tipo = 'AD' and Saldo <> 0.0000 and  
		Mes = _Mes and Ano = _Ano;
	if _Detallado = '0'
	then
		insert into _TMP_BALANCE(Clave,Concepto,Parcial,Total,Suma,AC)
		select substring(Cuenta,1,4), Nombre, 0, sum(Saldo), 0, '+' from view_cont_balance_general
		where Tipo = 'AD' and Saldo <> 0.0000 and  
		Mes = _Mes and Ano = _Ano
		group by Cuenta, Nombre
		order by Cuenta;
	else
		insert into _TMP_BALANCE(Clave,Concepto,Parcial,Total,Suma,AC)
		select case 	when Nivel = 1 then substring(Cuenta,1,4) 
									when Nivel = 2 then '&nbsp;&nbsp;&nbsp;' || substring(Cuenta,5,3) 
									when Nivel = 3 then '&nbsp;&nbsp;&nbsp;&nbsp;' || substring(Cuenta,8,3) 
									when Nivel = 4 then '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;' || substring(Cuenta,11,3) 
									when Nivel = 5 then '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;' || substring(Cuenta,14,3) 
									else '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;' || substring(Cuenta,17,3) end, 
						case 	when Nivel = 1 then Nombre 
									when Nivel = 2 then '&nbsp;&nbsp;' || Nombre 
									when Nivel = 3 then '&nbsp;&nbsp;&nbsp;' || Nombre 
									when Nivel = 4 then '&nbsp;&nbsp;&nbsp;&nbsp;' || Nombre 
									when Nivel = 5 then '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;' || Nombre 
									else '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;' || Nombre end, 
						case when sum(Parcial) = 0.0000 then 0 else sum(Parcial) end, 
						case when sum(Saldo) = 0.0000 then 0 else sum(Saldo) end, 0,
						case when Acum = '1' then '+' else ' ' end
		from view_cont_balance_general_det
		where Tipo = 'AD' and (Saldo <> 0.0000 or Parcial <> 0.0000) and  
		Mes = _Mes and Ano = _Ano
		group by Nivel, Acum, Cuenta, Nombre
		order by Cuenta;
	end if;

	insert into _TMP_BALANCE(Clave,Concepto,Parcial,Total,Suma,AC)
	select '&nbsp;','',0,0,0, '';

	insert into _TMP_BALANCE(Clave,Concepto,Parcial,Total,Suma,AC)
	select '','<b>TOTAL DE ACTIVO:</b>', 0, 0,coalesce((_TotalAC + _TotalAF + _TotalAD),0), '';

	insert into _TMP_BALANCE(Clave,Concepto,Parcial,Total,Suma,AC)
	select '&nbsp;','',0,0,0,'';

	-- PASIVO

	insert into _TMP_BALANCE(Clave,Concepto,Parcial,Total,Suma,AC)
	select '<b>CUENTA</b>', '<b>PASIVO_A_CORTO_PLAZO</b>',0,0,0,'';
	insert into _TMP_BALANCE(Clave,Concepto,Parcial,Total,Suma,AC)
	select '------', '------------------------------------------------',0,0,coalesce(sum(Saldo),0), '' from view_cont_balance_general
	where Tipo = 'PC' and Saldo <> 0.0000 and  
		Mes = _Mes and Ano = _Ano;
	if _Detallado = '0'
	then
		insert into _TMP_BALANCE(Clave,Concepto,Parcial,Total,Suma,AC)
		select substring(Cuenta,1,4), Nombre, 0, sum(Saldo), 0, '+' from view_cont_balance_general
		where Tipo = 'PC' and Saldo <> 0.0000 and  
		Mes = _Mes and Ano = _Ano
		group by Cuenta, Nombre
		order by Cuenta;
	else
		insert into _TMP_BALANCE(Clave,Concepto,Parcial,Total,Suma,AC)
		select case 	when Nivel = 1 then substring(Cuenta,1,4) 
									when Nivel = 2 then '&nbsp;&nbsp;&nbsp;' || substring(Cuenta,5,3) 
									when Nivel = 3 then '&nbsp;&nbsp;&nbsp;&nbsp;' || substring(Cuenta,8,3) 
									when Nivel = 4 then '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;' || substring(Cuenta,11,3) 
									when Nivel = 5 then '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;' || substring(Cuenta,14,3) 
									else '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;' || substring(Cuenta,17,3) end, 
						case 	when Nivel = 1 then Nombre 
									when Nivel = 2 then '&nbsp;&nbsp;' || Nombre 
									when Nivel = 3 then '&nbsp;&nbsp;&nbsp;' || Nombre 
									when Nivel = 4 then '&nbsp;&nbsp;&nbsp;&nbsp;' || Nombre 
									when Nivel = 5 then '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;' || Nombre 
									else '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;' || Nombre end, 
						case when sum(Parcial) = 0.0000 then 0 else sum(Parcial) end, 
						case when sum(Saldo) = 0.0000 then 0 else sum(Saldo) end, 0,
						case when Acum = '1' then '+' else ' ' end
		from view_cont_balance_general_det
		where Tipo = 'PC' and (Saldo <> 0.0000 or Parcial <> 0.0000) and  
		Mes = _Mes and Ano = _Ano
		group by Nivel, Acum, Cuenta, Nombre
		order by Cuenta;
	end if;

	insert into _TMP_BALANCE(Clave,Concepto,Parcial,Total,Suma,AC)
	select '&nbsp;','',0,0,0,'';

	insert into _TMP_BALANCE(Clave,Concepto,Parcial,Total,Suma,AC)
	select '<b>CUENTA</b>', '<b>PASIVO_A_LARGO_PLAZO</b>',0,0,0,'';
	insert into _TMP_BALANCE(Clave,Concepto,Parcial,Total,Suma,AC)
	select '------', '------------------------------------------------',0,0,coalesce(sum(Saldo),0), '' from view_cont_balance_general
	where Tipo = 'PL' and Saldo <> 0.0000 and  
		Mes = _Mes and Ano = _Ano;
	if _Detallado = '0'
	then
		insert into _TMP_BALANCE(Clave,Concepto,Parcial,Total,Suma,AC)
		select substring(Cuenta,1,4), Nombre, 0, sum(Saldo), 0, '+' from view_cont_balance_general
		where Tipo = 'PL' and Saldo <> 0.0000 and  
		Mes = _Mes and Ano = _Ano
		group by Cuenta, Nombre
		order by Cuenta;
	else
		insert into _TMP_BALANCE(Clave,Concepto,Parcial,Total,Suma,AC)
		select case 	when Nivel = 1 then substring(Cuenta,1,4) 
									when Nivel = 2 then '&nbsp;&nbsp;&nbsp;' || substring(Cuenta,5,3) 
									when Nivel = 3 then '&nbsp;&nbsp;&nbsp;&nbsp;' || substring(Cuenta,8,3) 
									when Nivel = 4 then '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;' || substring(Cuenta,11,3) 
									when Nivel = 5 then '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;' || substring(Cuenta,14,3) 
									else '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;' || substring(Cuenta,17,3) end, 
						case 	when Nivel = 1 then Nombre 
									when Nivel = 2 then '&nbsp;&nbsp;' || Nombre 
									when Nivel = 3 then '&nbsp;&nbsp;&nbsp;' || Nombre 
									when Nivel = 4 then '&nbsp;&nbsp;&nbsp;&nbsp;' || Nombre 
									when Nivel = 5 then '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;' || Nombre 
									else '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;' || Nombre end, 
						case when sum(Parcial) = 0.0000 then 0 else sum(Parcial) end, 
						case when sum(Saldo) = 0.0000 then 0 else sum(Saldo) end, 0,
						case when Acum = '1' then '+' else ' ' end
		from view_cont_balance_general_det
		where Tipo = 'PL' and (Saldo <> 0.0000 or Parcial <> 0.0000) and  
		Mes = _Mes and Ano = _Ano
		group by Nivel, Acum, Cuenta, Nombre
		order by Cuenta; 
	end if;

	insert into _TMP_BALANCE(Clave,Concepto,Parcial,Total,Suma,AC)
	select '&nbsp;','',0,0,0, '';

	insert into _TMP_BALANCE(Clave,Concepto,Parcial,Total,Suma,AC)
	select '<b>CUENTA</b>', '<b>PASIVO_DIFERIDO</b>',0,0,0,'';
	insert into _TMP_BALANCE(Clave,Concepto,Parcial,Total,Suma,AC)
	select '------', '------------------------------------------------',0,0,coalesce(sum(Saldo),0), '' from view_cont_balance_general
	where Tipo = 'PD' and Saldo <> 0.0000 and  
		Mes = _Mes and Ano = _Ano;
	if _Detallado = '0'
	then
		insert into _TMP_BALANCE(Clave,Concepto,Parcial,Total,Suma,AC)
		select substring(Cuenta,1,4), Nombre, 0, sum(Saldo), 0, '+' from view_cont_balance_general
		where Tipo = 'PD' and Saldo <> 0.0000 and  
		Mes = _Mes and Ano = _Ano
		group by Cuenta, Nombre
		order by Cuenta;
	else
		insert into _TMP_BALANCE(Clave,Concepto,Parcial,Total,Suma,AC)
		select case 	when Nivel = 1 then substring(Cuenta,1,4) 
									when Nivel = 2 then '&nbsp;&nbsp;&nbsp;' || substring(Cuenta,5,3) 
									when Nivel = 3 then '&nbsp;&nbsp;&nbsp;&nbsp;' || substring(Cuenta,8,3) 
									when Nivel = 4 then '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;' || substring(Cuenta,11,3) 
									when Nivel = 5 then '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;' || substring(Cuenta,14,3) 
									else '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;' || substring(Cuenta,17,3) end, 
						case 	when Nivel = 1 then Nombre 
									when Nivel = 2 then '&nbsp;&nbsp;' || Nombre 
									when Nivel = 3 then '&nbsp;&nbsp;&nbsp;' || Nombre 
									when Nivel = 4 then '&nbsp;&nbsp;&nbsp;&nbsp;' || Nombre 
									when Nivel = 5 then '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;' || Nombre 
									else '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;' || Nombre end, 
						case when sum(Parcial) = 0.0000 then 0 else sum(Parcial) end, 
						case when sum(Saldo) = 0.0000 then 0 else sum(Saldo) end, 0,
						case when Acum = '1' then '+' else ' ' end
		from view_cont_balance_general_det
		where Tipo = 'PD' and (Saldo <> 0.0000 or Parcial <> 0.0000) and  
		Mes = _Mes and Ano = _Ano
		group by Nivel, Acum, Cuenta, Nombre
		order by Cuenta; 
	end if;

	insert into _TMP_BALANCE(Clave,Concepto,Parcial,Total,Suma,AC)
	select '&nbsp;','',0,0,0, '';

	insert into _TMP_BALANCE(Clave,Concepto,Parcial,Total,Suma,AC)
	select '','<b>TOTAL DE PASIVO:</b>', 0, 0, coalesce((_TotalPC + _TotalPL + _TotalPD),0), '';

	insert into _TMP_BALANCE(Clave,Concepto,Parcial,Total,Suma,AC)
	select '&nbsp;','',0,0,0,'';

	insert into _TMP_BALANCE(Clave,Concepto,Parcial,Total,Suma,AC)
	select '<b>CUENTA</b>', '<b>CAPITAL_CONTABLE</b>',0,0,0,'';
	insert into _TMP_BALANCE(Clave,Concepto,Parcial,Total,Suma,AC)
	select '------', '------------------------------------------------',0,0,coalesce(sum(Saldo),0), '' from view_cont_balance_general
	where Tipo = 'CC' and Saldo <> 0.0000 and  
		Mes = _Mes and Ano = _Ano;
	if _Detallado = '0'
	then
		insert into _TMP_BALANCE(Clave,Concepto,Parcial,Total,Suma,AC)
		select substring(Cuenta,1,4), Nombre, 0, sum(Saldo), 0, '+' from view_cont_balance_general
		where Tipo = 'CC' and Saldo <> 0.0000 and  
		Mes = _Mes and Ano = _Ano
		group by Cuenta, Nombre
		order by Cuenta;
	else
		insert into _TMP_BALANCE(Clave,Concepto,Parcial,Total,Suma,AC)
		select case 	when Nivel = 1 then substring(Cuenta,1,4) 
									when Nivel = 2 then '&nbsp;&nbsp;&nbsp;' || substring(Cuenta,5,3) 
									when Nivel = 3 then '&nbsp;&nbsp;&nbsp;&nbsp;' || substring(Cuenta,8,3) 
									when Nivel = 4 then '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;' || substring(Cuenta,11,3) 
									when Nivel = 5 then '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;' || substring(Cuenta,14,3) 
									else '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;' || substring(Cuenta,17,3) end, 
						case 	when Nivel = 1 then Nombre 
									when Nivel = 2 then '&nbsp;&nbsp;' || Nombre 
									when Nivel = 3 then '&nbsp;&nbsp;&nbsp;' || Nombre 
									when Nivel = 4 then '&nbsp;&nbsp;&nbsp;&nbsp;' || Nombre 
									when Nivel = 5 then '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;' || Nombre 
									else '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;' || Nombre end, 
						case when sum(Parcial) = 0.0000 then 0 else sum(Parcial) end, 
						case when sum(Saldo) = 0.0000 then 0 else sum(Saldo) end, 0,
						case when Acum = '1' then '+' else ' ' end
		from view_cont_balance_general_det
		where Tipo = 'CC' and (Saldo <> 0.0000 or Parcial <> 0.0000) and  
		Mes = _Mes and Ano = _Ano
		group by Nivel, Acum, Cuenta, Nombre
		order by Cuenta;
	end if;
	insert into _TMP_BALANCE(Clave,Concepto,Parcial,Total,Suma,AC)
	select '','RESULTADO_DE_EJERCICIOS_ANTERIORES', 0,_ResultadoEA,0, '+';
	if _Detallado = '1'
	then
		insert into _TMP_BALANCE(Clave,Concepto,Parcial,Total,Suma,AC)
		select '','&nbsp;&nbsp;EJERCICIO ' || cast(Mes as varchar) || ' / ' || cast(Ano as varchar), 
			case when Resultado <= 0 then abs(Resultado) else -(Resultado) end, 0, 0 , ''  
		from TBL_CONT_RESULTADOS
		where Ano < _Ano or (Ano = _Ano and Mes <= _Mes)
		order by Ano desc, Mes desc;
	end if;

	insert into _TMP_BALANCE(Clave,Concepto,Parcial,Total,Suma,AC)
	select '&nbsp;','',0,0,0, '';

	insert into _TMP_BALANCE(Clave,Concepto,Parcial,Total,Suma,AC)
	select '','<b>TOTAL PASIVO MAS CAPITAL:</b>', 0, 0, coalesce((_TotalCC + _ResultadoEA + _TotalPC + _TotalPL + _TotalPD),0), '';

	insert into _TMP_BALANCE(Clave,Concepto,Parcial,Total,Suma,AC)
	select '&nbsp;','',0,0,0,'';

	--/////////////////////////// revisa por cuentas de orden ////////////////////////////////////////////////////////
	if (select count(*) from view_cont_balance_general_orden where Debe <> 0.0000 and Nivel = 1 and Mes = _Mes and Ano = _Ano) > 0
	then
		insert into _TMP_BALANCE(Clave,Concepto,Parcial,Total,Suma,AC)
		select '&nbsp;','',0,0,0, '';
		insert into _TMP_BALANCE(Clave,Concepto,Parcial,Total,Suma,AC)
		select '&nbsp;','',0,0,0, '';
		insert into _TMP_BALANCE(Clave,Concepto,Parcial,Total,Suma,AC)
		select '&nbsp;','',0,0,0, '';
		
		insert into _TMP_BALANCE(Clave,Concepto,Parcial,Total,Suma,AC)
		select '<b>CUENTA</b>', '<b>CUENTAS DE ORDEN</b>',0,0,0,'';
		insert into _TMP_BALANCE(Clave,Concepto,Parcial,Total,Suma,AC)
		select '------', '------------------------------------------------',0,0,coalesce(sum(Debe),0), '' from view_cont_balance_general_orden
		where Debe <> 0.0000 and Nivel = 1 and 
			Mes = _Mes and Ano = _Ano;
		if _Detallado = '0'
		then
			insert into _TMP_BALANCE(Clave,Concepto,Parcial,Total,Suma,AC)
			select substring(Cuenta,1,4), Nombre, 0, sum(Debe), 0, '+' from view_cont_balance_general_orden
			where Debe <> 0.0000 and Nivel = 1 and 
				Mes = _Mes and Ano = _Ano
			group by Cuenta, Nombre
			order by Cuenta;
		else
			insert into _TMP_BALANCE(Clave,Concepto,Parcial,Total,Suma,AC)
			select case 	when Nivel = 1 then substring(Cuenta,1,4) 
										when Nivel = 2 then '&nbsp;&nbsp;&nbsp;' || substring(Cuenta,5,3) 
										when Nivel = 3 then '&nbsp;&nbsp;&nbsp;&nbsp;' || substring(Cuenta,8,3) 
										when Nivel = 4 then '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;' || substring(Cuenta,11,3) 
										when Nivel = 5 then '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;' || substring(Cuenta,14,3) 
										else '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;' || substring(Cuenta,17,3) end, 
							case 	when Nivel = 1 then Nombre 
										when Nivel = 2 then '&nbsp;&nbsp;' || Nombre 
										when Nivel = 3 then '&nbsp;&nbsp;&nbsp;' || Nombre 
										when Nivel = 4 then '&nbsp;&nbsp;&nbsp;&nbsp;' || Nombre 
										when Nivel = 5 then '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;' || Nombre 
										else '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;' || Nombre end, 
							case when Nivel = 1 then 0 else sum(Debe) end, 
							case when Nivel = 1 then sum(Debe) else 0 end, 0,
							case when Acum = '1' then '+' else ' ' end
			from view_cont_balance_general_det_orden
			where Debe <> 0.0000 and  
				Mes = _Mes and Ano = _Ano
			group by Nivel, Acum, Cuenta, Nombre
			order by Cuenta;
		end if;
		
		insert into _TMP_BALANCE(Clave,Concepto,Parcial,Total,Suma,AC)
		select '&nbsp;','',0,0,0, '';
	end if;
	--/////////////////////////// fin de cuentas de orden /////////////////////////////////////////////////////////////
	RETURN QUERY
	select Clave, Concepto, Parcial, Total, Suma, AC from _TMP_BALANCE
	order by part ASC;

	DROP TABLE _TMP_BALANCE;

END
$BODY$
  LANGUAGE plpgsql;
--ALTER FUNCTION rep_cont_balance(smallint, smallint, bit)
  
--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION rep_cont_balanza_general(
    _mes smallint,
    _ano smallint,
    _totales bit,
    _cols integer,
    _niveldetalle smallint)
  RETURNS SETOF record AS
$BODY$
DECLARE
	_TotalActivo numeric(19,4); _TotalPasivo numeric(19,4); _TotalPerdida numeric(19,4); _TotalGanancia numeric(19,4); _Resultado numeric(19,4);
BEGIN
	IF _Cols = 8
	THEN
		IF _Totales = '0' --Son las cuentas como tal y no los acumulados
		THEN
			CREATE LOCAL TEMPORARY TABLE _TMP_BALANZA_GENERAL (
				Part serial NOT NULL ,
				Clave varchar(50) NOT NULL ,
				Nombre varchar (400) NOT NULL ,
				Cargos numeric(19,4) NOT NULL ,
				Abonos numeric(19,4) NOT NULL ,
				Deudor numeric(19,4) NOT NULL ,
				Acreedor numeric(19,4) NOT NULL ,
				Activo numeric(19,4) NOT NULL ,
				Pasivo numeric(19,4) NOT NULL ,
				Perdida numeric(19,4) NOT NULL ,
				Ganancia numeric(19,4) NOT NULL,
				AC varchar(2) NOT NULL
			);

			IF _NivelDetalle = 1 --Solo cuentas de mayor
			THEN
				insert into _TMP_BALANZA_GENERAL(Clave,Nombre,Cargos,Abonos,Deudor,Acreedor,Activo,Pasivo,Perdida,Ganancia,AC)
				select substring(Cuenta,1,4), Nombre, Cargos, Abonos, Deudor, Acreedor, Activo, Pasivo, Perdida, Ganancia, '++' 
				from view_cont_balanza_general
				where (Cargos <> 0 or Abonos <> 0) and Mes = _Mes and Ano = _Ano and AC = '1' and Nivel = '1'
				order by cuenta;
			ELSIF _Niveldetalle = 2 --Todo, tanto aumulativas como de detalle
			THEN
				insert into _TMP_BALANZA_GENERAL(Clave,Nombre,Cargos,Abonos,Deudor,Acreedor,Activo,Pasivo,Perdida,Ganancia,AC)
				select case 	when Nivel = 1 then substring(Cuenta,1,4) 
										when Nivel = 2 then '&nbsp;&nbsp;&nbsp;' || substring(Cuenta,5,3) 
										when Nivel = 3 then '&nbsp;&nbsp;&nbsp;&nbsp;' || substring(Cuenta,8,3) 
										when Nivel = 4 then '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;' || substring(Cuenta,11,3) 
										when Nivel = 5 then '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;' || substring(Cuenta,14,3) 
										else '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;' || substring(Cuenta,17,3) end, 
							case 	when Nivel = 1 then Nombre 
										when Nivel = 2 then '&nbsp;&nbsp;' || Nombre 
										when Nivel = 3 then '&nbsp;&nbsp;&nbsp;' || Nombre 
										when Nivel = 4 then '&nbsp;&nbsp;&nbsp;&nbsp;' || Nombre 
										when Nivel = 5 then '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;' || Nombre 
										else '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;' || Nombre end, 
							Cargos,Abonos,Deudor,Acreedor,Activo,Pasivo,Perdida,Ganancia,case when AC = '1' then case when Nivel = 1 then '++' else '+' end else ' ' end
				from view_cont_balanza_general
				where (Cargos <> 0 or Abonos <> 0) and Mes = _Mes and Ano = _Ano
				order by cuenta;
			ELSE -- Solo cuentas de detalle
				insert into _TMP_BALANZA_GENERAL(Clave,Nombre,Cargos,Abonos,Deudor,Acreedor,Activo,Pasivo,Perdida,Ganancia,AC)
				select CASE
							WHEN Nivel = 1 THEN substring(cuenta, 1, 4)
							WHEN Nivel = 2 THEN substring(cuenta, 1, 4) || '-' || substring(cuenta, 5, 3)
							WHEN Nivel = 3 THEN substring(cuenta, 1, 4) || '-' || substring(cuenta, 5, 3) || '-' || substring(cuenta, 8, 3)
							WHEN Nivel = 4 THEN substring(cuenta, 1, 4) || '-' || substring(cuenta, 5, 3) || '-' || substring(cuenta, 8, 3) || '-' || substring(cuenta, 11, 3)
							WHEN Nivel = 5 THEN substring(cuenta, 1, 4) || '-' || substring(cuenta, 5, 3) || '-' || substring(cuenta, 8, 3) || '-' || substring(cuenta, 11, 3) || '-' || substring(cuenta, 14, 3)
							WHEN Nivel = 6 THEN substring(cuenta, 1, 4) || '-' || substring(cuenta, 5, 3) || '-' || substring(cuenta, 8, 3) || '-' || substring(cuenta, 11, 3) || '-' || substring(cuenta, 14, 3) || '-' || substring(cuenta, 17, 3)
						ELSE cuenta END AS Cuenta, Nombre, Cargos, Abonos, Deudor, Acreedor, Activo, Pasivo, Perdida, Ganancia, ' ' 
				from view_cont_balanza_general
				where (Cargos <> 0 or Abonos <> 0) and Mes = _Mes and Ano = _Ano and AC = '0'
				order by cuenta;
			END IF;

			RETURN QUERY
			select clave, nombre, cargos, abonos, deudor, acreedor, activo, pasivo, perdida, ganancia, ac
			from _TMP_BALANZA_GENERAL
			order by part ASC;
			
			DROP TABLE _TMP_BALANZA_GENERAL;
		ELSE --Acumulados
			CREATE LOCAL TEMPORARY TABLE _TMP_BALANZA_GENERAL (
				Totales varchar (400) NOT NULL ,
				Cargos numeric(19,4) NOT NULL ,
				Abonos numeric(19,4) NOT NULL ,
				Deudor numeric(19,4) NOT NULL ,
				Acreedor numeric(19,4) NOT NULL ,
				Activo numeric(19,4) NOT NULL ,
				Pasivo numeric(19,4) NOT NULL ,
				Perdida numeric(19,4) NOT NULL ,
				Ganancia numeric(19,4) NOT NULL ,
				AC varchar(2) NOT NULL
			);

			_Resultado = (select resultado from tbl_cont_resultados where Mes = _Mes and Ano = _Ano);

			_TotalActivo = (select sum(Activo) from view_cont_balanza_general where (Cargos <> 0 or Abonos <> 0) and Mes = _Mes and Ano = _Ano and AC = '0');
			_TotalPasivo =  (select sum(Pasivo) from view_cont_balanza_general where (Cargos <> 0 or Abonos <> 0) and Mes = _Mes and Ano = _Ano and AC = '0');
			_TotalPerdida = (select sum(Perdida) from view_cont_balanza_general where (Cargos <> 0 or Abonos <> 0) and Mes = _Mes and Ano = _Ano and AC = '0');
			_TotalGanancia = (select sum(Ganancia) from view_cont_balanza_general where (Cargos <> 0 or Abonos <> 0) and Mes = _Mes and Ano = _Ano and AC = '0');
			
			insert into _TMP_BALANZA_GENERAL(Totales,Cargos,Abonos,Deudor,Acreedor,Activo,Pasivo,Perdida,Ganancia,AC)
			select 'Suma:' as Totales, sum(Cargos), sum(Abonos), sum(Deudor), sum(Acreedor), _TotalActivo, _TotalPasivo, _TotalPerdida, _TotalGanancia, ' ' 
			from view_cont_balanza_general
			where (Cargos <> 0 or Abonos <> 0) and Mes = _Mes and Ano = _Ano and AC = '0';
			insert into _TMP_BALANZA_GENERAL(Totales,Cargos,Abonos,Deudor,Acreedor,Activo,Pasivo,Perdida,Ganancia,AC)
			select 'Resultado:' as Totales, 0, 0, 0, 0, 
				case when _Resultado < 0 then abs(_Resultado) else 0 end, 
				case when _Resultado > 0 then _Resultado else 0 end, 
				case when _Resultado > 0 then _Resultado else 0 end, 
				case when _Resultado < 0 then abs(_Resultado) else 0 end, ' ';
			insert into _TMP_BALANZA_GENERAL(Totales,Cargos,Abonos,Deudor,Acreedor,Activo,Pasivo,Perdida,Ganancia,AC)
			select 'Total:' as Totales, 0, 0, 0, 0, 
				case when _Resultado < 0 then _TotalActivo - abs(_Resultado) else _TotalActivo end, 
				case when _Resultado > 0 then _TotalPasivo - _Resultado else _TotalPasivo end, 
				case when _Resultado > 0 then _TotalPerdida - _Resultado else _TotalPerdida end, 
				case when _Resultado < 0 then _TotalGanancia - abs(_Resultado) else _TotalGanancia end, ' ';
						
			RETURN QUERY
			select totales, cargos, abonos, deudor, acreedor, activo, pasivo, perdida, ganancia,ac
			from _TMP_BALANZA_GENERAL;
			
			DROP TABLE _TMP_BALANZA_GENERAL;

		END IF;
	ELSE --Balanza normal
		IF _Totales = '0' --Son las cuentas como tal y no los acumulados
		THEN
			CREATE LOCAL TEMPORARY TABLE _TMP_BALANZA_GENERAL (
				Part serial NOT NULL ,
				Clave varchar(50) NOT NULL ,
				Nombre varchar (400) NOT NULL ,
				Cargos numeric(19,4) NOT NULL ,
				Abonos numeric(19,4) NOT NULL ,
				Deudor numeric(19,4) NOT NULL ,
				Acreedor numeric(19,4) NOT NULL ,
				AC varchar(2) NOT NULL
			);

			IF _NivelDetalle = 1 --Solo cuentas de mayor
			THEN
				insert into _TMP_BALANZA_GENERAL(Clave,Nombre,Cargos,Abonos,Deudor,Acreedor,AC)
				select substring(Cuenta,1,4), Nombre, Cargos, Abonos, Deudor, Acreedor, '++' 
				from view_cont_balanza_general
				where (Cargos <> 0 or Abonos <> 0) and Mes = _Mes and Ano = _Ano and AC = '1' and Nivel = '1'
				order by cuenta;
			ELSIF _Niveldetalle = 2 --Todas, tanto acumulativas como de detalle
			THEN
				insert into _TMP_BALANZA_GENERAL(Clave,Nombre,Cargos,Abonos,Deudor,Acreedor,AC)
				select case 	when Nivel = 1 then substring(Cuenta,1,4) 
										when Nivel = 2 then '&nbsp;&nbsp;&nbsp;' || substring(Cuenta,5,3) 
										when Nivel = 3 then '&nbsp;&nbsp;&nbsp;&nbsp;' || substring(Cuenta,8,3) 
										when Nivel = 4 then '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;' || substring(Cuenta,11,3) 
										when Nivel = 5 then '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;' || substring(Cuenta,14,3) 
										else '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;' || substring(Cuenta,17,3) end, 
							case 	when Nivel = 1 then Nombre 
										when Nivel = 2 then '&nbsp;&nbsp;' || Nombre 
										when Nivel = 3 then '&nbsp;&nbsp;&nbsp;' || Nombre 
										when Nivel = 4 then '&nbsp;&nbsp;&nbsp;&nbsp;' || Nombre 
										when Nivel = 5 then '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;' || Nombre 
										else '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;' || Nombre end, 
							Cargos,Abonos,Deudor,Acreedor,case when AC = '1' then case when Nivel = 1 then '++' else '+' end else ' ' end
				from view_cont_balanza_general
				where (Cargos <> 0 or Abonos <> 0) and Mes = _Mes and Ano = _Ano
				order by cuenta;
			ELSE --Solo cuentas de detalle
				insert into _TMP_BALANZA_GENERAL(Clave,Nombre,Cargos,Abonos,Deudor,Acreedor,AC)
				select Cuenta , Nombre, Cargos,Abonos,Deudor,Acreedor, ' '
				from view_cont_balanza_general
				where (Cargos <> 0 or Abonos <> 0) and Mes = _Mes and Ano = _Ano and AC = '0'
				order by cuenta;
			END IF;

			RETURN QUERY
			select clave, nombre, cargos, abonos, deudor, acreedor, ac
			from _TMP_BALANZA_GENERAL
			order by part ASC;
			
			DROP TABLE _TMP_BALANZA_GENERAL;
		ELSE --Acumulados
			CREATE LOCAL TEMPORARY TABLE _TMP_BALANZA_GENERAL (
				Totales varchar (400) NOT NULL ,
				Cargos numeric(19,4) NOT NULL ,
				Abonos numeric(19,4) NOT NULL ,
				Deudor numeric(19,4) NOT NULL ,
				Acreedor numeric(19,4) NOT NULL ,
				AC varchar(2) NOT NULL
			);

			insert into _TMP_BALANZA_GENERAL(Totales,Cargos,Abonos,Deudor,Acreedor,AC)
			select 'Total:' as Totales, sum(Cargos), sum(Abonos), sum(Deudor), sum(Acreedor), ' ' 
			from view_cont_balanza_general
			where (Cargos <> 0 or Abonos <> 0) and Mes = _Mes and Ano = _Ano and AC = '0';
			
			RETURN QUERY
			select totales, cargos, abonos, deudor, acreedor, ac
			from _TMP_BALANZA_GENERAL;
			
			DROP TABLE _TMP_BALANZA_GENERAL;

		END IF;
	END IF;
END
$BODY$
  LANGUAGE plpgsql;
--ALTER FUNCTION rep_cont_balanza_general(smallint, smallint, bit, integer, smallint)

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION rep_cont_resultados_acum(
    _ano smallint,
    _comparativo character varying,
    _ultimos smallint)
  RETURNS SETOF record AS
$BODY$
DECLARE
	_cont smallint; _TotalVentas numeric(19,4); _TotalCostos numeric(19,4); _TotalGastos numeric(19,4);
					_TotalOtros numeric(19,4); _ResultadoXD numeric(19,4);
BEGIN 
	CREATE LOCAL TEMPORARY TABLE _TMP_RESULTADOS_GEN (
			Part serial NOT NULL ,
			Periodo varchar (20) NOT NULL ,
			Ingresos numeric(19,4) NOT NULL ,
			Costos numeric(19,4) NOT NULL ,
			Gastos numeric(19,4) NOT NULL ,
			Otros numeric(19,4) NOT NULL ,
			Resultado numeric(19,4) NOT NULL 
	);

	CREATE LOCAL TEMPORARY TABLE _TMP_RESULTADOS (
			Part serial NOT NULL ,
			Periodo varchar (20) NOT NULL ,
			Total numeric(19,4) NOT NULL 
	);

	if _Ultimos = '1' -- se trata de comparativo mensual
	then
		_cont := 1;
		while _cont <= 12
		loop
			_TotalVentas := coalesce(( select sum(Saldo) from view_cont_estado_resultados
													where Tipo = 'RI' and	Mes = _cont and Ano = _Ano ),0);
			_TotalCostos := coalesce(( select sum(Saldo) from view_cont_estado_resultados
													where Tipo = 'RC' and	Mes = _cont and Ano = _Ano ),0);
			_TotalGastos := coalesce(( select sum(Saldo) from view_cont_estado_resultados
													where Tipo = 'RG' and	Mes = _cont and Ano = _Ano ),0);
			_TotalOtros :=	 coalesce(( select sum(Saldo) from view_cont_estado_resultados
													where Tipo = 'RO' and	Mes = _cont and Ano = _Ano ),0);
			_ResultadoXD := (_TotalVentas - _TotalCostos - _TotalGastos + _TotalOtros);
		
			 
			if _Comparativo = 'GENERAL'
			then
				INSERT INTO _TMP_RESULTADOS_GEN (Periodo,Ingresos,Costos,Gastos,Otros,Resultado)
				SELECT cast(_cont as varchar), _TotalVentas, _TotalCostos, _TotalGastos, _TotalOtros, _ResultadoXD;
			else
				if _Comparativo = 'RI'
				then
					INSERT INTO _TMP_RESULTADOS (Periodo,Total)
					SELECT cast(_cont as varchar), _TotalVentas; 
				elsif _Comparativo = 'RC'
				then
					INSERT INTO _TMP_RESULTADOS (Periodo,Total)
					SELECT cast(_cont as varchar), _TotalCostos; 
				elsif _Comparativo = 'RG'
				then
					INSERT INTO _TMP_RESULTADOS (Periodo,Total)
					SELECT cast(_cont as varchar), _TotalGastos; 
				elsif _Comparativo = 'RO'
				then
					INSERT INTO _TMP_RESULTADOS (Periodo,Total)
					SELECT cast(_cont as varchar), _TotalOtros; 
				else
					INSERT INTO _TMP_RESULTADOS (Periodo,Total)
					SELECT cast(_cont as varchar), _ResultadoXD;
				end if;
			end if;

			_cont := _cont + 1;
		end loop;

	else -- De lo contrario es un comparativo anual

		_cont := _Ano - _Ultimos + 1;

		while _cont <= _Ano
		loop
			_TotalVentas = coalesce(( select sum(Saldo) from view_cont_estado_resultados
													where Tipo = 'RI' and	Mes between 1 and 12 and Ano = _cont ),0);
			_TotalCostos = coalesce(( select sum(Saldo) from view_cont_estado_resultados
													where Tipo = 'RC' and	Mes between 1 and 12 and Ano = _cont ),0);
			_TotalGastos = coalesce(( select sum(Saldo) from view_cont_estado_resultados
													where Tipo = 'RG' and	Mes between 1 and 12 and Ano = _cont ),0);
			_TotalOtros =	 coalesce(( select sum(Saldo) from view_cont_estado_resultados
													where Tipo = 'RO' and	Mes between 1 and 12 and Ano = _cont ),0);
			_ResultadoXD = (_TotalVentas - _TotalCostos - _TotalGastos + _TotalOtros);

			if _Comparativo = 'GENERAL'
			then
				INSERT INTO _TMP_RESULTADOS_GEN (Periodo,Ingresos,Costos,Gastos,Otros,Resultado)
				SELECT cast(_cont as varchar), _TotalVentas, _TotalCostos, _TotalGastos, _TotalOtros, _ResultadoXD;
			else
				if(_Comparativo = 'RI')
				then
					INSERT INTO _TMP_RESULTADOS (Periodo,Total)
					SELECT cast(_cont as varchar), _TotalVentas;
				elsif(_Comparativo = 'RC')
				then
					INSERT INTO _TMP_RESULTADOS (Periodo,Total)
					SELECT cast(_cont as varchar), _TotalCostos;
				elsif(_Comparativo = 'RG')
				then        	
					INSERT INTO _TMP_RESULTADOS (Periodo,Total)
					SELECT cast(_cont as varchar), _TotalGastos;
				elsif(_Comparativo = 'RO')
				then
					INSERT INTO _TMP_RESULTADOS (Periodo,Total)
					SELECT cast(_cont as varchar), _TotalOtros;
				else
					INSERT INTO _TMP_RESULTADOS (Periodo,Total)
					SELECT cast(_cont as varchar), _ResultadoXD;
				end if;
			end if;

			_cont := _cont + 1;
		end loop;

	end if;

	if _Comparativo = 'GENERAL'
	then
		return query
		select Periodo, Ingresos, Costos, Gastos, Otros, Resultado
		from _TMP_RESULTADOS_GEN
		order by part ASC;
	else
		return query
		select Periodo, Total
		from _TMP_RESULTADOS
		order by part ASC;
	end if;

	DROP TABLE _TMP_RESULTADOS;
	DROP TABLE _TMP_RESULTADOS_GEN;
	
END
$BODY$
  LANGUAGE plpgsql;
--ALTER FUNCTION rep_cont_resultados_acum(smallint, character varying, smallint)

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION rep_cont_balance_acum(_ano smallint, _comparativo character varying, _ultimos smallint)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_cont smallint; _TotalActivo numeric(19,4); _TotalPasivo numeric(19,4); _TotalCC numeric(19,4); _ResultadoEA numeric(19,4); _TotalCapital numeric(19,4);
BEGIN

	CREATE LOCAL TEMPORARY TABLE _TMP_BALANCE_GEN (
			Part serial NOT NULL ,
			Periodo varchar (20) NOT NULL ,
			Activo numeric(19,4) NOT NULL ,
			Pasivo numeric(19,4) NOT NULL ,
			Capital numeric(19,4) NOT NULL 
	);

	CREATE LOCAL TEMPORARY TABLE _TMP_BALANCE (
			Part serial NOT NULL ,
			Periodo varchar (20) NOT NULL ,
			Total numeric(19,4) NOT NULL 
	);

	if(_Ultimos = 1) -- se trata de comparativo mensual
	then
		_cont := 1;
		while _cont <= 12
		loop
			_TotalActivo := ( select coalesce(sum(Saldo),0) from view_cont_balance_general
					where (Tipo = 'AC' or Tipo = 'AF' or Tipo = 'AD') and	Mes = _cont and Ano = _Ano );
			_TotalPasivo := ( select coalesce(sum(Saldo),0) from view_cont_balance_general
					where (Tipo = 'PC' or Tipo = 'PL' or Tipo = 'PD') and	Mes = _cont and Ano = _Ano );
			_TotalCC := ( select coalesce(sum(Saldo),0) from view_cont_balance_general
					where Tipo = 'CC' and	Mes = _cont and Ano = _Ano );

			_ResultadoEA := case when (	select coalesce(sum(Resultado),0) from TBL_CONT_RESULTADOS 
																	where Ano < _Ano or (Ano = _Ano and Mes <= _cont) ) <= 0.0  
													then	abs( (	select coalesce(sum(Resultado),0) from TBL_CONT_RESULTADOS 
																				where Ano < _Ano or (Ano = _Ano and Mes <= _cont) ) )
													else -((	select coalesce(sum(Resultado),0) from TBL_CONT_RESULTADOS 
																		where Ano < _Ano or (Ano = _Ano and Mes <= _cont) ) )
													end;

			_TotalCapital := (_TotalCC + _ResultadoEA);

			if(_Comparativo = 'GENERAL')
			then
				INSERT INTO _TMP_BALANCE_GEN (Periodo,Activo,Pasivo,Capital)
				SELECT cast(_cont as varchar), _TotalActivo, _TotalPasivo, _TotalCapital;
			else
				if(_Comparativo = 'AC')
				then
					INSERT INTO _TMP_BALANCE (Periodo,Total)
					SELECT cast(_cont as varchar), _TotalActivo; 
				elsif(_Comparativo = 'PA')
				then
					INSERT INTO _TMP_BALANCE (Periodo,Total)
					SELECT cast(_cont as varchar), _TotalPasivo;
				else
					INSERT INTO _TMP_BALANCE (Periodo,Total)
					SELECT cast(_cont as varchar), _TotalCapital;
				end if;
			end if;

			_cont := _cont + 1;
		end loop;

	else -- De lo contrario es un comparativo anual
	
		_cont := _Ano - _Ultimos + 1;

		while _cont <= _Ano
		loop
			_TotalActivo := ( select coalesce(sum(Saldo),0) from view_cont_balance_general
					where (Tipo = 'AC' or Tipo = 'AF' or Tipo = 'AD') and	Mes = 12 and Ano = _cont );
			_TotalPasivo := ( select coalesce(sum(Saldo),0) from view_cont_balance_general
					where (Tipo = 'PC' or Tipo = 'PL' or Tipo = 'PD') and	Mes = 12 and Ano = _cont );
			_TotalCC := ( select coalesce(sum(Saldo),0) from view_cont_balance_general
					where Tipo = 'CC' and	Mes = 12 and Ano = _cont );

			_ResultadoEA := case when (		select coalesce(sum(Resultado),0) from TBL_CONT_RESULTADOS 
																				where Ano < _cont or (Ano = _cont and Mes <= 12) ) <= 0.0  
													then	abs( (	select coalesce(sum(Resultado),0) from TBL_CONT_RESULTADOS 
																				where Ano < _cont or (Ano = _cont and Mes <= 12) ) )
													else -((			select coalesce(sum(Resultado),0) from TBL_CONT_RESULTADOS 
																				where Ano < _cont or (Ano = _cont and Mes <= 12) ) )
													end;

			_TotalCapital := (_TotalCC + _ResultadoEA);

			if(_Comparativo = 'GENERAL')
			then
				INSERT INTO _TMP_BALANCE_GEN (Periodo,Activo,Pasivo,Capital)
				SELECT cast(_cont as varchar), _TotalActivo, _TotalPasivo, _TotalCapital; 
			else
				if(_Comparativo = 'AC')
				then
					INSERT INTO _TMP_BALANCE (Periodo,Total)
					SELECT cast(_cont as varchar), _TotalActivo; 
				elsif(_Comparativo = 'PA')
				then
					INSERT INTO _TMP_BALANCE (Periodo,Total)
					SELECT cast(_cont as varchar), _TotalPasivo;
				else
					INSERT INTO _TMP_BALANCE (Periodo,Total)
					SELECT cast(_cont as varchar), _TotalCapital;
				end if;
			end if;

			_cont := _cont + 1;
		end loop;

	end if;

	if(_Comparativo = 'GENERAL')
	then
		return query
		select Periodo, Activo, Pasivo, Capital
		from _TMP_BALANCE_GEN
		order by part ASC;
	else
		return query
		select Periodo, Total
		from _TMP_BALANCE
		order by part ASC;
	end if;

	DROP TABLE _TMP_BALANCE;
	DROP TABLE _TMP_BALANCE_GEN;

END
$BODY$
  LANGUAGE plpgsql;
  


--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_catalog_usuarios AS 
 SELECT c.id_usuario AS clave, c.nombre AS descripcion, ''::text AS especial
   FROM tbl_usuarios c;
   
  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION getfecha(dia integer, mes integer, ano integer)
  RETURNS timestamp without time zone AS
$BODY$  
BEGIN
	RETURN to_timestamp(dia || ' ' || mes || ' ' || ano, 'DD MM YYYY');
END
$BODY$
  LANGUAGE plpgsql;
  
--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION rep_invserv_existencias(
    _id_prod character varying,
    _periodo bit,
    _mes smallint,
    _ano smallint,
    _id_bodega smallint)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_Mes2 smallint; _Ano2 smallint;  _FechaDesde timestamp; _FechaTotal timestamp; _NoAuditados boolean;
BEGIN
	_NoAuditados := false;
	
	if(_Periodo = '1')
	then
		_Mes := ( select Mes from TBL_CONT_CATALOGO_PERIODOS where Cerrado = '1' order by Ano desc, Mes desc limit 1 );
		if _Mes = 13
		then
			_Mes := 12;
		end if;
		_Ano := ( select Ano from TBL_CONT_CATALOGO_PERIODOS where Cerrado = '1' order by Ano desc, Mes desc limit 1 );
	end if;

	_FechaDesde := getfecha(1,_Mes,_Ano);

	_Mes2 := ( select Mes from TBL_CONT_CATALOGO_PERIODOS order by Ano desc, Mes desc limit 1 );
	if _Mes2 = 13
	then
		_Mes2 := 12;
	end if;
	
	_Ano2 := ( select Ano from TBL_CONT_CATALOGO_PERIODOS order by Ano desc, Mes desc limit 1 );
	_FechaDesde := _FechaDesde + '1 month'::interval;
	 
	CREATE LOCAL TEMPORARY TABLE _TMP_MOVIMIENTOS (
		ID_Clave serial NOT NULL ,
		Fecha varchar (20) NOT NULL ,
		Descripcion varchar (254) NOT NULL ,
		Entrada numeric (9,3) NOT NULL ,
		Salida numeric (9,3) NOT NULL ,
		Existencia numeric (9,3) NOT NULL 

	);

	-- Verifica que no hayan movimientos sin auditar
	_FechaTotal := getfecha(1,_Mes2,_Ano2) + '1 month'::interval;

	IF( select id_invserv from TBL_INVSERV_BODEGAS where ID_Bodega = _ID_Bodega ) = 'P'
	THEN 
		IF(	select Count(*) from TBL_INVSERV_ALMACEN_MOVIM_CAB
				where ID_Bodega = _ID_Bodega and Fecha < _FechaTotal and ( Status = 'G' or Status = 'P' or Status = 'R' ) ) > 0
		THEN
			_NoAuditados = true;
			INSERT INTO _TMP_MOVIMIENTOS ( Fecha, Descripcion, Entrada, Salida, Existencia )
			VALUES ('<b>NOTA:</b>', 'EXISTEN MOVIMIENTOS SIN AUDITAR EN ESTA BODEGA. PUEDE QUE EL REPORTE ARROJE RESULTADOS INESPERADOS',0,0,0);

			INSERT INTO _TMP_MOVIMIENTOS ( Fecha, Descripcion, Entrada, Salida, Existencia )
			SELECT '', '', 0, 0, 0;
		END IF;
	END IF;
	
	INSERT INTO _TMP_MOVIMIENTOS ( Fecha, Descripcion, Entrada, Salida, Existencia )
	select e.ID_Prod, c.Descripcion || ' SALDO A ' || 
		case when _Mes = 1 then 'ENERO ' 
				when _Mes = 2 then 'FEBRERO '
				when _Mes = 3 then 'MARZO '
				when _Mes = 4 then 'ABRIL '
				when _Mes = 5 then 'MAYO '
				when _Mes = 6 then 'JUNIO '
				when _Mes = 7 then 'JULIO '
				when _Mes = 8 then 'AGOSTO '
				when _Mes = 9 then 'SEPTIEMBRE '
				when _Mes = 10 then 'OCTUBRE '
				when _Mes = 11 then 'NOVIEMBRE '
				else 'DICIEMBRE ' 
			end || cast(_Ano as varchar), 0, 0, coalesce(e.EXistenciaFin,0)
	from TBL_INVSERV_EXISTENCIAS_PERIODOS e INNER JOIN TBL_INVSERV_INVENTARIOS c ON
			e.ID_Prod = c.ID_Prod
	where e.ID_Bodega = _ID_Bodega and e.Mes = _Mes and e.Ano = _Ano and c.ID_Prod = _ID_Prod;

	IF( select id_invserv from TBL_INVSERV_BODEGAS where ID_Bodega = _ID_Bodega ) = 'P'
	THEN 
		INSERT INTO _TMP_MOVIMIENTOS ( Fecha, Descripcion, Entrada, Salida, Existencia )
		SELECT to_char(c.Fecha, 'DD-MM-YYYY')::varchar, (case when _NoAuditados = true and m.Status <> 'U' then '<font color="blue">Estado: ' || m.Status || '</font> ' else '' end) || cc.Descripcion || '  ' || getmoduloref(m.Ref), c.Entrada, c.Salida, c.ExistBod
		FROM TBL_INVSERV_COSTOS_DETALLE c INNER JOIN TBL_INVSERV_INVENTARIOS i ON 
			i.ID_Prod = c.ID_Prod	INNER JOIN TBL_INVSERV_ALMACEN_MOVIM_CAB m ON 
			m.ID_Movimiento = c.ID_Movimiento INNER JOIN VIEW_INVSERV_COSTOS_CONCEPTOS cc ON
			c.ID_Concepto = cc.ID_Concepto
		WHERE  c.Fecha >= _FechaDesde and c.Status <> 'C' and m.ID_Bodega = _ID_Bodega and c.ID_Prod = _ID_Prod
		ORDER BY c.Fecha ASC, c.ID_Concepto ASC, c.ID_Costo ASC;		
	ELSE
		INSERT INTO _TMP_MOVIMIENTOS ( Fecha, Descripcion, Entrada, Salida, Existencia )
		SELECT to_char(c.Fecha, 'DD-MM-YYYY')::varchar, m.Concepto || '  ' || getmoduloref(m.Ref), c.Entrada, c.Salida, c.ExistBod
		FROM TBL_INVSERV_COSTOS_DETALLE c INNER JOIN TBL_INVSERV_INVENTARIOS i ON 
			i.ID_Prod = c.ID_Prod	INNER JOIN TBL_INVSERV_ALMACEN_MOVIM_CAB m ON 
			m.ID_Movimiento = c.ID_Movimiento 
		WHERE  c.Fecha >= _FechaDesde and c.Status <> 'C' and m.ID_Bodega = _ID_Bodega and c.ID_Prod = _ID_Prod
		ORDER BY c.Fecha ASC, c.ID_Concepto ASC, c.ID_Costo ASC;		
	END IF;

	INSERT INTO _TMP_MOVIMIENTOS ( Fecha, Descripcion, Entrada, Salida, Existencia )
	SELECT '', '', 0, 0, 0;

	INSERT INTO _TMP_MOVIMIENTOS ( Fecha, Descripcion, Entrada, Salida, Existencia )
	select '', 'SALDO AL ULTIMO PERIODO CREADO: ' || 
		case when _Mes2 = 1 then 'ENERO ' 
					when _Mes2 = 2 then 'FEBRERO '
					when _Mes2 = 3 then 'MARZO '
					when _Mes2 = 4 then 'ABRIL '
					when _Mes2 = 5 then 'MAYO '
					when _Mes2 = 6 then 'JUNIO '
					when _Mes2 = 7 then 'JULIO '
					when _Mes2 = 8 then 'AGOSTO '
					when _Mes2 = 9 then 'SEPTIEMBRE '
					when _Mes2 = 10 then 'OCTUBRE '
					when _Mes2 = 11 then 'NOVIEMBRE '
					else 'DICIEMBRE ' 
		end || cast(_Ano2 as varchar), 0, 0, coalesce(e.EXistenciaFin,0)
	from TBL_INVSERV_EXISTENCIAS_PERIODOS e INNER JOIN TBL_INVSERV_INVENTARIOS c ON
		e.ID_Prod = c.ID_Prod
	where e.ID_Bodega = _ID_Bodega and e.Mes = _Mes2 and e.Ano = _Ano2 and c.ID_Prod = _ID_Prod;

	INSERT INTO _TMP_MOVIMIENTOS ( Fecha, Descripcion, Entrada, Salida, Existencia )
	SELECT '', '', 0, 0, 0;

	INSERT INTO _TMP_MOVIMIENTOS ( Fecha, Descripcion, Entrada, Salida, Existencia )
	SELECT '', 'SALDO DE ESTA BODEGA EN "EXISTENCIAS"', 0, 0, Existencia
	FROM TBL_INVSERV_EXISTENCIAS
	WHERE ID_Bodega = _ID_Bodega and ID_Prod = _ID_Prod;

	INSERT INTO _TMP_MOVIMIENTOS ( Fecha, Descripcion, Entrada, Salida, Existencia )
	SELECT '', '', 0, 0, 0;

	INSERT INTO _TMP_MOVIMIENTOS ( Fecha, Descripcion, Entrada, Salida, Existencia )
	SELECT '', 'TOTALES DE ENTRADAS Y SALIDAS...  Y  SALDO REAL', 
		coalesce(	(	SELECT sum(c.Entrada)
				FROM TBL_INVSERV_COSTOS_DETALLE c INNER JOIN TBL_INVSERV_INVENTARIOS i ON 
							i.ID_Prod = c.ID_Prod	INNER JOIN TBL_INVSERV_ALMACEN_MOVIM_CAB m ON 
							m.ID_Movimiento = c.ID_Movimiento INNER JOIN TBL_INVSERV_COSTOS_CONCEPTOS cc ON
							c.ID_Concepto = cc.ID_Concepto
				WHERE  c.Fecha >= _FechaDesde and c.Status <> 'C' and m.ID_Bodega = _ID_Bodega and c.ID_Prod = _ID_Prod ),0), 
		coalesce(	(	SELECT sum(c.Salida)
				FROM TBL_INVSERV_COSTOS_DETALLE c INNER JOIN TBL_INVSERV_INVENTARIOS i ON 
							i.ID_Prod = c.ID_Prod	INNER JOIN TBL_INVSERV_ALMACEN_MOVIM_CAB m ON 
							m.ID_Movimiento = c.ID_Movimiento INNER JOIN TBL_INVSERV_COSTOS_CONCEPTOS cc ON
							c.ID_Concepto = cc.ID_Concepto
				WHERE  c.Fecha >= _FechaDesde and c.Status <> 'C' and m.ID_Bodega = _ID_Bodega and c.ID_Prod = _ID_Prod ),0),
		coalesce(	( select e.EXistenciaFin
					from TBL_INVSERV_EXISTENCIAS_PERIODOS e INNER JOIN TBL_INVSERV_INVENTARIOS c ON
							e.ID_Prod = c.ID_Prod
					where e.ID_Bodega = _ID_Bodega and e.Mes = _Mes and e.Ano = _Ano and c.ID_Prod = _ID_Prod )
				+ 
			(	SELECT sum(c.Entrada) - sum(c.Salida)
				FROM TBL_INVSERV_COSTOS_DETALLE c INNER JOIN TBL_INVSERV_INVENTARIOS i ON 
							i.ID_Prod = c.ID_Prod	INNER JOIN TBL_INVSERV_ALMACEN_MOVIM_CAB m ON 
							m.ID_Movimiento = c.ID_Movimiento INNER JOIN TBL_INVSERV_COSTOS_CONCEPTOS cc ON
							c.ID_Concepto = cc.ID_Concepto
				WHERE  c.Fecha >= _FechaDesde and c.Status <> 'C' and m.ID_Bodega = _ID_Bodega and c.ID_Prod = _ID_Prod ),0);
				
	INSERT INTO _TMP_MOVIMIENTOS ( Fecha, Descripcion, Entrada, Salida, Existencia )
	SELECT '', '', 0, 0, 0;
	
	RETURN QUERY
	select Fecha, Descripcion, Entrada, Salida, Existencia
	from _TMP_MOVIMIENTOS
	order by ID_Clave desc;

	DROP TABLE _TMP_MOVIMIENTOS;
	
END
$BODY$
  LANGUAGE plpgsql;
--ALTER FUNCTION rep_invserv_existencias(character varying, bit, smallint, smallint, smallint)

--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_catalog_entidades_compras AS 
 SELECT c.id_entidadcompra AS clave, c.descripcion, c.status AS especial
   FROM tbl_compras_entidades c
  WHERE c.id_tipoentidad = 0;

--ALTER TABLE view_catalog_entidades_compras   

--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_catalog_entidades_compgas AS 
 SELECT c.id_entidadcompra AS clave, c.descripcion, c.status AS especial
   FROM tbl_compras_entidades c;

--ALTER TABLE view_catalog_entidades_compgas

--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_catalog_entidades_ventas AS 
 SELECT c.id_entidadventa AS clave, 
    c.descripcion, 
    c.status AS especial
   FROM tbl_ventas_entidades c;

  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION rep_clipro_estado_cuenta(_clipro character varying, _entidad smallint, _orden character varying, _direccion character varying)
  RETURNS SETOF record AS
$BODY$
DECLARE
	 _CUR_CP refcursor;  _CUR_CXCP refcursor;  _CUR_PAG refcursor;
	_CP RECORD; _CXCP RECORD; _PAG RECORD;
	_TBL_CLIPRO varchar(50); _TBL_CLIPROSL varchar(50); _TBL_CLIPRO_CXPC varchar(50); _TBL_CLIPRO_CXPC_CON varchar(50); _TBL_CLIPROSLMON varchar(50);
BEGIN
	IF _clipro = 'PR'
	THEN
		_TBL_CLIPRO := 'TBL_PROVEE_PROVEE';
		_TBL_CLIPROSL := 'TBL_PROVEE_SALDOS_MONEDAS';
		_TBL_CLIPRO_CXPC := 'TBL_PROVEE_CXP';
		_TBL_CLIPRO_CXPC_CON := 'TBL_PROVEE_CXP_CONCEPTOS';
		_TBL_CLIPROSLMON := 'tbl_provee_saldos_monedas';
	ELSE
		_TBL_CLIPRO := 'TBL_CLIENT_CLIENT';
		_TBL_CLIPROSL := 'TBL_CLIENT_SALDOS_MONEDAS';
		_TBL_CLIPRO_CXPC := 'TBL_CLIENT_CXC';
		_TBL_CLIPRO_CXPC_CON := 'TBL_CLIENT_CXC_CONCEPTOS';
		_TBL_CLIPROSLMON := 'tbl_client_saldos_monedas';
	END IF;
	
	CREATE LOCAL TEMPORARY TABLE _TMP_CLIPRO_ESTADO_CUENTA (
		Part serial NOT NULL ,
		Clave varchar (50) NOT NULL ,
		Concepto varchar (400) NOT NULL ,
		Total varchar(100) NOT NULL ,
		Saldo varchar(100) NOT NULL
	);

	OPEN _CUR_CP FOR EXECUTE 'SELECT c.id_clave, c.id_numero, c.nombre, getcliproslds(c.id_tipo, c.id_clave) AS saldo
						FROM ' || _TBL_CLIPRO || ' c
						WHERE ID_Entidad = ' || quote_literal(_entidad) || ' and ( 	select sum(s.saldo) 
																	from ' || _TBL_CLIPROSL || ' s 
																	where s.id_tipo = c.id_tipo and s.id_clave = c.id_clave ) <> 0
						ORDER BY ' || _Orden || ' ' || _Direccion;
	LOOP
		FETCH NEXT FROM _CUR_CP INTO _CP;
		EXIT WHEN _CP IS NULL;
		
		INSERT INTO _TMP_CLIPRO_ESTADO_CUENTA (Clave,Concepto,Total,Saldo)
		VALUES(_CP.ID_Numero, _CP.Nombre, '', _CP.Saldo);
		INSERT INTO _TMP_CLIPRO_ESTADO_CUENTA (Clave,Concepto,Total,Saldo)
		VALUES('', '', '', '');

		OPEN _CUR_CXCP FOR EXECUTE 'SELECT c.ID_CP, c.ID_TipoCP, c.ID_Aplicacion, c.Fecha,  m.Simbolo,
							CASE
							    WHEN con.desistema = B''1''::"bit" THEN ( SELECT m.msj1
									FROM tbl_msj m
								      WHERE m.alc::text = ''CEF''::text AND m.mod::text = ''CXPC_ENLACES''::text AND m.sub::text = ''CATALOGO''::text AND m.elm::text = con.id_concepto::text)
								    ELSE con.descripcion
								END AS Descripcion, c.Concepto, c.Vencimiento,  
									date_part(''day'', NOW() - c.Vencimiento) as Retraso,   
								CASE WHEN c.ID_TipoCP = ''ANT'' then -c.Total ELSE c.Total END AS Total, 
								CASE WHEN c.ID_TipoCP = ''ANT'' then -c.Saldo ELSE c.Saldo END AS Saldo
							FROM ' || _TBL_CLIPRO_CXPC || ' c inner join ' || _TBL_CLIPRO_CXPC_CON || ' con on   
								c.ID_Concepto = con.ID_Concepto  inner join tbl_cont_monedas m on
								m.clave = c.moneda
							WHERE (c.ID_TipoCP = ''ALT'' or c.ID_TipoCP = ''ANT'') and c.Status <> ''C'' and c.Saldo <> 0 and  c.ID_TipoCliPro = ''' || _clipro || ''' and c.ID_ClaveCliPro = ' || _CP.ID_Clave || '
							ORDER BY c.Fecha DESC, c.ID_CP DESC';
		LOOP
			FETCH NEXT FROM _CUR_CXCP INTO _CXCP;
			EXIT WHEN _CXCP IS NULL;
		
			INSERT INTO _TMP_CLIPRO_ESTADO_CUENTA (Clave,Concepto,Total,Saldo)
			SELECT to_char(_CXCP.Fecha, 'DD/MM/YYYY'), _CXCP.Descripcion || ' / ' || _CXCP.Concepto || 
				CASE WHEN _CXCP.ID_TipoCP = 'ALT' THEN ' Vence: ' || to_char(_CXCP.Vencimiento, 'DD/MM/YYYY') || ' (' || _CXCP.Retraso || ' Dias)' ELSE ' ' END, _CXCP.Simbolo || ' ' || cast(round(_CXCP.Total,2) as varchar), _CXCP.Simbolo || ' ' || cast(round(_CXCP.Saldo,2) as varchar);

			OPEN _CUR_PAG FOR EXECUTE 'SELECT c.ID_CP, c.ID_Aplicacion, c.ID_TipoCP, c.Fecha,  m.Simbolo,
								CASE
								    WHEN con.desistema = B''1''::"bit" THEN ( SELECT m.msj1
								       FROM tbl_msj m
								      WHERE m.alc::text = ''CEF''::text AND m.mod::text = ''CXPC_ENLACES''::text AND m.sub::text = ''CATALOGO''::text AND m.elm::text = con.id_concepto::text)
								    ELSE con.descripcion
								END AS Descripcion, c.Concepto,    
								CASE WHEN c.ID_TipoCP = ''PAG'' or c.ID_TipoCP = ''SAL'' or c.ID_TipoCP = ''APL'' then -c.Total ELSE c.Total END AS Total  
							FROM ' || _TBL_CLIPRO_CXPC || ' c inner join ' || _TBL_CLIPRO_CXPC_CON || ' con on   
								c.ID_Concepto = con.ID_Concepto  inner join tbl_cont_monedas m on
								m.clave = c.moneda
							WHERE c.ID_Aplicacion = ' || _CXCP.ID_CP || ' and c.ID_TipoCP <> ''' || _CXCP.ID_TipoCP || '''
							ORDER BY c.Fecha DESC, c.ID_CP DESC';
			LOOP
				FETCH NEXT FROM _CUR_PAG INTO _PAG;
				EXIT WHEN _PAG IS NULL;
		
				INSERT INTO _TMP_CLIPRO_ESTADO_CUENTA (Clave,Concepto,Total,Saldo)
				SELECT '', '&nbsp;&nbsp;&nbsp;&nbsp;' || to_char(_PAG.Fecha, 'DD/MM/YYYY') || ' ' || _PAG.Descripcion || ' / ' || _PAG.Concepto, _PAG.Simbolo || ' ' || cast(round(_PAG.Total,2) as varchar), '';
			END LOOP;
			CLOSE _CUR_PAG;
		END LOOP;
		CLOSE _CUR_CXCP;
		INSERT INTO _TMP_CLIPRO_ESTADO_CUENTA (Clave,Concepto,Total,Saldo)
		VALUES('', '', '', '');
	END LOOP;
	CLOSE _CUR_CP;

	INSERT INTO _TMP_CLIPRO_ESTADO_CUENTA (Clave,Concepto,Total,Saldo)
	VALUES('', '', '', '');
	INSERT INTO _TMP_CLIPRO_ESTADO_CUENTA (Clave,Concepto,Total,Saldo)
	VALUES('', '', '', '-SALDOS TOTALES-');
	INSERT INTO _TMP_CLIPRO_ESTADO_CUENTA (Clave,Concepto,Total,Saldo)
	VALUES('', '', '', '');

	OPEN _CUR_CP FOR EXECUTE 'select m.simbolo, coalesce(sum(s.saldo),0) as saldo 
									from tbl_cont_monedas m join ' || _TBL_CLIPROSLMON || ' s on m.clave = s.id_moneda join ' || _TBL_CLIPRO || ' cat on s.id_clave = cat.id_clave
									where s.saldo <> 0.00 and s.id_tipo = ''' || _clipro || ''' and cat.id_entidad = ' || _Entidad || '
									group by m.clave, m.simbolo
									order by m.clave asc';
	LOOP
		FETCH NEXT FROM _CUR_CP INTO _CP;
		EXIT WHEN _CP IS NULL;
		
		INSERT INTO _TMP_CLIPRO_ESTADO_CUENTA (Clave,Concepto,Total,Saldo)
		VALUES('', '', '', _CP.Simbolo || ' ' || cast(round(_CP.Saldo,2) as varchar));
	END LOOP;
	CLOSE _CUR_CP;
	
	RETURN QUERY
	select Clave, Concepto, Total, Saldo
	from _TMP_CLIPRO_ESTADO_CUENTA
	order by part ASC;

	DROP TABLE _TMP_CLIPRO_ESTADO_CUENTA;

END
$BODY$
  LANGUAGE plpgsql;

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION rep_clipro_estado_cuenta(
    _clipro character varying,
    _id_clipro integer,
    _entidad smallint,
    _orden character varying,
    _direccion character varying)
  RETURNS SETOF record AS
$BODY$
DECLARE
	 _CUR_CP refcursor;  _CUR_CXCP refcursor;  _CUR_PAG refcursor;
	_CP RECORD; _CXCP RECORD; _PAG RECORD;
	_TBL_CLIPRO varchar(50); _TBL_CLIPROSL varchar(50); _TBL_CLIPRO_CXPC varchar(50); _TBL_CLIPRO_CXPC_CON varchar(50); _TBL_CLIPROSLMON varchar(50); 
	_TBL_VENCOMP_ENT varchar(50); _id_entidadvencomp varchar(50);	_AND_ID_CLIPRO varchar(50); _AND_ID_ENTIDAD varchar(50);
BEGIN
	IF _clipro = 'PR'
	THEN
		_TBL_CLIPRO := 'TBL_PROVEE_PROVEE';
		_TBL_CLIPROSL := 'TBL_PROVEE_SALDOS_MONEDAS';
		_TBL_CLIPRO_CXPC := 'TBL_PROVEE_CXP';
		_TBL_CLIPRO_CXPC_CON := 'TBL_PROVEE_CXP_CONCEPTOS';
		_TBL_CLIPROSLMON := 'tbl_provee_saldos_monedas';
		_TBL_VENCOMP_ENT := 'tbl_compras_entidades';
		_id_entidadvencomp := 'ID_EntidadCompra';
	ELSE
		_TBL_CLIPRO := 'TBL_CLIENT_CLIENT';
		_TBL_CLIPROSL := 'TBL_CLIENT_SALDOS_MONEDAS';
		_TBL_CLIPRO_CXPC := 'TBL_CLIENT_CXC';
		_TBL_CLIPRO_CXPC_CON := 'TBL_CLIENT_CXC_CONCEPTOS';
		_TBL_CLIPROSLMON := 'tbl_client_saldos_monedas';
		_TBL_VENCOMP_ENT := 'tbl_ventas_entidades';
		_id_entidadvencomp := 'ID_EntidadVenta';
	END IF;
	
	CREATE LOCAL TEMPORARY TABLE _TMP_CLIPRO_ESTADO_CUENTA (
		Part serial NOT NULL ,
		Clave varchar (50) NOT NULL ,
		Concepto varchar (400) NOT NULL ,
		Total varchar(100) NOT NULL ,
		Saldo varchar(100) NOT NULL
	);

	IF _id_clipro = -1
	THEN
		_AND_ID_CLIPRO := ''; --No aplica a ningun cliente o proveedor, por lo tanto no candiciona a nada... tomar√° a todos los clientes o proveedores
	ELSE
		_AND_ID_CLIPRO := 'and c.ID_Clave = ' || quote_literal(_id_clipro) ; 
	END IF;
	
	IF _entidad = -1 --Todas las entidades
	THEN
		_AND_ID_ENTIDAD := ''; --No aplica a ningun cliente o proveedor, por lo tanto no candiciona a nada... tomar√° a todos los clientes o proveedores
	ELSIF _entidad = -2 --Solo entidades contables
	THEN
		_AND_ID_ENTIDAD := 'AND ent.Fija = ''0''';
	ELSIF _entidad = -3 --Solo entidades fijas
	THEN
		_AND_ID_ENTIDAD := 'AND ent.Fija = ''1''';
	ELSE --La entidad seleccionada
		_AND_ID_ENTIDAD := 'AND c.ID_Entidad = ' || quote_literal(_entidad) ; 
	END IF;

	OPEN _CUR_CP FOR EXECUTE 'SELECT c.id_clave, ent.Descripcion, c.id_numero, c.nombre, getcliproslds(c.id_tipo, c.id_clave) AS saldo
						FROM ' || _TBL_CLIPRO || ' c INNER JOIN ' || _TBL_VENCOMP_ENT || ' ent 
							ON c.ID_Entidad = ent.' || _id_entidadvencomp || '
						WHERE  ( select sum(s.saldo) from ' || _TBL_CLIPROSL || ' s where s.id_tipo = c.id_tipo and s.id_clave = c.id_clave ) <> 0 ' ||
						_AND_ID_ENTIDAD || ' ' || _AND_ID_CLIPRO || '
						ORDER BY ' || _Orden || ' ' || _Direccion;
	LOOP
		FETCH NEXT FROM _CUR_CP INTO _CP;
		EXIT WHEN _CP IS NULL;

		INSERT INTO _TMP_CLIPRO_ESTADO_CUENTA (Clave,Concepto,Total,Saldo)
		VALUES(  '<b>' || (case when (_entidad = -1 or _entidad = -2 or _entidad = -3) then _CP.Descripcion || ':' else '' end) || ' ' || _CP.ID_Numero || '</b>', '<b>' || _CP.Nombre || '</b>', '', '<b>' || _CP.Saldo || '</b>');
		
		OPEN _CUR_CXCP FOR EXECUTE 'SELECT c.ID_CP, c.ID_TipoCP, c.ID_Aplicacion, c.Fecha,  m.Simbolo,
							CASE
							    WHEN con.desistema = B''1''::"bit" THEN ( SELECT m.msj1
									FROM tbl_msj m
								      WHERE m.alc::text = ''CEF''::text AND m.mod::text = ''CXPC_ENLACES''::text AND m.sub::text = ''CATALOGO''::text AND m.elm::text = con.id_concepto::text)
								    ELSE con.descripcion
								END AS Descripcion, c.Concepto, c.Vencimiento,  
									date_part(''day'', NOW() - c.Vencimiento) as Retraso,   
								CASE WHEN c.ID_TipoCP = ''ANT'' then -c.Total ELSE c.Total END AS Total, 
								CASE WHEN c.ID_TipoCP = ''ANT'' then -c.Saldo ELSE c.Saldo END AS Saldo
							FROM ' || _TBL_CLIPRO_CXPC || ' c inner join ' || _TBL_CLIPRO_CXPC_CON || ' con on   
								c.ID_Concepto = con.ID_Concepto  inner join tbl_cont_monedas m on
								m.clave = c.moneda
							WHERE (c.ID_TipoCP = ''ALT'' or c.ID_TipoCP = ''ANT'') and c.Status <> ''C'' and c.Saldo <> 0 and  c.ID_TipoCliPro = ''' || _clipro || ''' and c.ID_ClaveCliPro = ' || _CP.ID_Clave || '
							ORDER BY c.Fecha DESC, c.ID_CP DESC';
		LOOP
			FETCH NEXT FROM _CUR_CXCP INTO _CXCP;
			EXIT WHEN _CXCP IS NULL;
		
			INSERT INTO _TMP_CLIPRO_ESTADO_CUENTA (Clave,Concepto,Total,Saldo)
			SELECT to_char(_CXCP.Fecha, 'DD/MM/YYYY'), _CXCP.Descripcion || ' / ' || _CXCP.Concepto || 
				CASE WHEN _CXCP.ID_TipoCP = 'ALT' THEN ' Vence: ' || to_char(_CXCP.Vencimiento, 'DD/MM/YYYY') || ' (' || _CXCP.Retraso || ' Dias)' ELSE ' ' END, _CXCP.Simbolo || ' ' || cast(round(_CXCP.Total,2) as varchar), _CXCP.Simbolo || ' ' || cast(round(_CXCP.Saldo,2) as varchar);
				OPEN _CUR_PAG FOR EXECUTE 'SELECT c.ID_CP, c.ID_Aplicacion, c.ID_TipoCP, c.Fecha,  m.Simbolo,
								CASE
								    WHEN con.desistema = B''1''::"bit" THEN ( SELECT m.msj1
								       FROM tbl_msj m
								      WHERE m.alc::text = ''CEF''::text AND m.mod::text = ''CXPC_ENLACES''::text AND m.sub::text = ''CATALOGO''::text AND m.elm::text = con.id_concepto::text)
								    ELSE con.descripcion
								END AS Descripcion, c.Concepto,    
								CASE WHEN c.ID_TipoCP = ''PAG'' or c.ID_TipoCP = ''SAL'' or c.ID_TipoCP = ''APL'' then -c.Total ELSE c.Total END AS Total  
							FROM ' || _TBL_CLIPRO_CXPC || ' c inner join ' || _TBL_CLIPRO_CXPC_CON || ' con on   
								c.ID_Concepto = con.ID_Concepto  inner join tbl_cont_monedas m on
								m.clave = c.moneda
							WHERE c.ID_Aplicacion = ' || _CXCP.ID_CP || ' and c.Status <> ''C'' and c.ID_TipoCP <> ''' || _CXCP.ID_TipoCP || '''
							ORDER BY c.Fecha DESC, c.ID_CP DESC';
			LOOP
				FETCH NEXT FROM _CUR_PAG INTO _PAG;
				EXIT WHEN _PAG IS NULL;
		
				INSERT INTO _TMP_CLIPRO_ESTADO_CUENTA (Clave,Concepto,Total,Saldo)
				SELECT '', '&nbsp;&nbsp;&nbsp;&nbsp;' || to_char(_PAG.Fecha, 'DD/MM/YYYY') || ' ' || _PAG.Descripcion || ' / ' || _PAG.Concepto, _PAG.Simbolo || ' ' || cast(round(_PAG.Total,2) as varchar), '';
			END LOOP;
			CLOSE _CUR_PAG;
		END LOOP;
		CLOSE _CUR_CXCP;
		INSERT INTO _TMP_CLIPRO_ESTADO_CUENTA (Clave,Concepto,Total,Saldo)
		VALUES('&nbsp;', '&nbsp;', '&nbsp;', '&nbsp;');
	END LOOP;
	
	CLOSE _CUR_CP;

	INSERT INTO _TMP_CLIPRO_ESTADO_CUENTA (Clave,Concepto,Total,Saldo)
	VALUES('&nbsp;', '&nbsp;', '&nbsp;', '&nbsp;');
	INSERT INTO _TMP_CLIPRO_ESTADO_CUENTA (Clave,Concepto,Total,Saldo)
	VALUES('', '', '', '<b>SALDOS TOTALES</b>');
	INSERT INTO _TMP_CLIPRO_ESTADO_CUENTA (Clave,Concepto,Total,Saldo)
	VALUES('&nbsp;', '&nbsp;', '&nbsp;', '&nbsp;');

	IF _id_clipro = -1
	THEN
		_AND_ID_CLIPRO := ''; --No aplica a ningun cliente o proveedor, por lo tanto no candiciona a nada... tomar√° a todos los clientes o proveedores
	ELSE
		_AND_ID_CLIPRO := 'and s.id_clave = ' || quote_literal(_id_clipro) ; 
	END IF;
	IF _entidad = -1
	THEN
		_AND_ID_ENTIDAD := ''; --No aplica a ningun cliente o proveedor, por lo tanto no candiciona a nada... tomar√° a todos los clientes o proveedores
	ELSIF _entidad = -2 --Solo entidades contables
	THEN
		_AND_ID_ENTIDAD := 'and ent.fija =''0''';
	ELSIF _entidad = -3 --Solo entidades fijas
	THEN
		_AND_ID_ENTIDAD := 'and ent.fija = ''1''';
	ELSE --La entidad seleccionada
		_AND_ID_ENTIDAD := 'and cat.id_entidad = ' || quote_literal(_entidad) ; 
	END IF;

	OPEN _CUR_CP FOR EXECUTE 'select ent.descripcion, m.clave, m.simbolo, m.tc, coalesce(sum(s.saldo),0) as saldo 
									from tbl_cont_monedas m join ' || _TBL_CLIPROSLMON || ' s 
										on m.clave = s.id_moneda join ' || _TBL_CLIPRO || ' cat 
										on s.id_clave = cat.id_clave join ' || _TBL_VENCOMP_ENT || ' ent 
										on cat.ID_Entidad = ent.' || _id_entidadvencomp || '
									where s.saldo <> 0.00 and s.id_tipo = ''' || _clipro || ''' ' || _AND_ID_ENTIDAD || ' ' || _AND_ID_CLIPRO || '
									group by cat.id_entidad, ent.descripcion, m.clave, m.simbolo, m.tc
									order by cat.id_entidad asc, m.clave asc';
	LOOP
		FETCH NEXT FROM _CUR_CP INTO _CP;
		EXIT WHEN _CP IS NULL;
		
		INSERT INTO _TMP_CLIPRO_ESTADO_CUENTA (Clave,Concepto,Total,Saldo)
		VALUES((case when (_entidad = -1 or _entidad = -2 or _entidad = -3) then '<b>' || _CP.Descripcion || '</b>' else '' end), '', 
					'<b>' || _CP.Simbolo || ' ' || cast(round(_CP.Saldo,2) as varchar) || '</b>','<b>' || (case when _CP.Clave <> 1 then ' $ ' || cast(round(_CP.TC,2) as varchar) else '' end) || '&nbsp;&nbsp;&nbsp;$ ' || cast(round((_CP.Saldo * _CP.TC),2) as varchar) || '</b>' );
	END LOOP;

	CLOSE _CUR_CP;

	INSERT INTO _TMP_CLIPRO_ESTADO_CUENTA (Clave,Concepto,Total,Saldo)
	VALUES('&nbsp;', '&nbsp;', '&nbsp;', '&nbsp;');

	OPEN _CUR_CP FOR EXECUTE 'select coalesce(sum(s.saldo * m.tc),0) as saldo 
									from tbl_cont_monedas m join ' || _TBL_CLIPROSLMON || ' s 
										on m.clave = s.id_moneda join ' || _TBL_CLIPRO || ' cat 
										on s.id_clave = cat.id_clave join ' || _TBL_VENCOMP_ENT || ' ent 
										on cat.ID_Entidad = ent.' || _id_entidadvencomp || '
									where s.saldo <> 0.00 and s.id_tipo = ''' || _clipro || ''' ' || _AND_ID_ENTIDAD || ' ' || _AND_ID_CLIPRO;
	LOOP
		FETCH NEXT FROM _CUR_CP INTO _CP;
		EXIT WHEN _CP IS NULL;
		
		INSERT INTO _TMP_CLIPRO_ESTADO_CUENTA (Clave,Concepto,Total,Saldo)
		VALUES('&nbsp;', '&nbsp;', '&nbsp;', '<b>$ ' || cast(round(_CP.Saldo,2) as varchar) || '</b>');
	END LOOP;
		
	RETURN QUERY
	select Clave, Concepto, Total, Saldo
	from _TMP_CLIPRO_ESTADO_CUENTA
	order by part ASC;
	
	
	DROP TABLE _TMP_CLIPRO_ESTADO_CUENTA;

END
$BODY$
  LANGUAGE plpgsql;
--ALTER FUNCTION rep_clipro_estado_cuenta(character varying, integer, smallint, character varying, character varying)

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION rep_clipro_antiguedad_saldos(
    _periodo character,
    _detallado boolean,
    _clipro character varying,
    _id_clipro integer,
    _entidad smallint,
    _orden character varying,
    _direccion character varying)
  RETURNS SETOF record AS
$BODY$
DECLARE
	 _CUR_CP refcursor;  _CUR_CXCP refcursor;  _CUR_PAG refcursor;
	_CP RECORD; _CXCP RECORD; _PAG RECORD;
	_TBL_CLIPRO varchar(50); _TBL_CLIPROSL varchar(50); _TBL_CLIPRO_CXPC varchar(50); _TBL_CLIPRO_CXPC_CON varchar(50); _TBL_CLIPROSLMON varchar(50); 
	_TBL_VENCOMP_ENT varchar(50); _id_entidadvencomp varchar(50);	_AND_ID_CLIPRO varchar(50); _AND_ID_ENTIDAD varchar(50);
	_DESDE1 varchar(3); _HASTA1 varchar(3); _DESDE2 varchar(3); _HASTA2 varchar(3); _DESDE3 varchar(3); _HASTA3 varchar(3);
BEGIN
	IF _periodo = 'SEM'
	THEN
		_DESDE1 := '1';
		_HASTA1 := '7';
		_DESDE2 := '8';
		_HASTA2 := '14';
		_DESDE3 := '15';
		_HASTA3 := '21';
	ELSIF _periodo = 'QUI'
	THEN
		_DESDE1 := '1';
		_HASTA1 := '15';
		_DESDE2 := '16';
		_HASTA2 := '30';
		_DESDE3 := '31';
		_HASTA3 := '45';
	ELSIF _periodo = 'MEN'
	THEN
		_DESDE1 := '1';
		_HASTA1 := '30';
		_DESDE2 := '31';
		_HASTA2 := '60';
		_DESDE3 := '61';
		_HASTA3 := '90';
	ELSIF _periodo = 'BIM'
	THEN
		_DESDE1 := '1';
		_HASTA1 := '60';
		_DESDE2 := '61';
		_HASTA2 := '120';
		_DESDE3 := '121';
		_HASTA3 := '180';
	ELSIF _periodo = 'TRI'
	THEN
		_DESDE1 := '1';
		_HASTA1 := '90';
		_DESDE2 := '91';
		_HASTA2 := '180';
		_DESDE3 := '181';
		_HASTA3 := '270';
	ELSE -- 'SEM' semestral
		_DESDE1 := '1';
		_HASTA1 := '182';
		_DESDE2 := '183';
		_HASTA2 := '365';
		_DESDE3 := '366';
		_HASTA3 := '548';
	END IF;	
	
	IF _clipro = 'PR'
	THEN
		_TBL_CLIPRO := 'TBL_PROVEE_PROVEE';
		_TBL_CLIPROSL := 'TBL_PROVEE_SALDOS_MONEDAS';
		_TBL_CLIPRO_CXPC := 'TBL_PROVEE_CXP';
		_TBL_CLIPRO_CXPC_CON := 'TBL_PROVEE_CXP_CONCEPTOS';
		_TBL_CLIPROSLMON := 'tbl_provee_saldos_monedas';
		_TBL_VENCOMP_ENT := 'tbl_compras_entidades';
		_id_entidadvencomp := 'ID_EntidadCompra';
	ELSE
		_TBL_CLIPRO := 'TBL_CLIENT_CLIENT';
		_TBL_CLIPROSL := 'TBL_CLIENT_SALDOS_MONEDAS';
		_TBL_CLIPRO_CXPC := 'TBL_CLIENT_CXC';
		_TBL_CLIPRO_CXPC_CON := 'TBL_CLIENT_CXC_CONCEPTOS';
		_TBL_CLIPROSLMON := 'tbl_client_saldos_monedas';
		_TBL_VENCOMP_ENT := 'tbl_ventas_entidades';
		_id_entidadvencomp := 'ID_EntidadVenta';
	END IF;
	
	CREATE LOCAL TEMPORARY TABLE _TMP_CLIPRO_ANTIGUEDAD_SALDOS (
		Part serial NOT NULL ,
		Clave varchar (50) NOT NULL ,
		Nombre varchar (400) NOT NULL ,
		Saldo varchar(100) NOT NULL,
		NV varchar(50) NOT NULL,
		V1 varchar(50) NOT NULL,
		V2 varchar(50) NOT NULL,
		V3 varchar(50) NOT NULL,
		V4 varchar(50) NOT NULL
	);

	CREATE LOCAL TEMPORARY TABLE _TMP_PRE_ACUM (
		ID_Entidad smallint NOT NULL ,
		Fija bit NOT NULL,
		ID_Clave integer NOT NULL ,
		ID_Moneda smallint NOT NULL,
		Saldo numeric(19,4) NOT NULL,
		NV numeric(19,4) NOT NULL,
		V1 numeric(19,4) NOT NULL,
		V2 numeric(19,4) NOT NULL,
		V3 numeric(19,4) NOT NULL,
		V4 numeric(19,4) NOT NULL
	);
	
	IF _id_clipro = -1
	THEN
		_AND_ID_CLIPRO := ''; --No aplica a ningun cliente o proveedor, por lo tanto no candiciona a nada... tomar√° a todos los clientes o proveedores
	ELSE
		_AND_ID_CLIPRO := 'and pr.ID_Clave = ' || quote_literal(_id_clipro) ; 
	END IF;
	
	IF _entidad = -1 --Todas las entidades
	THEN
		_AND_ID_ENTIDAD := ''; --No aplica a ningun cliente o proveedor, por lo tanto no candiciona a nada... tomar√° a todos los clientes o proveedores
	ELSIF _entidad = -2 --Solo entidades contables
	THEN
		_AND_ID_ENTIDAD := 'AND ent.Fija = ''0''';
	ELSIF _entidad = -3 --Solo entidades fijas
	THEN
		_AND_ID_ENTIDAD := 'AND ent.Fija = ''1''';
	ELSE --La entidad seleccionada
		_AND_ID_ENTIDAD := 'AND c.ID_Entidad = ' || quote_literal(_entidad) ; 
	END IF;

	INSERT INTO _TMP_CLIPRO_ANTIGUEDAD_SALDOS (Clave, Nombre, Saldo, NV, V1, V2, V3, V4) 
	VALUES(  '&nbsp', '&nbsp;','Total','Sin retraso',_DESDE1 || ' a ' || _HASTA1, _DESDE2 || ' a ' || _HASTA2, _DESDE3 || ' a ' || _HASTA3,'Mas de ' || _HASTA3 ); 
		
	OPEN _CUR_CP FOR EXECUTE 'SELECT pr.ID_Clave, ent.' || _id_entidadvencomp || ' as ID_Entidad, ent.Fija, ent.Descripcion, pr.ID_Numero, pr.Nombre, m.Clave as ID_Moneda, m.Simbolo, 
										sum( (case when  c.ID_TipoCP = ''ALT'' then c.Saldo else -c.Saldo end)) as Saldo,
								      (select sum(case when  ic.ID_TipoCP = ''ALT'' then ic.Saldo else -ic.Saldo end)
									from ' || _TBL_CLIPRO_CXPC || ' ic inner join tbl_cont_monedas im on
										im.clave = ic.moneda inner join ' || _TBL_CLIPRO || ' ipr on
										ipr.ID_Clave = ic.ID_ClaveCliPro
									where  (ic.ID_TipoCP = ''ALT'' OR ic.ID_TipoCP = ''ANT'') and ic.Status <> ''C'' and ic.Saldo <> 0 and ic.ID_TipoCliPro = ''' || _clipro || ''' and im.clave = m.clave and ipr.ID_Clave = pr.ID_Clave
										and date_part(''day'', NOW() - ic.Vencimiento) <= 0 ) as NV,
									 (select sum(case when  ic.ID_TipoCP = ''ALT'' then ic.Saldo else -ic.Saldo end)
									from ' || _TBL_CLIPRO_CXPC || ' ic inner join tbl_cont_monedas im on
										im.clave = ic.moneda inner join ' || _TBL_CLIPRO || ' ipr on
										ipr.ID_Clave = ic.ID_ClaveCliPro
									where  (ic.ID_TipoCP = ''ALT'' OR ic.ID_TipoCP = ''ANT'') and ic.Status <> ''C'' and ic.Saldo <> 0 and ic.ID_TipoCliPro = ''' || _clipro || ''' and im.clave = m.clave and ipr.ID_Clave = pr.ID_Clave
										and date_part(''day'', NOW() - ic.Vencimiento) between ' || _DESDE1 || ' and ' || _HASTA1 || ') as V1,
									 (select sum(case when  ic.ID_TipoCP = ''ALT'' then ic.Saldo else -ic.Saldo end)
									from ' || _TBL_CLIPRO_CXPC || ' ic inner join tbl_cont_monedas im on
										im.clave = ic.moneda inner join ' || _TBL_CLIPRO || ' ipr on
										ipr.ID_Clave = ic.ID_ClaveCliPro
									where  (ic.ID_TipoCP = ''ALT'' OR ic.ID_TipoCP = ''ANT'') and ic.Status <> ''C'' and ic.Saldo <> 0 and ic.ID_TipoCliPro = ''' || _clipro || ''' and im.clave = m.clave and ipr.ID_Clave = pr.ID_Clave
										and date_part(''day'', NOW() - ic.Vencimiento) between ' || _DESDE2 || ' and ' || _HASTA2 || ') as V2,
									 (select sum(case when  ic.ID_TipoCP = ''ALT'' then ic.Saldo else -ic.Saldo end)
									from ' || _TBL_CLIPRO_CXPC || ' ic inner join tbl_cont_monedas im on
										im.clave = ic.moneda inner join ' || _TBL_CLIPRO || ' ipr on
										ipr.ID_Clave = ic.ID_ClaveCliPro
									where  (ic.ID_TipoCP = ''ALT'' OR ic.ID_TipoCP = ''ANT'') and ic.Status <> ''C'' and ic.Saldo <> 0 and ic.ID_TipoCliPro = ''' || _clipro || ''' and im.clave = m.clave and ipr.ID_Clave = pr.ID_Clave
										and date_part(''day'', NOW() - ic.Vencimiento) between ' || _DESDE3 || ' and ' || _HASTA3 || ') as V3,
									 (select sum(case when  ic.ID_TipoCP = ''ALT'' then ic.Saldo else -ic.Saldo end)
									from ' || _TBL_CLIPRO_CXPC || ' ic inner join tbl_cont_monedas im on
										im.clave = ic.moneda inner join ' || _TBL_CLIPRO || ' ipr on
										ipr.ID_Clave = ic.ID_ClaveCliPro
									where  (ic.ID_TipoCP = ''ALT'' OR ic.ID_TipoCP = ''ANT'') and ic.Status <> ''C'' and ic.Saldo <> 0 and ic.ID_TipoCliPro = ''' || _clipro || ''' and im.clave = m.clave and ipr.ID_Clave = pr.ID_Clave
										and date_part(''day'', NOW() - ic.Vencimiento) > ' || _HASTA3 || ') as V4
								FROM ' || _TBL_CLIPRO_CXPC || ' c inner join tbl_cont_monedas m on
										m.clave = c.moneda inner join ' || _TBL_CLIPRO || ' pr on
										pr.ID_Clave = c.ID_ClaveCliPro INNER JOIN ' || _TBL_VENCOMP_ENT || ' ent on 
										c.ID_Entidad = ent.' || _id_entidadvencomp || '
								WHERE (c.ID_TipoCP = ''ALT'' OR c.ID_TipoCP = ''ANT'') and c.Status <> ''C'' and c.Saldo <> 0 and  c.ID_TipoCliPro = ''' || _clipro || ''' ' ||
									/*and c.ID_Entidad = 1  and pr.ID_Clave = 30*/
									_AND_ID_ENTIDAD || ' ' || _AND_ID_CLIPRO || '
								GROUP BY pr.ID_Clave, ent.' || _id_entidadvencomp || ', ent.Fija, ent.Descripcion, pr.ID_Numero, pr.Nombre, m.Clave, m.Simbolo
								ORDER BY ' || _Orden || ' ' || _Direccion;
	LOOP
		FETCH NEXT FROM _CUR_CP INTO _CP;
		EXIT WHEN _CP IS NULL;

		INSERT INTO _TMP_PRE_ACUM (ID_Entidad, Fija, ID_Clave, ID_Moneda, Saldo, NV, V1, V2, V3, V4)
		VALUES(  _CP.ID_Entidad, _CP.Fija, _CP.ID_Clave, _CP.ID_Moneda, coalesce(_CP.Saldo,0), coalesce(_CP.NV,0), coalesce(_CP.V1,0),  coalesce(_CP.V2,0),  coalesce(_CP.V3,0),  coalesce(_CP.V4,0) );
		
		INSERT INTO _TMP_CLIPRO_ANTIGUEDAD_SALDOS (Clave, Nombre, Saldo, NV, V1, V2, V3, V4) 
		VALUES(  '<b>' || (case when (_entidad = -1 or _entidad = -2 or _entidad = -3) then _CP.Descripcion || ':' else '' end) || ' ' || _CP.ID_Numero || '</b>', '<b>' || _CP.Nombre || '</b>', 
					(case when _CP.Saldo is not null then '<b>' || _CP.Simbolo || ' ' || cast(round(_CP.Saldo,2) as varchar) || '</b>' else '&nbsp;' end),
					(case when _CP.NV is not null then '<b>' || _CP.Simbolo || ' ' || cast(round(_CP.NV,2) as varchar) || '</b>' else '&nbsp;' end),
					(case when _CP.V1 is not null then '<b>' || _CP.Simbolo || ' ' || cast(round(_CP.V1,2) as varchar) || '</b>' else '&nbsp;' end),
					(case when _CP.V2 is not null then '<b>' || _CP.Simbolo || ' ' || cast(round(_CP.V2,2) as varchar) || '</b>' else '&nbsp;' end),
					(case when _CP.V3 is not null then '<b>' || _CP.Simbolo || ' ' || cast(round(_CP.V3,2) as varchar) || '</b>' else '&nbsp;' end),
					(case when _CP.V4 is not null then '<b>' || _CP.Simbolo || ' ' || cast(round(_CP.V4,2) as varchar) || '</b>' else '&nbsp;' end) );

		IF _Detallado = true
		THEN			
			OPEN _CUR_CXCP FOR EXECUTE 
					'SELECT c.ID_CP, c.ID_TipoCP, c.ID_Aplicacion, c.Fecha,  m.Simbolo,
							CASE
							    WHEN con.desistema = B''1''::"bit" THEN ( SELECT m.msj1
									FROM tbl_msj m
								      WHERE m.alc::text = ''CEF''::text AND m.mod::text = ''CXPC_ENLACES''::text AND m.sub::text = ''CATALOGO''::text AND m.elm::text = con.id_concepto::text)
								    ELSE con.descripcion
								END AS Descripcion, c.Concepto, c.Vencimiento,  
									date_part(''day'', NOW() - c.Vencimiento) as Retraso,   
								CASE WHEN c.ID_TipoCP = ''ANT'' then -c.Saldo ELSE c.Saldo END AS Saldo
							FROM ' || _TBL_CLIPRO_CXPC || ' c inner join ' || _TBL_CLIPRO_CXPC_CON || ' con on   
								c.ID_Concepto = con.ID_Concepto  inner join tbl_cont_monedas m on
								m.clave = c.moneda
							WHERE (c.ID_TipoCP = ''ALT'' or c.ID_TipoCP = ''ANT'') and c.Status <> ''C'' and c.Saldo <> 0 and  c.ID_TipoCliPro = ''' || _clipro || ''' and c.ID_ClaveCliPro = ' || _CP.ID_Clave || ' and c.moneda = ' || _CP.ID_Moneda || '
							ORDER BY c.Fecha DESC, c.ID_CP DESC';
			LOOP
				FETCH NEXT FROM _CUR_CXCP INTO _CXCP;
				EXIT WHEN _CXCP IS NULL;
		
				INSERT INTO _TMP_CLIPRO_ANTIGUEDAD_SALDOS (Clave, Nombre, Saldo, NV, V1, V2, V3, V4) 
				SELECT to_char(_CXCP.Fecha, 'DD/MM/YYYY'), _CXCP.Descripcion || ' / ' || _CXCP.Concepto || CASE WHEN _CXCP.ID_TipoCP = 'ALT' THEN ' Vence: ' || to_char(_CXCP.Vencimiento, 'DD/MM/YYYY') || ' (' || _CXCP.Retraso || ' Dias)' ELSE ' ' END, 
					_CXCP.Simbolo || ' ' || cast(round(_CXCP.Saldo,2) as varchar),
					case when _CXCP.Retraso <= 0 then (_CXCP.Simbolo || ' ' || cast(round(_CXCP.Saldo,2) as varchar)) else '&nbsp;' end,
					case when _CXCP.Retraso between cast(_DESDE1 as integer) and  cast(_HASTA1 as integer) then (_CXCP.Simbolo || ' ' || cast(round(_CXCP.Saldo,2) as varchar)) else '&nbsp;' end,
					case when _CXCP.Retraso between cast(_DESDE2 as integer) and  cast(_HASTA2 as integer) then (_CXCP.Simbolo || ' ' || cast(round(_CXCP.Saldo,2) as varchar)) else '&nbsp;' end,
					case when _CXCP.Retraso between cast(_DESDE3 as integer) and  cast(_HASTA3 as integer) then (_CXCP.Simbolo || ' ' || cast(round(_CXCP.Saldo,2) as varchar)) else '&nbsp;' end,
					case when _CXCP.Retraso > cast(_HASTA3 as integer) then (_CXCP.Simbolo || ' ' || cast(round(_CXCP.Saldo,2) as varchar)) else '&nbsp;' end;

			END LOOP;
			CLOSE _CUR_CXCP;

		END IF;
		
	END LOOP;
	CLOSE _CUR_CP;

	INSERT INTO _TMP_CLIPRO_ANTIGUEDAD_SALDOS (Clave, Nombre, Saldo, NV, V1, V2, V3, V4) 
	VALUES('&nbsp;', '&nbsp;', '&nbsp;', '&nbsp;', '&nbsp;', '&nbsp;', '&nbsp;', '&nbsp;');

	IF _id_clipro = -1
	THEN
		_AND_ID_CLIPRO := ''; --No aplica a ningun cliente o proveedor, por lo tanto no candiciona a nada... tomar√° a todos los clientes o proveedores
	ELSE
		_AND_ID_CLIPRO := 'and tmp.ID_Clave = ' || quote_literal(_id_clipro) ; 
	END IF;
	
	IF _entidad = -1 --Todas las entidades
	THEN
		_AND_ID_ENTIDAD := ''; --No aplica a ningun cliente o proveedor, por lo tanto no candiciona a nada... tomar√° a todos los clientes o proveedores
	ELSIF _entidad = -2 --Solo entidades contables
	THEN
		_AND_ID_ENTIDAD := 'AND tmp.Fija = ''0''';
	ELSIF _entidad = -3 --Solo entidades fijas
	THEN
		_AND_ID_ENTIDAD := 'AND tmp.Fija = ''1''';
	ELSE --La entidad seleccionada
		_AND_ID_ENTIDAD := 'AND tmp.ID_Entidad = ' || quote_literal(_entidad) ; 
	END IF;

	OPEN _CUR_CP FOR EXECUTE 'select ent.descripcion, tmp.id_moneda, m.simbolo, m.tc, coalesce(sum(tmp.saldo),0) as saldo, coalesce(sum(tmp.nv),0) as nv, coalesce(sum(tmp.v1),0) as v1, coalesce(sum(tmp.v2),0) as v2, coalesce(sum(tmp.v3),0) as v3, coalesce(sum(tmp.v4),0) as v4 
									from _TMP_PRE_ACUM tmp inner join tbl_cont_monedas m 
										on tmp.id_moneda = m.clave inner  join ' || _TBL_CLIPRO || ' cat 
										on tmp.id_clave = cat.id_clave inner join ' || _TBL_VENCOMP_ENT || ' ent 
										on tmp.ID_Entidad = ent.' || _id_entidadvencomp || '
									where tmp.saldo <> 0.00 ' || _AND_ID_ENTIDAD || ' ' || _AND_ID_CLIPRO || '
									group by tmp.id_entidad, ent.descripcion, tmp.id_moneda, m.simbolo, m.tc
									order by tmp.id_entidad asc, tmp.id_moneda asc';
	LOOP
		FETCH NEXT FROM _CUR_CP INTO _CP;
		EXIT WHEN _CP IS NULL;
		
		INSERT INTO _TMP_CLIPRO_ANTIGUEDAD_SALDOS (Clave, Nombre, Saldo, NV, V1, V2, V3, V4) 
		VALUES(  '<b>' || (case when (_entidad = -1 or _entidad = -2 or _entidad = -3) then _CP.Descripcion else '' end) || '</b>', '', 
					'<b>' || _CP.Simbolo || ' ' || cast(round(_CP.Saldo,2) as varchar) || (case when _CP.ID_Moneda <> 1 then ' $ ' || cast(round(_CP.TC,2) as varchar) else '' end) || '</b>',
					'<b>' || _CP.Simbolo || ' ' || cast(round(_CP.NV,2) as varchar) || '</b>',
					'<b>' || _CP.Simbolo || ' ' || cast(round(_CP.V1,2) as varchar) || '</b>',
					'<b>' || _CP.Simbolo || ' ' || cast(round(_CP.V2,2) as varchar) || '</b>',
					'<b>' || _CP.Simbolo || ' ' || cast(round(_CP.V3,2) as varchar) || '</b>',
					'<b>' || _CP.Simbolo || ' ' || cast(round(_CP.V4,2) as varchar) || '</b>' );	
	END LOOP;

	CLOSE _CUR_CP;

	INSERT INTO _TMP_CLIPRO_ANTIGUEDAD_SALDOS (Clave, Nombre, Saldo, NV, V1, V2, V3, V4) 
	VALUES('&nbsp;', '&nbsp;', '&nbsp;', '&nbsp;', '&nbsp;', '&nbsp;', '&nbsp;', '&nbsp;');

	OPEN _CUR_CP FOR EXECUTE 'select coalesce(sum(tmp.saldo * m.tc),0) as saldo, coalesce(sum(tmp.nv * m.tc),0) as nv, coalesce(sum(tmp.v1 * m.tc),0) as v1, coalesce(sum(tmp.v2 * m.tc),0) as v2, coalesce(sum(tmp.v3 * m.tc),0) as v3, coalesce(sum(tmp.v4 * m.tc),0) as v4 
									from _TMP_PRE_ACUM tmp inner join tbl_cont_monedas m 
										on tmp.id_moneda = m.clave inner  join ' || _TBL_CLIPRO || ' cat 
										on tmp.id_clave = cat.id_clave inner join ' || _TBL_VENCOMP_ENT || ' ent 
										on tmp.ID_Entidad = ent.' || _id_entidadvencomp || '
									where tmp.saldo <> 0.00 ' || _AND_ID_ENTIDAD || ' ' || _AND_ID_CLIPRO;
	LOOP
		FETCH NEXT FROM _CUR_CP INTO _CP;
		EXIT WHEN _CP IS NULL;

		INSERT INTO _TMP_CLIPRO_ANTIGUEDAD_SALDOS (Clave, Nombre, Saldo, NV, V1, V2, V3, V4) 
		VALUES(  '&nbsp;', '&nbsp;',
					'<b>$ ' || cast(round(_CP.Saldo,2) as varchar) || '</b>',
					'<b>$ ' || cast(round(_CP.NV,2) as varchar) || '</b>',
					'<b>$ ' || cast(round(_CP.V1,2) as varchar) || '</b>',
					'<b>$ ' || cast(round(_CP.V2,2) as varchar) || '</b>',
					'<b>$ ' || cast(round(_CP.V3,2) as varchar) || '</b>',
					'<b>$ ' || cast(round(_CP.V4,2) as varchar) || '</b>' ); 
	END LOOP;

	CLOSE _CUR_CP;
		
	RETURN QUERY
	select Clave, Nombre, Saldo, NV, V1, V2, V3, V4
	from _TMP_CLIPRO_ANTIGUEDAD_SALDOS
	order by part ASC;
	
	
	DROP TABLE _TMP_CLIPRO_ANTIGUEDAD_SALDOS;
	DROP TABLE  _TMP_PRE_ACUM;
	
END
$BODY$
  LANGUAGE plpgsql;
--ALTER FUNCTION rep_clipro_antiguedad_saldos(character, boolean, character varying, integer, smallint, character varying, character varying)


--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION getcharmonth(_mes integer)
  RETURNS character varying AS
$BODY$  
BEGIN
	if _mes = 1
	then
		RETURN 'ENERO'::varchar;
	elsif _mes = 2
	then
		RETURN 'FEBRERO'::varchar;
	elsif _mes = 3
	then
		RETURN 'MARZO'::varchar;
	elsif _mes = 4
	then
		RETURN 'ABRIL'::varchar;
	elsif _mes = 5
	then
		RETURN 'MAYO'::varchar;
	elsif _mes = 6
	then
		RETURN 'JUNIO'::varchar;
	elsif _mes = 7
	then
		RETURN 'JULIO'::varchar;
	elsif _mes = 8
	then
		RETURN 'AGOSTO'::varchar;
	elsif _mes = 9
	then
		RETURN 'SEPTIEMBRE'::varchar;
	elsif _mes = 10
	then
		RETURN 'OCTUBRE'::varchar;
	elsif _mes = 11
	then
		RETURN 'NOVIEMBRE'::varchar;
	else
		RETURN 'DICIEMBRE'::varchar;
	end if; 
END
$BODY$
  LANGUAGE plpgsql;

  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION rep_ven_fact_acum(_mes smallint, _ano smallint, _ultimos smallint, _noacumulados bit, _entcons smallint)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_cont smallint; _TotalEnt smallint; _NumEnt smallint; _NombreEnt varchar(15);
	_TotalVentas numeric(19,4); _UltimoAno numeric(19,4); _PenultimoAno numeric(19,4); _AnteriorAno numeric(19,4);
	_ENE numeric(19,4); _FEB numeric(19,4); _MAR numeric(19,4); _ABR numeric(19,4); _MAY numeric(19,4); _JUN numeric(19,4); 
	_JUL numeric(19,4); _AGO numeric(19,4); _SEP numeric(19,4); _OCT numeric(19,4);	_NOV numeric(19,4); _DIC numeric(19,4);
	_TVE RECORD;
BEGIN

	

CREATE LOCAL TEMPORARY TABLE _TMP_VENTAS_ENT (
		part serial NOT NULL ,
		Entidad varchar (15)  NOT NULL ,
		Total numeric(19,4) NOT NULL 
	); 
	

CREATE LOCAL TEMPORARY TABLE _TMP_VENTAS (
		part serial NOT NULL ,
		Periodo varchar (20)  NOT NULL ,
		Total numeric(19,4) NOT NULL 
	);
	

CREATE LOCAL TEMPORARY TABLE _TMP_VENTAS_ENT_ANO (
		part serial NOT NULL ,
		Entidad varchar (15)  NOT NULL ,
		Ultimo numeric(19,4) NOT NULL ,
		Penultimo numeric(19,4) NOT NULL ,
		Anterior numeric(19,4) NOT NULL 
	); 
	

CREATE LOCAL TEMPORARY TABLE _TMP_VENTAS_ENT_MES (
		part serial NOT NULL ,
		Entidad varchar (15)  NOT NULL ,
		ENE numeric(19,4) NOT NULL ,
		FEB numeric(19,4) NOT NULL ,
		MAR numeric(19,4) NOT NULL ,
		ABR numeric(19,4) NOT NULL ,
		MAY numeric(19,4) NOT NULL ,
		JUN numeric(19,4) NOT NULL ,
		JUL numeric(19,4) NOT NULL ,
		AGO numeric(19,4) NOT NULL ,
		SEP numeric(19,4) NOT NULL ,
		OCT numeric(19,4) NOT NULL ,
		NOV numeric(19,4) NOT NULL ,
		DIC numeric(19,4) NOT NULL 
	); 

	IF(_NoAcumulados = '0') -- es acumulados generales
	THEN
		IF(_EntCons = -1) -- Se trata del acumulado de entidades generales
		THEN
			if(_Ultimos = 1) -- se trata de comparativo mensual
			then
				_cont := 1;
				while _cont <= 12
				loop
					_TotalVentas := coalesce(( select sum(SubTotal * TC) 
																			from TBL_VENTAS_FACTURAS_CAB
																			where Status <> 'C' and date_part('Month',Fecha) = _cont and date_part('Year',Fecha) = _Ano ),0);
					INSERT INTO _TMP_VENTAS (Periodo,Total)
					SELECT GetCharMonth(_cont), round(_TotalVentas,0);
				
					_cont := _cont + 1;
				end loop;
			
			else -- De lo contrario es un comparativo anual

				_cont := _Ano - _Ultimos + 1;
			
				while _cont <= _Ano
				loop
					_TotalVentas := coalesce(( select sum(SubTotal * TC) 
																			from TBL_VENTAS_FACTURAS_CAB
																			where Status <> 'C' and date_part('Year',Fecha) = _cont ),0);
					
					INSERT INTO _TMP_VENTAS (Periodo,Total)
					SELECT cast(_cont as varchar), round(_TotalVentas,0); 
					
					_cont := _cont + 1;
				end loop;
			
			end if;
		
		ELSE -- se trata de una entidad en especifico
		
			if(_Ultimos = 1) -- se trata de comparativo mensual
			then
				_cont := 1;
				while _cont <= 12
				loop
					_TotalVentas := coalesce(( select sum(SubTotal * TC) 
																			from TBL_VENTAS_FACTURAS_CAB
																			where ID_Entidad = _EntCons and Status <> 'C' and date_part('Month',Fecha) = _cont and date_part('Year',Fecha) = _Ano ),0);
					INSERT INTO _TMP_VENTAS (Periodo,Total)
					SELECT GetCharMonth(_cont), round(_TotalVentas,0); 
				
					_cont := _cont + 1;
				end loop;
			
			else -- De lo contrario es un comparativo anual
				_cont := _Ano - _Ultimos + 1;
			
				while _cont <= _Ano
				loop
					_TotalVentas := coalesce(( select sum(SubTotal * TC) 
																			from TBL_VENTAS_FACTURAS_CAB
																			where ID_Entidad = _EntCons and Status <> 'C' and date_part('Year',Fecha) = _cont ),0);
					
					INSERT INTO _TMP_VENTAS (Periodo,Total)
					SELECT cast(_cont as varchar), round(_TotalVentas,0); 
					
					_cont := _cont + 1;
				end loop;
			
			end if;
		END IF;

		RETURN QUERY
		select Periodo, Total
		from _TMP_VENTAS
		order by part ASC;
	
	ELSE -- Se maneja por detalles de entidad
	
		IF(_EntCons = -1) -- Se trata de comparativos todas las entidades en todos los meses o a?os
		THEN
			if(_Ultimos = 1) -- se trata de comparativo mensual
			then
				for _TVE in	(	SELECT ID_EntidadVenta, Descripcion
								FROM TBL_VENTAS_ENTIDADES
								WHERE ID_TipoEntidad = 0
								ORDER BY ID_EntidadVenta asc
							)
				loop
					_NumEnt := _TVE.ID_EntidadVenta;
					_NombreEnt := _TVE.Descripcion;
		
					_ENE := coalesce( (	select sum(SubTotal * TC)
																from TBL_VENTAS_FACTURAS_CAB
																where Status <> 'C' and ID_Entidad = _NumEnt and date_part('Month',Fecha) = 1 and date_part('Year',Fecha) = _Ano ), 0);
					_FEB := coalesce( (	select sum(SubTotal * TC)
																from TBL_VENTAS_FACTURAS_CAB
																where Status <> 'C' and ID_Entidad = _NumEnt and date_part('Month',Fecha) = 2 and date_part('Year',Fecha) = _Ano ), 0);
					_MAR := coalesce( (	select sum(SubTotal * TC)
																from TBL_VENTAS_FACTURAS_CAB
																where Status <> 'C' and ID_Entidad = _NumEnt and date_part('Month',Fecha) = 3 and date_part('Year',Fecha) = _Ano ), 0);
					_ABR := coalesce( (	select sum(SubTotal * TC)
																from TBL_VENTAS_FACTURAS_CAB
																where Status <> 'C' and ID_Entidad = _NumEnt and date_part('Month',Fecha) = 4 and date_part('Year',Fecha) = _Ano ), 0);
					_MAY := coalesce( (	select sum(SubTotal * TC)
																from TBL_VENTAS_FACTURAS_CAB
																where Status <> 'C' and ID_Entidad = _NumEnt and date_part('Month',Fecha) = 5 and date_part('Year',Fecha) = _Ano ), 0);
					_JUN := coalesce( (	select sum(SubTotal * TC)
																from TBL_VENTAS_FACTURAS_CAB
																where Status <> 'C' and ID_Entidad = _NumEnt and date_part('Month',Fecha) = 6 and date_part('Year',Fecha) = _Ano ), 0);
					_JUL := coalesce( (	select sum(SubTotal * TC)
																from TBL_VENTAS_FACTURAS_CAB
																where Status <> 'C' and ID_Entidad = _NumEnt and date_part('Month',Fecha) = 7 and date_part('Year',Fecha) = _Ano ), 0);
					_AGO := coalesce( (	select sum(SubTotal * TC)
																from TBL_VENTAS_FACTURAS_CAB
																where Status <> 'C' and ID_Entidad = _NumEnt and date_part('Month',Fecha) = 8 and date_part('Year',Fecha) = _Ano ), 0);
					_SEP := coalesce( (	select sum(SubTotal * TC)
																from TBL_VENTAS_FACTURAS_CAB
																where Status <> 'C' and ID_Entidad = _NumEnt and date_part('Month',Fecha) = 9 and date_part('Year',Fecha) = _Ano ), 0);
					_OCT := coalesce( (	select sum(SubTotal * TC)
																from TBL_VENTAS_FACTURAS_CAB
																where Status <> 'C' and ID_Entidad = _NumEnt and date_part('Month',Fecha) = 10 and date_part('Year',Fecha) = _Ano ), 0);
					_NOV := coalesce( (	select sum(SubTotal * TC)
																from TBL_VENTAS_FACTURAS_CAB
																where Status <> 'C' and ID_Entidad = _NumEnt and date_part('Month',Fecha) = 11 and date_part('Year',Fecha) = _Ano ), 0);
					_DIC := coalesce( (	select sum(SubTotal * TC)
																from TBL_VENTAS_FACTURAS_CAB
																where Status <> 'C' and ID_Entidad = _NumEnt and date_part('Month',Fecha) = 12 and date_part('Year',Fecha) = _Ano ), 0);
		
					INSERT INTO _TMP_VENTAS_ENT_MES (Entidad,ENE,FEB,MAR,ABR,MAY,JUN,JUL,AGO,SEP,OCT,NOV,DIC)
					SELECT _NombreEnt, round(_ENE,0), round(_FEB,0), round(_MAR,0),  round(_ABR,0),  round(_MAY,0),  round(_JUN,0),  
						round(_JUL,0),  round(_AGO,0),  round(_SEP,0), round(_OCT,0),  round(_NOV,0),  round(_DIC,0);
									
				end loop;

				RETURN QUERY
				select Entidad,ENE,FEB,MAR,ABR,MAY,JUN,JUL,AGO,SEP,OCT,NOV,DIC
				from _TMP_VENTAS_ENT_MES;
		
			else -- De lo contrario es un comparativo anual
			
				for _TVE in	(	SELECT ID_EntidadVenta, Descripcion
								FROM TBL_VENTAS_ENTIDADES
								WHERE ID_TipoEntidad = 0
								ORDER BY ID_EntidadVenta asc
							)
				loop
					_NumEnt := _TVE.ID_EntidadVenta;
					_NombreEnt := _TVE.Descripcion;
		
					_UltimoAno := coalesce(( select sum(SubTotal * TC) 
																			from TBL_VENTAS_FACTURAS_CAB
																			where Status <> 'C' and ID_Entidad = _NumEnt and date_part('Year',Fecha) = _Ano ),0);
					_PenultimoAno := coalesce(( select sum(SubTotal * TC) 
																			from TBL_VENTAS_FACTURAS_CAB
																			where Status <> 'C' and ID_Entidad = _NumEnt and date_part('Year',Fecha) = (_Ano-1) ),0);
					_AnteriorAno := coalesce(( select sum(SubTotal * TC) 
																			from TBL_VENTAS_FACTURAS_CAB
																			where Status <> 'C' and ID_Entidad = _NumEnt and date_part('Year',Fecha) = (_Ano-2) ),0);
		
					INSERT INTO _TMP_VENTAS_ENT_ANO (Entidad,Ultimo,Penultimo,Anterior)
					SELECT _NombreEnt, round(_UltimoAno,0), round(_PenultimoAno,0), round(_AnteriorAno,0);

				end loop;
				
				RETURN QUERY
				select Entidad,Ultimo,Penultimo,Anterior
				from _TMP_VENTAS_ENT_ANO;
		
			end if;
		
		ELSE -- se trata de comparativos de todas las entidades pero en un mes o ano especifico
		
			if(_Ultimos = 1) -- se trata de comparativo mensual
			then
				for _TVE in	(	SELECT ID_EntidadVenta, Descripcion
								FROM TBL_VENTAS_ENTIDADES
								WHERE ID_TipoEntidad = 0
								ORDER BY ID_EntidadVenta asc
							)
				loop
					_NumEnt := _TVE.ID_EntidadVenta;
					_NombreEnt := _TVE.Descripcion;
		
					_TotalVentas := coalesce( (	select sum(SubTotal * TC)
																				from TBL_VENTAS_FACTURAS_CAB
																				where Status <> 'C' and ID_Entidad = _NumEnt and date_part('Month',Fecha) = _Mes and date_part('Year',Fecha) = _Ano ), 0);
		
					INSERT INTO _TMP_VENTAS_ENT (Entidad,Total)
					SELECT _NombreEnt, round(_TotalVentas,0);   
									
				end loop;
				
			else -- De lo contrario es un comparativo anual
			
				for _TVE in	(	SELECT ID_EntidadVenta, Descripcion
								FROM TBL_VENTAS_ENTIDADES
								WHERE ID_TipoEntidad = 0
								ORDER BY ID_EntidadVenta asc
							)
				loop
					_NumEnt := _TVE.ID_EntidadVenta;
					_NombreEnt := _TVE.Descripcion;
					
					_TotalVentas := coalesce(( select sum(SubTotal * TC) 
																			from TBL_VENTAS_FACTURAS_CAB
																			where Status <> 'C' and ID_Entidad = _NumEnt and date_part('Year',Fecha) = _Ano ),0);
		
					INSERT INTO _TMP_VENTAS_ENT (Entidad,Total)
					SELECT _NombreEnt, round(_TotalVentas,0);  
					
				end loop;
		
			end if;

			RETURN QUERY
			select Entidad,Total
			from _TMP_VENTAS_ENT;

		END IF;

	END IF;
	
	DROP TABLE _TMP_VENTAS;
	DROP TABLE _TMP_VENTAS_ENT;
	DROP TABLE _TMP_VENTAS_ENT_MES;
	DROP TABLE _TMP_VENTAS_ENT_ANO;
END
$BODY$
  LANGUAGE plpgsql;

  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_invserv_actualizar_sdos()
  RETURNS SETOF record AS
$BODY$
DECLARE 	
	_err int; _Mes smallint; _Ano smallint; _Notice varchar(255); _id_partida smallint; _id_pol integer;
	_entrada numeric(9,3); _salida numeric(9,3); _debe numeric(19,4); _haber numeric(19,4); 
	_saldoinicial numeric(19,4); _saldoini numeric(19,4); _saldofin numeric(19,4);   
	_existenciainicial numeric(9,3); _existenciaini numeric(9,3); _existenciafin numeric(9,3);  
	_costopromini numeric(19,4); _costoprom numeric(19,4); 
	_ultimocostoini numeric(19,4); _ultimocosto numeric(19,4); 
	_PER RECORD; _MOV RECORD; _PRD RECORD;
	_DET TBL_PRODUCCION_REPORTES_DET%ROWTYPE; _PROC TBL_PRODUCCION_REPORTES_PROCESOS%ROWTYPE; _REC_PROC RECORD; 
	_totalMPpartida numeric(19,4); _totalMPProceso numeric(19,4); _totalMPsubproducto numeric(19,4); _costoSubProducto numeric(19,4);
BEGIN
	_err := 0;
	--_Notice := 'PT2';
	-- crea la tabla temporal de saldos de la cual se actualizar?n los saldos finales
	CREATE LOCAL TEMPORARY TABLE _TMP_INVSERV_COSTOS_DETALLE (
		id_costo integer NOT NULL,
		id_movimiento integer NOT NULL,
		id_prod character varying(20) NOT NULL,
		id_concepto smallint NOT NULL,
		entrada numeric(9,3) NOT NULL,
		salida numeric(9,3) NOT NULL,
		existencia numeric(9,3) NOT NULL,
		ultimocosto numeric(19,4) NOT NULL,
		costopromedio numeric(19,4) NOT NULL,
		debe numeric(19,4) NOT NULL,
		haber numeric(19,4) NOT NULL,
		saldo numeric(19,4) NOT NULL,
		ref character varying(35)
	);

	CREATE LOCAL TEMPORARY TABLE _TMP_INVSERV_COSTOS (
		mes smallint NOT NULL,
		ano smallint NOT NULL,
		id_prod character varying(20) NOT NULL,
		existenciaini numeric(9,3) NOT NULL,
		costopromini numeric(19,4) NOT NULL,
		ultimocostoini numeric(19,4) NOT NULL,
		saldoini numeric(19,4) NOT NULL,
		existenciafin numeric(9,3) NOT NULL,
		costopromfin numeric(19,4) NOT NULL,
		ultimocostofin numeric(19,4) NOT NULL,
		saldofin numeric(19,4) NOT NULL
	);	

	_Mes := (	select Mes -- el ultimo mes cerrado ( si no hay meses cerrados sera nulo )
				from TBL_CONT_CATALOGO_PERIODOS
				where Mes <> 13 and Cerrado = '1' 
				order by Ano Desc, Mes Desc limit 1);
	_Ano := (	select Ano -- igual en el a?o
				from TBL_CONT_CATALOGO_PERIODOS 
				where Mes <> 13 and Cerrado = '1' 
				order by Ano Desc, Mes Desc limit 1);

	--raise notice 'Ultimo Cerrado: mes % ano %', _Mes, _Ano;
	
	FOR _PRD IN
		( 	SELECT ID_Prod, TipoCosteo FROM TBL_INVSERV_INVENTARIOS WHERE ID_Tipo = 'P' ORDER BY  SeProduce Asc, NivelProd Asc, ID_Prod Asc  )
	LOOP
		--if _PRD.ID_Prod = _Notice then raise notice 'PRODUCTO: %', _PRD.ID_Prod; end if;
		_saldoini := (select SaldoFin from TBL_INVSERV_COSTOS where Mes = _Mes and Ano = _Ano and ID_Prod = _PRD.ID_Prod);
		_existenciaini := (select ExistenciaFin from TBL_INVSERV_COSTOS where Mes = _Mes and Ano = _Ano and ID_Prod = _PRD.ID_Prod);
		_saldoinicial := (select SaldoFin from TBL_INVSERV_COSTOS where Mes = _Mes and Ano = _Ano and ID_Prod = _PRD.ID_Prod);
		_existenciainicial := (select ExistenciaFin from TBL_INVSERV_COSTOS where Mes = _Mes and Ano = _Ano and ID_Prod = _PRD.ID_Prod);
		_saldofin := (select SaldoFin from TBL_INVSERV_COSTOS where Mes = _Mes and Ano = _Ano and ID_Prod = _PRD.ID_Prod);
		_existenciafin := (select ExistenciaFin from TBL_INVSERV_COSTOS where Mes = _Mes and Ano = _Ano and ID_Prod = _PRD.ID_Prod);
		_costopromini := (select CostoPromFin from TBL_INVSERV_COSTOS where Mes = _Mes and Ano = _Ano and ID_Prod = _PRD.ID_Prod);
		_ultimocostoini := (select UltimoCostoFin from TBL_INVSERV_COSTOS where Mes = _Mes and Ano = _Ano and ID_Prod = _PRD.ID_Prod);
		_costoprom := (select CostoPromFin from TBL_INVSERV_COSTOS where Mes = _Mes and Ano = _Ano and ID_Prod = _PRD.ID_Prod);
		_ultimocosto := (select UltimoCostoFin from TBL_INVSERV_COSTOS where Mes = _Mes and Ano = _Ano and ID_Prod = _PRD.ID_Prod);
		
		FOR _PER IN (select * from TBL_CONT_CATALOGO_PERIODOS where Cerrado = '0' order by Ano Asc, Mes Asc)
		LOOP
			IF _PER.Mes = 13
			THEN
				CONTINUE;
			END IF;	
			--if _PRD.ID_Prod = _Notice then raise notice 'Actual: mes % ano %', _PER.Mes, _PER.Ano; end if;
			FOR _MOV IN 
					(	SELECT c.ID_Costo,c.ID_Movimiento,c.ID_Prod,c.ID_Concepto,c.Entrada,c.Salida,c.Existencia,c.UltimoCosto,c.CostoPromedio,c.Debe,c.Haber,c.Saldo,c.Ref, con.Tipo, con.RecalcularCosto, cab.ID_Pol, cab.CR_Sec, con.Descripcion
						FROM TBL_INVSERV_COSTOS_DETALLE c JOIN TBL_INVSERV_COSTOS_CONCEPTOS con ON
							c.ID_Concepto = con.ID_Concepto JOIN TBL_INVSERV_ALMACEN_MOVIM_CAB cab ON
							c.ID_Movimiento = cab.ID_Movimiento
						WHERE c.ID_Prod = _PRD.ID_Prod AND date_part('Month',c.Fecha) = _PER.Mes and date_part('Year',c.Fecha) = _PER.Ano and c.Status <> 'C'
						ORDER BY c.Fecha ASC, c.ID_Concepto ASC, c.ID_Costo ASC		
					)
			LOOP
				IF _MOV.Tipo = 'ENT' and _MOV.ID_Concepto <> 0 -- entradas exepto fabricacion
				THEN
					_entrada := _MOV.Entrada;
					_salida := 0.000;
					_haber := 0.0000;
					
					IF _MOV.RecalcularCosto = '0'
					THEN
						_debe := _MOV.Debe;
						_existenciafin := _existenciaini + _entrada; 
						_ultimocosto := _MOV.UltimoCosto;
						if _saldoIni >= 0.0000 -- si el saldo anterior esta en negro no globaliza el costo promedio
						then
							_saldofin := _saldoini + _debe;
						else -- de lo contrario como si lo globaliza, protejer? el promedio
							--if _PRD.ID_Prod = _Notice then raise notice 'globalizando el costo para proteger promedio mp'; end if;
							_saldofin := round(_existenciafin * _ultimocosto,2); -- aqui proteje el saldo para que no se globalice
							_haber := ((_saldoini + _debe) - _saldofin); -- manda el monto globalizado al haber
						end if;
						_costoprom := (case when _existenciafin = 0.000 then 0.0000 else round(_saldofin / _existenciafin, 4) end);  
					ELSE -- aqui ignora el costo aplicado, ya que se calcula con base en la tarjeta y no al aplicado en el movimiento
						_debe := (case when _PRD.TipoCosteo = 0 then round(_entrada * _ultimocosto, 2) else round(_entrada * _costoprom, 2) end);
						_saldofin := _saldoini + _debe;
						_existenciafin := _existenciaini + _entrada;  
					END IF;	
				ELSIF _MOV.Tipo = 'SAL' -- salidas
				THEN
					_entrada := 0.000;
					_salida := _MOV.Salida;
					_debe := 0.0000;
				
					IF _MOV.RecalcularCosto = '0'
					THEN
						_haber := _MOV.Haber;
						_existenciafin := _existenciaini - _salida; 
						_ultimocosto := _Mov.UltimoCosto;
						_saldofin := _saldoini - _haber;
						_costoprom = (case when _existenciafin = 0.000 then 0.0000 else ROUND(_saldofin / _existenciafin, 4) end);  
					ELSE
						_haber = (case when _PRD.TipoCosteo = 0 then round(_salida * _ultimocosto, 2) else round(_salida * _costoprom, 2) end);
						_existenciafin = _existenciaini - _salida; 
						_saldofin = _saldoini - _haber;	
					END IF;
				ELSE -- _MOV.ID_Concepto = 0 -- Movimento de fabricacion.
					-- Movimiento de entrada por fabricacion. Aqui se trata de un producto terminado o un sub-producto
					_entrada := _MOV.Entrada;
					_salida := 0.000;
					-- Inicia el proceso de reconocimiento de la materia prima utilizada en este producto
					SELECT * INTO _DET FROM TBL_PRODUCCION_REPORTES_DET WHERE ID_Reporte = _MOV.CR_Sec AND ID_Pol = _MOV.ID_Movimiento;
					IF _DET is not null --significa que es producto terminado y no sub-producto
					THEN
						_totalMPpartida := 0.0;
						FOR _REC_PROC IN ( select * from TBL_PRODUCCION_REPORTES_PROCESOS where ID_Reporte = _DET.ID_Reporte AND Partida = _DET.Partida order by ID_Proceso asc ) 
						LOOP
							_totalMPProceso := (select coalesce(sum(Haber),0.0) from _TMP_INVSERV_COSTOS_DETALLE where ID_Movimiento = _REC_PROC.ID_Pol);
							IF _REC_PROC.ID_SubProd is not null
							THEN
								IF _REC_PROC.Porcentaje <> 0.0 AND _REC_PROC.Cantidad <> 0.0
								THEN
									_totalMPsubproducto := ((_totalMPProceso * _REC_PROC.Porcentaje) / 100);
									_totalMPpartida := _totalMPpartida + (_totalMPproceso - _totalMPsubproducto);
								ELSE
									_totalMPpartida := _totalMPpartida + _totalMPproceso;
								END IF;
							ELSE
								_totalMPpartida := _totalMPpartida + _totalMPproceso;
							END IF;
						END LOOP;	
						--calcula el costo segun el debe y la existencia final	
						_debe := _totalMPpartida;
					ELSE	-- Significa que es un sub-producto
						SELECT * INTO _PROC FROM TBL_PRODUCCION_REPORTES_PROCESOS WHERE ID_Reporte =  _MOV.CR_Sec AND ID_PolSP = _MOV.ID_Movimiento;
						_totalMPProceso := (select coalesce(sum(Haber),0.0) from _TMP_INVSERV_COSTOS_DETALLE where ID_Movimiento = _PROC.ID_Pol);
						IF _PROC.Porcentaje <> 0.0 AND _PROC.Cantidad <> 0.0
						THEN
							_totalMPsubproducto := ((_totalMPProceso * _PROC.Porcentaje) / 100);
							_debe := _totalMPsubproducto;
						ELSE
							_debe := 0.0;
						END IF;
					END IF;
					_haber := 0.0000;
					_existenciafin := _existenciaini + _entrada; 
					_ultimocosto := (case when _entrada = 0.000 then 0.0000 else ROUND(_debe / _entrada, 4) end); 
					if _saldoIni >= 0.0000 -- si el saldo anterior esta en negro no globaliza el costo promedio
					then
						_saldofin := _saldoini + _debe;
					else -- de lo contrario como si lo globaliza, protejer? el promedio
						--if _PRD.ID_Prod = _Notice then raise notice 'globalizando el costo para proteger promedio mp ex pt'; end if;
						_saldofin := round(_existenciafin * _ultimocosto,2); -- aqui proteje el saldo para que no se globalice
						_haber := ((_saldoini + _debe) - _saldofin); -- manda el monto globalizado al haber
					end if;	
				
					_costoprom := (case when _existenciafin = 0.000 then 0.0000 else ROUND(_saldofin / _existenciafin, 4) end); 
			
				END IF;

				INSERT INTO _TMP_INVSERV_COSTOS_DETALLE (id_costo,id_movimiento,id_prod,id_concepto,entrada,salida,existencia,ultimocosto,costopromedio,debe,haber,saldo,ref)
				VALUES(_MOV.ID_Costo, _MOV.ID_Movimiento, _PRD.ID_Prod, _MOV.ID_Concepto, _entrada, _salida, _existenciafin, _ultimocosto, _costoprom, _debe, _haber, _saldofin, _MOV.Ref); 	 

				_saldoini := _saldofin;
				_existenciaini := _existenciafin;
				--if _PRD.ID_Prod = _Notice then raise notice '% Entrada % Salida % Existencia % UC % CP % Debe % Haber % Saldo %',_MOV.Descripcion,  _entrada, _salida, _existenciafin, _ultimocosto, _costoprom, _debe, _haber, _saldofin; end if;
			END LOOP;
			--if _PRD.ID_Prod = _Notice then raise notice '%/% ExistenciaIni % UC % CP % SaldoIni % ExistenciaFin % UC % CP % SaldoFin%',_PER.Mes, _PER.Ano, _ExistenciaInicial, _UltimoCostoIni, _CostoPromIni, _SaldoInicial, _ExistenciaFin, _UltimoCosto, _CostoProm, _SaldoFin; end if;
			--Agrega el saldo del producto de este periodo
			INSERT INTO _TMP_INVSERV_COSTOS (Mes,Ano,ID_Prod,ExistenciaIni,CostoPromIni,UltimoCostoIni,SaldoIni,ExistenciaFin,CostoPromFin,UltimoCostoFin,SaldoFin) 
			VALUES(_PER.Mes, _PER.Ano, _PRD.ID_Prod, _ExistenciaInicial, _CostoPromIni, _UltimoCostoIni, _SaldoInicial, _ExistenciaFin, _CostoProm, _UltimoCosto, _SaldoFin);

			_saldoini := _saldofin;
			_existenciaini := _existenciafin;
			_saldoinicial := _saldofin;
			_existenciainicial := _existenciafin;
			_costopromini := _costoprom;
			_ultimocostoini := _ultimocosto;

		END LOOP;

	END LOOP;
		
	-- Actualiza los saldos de bancos y caja con las tablas temporales	
	UPDATE TBL_INVSERV_COSTOS_DETALLE
	SET entrada = tm.entrada,
		salida = tm.salida,
		existencia = tm.existencia,
		ultimocosto = tm.ultimocosto,
		costopromedio = tm.costopromedio,
		debe = tm.debe,
		haber = tm.haber,
		saldo = tm.saldo	
	FROM _TMP_INVSERV_COSTOS_DETALLE tm, TBL_INVSERV_COSTOS_DETALLE c 
	WHERE	tm.ID_Costo = c.ID_Costo and 
			c.ID_Costo = TBL_INVSERV_COSTOS_DETALLE.ID_Costo;

	-- Actualiza los saldos finales del mes actual de bancos y cajas
	UPDATE TBL_INVSERV_COSTOS
	SET	ExistenciaIni = tm.ExistenciaIni,
		CostoPromIni = tm.CostoPromIni,
		UltimoCostoIni = tm.UltimoCostoIni,
		SaldoIni = tm.SaldoIni,
		ExistenciaFin = tm.ExistenciaFin,
		CostoPromFin = tm.CostoPromFin,
		UltimoCostoFin = tm.UltimoCostoFin, 
		SaldoFin = tm.SaldoFin 
	FROM _TMP_INVSERV_COSTOS tm,  TBL_INVSERV_COSTOS c
	WHERE tm.ID_Prod = c.ID_Prod and tm.Mes = c.Mes and tm.Ano = c.Ano and
		c.ID_Prod = TBL_INVSERV_COSTOS.ID_Prod and c.Mes = TBL_INVSERV_COSTOS.Mes and c.Ano = TBL_INVSERV_COSTOS.Ano;

	-- Actualiza los saldos entidades de cuentas
	_Mes := (	select Mes -- el ultimo mes abierto ( si no hay meses abiertos sera nulo )
				from TBL_CONT_CATALOGO_PERIODOS
				where Mes <> 13 and Cerrado = '0' 
				order by Ano Desc, Mes Desc limit 1);
	_Ano := (	select Ano -- igual en el a?o
				from TBL_CONT_CATALOGO_PERIODOS 
				where Mes <> 13 and Cerrado = '0' 
				order by Ano Desc, Mes Desc limit 1);

	IF _Mes is not null AND _ano is not null
	THEN
		--raise notice 'FINAL DEL PERIODO: mes % ano %', _Mes, _Ano;
	
		UPDATE TBL_INVSERV_INVENTARIOS
		SET Existencia = c.ExistenciaFin,
			CantidadAcum = c.ExistenciaFin, 
			CostoPromedio = c.CostoPromFin,
			UltimoCosto = c.UltimoCostoFin,
			MontoAcum = c.SaldoFin 
		FROM  TBL_INVSERV_INVENTARIOS e, TBL_INVSERV_COSTOS c 
		WHERE
			e.ID_Prod = c.ID_Prod and  
			c.ID_Prod = TBL_INVSERV_INVENTARIOS.ID_Prod and 
			c.Ano = _Ano and c.Mes = _Mes;
	END IF;

	DROP TABLE _TMP_INVSERV_COSTOS_DETALLE;
	DROP TABLE _TMP_INVSERV_COSTOS;
	
	RETURN QUERY 
	SELECT 0 as err, 'LOS SALDOS DE ALMACEN SE ACTUALIZARON SATISFACTORIAMENTE'::varchar as res;
END
$BODY$
  LANGUAGE plpgsql;
  
  
  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_invserv_actualizar_existencias()
  RETURNS SETOF record AS
$BODY$
DECLARE 	
	_err int; _Mes smallint; _Ano smallint; _Notice varchar(255); _id_partida smallint; 
	_entrada numeric(9,3); _salida numeric(9,3);    
	_existenciainicial numeric(9,3); _existenciaini numeric(9,3); _existenciafin numeric(9,3);  
	_PER RECORD; _MOV RECORD; _PRD RECORD; _BOD RECORD;
BEGIN
	_err := 0;
	_Notice := 'AA';
	-- crea la tabla temporal de saldos de la cual se actualizar?n los saldos finales
	CREATE LOCAL TEMPORARY TABLE _TMP_INVSERV_COSTOS_DETALLE (
		id_costo integer NOT NULL,
		id_movimiento integer NOT NULL,
		id_prod character varying(20) NOT NULL,
		id_concepto smallint NOT NULL,
		existbod numeric(9,3) NOT NULL
	);

	CREATE LOCAL TEMPORARY TABLE _TMP_INVSERV_EXISTENCIAS_PERIODOS
	(
		mes smallint NOT NULL,
		ano smallint NOT NULL,
		id_bodega smallint NOT NULL,
		id_prod character varying(20) NOT NULL,
		existenciaini numeric(9,3) NOT NULL,
		existenciafin numeric(9,3) NOT NULL
	);	

	_Mes := (	select Mes -- el ultimo mes cerrado ( si no hay meses cerrados sera nulo )
				from TBL_CONT_CATALOGO_PERIODOS
				where Mes <> 13 and Cerrado = '1' 
				order by Ano Desc, Mes Desc limit 1);
	_Ano := (	select Ano -- igual en el a?o
				from TBL_CONT_CATALOGO_PERIODOS 
				where Mes <> 13 and Cerrado = '1' 
				order by Ano Desc, Mes Desc limit 1);

	--raise notice 'Ultimo Cerrado: mes % ano %', _Mes, _Ano;
	FOR _PRD IN
		( 	SELECT ID_Prod, TipoCosteo 
			FROM TBL_INVSERV_INVENTARIOS 
			WHERE ID_Tipo = 'P' OR (ID_Tipo = 'G' AND NoSeVende = '1')  --NoSeVende en gastos aplica a consumibles para existencias en bodegas de utensilios
			ORDER BY  SeProduce Asc, NivelProd Asc, ID_Prod Asc  )
	LOOP
		--if _PRD.ID_Prod = _Notice then raise notice 'PRODUCTO: %', _PRD.ID_Prod; end if;
		FOR _BOD IN 
			( SELECT ID_Bodega FROM TBL_INVSERV_BODEGAS ORDER BY ID_Bodega ASC )
		LOOP
			--if _PRD.ID_Prod = _Notice then raise notice 'BODEGA: %', _BOD.ID_Bodega; end if;
			_existenciaini := (select ExistenciaFin from TBL_INVSERV_EXISTENCIAS_PERIODOS where Mes = _Mes and Ano = _Ano and ID_Prod = _PRD.ID_Prod and ID_Bodega = _BOD.ID_Bodega);
			_existenciainicial := (select ExistenciaFin from TBL_INVSERV_EXISTENCIAS_PERIODOS where Mes = _Mes and Ano = _Ano and ID_Prod = _PRD.ID_Prod and ID_Bodega = _BOD.ID_Bodega);
			_existenciafin := (select ExistenciaFin from TBL_INVSERV_EXISTENCIAS_PERIODOS where Mes = _Mes and Ano = _Ano and ID_Prod = _PRD.ID_Prod and ID_Bodega = _BOD.ID_Bodega);
			
			FOR _PER IN (select * from TBL_CONT_CATALOGO_PERIODOS where Cerrado = '0' order by Ano Asc, Mes Asc)
			LOOP
				IF _PER.Mes = 13
				THEN
					CONTINUE;
				END IF;	
				--if _PRD.ID_Prod = _Notice then raise notice 'Actual: %/%:%', _PER.Mes, _PER.Ano, _BOD.ID_Bodega; end if;
				FOR _MOV IN 
						(	SELECT c.ID_Costo,c.ID_Movimiento,c.ID_Prod,c.ID_Concepto,c.Entrada,c.Salida,c.Existencia,c.ExistBod,con.Tipo
							FROM TBL_INVSERV_COSTOS_DETALLE c JOIN TBL_INVSERV_COSTOS_CONCEPTOS con ON
							c.ID_Concepto = con.ID_Concepto JOIN TBL_INVSERV_ALMACEN_MOVIM_CAB cab ON
							c.ID_Movimiento = cab.ID_Movimiento
							WHERE cab.ID_Bodega = _BOD.ID_Bodega and c.ID_Prod = _PRD.ID_Prod AND date_part('Month',c.Fecha) = _PER.Mes and date_part('Year',c.Fecha) = _PER.Ano and c.Status <> 'C'
							ORDER BY c.Fecha ASC, c.ID_Concepto ASC, c.ID_Costo ASC		
						)
				LOOP
					IF _MOV.Tipo = 'ENT' OR (_MOV.Tipo = 'MIX' AND _MOV.ID_Concepto = -1) -- entradas 
					THEN
						_entrada := _MOV.Entrada;
						_salida := 0.000;
						_existenciafin := _existenciaini + _entrada; 
					ELSIF _MOV.Tipo = 'SAL' OR (_MOV.Tipo = 'MIX' AND _MOV.ID_Concepto = -2) -- salidas
					THEN
						_entrada := 0.000;
						_salida := _MOV.Salida;
						_existenciafin := _existenciaini - _salida; 
					END IF;

					INSERT INTO _TMP_INVSERV_COSTOS_DETALLE (id_costo,id_movimiento,id_prod,id_concepto,existbod)
					VALUES(_MOV.ID_Costo, _MOV.ID_Movimiento, _PRD.ID_Prod, _MOV.ID_Concepto, _existenciafin); 	 

					_existenciaini := _existenciafin;
					--if _PRD.ID_Prod = _Notice then raise notice 'Ent % Sal % ExBod %',_entrada,_salida,_existenciafin; end if;
				END LOOP;
				--if _PRD.ID_Prod = _Notice then raise notice '%/%:% ExistenciaIni % ExistenciaFin %',_PER.Mes, _PER.Ano, _BOD.ID_Bodega, _ExistenciaInicial, _ExistenciaFin; end if;
				--Agrega la existencia del producto de este periodo
				INSERT INTO _tmp_invserv_existencias_periodos(mes,ano,id_bodega,id_prod,existenciaini,existenciafin)
				VALUES(_PER.Mes, _PER.Ano, _BOD.ID_Bodega,_PRD.ID_Prod, _ExistenciaInicial, _ExistenciaFin);
					
				_existenciaini := _existenciafin;
				_existenciainicial := _existenciafin;
		
			END LOOP;

		END LOOP;

	END LOOP;	
		
	-- Actualiza las existencias con las tablas temporales	
	UPDATE TBL_INVSERV_COSTOS_DETALLE
	SET existbod = tm.existbod
	FROM _TMP_INVSERV_COSTOS_DETALLE tm, TBL_INVSERV_COSTOS_DETALLE c 
	WHERE	tm.ID_Costo = c.ID_Costo and 
			c.ID_Costo = TBL_INVSERV_COSTOS_DETALLE.ID_Costo;

	-- Actualiza las existencias finales del mes actual
	UPDATE TBL_INVSERV_EXISTENCIAS_PERIODOS
	SET	ExistenciaIni = tm.ExistenciaIni,
		ExistenciaFin = tm.ExistenciaFin
	FROM _TMP_INVSERV_EXISTENCIAS_PERIODOS tm,  TBL_INVSERV_EXISTENCIAS_PERIODOS c
	WHERE tm.ID_Prod = c.ID_Prod and tm.Mes = c.Mes and tm.Ano = c.Ano and tm.ID_Bodega = c.ID_Bodega and
		c.ID_Prod = TBL_INVSERV_EXISTENCIAS_PERIODOS.ID_Prod and c.Mes = TBL_INVSERV_EXISTENCIAS_PERIODOS.Mes and c.Ano = TBL_INVSERV_EXISTENCIAS_PERIODOS.Ano and c.ID_Bodega = TBL_INVSERV_EXISTENCIAS_PERIODOS.ID_Bodega;

	_Mes := (	select Mes -- el ultimo mes abierto ( si no hay meses abiertos sera nulo )
				from TBL_CONT_CATALOGO_PERIODOS
				where Mes <> 13 and Cerrado = '0' 
				order by Ano Desc, Mes Desc limit 1);
	_Ano := (	select Ano -- igual en el a?o
				from TBL_CONT_CATALOGO_PERIODOS 
				where Mes <> 13 and Cerrado = '0' 
				order by Ano Desc, Mes Desc limit 1);

	IF _Mes is not null AND _ano is not null
	THEN
		--raise notice 'FINAL DEL PERIODO: mes % ano %', _Mes, _Ano;
	
		UPDATE TBL_INVSERV_EXISTENCIAS
		SET Existencia = c.ExistenciaFin
		FROM  TBL_INVSERV_EXISTENCIAS e, TBL_INVSERV_EXISTENCIAS_PERIODOS c 
		WHERE
			e.ID_Prod = c.ID_Prod and  
			c.ID_Prod = TBL_INVSERV_EXISTENCIAS.ID_Prod and 
			e.ID_Bodega = c.ID_Bodega and
			c.ID_Bodega = TBL_INVSERV_EXISTENCIAS.ID_Bodega and 
			c.Ano = _Ano and c.Mes = _Mes;
	END IF;

	DROP TABLE _TMP_INVSERV_COSTOS_DETALLE;
	DROP TABLE _TMP_INVSERV_EXISTENCIAS_PERIODOS;
	
	RETURN QUERY 
	SELECT 0 as err, 'LAS EXISTENCIAS DE ALMACEN SE ACTUALIZARON SATISFACTORIAMENTE'::varchar as res;
END
$BODY$
  LANGUAGE plpgsql;
  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_prod_formulas_actualizar_niveles()
  RETURNS SETOF record AS
$BODY$
DECLARE
	_Nivel smallint;
BEGIN
	-- paso 1 todos los niveles de materias primas a cero
	update TBL_INVSERV_INVENTARIOS	
	set NivelProd = 0
	where SeProduce = '0';

	-- paso 2 todos los productos terminados al nivel 255
	update TBL_INVSERV_INVENTARIOS	
	set NivelProd = 255
	where SeProduce = '1';

	_Nivel := 1;
	
	while _Nivel < 255
	loop
		--raise notice 'Nivel: %', _Nivel;

		update TBL_INVSERV_INVENTARIOS
		set NivelProd = _Nivel
		where ID_Prod in ( 	select distinct f.ID_Prod 
							from TBL_PRODUCCION_FORMULAS_CAB f	join TBL_INVSERV_INVENTARIOS i on
								i.ID_Prod = f.ID_Prod
							where f.ID_Formula in (	-- selecciona los procesos del nivel _Nivel
													select prc.ID_Formula
													from TBL_PRODUCCION_FORMULAS_PROCESOS prc join TBL_PRODUCCION_FORMULAS_DETPROD dp on
														prc.ID_Proceso = dp.ID_Proceso join TBL_INVSERV_INVENTARIOS i on
														dp.ID_Prod = i.ID_Prod
													group by prc.ID_Formula
													having MAX(i.NivelProd) = (_Nivel - 1) ))
			or	 ID_Prod in ( select distinct f.ID_SubProd 
							from TBL_PRODUCCION_FORMULAS_PROCESOS f join TBL_INVSERV_INVENTARIOS i on
								i.ID_Prod = f.ID_SubProd
							where f.ID_Proceso in (	-- selecciona los procesos del nivel _Nivel
													select dp.ID_Proceso
													from TBL_PRODUCCION_FORMULAS_DETPROD dp join TBL_INVSERV_INVENTARIOS i on
														dp.ID_Prod = i.ID_Prod
													group by dp.ID_Proceso
													having MAX(i.NivelProd) = (_Nivel - 1) ));  

		_Nivel := _Nivel + 1;
	end loop;

	RETURN QUERY 
	SELECT 0 as err, 'LAS FORMULAS SE ACTUALIZARON SATISFACTORIAMENTE'::varchar as res;
END
$BODY$
  LANGUAGE plpgsql;
  
  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_invserv_actualizar_polcant()
  RETURNS SETOF record AS
$BODY$
DECLARE 	
	_err int; _Mes smallint; _Ano smallint; _Notice varchar(255); _Fecha timestamp;
	_MOV RECORD; _DET RECORD; _POL TBL_CONT_POLIZAS_DETALLE%ROWTYPE;
	_Part smallint; _Parcial numeric(19,4); _Debe numeric(19,4); _Haber numeric(19,4);
BEGIN
	_err := 0;
	--_Notice := 'PT2';
	CREATE LOCAL TEMPORARY TABLE _TMP_CONT_POLIZAS
	(
		id integer NOT NULL,
		total numeric(19,4) NOT NULL
	);
	
	CREATE LOCAL TEMPORARY TABLE _TMP_CONT_POLIZAS_DETALLE
	(
		id integer NOT NULL,
		part smallint NOT NULL,
		cuenta character(19) NOT NULL,
		concepto character varying(80) NOT NULL,
		parcial numeric(19,4) NOT NULL,
		moneda smallint NOT NULL,
		tc numeric(19,4) NOT NULL,
		debe numeric(19,4) NOT NULL,
		haber numeric(19,4) NOT NULL
	);

	_Mes := (	select Mes 
				from TBL_CONT_CATALOGO_PERIODOS 
				where Mes <> 13 and Cerrado = '0' 
				order by Ano Asc, Mes Asc limit 1);
	_Ano := (	select Ano 
				from TBL_CONT_CATALOGO_PERIODOS 
				where Mes <> 13 and Cerrado = '0' 
				order by Ano Asc, Mes Asc limit 1);

	_Fecha := getfecha(1, _Mes, _Ano);

	FOR _MOV IN 
				(	SELECT cab.ID_Movimiento, con.Tipo, cab.Fecha, cab.ID_Pol, cab.CR_Pri, cab.CR_Sec, con.Descripcion, cab.Concepto, con.ID_Concepto, con.CC
					FROM TBL_INVSERV_ALMACEN_MOVIM_CAB cab JOIN TBL_INVSERV_COSTOS_CONCEPTOS con ON
						cab.ID_Concepto = con.ID_Concepto JOIN TBL_CONT_POLIZAS pol ON
						cab.ID_Pol = pol.ID
					WHERE cab.Fecha >= _Fecha AND cab.Status <> 'C' AND cab.ID_Pol IS NOT NULL AND con.Tipo <> 'MIX' --MIX son movimientos de almac√©n de utensilios
					ORDER BY cab.Fecha ASC, con.ID_Concepto ASC, cab.ID_Movimiento		
				)
	LOOP
		IF _MOV.CC IS NOT NULL
		THEN
			--raise notice '/////////////////////////////////// %', _Fecha;
			--raise notice '%:%  /  % - %  /  %:%', _MOV.Fecha, _MOV.ID_Pol, _MOV.Descripcion, _MOV.Concepto, _MOV.ID_Concepto, _MOV.CC;
			_Part := 1;
			_Parcial := 0.0;
			_Debe := 0.0;
			_Haber := 0.0;
			FOR _DET IN	(	
								SELECT det.id_prod, i.id_cc, i.descripcion, det.entrada, det.salida, det.ultimocosto, det.costopromedio, det.debe, det.haber
								FROM TBL_INVSERV_COSTOS_DETALLE det JOIN TBL_INVSERV_INVENTARIOS i ON 
									det.ID_Prod = i.ID_Prod
								WHERE det.ID_Movimiento = _MOV.ID_Movimiento 
								ORDER BY det.ID_Costo 
							)
			LOOP		
				--raise notice '% / % %: % - % / % - % / % - %', _part, _DET.ID_CC, _DET.ID_Prod, _DET.Entrada, _DET.Salida, _DET.UltimoCosto, _DET.CostoPromedio, _DET.Debe, _DET.Haber;

				_Haber := _Haber + _DET.Haber;
				_Debe := _Debe + _DET.Debe;

				INSERT INTO _TMP_CONT_POLIZAS_DETALLE(id,part,cuenta,concepto,parcial,moneda,tc,debe,haber) 
				VALUES( _MOV.ID_Pol, _part, _DET.ID_CC, _DET.Descripcion, (case when  _MOV.Tipo = 'ENT' then _DET.Debe - _DET.Haber else _DET.Haber - _DET.Debe end), 1, 1.0, _DET.Debe, _DET.Haber);  
				_Part := _Part + 1;
			END LOOP;

			_Parcial := case when _Debe >= _Haber then _Debe - _Haber else _Haber - _Debe end;
			
			INSERT INTO _TMP_CONT_POLIZAS_DETALLE(id,part,cuenta,concepto,parcial,moneda,tc,debe,haber) 
			VALUES( _MOV.ID_Pol, _part, _MOV.CC, (substring(_MOV.Concepto from 1 for 79)), 
					_Parcial, 1, 1.0, (case when _Debe >= _Haber then 0.0 else _Parcial end), (case when  _Debe >= _Haber then _Parcial else 0.0 end));  

			INSERT INTO _TMP_CONT_POLIZAS ( ID, Total )
			VALUES( _MOV.ID_Pol, (case when _Debe >= _Haber then _Debe else _Haber end));
			
			/*  raise notice '---------------------------';
			FOR _DET IN	(	
								SELECT *
								FROM TBL_CONT_POLIZAS_DETALLE det
								WHERE det.ID = _MOV.ID_Pol 
								ORDER BY det.Part 
							)
			LOOP		
				raise notice '% / % % / % - %', _DET.Part, _DET.Cuenta, _DET.Concepto, _DET.Debe, _DET.Haber;
			END LOOP; */
		
		END IF;
	END LOOP;
		
	-- Actualiza las polizas con las tablas temporales
	-- Primero borra los detalles. Estos no se perderan porque aunque fallara, al volver a actualizar, los vuelve a tomar de los movimientos al almacen, insertandolos otra vez 	
	DELETE FROM TBL_CONT_POLIZAS_DETALLE
	WHERE ID IN (SELECT ID FROM _TMP_CONT_POLIZAS);
	--Ahora inserta los borrados desde _TMP_CONT_POLIZAS_DETALLE
	INSERT INTO TBL_CONT_POLIZAS_DETALLE(id,part,cuenta,concepto,parcial,moneda,tc,debe,haber)
	SELECT id, part, cuenta, concepto, parcial, moneda, tc, debe, haber
	FROM _TMP_CONT_POLIZAS_DETALLE;
	--Por ultimo, actualiza los cabeceros desde _TMP_CONT_POLIZAS
	UPDATE TBL_CONT_POLIZAS
	SET Total = tm.Total
	FROM _TMP_CONT_POLIZAS tm, TBL_CONT_POLIZAS p 
	WHERE	tm.ID = p.ID AND p.ID = TBL_CONT_POLIZAS.ID;
		
	DROP TABLE _TMP_CONT_POLIZAS_DETALLE;
	DROP TABLE _TMP_CONT_POLIZAS;
	
	RETURN QUERY 
	SELECT 0 as err, 'LAS POLIZAS SE MODIFICARON CONFORME A LOS MOVIMIENTO AL ALMACEN ACTUALES'::varchar as res;
END
$BODY$
  LANGUAGE plpgsql;
  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_cont_polizas_cierre_agregar(_ano smallint, _cuenta character, _debe numeric, _haber numeric)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_result varchar(255); _err int;
BEGIN
	_err := 0;
	_result := 'La partida de la poliza se ha agregado';
	
	IF(select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = 13 and Ano = _ano and Cerrado = '1') > 0
	OR (select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = 13 and Ano = _ano) < 1
	THEN
		_err := 3;
		_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_POLIZAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'ERROR: La fecha de poliza pertenece a un periodo cerrado o inexistente'
	END IF;
	
	IF(select count(*) from TBL_CONT_POLIZAS_DETALLE_CA where Mes = 13 and Ano = _Ano and Cuenta = _Cuenta) > 0
	THEN
		_err := 3;
		_result := 'ERROR: Ya existe la partida en esta poliza de cierre anual. No se puede duplicar';
	END IF;

	IF _err = 0
	THEN
		INSERT INTO TBL_CONT_POLIZAS_DETALLE_CA
		VALUES( 13, _Ano, _Cuenta, _Debe, _Haber);
	END IF;
		
	RETURN QUERY SELECT _err, _result, _Cuenta;

END
$BODY$
  LANGUAGE plpgsql;
  
  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_cont_polizas_cierre_cambiar(_ano smallint, _cuenta character, _debe numeric, _haber numeric)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_result varchar(255); _err int;
BEGIN
	_err := 0;
	_result := 'La partida de la poliza se ha cambiado';
	
	IF(select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = 13 and Ano = _ano and Cerrado = '1') > 0
	OR (select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = 13 and Ano = _ano) < 1
	THEN
		_err := 3;
		_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_POLIZAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'ERROR: La fecha de poliza pertenece a un periodo cerrado o inexistente'
	END IF;
	
	IF(select count(*) from TBL_CONT_POLIZAS_DETALLE_CA where Mes = 13 and Ano = _Ano and Cuenta = _Cuenta) < 1
	THEN
		_err := 3;
		_result := 'ERROR: No existe la partida en esta poliza de cierre anual. No se puede cambiar';
	END IF;

	IF _err = 0
	THEN
		UPDATE TBL_CONT_POLIZAS_DETALLE_CA
		SET Debe = _Debe, Haber = _Haber
		WHERE Mes = 13 and Ano = _Ano and Cuenta = _Cuenta;
	END IF;
		
	RETURN QUERY SELECT _err, _result, _Cuenta;

END
$BODY$
  LANGUAGE plpgsql;
  
  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_cont_polizas_cierre_eliminar(_ano smallint, _cuenta character)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_result varchar(255); _err int;
BEGIN
	_err := 0;
	_result := 'La partida de la poliza se ha eliminado';
	
	IF(select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = 13 and Ano = _ano and Cerrado = '1') > 0
	OR (select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = 13 and Ano = _ano) < 1
	THEN
		_err := 3;
		_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_POLIZAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'ERROR: La fecha de poliza pertenece a un periodo cerrado o inexistente'
	END IF;
	
	IF(select count(*) from TBL_CONT_POLIZAS_DETALLE_CA where Mes = 13 and Ano = _Ano and Cuenta = _Cuenta) < 1
	THEN
		_err := 3;
		_result := 'ERROR: No existe la partida en esta poliza de cierre anual. No se puede eliminar';
	END IF;

	IF _err = 0
	THEN
		DELETE FROM TBL_CONT_POLIZAS_DETALLE_CA
		WHERE Mes = 13 and Ano = _Ano and Cuenta = _Cuenta;
	END IF;
		
	RETURN QUERY SELECT _err, _result, _Cuenta;

END
$BODY$
  LANGUAGE plpgsql;
  
  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_cont_polizas_cierre_generar(_ano smallint)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_result varchar(255); _err int;
BEGIN
	_err := 0;
	_result := 'La poliza de cierre anual se ha generado totalmente';
	
	IF(select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = 13 and Ano = _ano and Cerrado = '1') > 0
	OR (select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = 13 and Ano = _ano) < 1
	THEN
		_err := 3;
		_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_POLIZAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'ERROR: La fecha de poliza pertenece a un periodo cerrado o inexistente'
	END IF;
	
	IF(select count(*) from TBL_CONT_POLIZAS_DETALLE_CA where Mes = 13 and Ano = _Ano) > 0
	THEN
		_err := 3;
		_result := 'ERROR: Ya existen partidas en esta poliza de cierre anual. No se puede generar';
	END IF;

	IF _err = 0
	THEN
		INSERT INTO TBL_CONT_POLIZAS_DETALLE_CA
		SELECT 13, _Ano, d.Cuenta, 
			case when d.SaldoFinal < 0 then abs(d.SaldoFinal) else 0 end, 
			case when d.SaldoFinal < 0 then 0 else d.SaldoFinal end
		FROM TBL_CONT_CATALOGO_DETALLE d INNER JOIN TBL_CONT_CATALOGO c ON
			d.Cuenta = c.Cuenta INNER JOIN TBL_CONT_RUBROS r ON 
			substring(d.Cuenta,1,4) BETWEEN r.CuentaInicial AND r.CuentaFinal
		WHERE d.Mes = 12 and d.Ano = _Ano and d.SaldoFinal <> 0 and c.Acum = '0' and
					(r.Tipo = 'RI' or r.Tipo = 'RC' or r.Tipo = 'RG' or r.Tipo = 'RO');
	END IF;
		
	RETURN QUERY SELECT _err, _result, _Ano;

END
$BODY$
  LANGUAGE plpgsql;
--ALTER FUNCTION sp_cont_polizas_cierre_generar(smallint)

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_cont_polizas_cierre_cancelar(_ano smallint)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_result varchar(255); _err int;
BEGIN
	_err := 0;
	_result := 'La poliza de cierre anual se ha cancelado totalmente';
	
	IF(select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = 13 and Ano = _ano and Cerrado = '1') > 0
	OR (select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = 13 and Ano = _ano) < 1
	THEN
		_err := 3;
		_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_POLIZAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'ERROR: La fecha de poliza pertenece a un periodo cerrado o inexistente'
	END IF;
	
	IF(select count(*) from TBL_CONT_POLIZAS_DETALLE_CA where Mes = 13 and Ano = _Ano) < 1
	THEN
		_err := 3;
		_result := 'ERROR: No existe esta poliza de cierre anual. No hay nada para cancelar';
	END IF;

	IF _err = 0
	THEN
		DELETE FROM TBL_CONT_POLIZAS_DETALLE_CA
		WHERE Mes = 13 and Ano = _Ano;
	END IF;
		
	RETURN QUERY SELECT _err, _result, _Ano;

END
$BODY$
  LANGUAGE plpgsql;

INSERT INTO tbl_usuarios_permisos_catalogo
VALUES ('ADM_SALDOS');

INSERT INTO tbl_usuarios_permisos_catalogo
VALUES ('ADM_SALDOS_INDIV');

INSERT INTO tbl_usuarios_permisos_catalogo
VALUES ('ADM_SALDOS_TODO');

  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_actualizar_sdos_todos()
  RETURNS SETOF record AS
$BODY$
DECLARE
	_err integer; _res varchar(254); _result text;
BEGIN
	_result = '';
	select * into _err, _res from sp_invserv_actualizar_existencias() as ( err integer, res varchar );
	_result = _result || _res || '<br>';
    	select * into _err, _res  from sp_prod_formulas_actualizar_niveles() as ( err integer, res varchar );
    	_result = _result || _res || '<br>';
    	select * into _err, _res from sp_invserv_actualizar_sdos() as ( err integer, res varchar );
    	_result = _result || _res || '<br>';
    	select * into _err, _res from sp_invserv_actualizar_polcant() as ( err integer, res varchar );
    	_result = _result || _res || '<br>';
    	select * into _err, _res from sp_cont_catalogo_actualizar_sdos() as ( err integer, res varchar );
    	_result = _result || _res || '<br>';
    	select * into _err, _res from sp_bancos_actualizar_sdos() as ( err integer, res varchar );
    	_result = _result || _res || '<br>';
    	select * into _err, _res from sp_client_actualizar_sdos() as ( err integer, res varchar );
    	_result = _result || _res || '<br>';
    	select * into _err, _res from sp_provee_actualizar_sdos() as ( err integer, res varchar );	
	_result = _result || _res;

	RETURN QUERY
    	SELECT 0 as err, _result::varchar as res;
END
$BODY$
  LANGUAGE plpgsql;
  
  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_cont_catalogo_eliminar(_cuenta character)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_nivel smallint; _precuenta varchar(19); _err int; _result varchar(255);
BEGIN
	_err := 0;
	_result := (select msj3 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_CATCUENTAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCOK');
	_nivel := GetLevelAccount(_Cuenta);	   
	_precuenta := CASE WHEN _nivel = 1 THEN substring(_Cuenta, 1, 4)
						WHEN _nivel = 2 THEN substring(_Cuenta, 1, 7)
						WHEN _nivel = 3 THEN substring(_Cuenta, 1, 10)
						WHEN _nivel = 4 THEN substring(_Cuenta, 1, 13)
						WHEN _nivel = 5 THEN substring(_Cuenta, 1, 16)
						ELSE _Cuenta END;
	--raise notice 'CUENTA: %', _precuenta;

	IF(select count(*) from TBL_CONT_CATALOGO where Cuenta = _Cuenta) < 1
	THEN
		_err := 3;
		_result := (select msj2 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_CATCUENTAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR2') || _Cuenta; 
	END IF;

	IF (select count(*) from TBL_CONT_POLIZAS_DETALLE where Cuenta like _precuenta || '%') > 0 -- si existe ya una poliza con esta cuenta marca error 
	THEN
		_err := 3;
		_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_CATCUENTAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR2');
	END IF;
	IF (select count(*) from TBL_CONT_POLIZAS_DETALLE_CA where Cuenta like _precuenta || '%') > 0 -- si existe ya una poliza de cierre anual marca error 
	THEN
		_err := 3;
		_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_CATCUENTAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR2');
	END IF;
	IF (select count(*) from TBL_VARIABLES where VAlfanumerico like _precuenta || '%') > 0 -- si existe ya una variable marca error 
	THEN
		_err := 3;
		_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_CATCUENTAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR2');
	END IF;
	IF (select count(*) from TBL_INVSERV_COSTOS_CONCEPTOS where CC like _precuenta || '%') > 0 -- si existe ya un concepto de almacen ligado con esta cuenta marca error 
	THEN
		_err := 3;
		_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_CATCUENTAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR2');
	END IF;
	IF (select count(*) from tbl_client_cxc_conceptos where CC like _precuenta || '%') > 0 -- si existe ya un concepto de cxc con esta cuenta marca error 
	THEN
		_err := 3;
		_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_CATCUENTAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR2');
	END IF;
	IF (select count(*) from tbl_provee_cxp_conceptos where CC like _precuenta || '%') > 0 -- si existe ya un concepto de cxp con esta cuenta marca error 
	THEN
		_err := 3;
		_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_CATCUENTAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR2');
	END IF;
	IF (select count(*) from tbl_bancos_cuentas where CC like _precuenta || '%') > 0 -- si existe ya un banco esta cuenta marca error 
	THEN
		_err := 3;
		_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_CATCUENTAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR2');
	END IF;
	IF (select count(*) from tbl_invserv_gastos_porcentajes where ID_CC like _precuenta || '%') > 0 -- si existe ya gasto ligado marca error 
	THEN
		_err := 3;
		_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_CATCUENTAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR2');
	END IF;
	IF (select count(*) from tbl_provee_provee where ID_CC like _precuenta || '%' or ID_CC_Comp like _precuenta || '%') > 0 -- si existe ya un proveedor marca error 
	THEN
		_err := 3;
		_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_CATCUENTAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR2');
	END IF;
	IF (select count(*) from tbl_client_client where ID_CC like _precuenta || '%' or ID_CC_Comp like _precuenta || '%') > 0 -- si existe ya un cliente con esta cuenta marca error 
	THEN
		_err := 3;
		_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_CATCUENTAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR2');
	END IF;
	IF (select count(*) from tbl_nom_movimientos_nomina_det where Cuenta like _precuenta || '%') > 0 -- si existe ya un movimiento de nomina con esta cuenta marca error 
	THEN
		_err := 3;
		_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_CATCUENTAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR2');
	END IF;
	IF (select count(*) from tbl_invserv_inventarios where ID_CC like _precuenta || '%') > 0 -- si existe ya un producto con esta cuenta marca error 
	THEN
		_err := 3;
		_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_CATCUENTAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR2');
	END IF;
		
	IF _err = 0
	THEN
		DELETE FROM TBL_CONT_CATALOGO
		WHERE Cuenta like _precuenta || '%';
		
	END IF;
		
	RETURN QUERY SELECT _err, _result, _Cuenta;
END
$BODY$
  LANGUAGE plpgsql;
  
  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_cont_catalogo_cambiar(_cuenta character, _nombre character varying, _acum bit, _estatus character, _ce_codagrup character varying, _ce_natur character)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255);
	_acumold bit; _nivel smallint; _precuenta character(19); _padre character(19); _mes smallint; _ano smallint; _estatusold character(1);
BEGIN
	_err := 0;
	_result := (select msj2 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_CATCUENTAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCOK');
	_acumold := (select Acum from TBL_CONT_CATALOGO where Cuenta = _Cuenta);
	_estatusold := (select Estatus from TBL_CONT_CATALOGO where Cuenta = _Cuenta);
	_nivel := GetLevelAccount(_Cuenta);	   
	_precuenta := CASE WHEN _nivel = 1 THEN substring(_Cuenta, 1, 4)
						WHEN _nivel = 2 THEN substring(_Cuenta, 1, 7)
						WHEN _nivel = 3 THEN substring(_Cuenta, 1, 10)
						WHEN _nivel = 4 THEN substring(_Cuenta, 1, 13)
						WHEN _nivel = 5 THEN substring(_Cuenta, 1, 16)
						ELSE _Cuenta END;
	_padre := 	CASE 	WHEN _nivel = 1 THEN _Cuenta
						WHEN _nivel = 2 THEN substring(_Cuenta, 1, 4) || '000000000000000'
						WHEN _nivel = 3 THEN substring(_Cuenta, 1, 7) || '000000000000'
						WHEN _nivel = 4 THEN substring(_Cuenta, 1, 10) || '000000000'
						WHEN _nivel = 5 THEN substring(_Cuenta, 1, 13) || '000000'
						ELSE substring(_Cuenta, 1, 16) || '000' END;
	
	IF(select count(*) from TBL_CONT_CATALOGO where Cuenta = _Cuenta) < 1
	THEN
		_err := 3;
		_result := (select msj2 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_CATCUENTAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR2') || _Cuenta; 
	END IF;
	
	IF _Acumold = '1' and _Acum = '0' and _nivel = 1 -- si se cambia de acumulativa de mayor a una de detalle marca error 
	THEN
		_err := 3;
		_result := (select msj4 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_CATCUENTAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR');
	END IF;
	IF _Acumold = '1' and _Acum = '0' and _nivel > 1 -- si se cambia de acumulativa a una de detalle y esta no es de mayor revisa por las hijas para que no se queden huerfanas
	THEN
		IF (select count(*) from TBL_CONT_CATALOGO where Cuenta <> _Cuenta and Cuenta like _precuenta || '%') > 0
		THEN
			_err := 3;
			_result := (select msj3 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_CATCUENTAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR2') || _Cuenta; 
		END IF;	
	END IF; 
	IF _Acumold = '0' and _Acum = '1' -- Si se cambia de una cuenta de detalle a una cuenta acumulativa... Revisa que la de detalle no exista en polizas, enlaces, entidades etc
	THEN
		IF (select count(*) from TBL_CONT_POLIZAS_DETALLE where Cuenta like _precuenta || '%') > 0 -- si existe ya una poliza con esta cuenta marca error 
		THEN
			_err := 3;
			_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_CATCUENTAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR2');
		END IF;
		IF (select count(*) from TBL_CONT_POLIZAS_DETALLE_CA where Cuenta like _precuenta || '%') > 0 -- si existe ya una poliza de cierre anual marca error 
		THEN
			_err := 3;
			_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_CATCUENTAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR2');
		END IF;
		IF (select count(*) from TBL_VARIABLES where VAlfanumerico like _precuenta || '%') > 0 -- si existe ya una variable marca error 
		THEN
			_err := 3;
			_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_CATCUENTAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR2');
		END IF;
		IF (select count(*) from TBL_INVSERV_COSTOS_CONCEPTOS where CC like _precuenta || '%') > 0 -- si existe ya un concepto de almacen ligado con esta cuenta marca error 
		THEN
			_err := 3;
			_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_CATCUENTAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR2');
		END IF;
		IF (select count(*) from tbl_client_cxc_conceptos where CC like _precuenta || '%') > 0 -- si existe ya un concepto de cxc con esta cuenta marca error 
		THEN
			_err := 3;
			_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_CATCUENTAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR2');
		END IF;
		IF (select count(*) from tbl_provee_cxp_conceptos where CC like _precuenta || '%') > 0 -- si existe ya un concepto de cxp con esta cuenta marca error 
		THEN
			_err := 3;
			_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_CATCUENTAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR2');
		END IF;
		IF (select count(*) from tbl_bancos_cuentas where CC like _precuenta || '%') > 0 -- si existe ya un banco esta cuenta marca error 
		THEN
			_err := 3;
			_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_CATCUENTAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR2');
		END IF;
		IF (select count(*) from tbl_invserv_gastos_porcentajes where ID_CC like _precuenta || '%') > 0 -- si existe ya gasto ligado marca error 
		THEN
			_err := 3;
			_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_CATCUENTAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR2');
		END IF;
		IF (select count(*) from tbl_provee_provee where ID_CC like _precuenta || '%' or ID_CC_Comp like _precuenta || '%') > 0 -- si existe ya un proveedor marca error 
		THEN
			_err := 3;
			_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_CATCUENTAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR2');
		END IF;
		IF (select count(*) from tbl_client_client where ID_CC like _precuenta || '%' or ID_CC_Comp like _precuenta || '%') > 0 -- si existe ya un cliente con esta cuenta marca error 
		THEN
			_err := 3;
			_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_CATCUENTAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR2');
		END IF;
		IF (select count(*) from tbl_nom_movimientos_nomina_det where Cuenta like _precuenta || '%') > 0 -- si existe ya un movimiento de nomina con esta cuenta marca error 
		THEN
			_err := 3;
			_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_CATCUENTAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR2');
		END IF;
		IF (select count(*) from tbl_invserv_inventarios where ID_CC like _precuenta || '%') > 0 -- si existe ya un producto con esta cuenta marca error 
		THEN
			_err := 3;
			_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_CATCUENTAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR2');
		END IF;
		_Mes := (	select Mes -- el primer mes
					from TBL_CONT_CATALOGO_PERIODOS
					order by Ano Asc, Mes Asc limit 1);
		_Ano := (	select Ano -- igual en el a?o
					from TBL_CONT_CATALOGO_PERIODOS 
					order by Ano Asc, Mes Asc limit 1);
		IF(_Mes is not null and _Ano is not null) -- si es nulo no se han agregado aun periodos y no hay nada para verificar
		THEN
			IF(select SaldoFinal from tbl_cont_catalogo_detalle where Mes = _Mes and Ano = _Ano and Cuenta = _Cuenta) <> 0.0000
			THEN
				_err := 3;
				_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_CATCUENTAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR2');
			END IF;
		END IF;
	END IF;
	 
	IF _err = 0
	THEN
		UPDATE TBL_CONT_CATALOGO
		SET Acum = _Acum, Nombre = _Nombre, CE_CodAgrup = _CE_CodAgrup, CE_Natur = _CE_Natur
		WHERE Cuenta = _Cuenta;

		--si el estatus cambia
		IF _estatus <> _estatusold
		THEN
			IF _estatusold = 'A' --Significa que se desea descontinuar
			THEN
				IF _Acum = '1'
				THEN
					UPDATE TBL_CONT_CATALOGO
					SET Estatus = _Estatus
					WHERE Cuenta LIKE _precuenta || '%';
				ELSE
					UPDATE TBL_CONT_CATALOGO
					SET Estatus = _Estatus
					WHERE Cuenta = _Cuenta;
				END IF;
			ELSE -- Significa que se desea volver a activar
				IF _nivel = 1
				THEN
					UPDATE TBL_CONT_CATALOGO
					SET Estatus = _Estatus
					WHERE Cuenta LIKE _precuenta || '%';
				ELSE
					IF (select Estatus from TBL_CONT_CATALOGO where Cuenta = _padre) = 'A'
					THEN
						IF _Acum = '1'
						THEN
							UPDATE TBL_CONT_CATALOGO
							SET Estatus = _Estatus
							WHERE Cuenta LIKE _precuenta || '%';
						ELSE
							UPDATE TBL_CONT_CATALOGO
							SET Estatus = _Estatus
							WHERE Cuenta = _Cuenta;
						END IF;
					END IF;
				END IF;
			END IF;
		END IF;
	END IF;
		
	RETURN QUERY SELECT _err, _result, _Cuenta;
END
$BODY$
  LANGUAGE plpgsql;
  
  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_cont_rubros_eliminar(_clave integer)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255); _cuentainicial character(4); _cuentafinal character(4);
BEGIN
	_err := 0;
	_result := (select msj3 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_RUBROS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCOK');
	_cuentainicial := (select cuentainicial from tbl_cont_rubros where clave = _clave);
	_cuentafinal := (select cuentafinal from tbl_cont_rubros where clave = _clave);

	IF (select count(*) from tbl_cont_rubros where clave = _clave) < 1
	THEN
		_err := 3;
		_result := (select msj2 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_RUBROS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR');
	END IF;

	IF(select count(*) from TBL_CONT_CATALOGO where substring(Cuenta, 1, 4) between _CuentaInicial AND _CuentaFinal ) > 0
	THEN
		_err := 3;
		_result := (select msj3 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_RUBROS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR');
	END IF;
	
	IF(_err = 0)
	THEN
		DELETE FROM TBL_CONT_RUBROS
		WHERE Clave = _Clave;
	END IF;
	
	RETURN QUERY SELECT _err, _result, _Clave;
	
END
$BODY$
  LANGUAGE plpgsql;

  
  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_cont_rubros_cambiar(_clave integer, _tipo character, _nombre character varying, _cuentainicial character, _cuentafinal character)
  RETURNS SETOF record AS
$BODY$
--BEGIN TRANSACTION
DECLARE 
	_err int; _result varchar(255); _cuentainicialold character(4); _cuentafinalold character(4); _CAT RECORD; 
BEGIN
	_err := 0;
	_result := (select msj2 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_RUBROS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCOK');

	_cuentainicialold := (select cuentainicial from TBL_CONT_RUBROS where clave = _Clave);
	_cuentafinalold := (select cuentafinal from TBL_CONT_RUBROS where clave = _Clave);

	IF( _cuentainicialold <> _cuentainicial OR _cuentafinalold <> _cuentafinal )
	THEN
		IF( _CuentaInicial > _CuentaFinal OR _CuentaInicial < '0000' OR _CuentaFinal > '9999' OR
		      (select count(*) from TBL_CONT_RUBROS where Clave <> _Clave and (     (_CuentaInicial < CuentaInicial and _CuentaFinal < CuentaInicial ) or (_CuentaInicial > CuentaFinal and _CuentaFinal > CuentaFinal)    )    )   
		      <> ( select count(*) from TBL_CONT_RUBROS where Clave <> _Clave ) )   
		THEN
			_err := 3;
			_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_RUBROS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR');
		ELSE 
			--No se traslapan los rubros, checa por posibles cuentas perdidas sin rubro.
			FOR _CAT IN (select substring(Cuenta,1,4) as Cuenta from tbl_cont_catalogo where Cuenta like '%000000000000000' order by Cuenta asc)
			LOOP
				-- Si no existe rubro para esta cuenta
				IF(select count(*) from TBL_CONT_RUBROS where Clave <> _Clave and _CAT.Cuenta between CuentaInicial AND CuentaFinal ) = 0
				THEN
					-- Revisa si existe en el rubro a cambiar
					IF(_CAT.Cuenta < _cuentainicial OR _CAT.Cuenta > _cuentafinal)
					THEN 
						_err := 3;
						_result := (select msj3 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_RUBROS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR');
						EXIT;
					END IF;
				END IF;
	
			END LOOP;
		END IF;
	END IF;
	
	IF(_err = 0)
	THEN
		UPDATE TBL_CONT_RUBROS
		SET Tipo = _Tipo, Nombre = _Nombre, CuentaInicial = _CuentaInicial, CuentaFinal = _CuentaFinal
		WHERE Clave = _Clave;
	END IF;
	
	RETURN QUERY SELECT _err, _result, _Clave;
	
END
$BODY$
  LANGUAGE plpgsql;
  
  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_cont_polizas_eliminar_tipos(_id_clasificacion character varying)
  RETURNS SETOF record AS
$BODY$
DECLARE _err int; _result varchar(255);
BEGIN
	_err := 0;
	_result := (select msj3 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_TIPOPOLIZA' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCOK'); --'El tipo de p√≥liza ha quedado eliminada';
	
	IF (select count(*) from TBL_CONT_POLIZAS_CLASIFICACIONES where ID_Clasificacion = _ID_Clasificacion) < 1 
	THEN
		_err := 3;
		_result := (select msj2 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_TIPOPOLIZA' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'ERROR: Este tipo de p√≥liza no existe, No se puede cambiar o eliminar';
	END IF;

	IF (select count(*) from tbl_cont_polizas where id_clasificacion = _id_clasificacion) > 0 -- si existe ya la clacificacion enpolizas o enlazada a entidade marcar√° error 
	THEN
		_err := 3;
		_result := (select msj3 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_TIPOPOLIZA' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR');
	END IF;
	IF (select count(*) from tbl_bancos_cuentas where id_clasificacion = _id_clasificacion) > 0 
	THEN
		_err := 3;
		_result := (select msj3 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_TIPOPOLIZA' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR');
	END IF;
	IF (select count(*) from tbl_invserv_bodegas where id_clasificacion = _id_clasificacion) > 0 
	THEN
		_err := 3;
		_result := (select msj3 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_TIPOPOLIZA' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR');
	END IF;
	IF (select count(*) from tbl_ventas_entidades where id_clasificacion = _id_clasificacion) > 0 
	THEN
		_err := 3;
		_result := (select msj3 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_TIPOPOLIZA' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR');
	END IF;
	IF (select count(*) from tbl_compras_entidades where id_clasificacion = _id_clasificacion) > 0 
	THEN
		_err := 3;
		_result := (select msj3 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_TIPOPOLIZA' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR');
	END IF;
	IF (select count(*) from tbl_produccion_entidades where id_clasificacion = _id_clasificacion) > 0 
	THEN
		_err := 3;
		_result := (select msj3 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_TIPOPOLIZA' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR');
	END IF;
	IF (select count(*) from  tbl_companias where id_clasificacion = _id_clasificacion) > 0 
	THEN
		_err := 3;
		_result := (select msj3 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_TIPOPOLIZA' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR');
	END IF;
	
	IF(_err = 0)
	THEN
		DELETE FROM TBL_CONT_POLIZAS_CLASIFICACIONES
		WHERE ID_Clasificacion = _ID_Clasificacion;
	END IF;	

	RETURN QUERY SELECT _err, _result, _ID_Clasificacion;

END
$BODY$
  LANGUAGE plpgsql;
  
  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_cont_polizas_cambiar_tipos(_id_clasificacion character varying, _descripcion character varying, _ficha character varying)
  RETURNS SETOF record AS
$BODY$
DECLARE _err int; _result varchar(255);
BEGIN
	_err := 0;
	_result := (select msj2 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_TIPOPOLIZA' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCOK'); --'El tipo de p√≥liza ha quedado cambiada';
	
	IF (select count(*) from TBL_CONT_POLIZAS_CLASIFICACIONES where ID_Clasificacion = _ID_Clasificacion) < 1
	THEN
		_err := 3;
		_result := (select msj2 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_TIPOPOLIZA' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'ERROR: Este tipo de p√≥liza ya existe, No se puede agregar';
	END IF;
	
	IF(_err = 0)
	THEN
		UPDATE TBL_CONT_POLIZAS_CLASIFICACIONES
		SET Descripcion = _Descripcion, Ficha = _Ficha
		WHERE ID_Clasificacion = _ID_Clasificacion;
		
	END IF;	


	RETURN QUERY SELECT _err, _result, _ID_Clasificacion;

END
$BODY$
  LANGUAGE plpgsql;
  
  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_invserv_costos_conceptos_eliminar(_id_concepto smallint)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255); _DeSistema bit;
BEGIN
	_err := 0;
	_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_ENLACES' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCOK3');

	IF(select count(*) from TBL_INVSERV_COSTOS_CONCEPTOS where ID_Concepto = _ID_Concepto) < 1
	THEN
		_err := 3;
		_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_ENLACES' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR2');
	END IF;
	
	IF (select count(*) from tbl_invserv_almacen_movim_cab where id_concepto = _id_concepto) > 0 -- si existe en algun movimiento marca error 
	THEN
		_err := 3;
		_result := (select msj4 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_ENLACES' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR2');
	END IF;
	IF (select count(*) from tbl_invserv_costos_detalle where id_concepto = _id_concepto) > 0 
	THEN
		_err := 3;
		_result := (select msj4 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_ENLACES' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR2');
	END IF;	
	IF (select count(*) from tbl_invserv_almacen_movim_plant_cab where id_concepto = _id_concepto) > 0 
	THEN
		_err := 3;
		_result := (select msj4 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_ENLACES' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR2');
	END IF;




	IF _err = 0
	THEN
		_DeSistema := (select DeSistema from TBL_INVSERV_COSTOS_CONCEPTOS where ID_Concepto = _ID_Concepto);
	
		IF _DeSistema = '0'
		THEN
			DELETE FROM TBL_INVSERV_COSTOS_CONCEPTOS
			WHERE ID_Concepto = _ID_Concepto;
		END IF;
	END IF;

	RETURN QUERY SELECT _err, _result, _ID_Concepto;
END
$BODY$
  LANGUAGE plpgsql;

  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_provee_cxp_conceptos_eliminar(_id_concepto smallint)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255); _DeSistema bit;
BEGIN
	_err := 0;
	_result := (select msj2 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_ENLACES' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCOK3');
	
	IF(select count(*) from TBL_PROVEE_CXP_CONCEPTOS where ID_Concepto = _ID_Concepto) < 1
	THEN
		_err := 3;
		_result := (select msj2 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_ENLACES' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR2');
	END IF;

	IF (select count(*) from tbl_provee_cxp where id_concepto = _id_concepto) > 0 -- si existe en alguna cuenta marca error 
	THEN
		_err := 3;
		_result := (select msj4 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_ENLACES' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR2');
	END IF;

	IF _err = 0
	THEN
		_DeSistema := (select DeSistema from TBL_PROVEE_CXP_CONCEPTOS where ID_Concepto = _ID_Concepto);
	
		IF _DeSistema = '0'
		THEN
			DELETE FROM TBL_PROVEE_CXP_CONCEPTOS
			WHERE ID_Concepto = _ID_Concepto;
		END IF;
	END IF;

	RETURN QUERY SELECT _err, _result, _ID_Concepto;
END
$BODY$
  LANGUAGE plpgsql;
  
  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_client_cxc_conceptos_eliminar(_id_concepto smallint)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255); _DeSistema bit;
BEGIN
	_err := 0;
	_result := (select msj3 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_ENLACES' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCOK3');
	
	IF(select count(*) from TBL_CLIENT_CXC_CONCEPTOS where ID_Concepto = _ID_Concepto) < 1
	THEN
		_err := 3;
		_result := (select msj3 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_ENLACES' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR2');
	END IF;

	IF (select count(*) from tbl_client_cxc where id_concepto = _id_concepto) > 0 -- si existe en alguna cuenta marca error 
	THEN
		_err := 3;
		_result := (select msj4 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_ENLACES' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR2');
	END IF;

	IF _err = 0
	THEN
		_DeSistema := (select DeSistema from TBL_CLIENT_CXC_CONCEPTOS where ID_Concepto = _ID_Concepto);
	
		IF _DeSistema = '0'
		THEN
			DELETE FROM TBL_CLIENT_CXC_CONCEPTOS
			WHERE ID_Concepto = _ID_Concepto;
		END IF;
	END IF;

	RETURN QUERY SELECT _err, _result, _ID_Concepto;
END
$BODY$
  LANGUAGE plpgsql;
  


--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_cont_catalogo_detalle AS 
 SELECT d.mes, d.ano, d.cuenta, c.nombre, c.acum, d.saldoinicial, d.abonos AS debe, d.retiros AS haber, d.saldofinal
   FROM tbl_cont_catalogo_detalle d
   JOIN tbl_cont_catalogo c ON d.cuenta = c.cuenta;

  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_cont_catalogo_iniciar_sdos(_mes smallint, _ano smallint)
  RETURNS SETOF record AS
$BODY$
DECLARE 	
	_err int;  _result varchar(254); 
BEGIN
	_err := 0;
	_result := 'Los saldos iniciales contables se capturaron satisfactoriamente';

	IF _Mes is null AND _Ano is null
	THEN
		_err := 3;
		_result := 'ERROR: El mes y a√±o mandados parecen ser nulos. No se pueden iniciar los saldos contables';
	END IF;
			
	IF _err = 0
	THEN
		-- Actualiza los saldos finales
		UPDATE TBL_CONT_CATALOGO_DETALLE
		SET	SaldoFinal = tm.Saldo
		FROM _TMP_INICIOS_CONT tm, TBL_CONT_CATALOGO_DETALLE c
		WHERE tm.Cuenta = c.Cuenta and c.Mes = _Mes and c.Ano = _Ano and 
			c.Cuenta = TBL_CONT_CATALOGO_DETALLE.Cuenta and c.Mes = TBL_CONT_CATALOGO_DETALLE.Mes and c.Ano = TBL_CONT_CATALOGO_DETALLE.Ano;
	END IF;
	
	RETURN QUERY 
	SELECT _err as err, _result as res, (cast(_Mes as varchar) || '/' || cast(_ano as varchar))::varchar as clave;
END
$BODY$
  LANGUAGE plpgsql;
  
INSERT INTO tbl_variables(id_variable, descripcion, ventero, vdecimal, vfecha, valfanumerico, desistema, modulo)
VALUES('INISLDS', 'INT|0|2|-|-', 0, null, null, '', '1', 'ADM');
  


--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_bancos_cuentas_saldos AS 
 SELECT sal.mes, sal.ano, bc.tipo, bc.clave, bc.cuenta, bc.cc, 
        CASE
            WHEN getlevelaccount(c1.cuenta) = 1 THEN c1.nombre
            WHEN getlevelaccount(c1.cuenta) = 2 THEN ((((( SELECT c2.nombre
               FROM tbl_cont_catalogo c2
              WHERE ("substring"(c1.cuenta::text, 1, 4) || '000000000000000'::text) = c2.cuenta::text))::text) || '/'::text) || c1.nombre::text)::character varying
            WHEN getlevelaccount(c1.cuenta) = 3 THEN ((((((( SELECT c2.nombre
               FROM tbl_cont_catalogo c2
              WHERE ("substring"(c1.cuenta::text, 1, 4) || '000000000000000'::text) = c2.cuenta::text))::text) || '/'::text) || ((( SELECT c3.nombre
               FROM tbl_cont_catalogo c3
              WHERE ("substring"(c1.cuenta::text, 1, 7) || '000000000000'::text) = c3.cuenta::text))::text)) || '/'::text) || c1.nombre::text)::character varying
            WHEN getlevelaccount(c1.cuenta) = 4 THEN ((((((((( SELECT c2.nombre
               FROM tbl_cont_catalogo c2
              WHERE ("substring"(c1.cuenta::text, 1, 4) || '000000000000000'::text) = c2.cuenta::text))::text) || '/'::text) || ((( SELECT c3.nombre
               FROM tbl_cont_catalogo c3
              WHERE ("substring"(c1.cuenta::text, 1, 7) || '000000000000'::text) = c3.cuenta::text))::text)) || '/'::text) || ((( SELECT c4.nombre
               FROM tbl_cont_catalogo c4
              WHERE ("substring"(c1.cuenta::text, 1, 10) || '000000000'::text) = c4.cuenta::text))::text)) || '/'::text) || c1.nombre::text)::character varying
            WHEN getlevelaccount(c1.cuenta) = 5 THEN ((((((((((( SELECT c2.nombre
               FROM tbl_cont_catalogo c2
              WHERE ("substring"(c1.cuenta::text, 1, 4) || '000000000000000'::text) = c2.cuenta::text))::text) || '/'::text) || ((( SELECT c3.nombre
               FROM tbl_cont_catalogo c3
              WHERE ("substring"(c1.cuenta::text, 1, 7) || '000000000000'::text) = c3.cuenta::text))::text)) || '/'::text) || ((( SELECT c4.nombre
               FROM tbl_cont_catalogo c4
              WHERE ("substring"(c1.cuenta::text, 1, 10) || '000000000'::text) = c4.cuenta::text))::text)) || '/'::text) || ((( SELECT c5.nombre
               FROM tbl_cont_catalogo c5
              WHERE ("substring"(c1.cuenta::text, 1, 13) || '000000'::text) = c5.cuenta::text))::text)) || '/'::text) || c1.nombre::text)::character varying
            WHEN getlevelaccount(c1.cuenta) = 6 THEN ((((((((((((( SELECT c2.nombre
               FROM tbl_cont_catalogo c2
              WHERE ("substring"(c1.cuenta::text, 1, 4) || '000000000000000'::text) = c2.cuenta::text))::text) || '/'::text) || ((( SELECT c3.nombre
               FROM tbl_cont_catalogo c3
              WHERE ("substring"(c1.cuenta::text, 1, 7) || '000000000000'::text) = c3.cuenta::text))::text)) || '/'::text) || ((( SELECT c4.nombre
               FROM tbl_cont_catalogo c4
              WHERE ("substring"(c1.cuenta::text, 1, 10) || '000000000'::text) = c4.cuenta::text))::text)) || '/'::text) || ((( SELECT c5.nombre
               FROM tbl_cont_catalogo c5
              WHERE ("substring"(c1.cuenta::text, 1, 13) || '000000'::text) = c5.cuenta::text))::text)) || '/'::text) || ((( SELECT c6.nombre
               FROM tbl_cont_catalogo c6
              WHERE ("substring"(c1.cuenta::text, 1, 16) || '000'::text) = c6.cuenta::text))::text)) || '/'::text) || c1.nombre::text)::character varying
            ELSE ''::character varying
        END AS nombre, bc.status, bc.fijo, bc.id_moneda, mon.simbolo, mon.tc, bc.descripcion, sal.saldoini, sal.saldofin, d1.saldoinicial as cc_saldoini, d1.saldofinal as cc_saldofin
   FROM tbl_bancos_cuentas bc
   JOIN tbl_bancos_cuentas_saldos sal ON bc.tipo = sal.tipo AND bc.clave = sal.clave
   JOIN tbl_cont_monedas mon ON bc.id_moneda = mon.clave
   JOIN tbl_cont_catalogo c1 ON bc.cc = c1.cuenta
   JOIN tbl_cont_catalogo_detalle d1 ON bc.cc = d1.cuenta and sal.mes = d1.mes and sal.ano = d1.ano;

  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_bancos_iniciar_sdos(_mes smallint, _ano smallint)
  RETURNS SETOF record AS
$BODY$
DECLARE 	
	_err int; _result varchar(254); 
BEGIN
	_err := 0;
	_result := 'Los saldos iniciales de bancos y cajas se capturaron satisfactoriamente.';

	IF _Mes is null AND _Ano is null
	THEN
		_err := 3;
		_result := 'ERROR: El mes y a√±o mandados parecen ser nulos. No se pueden iniciar los saldos contables';
	END IF;
			
	IF _err = 0
	THEN
		-- Actualiza los saldos finales
		UPDATE TBL_BANCOS_CUENTAS_SALDOS
		SET	SaldoFin = tm.Saldo
		FROM _TMP_INICIOS_BANCAJ tm, TBL_BANCOS_CUENTAS_SALDOS c
		WHERE tm.Tipo = c.Tipo and tm.Clave = c.Clave and c.Mes = _Mes and c.Ano = _Ano and 
			c.Tipo = TBL_BANCOS_CUENTAS_SALDOS.Tipo and c.Clave = TBL_BANCOS_CUENTAS_SALDOS.Clave and c.Mes = TBL_BANCOS_CUENTAS_SALDOS.Mes and c.Ano = TBL_BANCOS_CUENTAS_SALDOS.Ano;

		IF (select VEntero from TBL_VARIABLES where ID_Variable = 'INISLDS') = 2
		THEN
			CREATE LOCAL TEMPORARY TABLE _TMP_INICIOS_CONT (
				Cuenta character(19) NOT NULL,
				Saldo numeric(19, 4) NOT NULL 
			);

			--Inserta en la tabla temporal de saldos sumando saldos que apuntan a la misma cuenta contable y solo de bancos y cajas fijas
			INSERT INTO _TMP_INICIOS_CONT( Cuenta, Saldo)
			SELECT ini.CC, sum(round((ini.Saldo * ini.TC), 2))
			FROM _TMP_INICIOS_BANCAJ ini
			WHERE ini.Fija = '0'
			GROUP BY ini.CC;
			
			UPDATE TBL_CONT_CATALOGO_DETALLE
			SET	SaldoFinal = tm.Saldo
			FROM _TMP_INICIOS_CONT tm, TBL_CONT_CATALOGO_DETALLE c
			WHERE tm.Cuenta = c.Cuenta and c.Mes = _Mes and c.Ano = _Ano and 
				c.Cuenta = TBL_CONT_CATALOGO_DETALLE.Cuenta and c.Mes = TBL_CONT_CATALOGO_DETALLE.Mes and c.Ano = TBL_CONT_CATALOGO_DETALLE.Ano;

			_result = _result || '<br>Los saldos de cuentas contables que apuntan estos bancos y cajas se actualizaron conforme su auxiliar';
			DROP TABLE  _TMP_INICIOS_CONT;
		END IF;
	END IF;
	
	RETURN QUERY 
	SELECT _err as err, _result as res, (cast(_Mes as varchar) || '/' || cast(_ano as varchar))::varchar as clave;

END
$BODY$
  LANGUAGE plpgsql;



--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_invserv_costos_detalles AS 
 SELECT sal.mes, sal.ano, inv.id_tipo, inv.id_prod, inv.descripcion, inv.id_cc, 
        CASE
            WHEN getlevelaccount(c1.cuenta) = 1 THEN c1.nombre
            WHEN getlevelaccount(c1.cuenta) = 2 THEN ((((( SELECT c2.nombre
               FROM tbl_cont_catalogo c2
              WHERE ("substring"(c1.cuenta::text, 1, 4) || '000000000000000'::text) = c2.cuenta::text))::text) || '/'::text) || c1.nombre::text)::character varying
            WHEN getlevelaccount(c1.cuenta) = 3 THEN ((((((( SELECT c2.nombre
               FROM tbl_cont_catalogo c2
              WHERE ("substring"(c1.cuenta::text, 1, 4) || '000000000000000'::text) = c2.cuenta::text))::text) || '/'::text) || ((( SELECT c3.nombre
               FROM tbl_cont_catalogo c3
              WHERE ("substring"(c1.cuenta::text, 1, 7) || '000000000000'::text) = c3.cuenta::text))::text)) || '/'::text) || c1.nombre::text)::character varying
            WHEN getlevelaccount(c1.cuenta) = 4 THEN ((((((((( SELECT c2.nombre
               FROM tbl_cont_catalogo c2
              WHERE ("substring"(c1.cuenta::text, 1, 4) || '000000000000000'::text) = c2.cuenta::text))::text) || '/'::text) || ((( SELECT c3.nombre
               FROM tbl_cont_catalogo c3
              WHERE ("substring"(c1.cuenta::text, 1, 7) || '000000000000'::text) = c3.cuenta::text))::text)) || '/'::text) || ((( SELECT c4.nombre
               FROM tbl_cont_catalogo c4
              WHERE ("substring"(c1.cuenta::text, 1, 10) || '000000000'::text) = c4.cuenta::text))::text)) || '/'::text) || c1.nombre::text)::character varying
            WHEN getlevelaccount(c1.cuenta) = 5 THEN ((((((((((( SELECT c2.nombre
               FROM tbl_cont_catalogo c2
              WHERE ("substring"(c1.cuenta::text, 1, 4) || '000000000000000'::text) = c2.cuenta::text))::text) || '/'::text) || ((( SELECT c3.nombre
               FROM tbl_cont_catalogo c3
              WHERE ("substring"(c1.cuenta::text, 1, 7) || '000000000000'::text) = c3.cuenta::text))::text)) || '/'::text) || ((( SELECT c4.nombre
               FROM tbl_cont_catalogo c4
              WHERE ("substring"(c1.cuenta::text, 1, 10) || '000000000'::text) = c4.cuenta::text))::text)) || '/'::text) || ((( SELECT c5.nombre
               FROM tbl_cont_catalogo c5
              WHERE ("substring"(c1.cuenta::text, 1, 13) || '000000'::text) = c5.cuenta::text))::text)) || '/'::text) || c1.nombre::text)::character varying
            WHEN getlevelaccount(c1.cuenta) = 6 THEN ((((((((((((( SELECT c2.nombre
               FROM tbl_cont_catalogo c2
              WHERE ("substring"(c1.cuenta::text, 1, 4) || '000000000000000'::text) = c2.cuenta::text))::text) || '/'::text) || ((( SELECT c3.nombre
               FROM tbl_cont_catalogo c3
              WHERE ("substring"(c1.cuenta::text, 1, 7) || '000000000000'::text) = c3.cuenta::text))::text)) || '/'::text) || ((( SELECT c4.nombre
               FROM tbl_cont_catalogo c4
              WHERE ("substring"(c1.cuenta::text, 1, 10) || '000000000'::text) = c4.cuenta::text))::text)) || '/'::text) || ((( SELECT c5.nombre
               FROM tbl_cont_catalogo c5
              WHERE ("substring"(c1.cuenta::text, 1, 13) || '000000'::text) = c5.cuenta::text))::text)) || '/'::text) || ((( SELECT c6.nombre
               FROM tbl_cont_catalogo c6
              WHERE ("substring"(c1.cuenta::text, 1, 16) || '000'::text) = c6.cuenta::text))::text)) || '/'::text) || c1.nombre::text)::character varying
            ELSE ''::character varying
        END AS nombre, inv.status, sal.existenciaini, sal.costopromini, sal.ultimocostoini, sal.saldoini, sal.existenciafin, sal.costopromfin, sal.ultimocostofin, sal.saldofin, d1.saldoinicial AS cc_saldoini, d1.saldofinal AS cc_saldofin
   FROM tbl_invserv_inventarios inv
   JOIN tbl_invserv_costos sal ON inv.id_prod::text = sal.id_prod::text
   JOIN tbl_cont_catalogo c1 ON inv.id_cc = c1.cuenta
   JOIN tbl_cont_catalogo_detalle d1 ON inv.id_cc = d1.cuenta AND sal.mes = d1.mes AND sal.ano = d1.ano;
  


--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_invserv_inventarios_existencias_saldos AS 
 SELECT e.mes, e.ano, c.id_tipo, c.id_prod, e.id_bodega, b.nombre, e.existenciaini, e.existenciafin, b.id_invserv, c.id_unidadsalida as unidad
   FROM tbl_invserv_inventarios c
   JOIN tbl_invserv_existencias_periodos e ON c.id_prod::text = e.id_prod::text
   JOIN tbl_invserv_bodegas b ON e.id_bodega = b.id_bodega;
   
  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_invserv_iniciar_sdos(_mes smallint, _ano smallint)
  RETURNS SETOF record AS
$BODY$
DECLARE 	
	_err int; _result varchar(254); 
BEGIN
	_err := 0;
	_result := 'Los saldos iniciales de inventario se capturaron satisfactoriamente.';

	IF _Mes is null AND _Ano is null
	THEN
		_err := 3;
		_result := 'ERROR: El mes y a√±o mandados parecen ser nulos. No se pueden iniciar los saldos contables';
	END IF;
			
	IF _err = 0
	THEN
		-- Actualiza los saldos finales
		UPDATE TBL_INVSERV_COSTOS
		SET	ExistenciaFin = tm.existencia, CostoPromFin = tm.costo, UltimoCostoFin = tm.costo, SaldoFin = tm.Saldo
		FROM _TMP_INICIOS_INVSERV tm, TBL_INVSERV_COSTOS c
		WHERE tm.ID_Prod = c.ID_Prod and c.Mes = _Mes and c.Ano = _Ano and 
			c.ID_Prod = TBL_INVSERV_COSTOS.ID_Prod and c.Mes = TBL_INVSERV_COSTOS.Mes and c.Ano = TBL_INVSERV_COSTOS.Ano;

		--Actualiza existencias por bodega
		UPDATE tbl_invserv_existencias_periodos
		SET	ExistenciaFin = tm.existencia
		FROM _TMP_INICIOS_INVSERV_BODEGAS tm, tbl_invserv_existencias_periodos c
		WHERE tm.ID_Prod = c.ID_Prod and tm.ID_Bodega = c.ID_Bodega and c.Mes = _Mes and c.Ano = _Ano and 
			c.ID_Prod = tbl_invserv_existencias_periodos.ID_Prod and c.ID_Bodega = tbl_invserv_existencias_periodos.ID_Bodega and c.Mes = tbl_invserv_existencias_periodos.Mes and c.Ano = tbl_invserv_existencias_periodos.Ano;

		IF (select VEntero from TBL_VARIABLES where ID_Variable = 'INISLDS') = 2
		THEN
			CREATE LOCAL TEMPORARY TABLE _TMP_INICIOS_CONT (
				Cuenta character(19) NOT NULL,
				Saldo numeric(19, 4) NOT NULL 
			);

			--Inserta en la tabla temporal de saldos sumando saldos que apuntan a la misma cuenta contable y solo de bancos y cajas fijas
			INSERT INTO _TMP_INICIOS_CONT( Cuenta, Saldo)
			SELECT ini.CC, sum(ini.Saldo)
			FROM _TMP_INICIOS_INVSERV ini
			GROUP BY ini.CC;
			
			UPDATE TBL_CONT_CATALOGO_DETALLE
			SET	SaldoFinal = tm.Saldo
			FROM _TMP_INICIOS_CONT tm, TBL_CONT_CATALOGO_DETALLE c
			WHERE tm.Cuenta = c.Cuenta and c.Mes = _Mes and c.Ano = _Ano and 
				c.Cuenta = TBL_CONT_CATALOGO_DETALLE.Cuenta and c.Mes = TBL_CONT_CATALOGO_DETALLE.Mes and c.Ano = TBL_CONT_CATALOGO_DETALLE.Ano;

			_result = _result || '<br>Los saldos de cuentas contables que apuntan estos productos se actualizaron conforme su auxiliar';
			DROP TABLE  _TMP_INICIOS_CONT;
		END IF;
	END IF;
	
	RETURN QUERY 
	SELECT _err as err, _result as res, (cast(_Mes as varchar) || '/' || cast(_ano as varchar))::varchar as clave;

END
$BODY$
  LANGUAGE plpgsql;

  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION getcliproslds(_clpr character, _cve integer, _mes integer, _ano integer)
  RETURNS text AS
$BODY$
DECLARE
	_simbolo character varying(4);
  	_saldo numeric(19,4);
	_resultado text;
BEGIN
	_resultado = '-';
	IF _clpr = 'CL'
	THEN
		FOR _simbolo, _saldo 
		IN  
			select m.simbolo, s.saldofin
			from tbl_cont_monedas m 
				join tbl_client_saldos s on m.clave = s.id_moneda
			where s.saldofin <> 0.00 and s.id_tipo = 'CL' and s.id_clave = _cve and s.mes = _mes and s.ano = _ano
			order by m.clave asc 
		LOOP
			_resultado := _resultado || ' ' || _simbolo || ' ' || cast(round(_saldo,2) as text) || ' -'; 
		END LOOP;
	ELSIF _clpr = 'PR'
	THEN
		FOR _simbolo, _saldo 
		IN 
			select m.simbolo, s.saldofin 
			from tbl_cont_monedas m 
				join tbl_provee_saldos s on m.clave = s.id_moneda
			where s.saldofin <> 0.00 and s.id_tipo = 'PR' and s.id_clave = _cve and s.mes = _mes and s.ano = _ano
			order by m.clave asc 
		LOOP
			_resultado := _resultado || ' ' || _simbolo || ' ' || cast(round(_saldo,2) as text) || ' -'; 
		END LOOP;
	END IF;
		
	IF _resultado = '-'
	THEN 
		return '';
	ELSE
		return _resultado;
	END IF;
END
$BODY$
  LANGUAGE plpgsql;
  
--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION getcliprosldtotmn(
    _clpr character,
    _cve integer)
  RETURNS numeric AS
$BODY$
DECLARE
	_saldo numeric(19,4);
	_resultado numeric(19,4);
BEGIN
	_resultado = 0.0;
	IF _clpr = 'CL'
	THEN
		FOR _saldo 
		IN 
			select s.saldo * m.tc
			from tbl_cont_monedas m 
				join tbl_client_saldos_monedas s on m.clave = s.id_moneda
			where s.saldo <> 0.00 and s.id_tipo = 'CL' and s.id_clave = _cve
			order by m.clave asc 
		LOOP
			_resultado := _resultado + round(_saldo,2); 
		END LOOP;
	ELSIF _clpr = 'PR'
	THEN
		FOR _saldo 
		IN 
			select s.saldo * m.tc 
			from tbl_cont_monedas m 
				join tbl_provee_saldos_monedas s on m.clave = s.id_moneda
			where s.saldo <> 0.00 and s.id_tipo = 'PR' and s.id_clave = _cve
			order by m.clave asc 
		LOOP
			_resultado := _resultado + round(_saldo,2); 
		END LOOP;
	END IF;
		
	return _resultado;
END
$BODY$
  LANGUAGE plpgsql;
  


--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_provee_saldos AS 
 SELECT per.mes, per.ano, bc.id_entidad, bc.id_tipo, bc.id_clave, bc.id_numero, bc.nombre AS proveedor, bc.id_cc, 
        CASE
            WHEN getlevelaccount(c1.cuenta) = 1 THEN c1.nombre
            WHEN getlevelaccount(c1.cuenta) = 2 THEN ((((( SELECT c2.nombre
               FROM tbl_cont_catalogo c2
              WHERE ("substring"(c1.cuenta::text, 1, 4) || '000000000000000'::text) = c2.cuenta::text))::text) || '/'::text) || c1.nombre::text)::character varying
            WHEN getlevelaccount(c1.cuenta) = 3 THEN ((((((( SELECT c2.nombre
               FROM tbl_cont_catalogo c2
              WHERE ("substring"(c1.cuenta::text, 1, 4) || '000000000000000'::text) = c2.cuenta::text))::text) || '/'::text) || ((( SELECT c3.nombre
               FROM tbl_cont_catalogo c3
              WHERE ("substring"(c1.cuenta::text, 1, 7) || '000000000000'::text) = c3.cuenta::text))::text)) || '/'::text) || c1.nombre::text)::character varying
            WHEN getlevelaccount(c1.cuenta) = 4 THEN ((((((((( SELECT c2.nombre
               FROM tbl_cont_catalogo c2
              WHERE ("substring"(c1.cuenta::text, 1, 4) || '000000000000000'::text) = c2.cuenta::text))::text) || '/'::text) || ((( SELECT c3.nombre
               FROM tbl_cont_catalogo c3
              WHERE ("substring"(c1.cuenta::text, 1, 7) || '000000000000'::text) = c3.cuenta::text))::text)) || '/'::text) || ((( SELECT c4.nombre
               FROM tbl_cont_catalogo c4
              WHERE ("substring"(c1.cuenta::text, 1, 10) || '000000000'::text) = c4.cuenta::text))::text)) || '/'::text) || c1.nombre::text)::character varying
            WHEN getlevelaccount(c1.cuenta) = 5 THEN ((((((((((( SELECT c2.nombre
               FROM tbl_cont_catalogo c2
              WHERE ("substring"(c1.cuenta::text, 1, 4) || '000000000000000'::text) = c2.cuenta::text))::text) || '/'::text) || ((( SELECT c3.nombre
               FROM tbl_cont_catalogo c3
              WHERE ("substring"(c1.cuenta::text, 1, 7) || '000000000000'::text) = c3.cuenta::text))::text)) || '/'::text) || ((( SELECT c4.nombre
               FROM tbl_cont_catalogo c4
              WHERE ("substring"(c1.cuenta::text, 1, 10) || '000000000'::text) = c4.cuenta::text))::text)) || '/'::text) || ((( SELECT c5.nombre
               FROM tbl_cont_catalogo c5
              WHERE ("substring"(c1.cuenta::text, 1, 13) || '000000'::text) = c5.cuenta::text))::text)) || '/'::text) || c1.nombre::text)::character varying
            WHEN getlevelaccount(c1.cuenta) = 6 THEN ((((((((((((( SELECT c2.nombre
               FROM tbl_cont_catalogo c2
              WHERE ("substring"(c1.cuenta::text, 1, 4) || '000000000000000'::text) = c2.cuenta::text))::text) || '/'::text) || ((( SELECT c3.nombre
               FROM tbl_cont_catalogo c3
              WHERE ("substring"(c1.cuenta::text, 1, 7) || '000000000000'::text) = c3.cuenta::text))::text)) || '/'::text) || ((( SELECT c4.nombre
               FROM tbl_cont_catalogo c4
              WHERE ("substring"(c1.cuenta::text, 1, 10) || '000000000'::text) = c4.cuenta::text))::text)) || '/'::text) || ((( SELECT c5.nombre
               FROM tbl_cont_catalogo c5
              WHERE ("substring"(c1.cuenta::text, 1, 13) || '000000'::text) = c5.cuenta::text))::text)) || '/'::text) || ((( SELECT c6.nombre
               FROM tbl_cont_catalogo c6
              WHERE ("substring"(c1.cuenta::text, 1, 16) || '000'::text) = c6.cuenta::text))::text)) || '/'::text) || c1.nombre::text)::character varying
            ELSE ''::character varying
        END AS nombre, bc.status, d1.saldoinicial AS cc_saldoini, d1.saldofinal AS cc_saldofin, getcliproslds(bc.id_tipo, bc.id_clave, per.mes, per.ano) AS saldofin
   FROM tbl_provee_provee bc
   JOIN tbl_cont_catalogo c1 ON bc.id_cc = c1.cuenta
   JOIN tbl_cont_catalogo_detalle d1 ON bc.id_cc = d1.cuenta
   JOIN tbl_cont_catalogo_periodos per ON per.mes = d1.mes AND per.ano = d1.ano;
  


--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_provee_saldos_detalles AS 
 SELECT sal.mes, sal.ano, bc.id_entidad, bc.id_tipo, bc.id_clave, bc.status, COALESCE(( SELECT tbl_provee_cxp.id_cp
           FROM tbl_provee_cxp
          WHERE tbl_provee_cxp.id_tipocp = 'ALT'::bpchar AND tbl_provee_cxp.id_concepto = 0 AND tbl_provee_cxp.id_tipoclipro = bc.id_tipo AND tbl_provee_cxp.id_claveclipro = bc.id_clave AND date_part('Month'::text, tbl_provee_cxp.fecha) = sal.mes::double precision AND date_part('Year'::text, tbl_provee_cxp.fecha) = sal.ano::double precision AND tbl_provee_cxp.moneda = sal.id_moneda
         LIMIT 1), (-1)) AS id_cxp, COALESCE(( SELECT tbl_provee_cxp.concepto
           FROM tbl_provee_cxp
          WHERE tbl_provee_cxp.id_tipocp = 'ALT'::bpchar AND tbl_provee_cxp.id_concepto = 0 AND tbl_provee_cxp.id_tipoclipro = bc.id_tipo AND tbl_provee_cxp.id_claveclipro = bc.id_clave AND date_part('Month'::text, tbl_provee_cxp.fecha) = sal.mes::double precision AND date_part('Year'::text, tbl_provee_cxp.fecha) = sal.ano::double precision AND tbl_provee_cxp.moneda = sal.id_moneda
         LIMIT 1), 'N/A'::character varying)::text AS descripcion, sal.id_moneda, mon.simbolo, COALESCE(( SELECT tbl_provee_cxp.tc
           FROM tbl_provee_cxp
          WHERE tbl_provee_cxp.id_tipocp = 'ALT'::bpchar AND tbl_provee_cxp.id_concepto = 0 AND tbl_provee_cxp.id_tipoclipro = bc.id_tipo AND tbl_provee_cxp.id_claveclipro = bc.id_clave AND date_part('Month'::text, tbl_provee_cxp.fecha) = sal.mes::double precision AND date_part('Year'::text, tbl_provee_cxp.fecha) = sal.ano::double precision AND tbl_provee_cxp.moneda = sal.id_moneda
         LIMIT 1), mon.tc) AS tc, sal.saldoini, sal.saldofin
   FROM tbl_provee_provee bc
   JOIN tbl_provee_saldos sal ON bc.id_tipo = sal.id_tipo AND bc.id_clave = sal.id_clave
   JOIN tbl_cont_monedas mon ON sal.id_moneda = mon.clave;



--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_provee_saldos_detalles_conapl AS 
 SELECT s.mes, s.ano, s.id_entidad, s.id_tipo, s.id_clave, s.status, s.id_cxp, s.descripcion, s.id_moneda, s.simbolo, s.tc, s.saldoini, s.saldofin, 
        CASE
            WHEN s.id_cxp <> (-1) THEN ( SELECT count(*) AS count
               FROM tbl_provee_cxp
              WHERE tbl_provee_cxp.id_aplicacion = s.id_cxp AND tbl_provee_cxp.id_cp <> s.id_cxp)
            ELSE (-1)::bigint
        END AS id_aplicacion
   FROM view_provee_saldos_detalles s;
 

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_provee_iniciar_sdos(_mes smallint, _ano smallint)
  RETURNS SETOF record AS
$BODY$
DECLARE 	
	_err int; _result varchar(254); _ID_CXP integer; _CXP RECORD;
BEGIN
	_err := 0;
	_result := 'Los saldos iniciales de proveedores se capturaron satisfactoriamente.';

	IF _Mes is null AND _Ano is null
	THEN
		_err := 3;
		_result := 'ERROR: El mes y a√±o mandados parecen ser nulos. No se pueden iniciar los saldos contables';
	END IF;
			
	IF _err = 0
	THEN
		CREATE LOCAL TEMPORARY TABLE _TMP_INICIOS_INI (
			Cuenta character(19) NOT NULL,
			Saldo numeric(19, 4) NOT NULL 
		);

		--Actualiza cuentas por pagar
		FOR _CXP IN ( select * from _TMP_INICIOS_PROVEE_CXP_AGREGAR order by id_cxp )
		LOOP
			INSERT INTO tbl_provee_cxp(id_cp, id_entidad, id_tipocp, fecha, id_tipoclipro, id_claveclipro, id_concepto, concepto, id_tipodocorig, id_clavedocorig, moneda, tc, total, saldo, vencimiento, ref, status, id_pol, id_aplicacion, id_pagobancaj)
			VALUES (default, _cxp.id_entidad, 'ALT', getfecha(1,_mes,_ano), _cxp.id_tipo, _cxp.id_clave, '0', _cxp.concepto, null, null, _cxp.id_moneda, _cxp.tc, _cxp.total, _cxp.total, getfecha(1,_mes,_ano),null,'G',null,null,null)
			RETURNING currval(pg_get_serial_sequence('TBL_PROVEE_CXP', 'id_cp')) INTO _id_cxp;
			
			UPDATE  TBL_PROVEE_CXP
			SET ID_Aplicacion = _ID_CXP
			WHERE ID_CP = _ID_CXP; 

			-- Actualiza los saldos finales
			UPDATE TBL_PROVEE_SALDOS
			SET	SaldoFin = _cxp.total
			WHERE Mes = _Mes and Ano = _Ano and ID_Tipo = _CXP.id_tipo and ID_Clave = _cxp.id_clave and  ID_Moneda = _cxp.id_moneda;

			INSERT INTO _TMP_INICIOS_INI(Cuenta,Saldo)
			VALUES (_cxp.cc, _cxp.totalpesos);
		END LOOP;

		FOR _CXP IN ( select * from _TMP_INICIOS_PROVEE_CXP_CAMBIAR order by id_cxp )
		LOOP
			UPDATE tbl_provee_cxp
			SET id_entidad = _cxp.id_entidad, fecha = getfecha(1,_mes,_ano), id_tipoclipro = _cxp.id_tipo, id_claveclipro = _cxp.id_clave, concepto = _cxp.concepto, moneda = _cxp.id_moneda, tc =_cxp.tc, total = _cxp.total, saldo = _cxp.total, vencimiento = getfecha(1,_mes,_ano)
			WHERE ID_CP = _CXP.ID_CXP; 

			-- Actualiza los saldos finales
			UPDATE TBL_PROVEE_SALDOS
			SET	SaldoFin = _cxp.total
			WHERE Mes = _Mes and Ano = _Ano and ID_Tipo = _CXP.id_tipo and ID_Clave = _cxp.id_clave and  ID_Moneda = _cxp.id_moneda;

			INSERT INTO _TMP_INICIOS_INI(Cuenta,Saldo)
			VALUES (_cxp.cc, _cxp.totalpesos);
		END LOOP;

		FOR _CXP IN ( select * from _TMP_INICIOS_PROVEE_CXP_ELIMINAR order by id_cxp )
		LOOP
			DELETE FROM tbl_provee_cxp
			WHERE ID_CP = _CXP.ID_CXP; 

			-- Actualiza los saldos finales
			UPDATE TBL_PROVEE_SALDOS
			SET	SaldoFin = 0.00
			WHERE Mes = _Mes and Ano = _Ano and ID_Tipo = _CXP.id_tipo and ID_Clave = _cxp.id_clave and  ID_Moneda = _cxp.id_moneda;

			INSERT INTO _TMP_INICIOS_INI(Cuenta,Saldo)
			VALUES (_cxp.cc, 0.00);
		END LOOP;
		
		FOR _CXP IN ( select * from _TMP_INICIOS_PROVEE_CXP_SC order by id_cxp )
		LOOP
			INSERT INTO _TMP_INICIOS_INI(Cuenta,Saldo)
			VALUES (_cxp.cc, _cxp.totalpesos);
		END LOOP;
		
		IF (select VEntero from TBL_VARIABLES where ID_Variable = 'INISLDS') = 2
		THEN
			CREATE LOCAL TEMPORARY TABLE _TMP_INICIOS_CONT (
				Cuenta character(19) NOT NULL,
				Saldo numeric(19, 4) NOT NULL 
			);
		
			--Inserta en la tabla temporal de saldos sumando saldos que apuntan a la misma cuenta contable
			INSERT INTO _TMP_INICIOS_CONT( Cuenta, Saldo)
			SELECT ini.Cuenta, sum(ini.Saldo)
			FROM _TMP_INICIOS_INI ini
			GROUP BY ini.Cuenta;
			
			UPDATE TBL_CONT_CATALOGO_DETALLE
			SET	SaldoFinal = -tm.Saldo
			FROM _TMP_INICIOS_CONT tm, TBL_CONT_CATALOGO_DETALLE c
			WHERE tm.Cuenta = c.Cuenta and c.Mes = _Mes and c.Ano = _Ano and 
				c.Cuenta = TBL_CONT_CATALOGO_DETALLE.Cuenta and c.Mes = TBL_CONT_CATALOGO_DETALLE.Mes and c.Ano = TBL_CONT_CATALOGO_DETALLE.Ano;

			_result = _result || '<br>Los saldos de cuentas contables que apuntan estos proveedores se actualizaron conforme su auxiliar';
			DROP TABLE  _TMP_INICIOS_CONT;
		END IF;
		
		DROP TABLE  _TMP_INICIOS_INI;

	END IF;
	
	RETURN QUERY 
	SELECT _err as err, _result as res, (cast(_Mes as varchar) || '/' || cast(_ano as varchar))::varchar as clave;

END
$BODY$
  LANGUAGE plpgsql;

--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_client_saldos AS 
 SELECT per.mes, per.ano, bc.id_entidad, bc.id_tipo, bc.id_clave, bc.id_numero, bc.nombre AS cliente, bc.id_cc, 
        CASE
            WHEN getlevelaccount(c1.cuenta) = 1 THEN c1.nombre
            WHEN getlevelaccount(c1.cuenta) = 2 THEN ((((( SELECT c2.nombre
               FROM tbl_cont_catalogo c2
              WHERE ("substring"(c1.cuenta::text, 1, 4) || '000000000000000'::text) = c2.cuenta::text))::text) || '/'::text) || c1.nombre::text)::character varying
            WHEN getlevelaccount(c1.cuenta) = 3 THEN ((((((( SELECT c2.nombre
               FROM tbl_cont_catalogo c2
              WHERE ("substring"(c1.cuenta::text, 1, 4) || '000000000000000'::text) = c2.cuenta::text))::text) || '/'::text) || ((( SELECT c3.nombre
               FROM tbl_cont_catalogo c3
              WHERE ("substring"(c1.cuenta::text, 1, 7) || '000000000000'::text) = c3.cuenta::text))::text)) || '/'::text) || c1.nombre::text)::character varying
            WHEN getlevelaccount(c1.cuenta) = 4 THEN ((((((((( SELECT c2.nombre
               FROM tbl_cont_catalogo c2
              WHERE ("substring"(c1.cuenta::text, 1, 4) || '000000000000000'::text) = c2.cuenta::text))::text) || '/'::text) || ((( SELECT c3.nombre
               FROM tbl_cont_catalogo c3
              WHERE ("substring"(c1.cuenta::text, 1, 7) || '000000000000'::text) = c3.cuenta::text))::text)) || '/'::text) || ((( SELECT c4.nombre
               FROM tbl_cont_catalogo c4
              WHERE ("substring"(c1.cuenta::text, 1, 10) || '000000000'::text) = c4.cuenta::text))::text)) || '/'::text) || c1.nombre::text)::character varying
            WHEN getlevelaccount(c1.cuenta) = 5 THEN ((((((((((( SELECT c2.nombre
               FROM tbl_cont_catalogo c2
              WHERE ("substring"(c1.cuenta::text, 1, 4) || '000000000000000'::text) = c2.cuenta::text))::text) || '/'::text) || ((( SELECT c3.nombre
               FROM tbl_cont_catalogo c3
              WHERE ("substring"(c1.cuenta::text, 1, 7) || '000000000000'::text) = c3.cuenta::text))::text)) || '/'::text) || ((( SELECT c4.nombre
               FROM tbl_cont_catalogo c4
              WHERE ("substring"(c1.cuenta::text, 1, 10) || '000000000'::text) = c4.cuenta::text))::text)) || '/'::text) || ((( SELECT c5.nombre
               FROM tbl_cont_catalogo c5
              WHERE ("substring"(c1.cuenta::text, 1, 13) || '000000'::text) = c5.cuenta::text))::text)) || '/'::text) || c1.nombre::text)::character varying
            WHEN getlevelaccount(c1.cuenta) = 6 THEN ((((((((((((( SELECT c2.nombre
               FROM tbl_cont_catalogo c2
              WHERE ("substring"(c1.cuenta::text, 1, 4) || '000000000000000'::text) = c2.cuenta::text))::text) || '/'::text) || ((( SELECT c3.nombre
               FROM tbl_cont_catalogo c3
              WHERE ("substring"(c1.cuenta::text, 1, 7) || '000000000000'::text) = c3.cuenta::text))::text)) || '/'::text) || ((( SELECT c4.nombre
               FROM tbl_cont_catalogo c4
              WHERE ("substring"(c1.cuenta::text, 1, 10) || '000000000'::text) = c4.cuenta::text))::text)) || '/'::text) || ((( SELECT c5.nombre
               FROM tbl_cont_catalogo c5
              WHERE ("substring"(c1.cuenta::text, 1, 13) || '000000'::text) = c5.cuenta::text))::text)) || '/'::text) || ((( SELECT c6.nombre
               FROM tbl_cont_catalogo c6
              WHERE ("substring"(c1.cuenta::text, 1, 16) || '000'::text) = c6.cuenta::text))::text)) || '/'::text) || c1.nombre::text)::character varying
            ELSE ''::character varying
        END AS nombre, bc.status, d1.saldoinicial AS cc_saldoini, d1.saldofinal AS cc_saldofin, getcliproslds(bc.id_tipo, bc.id_clave, per.mes::integer, per.ano) AS saldofin
   FROM tbl_client_client bc
   JOIN tbl_cont_catalogo c1 ON bc.id_cc = c1.cuenta
   JOIN tbl_cont_catalogo_detalle d1 ON bc.id_cc = d1.cuenta
   JOIN tbl_cont_catalogo_periodos per ON per.mes = d1.mes AND per.ano = d1.ano;



--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_client_saldos_detalles AS 
 SELECT sal.mes, sal.ano, bc.id_entidad, bc.id_tipo, bc.id_clave, bc.status, COALESCE(( SELECT tbl_client_cxc.id_cp
           FROM tbl_client_cxc
          WHERE tbl_client_cxc.id_tipocp = 'ALT'::bpchar AND tbl_client_cxc.id_concepto = 0 AND tbl_client_cxc.id_tipoclipro = bc.id_tipo AND tbl_client_cxc.id_claveclipro = bc.id_clave AND date_part('Month'::text, tbl_client_cxc.fecha) = sal.mes::double precision AND date_part('Year'::text, tbl_client_cxc.fecha) = sal.ano::double precision AND tbl_client_cxc.moneda = sal.id_moneda
         LIMIT 1), (-1)) AS id_cxc, COALESCE(( SELECT tbl_client_cxc.concepto
           FROM tbl_client_cxc
          WHERE tbl_client_cxc.id_tipocp = 'ALT'::bpchar AND tbl_client_cxc.id_concepto = 0 AND tbl_client_cxc.id_tipoclipro = bc.id_tipo AND tbl_client_cxc.id_claveclipro = bc.id_clave AND date_part('Month'::text, tbl_client_cxc.fecha) = sal.mes::double precision AND date_part('Year'::text, tbl_client_cxc.fecha) = sal.ano::double precision AND tbl_client_cxc.moneda = sal.id_moneda
         LIMIT 1), 'N/A'::character varying)::text AS descripcion, sal.id_moneda, mon.simbolo, COALESCE(( SELECT tbl_client_cxc.tc
           FROM tbl_client_cxc
          WHERE tbl_client_cxc.id_tipocp = 'ALT'::bpchar AND tbl_client_cxc.id_concepto = 0 AND tbl_client_cxc.id_tipoclipro = bc.id_tipo AND tbl_client_cxc.id_claveclipro = bc.id_clave AND date_part('Month'::text, tbl_client_cxc.fecha) = sal.mes::double precision AND date_part('Year'::text, tbl_client_cxc.fecha) = sal.ano::double precision AND tbl_client_cxc.moneda = sal.id_moneda
         LIMIT 1), mon.tc) AS tc, sal.saldoini, sal.saldofin
   FROM tbl_client_client bc
   JOIN tbl_client_saldos sal ON bc.id_tipo = sal.id_tipo AND bc.id_clave = sal.id_clave
   JOIN tbl_cont_monedas mon ON sal.id_moneda = mon.clave;
   


--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_client_saldos_detalles_conapl AS 
 SELECT s.mes, s.ano, s.id_entidad, s.id_tipo, s.id_clave, s.status, s.id_cxc, s.descripcion, s.id_moneda, s.simbolo, s.tc, s.saldoini, s.saldofin, 
        CASE
            WHEN s.id_cxc <> (-1) THEN ( SELECT count(*) AS count
               FROM tbl_client_cxc
              WHERE tbl_client_cxc.id_aplicacion = s.id_cxc AND tbl_client_cxc.id_cp <> s.id_cxc)
            ELSE (-1)::bigint
        END AS id_aplicacion
   FROM view_client_saldos_detalles s;

  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_client_iniciar_sdos(_mes smallint, _ano smallint)
  RETURNS SETOF record AS
$BODY$
DECLARE 	
	_err int; _result varchar(254); _ID_CXC integer; _CXC RECORD;
BEGIN
	_err := 0;
	_result := 'Los saldos iniciales de clientes se capturaron satisfactoriamente.';

	IF _Mes is null AND _Ano is null
	THEN
		_err := 3;
		_result := 'ERROR: El mes y a√±o mandados parecen ser nulos. No se pueden iniciar los saldos contables';
	END IF;
			
	IF _err = 0
	THEN
		CREATE LOCAL TEMPORARY TABLE _TMP_INICIOS_INI (
			Cuenta character(19) NOT NULL,
			Saldo numeric(19, 4) NOT NULL 
		);

		--Actualiza cuentas por cobrar
		FOR _CXC IN ( select * from _TMP_INICIOS_CLIENT_CXC_AGREGAR order by id_CXC )
		LOOP
			INSERT INTO tbl_client_cxc(id_cp, id_entidad, id_tipocp, fecha, id_tipoclipro, id_claveclipro, id_concepto, concepto, id_tipodocorig, id_clavedocorig, moneda, tc, total, saldo, vencimiento, ref, status, id_pol, id_aplicacion, id_pagobancaj)
			VALUES (default, _CXC.id_entidad, 'ALT', getfecha(1,_mes,_ano), _CXC.id_tipo, _CXC.id_clave, '0', _CXC.concepto, null, null, _CXC.id_moneda, _CXC.tc, _CXC.total, _CXC.total, getfecha(1,_mes,_ano),null,'G',null,null,null)
			RETURNING currval(pg_get_serial_sequence('TBL_CLIENT_CXC', 'id_cp')) INTO _id_CXC;
			
			UPDATE  TBL_CLIENT_CXC
			SET ID_Aplicacion = _ID_CXC
			WHERE ID_CP = _ID_CXC; 

			-- Actualiza los saldos finales
			UPDATE TBL_CLIENT_SALDOS
			SET	SaldoFin = _CXC.total
			WHERE Mes = _Mes and Ano = _Ano and ID_Tipo = _CXC.id_tipo and ID_Clave = _CXC.id_clave and  ID_Moneda = _CXC.id_moneda;

			INSERT INTO _TMP_INICIOS_INI(Cuenta,Saldo)
			VALUES (_CXC.cc, _CXC.totalpesos);
		END LOOP;

		FOR _CXC IN ( select * from _TMP_INICIOS_CLIENT_CXC_CAMBIAR order by id_CXC )
		LOOP
			UPDATE tbl_client_cxc
			SET id_entidad = _CXC.id_entidad, fecha = getfecha(1,_mes,_ano), id_tipoclipro = _CXC.id_tipo, id_claveclipro = _CXC.id_clave, concepto = _CXC.concepto, moneda = _CXC.id_moneda, tc =_CXC.tc, total = _CXC.total, saldo = _CXC.total, vencimiento = getfecha(1,_mes,_ano)
			WHERE ID_CP = _CXC.ID_CXC; 

			-- Actualiza los saldos finales
			UPDATE TBL_CLIENT_SALDOS
			SET	SaldoFin = _CXC.total
			WHERE Mes = _Mes and Ano = _Ano and ID_Tipo = _CXC.id_tipo and ID_Clave = _CXC.id_clave and  ID_Moneda = _CXC.id_moneda;

			INSERT INTO _TMP_INICIOS_INI(Cuenta,Saldo)
			VALUES (_CXC.cc, _CXC.totalpesos);
		END LOOP;

		FOR _CXC IN ( select * from _TMP_INICIOS_CLIENT_CXC_ELIMINAR order by id_cxc )
		LOOP
			DELETE FROM tbl_client_cxc
			WHERE ID_CP = _CXC.ID_CXC; 

			-- Actualiza los saldos finales
			UPDATE TBL_CLIENT_SALDOS
			SET	SaldoFin = 0.00
			WHERE Mes = _Mes and Ano = _Ano and ID_Tipo = _CXC.id_tipo and ID_Clave = _CXC.id_clave and  ID_Moneda = _CXC.id_moneda;

			INSERT INTO _TMP_INICIOS_INI(Cuenta,Saldo)
			VALUES (_CXC.cc, 0.00);
		END LOOP;

		FOR _CXC IN ( select * from _TMP_INICIOS_CLIENT_CXC_SC order by id_CXC )
		LOOP
			INSERT INTO _TMP_INICIOS_INI(Cuenta,Saldo)
			VALUES (_CXC.cc, _CXC.totalpesos);
		END LOOP;

		IF (select VEntero from TBL_VARIABLES where ID_Variable = 'INISLDS') = 2
		THEN
			CREATE LOCAL TEMPORARY TABLE _TMP_INICIOS_CONT (
				Cuenta character(19) NOT NULL,
				Saldo numeric(19, 4) NOT NULL 
			);
		
			--Inserta en la tabla temporal de saldos sumando saldos que apuntan a la misma cuenta contable
			INSERT INTO _TMP_INICIOS_CONT( Cuenta, Saldo)
			SELECT ini.Cuenta, sum(ini.Saldo)
			FROM _TMP_INICIOS_INI ini
			GROUP BY ini.Cuenta;
			
			UPDATE TBL_CONT_CATALOGO_DETALLE
			SET	SaldoFinal = tm.Saldo
			FROM _TMP_INICIOS_CONT tm, TBL_CONT_CATALOGO_DETALLE c
			WHERE tm.Cuenta = c.Cuenta and c.Mes = _Mes and c.Ano = _Ano and 
				c.Cuenta = TBL_CONT_CATALOGO_DETALLE.Cuenta and c.Mes = TBL_CONT_CATALOGO_DETALLE.Mes and c.Ano = TBL_CONT_CATALOGO_DETALLE.Ano;

			_result = _result || '<br>Los saldos de cuentas contables que apuntan estos clientes se actualizaron conforme su auxiliar';
			DROP TABLE  _TMP_INICIOS_CONT;
		END IF;
		
		DROP TABLE  _TMP_INICIOS_INI;

	END IF;
	
	RETURN QUERY 
	SELECT _err as err, _result as res, (cast(_Mes as varchar) || '/' || cast(_ano as varchar))::varchar as clave;

END
$BODY$
  LANGUAGE plpgsql;   
   


--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_cont_polizas_impcab AS 
 SELECT p.id, p.tipo, p.numero AS num, p.fecha, p.concepto, 1 AS id_moneda, ( SELECT tbl_cont_monedas.moneda
           FROM tbl_cont_monedas
          WHERE tbl_cont_monedas.clave = 1) AS moneda, ( SELECT sum(tbl_cont_polizas_detalle.debe) AS sum
           FROM tbl_cont_polizas_detalle
          WHERE tbl_cont_polizas_detalle.id = p.id) AS debe, ( SELECT sum(tbl_cont_polizas_detalle.haber) AS sum
           FROM tbl_cont_polizas_detalle
          WHERE tbl_cont_polizas_detalle.id = p.id) AS haber, p.ref, p.status AS estatus, p.id_clasificacion, c.ficha AS clasificacion, c.descripcion AS clasificaciondesc
   FROM tbl_cont_polizas p
   JOIN tbl_cont_polizas_clasificaciones c ON p.id_clasificacion::text = c.id_clasificacion::text;
  



--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_cont_polizas_impdet AS 
 SELECT p.id, p.part, p.cuenta AS numero, 
        CASE
            WHEN getlevelaccount(c1.cuenta) = 1 THEN c1.nombre
            WHEN getlevelaccount(c1.cuenta) = 2 THEN ((((( SELECT c2.nombre
               FROM tbl_cont_catalogo c2
              WHERE ("substring"(c1.cuenta::text, 1, 4) || '000000000000000'::text) = c2.cuenta::text))::text) || '/'::text) || c1.nombre::text)::character varying
            WHEN getlevelaccount(c1.cuenta) = 3 THEN ((((((( SELECT c2.nombre
               FROM tbl_cont_catalogo c2
              WHERE ("substring"(c1.cuenta::text, 1, 4) || '000000000000000'::text) = c2.cuenta::text))::text) || '/'::text) || ((( SELECT c3.nombre
               FROM tbl_cont_catalogo c3
              WHERE ("substring"(c1.cuenta::text, 1, 7) || '000000000000'::text) = c3.cuenta::text))::text)) || '/'::text) || c1.nombre::text)::character varying
            WHEN getlevelaccount(c1.cuenta) = 4 THEN ((((((((( SELECT c2.nombre
               FROM tbl_cont_catalogo c2
              WHERE ("substring"(c1.cuenta::text, 1, 4) || '000000000000000'::text) = c2.cuenta::text))::text) || '/'::text) || ((( SELECT c3.nombre
               FROM tbl_cont_catalogo c3
              WHERE ("substring"(c1.cuenta::text, 1, 7) || '000000000000'::text) = c3.cuenta::text))::text)) || '/'::text) || ((( SELECT c4.nombre
               FROM tbl_cont_catalogo c4
              WHERE ("substring"(c1.cuenta::text, 1, 10) || '000000000'::text) = c4.cuenta::text))::text)) || '/'::text) || c1.nombre::text)::character varying
            WHEN getlevelaccount(c1.cuenta) = 5 THEN ((((((((((( SELECT c2.nombre
               FROM tbl_cont_catalogo c2
              WHERE ("substring"(c1.cuenta::text, 1, 4) || '000000000000000'::text) = c2.cuenta::text))::text) || '/'::text) || ((( SELECT c3.nombre
               FROM tbl_cont_catalogo c3
              WHERE ("substring"(c1.cuenta::text, 1, 7) || '000000000000'::text) = c3.cuenta::text))::text)) || '/'::text) || ((( SELECT c4.nombre
               FROM tbl_cont_catalogo c4
              WHERE ("substring"(c1.cuenta::text, 1, 10) || '000000000'::text) = c4.cuenta::text))::text)) || '/'::text) || ((( SELECT c5.nombre
               FROM tbl_cont_catalogo c5
              WHERE ("substring"(c1.cuenta::text, 1, 13) || '000000'::text) = c5.cuenta::text))::text)) || '/'::text) || c1.nombre::text)::character varying
            WHEN getlevelaccount(c1.cuenta) = 6 THEN ((((((((((((( SELECT c2.nombre
               FROM tbl_cont_catalogo c2
              WHERE ("substring"(c1.cuenta::text, 1, 4) || '000000000000000'::text) = c2.cuenta::text))::text) || '/'::text) || ((( SELECT c3.nombre
               FROM tbl_cont_catalogo c3
              WHERE ("substring"(c1.cuenta::text, 1, 7) || '000000000000'::text) = c3.cuenta::text))::text)) || '/'::text) || ((( SELECT c4.nombre
               FROM tbl_cont_catalogo c4
              WHERE ("substring"(c1.cuenta::text, 1, 10) || '000000000'::text) = c4.cuenta::text))::text)) || '/'::text) || ((( SELECT c5.nombre
               FROM tbl_cont_catalogo c5
              WHERE ("substring"(c1.cuenta::text, 1, 13) || '000000'::text) = c5.cuenta::text))::text)) || '/'::text) || ((( SELECT c6.nombre
               FROM tbl_cont_catalogo c6
              WHERE ("substring"(c1.cuenta::text, 1, 16) || '000'::text) = c6.cuenta::text))::text)) || '/'::text) || c1.nombre::text)::character varying
            ELSE NULL::character varying
        END AS nombre, p.concepto, p.moneda, p.parcial, p.tc, p.debe, p.haber
   FROM tbl_cont_polizas_detalle p
   JOIN tbl_cont_catalogo c1 ON p.cuenta = c1.cuenta;

insert into TBL_FORMATOS
values('FSI-POLZ','Formato de p√≥liza','CONT_POLIZAS');

insert into tbl_formatos_det
values('FSI-POLZ',1,'FSI_CAB','',null,null,null,259.50,'S','000000',null,null);
insert into tbl_formatos_det
values('FSI-POLZ',2,'FSI_VENTANA','',null,null,800.00,600.00,'S','000000',null,null);
insert into tbl_formatos_det
values('FSI-POLZ',3,'FSI_DET','50',null,60.00,null,2.50,'S','000000',null,null);
insert into tbl_formatos_det
values('FSI-POLZ',4,'FSI_IMPTIT','font-family: Arial, Helvetica, sans-serif; font-size: 14pt; font-style: italic; font-weight: bold; ',null,null,null,null,'S','000000',null,null);
insert into tbl_formatos_det
values('FSI-POLZ',5,'FSI_IMPETQ','font-family: Arial, Helvetica, sans-serif; font-size: 10pt; font-style: normal; font-weight: bold; ',null,null,null,null,'S','000000',null,null);
insert into tbl_formatos_det
values('FSI-POLZ',6,'FSI_IMPCAB','font-family: Arial, Helvetica, sans-serif; font-size: 8pt; font-style: normal; font-weight: bold; ',null,null,null,null,'S','000000',null,null);
insert into tbl_formatos_det
values('FSI-POLZ',7,'FSI_IMPDET','font-family: Arial, Helvetica, sans-serif; font-size: 6pt; font-style: normal; font-weight: bold; ',null,null,null,null,'S','000000',null,null);
insert into tbl_formatos_det
values('FSI-POLZ',8,'FSI_TITULO','P√≥liza',0.00,0.00,190.00,20.00,'C','000000','center','middle');
insert into tbl_formatos_det
values('FSI-POLZ',9,'FSI_ETIQUETA','Tipo de p√≥liza:',0.00,20.00,50.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-POLZ',10,'tipo','general',50.00,20.00,45.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-POLZ',11,'FSI_ETIQUETA','No de P√≥liza:',100.00,20.00,50.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-POLZ',12,'num',' |0',150.00,20.00,45.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-POLZ',13,'FSI_ETIQUETA','Fecha:',0.00,30.00,50.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-POLZ',14,'fecha','dd/MM/yyyy',50.00,30.00,45.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-POLZ',15,'FSI_ETIQUETA','Clasificaci√≥n:',100.00,30.00,50.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-POLZ',16,'clasificaciondesc','general',150.00,30.00,45.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-POLZ',17,'FSI_ETIQUETA','CONCEPTO:',0.00,40.00,40.00,5.00,'C','000000','left','top');
insert into tbl_formatos_det
values('FSI-POLZ',18,'concepto','general',40.00,40.00,150.00,10.00,'C','000000','left','top');
insert into tbl_formatos_det
values('FSI-POLZ',19,'FSI_ETIQUETA','N√∫mero',5.00,50.00,30.00,10.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-POLZ',20,'FSI_ETIQUETA','Cuenta',35.00,50.00,75.00,10.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-POLZ',21,'FSI_ETIQUETA','Concepto',110.00,50.00,50.00,10.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-POLZ',22,'FSI_ETIQUETA','Debe',160.00,50.00,20.00,10.00,'C','000000','right','middle');
insert into tbl_formatos_det
values('FSI-POLZ',23,'FSI_ETIQUETA','Haber',180.00,50.00,20.00,10.00,'C','000000','right','middle');
insert into tbl_formatos_det
values('FSI-POLZ',24,'FSI_ETIQUETA','TOTALES:',0.00,190.00,160.00,5.00,'C','000000','right','middle');
insert into tbl_formatos_det
values('FSI-POLZ',25,'debe',',|.|2|0',160.00,190.00,20.00,5.00,'C','000000','right','middle');
insert into tbl_formatos_det
values('FSI-POLZ',26,'haber',',|.|2|0',180.00,190.00,20.00,5.00,'C','000000','right','middle');
insert into tbl_formatos_det
values('FSI-POLZ',27,'FSI_LH','t_negra',0.00,50.00,200.00,0.20,'C','000000','center','middle');
insert into tbl_formatos_det
values('FSI-POLZ',28,'FSI_LH','t_negra',0.00,185.00,200.00,0.20,'C','000000','center','middle');
insert into tbl_formatos_det
values('FSI-POLZ',29,'part',' |0',0.00,0.00,5.00,2.50,'D','000000','center','middle');
insert into tbl_formatos_det
values('FSI-POLZ',30,'numero','cuenta',5.00,0.00,30.00,2.50,'D','000000','left','middle');
insert into tbl_formatos_det
values('FSI-POLZ',31,'nombre','general',35.00,0.00,75.00,2.50,'D','000000','left','middle');
insert into tbl_formatos_det
values('FSI-POLZ',32,'concepto','general',110.00,0.00,50.00,2.50,'D','000000','left','middle');
insert into tbl_formatos_det
values('FSI-POLZ',33,'debe',',|.|2|0',160.00,0.00,20.00,2.50,'D','000000','right','middle');
insert into tbl_formatos_det
values('FSI-POLZ',34,'haber',',|.|2|0',180.00,0.00,20.00,2.50,'D','000000','right','middle');




--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_bancos_movimientos_impcab AS 
 SELECT m.id, m.clave, c.cuenta, c.descripcion, m.num, m.fecha, m.concepto, m.beneficiario, m.doc, m.deposito, m.retiro, m.saldo, m.estatus, m.id_moneda, ( SELECT tbl_cont_monedas.moneda
           FROM tbl_cont_monedas
          WHERE tbl_cont_monedas.clave = m.id_moneda) AS moneda, m.ref, m.pol_id, 
        CASE
            WHEN m.pol_id IS NULL THEN ''::text
            ELSE ( SELECT (tbl_cont_polizas.tipo::text || ' - '::text) || tbl_cont_polizas.numero::character varying::text
               FROM tbl_cont_polizas
              WHERE tbl_cont_polizas.id = m.pol_id)
        END AS pol, m.cons AS mc, m.estrans, 
        CASE
            WHEN m.pol_id IS NULL THEN 0::numeric
            ELSE ( SELECT view_cont_polizas_modulo.debe
               FROM view_cont_polizas_modulo
              WHERE view_cont_polizas_modulo.id = m.pol_id)
        END AS debe, 
        CASE
            WHEN m.pol_id IS NULL THEN 0::numeric
            ELSE ( SELECT view_cont_polizas_modulo.haber
               FROM view_cont_polizas_modulo
              WHERE view_cont_polizas_modulo.id = m.pol_id)
        END AS haber, m.deposito - m.retiro AS total, m.tipomov AS tipo, 
        CASE
            WHEN m.tipomov = 'CHQ'::bpchar THEN m.doc
            ELSE m.referencia
        END AS tiporef
   FROM tbl_bancos_movimientos m
   JOIN tbl_bancos_cuentas c ON m.tipo = c.tipo AND m.clave = c.clave
  WHERE m.tipo = 0;

  
INSERT INTO TBL_FORMATOS
VALUES('FSI-MBAN', 'Formato de cheque con p√≥liza integrada','BANCAJ_BANCOS');

insert into tbl_formatos_det
values('FSI-MBAN','1','FSI_CAB','',NULL,NULL,NULL,'259.50','S','000000',NULL,NULL);
insert into tbl_formatos_det
values('FSI-MBAN','2','FSI_VENTANA','',NULL,NULL,'800.00','450.00','S','000000',NULL,NULL);
insert into tbl_formatos_det
values('FSI-MBAN','3','FSI_DET','18',NULL,'125.00',NULL,'8.00','S','000000',NULL,NULL);
insert into tbl_formatos_det
values('FSI-MBAN','4','FSI_IMPTIT','font-family: Arial, Helvetica, sans-serif; font-size: 8pt; font-style: normal; font-weight: bold;',NULL,NULL,NULL,NULL,'S','000000',NULL,NULL);
insert into tbl_formatos_det
values('FSI-MBAN','5','FSI_IMPETQ','font-family: Arial, Helvetica, sans-serif; font-size: 8pt; font-style: normal; font-weight: bold;',NULL,NULL,NULL,NULL,'S','000000',NULL,NULL);
insert into tbl_formatos_det
values('FSI-MBAN','6','FSI_IMPCAB','font-family: Arial, Helvetica, sans-serif; font-size: 8pt; font-style: normal; font-weight: bold;',NULL,NULL,NULL,NULL,'S','000000',NULL,NULL);
insert into tbl_formatos_det
values('FSI-MBAN','7','FSI_IMPDET','font-family: Arial, Helvetica, sans-serif; font-size: 7pt; font-style: normal; font-weight: normal;',NULL,NULL,NULL,NULL,'S','000000',NULL,NULL);
insert into tbl_formatos_det
values('FSI-MBAN','8','concepto','general','.00','100.00','110.00','10.00','C','000000','left','top');
insert into tbl_formatos_det
values('FSI-MBAN','9','fecha','dd/MMM/yyyy','160.00','5.00','35.00','5.00','C','000000','center','top');
insert into tbl_formatos_det
values('FSI-MBAN','10','beneficiario','general','.00','25.00','130.00','5.00','C','000000','left','top');
insert into tbl_formatos_det
values('FSI-MBAN','11','debe',',|.|2|0','160.00','265.00','20.00','5.00','C','000000','right','top');
insert into tbl_formatos_det
values('FSI-MBAN','12','haber',',|.|2|0','185.00','265.00','20.00','5.00','C','000000','right','top');
insert into tbl_formatos_det
values('FSI-MBAN','13','retiro',',|.|2|0','160.00','25.00','35.00','5.00','C','000000','left','top');
insert into tbl_formatos_det
values('FSI-MBAN','14','retiro','LETRA','.00','34.00','180.00','5.00','C','000000','left','top');
insert into tbl_formatos_det
values('FSI-MBAN','15','doc','general','60.00','5.00','55.00','5.00','C','000000','center','top');
insert into tbl_formatos_det
values('FSI-MBAN','16','numero','cuenta','.00','.00','32.00','8.00','D','000000','left','top');
insert into tbl_formatos_det
values('FSI-MBAN','17','nombre','general','37.00','.00','53.00','8.00','D','000000','left','top');
insert into tbl_formatos_det
values('FSI-MBAN','18','concepto','general','90.00','.00','50.00','8.00','D','000000','left','top');
insert into tbl_formatos_det
values('FSI-MBAN','19','debe',',|.|2|1','160.00','.00','20.00','8.00','D','000000','right','top');
insert into tbl_formatos_det
values('FSI-MBAN','20','haber',',|.|2|1','185.00','.00','20.00','8.00','D','000000','right','top');

INSERT INTO TBL_FORMATOS
VALUES('FSI-MBAN2', 'Formato de cheque','BANCAJ_BANCOS');

insert into tbl_formatos_det
values('FSI-MBAN2','1','FSI_CAB','',NULL,NULL,NULL,'150.00','S','000000',NULL,NULL);
insert into tbl_formatos_det
values('FSI-MBAN2','2','FSI_VENTANA','',NULL,NULL,'800.00','450.00','S','000000',NULL,NULL);
insert into tbl_formatos_det
values('FSI-MBAN2','3','FSI_DET','250',NULL,'30.00',NULL,'7.00','S','000000',NULL,NULL);
insert into tbl_formatos_det
values('FSI-MBAN2','4','FSI_IMPTIT','font-family: Arial, Helvetica, sans-serif; font-size: 8pt; font-style: normal; font-weight: bold; ',NULL,NULL,NULL,NULL,'S','000000',NULL,NULL);
insert into tbl_formatos_det
values('FSI-MBAN2','5','FSI_IMPETQ','font-family: Arial, Helvetica, sans-serif; font-size: 8pt; font-style: italic; font-weight: bold; ',NULL,NULL,NULL,NULL,'S','000000',NULL,NULL);
insert into tbl_formatos_det
values('FSI-MBAN2','6','FSI_IMPCAB','font-family: Arial, Helvetica, sans-serif; font-size: 8pt; font-style: normal; font-weight: bold; ',NULL,NULL,NULL,NULL,'S','000000',NULL,NULL);
insert into tbl_formatos_det
values('FSI-MBAN2','7','FSI_IMPDET','font-family: Arial, Helvetica, sans-serif; font-size: 7pt; font-style: normal; font-weight: normal; ',NULL,NULL,NULL,NULL,'S','000000',NULL,NULL);
insert into tbl_formatos_det
values('FSI-MBAN2','8','fecha','dd/MMM/yyyy','105.00','69.30','35.00','5.00','C','000000','center','top');
insert into tbl_formatos_det
values('FSI-MBAN2','9','beneficiario','general','.00','83.30','105.00','5.00','C','000000','left','top');
insert into tbl_formatos_det
values('FSI-MBAN2','10','retiro',',|.|2|0','115.00','86.30','35.00','5.00','C','000000','center','top');
insert into tbl_formatos_det
values('FSI-MBAN2','11','retiro','LETRA','.00','91.30','145.00','5.00','C','000000','left','top');
insert into tbl_formatos_det
values('FSI-MBAN2','12','doc','general','40.00','67.30','43.00','5.00','C','000000','center','top');

insert into TBL_FORMATOS
values('FSI-MBAN3','Formato de movimiento bancario con su p√≥liza','BANCAJ_BANCOS');

insert into tbl_formatos_det
values('FSI-MBAN3',1,'FSI_CAB','',null,null,null,259.50,'S','000000',null,null);
insert into tbl_formatos_det
values('FSI-MBAN3',2,'FSI_VENTANA','',null,null,800.00,600.00,'S','000000',null,null);
insert into tbl_formatos_det
values('FSI-MBAN3',3,'FSI_DET','50',null,60.00,null,2.50,'S','000000',null,null);
insert into tbl_formatos_det
values('FSI-MBAN3',4,'FSI_IMPTIT','font-family: Arial, Helvetica, sans-serif; font-size: 14pt; font-style: italic; font-weight: bold; ',null,null,null,null,'S','000000',null,null);
insert into tbl_formatos_det
values('FSI-MBAN3',5,'FSI_IMPETQ','font-family: Arial, Helvetica, sans-serif; font-size: 10pt; font-style: normal; font-weight: bold; ',null,null,null,null,'S','000000',null,null);
insert into tbl_formatos_det
values('FSI-MBAN3',6,'FSI_IMPCAB','font-family: Arial, Helvetica, sans-serif; font-size: 8pt; font-style: normal; font-weight: bold; ',null,null,null,null,'S','000000',null,null);
insert into tbl_formatos_det
values('FSI-MBAN3',7,'FSI_IMPDET','font-family: Arial, Helvetica, sans-serif; font-size: 6pt; font-style: normal; font-weight: bold; ',null,null,null,null,'S','000000',null,null);
insert into tbl_formatos_det
values('FSI-MBAN3',8,'FSI_TITULO','Movimiento Bancario',0.00,0.00,190.00,20.00,'C','000000','center','middle');
insert into tbl_formatos_det
values('FSI-MBAN3',9,'FSI_ETIQUETA','Tipo de movimiento:',0.00,20.00,50.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-MBAN3',10,'tipo','general',50.00,20.00,20.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-MBAN3',11,'tiporef','general',70.00,20.00,30.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-MBAN3',12,'FSI_ETIQUETA','No de Movimiento:',100.00,20.00,50.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-MBAN3',13,'num',' |0',150.00,20.00,45.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-MBAN3',14,'FSI_ETIQUETA','Fecha:',0.00,30.00,50.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-MBAN3',15,'fecha','dd/MM/yyyy',50.00,30.00,45.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-MBAN3',16,'FSI_ETIQUETA','Total:',100.00,30.00,50.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-MBAN3',17,'total',',|.|2|0',150.00,30.00,45.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-MBAN3',18,'FSI_ETIQUETA','CONCEPTO:',0.00,40.00,40.00,5.00,'C','000000','left','top');
insert into tbl_formatos_det
values('FSI-MBAN3',19,'concepto','general',40.00,40.00,150.00,10.00,'C','000000','left','top');
insert into tbl_formatos_det
values('FSI-MBAN3',20,'FSI_ETIQUETA','N√∫mero',5.00,50.00,30.00,10.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-MBAN3',21,'FSI_ETIQUETA','Cuenta',35.00,50.00,75.00,10.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-MBAN3',22,'FSI_ETIQUETA','Concepto',110.00,50.00,50.00,10.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-MBAN3',23,'FSI_ETIQUETA','Debe',160.00,50.00,20.00,10.00,'C','000000','right','middle');
insert into tbl_formatos_det
values('FSI-MBAN3',24,'FSI_ETIQUETA','Haber',180.00,50.00,20.00,10.00,'C','000000','right','middle');
insert into tbl_formatos_det
values('FSI-MBAN3',25,'FSI_ETIQUETA','TOTALES:',0.00,190.00,160.00,5.00,'C','000000','right','middle');
insert into tbl_formatos_det
values('FSI-MBAN3',26,'debe',',|.|2|0',160.00,190.00,20.00,5.00,'C','000000','right','middle');
insert into tbl_formatos_det
values('FSI-MBAN3',27,'haber',',|.|2|0',180.00,190.00,20.00,5.00,'C','000000','right','middle');
insert into tbl_formatos_det
values('FSI-MBAN3',28,'FSI_LH','t_negra',0.00,50.00,200.00,0.20,'C','000000','center','middle');
insert into tbl_formatos_det
values('FSI-MBAN3',29,'FSI_LH','t_negra',0.00,185.00,200.00,0.20,'C','000000','center','middle');
insert into tbl_formatos_det
values('FSI-MBAN3',30,'part',' |0',0.00,0.00,5.00,2.50,'D','000000','center','middle');
insert into tbl_formatos_det
values('FSI-MBAN3',31,'numero','cuenta',5.00,0.00,30.00,2.50,'D','000000','left','middle');
insert into tbl_formatos_det
values('FSI-MBAN3',32,'nombre','general',35.00,0.00,75.00,2.50,'D','000000','left','middle');
insert into tbl_formatos_det
values('FSI-MBAN3',33,'concepto','general',110.00,0.00,50.00,2.50,'D','000000','left','middle');
insert into tbl_formatos_det
values('FSI-MBAN3',34,'debe',',|.|2|0',160.00,0.00,20.00,2.50,'D','000000','right','middle');
insert into tbl_formatos_det
values('FSI-MBAN3',35,'haber',',|.|2|0',180.00,0.00,20.00,2.50,'D','000000','right','middle');

insert into TBL_FORMATOS
values('FSI-MBAN4','Formato de movimiento bancario','BANCAJ_BANCOS');

insert into tbl_formatos_det
values('FSI-MBAN4',1,'FSI_CAB','',null,null,null,259.50,'S','000000',null,null);
insert into tbl_formatos_det
values('FSI-MBAN4',2,'FSI_VENTANA','',null,null,800.00,600.00,'S','000000',null,null);
insert into tbl_formatos_det
values('FSI-MBAN4',3,'FSI_DET','50',null,60.00,null,2.50,'S','000000',null,null);
insert into tbl_formatos_det
values('FSI-MBAN4',4,'FSI_IMPTIT','font-family: Arial, Helvetica, sans-serif; font-size: 14pt; font-style: italic; font-weight: bold; ',null,null,null,null,'S','000000',null,null);
insert into tbl_formatos_det
values('FSI-MBAN4',5,'FSI_IMPETQ','font-family: Arial, Helvetica, sans-serif; font-size: 10pt; font-style: normal; font-weight: bold; ',null,null,null,null,'S','000000',null,null);
insert into tbl_formatos_det
values('FSI-MBAN4',6,'FSI_IMPCAB','font-family: Arial, Helvetica, sans-serif; font-size: 8pt; font-style: normal; font-weight: bold; ',null,null,null,null,'S','000000',null,null);
insert into tbl_formatos_det
values('FSI-MBAN4',7,'FSI_IMPDET','font-family: Arial, Helvetica, sans-serif; font-size: 6pt; font-style: normal; font-weight: bold; ',null,null,null,null,'S','000000',null,null);
insert into tbl_formatos_det
values('FSI-MBAN4',8,'FSI_TITULO','Movimiento Bancario',0.00,0.00,190.00,20.00,'C','000000','center','middle');
insert into tbl_formatos_det
values('FSI-MBAN4',9,'FSI_ETIQUETA','Tipo de movimiento:',0.00,20.00,50.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-MBAN4',10,'tipo','general',50.00,20.00,20.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-MBAN4',11,'tiporef','general',70.00,20.00,30.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-MBAN4',12,'FSI_ETIQUETA','No de Movimiento:',100.00,20.00,50.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-MBAN4',13,'num',' |0',150.00,20.00,45.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-MBAN4',14,'FSI_ETIQUETA','Fecha:',0.00,30.00,50.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-MBAN4',15,'fecha','dd/MM/yyyy',50.00,30.00,45.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-MBAN4',16,'FSI_ETIQUETA','Total:',100.00,30.00,50.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-MBAN4',17,'total',',|.|2|0',150.00,30.00,45.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-MBAN4',18,'FSI_ETIQUETA','CONCEPTO:',0.00,40.00,40.00,5.00,'C','000000','left','top');
insert into tbl_formatos_det
values('FSI-MBAN4',19,'concepto','general',40.00,40.00,150.00,10.00,'C','000000','left','top');
insert into tbl_formatos_det
values('FSI-MBAN4',20,'FSI_LH','t_negra',0.00,50.00,200.00,0.20,'C','000000','center','middle');



--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_cajas_movimientos_impcab AS 
 SELECT m.id, m.clave, c.cuenta, c.descripcion, m.num, m.fecha, m.concepto, m.deposito, m.retiro, m.saldo, m.estatus, m.id_moneda, ( SELECT tbl_cont_monedas.moneda
           FROM tbl_cont_monedas
          WHERE tbl_cont_monedas.clave = m.id_moneda) AS moneda, m.ref, m.pol_id, 
        CASE
            WHEN m.pol_id IS NULL THEN ''::text
            ELSE ( SELECT (tbl_cont_polizas.tipo::text || ' - '::text) || tbl_cont_polizas.numero::character varying::text
               FROM tbl_cont_polizas
              WHERE tbl_cont_polizas.id = m.pol_id)
        END AS pol, m.cons AS mc, m.estrans, 
        CASE
            WHEN m.pol_id IS NULL THEN 0::numeric
            ELSE ( SELECT view_cont_polizas_modulo.debe
               FROM view_cont_polizas_modulo
              WHERE view_cont_polizas_modulo.id = m.pol_id)
        END AS debe, 
        CASE
            WHEN m.pol_id IS NULL THEN 0::numeric
            ELSE ( SELECT view_cont_polizas_modulo.haber
               FROM view_cont_polizas_modulo
              WHERE view_cont_polizas_modulo.id = m.pol_id)
        END AS haber, m.deposito - m.retiro AS total, m.tipomov AS tipo, m.referencia AS tiporef
   FROM tbl_bancos_movimientos m
   JOIN tbl_bancos_cuentas c ON m.tipo = c.tipo AND m.clave = c.clave
  WHERE m.tipo = 1;

insert into TBL_FORMATOS
values('FSI-MCAJ','Formato de movimiento de caja con su p√≥liza','BANCAJ_CAJAS');

insert into tbl_formatos_det
values('FSI-MCAJ',1,'FSI_CAB','',null,null,null,259.50,'S','000000',null,null);
insert into tbl_formatos_det
values('FSI-MCAJ',2,'FSI_VENTANA','',null,null,800.00,600.00,'S','000000',null,null);
insert into tbl_formatos_det
values('FSI-MCAJ',3,'FSI_DET','50',null,60.00,null,2.50,'S','000000',null,null);
insert into tbl_formatos_det
values('FSI-MCAJ',4,'FSI_IMPTIT','font-family: Arial, Helvetica, sans-serif; font-size: 14pt; font-style: italic; font-weight: bold; ',null,null,null,null,'S','000000',null,null);
insert into tbl_formatos_det
values('FSI-MCAJ',5,'FSI_IMPETQ','font-family: Arial, Helvetica, sans-serif; font-size: 10pt; font-style: normal; font-weight: bold; ',null,null,null,null,'S','000000',null,null);
insert into tbl_formatos_det
values('FSI-MCAJ',6,'FSI_IMPCAB','font-family: Arial, Helvetica, sans-serif; font-size: 8pt; font-style: normal; font-weight: bold; ',null,null,null,null,'S','000000',null,null);
insert into tbl_formatos_det
values('FSI-MCAJ',7,'FSI_IMPDET','font-family: Arial, Helvetica, sans-serif; font-size: 6pt; font-style: normal; font-weight: bold; ',null,null,null,null,'S','000000',null,null);
insert into tbl_formatos_det
values('FSI-MCAJ',8,'FSI_TITULO','Movimiento de Caja',0.00,0.00,190.00,20.00,'C','000000','center','middle');
insert into tbl_formatos_det
values('FSI-MCAJ',9,'FSI_ETIQUETA','Tipo de movimiento:',0.00,20.00,50.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-MCAJ',10,'tipo','general',50.00,20.00,20.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-MCAJ',11,'tiporef','general',70.00,20.00,30.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-MCAJ',12,'FSI_ETIQUETA','No de Movimiento:',100.00,20.00,50.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-MCAJ',13,'num',' |0',150.00,20.00,45.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-MCAJ',14,'FSI_ETIQUETA','Fecha:',0.00,30.00,50.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-MCAJ',15,'fecha','dd/MM/yyyy',50.00,30.00,45.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-MCAJ',16,'FSI_ETIQUETA','Total:',100.00,30.00,50.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-MCAJ',17,'total',',|.|2|0',150.00,30.00,45.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-MCAJ',18,'FSI_ETIQUETA','CONCEPTO:',0.00,40.00,40.00,5.00,'C','000000','left','top');
insert into tbl_formatos_det
values('FSI-MCAJ',19,'concepto','general',40.00,40.00,150.00,10.00,'C','000000','left','top');
insert into tbl_formatos_det
values('FSI-MCAJ',20,'FSI_ETIQUETA','N√∫mero',5.00,50.00,30.00,10.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-MCAJ',21,'FSI_ETIQUETA','Cuenta',35.00,50.00,75.00,10.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-MCAJ',22,'FSI_ETIQUETA','Concepto',110.00,50.00,50.00,10.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-MCAJ',23,'FSI_ETIQUETA','Debe',160.00,50.00,20.00,10.00,'C','000000','right','middle');
insert into tbl_formatos_det
values('FSI-MCAJ',24,'FSI_ETIQUETA','Haber',180.00,50.00,20.00,10.00,'C','000000','right','middle');
insert into tbl_formatos_det
values('FSI-MCAJ',25,'FSI_ETIQUETA','TOTALES:',0.00,190.00,160.00,5.00,'C','000000','right','middle');
insert into tbl_formatos_det
values('FSI-MCAJ',26,'debe',',|.|2|0',160.00,190.00,20.00,5.00,'C','000000','right','middle');
insert into tbl_formatos_det
values('FSI-MCAJ',27,'haber',',|.|2|0',180.00,190.00,20.00,5.00,'C','000000','right','middle');
insert into tbl_formatos_det
values('FSI-MCAJ',28,'FSI_LH','t_negra',0.00,50.00,200.00,0.20,'C','000000','center','middle');
insert into tbl_formatos_det
values('FSI-MCAJ',29,'FSI_LH','t_negra',0.00,185.00,200.00,0.20,'C','000000','center','middle');
insert into tbl_formatos_det
values('FSI-MCAJ',30,'part',' |0',0.00,0.00,5.00,2.50,'D','000000','center','middle');
insert into tbl_formatos_det
values('FSI-MCAJ',31,'numero','cuenta',5.00,0.00,30.00,2.50,'D','000000','left','middle');
insert into tbl_formatos_det
values('FSI-MCAJ',32,'nombre','general',35.00,0.00,75.00,2.50,'D','000000','left','middle');
insert into tbl_formatos_det
values('FSI-MCAJ',33,'concepto','general',110.00,0.00,50.00,2.50,'D','000000','left','middle');
insert into tbl_formatos_det
values('FSI-MCAJ',34,'debe',',|.|2|0',160.00,0.00,20.00,2.50,'D','000000','right','middle');
insert into tbl_formatos_det
values('FSI-MCAJ',35,'haber',',|.|2|0',180.00,0.00,20.00,2.50,'D','000000','right','middle');

insert into TBL_FORMATOS
values('FSI-MCAJ2','Formato de movimiento de caja','BANCAJ_CAJAS');

insert into tbl_formatos_det
values('FSI-MCAJ2',1,'FSI_CAB','',null,null,null,259.50,'S','000000',null,null);
insert into tbl_formatos_det
values('FSI-MCAJ2',2,'FSI_VENTANA','',null,null,800.00,600.00,'S','000000',null,null);
insert into tbl_formatos_det
values('FSI-MCAJ2',3,'FSI_DET','50',null,60.00,null,2.50,'S','000000',null,null);
insert into tbl_formatos_det
values('FSI-MCAJ2',4,'FSI_IMPTIT','font-family: Arial, Helvetica, sans-serif; font-size: 14pt; font-style: italic; font-weight: bold; ',null,null,null,null,'S','000000',null,null);
insert into tbl_formatos_det
values('FSI-MCAJ2',5,'FSI_IMPETQ','font-family: Arial, Helvetica, sans-serif; font-size: 10pt; font-style: normal; font-weight: bold; ',null,null,null,null,'S','000000',null,null);
insert into tbl_formatos_det
values('FSI-MCAJ2',6,'FSI_IMPCAB','font-family: Arial, Helvetica, sans-serif; font-size: 8pt; font-style: normal; font-weight: bold; ',null,null,null,null,'S','000000',null,null);
insert into tbl_formatos_det
values('FSI-MCAJ2',7,'FSI_IMPDET','font-family: Arial, Helvetica, sans-serif; font-size: 6pt; font-style: normal; font-weight: bold; ',null,null,null,null,'S','000000',null,null);
insert into tbl_formatos_det
values('FSI-MCAJ2',8,'FSI_TITULO','Movimiento de Caja',0.00,0.00,190.00,20.00,'C','000000','center','middle');
insert into tbl_formatos_det
values('FSI-MCAJ2',9,'FSI_ETIQUETA','Tipo de movimiento:',0.00,20.00,50.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-MCAJ2',10,'tipo','general',50.00,20.00,20.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-MCAJ2',11,'tiporef','general',70.00,20.00,30.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-MCAJ2',12,'FSI_ETIQUETA','No de Movimiento:',100.00,20.00,50.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-MCAJ2',13,'num',' |0',150.00,20.00,45.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-MCAJ2',14,'FSI_ETIQUETA','Fecha:',0.00,30.00,50.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-MCAJ2',15,'fecha','dd/MM/yyyy',50.00,30.00,45.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-MCAJ2',16,'FSI_ETIQUETA','Total:',100.00,30.00,50.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-MCAJ2',17,'total',',|.|2|0',150.00,30.00,45.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-MCAJ2',18,'FSI_ETIQUETA','CONCEPTO:',0.00,40.00,40.00,5.00,'C','000000','left','top');
insert into tbl_formatos_det
values('FSI-MCAJ2',19,'concepto','general',40.00,40.00,150.00,10.00,'C','000000','left','top');
insert into tbl_formatos_det
values('FSI-MCAJ2',20,'FSI_LH','t_negra',0.00,50.00,200.00,0.20,'C','000000','center','middle');



--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_cajas_vales_impcab AS 
 SELECT v.id_cierre, c.numero, c.id_clave AS tipo_id, v.id_vale, v.id_tipo, v.fecha, 
        CASE
            WHEN v.id_tipo = 'P'::bpchar THEN 'Provisional'::text
            WHEN v.id_tipo = 'F'::bpchar THEN 'Sin Factura'::text
            WHEN v.id_tipo = 'A'::bpchar THEN 'Factura'::text
            WHEN v.id_tipo = 'G'::bpchar THEN 'Pago'::text
            WHEN v.id_tipo = 'C'::bpchar THEN 'Otro'::text
            WHEN v.id_tipo = 'T'::bpchar THEN 'Traspasar'::text
            ELSE 'Desconocido'::text
        END AS tipo, 
        CASE
            WHEN v.id_gasto IS NULL THEN ''::character varying
            ELSE v.id_gasto
        END AS id_gasto, 
        CASE
            WHEN v.id_gasto IS NULL THEN ''::character varying
            ELSE ( SELECT tbl_invserv_inventarios.descripcion
               FROM tbl_invserv_inventarios
              WHERE tbl_invserv_inventarios.id_prod::text = v.id_gasto::text)
        END AS descripcion, v.concepto, v.cantidad, v.descuento, v.iva, v.total
   FROM tbl_cajas_cierre_vales v
   JOIN tbl_cajas_cierre c ON c.id_cierre = v.id_cierre
  WHERE c.id_tipo = 1;
  
insert into TBL_FORMATOS
values('FSI-VCAJ','Formato de vales de caja','BANCAJ_VALES');

insert into tbl_formatos_det
values('FSI-VCAJ',1,'FSI_CAB','',null,null,null,259.50,'S','000000',null,null);
insert into tbl_formatos_det
values('FSI-VCAJ',2,'FSI_VENTANA','',null,null,800.00,600.00,'S','000000',null,null);
insert into tbl_formatos_det
values('FSI-VCAJ',3,'FSI_DET','50',null,60.00,null,2.50,'S','000000',null,null);
insert into tbl_formatos_det
values('FSI-VCAJ',4,'FSI_IMPTIT','font-family: Arial, Helvetica, sans-serif; font-size: 14pt; font-style: italic; font-weight: bold; ',null,null,null,null,'S','000000',null,null);
insert into tbl_formatos_det
values('FSI-VCAJ',5,'FSI_IMPETQ','font-family: Arial, Helvetica, sans-serif; font-size: 10pt; font-style: normal; font-weight: bold; ',null,null,null,null,'S','000000',null,null);
insert into tbl_formatos_det
values('FSI-VCAJ',6,'FSI_IMPCAB','font-family: Arial, Helvetica, sans-serif; font-size: 8pt; font-style: normal; font-weight: bold; ',null,null,null,null,'S','000000',null,null);
insert into tbl_formatos_det
values('FSI-VCAJ',7,'FSI_IMPDET','font-family: Arial, Helvetica, sans-serif; font-size: 6pt; font-style: normal; font-weight: bold; ',null,null,null,null,'S','000000',null,null);
insert into tbl_formatos_det
values('FSI-VCAJ',8,'FSI_TITULO','Vale de Caja',0.00,0.00,190.00,20.00,'C','000000','center','middle');
insert into tbl_formatos_det
values('FSI-VCAJ',9,'FSI_ETIQUETA','Tipo de Vale:',0.00,20.00,50.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-VCAJ',10,'tipo','general',50.00,20.00,50,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-VCAJ',11,'FSI_ETIQUETA','Identificador:',100.00,20.00,50.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-VCAJ',12,'id_vale',' |0',150.00,20.00,45.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-VCAJ',13,'FSI_ETIQUETA','Fecha:',0.00,30.00,50.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-VCAJ',14,'fecha','dd/MM/yyyy',50.00,30.00,45.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-VCAJ',15,'FSI_ETIQUETA','Total:',100.00,30.00,50.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-VCAJ',16,'total',',|.|2|0',150.00,30.00,45.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-VCAJ',17,'FSI_ETIQUETA','CONCEPTO:',0.00,40.00,40.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-VCAJ',18,'concepto','general',40.00,40.00,150.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-VCAJ',19,'FSI_ETIQUETA','GASTO:',0.00,50.00,40.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-VCAJ',20,'id_gasto','general',40.00,50.00,30.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-VCAJ',21,'descripcion','general',70.00,50.00,120.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-VCAJ',22,'FSI_LH','t_negra',100.00,75.00,100.00,0.50,'C','000000','center','middle');
insert into tbl_formatos_det
values('FSI-VCAJ',23,'FSI_ETIQUETA','Nombre y Firma',100.00,77.00,100.00,5.00,'C','000000','center','bottom');



--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_cajas_cierres_impcab AS 
 SELECT rc.id_cierre, rc.clavedesde AS id_entidad, rc.numero, rc.fecha, rc.status, rc.nummovdesde AS desde, rc.nummovhasta AS hasta, rc.obs
   FROM tbl_ventas_cierres_cab rc;



--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_cajas_cierres_impdet AS 
 SELECT rc.id_cierre, rc.partida, 
        CASE
            WHEN rc.clave::text = 'TIT'::text OR rc.clave::text = 'ETQ'::text OR rc.clave::text = 'ESP'::text OR rc.clave::text = 'ACU'::text OR rc.clave::text = 'VAL'::text THEN '&nbsp;'::character varying
            ELSE rc.clave
        END AS clave, rc.descripcion, rc.total
   FROM tbl_ventas_cierres_stmp rc;

insert into TBL_FORMATOS
values('FSI-CCAJ','Formato de cierre de caja','BANCAJ_CIERRES');

insert into tbl_formatos_det
values('FSI-CCAJ',1,'FSI_CAB','',null,null,null,259.50,'S','000000',null,null);
insert into tbl_formatos_det
values('FSI-CCAJ',2,'FSI_VENTANA','',null,null,800.00,600.00,'S','000000',null,null);
insert into tbl_formatos_det
values('FSI-CCAJ',3,'FSI_DET','50',null,60.00,null,2.50,'S','000000',null,null);
insert into tbl_formatos_det
values('FSI-CCAJ',4,'FSI_IMPTIT','font-family: Arial, Helvetica, sans-serif; font-size: 14pt; font-style: italic; font-weight: bold; ',null,null,null,null,'S','000000',null,null);
insert into tbl_formatos_det
values('FSI-CCAJ',5,'FSI_IMPETQ','font-family: Arial, Helvetica, sans-serif; font-size: 10pt; font-style: normal; font-weight: bold; ',null,null,null,null,'S','000000',null,null);
insert into tbl_formatos_det
values('FSI-CCAJ',6,'FSI_IMPCAB','font-family: Arial, Helvetica, sans-serif; font-size: 8pt; font-style: normal; font-weight: bold; ',null,null,null,null,'S','000000',null,null);
insert into tbl_formatos_det
values('FSI-CCAJ',7,'FSI_IMPDET','font-family: Arial, Helvetica, sans-serif; font-size: 6pt; font-style: normal; font-weight: bold; ',null,null,null,null,'S','000000',null,null);
insert into tbl_formatos_det
values('FSI-CCAJ',8,'FSI_TITULO','Cierre de Caja',0.00,0.00,190.00,20.00,'C','000000','center','middle');
insert into tbl_formatos_det
values('FSI-CCAJ',9,'FSI_ETIQUETA','Entidad:',0.00,20.00,50.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-CCAJ',10,'id_entidad',' |0',50.00,20.00,20.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-CCAJ',11,'FSI_ETIQUETA','Numero:',100.00,20.00,50.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-CCAJ',12,'numero',' |0',150.00,20.00,45.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-CCAJ',13,'FSI_ETIQUETA','Fecha:',0.00,30.00,50.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-CCAJ',14,'fecha','dd/MM/yyyy',50.00,30.00,45.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-CCAJ',15,'FSI_ETIQUETA','Rango:',100.00,30.00,50.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-CCAJ',16,'desde',' |0',150.00,30.00,25.00,5.00,'C','000000','right','middle');
insert into tbl_formatos_det
values('FSI-CCAJ',17,'hasta',' |0',175.00,30.00,25.00,5.00,'C','000000','right','middle');
insert into tbl_formatos_det
values('FSI-CCAJ',18,'FSI_ETIQUETA','Observaciones:',0.00,40.00,40.00,5.00,'C','000000','left','top');
insert into tbl_formatos_det
values('FSI-CCAJ',19,'obs','general',40.00,40.00,150.00,10.00,'C','000000','left','top');
insert into tbl_formatos_det
values('FSI-CCAJ',20,'FSI_ETIQUETA','Clave',0.00,50.00,30.00,10.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-CCAJ',21,'FSI_ETIQUETA','Descripci√≥n',30.00,50.00,125.00,10.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-CCAJ',22,'FSI_ETIQUETA','Total',155,50.00,45.00,10.00,'C','000000','right','middle');
insert into tbl_formatos_det
values('FSI-CCAJ',23,'FSI_LH','t_negra',0.00,50.00,200.00,0.20,'C','000000','center','middle');
insert into tbl_formatos_det
values('FSI-CCAJ',24,'clave','general',0.00,0.00,30.00,2.50,'D','000000','left','middle');
insert into tbl_formatos_det
values('FSI-CCAJ',25,'descripcion','general',30.00,0.00,125.00,2.50,'D','000000','left','middle');
insert into tbl_formatos_det
values('FSI-CCAJ',26,'total',',|.|2|0',155.00,0.00,45.00,2.50,'D','000000','right','middle');



--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_invserv_almacen_movim_impcab AS 
 SELECT m.id_movimiento, m.numero AS num, m.status, m.fecha, m.id_bodega, b.nombre AS bodega, m.id_concepto, 
        CASE
            WHEN c.desistema = B'1'::"bit" THEN ( SELECT msj.msj1
               FROM tbl_msj msj
              WHERE msj.alc::text = 'CEF'::text AND msj.mod::text = 'ALMACEN'::text AND msj.sub::text = 'CAT_CON'::text AND msj.elm::text = c.id_concepto::text)
            ELSE c.descripcion
        END AS descripcion, m.concepto, m.referencia, m.id_pol, 
        CASE
            WHEN m.id_pol = (-1) THEN ''::text
            ELSE ( SELECT (tbl_cont_polizas.tipo::text || ' - '::text) || tbl_cont_polizas.numero::character varying::text
               FROM tbl_cont_polizas
              WHERE tbl_cont_polizas.id = m.id_pol)
        END AS pol, m.ref, m.cr_pri, m.cr_sec
   FROM tbl_invserv_almacen_movim_cab m
   JOIN tbl_invserv_costos_conceptos c ON m.id_concepto = c.id_concepto
   JOIN tbl_invserv_bodegas b ON m.id_bodega = b.id_bodega;



--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_invserv_almacen_movim_impdet AS 
 SELECT m.id_costo, m.id_movimiento, m.id_prod, c.descripcion, m.entrada, m.salida, m.entrada - m.salida AS total, c.id_unidadsalida AS unidad, m.ultimocosto AS uc, m.costopromedio AS cp, m.debe, m.haber
   FROM tbl_invserv_costos_detalle m
   JOIN tbl_invserv_inventarios c ON m.id_prod::text = c.id_prod::text;

insert into TBL_FORMATOS
values('FSI-MALM','Formato de movimientos al almac√©n','ALM_MOVIM');

insert into tbl_formatos_det
values('FSI-MALM',1,'FSI_CAB','',null,null,null,259.50,'S','000000',null,null);
insert into tbl_formatos_det
values('FSI-MALM',2,'FSI_VENTANA','',null,null,800.00,600.00,'S','000000',null,null);
insert into tbl_formatos_det
values('FSI-MALM',3,'FSI_DET','50',null,70.00,null,2.50,'S','000000',null,null);
insert into tbl_formatos_det
values('FSI-MALM',4,'FSI_IMPTIT','font-family: Arial, Helvetica, sans-serif; font-size: 14pt; font-style: italic; font-weight: bold; ',null,null,null,null,'S','000000',null,null);
insert into tbl_formatos_det
values('FSI-MALM',5,'FSI_IMPETQ','font-family: Arial, Helvetica, sans-serif; font-size: 10pt; font-style: normal; font-weight: bold; ',null,null,null,null,'S','000000',null,null);
insert into tbl_formatos_det
values('FSI-MALM',6,'FSI_IMPCAB','font-family: Arial, Helvetica, sans-serif; font-size: 8pt; font-style: normal; font-weight: bold; ',null,null,null,null,'S','000000',null,null);
insert into tbl_formatos_det
values('FSI-MALM',7,'FSI_IMPDET','font-family: Arial, Helvetica, sans-serif; font-size: 6pt; font-style: normal; font-weight: bold; ',null,null,null,null,'S','000000',null,null);
insert into tbl_formatos_det
values('FSI-MALM',8,'FSI_TITULO','Movimiento al Almac√©n',0.00,0.00,190.00,20.00,'C','000000','center','middle');
insert into tbl_formatos_det
values('FSI-MALM',9,'FSI_ETIQUETA','Bodega:',0.00,20.00,50.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-MALM',10,'bodega','general',50.00,20.00,20.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-MALM',11,'FSI_ETIQUETA','Tipo y Num:',100.00,20.00,50.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-MALM',12,'num',' |0',150.00,20.00,45.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-MALM',13,'FSI_ETIQUETA','Fecha:',0.00,30.00,50.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-MALM',14,'fecha','dd/MM/yyyy',50.00,30.00,45.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-MALM',15,'FSI_ETIQUETA','Referencia:',100.00,30.00,50.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-MALM',16,'referencia','general',150.00,30.00,50.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-MALM',17,'FSI_ETIQUETA','Descripci√≥n:',0.00,40.00,40.00,5.00,'C','000000','left','top');
insert into tbl_formatos_det
values('FSI-MALM',18,'descripcion','general',40.00,40.00,150.00,10.00,'C','000000','left','top');
insert into tbl_formatos_det
values('FSI-MALM',19,'FSI_ETIQUETA','Concepto:',0.00,50.00,40.00,5.00,'C','000000','left','top');
insert into tbl_formatos_det
values('FSI-MALM',20,'concepto','general',40.00,50.00,150.00,10.00,'C','000000','left','top');
insert into tbl_formatos_det
values('FSI-MALM',21,'FSI_ETIQUETA','Clave',0.00,60.00,30.00,10.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-MALM',22,'FSI_ETIQUETA','Descripci√≥n',30.00,60.00,100.00,10.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-MALM',23,'FSI_ETIQUETA','Total',130,60.00,45.00,10.00,'C','000000','right','middle');
insert into tbl_formatos_det
values('FSI-MALM',24,'FSI_ETIQUETA','Uni',175,60.00,25.00,10.00,'C','000000','center','middle');
insert into tbl_formatos_det
values('FSI-MALM',25,'FSI_LH','t_negra',0.00,60.00,200.00,0.20,'C','000000','center','middle');
insert into tbl_formatos_det
values('FSI-MALM',26,'id_prod','general',0.00,0.00,30.00,2.50,'D','000000','left','middle');
insert into tbl_formatos_det
values('FSI-MALM',27,'descripcion','general',30.00,0.00,100.00,2.50,'D','000000','left','middle');
insert into tbl_formatos_det
values('FSI-MALM',28,'total',',|.|2|0',130.00,0.00,45.00,2.50,'D','000000','right','middle');
insert into tbl_formatos_det
values('FSI-MALM',29,'unidad','general',175.00,0.00,25.00,2.50,'D','000000','center','middle');



--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_invserv_plantillas_impcab AS 
 SELECT m.id_movimplant AS id_plantilla, m.numero AS num, m.status, m.fecha, m.id_bodega, b.nombre AS bodega, m.id_concepto, 
        CASE
            WHEN c.desistema = B'1'::"bit" THEN ( SELECT msj.msj1
               FROM tbl_msj msj
              WHERE msj.alc::text = 'CEF'::text AND msj.mod::text = 'ALMACEN'::text AND msj.sub::text = 'CAT_CON'::text AND msj.elm::text = c.id_concepto::text)
            ELSE c.descripcion
        END AS descripcion, m.concepto, m.referencia, m.id_movimiento, 
        CASE
            WHEN m.id_movimiento = 0 THEN 0
            ELSE ( SELECT tbl_invserv_almacen_movim_cab.numero
               FROM tbl_invserv_almacen_movim_cab
              WHERE tbl_invserv_almacen_movim_cab.id_movimiento = m.id_movimiento)
        END AS movimiento
   FROM tbl_invserv_almacen_movim_plant_cab m
   JOIN tbl_invserv_costos_conceptos c ON m.id_concepto = c.id_concepto
   JOIN tbl_invserv_bodegas b ON m.id_bodega = b.id_bodega;



--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_invserv_plantillas_impdet AS 
 SELECT m.partida, m.id_movimplant AS id_plantilla, m.id_prod, c.descripcion, m.entrada, m.salida, m.entrada - m.salida AS total, c.id_unidadsalida AS unidad, m.costo AS uc, m.costo AS cp
   FROM tbl_invserv_almacen_movim_plant_det m
   JOIN tbl_invserv_inventarios c ON m.id_prod::text = c.id_prod::text;

insert into TBL_FORMATOS
values('FSI-PALM','Formato de plantillas de almac√©n','ALM_MOVPLANT');

insert into tbl_formatos_det
values('FSI-PALM',1,'FSI_CAB','',null,null,null,259.50,'S','000000',null,null);
insert into tbl_formatos_det
values('FSI-PALM',2,'FSI_VENTANA','',null,null,800.00,600.00,'S','000000',null,null);
insert into tbl_formatos_det
values('FSI-PALM',3,'FSI_DET','50',null,70.00,null,2.50,'S','000000',null,null);
insert into tbl_formatos_det
values('FSI-PALM',4,'FSI_IMPTIT','font-family: Arial, Helvetica, sans-serif; font-size: 14pt; font-style: italic; font-weight: bold; ',null,null,null,null,'S','000000',null,null);
insert into tbl_formatos_det
values('FSI-PALM',5,'FSI_IMPETQ','font-family: Arial, Helvetica, sans-serif; font-size: 10pt; font-style: normal; font-weight: bold; ',null,null,null,null,'S','000000',null,null);
insert into tbl_formatos_det
values('FSI-PALM',6,'FSI_IMPCAB','font-family: Arial, Helvetica, sans-serif; font-size: 8pt; font-style: normal; font-weight: bold; ',null,null,null,null,'S','000000',null,null);
insert into tbl_formatos_det
values('FSI-PALM',7,'FSI_IMPDET','font-family: Arial, Helvetica, sans-serif; font-size: 6pt; font-style: normal; font-weight: bold; ',null,null,null,null,'S','000000',null,null);
insert into tbl_formatos_det
values('FSI-PALM',8,'FSI_TITULO','Plantilla de Almac√©n',0.00,0.00,190.00,20.00,'C','000000','center','middle');
insert into tbl_formatos_det
values('FSI-PALM',9,'FSI_ETIQUETA','Bodega:',0.00,20.00,50.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-PALM',10,'bodega','general',50.00,20.00,20.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-PALM',11,'FSI_ETIQUETA','N√∫mero:',100.00,20.00,50.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-PALM',12,'num',' |0',150.00,20.00,45.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-PALM',13,'FSI_ETIQUETA','Fecha:',0.00,30.00,50.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-PALM',14,'fecha','dd/MM/yyyy',50.00,30.00,45.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-PALM',15,'FSI_ETIQUETA','Referencia:',100.00,30.00,50.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-PALM',16,'referencia','general',150.00,30.00,50.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-PALM',17,'FSI_ETIQUETA','Descripci√≥n:',0.00,40.00,40.00,5.00,'C','000000','left','top');
insert into tbl_formatos_det
values('FSI-PALM',18,'descripcion','general',40.00,40.00,150.00,10.00,'C','000000','left','top');
insert into tbl_formatos_det
values('FSI-PALM',19,'FSI_ETIQUETA','Concepto:',0.00,50.00,40.00,5.00,'C','000000','left','top');
insert into tbl_formatos_det
values('FSI-PALM',20,'concepto','general',40.00,50.00,150.00,10.00,'C','000000','left','top');
insert into tbl_formatos_det
values('FSI-PALM',21,'FSI_ETIQUETA','Clave',0.00,60.00,30.00,10.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-PALM',22,'FSI_ETIQUETA','Descripci√≥n',30.00,60.00,100.00,10.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-PALM',23,'FSI_ETIQUETA','Total',130,60.00,45.00,10.00,'C','000000','right','middle');
insert into tbl_formatos_det
values('FSI-PALM',24,'FSI_ETIQUETA','Uni',175,60.00,25.00,10.00,'C','000000','center','middle');
insert into tbl_formatos_det
values('FSI-PALM',25,'FSI_LH','t_negra',0.00,60.00,200.00,0.20,'C','000000','center','middle');
insert into tbl_formatos_det
values('FSI-PALM',26,'id_prod','general',0.00,0.00,30.00,2.50,'D','000000','left','middle');
insert into tbl_formatos_det
values('FSI-PALM',27,'descripcion','general',30.00,0.00,100.00,2.50,'D','000000','left','middle');
insert into tbl_formatos_det
values('FSI-PALM',28,'total',',|.|2|0',130.00,0.00,45.00,2.50,'D','000000','right','middle');
insert into tbl_formatos_det
values('FSI-PALM',29,'unidad','general',175.00,0.00,25.00,2.50,'D','000000','center','middle');

insert into tbl_formatos(ID_Formato,Descripcion,Tipo)
values('FSI-TALM','Carta Porte CFDI','ALM_TRASPASOS');

INSERT INTO TBL_FORMATOS_DET
VALUES('FSI-TALM',1,'FSI_CAB','',null,null,null,259.50,'S','000000','','');
INSERT INTO TBL_FORMATOS_DET
VALUES('FSI-TALM',2,'FSI_VENTANA','',null,null,800.00,600.00,'S','000000','','');
INSERT INTO TBL_FORMATOS_DET
VALUES('FSI-TALM',3,'FSI_DET','18',null,95.00,null,2.50,'S','000000','','');
INSERT INTO TBL_FORMATOS_DET
VALUES('FSI-TALM',4,'FSI_IMPTIT','font-family: Arial, Helvetica, sans-serif; font-size: 16pt; font-style: italic; font-weight: bold;',null,null,null,null,'S','000000','','');
INSERT INTO TBL_FORMATOS_DET
VALUES('FSI-TALM',5,'FSI_IMPETQ','font-family: Arial, Helvetica, sans-serif; font-size: 8pt; font-style: normal; font-weight: bold;',null,null,null,null,'S','000000','','');
INSERT INTO TBL_FORMATOS_DET
VALUES('FSI-TALM',6,'FSI_IMPCAB','font-family: Arial, Helvetica, sans-serif; font-size: 8pt; font-style: normal; font-weight: normal;',null,null,null,null,'S','000000','','');
INSERT INTO TBL_FORMATOS_DET
VALUES('FSI-TALM',7,'FSI_IMPDET','font-family: Arial, Helvetica, sans-serif; font-size: 7pt; font-style: normal; font-weight: normal;',null,null,null,null,'S','000000','','');
INSERT INTO TBL_FORMATOS_DET
VALUES('FSI-TALM',8,'FSI_TITULO','CARTA PORTE',.00,.00,95.00,10.00,'C','000000','left','middle');
INSERT INTO TBL_FORMATOS_DET
VALUES('FSI-TALM',9,'FSI_ETIQUETA','Calle',.00,25.00,40.00,5.00,'C','000000','left','middle');
INSERT INTO TBL_FORMATOS_DET
VALUES('FSI-TALM',10,'FSI_ETIQUETA','No. Ext - Int',40.00,25.00,20.00,5.00,'C','000000','left','middle');
INSERT INTO TBL_FORMATOS_DET
VALUES('FSI-TALM',11,'FSI_ETIQUETA','Colonia',.00,30.00,40.00,5.00,'C','000000','left','middle');
INSERT INTO TBL_FORMATOS_DET
VALUES('FSI-TALM',12,'FSI_ETIQUETA','Localidad',40.00,30.00,40.00,5.00,'C','000000','left','middle');
INSERT INTO TBL_FORMATOS_DET
VALUES('FSI-TALM',13,'FSI_ETIQUETA','Municipio',.00,35.00,40.00,5.00,'C','000000','left','middle');
INSERT INTO TBL_FORMATOS_DET
VALUES('FSI-TALM',14,'FSI_ETIQUETA','Estado',40.00,35.00,40.00,5.00,'C','000000','left','middle');
INSERT INTO TBL_FORMATOS_DET
VALUES('FSI-TALM',15,'FSI_ETIQUETA','C.P.',.00,40.00,40.00,5.00,'C','000000','left','middle');
INSERT INTO TBL_FORMATOS_DET
VALUES('FSI-TALM',16,'FSI_ETIQUETA','Pais: M√©xico',40.00,40.00,40.00,5.00,'C','000000','left','middle');
INSERT INTO TBL_FORMATOS_DET
VALUES('FSI-TALM',17,'FSI_TITULO','Nombre de la Empresa S.A. de C.V.',.00,10.00,95.00,7.50,'C','000000','left','bottom');
INSERT INTO TBL_FORMATOS_DET
VALUES('FSI-TALM',18,'FSI_TITULO','RFC: XXX######XXX',.00,17.50,95.00,2.50,'C','000000','left','bottom');
INSERT INTO TBL_FORMATOS_DET
VALUES('FSI-TALM',19,'FSI_ETIQUETA','FOLIO FISCAL',95.00,.00,95.00,2.50,'C','000000','right','middle');
INSERT INTO TBL_FORMATOS_DET
VALUES('FSI-TALM',20,'TFD_UUID','general',95.00,2.50,95.00,2.50,'C','000000','right','middle');
INSERT INTO TBL_FORMATOS_DET
VALUES('FSI-TALM',21,'FSI_ETIQUETA','SERIE CERTIFICADO SAT',95.00,5.00,95.00,2.50,'C','000000','right','middle');
INSERT INTO TBL_FORMATOS_DET
VALUES('FSI-TALM',22,'TFD_NoCertificadoSAT','general',95.00,7.50,95.00,2.50,'C','000000','right','middle');
INSERT INTO TBL_FORMATOS_DET
VALUES('FSI-TALM',23,'FSI_ETIQUETA','FECHA Y HORA DE CERTIFICACION',95.00,10.00,95.00,2.50,'C','000000','right','middle');
INSERT INTO TBL_FORMATOS_DET
VALUES('FSI-TALM',24,'TFD_FechaTimbre','dd/MMM/yyyy hh:mm:ss',95.00,12.50,95.00,2.50,'C','000000','right','middle');
INSERT INTO TBL_FORMATOS_DET
VALUES('FSI-TALM',25,'FSI_ETIQUETA','FECHA DE ELABORACION',95.00,15.00,95.00,2.50,'C','000000','right','middle');
INSERT INTO TBL_FORMATOS_DET
VALUES('FSI-TALM',26,'CFD_Fecha','dd/MMM/yyyy hh:mm:ss',95.00,17.50,95.00,2.50,'C','000000','right','middle');
INSERT INTO TBL_FORMATOS_DET
VALUES('FSI-TALM',27,'FSI_ETIQUETA','DATOS DE RECEPTOR',.00,50.00,95.00,5.00,'C','000000','left','middle');
INSERT INTO TBL_FORMATOS_DET
VALUES('FSI-TALM',28,'BodegaDEST','general',.00,60.00,95.00,5.00,'C','000000','left','middle');
INSERT INTO TBL_FORMATOS_DET
VALUES('FSI-TALM',29,'Calle','general',.00,65.00,40.00,5.00,'C','000000','left','middle');
INSERT INTO TBL_FORMATOS_DET
VALUES('FSI-TALM',30,'NoExt','general',40.00,65.00,20.00,5.00,'C','000000','left','middle');
INSERT INTO TBL_FORMATOS_DET
VALUES('FSI-TALM',31,'NoInt','general',60.00,65.00,20.00,5.00,'C','000000','left','middle');
INSERT INTO TBL_FORMATOS_DET
VALUES('FSI-TALM',32,'Colonia','general',.00,70.00,40.00,5.00,'C','000000','left','middle');
INSERT INTO TBL_FORMATOS_DET
VALUES('FSI-TALM',33,'Localidad','general',40.00,70.00,40.00,5.00,'C','000000','left','middle');
INSERT INTO TBL_FORMATOS_DET
VALUES('FSI-TALM',34,'Municipio','general',.00,75.00,40.00,5.00,'C','000000','left','middle');
INSERT INTO TBL_FORMATOS_DET
VALUES('FSI-TALM',35,'Estado','general',40.00,75.00,40.00,5.00,'C','000000','left','middle');
INSERT INTO TBL_FORMATOS_DET
VALUES('FSI-TALM',36,'CP','general',.00,80.00,40.00,5.00,'C','000000','left','middle');
INSERT INTO TBL_FORMATOS_DET
VALUES('FSI-TALM',37,'Pais','general',40.00,80.00,40.00,5.00,'C','000000','left','middle');
INSERT INTO TBL_FORMATOS_DET
VALUES('FSI-TALM',38,'FSI_ETIQUETA','EMITIDO EN:',105.00,50.00,85.00,5.00,'C','000000','left','middle');
INSERT INTO TBL_FORMATOS_DET
VALUES('FSI-TALM',39,'CFD_Calle','general',105.00,60.00,40.00,5.00,'C','000000','left','middle');
INSERT INTO TBL_FORMATOS_DET
VALUES('FSI-TALM',40,'CFD_NoExt','general',145.00,60.00,20.00,5.00,'C','000000','left','middle');
INSERT INTO TBL_FORMATOS_DET
VALUES('FSI-TALM',41,'CFD_NoInt','general',165.00,60.00,20.00,5.00,'C','000000','left','middle');
INSERT INTO TBL_FORMATOS_DET
VALUES('FSI-TALM',42,'CFD_Colonia','general',105.00,65.00,40.00,5.00,'C','000000','left','middle');
INSERT INTO TBL_FORMATOS_DET
VALUES('FSI-TALM',43,'CFD_Localidad','general',145.00,65.00,40.00,5.00,'C','000000','left','middle');
INSERT INTO TBL_FORMATOS_DET
VALUES('FSI-TALM',44,'CFD_Municipio','general',105.00,70.00,40.00,5.00,'C','000000','left','middle');
INSERT INTO TBL_FORMATOS_DET
VALUES('FSI-TALM',45,'CFD_Estado','general',145.00,70.00,40.00,5.00,'C','000000','left','middle');
INSERT INTO TBL_FORMATOS_DET
VALUES('FSI-TALM',46,'CFD_CP','general',105.00,75.00,40.00,5.00,'C','000000','left','middle');
INSERT INTO TBL_FORMATOS_DET
VALUES('FSI-TALM',47,'CFD_Pais','general',145.00,75.00,40.00,5.00,'C','000000','left','middle');
INSERT INTO TBL_FORMATOS_DET
VALUES('FSI-TALM',48,'FSI_ETIQUETA','DOC INT:',105.00,80.00,20.00,5.00,'C','000000','left','middle');
INSERT INTO TBL_FORMATOS_DET
VALUES('FSI-TALM',49,'Salida',' |0',125.00,80.00,20.00,5.00,'C','000000','left','middle');
INSERT INTO TBL_FORMATOS_DET
VALUES('FSI-TALM',50,'FSI_ETIQUETA','FSI_QRCODE',.00,145.00,55.00,55.00,'C','000000','left','top');
INSERT INTO TBL_FORMATOS_DET
VALUES('FSI-TALM',51,'FSI_ETIQUETA','ESTE DOCUMENTO ES UNA REPRESENTACION IMPRESA DE UN CFDI',.00,245.00,190.00,5.00,'C','000000','center','middle');
INSERT INTO TBL_FORMATOS_DET
VALUES('FSI-TALM',52,'TFD_CadenaOriginal','general',.00,235.00,190.00,10.00,'C','000000','left','top');
INSERT INTO TBL_FORMATOS_DET
VALUES('FSI-TALM',53,'FSI_ETIQUETA','CADENA ORIGINAL DEL COMPLEMENTO DE CERTIFICACION DEL SAT',.00,230.00,190.00,5.00,'C','000000','left','middle');
INSERT INTO TBL_FORMATOS_DET
VALUES('FSI-TALM',54,'TFD_SelloSAT','general',.00,220.00,190.00,10.00,'C','000000','left','top');
INSERT INTO TBL_FORMATOS_DET
VALUES('FSI-TALM',55,'CFD_Sello','general',.00,205.00,190.00,10.00,'C','000000','left','top');
INSERT INTO TBL_FORMATOS_DET
VALUES('FSI-TALM',56,'FSI_ETIQUETA','SELLO DEL SAT',.00,215.00,190.00,5.00,'C','000000','left','middle');
INSERT INTO TBL_FORMATOS_DET
VALUES('FSI-TALM',57,'FSI_ETIQUETA','SELLO DEL CFDI',.00,200.00,190.00,5.00,'C','000000','left','middle');
INSERT INTO TBL_FORMATOS_DET
VALUES('FSI-TALM',58,'FSI_ETIQUETA','CANT',.00,90.00,12.00,5.00,'C','000000','right','middle');
INSERT INTO TBL_FORMATOS_DET
VALUES('FSI-TALM',59,'FSI_ETIQUETA','UN',12.00,90.00,5.00,5.00,'C','000000','center','middle');
INSERT INTO TBL_FORMATOS_DET
VALUES('FSI-TALM',60,'FSI_ETIQUETA','CLAVE',17.00,90.00,17.00,5.00,'C','000000','left','middle');
INSERT INTO TBL_FORMATOS_DET
VALUES('FSI-TALM',61,'FSI_ETIQUETA','DESCRIPCION',34.00,90.00,66.00,5.00,'C','000000','left','middle');
INSERT INTO TBL_FORMATOS_DET
VALUES('FSI-TALM',62,'FSI_ETIQUETA','PRECIO',160.00,90.00,15.00,5.00,'C','000000','right','middle');
INSERT INTO TBL_FORMATOS_DET
VALUES('FSI-TALM',63,'FSI_ETIQUETA','IMPORTE',175.00,90.00,15.00,5.00,'C','000000','right','middle');
INSERT INTO TBL_FORMATOS_DET
VALUES('FSI-TALM',64,'FSI_ETIQUETA','CERO PESOS 00/100 MN',55.00,160.00,85.00,10.00,'C','000000','left','top');
INSERT INTO TBL_FORMATOS_DET
VALUES('FSI-TALM',65,'FSI_ETIQUETA','PAGO EN UNA SOLA EXHIBICION',55.00,155.00,85.00,5.00,'C','000000','left','middle');
INSERT INTO TBL_FORMATOS_DET
VALUES('FSI-TALM',66,'FSI_ETIQUETA','SUB TOTAL',140.00,155.00,20.00,5.00,'C','000000','left','middle');
INSERT INTO TBL_FORMATOS_DET
VALUES('FSI-TALM',67,'FSI_ETIQUETA','0.00',160.00,155.00,30.00,5.00,'C','000000','right','middle');
INSERT INTO TBL_FORMATOS_DET
VALUES('FSI-TALM',68,'FSI_ETIQUETA','IVA 16%',140.00,160.00,20.00,5.00,'C','000000','left','middle');
INSERT INTO TBL_FORMATOS_DET
VALUES('FSI-TALM',69,'FSI_ETIQUETA','TOTAL',140.00,165.00,20.00,5.00,'C','000000','left','middle');
INSERT INTO TBL_FORMATOS_DET
VALUES('FSI-TALM',70,'FSI_ETIQUETA','0.00',160.00,160.00,30.00,5.00,'C','000000','right','middle');
INSERT INTO TBL_FORMATOS_DET
VALUES('FSI-TALM',71,'FSI_ETIQUETA','0.00',160.00,165.00,30.00,5.00,'C','000000','right','middle');
INSERT INTO TBL_FORMATOS_DET
VALUES('FSI-TALM',72,'FSI_ETIQUETA','OBSERVACIONES',100.00,90.00,60.00,5.00,'C','000000','left','middle');
INSERT INTO TBL_FORMATOS_DET
VALUES('FSI-TALM',73,'FSI_ETIQUETA','REF:',145.00,80.00,20.00,5.00,'C','000000','left','middle');
INSERT INTO TBL_FORMATOS_DET
VALUES('FSI-TALM',74,'Referencia','general',165.00,80.00,20.00,5.00,'C','000000','left','middle');
INSERT INTO TBL_FORMATOS_DET
VALUES('FSI-TALM',75,'FSI_ETIQUETA','REGIMEN FISCAL: Regimen General De Ley',95.00,30.00,95.00,2.50,'C','000000','right','middle');
INSERT INTO TBL_FORMATOS_DET
VALUES('FSI-TALM',76,'FSI_ETIQUETA','LUGAR DE EXPEDICION',95.00,20.00,95.00,2.50,'C','000000','right','middle');
INSERT INTO TBL_FORMATOS_DET
VALUES('FSI-TALM',77,'CFD_LugarExpedicion','general',95.00,22.50,95.00,2.50,'C','000000','right','middle');
INSERT INTO TBL_FORMATOS_DET
VALUES('FSI-TALM',78,'FSI_ETIQUETA','METODO DE PAGO',95.00,25.00,95.00,2.50,'C','000000','right','middle');
INSERT INTO TBL_FORMATOS_DET
VALUES('FSI-TALM',79,'CFD_MetodoDePago','general',95.00,27.50,95.00,2.50,'C','000000','right','middle');
INSERT INTO TBL_FORMATOS_DET
VALUES('FSI-TALM',80,'Bodega','general',105.00,55.00,85.00,5.00,'C','000000','left','middle');
INSERT INTO TBL_FORMATOS_DET
VALUES('FSI-TALM',81,'Cantidad',',|.|3|0',.00,.00,12.00,2.50,'D','000000','right','middle');
INSERT INTO TBL_FORMATOS_DET
VALUES('FSI-TALM',82,'Unidad','general',12.00,.00,5.00,2.50,'D','000000','center','middle');
INSERT INTO TBL_FORMATOS_DET
VALUES('FSI-TALM',83,'ID_Prod','general',17.00,.00,17.00,2.50,'D','000000','left','middle');
INSERT INTO TBL_FORMATOS_DET
VALUES('FSI-TALM',84,'Descripcion','general',34.00,.00,66.00,2.50,'D','000000','left','middle');
INSERT INTO TBL_FORMATOS_DET
VALUES('FSI-TALM',85,'FSI_ETIQUETA','0.00',160.00,.00,15.00,2.50,'D','000000','right','middle');
INSERT INTO TBL_FORMATOS_DET
VALUES('FSI-TALM',86,'FSI_ETIQUETA','0.00',175.00,.00,15.00,2.50,'D','000000','right','middle');

insert into TBL_FORMATOS
values('FSI-TALM2','Formato de traspasos entre bodegas','ALM_TRASPASOS');

insert into tbl_formatos_det
values('FSI-TALM2',1,'FSI_CAB','',null,null,null,259.50,'S','000000',null,null);
insert into tbl_formatos_det
values('FSI-TALM2',2,'FSI_VENTANA','',null,null,800.00,600.00,'S','000000',null,null);
insert into tbl_formatos_det
values('FSI-TALM2',3,'FSI_DET','50',null,70.00,null,2.50,'S','000000',null,null);
insert into tbl_formatos_det
values('FSI-TALM2',4,'FSI_IMPTIT','font-family: Arial, Helvetica, sans-serif; font-size: 14pt; font-style: italic; font-weight: bold; ',null,null,null,null,'S','000000',null,null);
insert into tbl_formatos_det
values('FSI-TALM2',5,'FSI_IMPETQ','font-family: Arial, Helvetica, sans-serif; font-size: 10pt; font-style: normal; font-weight: bold; ',null,null,null,null,'S','000000',null,null);
insert into tbl_formatos_det
values('FSI-TALM2',6,'FSI_IMPCAB','font-family: Arial, Helvetica, sans-serif; font-size: 8pt; font-style: normal; font-weight: bold; ',null,null,null,null,'S','000000',null,null);
insert into tbl_formatos_det
values('FSI-TALM2',7,'FSI_IMPDET','font-family: Arial, Helvetica, sans-serif; font-size: 6pt; font-style: normal; font-weight: bold; ',null,null,null,null,'S','000000',null,null);
insert into tbl_formatos_det
values('FSI-TALM2',8,'FSI_TITULO','Traspaso Entre Bodegas',0.00,0.00,190.00,20.00,'C','000000','center','middle');
insert into tbl_formatos_det
values('FSI-TALM2',9,'FSI_ETIQUETA','Bodega:',0.00,20.00,50.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-TALM2',10,'bodega','general',50.00,20.00,20.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-TALM2',11,'FSI_ETIQUETA','Salida:',100.00,20.00,50.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-TALM2',12,'salida',' |0',150.00,20.00,45.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-TALM2',13,'FSI_ETIQUETA','Fecha:',0.00,30.00,50.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-TALM2',14,'fecha','dd/MM/yyyy',50.00,30.00,45.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-TALM2',15,'FSI_ETIQUETA','Referencia:',100.00,30.00,50.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-TALM2',16,'referencia','general',150.00,30.00,50.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-TALM2',17,'FSI_ETIQUETA','Destino:',0.00,40.00,40.00,5.00,'C','000000','left','top');
insert into tbl_formatos_det
values('FSI-TALM2',18,'bodegadest','general',40.00,40.00,150.00,10.00,'C','000000','left','top');
insert into tbl_formatos_det
values('FSI-TALM2',19,'FSI_ETIQUETA','Concepto:',0.00,50.00,40.00,5.00,'C','000000','left','top');
insert into tbl_formatos_det
values('FSI-TALM2',20,'concepto','general',40.00,50.00,150.00,10.00,'C','000000','left','top');
insert into tbl_formatos_det
values('FSI-TALM2',21,'FSI_ETIQUETA','Clave',0.00,60.00,30.00,10.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-TALM2',22,'FSI_ETIQUETA','Descripci√≥n',30.00,60.00,100.00,10.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-TALM2',23,'FSI_ETIQUETA','Total',130,60.00,45.00,10.00,'C','000000','right','middle');
insert into tbl_formatos_det
values('FSI-TALM2',24,'FSI_ETIQUETA','Uni',175,60.00,25.00,10.00,'C','000000','center','middle');
insert into tbl_formatos_det
values('FSI-TALM2',25,'FSI_LH','t_negra',0.00,60.00,200.00,0.20,'C','000000','center','middle');
insert into tbl_formatos_det
values('FSI-TALM2',26,'id_prod','general',0.00,0.00,30.00,2.50,'D','000000','left','middle');
insert into tbl_formatos_det
values('FSI-TALM2',27,'descripcion','general',30.00,0.00,100.00,2.50,'D','000000','left','middle');
insert into tbl_formatos_det
values('FSI-TALM2',28,'cantidad',',|.|2|0',130.00,0.00,45.00,2.50,'D','000000','right','middle');
insert into tbl_formatos_det
values('FSI-TALM2',29,'unidad','general',175.00,0.00,25.00,2.50,'D','000000','center','middle');



--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_invserv_requerimientos_impcab AS 
 SELECT m.id_movimiento, m.requerimiento, m.status, m.fecha, m.fechaentrega AS entrega, m.id_bodega, ( SELECT tbl_invserv_bodegas.nombre
           FROM tbl_invserv_bodegas
          WHERE tbl_invserv_bodegas.id_bodega = m.id_bodega) AS bodega, m.id_bodegadest, c.nombre AS bodegadest, m.concepto, m.referencia
   FROM tbl_invserv_almacen_bod_req_cab m
   JOIN tbl_invserv_bodegas c ON m.id_bodegadest = c.id_bodega;



--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_invserv_requerimientos_impdet AS 
 SELECT m.id_movimiento, m.partida, m.id_prod, c.descripcion, m.cantidad, c.id_unidadsalida AS unidad
   FROM tbl_invserv_almacen_bod_req_det m
   JOIN tbl_invserv_inventarios c ON m.id_prod::text = c.id_prod::text;

insert into TBL_FORMATOS
values('FSI-RALM','Formato de requrimientos entre bodegas','ALM_REQUERIMIENTOS');

insert into tbl_formatos_det
values('FSI-RALM',1,'FSI_CAB','',null,null,null,259.50,'S','000000',null,null);
insert into tbl_formatos_det
values('FSI-RALM',2,'FSI_VENTANA','',null,null,800.00,600.00,'S','000000',null,null);
insert into tbl_formatos_det
values('FSI-RALM',3,'FSI_DET','50',null,70.00,null,2.50,'S','000000',null,null);
insert into tbl_formatos_det
values('FSI-RALM',4,'FSI_IMPTIT','font-family: Arial, Helvetica, sans-serif; font-size: 14pt; font-style: italic; font-weight: bold; ',null,null,null,null,'S','000000',null,null);
insert into tbl_formatos_det
values('FSI-RALM',5,'FSI_IMPETQ','font-family: Arial, Helvetica, sans-serif; font-size: 10pt; font-style: normal; font-weight: bold; ',null,null,null,null,'S','000000',null,null);
insert into tbl_formatos_det
values('FSI-RALM',6,'FSI_IMPCAB','font-family: Arial, Helvetica, sans-serif; font-size: 8pt; font-style: normal; font-weight: bold; ',null,null,null,null,'S','000000',null,null);
insert into tbl_formatos_det
values('FSI-RALM',7,'FSI_IMPDET','font-family: Arial, Helvetica, sans-serif; font-size: 6pt; font-style: normal; font-weight: bold; ',null,null,null,null,'S','000000',null,null);
insert into tbl_formatos_det
values('FSI-RALM',8,'FSI_TITULO','Requerimiento Entre Bodegas',0.00,0.00,190.00,20.00,'C','000000','center','middle');
insert into tbl_formatos_det
values('FSI-RALM',9,'FSI_ETIQUETA','Bodega Solicitante:',0.00,20.00,50.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-RALM',10,'bodega','general',50.00,20.00,20.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-RALM',11,'FSI_ETIQUETA','Requerimiento:',100.00,20.00,50.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-RALM',12,'requerimiento',' |0',150.00,20.00,45.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-RALM',13,'FSI_ETIQUETA','Fecha:',0.00,30.00,50.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-RALM',14,'fecha','dd/MM/yyyy',50.00,30.00,45.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-RALM',15,'FSI_ETIQUETA','Referencia:',100.00,30.00,50.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-RALM',16,'referencia','general',150.00,30.00,50.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-RALM',17,'FSI_ETIQUETA','Abastecido por:',0.00,40.00,40.00,5.00,'C','000000','left','top');
insert into tbl_formatos_det
values('FSI-RALM',18,'bodegadest','general',40.00,40.00,150.00,10.00,'C','000000','left','top');
insert into tbl_formatos_det
values('FSI-RALM',19,'FSI_ETIQUETA','Concepto:',0.00,50.00,40.00,5.00,'C','000000','left','top');
insert into tbl_formatos_det
values('FSI-RALM',20,'concepto','general',40.00,50.00,150.00,10.00,'C','000000','left','top');
insert into tbl_formatos_det
values('FSI-RALM',21,'FSI_ETIQUETA','Clave',0.00,60.00,30.00,10.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-RALM',22,'FSI_ETIQUETA','Descripci√≥n',30.00,60.00,100.00,10.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-RALM',23,'FSI_ETIQUETA','Total',130,60.00,45.00,10.00,'C','000000','right','middle');
insert into tbl_formatos_det
values('FSI-RALM',24,'FSI_ETIQUETA','Uni',175,60.00,25.00,10.00,'C','000000','center','middle');
insert into tbl_formatos_det
values('FSI-RALM',25,'FSI_LH','t_negra',0.00,60.00,200.00,0.20,'C','000000','center','middle');
insert into tbl_formatos_det
values('FSI-RALM',26,'id_prod','general',0.00,0.00,30.00,2.50,'D','000000','left','middle');
insert into tbl_formatos_det
values('FSI-RALM',27,'descripcion','general',30.00,0.00,100.00,2.50,'D','000000','left','middle');
insert into tbl_formatos_det
values('FSI-RALM',28,'cantidad',',|.|2|0',130.00,0.00,45.00,2.50,'D','000000','right','middle');
insert into tbl_formatos_det
values('FSI-RALM',29,'unidad','general',175.00,0.00,25.00,2.50,'D','000000','center','middle');



--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_invserv_chfis_impcab AS 
 SELECT cf.id_chfis, cf.numero AS chequeo, cf.fecha, cf.status, cf.cerrado, cf.generado, cf.id_bodega, b.nombre AS bodega
   FROM tbl_invserv_chfis_cab cf
   JOIN tbl_invserv_bodegas b ON cf.id_bodega = b.id_bodega;



--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_invserv_chfis_impdet AS 
 SELECT c.id_chfis, d.id_prod, i.descripcion, d.cantidad, i.id_unidadsalida AS unidad, d.diff, i.status, c.id_bodega, e.stockmin, e.stockmax, d.cantidad + d.diff AS existencia
   FROM tbl_invserv_chfis_cab c
   JOIN tbl_invserv_chfis_det d ON c.id_chfis = d.id_chfis
   JOIN tbl_invserv_existencias e ON c.id_bodega = e.id_bodega AND d.id_prod::text = e.id_prod::text
   JOIN tbl_invserv_inventarios i ON d.id_prod::text = i.id_prod::text;

insert into TBL_FORMATOS
values('FSI-CHFI','Formato de Captura de Chequeo Fisico con Totales','ALM_CHFIS');

insert into tbl_formatos_det
values('FSI-CHFI',1,'FSI_CAB','',null,null,null,259.50,'S','000000',null,null);
insert into tbl_formatos_det
values('FSI-CHFI',2,'FSI_VENTANA','',null,null,800.00,600.00,'S','000000',null,null);
insert into tbl_formatos_det
values('FSI-CHFI',3,'FSI_DET','0',null,50.00,null,5.00,'S','000000',null,null);
insert into tbl_formatos_det
values('FSI-CHFI',4,'FSI_IMPTIT','font-family: Arial, Helvetica, sans-serif; font-size: 14pt; font-style: italic; font-weight: bold; ',null,null,null,null,'S','000000',null,null);
insert into tbl_formatos_det
values('FSI-CHFI',5,'FSI_IMPETQ','font-family: Arial, Helvetica, sans-serif; font-size: 10pt; font-style: normal; font-weight: bold; ',null,null,null,null,'S','000000',null,null);
insert into tbl_formatos_det
values('FSI-CHFI',6,'FSI_IMPCAB','font-family: Arial, Helvetica, sans-serif; font-size: 8pt; font-style: normal; font-weight: bold; ',null,null,null,null,'S','000000',null,null);
insert into tbl_formatos_det
values('FSI-CHFI',7,'FSI_IMPDET','font-family: Arial, Helvetica, sans-serif; font-size: 6pt; font-style: normal; font-weight: bold; ',null,null,null,null,'S','000000',null,null);
insert into tbl_formatos_det
values('FSI-CHFI',8,'FSI_TITULO','Captura de Chequeo F√≠sico',0.00,0.00,190.00,20.00,'C','000000','center','middle');
insert into tbl_formatos_det
values('FSI-CHFI',9,'FSI_ETIQUETA','Bodega:',0.00,20.00,50.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-CHFI',10,'bodega','general',50.00,20.00,20.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-CHFI',11,'FSI_ETIQUETA','Chequeo:',100.00,20.00,50.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-CHFI',12,'chequeo',' |0',150.00,20.00,45.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-CHFI',13,'FSI_ETIQUETA','Fecha:',0.00,30.00,50.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-CHFI',14,'fecha','dd/MM/yyyy',50.00,30.00,45.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-CHFI',15,'FSI_ETIQUETA','Cerrado, Generado:',100.00,30.00,50.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-CHFI',16,'cerrado','SI_NO',150.00,30.00,25.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-CHFI',17,'generado','SI_NO',175.00,30.00,25.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-CHFI',18,'FSI_ETIQUETA','Clave',0.00,40.00,25.00,10.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-CHFI',19,'FSI_ETIQUETA','Descripci√≥n',25.00,40.00,75.00,10.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-CHFI',20,'FSI_ETIQUETA','Total',100,40.00,30.00,10.00,'C','000000','right','middle');
insert into tbl_formatos_det
values('FSI-CHFI',21,'FSI_ETIQUETA','Uni',130,40.00,20.00,10.00,'C','000000','center','middle');
insert into tbl_formatos_det
values('FSI-CHFI',22,'FSI_ETIQUETA','Existencia',150,40.00,45.00,10.00,'C','000000','center','middle');
insert into tbl_formatos_det
values('FSI-CHFI',23,'FSI_LH','t_negra',0.00,40.00,200.00,0.20,'C','000000','center','middle');
insert into tbl_formatos_det
values('FSI-CHFI',24,'id_prod','general',0.00,0.00,25.00,2.50,'D','000000','left','middle');
insert into tbl_formatos_det
values('FSI-CHFI',25,'descripcion','general',25.00,0.00,75.00,2.50,'D','000000','left','middle');
insert into tbl_formatos_det
values('FSI-CHFI',26,'cantidad',',|.|2|0',100.00,0.00,30.00,2.50,'D','000000','right','middle');
insert into tbl_formatos_det
values('FSI-CHFI',27,'unidad','general',130.00,0.00,20.00,2.50,'D','000000','center','middle');
insert into tbl_formatos_det
values('FSI-CHFI',28,'FSI_LH','t_negra',150.00,2.70,45.00,0.20,'D','000000','center','middle');
   
insert into TBL_FORMATOS
values('FSI-CHFI2','Formato de Captura de Chequeo Fisico','ALM_CHFIS');

insert into tbl_formatos_det
values('FSI-CHFI2',1,'FSI_CAB','',null,null,null,259.50,'S','000000',null,null);
insert into tbl_formatos_det
values('FSI-CHFI2',2,'FSI_VENTANA','',null,null,800.00,600.00,'S','000000',null,null);
insert into tbl_formatos_det
values('FSI-CHFI2',3,'FSI_DET','0',null,50.00,null,5.00,'S','000000',null,null);
insert into tbl_formatos_det
values('FSI-CHFI2',4,'FSI_IMPTIT','font-family: Arial, Helvetica, sans-serif; font-size: 14pt; font-style: italic; font-weight: bold; ',null,null,null,null,'S','000000',null,null);
insert into tbl_formatos_det
values('FSI-CHFI2',5,'FSI_IMPETQ','font-family: Arial, Helvetica, sans-serif; font-size: 10pt; font-style: normal; font-weight: bold; ',null,null,null,null,'S','000000',null,null);
insert into tbl_formatos_det
values('FSI-CHFI2',6,'FSI_IMPCAB','font-family: Arial, Helvetica, sans-serif; font-size: 8pt; font-style: normal; font-weight: bold; ',null,null,null,null,'S','000000',null,null);
insert into tbl_formatos_det
values('FSI-CHFI2',7,'FSI_IMPDET','font-family: Arial, Helvetica, sans-serif; font-size: 6pt; font-style: normal; font-weight: bold; ',null,null,null,null,'S','000000',null,null);
insert into tbl_formatos_det
values('FSI-CHFI2',8,'FSI_TITULO','Captura de Chequeo F√≠sico',0.00,0.00,190.00,20.00,'C','000000','center','middle');
insert into tbl_formatos_det
values('FSI-CHFI2',9,'FSI_ETIQUETA','Bodega:',0.00,20.00,50.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-CHFI2',10,'bodega','general',50.00,20.00,20.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-CHFI2',11,'FSI_ETIQUETA','Chequeo:',100.00,20.00,50.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-CHFI2',12,'chequeo',' |0',150.00,20.00,45.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-CHFI2',13,'FSI_ETIQUETA','Fecha:',0.00,30.00,50.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-CHFI2',14,'fecha','dd/MM/yyyy',50.00,30.00,45.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-CHFI2',15,'FSI_ETIQUETA','Cerrado, Generado:',100.00,30.00,50.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-CHFI2',16,'cerrado','SI_NO',150.00,30.00,25.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-CHFI2',17,'generado','SI_NO',175.00,30.00,25.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-CHFI2',18,'FSI_ETIQUETA','Clave',0.00,40.00,25.00,10.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-CHFI2',19,'FSI_ETIQUETA','Descripci√≥n',25.00,40.00,105.00,10.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-CHFI2',20,'FSI_ETIQUETA','Uni',130,40.00,20.00,10.00,'C','000000','center','middle');
insert into tbl_formatos_det
values('FSI-CHFI2',21,'FSI_ETIQUETA','Existencia',150,40.00,45.00,10.00,'C','000000','center','middle');
insert into tbl_formatos_det
values('FSI-CHFI2',22,'FSI_LH','t_negra',0.00,40.00,200.00,0.20,'C','000000','center','middle');
insert into tbl_formatos_det
values('FSI-CHFI2',23,'id_prod','general',0.00,0.00,25.00,2.50,'D','000000','left','middle');
insert into tbl_formatos_det
values('FSI-CHFI2',24,'descripcion','general',25.00,0.00,105.00,2.50,'D','000000','left','middle');
insert into tbl_formatos_det
values('FSI-CHFI2',25,'unidad','general',130.00,0.00,20.00,2.50,'D','000000','center','middle');
insert into tbl_formatos_det
values('FSI-CHFI2',26,'FSI_LH','t_negra',150.00,2.70,45.00,0.20,'D','000000','center','middle');
 
insert into TBL_FORMATOS
values('FSI-CHFI3','Formato de Diferencias en Chequeo Fisico','ALM_CHFIS');

insert into tbl_formatos_det
values('FSI-CHFI3',1,'FSI_CAB','',null,null,null,259.50,'S','000000',null,null);
insert into tbl_formatos_det
values('FSI-CHFI3',2,'FSI_VENTANA','',null,null,800.00,600.00,'S','000000',null,null);
insert into tbl_formatos_det
values('FSI-CHFI3',3,'FSI_DET','0',null,50.00,null,2.50,'S','000000',null,null);
insert into tbl_formatos_det
values('FSI-CHFI3',4,'FSI_IMPTIT','font-family: Arial, Helvetica, sans-serif; font-size: 14pt; font-style: italic; font-weight: bold; ',null,null,null,null,'S','000000',null,null);
insert into tbl_formatos_det
values('FSI-CHFI3',5,'FSI_IMPETQ','font-family: Arial, Helvetica, sans-serif; font-size: 10pt; font-style: normal; font-weight: bold; ',null,null,null,null,'S','000000',null,null);
insert into tbl_formatos_det
values('FSI-CHFI3',6,'FSI_IMPCAB','font-family: Arial, Helvetica, sans-serif; font-size: 8pt; font-style: normal; font-weight: bold; ',null,null,null,null,'S','000000',null,null);
insert into tbl_formatos_det
values('FSI-CHFI3',7,'FSI_IMPDET','font-family: Arial, Helvetica, sans-serif; font-size: 6pt; font-style: normal; font-weight: bold; ',null,null,null,null,'S','000000',null,null);
insert into tbl_formatos_det
values('FSI-CHFI3',8,'FSI_TITULO','Captura de Chequeo F√≠sico',0.00,0.00,190.00,20.00,'C','000000','center','middle');
insert into tbl_formatos_det
values('FSI-CHFI3',9,'FSI_ETIQUETA','Bodega:',0.00,20.00,50.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-CHFI3',10,'bodega','general',50.00,20.00,20.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-CHFI3',11,'FSI_ETIQUETA','Chequeo:',100.00,20.00,50.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-CHFI3',12,'chequeo',' |0',150.00,20.00,45.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-CHFI3',13,'FSI_ETIQUETA','Fecha:',0.00,30.00,50.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-CHFI3',14,'fecha','dd/MM/yyyy',50.00,30.00,45.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-CHFI3',15,'FSI_ETIQUETA','Cerrado, Generado:',100.00,30.00,50.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-CHFI3',16,'cerrado','SI_NO',150.00,30.00,25.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-CHFI3',17,'generado','SI_NO',175.00,30.00,25.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-CHFI3',18,'FSI_ETIQUETA','Clave',0.00,40.00,25.00,10.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-CHFI3',19,'FSI_ETIQUETA','Descripci√≥n',25.00,40.00,75.00,10.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-CHFI3',20,'FSI_ETIQUETA','Total',100.00,40.00,25.00,10.00,'C','000000','right','middle');
insert into tbl_formatos_det
values('FSI-CHFI3',21,'FSI_ETIQUETA','Real',125.00,40.00,25.00,10.00,'C','000000','right','middle');
insert into tbl_formatos_det
values('FSI-CHFI3',22,'FSI_ETIQUETA','Diff',150.00,40.00,25.00,10.00,'C','000000','right','middle');
insert into tbl_formatos_det
values('FSI-CHFI3',23,'FSI_ETIQUETA','Uni',175,40.00,20.00,10.00,'C','000000','center','middle');
insert into tbl_formatos_det
values('FSI-CHFI3',24,'FSI_LH','t_negra',0.00,40.00,200.00,0.20,'C','000000','center','middle');
insert into tbl_formatos_det
values('FSI-CHFI3',25,'id_prod','general',0.00,0.00,25.00,2.50,'D','000000','left','middle');
insert into tbl_formatos_det
values('FSI-CHFI3',26,'descripcion','general',25.00,0.00,75.00,2.50,'D','000000','left','middle');
insert into tbl_formatos_det
values('FSI-CHFI3',27,'cantidad',',|.|2|0',100.00,0.00,25.00,2.50,'D','000000','right','middle');
insert into tbl_formatos_det
values('FSI-CHFI3',28,'existencia',',|.|2|0',125.00,0.00,25.00,2.50,'D','000000','right','middle');
insert into tbl_formatos_det
values('FSI-CHFI3',29,'diff',',|.|2|0',150.00,0.00,25.00,2.50,'D','000000','right','middle');
insert into tbl_formatos_det
values('FSI-CHFI3',30,'unidad','general',175.00,0.00,20.00,2.50,'D','000000','center','middle');



--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_ventas_cotizaciones_impcab AS 
 SELECT rc.id_vc AS id_cotizacion, rc.id_entidad, rc.numero, rc.fecha, rc.referencia, rc.status, rc.moneda AS id_moneda, m.moneda, rc.tc, rc.id_clipro AS id_cliente, COALESCE(cl.id_numero, 0) AS num_cliente, COALESCE(cl.nombre, 'Cliente de Mostrador'::character varying) AS cliente, ''::character varying AS pol, rc.id_bodega, b.nombre, rc.condicion, rc.obs, rc.mimporte AS importe, rc.mdescuento AS descuento, rc.msubtotal AS subtotal, rc.miva AS iva, rc.ieps, rc.ivaret, rc.isrret, rc.mtotal AS total, COALESCE(cl.rfc, 'XAXX010101000'::character varying) AS rfc, COALESCE(cl.direccion, ''::character varying(80)) AS direccion, COALESCE(cl.direccion, ''::character varying) AS calle, COALESCE(cl.noext, ''::character varying) AS noext, COALESCE(cl.noint, ''::character varying) AS noint, COALESCE(cl.colonia, ''::character varying) AS colonia, COALESCE(cl.poblacion, ''::character varying(80)) AS poblacion, COALESCE(cl.poblacion, ''::character varying) AS localidad, COALESCE(cl.municipio, ''::character varying) AS 
municipio, 
        CASE
            WHEN cl.estado IS NULL THEN ''::character varying
            ELSE 
            CASE
                WHEN (( SELECT tbl_sat_estados.nombre
                   FROM tbl_sat_estados
                  WHERE tbl_sat_estados.codestado::text = cl.estado::text AND tbl_sat_estados.codpais3 = cl.pais::bpchar)) IS NULL THEN cl.estado
                ELSE ( SELECT tbl_sat_estados.nombre
                   FROM tbl_sat_estados
                  WHERE tbl_sat_estados.codestado::text = cl.estado::text AND tbl_sat_estados.codpais3 = cl.pais::bpchar)
            END
        END AS estado, 
        CASE
            WHEN cl.pais IS NULL THEN 'M√©xico'::character varying
            ELSE 
            CASE
                WHEN (( SELECT tbl_sat_paises.nombre
                   FROM tbl_sat_paises
                  WHERE tbl_sat_paises.alfa3 = cl.pais::bpchar)) IS NULL THEN cl.pais
                ELSE ( SELECT tbl_sat_paises.nombre
                   FROM tbl_sat_paises
                  WHERE tbl_sat_paises.alfa3 = cl.pais::bpchar)
            END
        END AS pais, COALESCE(cl.cp, ''::character varying) AS cp
   FROM tbl_ventas_cotizaciones_cab rc
   LEFT JOIN tbl_client_client cl ON cl.id_tipo = 'CL'::bpchar AND rc.id_clipro = cl.id_clave
   JOIN tbl_ventas_entidades ve ON rc.id_entidad = ve.id_entidadventa
   JOIN tbl_invserv_bodegas b ON rc.id_bodega = b.id_bodega
   JOIN tbl_cont_monedas m ON rc.moneda = m.clave
   JOIN tbl_vendedores vn ON rc.id_vendedor = vn.id_vendedor;

--ALTER TABLE view_ventas_cotizaciones_impcab

--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_ventas_cotizaciones_impdet AS 
 SELECT rd.id_vc AS id_cotizacion, rd.partida, rd.cantidad, rd.id_prod, c.descripcion, c.id_unidadsalida, rd.precio, rd.descuento, rd.iva, rd.obs, rd.importe, c.id_tipo, 
        CASE
            WHEN rd.iva = 0::numeric THEN rd.precio
            ELSE round(rd.precio + rd.precio * rd.iva / 100::numeric, 4)
        END AS precioiva, 
        CASE
            WHEN rd.iva = 0::numeric THEN 
            CASE
                WHEN rd.descuento = 0::numeric THEN round(rd.precio * rd.cantidad, 4)
                ELSE round(rd.precio * rd.cantidad - rd.precio * rd.cantidad * rd.descuento / 100::numeric, 4)
            END
            ELSE 
            CASE
                WHEN rd.descuento = 0::numeric THEN round(rd.precio * rd.cantidad + rd.precio * rd.cantidad * rd.iva / 100::numeric, 4)
                ELSE round(rd.precio * rd.cantidad - rd.precio * rd.cantidad * rd.descuento / 100::numeric + (rd.precio * rd.cantidad - rd.precio * rd.cantidad * rd.descuento / 100::numeric) * rd.iva / 100::numeric, 4)
            END
        END AS importeiva
   FROM tbl_ventas_cotizaciones_det rd
   JOIN tbl_invserv_inventarios c ON rd.id_prod::text = c.id_prod::text;

--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_ventas_pedidos_impcab AS 
 SELECT rc.id_vc AS id_pedido, rc.id_entidad, rc.numero, rc.fecha, rc.referencia, rc.status, rc.moneda AS id_moneda, m.moneda, rc.tc, rc.id_clipro AS id_cliente, COALESCE(cl.id_numero, 0) AS num_cliente, COALESCE(cl.nombre, 'Cliente de Mostrador'::character varying) AS cliente, ''::character varying AS pol, rc.id_bodega, b.nombre, rc.condicion, rc.obs, rc.mimporte AS importe, rc.mdescuento AS descuento, rc.msubtotal AS subtotal, rc.miva AS iva, rc.ieps, rc.ivaret, rc.isrret, rc.mtotal AS total, COALESCE(cl.rfc, 'XAXX010101000'::character varying) AS rfc, COALESCE(cl.direccion, ''::character varying(80)) AS direccion, COALESCE(cl.direccion, ''::character varying) AS calle, COALESCE(cl.noext, ''::character varying) AS noext, COALESCE(cl.noint, ''::character varying) AS noint, COALESCE(cl.colonia, ''::character varying) AS colonia, COALESCE(cl.poblacion, ''::character varying(80)) AS poblacion, COALESCE(cl.poblacion, ''::character varying) AS localidad, COALESCE(cl.municipio, ''::character varying) AS municipio,
 
        CASE
            WHEN cl.estado IS NULL THEN ''::character varying
            ELSE 
            CASE
                WHEN (( SELECT tbl_sat_estados.nombre
                   FROM tbl_sat_estados
                  WHERE tbl_sat_estados.codestado::text = cl.estado::text AND tbl_sat_estados.codpais3 = cl.pais::bpchar)) IS NULL THEN cl.estado
                ELSE ( SELECT tbl_sat_estados.nombre
                   FROM tbl_sat_estados
                  WHERE tbl_sat_estados.codestado::text = cl.estado::text AND tbl_sat_estados.codpais3 = cl.pais::bpchar)
            END
        END AS estado, 
        CASE
            WHEN cl.pais IS NULL THEN 'M√©xico'::character varying
            ELSE 
            CASE
                WHEN (( SELECT tbl_sat_paises.nombre
                   FROM tbl_sat_paises
                  WHERE tbl_sat_paises.alfa3 = cl.pais::bpchar)) IS NULL THEN cl.pais
                ELSE ( SELECT tbl_sat_paises.nombre
                   FROM tbl_sat_paises
                  WHERE tbl_sat_paises.alfa3 = cl.pais::bpchar)
            END
        END AS pais, COALESCE(cl.cp, ''::character varying) AS cp
   FROM tbl_ventas_pedidos_cab rc
   LEFT JOIN tbl_client_client cl ON cl.id_tipo = 'CL'::bpchar AND rc.id_clipro = cl.id_clave
   JOIN tbl_ventas_entidades ve ON rc.id_entidad = ve.id_entidadventa
   JOIN tbl_invserv_bodegas b ON rc.id_bodega = b.id_bodega
   JOIN tbl_cont_monedas m ON rc.moneda = m.clave
   JOIN tbl_vendedores vn ON rc.id_vendedor = vn.id_vendedor;

--ALTER TABLE view_ventas_pedidos_impcab

--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_ventas_pedidos_impdet AS 
 SELECT rd.id_vc AS id_pedido, rd.partida, rd.cantidad, rd.id_prod, c.descripcion, c.id_unidadsalida, rd.precio, rd.descuento, rd.iva, rd.obs, rd.importe, c.id_tipo, 
        CASE
            WHEN rd.iva = 0::numeric THEN rd.precio
            ELSE round(rd.precio + rd.precio * rd.iva / 100::numeric, 4)
        END AS precioiva, 
        CASE
            WHEN rd.iva = 0::numeric THEN 
            CASE
                WHEN rd.descuento = 0::numeric THEN round(rd.precio * rd.cantidad, 4)
                ELSE round(rd.precio * rd.cantidad - rd.precio * rd.cantidad * rd.descuento / 100::numeric, 4)
            END
            ELSE 
            CASE
                WHEN rd.descuento = 0::numeric THEN round(rd.precio * rd.cantidad + rd.precio * rd.cantidad * rd.iva / 100::numeric, 4)
                ELSE round(rd.precio * rd.cantidad - rd.precio * rd.cantidad * rd.descuento / 100::numeric + (rd.precio * rd.cantidad - rd.precio * rd.cantidad * rd.descuento / 100::numeric) * rd.iva / 100::numeric, 4)
            END
        END AS importeiva
   FROM tbl_ventas_pedidos_det rd
   JOIN tbl_invserv_inventarios c ON rd.id_prod::text = c.id_prod::text;

insert into tbl_formatos(ID_Formato,Descripcion,Tipo)
values('FSI-VFAC','Factura CFDI','VEN_FAC');

insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VFAC',1,'FSI_CAB','',null,null,null,259.50,'S','000000','','');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VFAC',2,'FSI_VENTANA','',null,null,800.00,600.00,'S','000000','','');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VFAC',3,'FSI_DET','18',null,95.00,null,2.50,'S','000000','','');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VFAC',4,'FSI_IMPTIT','font-family: Arial, Helvetica, sans-serif; font-size: 16pt; font-style: italic; font-weight: bold;',null,null,null,null,'S','000000','','');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VFAC',5,'FSI_IMPETQ','font-family: Arial, Helvetica, sans-serif; font-size: 8pt; font-style: normal; font-weight: bold;',null,null,null,null,'S','000000','','');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VFAC',6,'FSI_IMPCAB','font-family: Arial, Helvetica, sans-serif; font-size: 8pt; font-style: normal; font-weight: normal;',null,null,null,null,'S','000000','','');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VFAC',7,'FSI_IMPDET','font-family: Arial, Helvetica, sans-serif; font-size: 7pt; font-style: normal; font-weight: normal;',null,null,null,null,'S','000000','','');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VFAC',8,'FSI_TITULO','FACTURA',.00,.00,95.00,10.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VFAC',9,'FSI_ETIQUETA','Calle',.00,25.00,40.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VFAC',10,'FSI_ETIQUETA','No. Ext - Int',40.00,25.00,20.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VFAC',11,'FSI_ETIQUETA','Colonia',.00,30.00,40.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VFAC',12,'FSI_ETIQUETA','Localidad',40.00,30.00,40.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VFAC',13,'FSI_ETIQUETA','Municipio',.00,35.00,40.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VFAC',14,'FSI_ETIQUETA','Estado',40.00,35.00,40.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VFAC',15,'FSI_ETIQUETA','C.P.',.00,40.00,40.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VFAC',16,'FSI_ETIQUETA','Pais: Mexico',40.00,40.00,40.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VFAC',17,'FSI_TITULO','Nombre de la Empresa S.A. de C.V.',.00,10.00,95.00,7.50,'C','000000','left','bottom');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VFAC',18,'FSI_TITULO','RFC: XXX######XXX',.00,17.50,95.00,7.50,'C','000000','left','bottom');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VFAC',19,'FSI_ETIQUETA','FOLIO FISCAL',95.00,.00,95.00,2.50,'C','000000','right','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VFAC',20,'TFD_UUID','general',95.00,2.50,95.00,2.50,'C','000000','right','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VFAC',21,'FSI_ETIQUETA','SERIE CERTIFICADO SAT',95.00,5.00,95.00,2.50,'C','000000','right','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VFAC',22,'TFD_NoCertificadoSAT','general',95.00,7.50,95.00,2.50,'C','000000','right','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VFAC',23,'FSI_ETIQUETA','FECHA Y HORA DE CERTIFICACION',95.00,10.00,95.00,2.50,'C','000000','right','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VFAC',24,'TFD_FechaTimbre','dd/MMM/yyyy hh:mm:ss',95.00,12.50,95.00,2.50,'C','000000','right','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VFAC',25,'FSI_ETIQUETA','FECHA DE ELABORACION',95.00,15.00,95.00,2.50,'C','000000','right','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VFAC',26,'CFD_Fecha','dd/MMM/yyyy hh:mm:ss',95.00,17.50,95.00,2.50,'C','000000','right','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VFAC',27,'FSI_ETIQUETA','DATOS DEL RECEPTOR',.00,50.00,95.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VFAC',28,'FSI_ETIQUETA','RFC:',.00,55.00,10.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VFAC',29,'RFC','general',10.00,55.00,30.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VFAC',30,'Cliente','general',.00,60.00,95.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VFAC',31,'Calle','general',.00,65.00,40.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VFAC',32,'NoExt','general',40.00,65.00,20.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VFAC',33,'NoInt','general',60.00,65.00,20.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VFAC',34,'Colonia','general',.00,70.00,40.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VFAC',35,'Localidad','general',40.00,70.00,40.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VFAC',36,'Municipio','general',.00,75.00,40.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VFAC',37,'Estado','general',40.00,75.00,40.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VFAC',38,'CP','general',.00,80.00,40.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VFAC',39,'Pais','general',40.00,80.00,40.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VFAC',40,'FSI_ETIQUETA','EMITIDO EN:',105.00,50.00,85.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VFAC',41,'CFD_Nombre','general',105.00,55.00,85.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VFAC',42,'CFD_Calle','general',105.00,60.00,40.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VFAC',43,'CFD_NoExt','general',145.00,60.00,20.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VFAC',44,'CFD_NoInt','general',165.00,60.00,20.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VFAC',45,'CFD_Colonia','general',105.00,65.00,40.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VFAC',46,'CFD_Localidad','general',145.00,65.00,40.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VFAC',47,'CFD_Municipio','general',105.00,70.00,40.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VFAC',48,'CFD_Estado','general',145.00,70.00,40.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VFAC',49,'CFD_CP','general',105.00,75.00,40.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VFAC',50,'CFD_Pais','general',145.00,75.00,40.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VFAC',51,'FSI_ETIQUETA','DOC INT:',105.00,80.00,20.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VFAC',52,'Numero',' |0',125.00,80.00,20.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VFAC',53,'FSI_ETIQUETA','FSI_QRCODE',.00,145.00,55.00,55.00,'C','000000','left','top');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VFAC',54,'FSI_ETIQUETA','ESTE DOCUMENTO ES UNA REPRESENTACION IMPRESA DE UN CFDI',.00,245.00,190.00,5.00,'C','000000','center','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VFAC',55,'TFD_CadenaOriginal','general',.00,235.00,190.00,10.00,'C','000000','left','top');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VFAC',56,'FSI_ETIQUETA','CADENA ORIGINAL DEL COMPLEMENTO DE CERTIFICACION DEL SAT',.00,230.00,190.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VFAC',57,'TFD_SelloSAT','general',.00,220.00,190.00,10.00,'C','000000','left','top');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VFAC',58,'FSI_ETIQUETA','SELLO DEL SAT',.00,215.00,190.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VFAC',59,'CFD_Sello','general',.00,205.00,190.00,10.00,'C','000000','left','top');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VFAC',60,'FSI_ETIQUETA','SELLO DEL CFDI',.00,200.00,190.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VFAC',61,'FSI_ETIQUETA','CANT',.00,90.00,12.00,5.00,'C','000000','right','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VFAC',62,'FSI_ETIQUETA','UN',12.00,90.00,5.00,5.00,'C','000000','center','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VFAC',63,'FSI_ETIQUETA','CLAVE',17.00,90.00,17.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VFAC',64,'FSI_ETIQUETA','DESCRIPCION',34.00,90.00,66.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VFAC',65,'FSI_ETIQUETA','PRECIO',160.00,90.00,15.00,5.00,'C','000000','right','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VFAC',66,'FSI_ETIQUETA','IMPORTE',175.00,90.00,15.00,5.00,'C','000000','right','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VFAC',67,'Total','LETRA',55.00,160.00,85.00,10.00,'C','000000','left','top');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VFAC',68,'FSI_ETIQUETA','PAGO EN UNA SOLA EXHIBICION',55.00,155.00,85.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VFAC',69,'FSI_ETIQUETA','SUB TOTAL',140.00,155.00,20.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VFAC',70,'SubTotal',',|.|4|0',160.00,155.00,30.00,5.00,'C','000000','right','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VFAC',71,'FSI_ETIQUETA','IVA 16%',140.00,160.00,20.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VFAC',72,'FSI_ETIQUETA','TOTAL',140.00,165.00,20.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VFAC',73,'IVA',',|.|4|0',160.00,160.00,30.00,5.00,'C','000000','right','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VFAC',74,'Total',',|.|4|0',160.00,165.00,30.00,5.00,'C','000000','right','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VFAC',75,'FSI_ETIQUETA','OBSERVACIONES',100.00,90.00,60.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VFAC',76,'FSI_ETIQUETA','REF:',145.00,80.00,20.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VFAC',77,'Referencia','general',165.00,80.00,20.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VFAC',78,'FSI_ETIQUETA','REGIMEN FISCAL: Regimen General De Ley',95.00,30.00,95.00,2.50,'C','000000','right','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VFAC',79,'FSI_ETIQUETA','LUGAR DE EXPEDICION',95.00,20.00,95.00,2.50,'C','000000','right','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VFAC',80,'CFD_LugarExpedicion','general',95.00,22.50,95.00,2.50,'C','000000','right','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VFAC',81,'FSI_ETIQUETA','METODO DE PAGO',95.00,25.00,95.00,2.50,'C','000000','right','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VFAC',82,'CFD_MetodoDePago','general',95.00,27.50,95.00,2.50,'C','000000','right','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VFAC',83,'Cantidad',',|.|3|0',.00,.00,12.00,2.50,'D','000000','right','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VFAC',84,'ID_UnidadSalida','general',12.00,.00,5.00,2.50,'D','000000','center','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VFAC',85,'ID_Prod','general',17.00,.00,17.00,2.50,'D','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VFAC',86,'Descripcion','general',34.00,.00,66.00,2.50,'D','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VFAC',87,'Precio',',|.|4|0',160.00,.00,15.00,2.50,'D','000000','right','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VFAC',88,'Importe',',|.|4|0',175.00,.00,15.00,2.50,'D','000000','right','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VFAC',89,'Obs','general',100.00,.00,60.00,2.50,'D','000000','left','middle');

--Formato de Remision
insert into tbl_formatos(ID_Formato,Descripcion,Tipo)
values('FSI-VREM','Remision CFDI','VEN_REM');

insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VREM',1,'FSI_CAB','',null,null,null,259.50,'S','000000','','');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VREM',2,'FSI_VENTANA','',null,null,800.00,600.00,'S','000000','','');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VREM',3,'FSI_DET','18',null,95.00,null,2.50,'S','000000','','');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VREM',4,'FSI_IMPTIT','font-family: Arial, Helvetica, sans-serif; font-size: 16pt; font-style: italic; font-weight: bold;',null,null,null,null,'S','000000','','');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VREM',5,'FSI_IMPETQ','font-family: Arial, Helvetica, sans-serif; font-size: 8pt; font-style: normal; font-weight: bold;',null,null,null,null,'S','000000','','');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VREM',6,'FSI_IMPCAB','font-family: Arial, Helvetica, sans-serif; font-size: 8pt; font-style: normal; font-weight: normal;',null,null,null,null,'S','000000','','');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VREM',7,'FSI_IMPDET','font-family: Arial, Helvetica, sans-serif; font-size: 7pt; font-style: normal; font-weight: normal;',null,null,null,null,'S','000000','','');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VREM',8,'FSI_TITULO','REMISION',.00,.00,95.00,10.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VREM',9,'FSI_ETIQUETA','Calle',.00,25.00,40.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VREM',10,'FSI_ETIQUETA','No. Ext - Int',40.00,25.00,20.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VREM',11,'FSI_ETIQUETA','Colonia',.00,30.00,40.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VREM',12,'FSI_ETIQUETA','Localidad',40.00,30.00,40.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VREM',13,'FSI_ETIQUETA','Municipio',.00,35.00,40.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VREM',14,'FSI_ETIQUETA','Estado',40.00,35.00,40.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VREM',15,'FSI_ETIQUETA','C.P.',.00,40.00,40.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VREM',16,'FSI_ETIQUETA','Pais: Mexico',40.00,40.00,40.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VREM',17,'FSI_TITULO','Nombre de la Empresa S.A. de C.V.',.00,10.00,95.00,7.50,'C','000000','left','bottom');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VREM',18,'FSI_TITULO','RFC: XXX######XXX',.00,17.50,95.00,7.50,'C','000000','left','bottom');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VREM',19,'FSI_ETIQUETA','FOLIO FISCAL',95.00,.00,95.00,2.50,'C','000000','right','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VREM',20,'TFD_UUID','general',95.00,2.50,95.00,2.50,'C','000000','right','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VREM',21,'FSI_ETIQUETA','SERIE CERTIFICADO SAT',95.00,5.00,95.00,2.50,'C','000000','right','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VREM',22,'TFD_NoCertificadoSAT','general',95.00,7.50,95.00,2.50,'C','000000','right','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VREM',23,'FSI_ETIQUETA','FECHA Y HORA DE CERTIFICACION',95.00,10.00,95.00,2.50,'C','000000','right','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VREM',24,'TFD_FechaTimbre','dd/MMM/yyyy hh:mm:ss',95.00,12.50,95.00,2.50,'C','000000','right','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VREM',25,'FSI_ETIQUETA','FECHA DE ELABORACION',95.00,15.00,95.00,2.50,'C','000000','right','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VREM',26,'CFD_Fecha','dd/MMM/yyyy hh:mm:ss',95.00,17.50,95.00,2.50,'C','000000','right','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VREM',27,'FSI_ETIQUETA','DATOS DEL RECEPTOR',.00,50.00,95.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VREM',28,'FSI_ETIQUETA','RFC:',.00,55.00,10.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VREM',29,'RFC','general',10.00,55.00,30.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VREM',30,'Cliente','general',.00,60.00,95.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VREM',31,'Calle','general',.00,65.00,40.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VREM',32,'NoExt','general',40.00,65.00,20.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VREM',33,'NoInt','general',60.00,65.00,20.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VREM',34,'Colonia','general',.00,70.00,40.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VREM',35,'Localidad','general',40.00,70.00,40.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VREM',36,'Municipio','general',.00,75.00,40.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VREM',37,'Estado','general',40.00,75.00,40.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VREM',38,'CP','general',.00,80.00,40.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VREM',39,'Pais','general',40.00,80.00,40.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VREM',40,'FSI_ETIQUETA','EMITIDO EN:',105.00,50.00,85.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VREM',41,'CFD_Nombre','general',105.00,55.00,85.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VREM',42,'CFD_Calle','general',105.00,60.00,40.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VREM',43,'CFD_NoExt','general',145.00,60.00,20.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VREM',44,'CFD_NoInt','general',165.00,60.00,20.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VREM',45,'CFD_Colonia','general',105.00,65.00,40.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VREM',46,'CFD_Localidad','general',145.00,65.00,40.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VREM',47,'CFD_Municipio','general',105.00,70.00,40.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VREM',48,'CFD_Estado','general',145.00,70.00,40.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VREM',49,'CFD_CP','general',105.00,75.00,40.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VREM',50,'CFD_Pais','general',145.00,75.00,40.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VREM',51,'FSI_ETIQUETA','DOC INT:',105.00,80.00,20.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VREM',52,'Numero',' |0',125.00,80.00,20.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VREM',53,'FSI_ETIQUETA','FSI_QRCODE',.00,145.00,55.00,55.00,'C','000000','left','top');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VREM',54,'FSI_ETIQUETA','ESTE DOCUMENTO ES UNA REPRESENTACION IMPRESA DE UN CFDI',.00,245.00,190.00,5.00,'C','000000','center','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VREM',55,'TFD_CadenaOriginal','general',.00,235.00,190.00,10.00,'C','000000','left','top');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VREM',56,'FSI_ETIQUETA','CADENA ORIGINAL DEL COMPLEMENTO DE CERTIFICACION DEL SAT',.00,230.00,190.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VREM',57,'TFD_SelloSAT','general',.00,220.00,190.00,10.00,'C','000000','left','top');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VREM',58,'FSI_ETIQUETA','SELLO DEL SAT',.00,215.00,190.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VREM',59,'CFD_Sello','general',.00,205.00,190.00,10.00,'C','000000','left','top');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VREM',60,'FSI_ETIQUETA','SELLO DEL CFDI',.00,200.00,190.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VREM',61,'FSI_ETIQUETA','CANT',.00,90.00,12.00,5.00,'C','000000','right','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VREM',62,'FSI_ETIQUETA','UN',12.00,90.00,5.00,5.00,'C','000000','center','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VREM',63,'FSI_ETIQUETA','CLAVE',17.00,90.00,17.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VREM',64,'FSI_ETIQUETA','DESCRIPCION',34.00,90.00,66.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VREM',65,'FSI_ETIQUETA','PRECIO',160.00,90.00,15.00,5.00,'C','000000','right','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VREM',66,'FSI_ETIQUETA','IMPORTE',175.00,90.00,15.00,5.00,'C','000000','right','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VREM',67,'Total','LETRA',55.00,160.00,85.00,10.00,'C','000000','left','top');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VREM',68,'FSI_ETIQUETA','PAGO EN UNA SOLA EXHIBICION',55.00,155.00,85.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VREM',69,'FSI_ETIQUETA','SUB TOTAL',140.00,155.00,20.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VREM',70,'SubTotal',',|.|4|0',160.00,155.00,30.00,5.00,'C','000000','right','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VREM',71,'FSI_ETIQUETA','IVA 16%',140.00,160.00,20.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VREM',72,'FSI_ETIQUETA','TOTAL',140.00,165.00,20.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VREM',73,'IVA',',|.|4|0',160.00,160.00,30.00,5.00,'C','000000','right','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VREM',74,'Total',',|.|4|0',160.00,165.00,30.00,5.00,'C','000000','right','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VREM',75,'FSI_ETIQUETA','OBSERVACIONES',100.00,90.00,60.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VREM',76,'FSI_ETIQUETA','REF:',145.00,80.00,20.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VREM',77,'Referencia','general',165.00,80.00,20.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VREM',78,'FSI_ETIQUETA','REGIMEN FISCAL: Regimen General De Ley',95.00,30.00,95.00,2.50,'C','000000','right','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VREM',79,'FSI_ETIQUETA','LUGAR DE EXPEDICION',95.00,20.00,95.00,2.50,'C','000000','right','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VREM',80,'CFD_LugarExpedicion','general',95.00,22.50,95.00,2.50,'C','000000','right','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VREM',81,'FSI_ETIQUETA','METODO DE PAGO',95.00,25.00,95.00,2.50,'C','000000','right','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VREM',82,'CFD_MetodoDePago','general',95.00,27.50,95.00,2.50,'C','000000','right','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VREM',83,'Cantidad',',|.|3|0',.00,.00,12.00,2.50,'D','000000','right','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VREM',84,'ID_UnidadSalida','general',12.00,.00,5.00,2.50,'D','000000','center','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VREM',85,'ID_Prod','general',17.00,.00,17.00,2.50,'D','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VREM',86,'Descripcion','general',34.00,.00,66.00,2.50,'D','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VREM',87,'Precio',',|.|4|0',160.00,.00,15.00,2.50,'D','000000','right','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VREM',88,'Importe',',|.|4|0',175.00,.00,15.00,2.50,'D','000000','right','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VREM',89,'Obs','general',100.00,.00,60.00,2.50,'D','000000','left','middle');

--Formato de devolucion
insert into tbl_formatos(ID_Formato,Descripcion,Tipo)
values('FSI-VDEV','Devolucion CFDI','VEN_DEV');

insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VDEV',1,'FSI_CAB','',null,null,null,259.50,'S','000000','','');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VDEV',2,'FSI_VENTANA','',null,null,800.00,600.00,'S','000000','','');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VDEV',3,'FSI_DET','18',null,95.00,null,2.50,'S','000000','','');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VDEV',4,'FSI_IMPTIT','font-family: Arial, Helvetica, sans-serif; font-size: 16pt; font-style: italic; font-weight: bold;',null,null,null,null,'S','000000','','');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VDEV',5,'FSI_IMPETQ','font-family: Arial, Helvetica, sans-serif; font-size: 8pt; font-style: normal; font-weight: bold;',null,null,null,null,'S','000000','','');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VDEV',6,'FSI_IMPCAB','font-family: Arial, Helvetica, sans-serif; font-size: 8pt; font-style: normal; font-weight: normal;',null,null,null,null,'S','000000','','');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VDEV',7,'FSI_IMPDET','font-family: Arial, Helvetica, sans-serif; font-size: 7pt; font-style: normal; font-weight: normal;',null,null,null,null,'S','000000','','');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VDEV',8,'FSI_TITULO','NOTA DE CREDITO',.00,.00,95.00,10.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VDEV',9,'FSI_ETIQUETA','Calle',.00,25.00,40.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VDEV',10,'FSI_ETIQUETA','No. Ext - Int',40.00,25.00,20.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VDEV',11,'FSI_ETIQUETA','Colonia',.00,30.00,40.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VDEV',12,'FSI_ETIQUETA','Localidad',40.00,30.00,40.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VDEV',13,'FSI_ETIQUETA','Municipio',.00,35.00,40.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VDEV',14,'FSI_ETIQUETA','Estado',40.00,35.00,40.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VDEV',15,'FSI_ETIQUETA','C.P.',.00,40.00,40.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VDEV',16,'FSI_ETIQUETA','Pais: Mexico',40.00,40.00,40.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VDEV',17,'FSI_TITULO','Nombre de la Empresa S.A. de C.V.',.00,10.00,95.00,7.50,'C','000000','left','bottom');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VDEV',18,'FSI_TITULO','RFC: XXX######XXX',.00,17.50,95.00,7.50,'C','000000','left','bottom');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VDEV',19,'FSI_ETIQUETA','FOLIO FISCAL',95.00,.00,95.00,2.50,'C','000000','right','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VDEV',20,'TFD_UUID','general',95.00,2.50,95.00,2.50,'C','000000','right','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VDEV',21,'FSI_ETIQUETA','SERIE CERTIFICADO SAT',95.00,5.00,95.00,2.50,'C','000000','right','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VDEV',22,'TFD_NoCertificadoSAT','general',95.00,7.50,95.00,2.50,'C','000000','right','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VDEV',23,'FSI_ETIQUETA','FECHA Y HORA DE CERTIFICACION',95.00,10.00,95.00,2.50,'C','000000','right','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VDEV',24,'TFD_FechaTimbre','dd/MMM/yyyy hh:mm:ss',95.00,12.50,95.00,2.50,'C','000000','right','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VDEV',25,'FSI_ETIQUETA','FECHA DE ELABORACION',95.00,15.00,95.00,2.50,'C','000000','right','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VDEV',26,'CFD_Fecha','dd/MMM/yyyy hh:mm:ss',95.00,17.50,95.00,2.50,'C','000000','right','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VDEV',27,'FSI_ETIQUETA','DATOS DEL RECEPTOR',.00,50.00,95.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VDEV',28,'FSI_ETIQUETA','RFC:',.00,55.00,10.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VDEV',29,'RFC','general',10.00,55.00,30.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VDEV',30,'Cliente','general',.00,60.00,95.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VDEV',31,'Calle','general',.00,65.00,40.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VDEV',32,'NoExt','general',40.00,65.00,20.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VDEV',33,'NoInt','general',60.00,65.00,20.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VDEV',34,'Colonia','general',.00,70.00,40.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VDEV',35,'Localidad','general',40.00,70.00,40.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VDEV',36,'Municipio','general',.00,75.00,40.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VDEV',37,'Estado','general',40.00,75.00,40.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VDEV',38,'CP','general',.00,80.00,40.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VDEV',39,'Pais','general',40.00,80.00,40.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VDEV',40,'FSI_ETIQUETA','EMITIDO EN:',105.00,50.00,85.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VDEV',41,'CFD_Nombre','general',105.00,55.00,85.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VDEV',42,'CFD_Calle','general',105.00,60.00,40.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VDEV',43,'CFD_NoExt','general',145.00,60.00,20.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VDEV',44,'CFD_NoInt','general',165.00,60.00,20.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VDEV',45,'CFD_Colonia','general',105.00,65.00,40.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VDEV',46,'CFD_Localidad','general',145.00,65.00,40.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VDEV',47,'CFD_Municipio','general',105.00,70.00,40.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VDEV',48,'CFD_Estado','general',145.00,70.00,40.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VDEV',49,'CFD_CP','general',105.00,75.00,40.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VDEV',50,'CFD_Pais','general',145.00,75.00,40.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VDEV',51,'FSI_ETIQUETA','DOC INT:',105.00,80.00,20.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VDEV',52,'Numero',' |0',125.00,80.00,20.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VDEV',53,'FSI_ETIQUETA','FSI_QRCODE',.00,145.00,55.00,55.00,'C','000000','left','top');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VDEV',54,'FSI_ETIQUETA','ESTE DOCUMENTO ES UNA REPRESENTACION IMPRESA DE UN CFDI',.00,245.00,190.00,5.00,'C','000000','center','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VDEV',55,'TFD_CadenaOriginal','general',.00,235.00,190.00,10.00,'C','000000','left','top');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VDEV',56,'FSI_ETIQUETA','CADENA ORIGINAL DEL COMPLEMENTO DE CERTIFICACION DEL SAT',.00,230.00,190.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VDEV',57,'TFD_SelloSAT','general',.00,220.00,190.00,10.00,'C','000000','left','top');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VDEV',58,'FSI_ETIQUETA','SELLO DEL SAT',.00,215.00,190.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VDEV',59,'CFD_Sello','general',.00,205.00,190.00,10.00,'C','000000','left','top');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VDEV',60,'FSI_ETIQUETA','SELLO DEL CFDI',.00,200.00,190.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VDEV',61,'FSI_ETIQUETA','CANT',.00,90.00,12.00,5.00,'C','000000','right','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VDEV',62,'FSI_ETIQUETA','UN',12.00,90.00,5.00,5.00,'C','000000','center','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VDEV',63,'FSI_ETIQUETA','CLAVE',17.00,90.00,17.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VDEV',64,'FSI_ETIQUETA','DESCRIPCION',34.00,90.00,66.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VDEV',65,'FSI_ETIQUETA','PRECIO',160.00,90.00,15.00,5.00,'C','000000','right','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VDEV',66,'FSI_ETIQUETA','IMPORTE',175.00,90.00,15.00,5.00,'C','000000','right','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VDEV',67,'Total','LETRA',55.00,160.00,85.00,10.00,'C','000000','left','top');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VDEV',68,'FSI_ETIQUETA','PAGO EN UNA SOLA EXHIBICION',55.00,155.00,85.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VDEV',69,'FSI_ETIQUETA','SUB TOTAL',140.00,155.00,20.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VDEV',70,'SubTotal',',|.|4|0',160.00,155.00,30.00,5.00,'C','000000','right','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VDEV',71,'FSI_ETIQUETA','IVA 16%',140.00,160.00,20.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VDEV',72,'FSI_ETIQUETA','TOTAL',140.00,165.00,20.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VDEV',73,'IVA',',|.|4|0',160.00,160.00,30.00,5.00,'C','000000','right','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VDEV',74,'Total',',|.|4|0',160.00,165.00,30.00,5.00,'C','000000','right','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VDEV',75,'FSI_ETIQUETA','OBSERVACIONES',100.00,90.00,60.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VDEV',76,'FSI_ETIQUETA','REF:',145.00,80.00,20.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VDEV',77,'Referencia','general',165.00,80.00,20.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VDEV',78,'FSI_ETIQUETA','REGIMEN FISCAL: Regimen General De Ley',95.00,30.00,95.00,2.50,'C','000000','right','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VDEV',79,'FSI_ETIQUETA','LUGAR DE EXPEDICION',95.00,20.00,95.00,2.50,'C','000000','right','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VDEV',80,'CFD_LugarExpedicion','general',95.00,22.50,95.00,2.50,'C','000000','right','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VDEV',81,'FSI_ETIQUETA','METODO DE PAGO',95.00,25.00,95.00,2.50,'C','000000','right','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VDEV',82,'CFD_MetodoDePago','general',95.00,27.50,95.00,2.50,'C','000000','right','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VDEV',83,'Cantidad',',|.|3|0',.00,.00,12.00,2.50,'D','000000','right','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VDEV',84,'ID_UnidadSalida','general',12.00,.00,5.00,2.50,'D','000000','center','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VDEV',85,'ID_Prod','general',17.00,.00,17.00,2.50,'D','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VDEV',86,'Descripcion','general',34.00,.00,66.00,2.50,'D','000000','left','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VDEV',87,'Precio',',|.|4|0',160.00,.00,15.00,2.50,'D','000000','right','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VDEV',88,'Importe',',|.|4|0',175.00,.00,15.00,2.50,'D','000000','right','middle');
insert into tbl_formatos_det(ID_Formato,ID_Part,Etiqueta,Valor,XPos,YPos,Ancho,Alto,Formato,FGColor,AlinHor,AlinVer)
values('FSI-VDEV',89,'Obs','general',100.00,.00,60.00,2.50,'D','000000','left','middle');

insert into TBL_FORMATOS
values('FSI-VFAC2','Formato plantilla para facturas Impresas','VEN_FAC');

insert into TBL_FORMATOS_DET
values('FSI-VFAC2','1','FSI_IMPTIT','font-family: Arial, Helvetica, sans-serif; font-size: 10pt; font-style: normal; font-weight: bold;',NULL,NULL,NULL,NULL,'S',NULL,NULL,NULL);
insert into TBL_FORMATOS_DET
values('FSI-VFAC2','2','FSI_IMPETQ','font-family: Arial, Helvetica, sans-serif; font-size: 9pt; font-style: italic; font-weight: bold;',NULL,NULL,NULL,NULL,'S',NULL,NULL,NULL);
insert into TBL_FORMATOS_DET
values('FSI-VFAC2','3','FSI_IMPCAB','font-family: Arial, Helvetica, sans-serif; font-size: 8pt; font-style: normal; font-weight: bold;',NULL,NULL,NULL,NULL,'S',NULL,NULL,NULL);
insert into TBL_FORMATOS_DET
values('FSI-VFAC2','4','FSI_IMPDET','font-family: Arial, Helvetica, sans-serif; font-size: 7pt; font-style: normal; font-weight: normal;',NULL,NULL,NULL,NULL,'S',NULL,NULL,NULL);
insert into TBL_FORMATOS_DET
values('FSI-VFAC2','5','FSI_CAB','',NULL,NULL,NULL,'259.40','S',NULL,NULL,NULL);
insert into TBL_FORMATOS_DET
values('FSI-VFAC2','6','FSI_VENTANA','','.00','.00','800.00','450.00','S',NULL,NULL,NULL);
insert into TBL_FORMATOS_DET
values('FSI-VFAC2','7','FSI_DET','13',NULL,'82.30',NULL,'8.00','S',NULL,NULL,NULL);
insert into TBL_FORMATOS_DET
values('FSI-VFAC2','8','FSI_ETIQUETA','Fecha','72.30','52.30','75.00','5.00','C','000000','right','center');
insert into TBL_FORMATOS_DET
values('FSI-VFAC2','9','FSI_ETIQUETA','Clave','102.30','35.30','25.00','5.00','C','000000','center','center');
insert into TBL_FORMATOS_DET
values('FSI-VFAC2','10','FSI_ETIQUETA','CP','82.30','45.30','10.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-VFAC2','11','Fecha','dd/MMM/yyyy','152.30','52.30','47.00','5.00','C','000000','center','center');
insert into TBL_FORMATOS_DET
values('FSI-VFAC2','12','Cliente','general','.00','35.30','105.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-VFAC2','13','CP','general','92.30','45.30','35.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-VFAC2','14','Nombre','general','152.30','24.30','47.00','5.00','C','000000','center','center');
insert into TBL_FORMATOS_DET
values('FSI-VFAC2','15','Num_Cliente',',|0','127.30','35.30','20.00','5.00','C','000000','center','center');
insert into TBL_FORMATOS_DET
values('FSI-VFAC2','16','Direccion','general','.00','40.30','85.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-VFAC2','17','Colonia','general','82.30','40.30','65.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-VFAC2','18','Poblacion','general','.00','45.30','85.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-VFAC2','19','FSI_ETIQUETA','RFC','.00','50.30','15.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-VFAC2','20','RFC','general','12.30','50.30','35.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-VFAC2','21','FSI_ETIQUETA','PEDIDO','47.30','50.30','20.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-VFAC2','22','Referencia','general','67.30','50.30','25.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-VFAC2','23','FSI_ETIQUETA','Pago en una sola exhibicion','.00','186.30','150.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-VFAC2','24','Obs','general','.00','191.30','190.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-VFAC2','25','Total','LETRA','.00','196.30','95.00','5.00','C','000000','right','center');
insert into TBL_FORMATOS_DET
values('FSI-VFAC2','26','FSI_ETIQUETA','SUB TOTAL','132.30','217.30','25.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-VFAC2','27','SubTotal',',|.|2|0','157.30','217.30','25.00','5.00','C','000000','right','center');
insert into TBL_FORMATOS_DET
values('FSI-VFAC2','28','FSI_ETIQUETA','IVA 16%','132.30','222.30','25.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-VFAC2','29','IVA',',|.|2|0','157.30','222.30','25.00','5.00','C','000000','right','center');
insert into TBL_FORMATOS_DET
values('FSI-VFAC2','30','FSI_ETIQUETA','TOTAL','132.30','227.30','25.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-VFAC2','31','Total',',|.|2|0','157.30','227.30','25.00','5.00','C','000000','right','center');
insert into TBL_FORMATOS_DET
values('FSI-VFAC2','32','FSI_ETIQUETA','Cant','.00','67.30','15.00','5.00','C','000000','right','center');
insert into TBL_FORMATOS_DET
values('FSI-VFAC2','33','FSI_ETIQUETA','Uni','15.00','67.30','12.30','5.00','C','000000','center','center');
insert into TBL_FORMATOS_DET
values('FSI-VFAC2','34','FSI_ETIQUETA','Clave','27.30','67.30','25.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-VFAC2','35','FSI_ETIQUETA','Descripcion','52.30','67.30','80.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-VFAC2','36','FSI_ETIQUETA','Precio','132.30','67.30','25.00','5.00','C','000000','right','center');
insert into TBL_FORMATOS_DET
values('FSI-VFAC2','37','FSI_ETIQUETA','Importe','157.30','67.30','30.00','5.00','C','000000','right','center');
insert into TBL_FORMATOS_DET
values('FSI-VFAC2','38','FSI_LH','t_negra','.00','77.30','190.00','.50','C',NULL,NULL,NULL);
insert into TBL_FORMATOS_DET
values('FSI-VFAC2','39','Cantidad',',|.|3|0','.00','.00','15.00','4.00','D','000000','right','center');
insert into TBL_FORMATOS_DET
values('FSI-VFAC2','40','ID_UnidadSalida','general','15.00','.00','12.30','4.00','D','000000','center','center');
insert into TBL_FORMATOS_DET
values('FSI-VFAC2','41','ID_Prod','general','27.30','.00','25.00','4.00','D','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-VFAC2','42','Descripcion','general','52.30','.00','80.00','4.00','D','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-VFAC2','43','Precio',',|.|4|0','132.30','.00','25.00','4.00','D','000000','right','center');
insert into TBL_FORMATOS_DET
values('FSI-VFAC2','44','Importe',',|.|2|0','157.30','.00','30.00','4.00','D','000000','right','center');
insert into TBL_FORMATOS_DET
values('FSI-VFAC2','45','Obs','general','12.30','4.00','170.00','4.00','D','000000','left','center');

INSERT INTO TBL_FORMATOS
VALUES('FSI-VPED','Formato para pedidos','VEN_PED');

INSERT INTO TBL_FORMATOS_DET
VALUES('FSI-VPED',1,'FSI_IMPTIT','font-family: Arial, Helvetica, sans-serif; font-size: 20pt; font-style: normal; font-weight: bold;',NULL,NULL,NULL,NULL,'S',NULL,NULL,NULL);
INSERT INTO TBL_FORMATOS_DET
VALUES('FSI-VPED',2,'FSI_IMPETQ','font-family: Arial, Helvetica, sans-serif; font-size: 9pt; font-style: italic; font-weight: bold;',NULL,NULL,NULL,NULL,'S',NULL,NULL,NULL);
INSERT INTO TBL_FORMATOS_DET
VALUES('FSI-VPED',3,'FSI_IMPCAB','font-family: Arial, Helvetica, sans-serif; font-size: 8pt; font-style: normal; font-weight: bold;',NULL,NULL,NULL,NULL,'S',NULL,NULL,NULL);
INSERT INTO TBL_FORMATOS_DET
VALUES('FSI-VPED',4,'FSI_IMPDET','font-family: Arial, Helvetica, sans-serif; font-size: 7pt; font-style: normal; font-weight: normal;',NULL,NULL,NULL,NULL,'S',NULL,NULL,NULL);
INSERT INTO TBL_FORMATOS_DET
VALUES('FSI-VPED',5,'FSI_CAB','',NULL,NULL,NULL,'259.50','S',NULL,NULL,NULL);
INSERT INTO TBL_FORMATOS_DET
VALUES('FSI-VPED',6,'FSI_VENTANA','','.00','.00','800.00','450.00','S',NULL,NULL,NULL);
INSERT INTO TBL_FORMATOS_DET
VALUES('FSI-VPED',7,'FSI_DET','14',NULL,'110.00',NULL,'8.00','S',NULL,NULL,NULL);
INSERT INTO TBL_FORMATOS_DET
VALUES('FSI-VPED',8,'FSI_ETIQUETA','Fecha','80.00','80.00','75.00','5.00','C','000000','right','middle');
INSERT INTO TBL_FORMATOS_DET
VALUES('FSI-VPED',9,'FSI_ETIQUETA','Clave','110.00','63.00','25.00','5.00','C','000000','center','middle');
INSERT INTO TBL_FORMATOS_DET
VALUES('FSI-VPED',10,'FSI_ETIQUETA','CP','90.00','73.00','10.00','5.00','C','000000','left','middle');
INSERT INTO TBL_FORMATOS_DET
VALUES('FSI-VPED',11,'Fecha','dd/MMM/yyyy','160.00','80.00','47.00','5.00','C','000000','center','middle');
INSERT INTO TBL_FORMATOS_DET
VALUES('FSI-VPED',12,'Cliente','general','5.00','63.00','105.00','5.00','C','000000','left','middle');
INSERT INTO TBL_FORMATOS_DET
VALUES('FSI-VPED',13,'CP','general','100.00','73.00','35.00','5.00','C','000000','left','middle');
INSERT INTO TBL_FORMATOS_DET
VALUES('FSI-VPED',14,'Nombre','general','160.00','52.00','47.00','5.00','C','000000','center','middle');
INSERT INTO TBL_FORMATOS_DET
VALUES('FSI-VPED',15,'Num_Cliente',',|0','135.00','63.00','20.00','5.00','C','000000','center','middle');
INSERT INTO TBL_FORMATOS_DET
VALUES('FSI-VPED',16,'Direccion','general','5.00','68.00','85.00','5.00','C','000000','left','middle');
INSERT INTO TBL_FORMATOS_DET
VALUES('FSI-VPED',17,'Colonia','general','90.00','68.00','65.00','5.00','C','000000','left','middle');
INSERT INTO TBL_FORMATOS_DET
VALUES('FSI-VPED',18,'Poblacion','general','5.00','73.00','85.00','5.00','C','000000','left','middle');
INSERT INTO TBL_FORMATOS_DET
VALUES('FSI-VPED',19,'FSI_ETIQUETA','RFC','5.00','78.00','15.00','5.00','C','000000','left','middle');
INSERT INTO TBL_FORMATOS_DET
VALUES('FSI-VPED',20,'RFC','general','20.00','78.00','35.00','5.00','C','000000','left','middle');
INSERT INTO TBL_FORMATOS_DET
VALUES('FSI-VPED',21,'FSI_ETIQUETA','PEDIDO',' 55.00','78.00','20.00','5.00','C','000000','left','middle');
INSERT INTO TBL_FORMATOS_DET
VALUES('FSI-VPED',22,'Numero',',|0','75.00','78.00','25.00','5.00','C','000000','left','middle');
INSERT INTO TBL_FORMATOS_DET
VALUES('FSI-VPED',24,'Obs','general','5.00','219.00','190.00','5.00','C','000000','left','middle');
INSERT INTO TBL_FORMATOS_DET
VALUES('FSI-VPED',32,'FSI_ETIQUETA','Cantidad','5.00','95.00','30.00','5.00','C','000000','right','middle');
INSERT INTO TBL_FORMATOS_DET
VALUES('FSI-VPED',33,'FSI_ETIQUETA','Uni','35.00','95.00','20.00','5.00','C','000000','center','middle');
INSERT INTO TBL_FORMATOS_DET
VALUES('FSI-VPED',34,'FSI_ETIQUETA','Clave','55.00','95.00','35.00','5.00','C','000000','left','middle');
INSERT INTO TBL_FORMATOS_DET
VALUES('FSI-VPED',35,'FSI_ETIQUETA','Descripci√≥n','90.00','95.00','100.00','5.00','C','000000','left','middle');
INSERT INTO TBL_FORMATOS_DET
VALUES('FSI-VPED',38,'FSI_LH','t_negra','5.00','105.00','190.00','.50','C',NULL,NULL,NULL);
INSERT INTO TBL_FORMATOS_DET
VALUES('FSI-VPED',40,'Cantidad',',|.|3|0','5.00','.00','30.00','4.00','D','000000','right','middle');
INSERT INTO TBL_FORMATOS_DET
VALUES('FSI-VPED',41,'ID_UnidadSalida','general','35.00','.00','20.00','4.00','D','000000','center','middle');
INSERT INTO TBL_FORMATOS_DET
VALUES('FSI-VPED',42,'ID_Prod','general','55.00','.00','35.00','4.00','D','000000','left','middle');
INSERT INTO TBL_FORMATOS_DET
VALUES('FSI-VPED',43,'Descripcion','general','90.00','.00','100.00','4.00','D','000000','left','middle');
INSERT INTO TBL_FORMATOS_DET
VALUES('FSI-VPED',46,'Obs','general','20.00','4.00','170.00','4.00','D','000000','left','middle');
INSERT INTO TBL_FORMATOS_DET
VALUES('FSI-VPED',48,'FSI_TITULO','PEDIDO','20.00','20.00','190.00','20.00','C','000000','center','middle');

insert into TBL_FORMATOS
values('FSI-VREM2','Formato plantilla para remisiones Impresas','VEN_REM');

insert into TBL_FORMATOS_DET
values('FSI-VREM2','1','FSI_IMPTIT','font-family: Arial, Helvetica, sans-serif; font-size: 10pt; font-style: normal; font-weight: bold;',NULL,NULL,NULL,NULL,'S',NULL,NULL,NULL);
insert into TBL_FORMATOS_DET
values('FSI-VREM2','2','FSI_IMPETQ','font-family: Arial, Helvetica, sans-serif; font-size: 9pt; font-style: italic; font-weight: bold;',NULL,NULL,NULL,NULL,'S',NULL,NULL,NULL);
insert into TBL_FORMATOS_DET
values('FSI-VREM2','3','FSI_IMPCAB','font-family: Arial, Helvetica, sans-serif; font-size: 8pt; font-style: normal; font-weight: bold;',NULL,NULL,NULL,NULL,'S',NULL,NULL,NULL);
insert into TBL_FORMATOS_DET
values('FSI-VREM2','4','FSI_IMPDET','font-family: Arial, Helvetica, sans-serif; font-size: 7pt; font-style: normal; font-weight: normal;',NULL,NULL,NULL,NULL,'S',NULL,NULL,NULL);
insert into TBL_FORMATOS_DET
values('FSI-VREM2','5','FSI_CAB','',NULL,NULL,NULL,'259.40','S',NULL,NULL,NULL);
insert into TBL_FORMATOS_DET
values('FSI-VREM2','6','FSI_VENTANA','','.00','.00','800.00','450.00','S',NULL,NULL,NULL);
insert into TBL_FORMATOS_DET
values('FSI-VREM2','7','FSI_DET','13',NULL,'82.30',NULL,'8.00','S',NULL,NULL,NULL);
insert into TBL_FORMATOS_DET
values('FSI-VREM2','8','FSI_ETIQUETA','Fecha','72.30','52.30','75.00','5.00','C','000000','right','center');
insert into TBL_FORMATOS_DET
values('FSI-VREM2','9','FSI_ETIQUETA','Clave','102.30','35.30','25.00','5.00','C','000000','center','center');
insert into TBL_FORMATOS_DET
values('FSI-VREM2','10','FSI_ETIQUETA','CP','82.30','45.30','10.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-VREM2','11','Fecha','dd/MMM/yyyy','152.30','52.30','47.00','5.00','C','000000','center','center');
insert into TBL_FORMATOS_DET
values('FSI-VREM2','12','Cliente','general','.00','35.30','105.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-VREM2','13','CP','general','92.30','45.30','35.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-VREM2','14','Nombre','general','152.30','24.30','47.00','5.00','C','000000','center','center');
insert into TBL_FORMATOS_DET
values('FSI-VREM2','15','Num_Cliente',',|0','127.30','35.30','20.00','5.00','C','000000','center','center');
insert into TBL_FORMATOS_DET
values('FSI-VREM2','16','Direccion','general','.00','40.30','85.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-VREM2','17','Colonia','general','82.30','40.30','65.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-VREM2','18','Poblacion','general','.00','45.30','85.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-VREM2','19','FSI_ETIQUETA','RFC','.00','50.30','15.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-VREM2','20','RFC','general','12.30','50.30','35.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-VREM2','21','FSI_ETIQUETA','PEDIDO','47.30','50.30','20.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-VREM2','22','Referencia','general','67.30','50.30','25.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-VREM2','23','FSI_ETIQUETA','Pago en una sola exhibicion','.00','186.30','150.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-VREM2','24','Obs','general','.00','191.30','190.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-VREM2','25','Total','LETRA','.00','196.30','95.00','5.00','C','000000','right','center');
insert into TBL_FORMATOS_DET
values('FSI-VREM2','26','FSI_ETIQUETA','SUB TOTAL','132.30','217.30','25.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-VREM2','27','SubTotal',',|.|2|0','157.30','217.30','25.00','5.00','C','000000','right','center');
insert into TBL_FORMATOS_DET
values('FSI-VREM2','28','FSI_ETIQUETA','IVA 16%','132.30','222.30','25.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-VREM2','29','IVA',',|.|2|0','157.30','222.30','25.00','5.00','C','000000','right','center');
insert into TBL_FORMATOS_DET
values('FSI-VREM2','30','FSI_ETIQUETA','TOTAL','132.30','227.30','25.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-VREM2','31','Total',',|.|2|0','157.30','227.30','25.00','5.00','C','000000','right','center');
insert into TBL_FORMATOS_DET
values('FSI-VREM2','32','FSI_ETIQUETA','Cant','.00','67.30','15.00','5.00','C','000000','right','center');
insert into TBL_FORMATOS_DET
values('FSI-VREM2','33','FSI_ETIQUETA','Uni','15.00','67.30','12.30','5.00','C','000000','center','center');
insert into TBL_FORMATOS_DET
values('FSI-VREM2','34','FSI_ETIQUETA','Clave','27.30','67.30','25.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-VREM2','35','FSI_ETIQUETA','Descripcion','52.30','67.30','80.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-VREM2','36','FSI_ETIQUETA','Precio','132.30','67.30','25.00','5.00','C','000000','right','center');
insert into TBL_FORMATOS_DET
values('FSI-VREM2','37','FSI_ETIQUETA','Importe','157.30','67.30','30.00','5.00','C','000000','right','center');
insert into TBL_FORMATOS_DET
values('FSI-VREM2','38','FSI_LH','t_negra','.00','77.30','190.00','.50','C',NULL,NULL,NULL);
insert into TBL_FORMATOS_DET
values('FSI-VREM2','39','Cantidad',',|.|3|0','.00','.00','15.00','4.00','D','000000','right','center');
insert into TBL_FORMATOS_DET
values('FSI-VREM2','40','ID_UnidadSalida','general','15.00','.00','12.30','4.00','D','000000','center','center');
insert into TBL_FORMATOS_DET
values('FSI-VREM2','41','ID_Prod','general','27.30','.00','25.00','4.00','D','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-VREM2','42','Descripcion','general','52.30','.00','80.00','4.00','D','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-VREM2','43','Precio',',|.|4|0','132.30','.00','25.00','4.00','D','000000','right','center');
insert into TBL_FORMATOS_DET
values('FSI-VREM2','44','Importe',',|.|2|0','157.30','.00','30.00','4.00','D','000000','right','center');
insert into TBL_FORMATOS_DET
values('FSI-VREM2','45','Obs','general','12.30','4.00','170.00','4.00','D','000000','left','center');
  
insert into TBL_FORMATOS
values('FSI-VPED2','Formato para pedidos 2','VEN_PED');

insert into TBL_FORMATOS_DET
values('FSI-VPED2','1','FSI_IMPTIT','font-family: Arial, Helvetica, sans-serif; font-size: 20pt; font-style: normal; font-weight: bold;',NULL,NULL,NULL,NULL,'S',NULL,NULL,NULL);
insert into TBL_FORMATOS_DET
values('FSI-VPED2','2','FSI_IMPETQ','font-family: Arial, Helvetica, sans-serif; font-size: 9pt; font-style: italic; font-weight: bold;',NULL,NULL,NULL,NULL,'S',NULL,NULL,NULL);
insert into TBL_FORMATOS_DET
values('FSI-VPED2','3','FSI_IMPCAB','font-family: Arial, Helvetica, sans-serif; font-size: 8pt; font-style: normal; font-weight: bold;',NULL,NULL,NULL,NULL,'S',NULL,NULL,NULL);
insert into TBL_FORMATOS_DET
values('FSI-VPED2','4','FSI_IMPDET','font-family: Arial, Helvetica, sans-serif; font-size: 7pt; font-style: normal; font-weight: normal;',NULL,NULL,NULL,NULL,'S',NULL,NULL,NULL);
insert into TBL_FORMATOS_DET
values('FSI-VPED2','5','FSI_CAB','',NULL,NULL,NULL,'259.40','S',NULL,NULL,NULL);
insert into TBL_FORMATOS_DET
values('FSI-VPED2','6','FSI_VENTANA','','.00','.00','800.00','450.00','S',NULL,NULL,NULL);
insert into TBL_FORMATOS_DET
values('FSI-VPED2','7','FSI_DET','13',NULL,'82.30',NULL,'8.00','S',NULL,NULL,NULL);
insert into TBL_FORMATOS_DET
values('FSI-VPED2','8','FSI_ETIQUETA','Fecha','72.30','52.30','75.00','5.00','C','000000','right','center');
insert into TBL_FORMATOS_DET
values('FSI-VPED2','9','FSI_ETIQUETA','Clave','102.30','35.30','25.00','5.00','C','000000','center','center');
insert into TBL_FORMATOS_DET
values('FSI-VPED2','10','FSI_ETIQUETA','CP','82.30','45.30','10.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-VPED2','11','Fecha','dd/MMM/yyyy','152.30','52.30','47.00','5.00','C','000000','center','center');
insert into TBL_FORMATOS_DET
values('FSI-VPED2','12','Cliente','general','.00','35.30','105.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-VPED2','13','CP','general','92.30','45.30','35.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-VPED2','14','Nombre','general','152.30','24.30','47.00','5.00','C','000000','center','center');
insert into TBL_FORMATOS_DET
values('FSI-VPED2','15','Num_Cliente',',|0','127.30','35.30','20.00','5.00','C','000000','center','center');
insert into TBL_FORMATOS_DET
values('FSI-VPED2','16','Direccion','general','.00','40.30','85.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-VPED2','17','Colonia','general','82.30','40.30','65.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-VPED2','18','Poblacion','general','.00','45.30','85.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-VPED2','19','FSI_ETIQUETA','RFC','.00','50.30','15.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-VPED2','20','RFC','general','12.30','50.30','35.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-VPED2','21','FSI_ETIQUETA','Referencia','47.30','50.30','20.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-VPED2','22','Referencia','general','67.30','50.30','25.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-VPED2','23','Obs','general','.00','191.30','190.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-VPED2','24','FSI_ETIQUETA','SUB TOTAL','132.30','217.30','25.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-VPED2','25','SubTotal',',|.|2|0','157.30','217.30','25.00','5.00','C','000000','right','center');
insert into TBL_FORMATOS_DET
values('FSI-VPED2','26','FSI_ETIQUETA','IVA 16%','132.30','222.30','25.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-VPED2','27','IVA',',|.|2|0','157.30','222.30','25.00','5.00','C','000000','right','center');
insert into TBL_FORMATOS_DET
values('FSI-VPED2','28','FSI_ETIQUETA','TOTAL','132.30','227.30','25.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-VPED2','29','Total',',|.|2|0','157.30','227.30','25.00','5.00','C','000000','right','center');
insert into TBL_FORMATOS_DET
values('FSI-VPED2','30','FSI_ETIQUETA','Cant','.00','67.30','15.00','5.00','C','000000','right','center');
insert into TBL_FORMATOS_DET
values('FSI-VPED2','31','FSI_ETIQUETA','Uni','15.00','67.30','12.30','5.00','C','000000','center','center');
insert into TBL_FORMATOS_DET
values('FSI-VPED2','32','FSI_ETIQUETA','Clave','27.30','67.30','25.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-VPED2','33','FSI_ETIQUETA','Descripcion','52.30','67.30','80.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-VPED2','34','FSI_ETIQUETA','Precio','132.30','67.30','25.00','5.00','C','000000','right','center');
insert into TBL_FORMATOS_DET
values('FSI-VPED2','35','FSI_ETIQUETA','Importe','157.30','67.30','30.00','5.00','C','000000','right','center');
insert into TBL_FORMATOS_DET
values('FSI-VPED2','36','FSI_LH','t_negra','.00','77.30','190.00','.50','C',NULL,NULL,NULL);
insert into TBL_FORMATOS_DET
values('FSI-VPED2','37','Cantidad',',|.|3|0','.00','.00','15.00','4.00','D','000000','right','center');
insert into TBL_FORMATOS_DET
values('FSI-VPED2','38','ID_UnidadSalida','general','15.00','.00','12.30','4.00','D','000000','center','center');
insert into TBL_FORMATOS_DET
values('FSI-VPED2','39','ID_Prod','general','27.30','.00','25.00','4.00','D','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-VPED2','40','Descripcion','general','52.30','.00','80.00','4.00','D','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-VPED2','41','Precio',',|.|4|0','132.30','.00','25.00','4.00','D','000000','right','center');
insert into TBL_FORMATOS_DET
values('FSI-VPED2','42','Importe',',|.|2|0','157.30','.00','30.00','4.00','D','000000','right','center');
insert into TBL_FORMATOS_DET
values('FSI-VPED2','43','Obs','general','12.30','4.00','170.00','4.00','D','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-VPED2','44','FSI_TITULO','PEDIDO','5.00','5.00','190.00','20.00','C','000000','center','middle');

insert into TBL_FORMATOS
values('FSI-VCOT','Formato plantilla para cotizaciones Impresas','VEN_COT');

insert into TBL_FORMATOS_DET
values('FSI-VCOT','1','FSI_IMPTIT','font-family: Arial, Helvetica, sans-serif; font-size: 10pt; font-style: normal; font-weight: bold;',NULL,NULL,NULL,NULL,'S',NULL,NULL,NULL);
insert into TBL_FORMATOS_DET
values('FSI-VCOT','2','FSI_IMPETQ','font-family: Arial, Helvetica, sans-serif; font-size: 9pt; font-style: italic; font-weight: bold;',NULL,NULL,NULL,NULL,'S',NULL,NULL,NULL);
insert into TBL_FORMATOS_DET
values('FSI-VCOT','3','FSI_IMPCAB','font-family: Arial, Helvetica, sans-serif; font-size: 8pt; font-style: normal; font-weight: bold;',NULL,NULL,NULL,NULL,'S',NULL,NULL,NULL);
insert into TBL_FORMATOS_DET
values('FSI-VCOT','4','FSI_IMPDET','font-family: Arial, Helvetica, sans-serif; font-size: 7pt; font-style: normal; font-weight: normal;',NULL,NULL,NULL,NULL,'S',NULL,NULL,NULL);
insert into TBL_FORMATOS_DET
values('FSI-VCOT','5','FSI_CAB','',NULL,NULL,NULL,'259.40','S',NULL,NULL,NULL);
insert into TBL_FORMATOS_DET
values('FSI-VCOT','6','FSI_VENTANA','','.00','.00','800.00','450.00','S',NULL,NULL,NULL);
insert into TBL_FORMATOS_DET
values('FSI-VCOT','7','FSI_DET','13',NULL,'82.30',NULL,'8.00','S',NULL,NULL,NULL);
insert into TBL_FORMATOS_DET
values('FSI-VCOT','8','FSI_ETIQUETA','Fecha','72.30','52.30','75.00','5.00','C','000000','right','center');
insert into TBL_FORMATOS_DET
values('FSI-VCOT','9','FSI_ETIQUETA','Clave','102.30','35.30','25.00','5.00','C','000000','center','center');
insert into TBL_FORMATOS_DET
values('FSI-VCOT','10','FSI_ETIQUETA','CP','82.30','45.30','10.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-VCOT','11','Fecha','dd/MMM/yyyy','152.30','52.30','47.00','5.00','C','000000','center','center');
insert into TBL_FORMATOS_DET
values('FSI-VCOT','12','Cliente','general','.00','35.30','105.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-VCOT','13','CP','general','92.30','45.30','35.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-VCOT','14','Nombre','general','152.30','24.30','47.00','5.00','C','000000','center','center');
insert into TBL_FORMATOS_DET
values('FSI-VCOT','15','Num_Cliente',',|0','127.30','35.30','20.00','5.00','C','000000','center','center');
insert into TBL_FORMATOS_DET
values('FSI-VCOT','16','Direccion','general','.00','40.30','85.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-VCOT','17','Colonia','general','82.30','40.30','65.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-VCOT','18','Poblacion','general','.00','45.30','85.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-VCOT','19','FSI_ETIQUETA','RFC','.00','50.30','15.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-VCOT','20','RFC','general','12.30','50.30','35.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-VCOT','21','FSI_ETIQUETA','Referencia','47.30','50.30','20.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-VCOT','22','Referencia','general','67.30','50.30','25.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-VCOT','23','FSI_ETIQUETA','Pago en una sola exhibicion','.00','186.30','150.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-VCOT','24','Obs','general','.00','191.30','190.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-VCOT','25','Total','LETRA','.00','196.30','95.00','5.00','C','000000','right','center');
insert into TBL_FORMATOS_DET
values('FSI-VCOT','26','FSI_ETIQUETA','SUB TOTAL','132.30','217.30','25.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-VCOT','27','SubTotal',',|.|2|0','157.30','217.30','25.00','5.00','C','000000','right','center');
insert into TBL_FORMATOS_DET
values('FSI-VCOT','28','FSI_ETIQUETA','IVA 16%','132.30','222.30','25.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-VCOT','29','IVA',',|.|2|0','157.30','222.30','25.00','5.00','C','000000','right','center');
insert into TBL_FORMATOS_DET
values('FSI-VCOT','30','FSI_ETIQUETA','TOTAL','132.30','227.30','25.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-VCOT','31','Total',',|.|2|0','157.30','227.30','25.00','5.00','C','000000','right','center');
insert into TBL_FORMATOS_DET
values('FSI-VCOT','32','FSI_ETIQUETA','Cant','.00','67.30','15.00','5.00','C','000000','right','center');
insert into TBL_FORMATOS_DET
values('FSI-VCOT','33','FSI_ETIQUETA','Uni','15.00','67.30','12.30','5.00','C','000000','center','center');
insert into TBL_FORMATOS_DET
values('FSI-VCOT','34','FSI_ETIQUETA','Clave','27.30','67.30','25.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-VCOT','35','FSI_ETIQUETA','Descripcion','52.30','67.30','80.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-VCOT','36','FSI_ETIQUETA','Precio','132.30','67.30','25.00','5.00','C','000000','right','center');
insert into TBL_FORMATOS_DET
values('FSI-VCOT','37','FSI_ETIQUETA','Importe','157.30','67.30','30.00','5.00','C','000000','right','center');
insert into TBL_FORMATOS_DET
values('FSI-VCOT','38','FSI_LH','t_negra','.00','77.30','190.00','.50','C',NULL,NULL,NULL);
insert into TBL_FORMATOS_DET
values('FSI-VCOT','39','Cantidad',',|.|3|0','.00','.00','15.00','4.00','D','000000','right','center');
insert into TBL_FORMATOS_DET
values('FSI-VCOT','40','ID_UnidadSalida','general','15.00','.00','12.30','4.00','D','000000','center','center');
insert into TBL_FORMATOS_DET
values('FSI-VCOT','41','ID_Prod','general','27.30','.00','25.00','4.00','D','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-VCOT','42','Descripcion','general','52.30','.00','80.00','4.00','D','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-VCOT','43','Precio',',|.|4|0','132.30','.00','25.00','4.00','D','000000','right','center');
insert into TBL_FORMATOS_DET
values('FSI-VCOT','44','Importe',',|.|2|0','157.30','.00','30.00','4.00','D','000000','right','center');
insert into TBL_FORMATOS_DET
values('FSI-VCOT','45','Obs','general','12.30','4.00','170.00','4.00','D','000000','left','center');

insert into TBL_FORMATOS
values('FSI-VCOT2','Formato para cotizaciones','VEN_COT');

insert into TBL_FORMATOS_DET
values('FSI-VCOT2','1','FSI_IMPTIT','font-family: Arial, Helvetica, sans-serif; font-size: 20pt; font-style: normal; font-weight: bold;',NULL,NULL,NULL,NULL,'S',NULL,NULL,NULL);
insert into TBL_FORMATOS_DET
values('FSI-VCOT2','2','FSI_IMPETQ','font-family: Arial, Helvetica, sans-serif; font-size: 9pt; font-style: italic; font-weight: bold;',NULL,NULL,NULL,NULL,'S',NULL,NULL,NULL);
insert into TBL_FORMATOS_DET
values('FSI-VCOT2','3','FSI_IMPCAB','font-family: Arial, Helvetica, sans-serif; font-size: 8pt; font-style: normal; font-weight: bold;',NULL,NULL,NULL,NULL,'S',NULL,NULL,NULL);
insert into TBL_FORMATOS_DET
values('FSI-VCOT2','4','FSI_IMPDET','font-family: Arial, Helvetica, sans-serif; font-size: 7pt; font-style: normal; font-weight: normal;',NULL,NULL,NULL,NULL,'S',NULL,NULL,NULL);
insert into TBL_FORMATOS_DET
values('FSI-VCOT2','5','FSI_CAB','',NULL,NULL,NULL,'259.40','S',NULL,NULL,NULL);
insert into TBL_FORMATOS_DET
values('FSI-VCOT2','6','FSI_VENTANA','','.00','.00','800.00','450.00','S',NULL,NULL,NULL);
insert into TBL_FORMATOS_DET
values('FSI-VCOT2','7','FSI_DET','13',NULL,'82.30',NULL,'8.00','S',NULL,NULL,NULL);
insert into TBL_FORMATOS_DET
values('FSI-VCOT2','8','FSI_ETIQUETA','Fecha','72.30','52.30','75.00','5.00','C','000000','right','center');
insert into TBL_FORMATOS_DET
values('FSI-VCOT2','9','FSI_ETIQUETA','Clave','102.30','35.30','25.00','5.00','C','000000','center','center');
insert into TBL_FORMATOS_DET
values('FSI-VCOT2','10','FSI_ETIQUETA','CP','82.30','45.30','10.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-VCOT2','11','Fecha','dd/MMM/yyyy','152.30','52.30','47.00','5.00','C','000000','center','center');
insert into TBL_FORMATOS_DET
values('FSI-VCOT2','12','Cliente','general','.00','35.30','105.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-VCOT2','13','CP','general','92.30','45.30','35.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-VCOT2','14','Nombre','general','152.30','24.30','47.00','5.00','C','000000','center','center');
insert into TBL_FORMATOS_DET
values('FSI-VCOT2','15','Num_Cliente',',|0','127.30','35.30','20.00','5.00','C','000000','center','center');
insert into TBL_FORMATOS_DET
values('FSI-VCOT2','16','Direccion','general','.00','40.30','85.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-VCOT2','17','Colonia','general','82.30','40.30','65.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-VCOT2','18','Poblacion','general','.00','45.30','85.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-VCOT2','19','FSI_ETIQUETA','RFC','.00','50.30','15.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-VCOT2','20','RFC','general','12.30','50.30','35.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-VCOT2','21','FSI_ETIQUETA','Referencia','47.30','50.30','20.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-VCOT2','22','Referencia','general','67.30','50.30','25.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-VCOT2','23','Obs','general','.00','191.30','190.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-VCOT2','24','FSI_ETIQUETA','SUB TOTAL','132.30','217.30','25.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-VCOT2','25','SubTotal',',|.|2|0','157.30','217.30','25.00','5.00','C','000000','right','center');
insert into TBL_FORMATOS_DET
values('FSI-VCOT2','26','FSI_ETIQUETA','IVA 16%','132.30','222.30','25.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-VCOT2','27','IVA',',|.|2|0','157.30','222.30','25.00','5.00','C','000000','right','center');
insert into TBL_FORMATOS_DET
values('FSI-VCOT2','28','FSI_ETIQUETA','TOTAL','132.30','227.30','25.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-VCOT2','29','Total',',|.|2|0','157.30','227.30','25.00','5.00','C','000000','right','center');
insert into TBL_FORMATOS_DET
values('FSI-VCOT2','30','FSI_ETIQUETA','Cant','.00','67.30','15.00','5.00','C','000000','right','center');
insert into TBL_FORMATOS_DET
values('FSI-VCOT2','31','FSI_ETIQUETA','Uni','15.00','67.30','12.30','5.00','C','000000','center','center');
insert into TBL_FORMATOS_DET
values('FSI-VCOT2','32','FSI_ETIQUETA','Clave','27.30','67.30','25.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-VCOT2','33','FSI_ETIQUETA','Descripcion','52.30','67.30','80.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-VCOT2','34','FSI_ETIQUETA','Precio','132.30','67.30','25.00','5.00','C','000000','right','center');
insert into TBL_FORMATOS_DET
values('FSI-VCOT2','35','FSI_ETIQUETA','Importe','157.30','67.30','30.00','5.00','C','000000','right','center');
insert into TBL_FORMATOS_DET
values('FSI-VCOT2','36','FSI_LH','t_negra','.00','77.30','190.00','.50','C',NULL,NULL,NULL);
insert into TBL_FORMATOS_DET
values('FSI-VCOT2','37','Cantidad',',|.|3|0','.00','.00','15.00','4.00','D','000000','right','center');
insert into TBL_FORMATOS_DET
values('FSI-VCOT2','38','ID_UnidadSalida','general','15.00','.00','12.30','4.00','D','000000','center','center');
insert into TBL_FORMATOS_DET
values('FSI-VCOT2','39','ID_Prod','general','27.30','.00','25.00','4.00','D','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-VCOT2','40','Descripcion','general','52.30','.00','80.00','4.00','D','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-VCOT2','41','Precio',',|.|4|0','132.30','.00','25.00','4.00','D','000000','right','center');
insert into TBL_FORMATOS_DET
values('FSI-VCOT2','42','Importe',',|.|2|0','157.30','.00','30.00','4.00','D','000000','right','center');
insert into TBL_FORMATOS_DET
values('FSI-VCOT2','43','Obs','general','12.30','4.00','170.00','4.00','D','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-VCOT2','44','FSI_TITULO','COTIZACION','5.00','5.00','190.00','20.00','C','000000','center','middle');
  
insert into TBL_FORMATOS
values('FSI-VDEV2','Formato plantilla para notas de cr√©dito Impresas','VEN_DEV');

insert into TBL_FORMATOS_DET
values('FSI-VDEV2','1','FSI_IMPTIT','font-family: Arial, Helvetica, sans-serif; font-size: 10pt; font-style: normal; font-weight: bold;',NULL,NULL,NULL,NULL,'S',NULL,NULL,NULL);
insert into TBL_FORMATOS_DET
values('FSI-VDEV2','2','FSI_IMPETQ','font-family: Arial, Helvetica, sans-serif; font-size: 9pt; font-style: italic; font-weight: bold;',NULL,NULL,NULL,NULL,'S',NULL,NULL,NULL);
insert into TBL_FORMATOS_DET
values('FSI-VDEV2','3','FSI_IMPCAB','font-family: Arial, Helvetica, sans-serif; font-size: 8pt; font-style: normal; font-weight: bold;',NULL,NULL,NULL,NULL,'S',NULL,NULL,NULL);
insert into TBL_FORMATOS_DET
values('FSI-VDEV2','4','FSI_IMPDET','font-family: Arial, Helvetica, sans-serif; font-size: 7pt; font-style: normal; font-weight: normal;',NULL,NULL,NULL,NULL,'S',NULL,NULL,NULL);
insert into TBL_FORMATOS_DET
values('FSI-VDEV2','5','FSI_CAB','',NULL,NULL,NULL,'259.40','S',NULL,NULL,NULL);
insert into TBL_FORMATOS_DET
values('FSI-VDEV2','6','FSI_VENTANA','','.00','.00','800.00','450.00','S',NULL,NULL,NULL);
insert into TBL_FORMATOS_DET
values('FSI-VDEV2','7','FSI_DET','13',NULL,'82.30',NULL,'8.00','S',NULL,NULL,NULL);
insert into TBL_FORMATOS_DET
values('FSI-VDEV2','8','FSI_ETIQUETA','Fecha','72.30','52.30','75.00','5.00','C','000000','right','center');
insert into TBL_FORMATOS_DET
values('FSI-VDEV2','9','FSI_ETIQUETA','Clave','102.30','35.30','25.00','5.00','C','000000','center','center');
insert into TBL_FORMATOS_DET
values('FSI-VDEV2','10','FSI_ETIQUETA','CP','82.30','45.30','10.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-VDEV2','11','Fecha','dd/MMM/yyyy','152.30','52.30','47.00','5.00','C','000000','center','center');
insert into TBL_FORMATOS_DET
values('FSI-VDEV2','12','Cliente','general','.00','35.30','105.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-VDEV2','13','CP','general','92.30','45.30','35.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-VDEV2','14','Nombre','general','152.30','24.30','47.00','5.00','C','000000','center','center');
insert into TBL_FORMATOS_DET
values('FSI-VDEV2','15','Num_Cliente',',|0','127.30','35.30','20.00','5.00','C','000000','center','center');
insert into TBL_FORMATOS_DET
values('FSI-VDEV2','16','Direccion','general','.00','40.30','85.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-VDEV2','17','Colonia','general','82.30','40.30','65.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-VDEV2','18','Poblacion','general','.00','45.30','85.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-VDEV2','19','FSI_ETIQUETA','RFC','.00','50.30','15.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-VDEV2','20','RFC','general','12.30','50.30','35.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-VDEV2','21','FSI_ETIQUETA','Referencia','47.30','50.30','20.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-VDEV2','22','Referencia','general','67.30','50.30','25.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-VDEV2','23','FSI_ETIQUETA','Pago en una sola exhibicion','.00','186.30','150.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-VDEV2','24','Obs','general','.00','191.30','190.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-VDEV2','25','Total','LETRA','.00','196.30','95.00','5.00','C','000000','right','center');
insert into TBL_FORMATOS_DET
values('FSI-VDEV2','26','FSI_ETIQUETA','SUB TOTAL','132.30','217.30','25.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-VDEV2','27','SubTotal',',|.|2|0','157.30','217.30','25.00','5.00','C','000000','right','center');
insert into TBL_FORMATOS_DET
values('FSI-VDEV2','28','FSI_ETIQUETA','IVA 16%','132.30','222.30','25.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-VDEV2','29','IVA',',|.|2|0','157.30','222.30','25.00','5.00','C','000000','right','center');
insert into TBL_FORMATOS_DET
values('FSI-VDEV2','30','FSI_ETIQUETA','TOTAL','132.30','227.30','25.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-VDEV2','31','Total',',|.|2|0','157.30','227.30','25.00','5.00','C','000000','right','center');
insert into TBL_FORMATOS_DET
values('FSI-VDEV2','32','FSI_ETIQUETA','Cant','.00','67.30','15.00','5.00','C','000000','right','center');
insert into TBL_FORMATOS_DET
values('FSI-VDEV2','33','FSI_ETIQUETA','Uni','15.00','67.30','12.30','5.00','C','000000','center','center');
insert into TBL_FORMATOS_DET
values('FSI-VDEV2','34','FSI_ETIQUETA','Clave','27.30','67.30','25.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-VDEV2','35','FSI_ETIQUETA','Descripcion','52.30','67.30','80.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-VDEV2','36','FSI_ETIQUETA','Precio','132.30','67.30','25.00','5.00','C','000000','right','center');
insert into TBL_FORMATOS_DET
values('FSI-VDEV2','37','FSI_ETIQUETA','Importe','157.30','67.30','30.00','5.00','C','000000','right','center');
insert into TBL_FORMATOS_DET
values('FSI-VDEV2','38','FSI_LH','t_negra','.00','77.30','190.00','.50','C',NULL,NULL,NULL);
insert into TBL_FORMATOS_DET
values('FSI-VDEV2','39','Cantidad',',|.|3|0','.00','.00','15.00','4.00','D','000000','right','center');
insert into TBL_FORMATOS_DET
values('FSI-VDEV2','40','ID_UnidadSalida','general','15.00','.00','12.30','4.00','D','000000','center','center');
insert into TBL_FORMATOS_DET
values('FSI-VDEV2','41','ID_Prod','general','27.30','.00','25.00','4.00','D','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-VDEV2','42','Descripcion','general','52.30','.00','80.00','4.00','D','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-VDEV2','43','Precio',',|.|4|0','132.30','.00','25.00','4.00','D','000000','right','center');
insert into TBL_FORMATOS_DET
values('FSI-VDEV2','44','Importe',',|.|2|0','157.30','.00','30.00','4.00','D','000000','right','center');
insert into TBL_FORMATOS_DET
values('FSI-VDEV2','45','Obs','general','12.30','4.00','170.00','4.00','D','000000','left','center');

insert into TBL_FORMATOS
values('FSI-VPED3','Formato plantilla para pedidos Impresos','VEN_PED');

insert into TBL_FORMATOS_DET
values('FSI-VPED3','1','FSI_IMPTIT','font-family: Arial, Helvetica, sans-serif; font-size: 10pt; font-style: normal; font-weight: bold;',NULL,NULL,NULL,NULL,'S',NULL,NULL,NULL);
insert into TBL_FORMATOS_DET
values('FSI-VPED3','2','FSI_IMPETQ','font-family: Arial, Helvetica, sans-serif; font-size: 9pt; font-style: italic; font-weight: bold;',NULL,NULL,NULL,NULL,'S',NULL,NULL,NULL);
insert into TBL_FORMATOS_DET
values('FSI-VPED3','3','FSI_IMPCAB','font-family: Arial, Helvetica, sans-serif; font-size: 8pt; font-style: normal; font-weight: bold;',NULL,NULL,NULL,NULL,'S',NULL,NULL,NULL);
insert into TBL_FORMATOS_DET
values('FSI-VPED3','4','FSI_IMPDET','font-family: Arial, Helvetica, sans-serif; font-size: 7pt; font-style: normal; font-weight: normal;',NULL,NULL,NULL,NULL,'S',NULL,NULL,NULL);
insert into TBL_FORMATOS_DET
values('FSI-VPED3','5','FSI_CAB','',NULL,NULL,NULL,'259.40','S',NULL,NULL,NULL);
insert into TBL_FORMATOS_DET
values('FSI-VPED3','6','FSI_VENTANA','','.00','.00','800.00','450.00','S',NULL,NULL,NULL);
insert into TBL_FORMATOS_DET
values('FSI-VPED3','7','FSI_DET','13',NULL,'82.30',NULL,'8.00','S',NULL,NULL,NULL);
insert into TBL_FORMATOS_DET
values('FSI-VPED3','8','FSI_ETIQUETA','Fecha','72.30','52.30','75.00','5.00','C','000000','right','center');
insert into TBL_FORMATOS_DET
values('FSI-VPED3','9','FSI_ETIQUETA','Clave','102.30','35.30','25.00','5.00','C','000000','center','center');
insert into TBL_FORMATOS_DET
values('FSI-VPED3','10','FSI_ETIQUETA','CP','82.30','45.30','10.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-VPED3','11','Fecha','dd/MMM/yyyy','152.30','52.30','47.00','5.00','C','000000','center','center');
insert into TBL_FORMATOS_DET
values('FSI-VPED3','12','Cliente','general','.00','35.30','105.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-VPED3','13','CP','general','92.30','45.30','35.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-VPED3','14','Nombre','general','152.30','24.30','47.00','5.00','C','000000','center','center');
insert into TBL_FORMATOS_DET
values('FSI-VPED3','15','Num_Cliente',',|0','127.30','35.30','20.00','5.00','C','000000','center','center');
insert into TBL_FORMATOS_DET
values('FSI-VPED3','16','Direccion','general','.00','40.30','85.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-VPED3','17','Colonia','general','82.30','40.30','65.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-VPED3','18','Poblacion','general','.00','45.30','85.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-VPED3','19','FSI_ETIQUETA','RFC','.00','50.30','15.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-VPED3','20','RFC','general','12.30','50.30','35.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-VPED3','21','FSI_ETIQUETA','Referencia','47.30','50.30','20.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-VPED3','22','Referencia','general','67.30','50.30','25.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-VPED3','23','FSI_ETIQUETA','Pago en una sola exhibicion','.00','186.30','150.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-VPED3','24','Obs','general','.00','191.30','190.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-VPED3','25','Total','LETRA','.00','196.30','95.00','5.00','C','000000','right','center');
insert into TBL_FORMATOS_DET
values('FSI-VPED3','26','FSI_ETIQUETA','SUB TOTAL','132.30','217.30','25.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-VPED3','27','SubTotal',',|.|2|0','157.30','217.30','25.00','5.00','C','000000','right','center');
insert into TBL_FORMATOS_DET
values('FSI-VPED3','28','FSI_ETIQUETA','IVA 16%','132.30','222.30','25.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-VPED3','29','IVA',',|.|2|0','157.30','222.30','25.00','5.00','C','000000','right','center');
insert into TBL_FORMATOS_DET
values('FSI-VPED3','30','FSI_ETIQUETA','TOTAL','132.30','227.30','25.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-VPED3','31','Total',',|.|2|0','157.30','227.30','25.00','5.00','C','000000','right','center');
insert into TBL_FORMATOS_DET
values('FSI-VPED3','32','FSI_ETIQUETA','Cant','.00','67.30','15.00','5.00','C','000000','right','center');
insert into TBL_FORMATOS_DET
values('FSI-VPED3','33','FSI_ETIQUETA','Uni','15.00','67.30','12.30','5.00','C','000000','center','center');
insert into TBL_FORMATOS_DET
values('FSI-VPED3','34','FSI_ETIQUETA','Clave','27.30','67.30','25.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-VPED3','35','FSI_ETIQUETA','Descripcion','52.30','67.30','80.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-VPED3','36','FSI_ETIQUETA','Precio','132.30','67.30','25.00','5.00','C','000000','right','center');
insert into TBL_FORMATOS_DET
values('FSI-VPED3','37','FSI_ETIQUETA','Importe','157.30','67.30','30.00','5.00','C','000000','right','center');
insert into TBL_FORMATOS_DET
values('FSI-VPED3','38','FSI_LH','t_negra','.00','77.30','190.00','.50','C',NULL,NULL,NULL);
insert into TBL_FORMATOS_DET
values('FSI-VPED3','39','Cantidad',',|.|3|0','.00','.00','15.00','4.00','D','000000','right','center');
insert into TBL_FORMATOS_DET
values('FSI-VPED3','40','ID_UnidadSalida','general','15.00','.00','12.30','4.00','D','000000','center','center');
insert into TBL_FORMATOS_DET
values('FSI-VPED3','41','ID_Prod','general','27.30','.00','25.00','4.00','D','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-VPED3','42','Descripcion','general','52.30','.00','80.00','4.00','D','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-VPED3','43','Precio',',|.|4|0','132.30','.00','25.00','4.00','D','000000','right','center');
insert into TBL_FORMATOS_DET
values('FSI-VPED3','44','Importe',',|.|2|0','157.30','.00','30.00','4.00','D','000000','right','center');
insert into TBL_FORMATOS_DET
values('FSI-VPED3','45','Obs','general','12.30','4.00','170.00','4.00','D','000000','left','center');

insert into tbl_formatos
values('FSI-NNOM','Recibos de nomina CFDI','NOM_NOMINA');
insert into tbl_formatos_det
values('FSI-NNOM',1,'FSI_CAB','',null,null,null,259.50,'S','000000',null,null);
insert into tbl_formatos_det
values('FSI-NNOM',2,'FSI_VENTANA','',null,null,800.00,600.00,'S','000000',null,null);
insert into tbl_formatos_det
values('FSI-NNOM',3,'FSI_DET','18',null,95.00,null,2.50,'S','000000',null,null);
insert into tbl_formatos_det
values('FSI-NNOM',4,'FSI_IMPTIT','font-family: Arial, Helvetica, sans-serif; font-size: 16pt; font-style: italic; font-weight: bold;',null,null,null,null,'S','000000',null,null);
insert into tbl_formatos_det
values('FSI-NNOM',5,'FSI_IMPETQ','font-family: Arial, Helvetica, sans-serif; font-size: 8pt; font-style: normal; font-weight: bold;',null,null,null,null,'S','000000',null,null);
insert into tbl_formatos_det
values('FSI-NNOM',6,'FSI_IMPCAB','font-family: Arial, Helvetica, sans-serif; font-size: 8pt; font-style: normal; font-weight: normal;',null,null,null,null,'S','000000',null,null);
insert into tbl_formatos_det
values('FSI-NNOM',7,'FSI_IMPDET','font-family: Arial, Helvetica, sans-serif; font-size: 7pt; font-style: normal; font-weight: normal;',null,null,null,null,'S','000000',null,null);
insert into tbl_formatos_det
values('FSI-NNOM',8,'FSI_TITULO','RECIBO DE NOMINA',0.00,0.00,95.00,10.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-NNOM',9,'FSI_ETIQUETA','Derecci√≥n',0.00,25.00,40.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-NNOM',10,'FSI_ETIQUETA','NoExt/NoInt',40.00,25.00,20.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-NNOM',11,'FSI_ETIQUETA','Colonia',0.00,30.00,40.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-NNOM',12,'FSI_ETIQUETA','Localidad',40.00,30.00,40.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-NNOM',13,'FSI_ETIQUETA','Municipio',0.00,35.00,40.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-NNOM',14,'FSI_ETIQUETA','Estado',40.00,35.00,40.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-NNOM',15,'FSI_ETIQUETA','C.P.',0.00,40.00,40.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-NNOM',16,'FSI_ETIQUETA','Pais: M√©xico',40.00,40.00,40.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-NNOM',17,'FSI_TITULO','Nombre de Empresa',0.00,10.00,95.00,7.50,'C','000000','left','bottom');
insert into tbl_formatos_det
values('FSI-NNOM',18,'FSI_TITULO','RFC: XXXX######XXX',0.00,17.50,95.00,7.50,'C','000000','left','bottom');
insert into tbl_formatos_det
values('FSI-NNOM',19,'FSI_ETIQUETA','FOLIO FISCAL',95.00,0.00,95.00,2.50,'C','000000','right','middle');
insert into tbl_formatos_det
values('FSI-NNOM',20,'TFD_UUID','general',95.00,2.50,95.00,2.50,'C','000000','right','middle');
insert into tbl_formatos_det
values('FSI-NNOM',21,'FSI_ETIQUETA','SERIE CERTIFICADO SAT',95.00,5.00,95.00,2.50,'C','000000','right','middle');
insert into tbl_formatos_det
values('FSI-NNOM',22,'TFD_NoCertificadoSAT','general',95.00,7.50,95.00,2.50,'C','000000','right','middle');
insert into tbl_formatos_det
values('FSI-NNOM',23,'FSI_ETIQUETA','FECHA Y HORA DE CERTIFICACION',95.00,10.00,95.00,2.50,'C','000000','right','middle');
insert into tbl_formatos_det
values('FSI-NNOM',24,'TFD_FechaTimbre','dd/MMM/yyyy hh:mm:ss',95.00,12.50,95.00,2.50,'C','000000','right','middle');
insert into tbl_formatos_det
values('FSI-NNOM',25,'FSI_ETIQUETA','FECHA DE ELABORACION',95.00,15.00,95.00,2.50,'C','000000','right','middle');
insert into tbl_formatos_det
values('FSI-NNOM',26,'CFD_Fecha','dd/MMM/yyyy hh:mm:ss',95.00,17.50,95.00,2.50,'C','000000','right','middle');
insert into tbl_formatos_det
values('FSI-NNOM',27,'FSI_ETIQUETA','DATOS DEL RECEPTOR',0.00,50.00,95.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-NNOM',28,'FSI_ETIQUETA','RFC:',0.00,55.00,10.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-NNOM',29,'RFC','general',10.00,55.00,30.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-NNOM',30,'Nombre','general',0.00,60.00,95.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-NNOM',31,'Calle','general',0.00,65.00,40.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-NNOM',32,'NoExt','general',40.00,65.00,20.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-NNOM',33,'NoInt','general',60.00,65.00,20.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-NNOM',34,'Colonia','general',0.00,70.00,40.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-NNOM',35,'Localidad','general',40.00,70.00,40.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-NNOM',36,'Municipio','general',0.00,75.00,40.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-NNOM',37,'Estado','general',40.00,75.00,40.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-NNOM',38,'CP','general',0.00,80.00,40.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-NNOM',39,'Pais','general',40.00,80.00,40.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-NNOM',40,'FSI_ETIQUETA','EMITIDO EN:',105.00,50.00,85.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-NNOM',41,'CFD_Nombre','general',105.00,55.00,85.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-NNOM',42,'CFD_Calle','general',105.00,60.00,40.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-NNOM',43,'CFD_NoExt','general',145.00,60.00,20.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-NNOM',44,'CFD_NoInt','general',165.00,60.00,20.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-NNOM',45,'CFD_Colonia','general',105.00,65.00,40.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-NNOM',46,'CFD_Localidad','general',145.00,65.00,40.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-NNOM',47,'CFD_Municipio','general',105.00,70.00,40.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-NNOM',48,'CFD_Estado','general',145.00,70.00,40.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-NNOM',49,'CFD_CP','general',105.00,75.00,40.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-NNOM',50,'CFD_Pais','general',145.00,75.00,40.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-NNOM',51,'FSI_ETIQUETA','DOC INT:',105.00,80.00,20.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-NNOM',52,'Numero',' |0',125.00,80.00,20.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-NNOM',53,'FSI_ETIQUETA','FSI_QRCODE',0.00,145.00,55.00,55.00,'C','000000','left','top');
insert into tbl_formatos_det
values('FSI-NNOM',54,'FSI_ETIQUETA','ESTE DOCUMENTO ES UNA REPRESENTACION IMPRESA DE UN CFDI',0.00,245.00,190.00,5.00,'C','000000','center','middle');
insert into tbl_formatos_det
values('FSI-NNOM',55,'TFD_CadenaOriginal','general',0.00,235.00,190.00,10.00,'C','000000','left','top');
insert into tbl_formatos_det
values('FSI-NNOM',56,'FSI_ETIQUETA','CADENA ORIGINAL DEL COMPLEMENTO DE CERTIFICACION DEL SAT',0.00,230.00,190.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-NNOM',57,'TFD_SelloSAT','general',0.00,220.00,190.00,10.00,'C','000000','left','top');
insert into tbl_formatos_det
values('FSI-NNOM',58,'FSI_ETIQUETA','SELLO DEL SAT',0.00,215.00,190.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-NNOM',59,'CFD_Sello','general',0.00,205.00,190.00,10.00,'C','000000','left','top');
insert into tbl_formatos_det
values('FSI-NNOM',60,'FSI_ETIQUETA','SELLO DEL CFDI',0.00,200.00,190.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-NNOM',61,'FSI_ETIQUETA','CVE',0.00,90.00,17.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-NNOM',62,'FSI_ETIQUETA','DESCRIPCION',17.00,90.00,113.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-NNOM',63,'FSI_ETIQUETA','PERCEPCIONES',130.00,90.00,30.00,5.00,'C','000000','right','middle');
insert into tbl_formatos_det
values('FSI-NNOM',64,'FSI_ETIQUETA','DEDUCCIONES',160.00,90.00,30.00,5.00,'C','000000','right','middle');
insert into tbl_formatos_det
values('FSI-NNOM',65,'Total','LETRA',55.00,160.00,85.00,10.00,'C','000000','left','top');
insert into tbl_formatos_det
values('FSI-NNOM',66,'FSI_ETIQUETA','PAGO EN UNA SOLA EXHIBICION',55.00,155.00,85.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-NNOM',67,'FSI_ETIQUETA','SUB TOTAL',140.00,150.00,20.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-NNOM',68,'FSI_ETIQUETA','ISR',140.00,160.00,20.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-NNOM',69,'FSI_ETIQUETA','TOTAL',140.00,165.00,20.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-NNOM',70,'FSI_ETIQUETA','REF:',145.00,80.00,20.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-NNOM',71,'Referencia','general',165.00,80.00,20.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-NNOM',72,'FSI_ETIQUETA','REGIMEN FISCAL: Regimen General De Ley',95.00,30.00,95.00,2.50,'C','000000','right','middle');
insert into tbl_formatos_det
values('FSI-NNOM',73,'FSI_ETIQUETA','LUGAR DE EXPEDICION',95.00,20.00,95.00,2.50,'C','000000','right','middle');
insert into tbl_formatos_det
values('FSI-NNOM',74,'CFD_LugarExpedicion','general',95.00,22.50,95.00,2.50,'C','000000','right','middle');
insert into tbl_formatos_det
values('FSI-NNOM',75,'FSI_ETIQUETA','METODO DE PAGO',95.00,25.00,95.00,2.50,'C','000000','right','middle');
insert into tbl_formatos_det
values('FSI-NNOM',76,'CFD_MetodoDePago','general',95.00,27.50,95.00,2.50,'C','000000','right','middle');
insert into tbl_formatos_det
values('FSI-NNOM',77,'subtotal',',|.|2|0',160.00,150.00,30.00,5.00,'C','000000','right','middle');
insert into tbl_formatos_det
values('FSI-NNOM',78,'FSI_ETIQUETA','DESCUENTO',140.00,155.00,20.00,5.00,'C','000000','left','middle');
insert into tbl_formatos_det
values('FSI-NNOM',79,'descuento',',|.|2|0',160.00,155.00,30.00,5.00,'C','000000','right','middle');
insert into tbl_formatos_det
values('FSI-NNOM',80,'total',',|.|2|0',160.00,165.00,30.00,5.00,'C','000000','right','middle');
insert into tbl_formatos_det
values('FSI-NNOM',81,'isr',',|.|2|0',160.00,160.00,30.00,5.00,'C','000000','right','middle');
insert into tbl_formatos_det
values('FSI-NNOM',82,'id_movimiento',' |0',0.00,0.00,17.00,5.00,'D','000000','left','middle');
insert into tbl_formatos_det
values('FSI-NNOM',83,'deduccion',',|.|2|1',160.00,0.00,30.00,5.00,'D','000000','right','middle');
insert into tbl_formatos_det
values('FSI-NNOM',84,'descripcion','general',17.00,0.00,113.00,5.00,'D','000000','left','middle');
insert into tbl_formatos_det
values('FSI-NNOM',85,'percepcion',',|.|2|1',130.00,0.00,30.00,5.00,'D','000000','right','middle');


--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_compras_ordenes_impcab AS 
 SELECT rc.id_vc AS id_orden, rc.id_entidad, rc.numero, rc.fecha, rc.referencia, rc.status, rc.moneda AS id_moneda, m.moneda, rc.tc, rc.id_clipro AS id_proveedor, 
        CASE
            WHEN rc.id_clipro = 0 THEN 0
            ELSE ( SELECT p.id_numero
               FROM tbl_provee_provee p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'PR'::bpchar)
        END AS num_proveedor, 
        CASE
            WHEN rc.id_clipro = 0 THEN 'Proveedor de Mostrador'::character varying
            ELSE ( SELECT p.nombre
               FROM tbl_provee_provee p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'PR'::bpchar)
        END AS proveedor, ''::character varying AS pol, rc.id_bodega, b.nombre, rc.condicion, rc.obs, rc.mimporte AS importe, rc.mdescuento AS descuento, rc.msubtotal AS subtotal, rc.miva AS iva, rc.ieps, rc.ivaret, rc.isrret, rc.mtotal AS total, 
        CASE
            WHEN rc.id_clipro = 0 THEN 'XAXX010101000'::character varying
            ELSE ( SELECT p.rfc
               FROM tbl_provee_provee p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'PR'::bpchar)
        END AS rfc, 
        CASE
            WHEN rc.id_clipro = 0 THEN ''::character varying(80)
            ELSE ( SELECT p.direccion
               FROM tbl_provee_provee p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'PR'::bpchar)
        END AS direccion, 
        CASE
            WHEN rc.id_clipro = 0 THEN ''::character varying
            ELSE ( SELECT p.direccion
               FROM tbl_provee_provee p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'PR'::bpchar)
        END AS calle, 
        CASE
            WHEN rc.id_clipro = 0 THEN ''::character varying
            ELSE ( SELECT p.noext
               FROM tbl_provee_provee p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'PR'::bpchar)
        END AS noext, 
        CASE
            WHEN rc.id_clipro = 0 THEN ''::character varying
            ELSE ( SELECT p.noint
               FROM tbl_provee_provee p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'PR'::bpchar)
        END AS noint, 
        CASE
            WHEN rc.id_clipro = 0 THEN ''::character varying
            ELSE ( SELECT p.colonia
               FROM tbl_provee_provee p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'PR'::bpchar)
        END AS colonia, 
        CASE
            WHEN rc.id_clipro = 0 THEN ''::character varying(80)
            ELSE ( SELECT p.poblacion
               FROM tbl_provee_provee p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'PR'::bpchar)
        END AS poblacion, 
        CASE
            WHEN rc.id_clipro = 0 THEN ''::character varying
            ELSE ( SELECT p.poblacion
               FROM tbl_provee_provee p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'PR'::bpchar)
        END AS localidad, 
        CASE
            WHEN rc.id_clipro = 0 THEN ''::character varying
            ELSE ( SELECT p.municipio
               FROM tbl_provee_provee p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'PR'::bpchar)
        END AS municipio, 
        CASE
            WHEN rc.id_clipro = 0 THEN ''::character varying
            ELSE ( SELECT p.estado
               FROM tbl_provee_provee p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'PR'::bpchar)
        END AS estado, 
        CASE
            WHEN rc.id_clipro = 0 THEN 'Mexico'::character varying
            ELSE ( SELECT p.pais
               FROM tbl_provee_provee p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'PR'::bpchar)
        END AS pais, 
        CASE
            WHEN rc.id_clipro = 0 THEN ''::character varying
            ELSE ( SELECT p.cp
               FROM tbl_provee_provee p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'PR'::bpchar)
        END AS cp
   FROM tbl_compras_ordenes_cab rc
   JOIN tbl_compras_entidades ve ON rc.id_entidad = ve.id_entidadcompra
   JOIN tbl_invserv_bodegas b ON rc.id_bodega = b.id_bodega
   JOIN tbl_cont_monedas m ON rc.moneda = m.clave;


--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_compras_ordenes_impdet AS 
 SELECT rd.id_vc AS id_orden, rd.partida, rd.cantidad, rd.id_prod, c.descripcion, c.id_unidadsalida, rd.precio, rd.descuento, rd.iva, rd.obs, rd.importe, c.id_tipo, 
        CASE
            WHEN rd.iva = 0::numeric THEN rd.precio
            ELSE round(rd.precio + rd.precio * rd.iva / 100::numeric, 4)
        END AS precioiva, 
        CASE
            WHEN rd.iva = 0::numeric THEN 
            CASE
                WHEN rd.descuento = 0::numeric THEN round(rd.precio * rd.cantidad, 4)
                ELSE round(rd.precio * rd.cantidad - rd.precio * rd.cantidad * rd.descuento / 100::numeric, 4)
            END
            ELSE 
            CASE
                WHEN rd.descuento = 0::numeric THEN round(rd.precio * rd.cantidad + rd.precio * rd.cantidad * rd.iva / 100::numeric, 4)
                ELSE round(rd.precio * rd.cantidad - rd.precio * rd.cantidad * rd.descuento / 100::numeric + (rd.precio * rd.cantidad - rd.precio * rd.cantidad * rd.descuento / 100::numeric) * rd.iva / 100::numeric, 4)
            END
        END AS importeiva
   FROM tbl_compras_ordenes_det rd
   JOIN tbl_invserv_inventarios c ON rd.id_prod::text = c.id_prod::text;


--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_compras_devoluciones_impcab AS 
 SELECT rc.id_vc AS id_devolucion, rc.id_entidad, rc.numero, rc.fecha, rc.referencia, rc.status, rc.moneda AS id_moneda, m.moneda, rc.tc, rc.id_clipro AS id_proveedor, 
        CASE
            WHEN rc.id_clipro = 0 THEN 0
            ELSE ( SELECT p.id_numero
               FROM tbl_provee_provee p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'PR'::bpchar)
        END AS num_proveedor, 
        CASE
            WHEN rc.id_clipro = 0 THEN 'Proveedor de Mostrador'::character varying
            ELSE ( SELECT p.nombre
               FROM tbl_provee_provee p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'PR'::bpchar)
        END AS proveedor, ''::character varying AS pol, rc.id_bodega, b.nombre, rc.condicion, rc.obs, rc.mimporte AS importe, rc.mdescuento AS descuento, rc.msubtotal AS subtotal, rc.miva AS iva, rc.ieps, rc.ivaret, rc.isrret, rc.mtotal AS total, 
        CASE
            WHEN rc.id_clipro = 0 THEN 'XAXX010101000'::character varying
            ELSE ( SELECT p.rfc
               FROM tbl_provee_provee p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'PR'::bpchar)
        END AS rfc, 
        CASE
            WHEN rc.id_clipro = 0 THEN ''::character varying(80)
            ELSE ( SELECT p.direccion
               FROM tbl_provee_provee p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'PR'::bpchar)
        END AS direccion, 
        CASE
            WHEN rc.id_clipro = 0 THEN ''::character varying
            ELSE ( SELECT p.direccion
               FROM tbl_provee_provee p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'PR'::bpchar)
        END AS calle, 
        CASE
            WHEN rc.id_clipro = 0 THEN ''::character varying
            ELSE ( SELECT p.noext
               FROM tbl_provee_provee p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'PR'::bpchar)
        END AS noext, 
        CASE
            WHEN rc.id_clipro = 0 THEN ''::character varying
            ELSE ( SELECT p.noint
               FROM tbl_provee_provee p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'PR'::bpchar)
        END AS noint, 
        CASE
            WHEN rc.id_clipro = 0 THEN ''::character varying
            ELSE ( SELECT p.colonia
               FROM tbl_provee_provee p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'PR'::bpchar)
        END AS colonia, 
        CASE
            WHEN rc.id_clipro = 0 THEN ''::character varying(80)
            ELSE ( SELECT p.poblacion
               FROM tbl_provee_provee p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'PR'::bpchar)
        END AS poblacion, 
        CASE
            WHEN rc.id_clipro = 0 THEN ''::character varying
            ELSE ( SELECT p.poblacion
               FROM tbl_provee_provee p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'PR'::bpchar)
        END AS localidad, 
        CASE
            WHEN rc.id_clipro = 0 THEN ''::character varying
            ELSE ( SELECT p.municipio
               FROM tbl_provee_provee p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'PR'::bpchar)
        END AS municipio, 
        CASE
            WHEN rc.id_clipro = 0 THEN ''::character varying
            ELSE ( SELECT p.estado
               FROM tbl_provee_provee p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'PR'::bpchar)
        END AS estado, 
        CASE
            WHEN rc.id_clipro = 0 THEN 'Mexico'::character varying
            ELSE ( SELECT p.pais
               FROM tbl_provee_provee p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'PR'::bpchar)
        END AS pais, 
        CASE
            WHEN rc.id_clipro = 0 THEN ''::character varying
            ELSE ( SELECT p.cp
               FROM tbl_provee_provee p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'PR'::bpchar)
        END AS cp
   FROM tbl_compras_devoluciones_cab rc
   JOIN tbl_compras_entidades ve ON rc.id_entidad = ve.id_entidadcompra
   JOIN tbl_invserv_bodegas b ON rc.id_bodega = b.id_bodega
   JOIN tbl_cont_monedas m ON rc.moneda = m.clave;

--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_compras_devoluciones_impdet AS 
 SELECT rd.id_vc AS id_devolucion, rd.partida, rd.cantidad, rd.id_prod, c.descripcion, c.id_unidadsalida, rd.precio, rd.descuento, rd.iva, rd.obs, rd.importe, c.id_tipo, 
        CASE
            WHEN rd.iva = 0::numeric THEN rd.precio
            ELSE round(rd.precio + rd.precio * rd.iva / 100::numeric, 4)
        END AS precioiva, 
        CASE
            WHEN rd.iva = 0::numeric THEN 
            CASE
                WHEN rd.descuento = 0::numeric THEN round(rd.precio * rd.cantidad, 4)
                ELSE round(rd.precio * rd.cantidad - rd.precio * rd.cantidad * rd.descuento / 100::numeric, 4)
            END
            ELSE 
            CASE
                WHEN rd.descuento = 0::numeric THEN round(rd.precio * rd.cantidad + rd.precio * rd.cantidad * rd.iva / 100::numeric, 4)
                ELSE round(rd.precio * rd.cantidad - rd.precio * rd.cantidad * rd.descuento / 100::numeric + (rd.precio * rd.cantidad - rd.precio * rd.cantidad * rd.descuento / 100::numeric) * rd.iva / 100::numeric, 4)
            END
        END AS importeiva
   FROM tbl_compras_devoluciones_det rd
   JOIN tbl_invserv_inventarios c ON rd.id_prod::text = c.id_prod::text;

   
--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_compras_facturas_impcab AS 
 SELECT rc.id_vc AS id_factura, rc.id_entidad, rc.numero, rc.fecha, rc.referencia, rc.status, rc.moneda AS id_moneda, m.moneda, rc.tc, rc.id_clipro AS id_proveedor, 
        CASE
            WHEN rc.id_clipro = 0 THEN 0
            ELSE ( SELECT p.id_numero
               FROM tbl_provee_provee p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'PR'::bpchar)
        END AS num_proveedor, 
        CASE
            WHEN rc.id_clipro = 0 THEN 'Proveedor de Mostrador'::character varying
            ELSE ( SELECT p.nombre
               FROM tbl_provee_provee p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'PR'::bpchar)
        END AS proveedor, ''::character varying AS pol, rc.id_bodega, b.nombre, rc.condicion, rc.obs, rc.mimporte AS importe, rc.mdescuento AS descuento, rc.msubtotal AS subtotal, rc.miva AS iva, rc.ieps, rc.ivaret, rc.isrret, rc.mtotal AS total, 
        CASE
            WHEN rc.id_clipro = 0 THEN 'XAXX010101000'::character varying
            ELSE ( SELECT p.rfc
               FROM tbl_provee_provee p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'PR'::bpchar)
        END AS rfc, 
        CASE
            WHEN rc.id_clipro = 0 THEN ''::character varying(80)
            ELSE ( SELECT p.direccion
               FROM tbl_provee_provee p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'PR'::bpchar)
        END AS direccion, 
        CASE
            WHEN rc.id_clipro = 0 THEN ''::character varying
            ELSE ( SELECT p.direccion
               FROM tbl_provee_provee p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'PR'::bpchar)
        END AS calle, 
        CASE
            WHEN rc.id_clipro = 0 THEN ''::character varying
            ELSE ( SELECT p.noext
               FROM tbl_provee_provee p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'PR'::bpchar)
        END AS noext, 
        CASE
            WHEN rc.id_clipro = 0 THEN ''::character varying
            ELSE ( SELECT p.noint
               FROM tbl_provee_provee p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'PR'::bpchar)
        END AS noint, 
        CASE
            WHEN rc.id_clipro = 0 THEN ''::character varying
            ELSE ( SELECT p.colonia
               FROM tbl_provee_provee p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'PR'::bpchar)
        END AS colonia, 
        CASE
            WHEN rc.id_clipro = 0 THEN ''::character varying(80)
            ELSE ( SELECT p.poblacion
               FROM tbl_provee_provee p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'PR'::bpchar)
        END AS poblacion, 
        CASE
            WHEN rc.id_clipro = 0 THEN ''::character varying
            ELSE ( SELECT p.poblacion
               FROM tbl_provee_provee p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'PR'::bpchar)
        END AS localidad, 
        CASE
            WHEN rc.id_clipro = 0 THEN ''::character varying
            ELSE ( SELECT p.municipio
               FROM tbl_provee_provee p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'PR'::bpchar)
        END AS municipio, 
        CASE
            WHEN rc.id_clipro = 0 THEN ''::character varying
            ELSE ( SELECT p.estado
               FROM tbl_provee_provee p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'PR'::bpchar)
        END AS estado, 
        CASE
            WHEN rc.id_clipro = 0 THEN 'Mexico'::character varying
            ELSE ( SELECT p.pais
               FROM tbl_provee_provee p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'PR'::bpchar)
        END AS pais, 
        CASE
            WHEN rc.id_clipro = 0 THEN ''::character varying
            ELSE ( SELECT p.cp
               FROM tbl_provee_provee p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'PR'::bpchar)
        END AS cp
   FROM tbl_compras_facturas_cab rc
   JOIN tbl_compras_entidades ve ON rc.id_entidad = ve.id_entidadcompra
   JOIN tbl_invserv_bodegas b ON rc.id_bodega = b.id_bodega
   JOIN tbl_cont_monedas m ON rc.moneda = m.clave;


--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_compras_facturas_impdet AS 
 SELECT rd.id_vc AS id_factura, rd.partida, rd.cantidad, rd.id_prod, c.descripcion, c.id_unidadsalida, rd.precio, rd.descuento, rd.iva, rd.obs, rd.importe, c.id_tipo, 
        CASE
            WHEN rd.iva = 0::numeric THEN rd.precio
            ELSE round(rd.precio + rd.precio * rd.iva / 100::numeric, 4)
        END AS precioiva, 
        CASE
            WHEN rd.iva = 0::numeric THEN 
            CASE
                WHEN rd.descuento = 0::numeric THEN round(rd.precio * rd.cantidad, 4)
                ELSE round(rd.precio * rd.cantidad - rd.precio * rd.cantidad * rd.descuento / 100::numeric, 4)
            END
            ELSE 
            CASE
                WHEN rd.descuento = 0::numeric THEN round(rd.precio * rd.cantidad + rd.precio * rd.cantidad * rd.iva / 100::numeric, 4)
                ELSE round(rd.precio * rd.cantidad - rd.precio * rd.cantidad * rd.descuento / 100::numeric + (rd.precio * rd.cantidad - rd.precio * rd.cantidad * rd.descuento / 100::numeric) * rd.iva / 100::numeric, 4)
            END
        END AS importeiva
   FROM tbl_compras_facturas_det rd
   JOIN tbl_invserv_inventarios c ON rd.id_prod::text = c.id_prod::text;

--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_compras_gastos_impcab AS 
 SELECT rc.id_vc AS id_gasto, rc.id_entidad, rc.numero, rc.fecha, rc.referencia, rc.status, rc.moneda AS id_moneda, m.moneda, rc.tc, rc.id_clipro AS id_proveedor, 
        CASE
            WHEN rc.id_clipro = 0 THEN 0
            ELSE ( SELECT p.id_numero
               FROM tbl_provee_provee p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'PR'::bpchar)
        END AS num_proveedor, 
        CASE
            WHEN rc.id_clipro = 0 THEN 'Proveedor de Mostrador'::character varying
            ELSE ( SELECT p.nombre
               FROM tbl_provee_provee p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'PR'::bpchar)
        END AS proveedor, ''::character varying AS pol, rc.id_bodega, b.nombre, rc.condicion, rc.obs, rc.mimporte AS importe, rc.mdescuento AS descuento, rc.msubtotal AS subtotal, rc.miva AS iva, rc.ieps, rc.ivaret, rc.isrret, rc.mtotal AS total, 
        CASE
            WHEN rc.id_clipro = 0 THEN 'XAXX010101000'::character varying
            ELSE ( SELECT p.rfc
               FROM tbl_provee_provee p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'PR'::bpchar)
        END AS rfc, 
        CASE
            WHEN rc.id_clipro = 0 THEN ''::character varying(80)
            ELSE ( SELECT p.direccion
               FROM tbl_provee_provee p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'PR'::bpchar)
        END AS direccion, 
        CASE
            WHEN rc.id_clipro = 0 THEN ''::character varying
            ELSE ( SELECT p.direccion
               FROM tbl_provee_provee p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'PR'::bpchar)
        END AS calle, 
        CASE
            WHEN rc.id_clipro = 0 THEN ''::character varying
            ELSE ( SELECT p.noext
               FROM tbl_provee_provee p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'PR'::bpchar)
        END AS noext, 
        CASE
            WHEN rc.id_clipro = 0 THEN ''::character varying
            ELSE ( SELECT p.noint
               FROM tbl_provee_provee p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'PR'::bpchar)
        END AS noint, 
        CASE
            WHEN rc.id_clipro = 0 THEN ''::character varying
            ELSE ( SELECT p.colonia
               FROM tbl_provee_provee p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'PR'::bpchar)
        END AS colonia, 
        CASE
            WHEN rc.id_clipro = 0 THEN ''::character varying(80)
            ELSE ( SELECT p.poblacion
               FROM tbl_provee_provee p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'PR'::bpchar)
        END AS poblacion, 
        CASE
            WHEN rc.id_clipro = 0 THEN ''::character varying
            ELSE ( SELECT p.poblacion
               FROM tbl_provee_provee p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'PR'::bpchar)
        END AS localidad, 
        CASE
            WHEN rc.id_clipro = 0 THEN ''::character varying
            ELSE ( SELECT p.municipio
               FROM tbl_provee_provee p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'PR'::bpchar)
        END AS municipio, 
        CASE
            WHEN rc.id_clipro = 0 THEN ''::character varying
            ELSE ( SELECT p.estado
               FROM tbl_provee_provee p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'PR'::bpchar)
        END AS estado, 
        CASE
            WHEN rc.id_clipro = 0 THEN 'Mexico'::character varying
            ELSE ( SELECT p.pais
               FROM tbl_provee_provee p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'PR'::bpchar)
        END AS pais, 
        CASE
            WHEN rc.id_clipro = 0 THEN ''::character varying
            ELSE ( SELECT p.cp
               FROM tbl_provee_provee p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'PR'::bpchar)
        END AS cp
   FROM tbl_compras_gastos_cab rc
   JOIN tbl_compras_entidades ve ON rc.id_entidad = ve.id_entidadcompra
   JOIN tbl_invserv_bodegas b ON rc.id_bodega = b.id_bodega
   JOIN tbl_cont_monedas m ON rc.moneda = m.clave;


--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_compras_gastos_impdet AS 
 SELECT rd.id_vc AS id_gasto, rd.partida, rd.cantidad, rd.id_prod, c.descripcion, c.id_unidadsalida, rd.precio, rd.descuento, rd.iva, rd.obs, rd.importe, c.id_tipo, 
        CASE
            WHEN rd.iva = 0::numeric THEN rd.precio
            ELSE round(rd.precio + rd.precio * rd.iva / 100::numeric, 4)
        END AS precioiva, 
        CASE
            WHEN rd.iva = 0::numeric THEN 
            CASE
                WHEN rd.descuento = 0::numeric THEN round(rd.precio * rd.cantidad, 4)
                ELSE round(rd.precio * rd.cantidad - rd.precio * rd.cantidad * rd.descuento / 100::numeric, 4)
            END
            ELSE 
            CASE
                WHEN rd.descuento = 0::numeric THEN round(rd.precio * rd.cantidad + rd.precio * rd.cantidad * rd.iva / 100::numeric, 4)
                ELSE round(rd.precio * rd.cantidad - rd.precio * rd.cantidad * rd.descuento / 100::numeric + (rd.precio * rd.cantidad - rd.precio * rd.cantidad * rd.descuento / 100::numeric) * rd.iva / 100::numeric, 4)
            END
        END AS importeiva
   FROM tbl_compras_gastos_det rd
   JOIN tbl_invserv_inventarios c ON rd.id_prod::text = c.id_prod::text;

--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_compras_recepciones_impcab AS 
 SELECT rc.id_vc AS id_recepcion, rc.id_entidad, rc.numero, rc.fecha, rc.referencia, rc.status, rc.moneda AS id_moneda, m.moneda, rc.tc, rc.id_clipro AS id_proveedor, 
        CASE
            WHEN rc.id_clipro = 0 THEN 0
            ELSE ( SELECT p.id_numero
               FROM tbl_provee_provee p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'PR'::bpchar)
        END AS num_proveedor, 
        CASE
            WHEN rc.id_clipro = 0 THEN 'Proveedor de Mostrador'::character varying
            ELSE ( SELECT p.nombre
               FROM tbl_provee_provee p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'PR'::bpchar)
        END AS proveedor, ''::character varying AS pol, rc.id_bodega, b.nombre, rc.condicion, rc.obs, rc.mimporte AS importe, rc.mdescuento AS descuento, rc.msubtotal AS subtotal, rc.miva AS iva, rc.ieps, rc.ivaret, rc.isrret, rc.mtotal AS total, 
        CASE
            WHEN rc.id_clipro = 0 THEN 'XAXX010101000'::character varying
            ELSE ( SELECT p.rfc
               FROM tbl_provee_provee p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'PR'::bpchar)
        END AS rfc, 
        CASE
            WHEN rc.id_clipro = 0 THEN ''::character varying(80)
            ELSE ( SELECT p.direccion
               FROM tbl_provee_provee p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'PR'::bpchar)
        END AS direccion, 
        CASE
            WHEN rc.id_clipro = 0 THEN ''::character varying
            ELSE ( SELECT p.direccion
               FROM tbl_provee_provee p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'PR'::bpchar)
        END AS calle, 
        CASE
            WHEN rc.id_clipro = 0 THEN ''::character varying
            ELSE ( SELECT p.noext
               FROM tbl_provee_provee p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'PR'::bpchar)
        END AS noext, 
        CASE
            WHEN rc.id_clipro = 0 THEN ''::character varying
            ELSE ( SELECT p.noint
               FROM tbl_provee_provee p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'PR'::bpchar)
        END AS noint, 
        CASE
            WHEN rc.id_clipro = 0 THEN ''::character varying
            ELSE ( SELECT p.colonia
               FROM tbl_provee_provee p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'PR'::bpchar)
        END AS colonia, 
        CASE
            WHEN rc.id_clipro = 0 THEN ''::character varying(80)
            ELSE ( SELECT p.poblacion
               FROM tbl_provee_provee p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'PR'::bpchar)
        END AS poblacion, 
        CASE
            WHEN rc.id_clipro = 0 THEN ''::character varying
            ELSE ( SELECT p.poblacion
               FROM tbl_provee_provee p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'PR'::bpchar)
        END AS localidad, 
        CASE
            WHEN rc.id_clipro = 0 THEN ''::character varying
            ELSE ( SELECT p.municipio
               FROM tbl_provee_provee p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'PR'::bpchar)
        END AS municipio, 
        CASE
            WHEN rc.id_clipro = 0 THEN ''::character varying
            ELSE ( SELECT p.estado
               FROM tbl_provee_provee p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'PR'::bpchar)
        END AS estado, 
        CASE
            WHEN rc.id_clipro = 0 THEN 'Mexico'::character varying
            ELSE ( SELECT p.pais
               FROM tbl_provee_provee p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'PR'::bpchar)
        END AS pais, 
        CASE
            WHEN rc.id_clipro = 0 THEN ''::character varying
            ELSE ( SELECT p.cp
               FROM tbl_provee_provee p
              WHERE rc.id_clipro = p.id_clave AND p.id_tipo = 'PR'::bpchar)
        END AS cp
   FROM tbl_compras_recepciones_cab rc
   JOIN tbl_compras_entidades ve ON rc.id_entidad = ve.id_entidadcompra
   JOIN tbl_invserv_bodegas b ON rc.id_bodega = b.id_bodega
   JOIN tbl_cont_monedas m ON rc.moneda = m.clave;


--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_compras_recepciones_impdet AS 
 SELECT rd.id_vc AS id_recepcion, rd.partida, rd.cantidad, rd.id_prod, c.descripcion, c.id_unidadsalida, rd.precio, rd.descuento, rd.iva, rd.obs, rd.importe, c.id_tipo, 
        CASE
            WHEN rd.iva = 0::numeric THEN rd.precio
            ELSE round(rd.precio + rd.precio * rd.iva / 100::numeric, 4)
        END AS precioiva, 
        CASE
            WHEN rd.iva = 0::numeric THEN 
            CASE
                WHEN rd.descuento = 0::numeric THEN round(rd.precio * rd.cantidad, 4)
                ELSE round(rd.precio * rd.cantidad - rd.precio * rd.cantidad * rd.descuento / 100::numeric, 4)
            END
            ELSE 
            CASE
                WHEN rd.descuento = 0::numeric THEN round(rd.precio * rd.cantidad + rd.precio * rd.cantidad * rd.iva / 100::numeric, 4)
                ELSE round(rd.precio * rd.cantidad - rd.precio * rd.cantidad * rd.descuento / 100::numeric + (rd.precio * rd.cantidad - rd.precio * rd.cantidad * rd.descuento / 100::numeric) * rd.iva / 100::numeric, 4)
            END
        END AS importeiva
   FROM tbl_compras_recepciones_det rd
   JOIN tbl_invserv_inventarios c ON rd.id_prod::text = c.id_prod::text;


insert into TBL_FORMATOS
values('FSI-CORD','Formato para ordenes de compra','COMP_ORD');

insert into TBL_FORMATOS_DET
values('FSI-CORD','1','FSI_IMPTIT','font-family: Arial, Helvetica, sans-serif; font-size: 20pt; font-style: normal; font-weight: bold;',NULL,NULL,NULL,NULL,'S',NULL,NULL,NULL);
insert into TBL_FORMATOS_DET
values('FSI-CORD','2','FSI_IMPETQ','font-family: Arial, Helvetica, sans-serif; font-size: 9pt; font-style: italic; font-weight: bold;',NULL,NULL,NULL,NULL,'S',NULL,NULL,NULL);
insert into TBL_FORMATOS_DET
values('FSI-CORD','3','FSI_IMPCAB','font-family: Arial, Helvetica, sans-serif; font-size: 8pt; font-style: normal; font-weight: bold;',NULL,NULL,NULL,NULL,'S',NULL,NULL,NULL);
insert into TBL_FORMATOS_DET
values('FSI-CORD','4','FSI_IMPDET','font-family: Arial, Helvetica, sans-serif; font-size: 7pt; font-style: normal; font-weight: normal;',NULL,NULL,NULL,NULL,'S',NULL,NULL,NULL);
insert into TBL_FORMATOS_DET
values('FSI-CORD','5','FSI_CAB','',NULL,NULL,NULL,'259.40','S',NULL,NULL,NULL);
insert into TBL_FORMATOS_DET
values('FSI-CORD','6','FSI_VENTANA','','.00','.00','800.00','450.00','S',NULL,NULL,NULL);
insert into TBL_FORMATOS_DET
values('FSI-CORD','7','FSI_DET','13',NULL,'82.30',NULL,'8.00','S',NULL,NULL,NULL);
insert into TBL_FORMATOS_DET
values('FSI-CORD','8','FSI_ETIQUETA','Fecha','72.30','52.30','75.00','5.00','C','000000','right','center');
insert into TBL_FORMATOS_DET
values('FSI-CORD','9','FSI_ETIQUETA','Clave','102.30','35.30','25.00','5.00','C','000000','center','center');
insert into TBL_FORMATOS_DET
values('FSI-CORD','10','FSI_ETIQUETA','CP','82.30','45.30','10.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-CORD','11','Fecha','dd/MMM/yyyy','152.30','52.30','47.00','5.00','C','000000','center','center');
insert into TBL_FORMATOS_DET
values('FSI-CORD','12','Proveedor','general','.00','35.30','105.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-CORD','13','CP','general','92.30','45.30','35.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-CORD','14','Nombre','general','152.30','24.30','47.00','5.00','C','000000','center','center');
insert into TBL_FORMATOS_DET
values('FSI-CORD','15','Num_Proveedor',',|0','127.30','35.30','20.00','5.00','C','000000','center','center');
insert into TBL_FORMATOS_DET
values('FSI-CORD','16','Direccion','general','.00','40.30','85.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-CORD','17','Colonia','general','82.30','40.30','65.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-CORD','18','Poblacion','general','.00','45.30','85.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-CORD','19','FSI_ETIQUETA','RFC','.00','50.30','15.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-CORD','20','RFC','general','12.30','50.30','35.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-CORD','21','FSI_ETIQUETA','Referencia','47.30','50.30','20.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-CORD','22','Referencia','general','67.30','50.30','25.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-CORD','23','Obs','general','.00','191.30','190.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-CORD','24','FSI_ETIQUETA','SUB TOTAL','132.30','217.30','25.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-CORD','25','SubTotal',',|.|2|0','157.30','217.30','25.00','5.00','C','000000','right','center');
insert into TBL_FORMATOS_DET
values('FSI-CORD','26','FSI_ETIQUETA','IVA 16%','132.30','222.30','25.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-CORD','27','IVA',',|.|2|0','157.30','222.30','25.00','5.00','C','000000','right','center');
insert into TBL_FORMATOS_DET
values('FSI-CORD','28','FSI_ETIQUETA','TOTAL','132.30','227.30','25.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-CORD','29','Total',',|.|2|0','157.30','227.30','25.00','5.00','C','000000','right','center');
insert into TBL_FORMATOS_DET
values('FSI-CORD','30','FSI_ETIQUETA','Cant','.00','67.30','15.00','5.00','C','000000','right','center');
insert into TBL_FORMATOS_DET
values('FSI-CORD','31','FSI_ETIQUETA','Uni','15.00','67.30','12.30','5.00','C','000000','center','center');
insert into TBL_FORMATOS_DET
values('FSI-CORD','32','FSI_ETIQUETA','Clave','27.30','67.30','25.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-CORD','33','FSI_ETIQUETA','Descripcion','52.30','67.30','80.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-CORD','34','FSI_ETIQUETA','Precio','132.30','67.30','25.00','5.00','C','000000','right','center');
insert into TBL_FORMATOS_DET
values('FSI-CORD','35','FSI_ETIQUETA','Importe','157.30','67.30','30.00','5.00','C','000000','right','center');
insert into TBL_FORMATOS_DET
values('FSI-CORD','36','FSI_LH','t_negra','.00','77.30','190.00','.50','C',NULL,NULL,NULL);
insert into TBL_FORMATOS_DET
values('FSI-CORD','37','Cantidad',',|.|3|0','.00','.00','15.00','4.00','D','000000','right','center');
insert into TBL_FORMATOS_DET
values('FSI-CORD','38','ID_UnidadSalida','general','15.00','.00','12.30','4.00','D','000000','center','center');
insert into TBL_FORMATOS_DET
values('FSI-CORD','39','ID_Prod','general','27.30','.00','25.00','4.00','D','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-CORD','40','Descripcion','general','52.30','.00','80.00','4.00','D','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-CORD','41','Precio',',|.|4|0','132.30','.00','25.00','4.00','D','000000','right','center');
insert into TBL_FORMATOS_DET
values('FSI-CORD','42','Importe',',|.|2|0','157.30','.00','30.00','4.00','D','000000','right','center');
insert into TBL_FORMATOS_DET
values('FSI-CORD','43','Obs','general','12.30','4.00','170.00','4.00','D','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-CORD','44','FSI_TITULO','ORDEN DE COMPRA','5.00','5.00','190.00','20.00','C','000000','center','middle');

insert into TBL_FORMATOS
values('FSI-CREC','Formato para recepciones','COMP_REC');

insert into TBL_FORMATOS_DET
values('FSI-CREC','1','FSI_IMPTIT','font-family: Arial, Helvetica, sans-serif; font-size: 20pt; font-style: normal; font-weight: bold;',NULL,NULL,NULL,NULL,'S',NULL,NULL,NULL);
insert into TBL_FORMATOS_DET
values('FSI-CREC','2','FSI_IMPETQ','font-family: Arial, Helvetica, sans-serif; font-size: 9pt; font-style: italic; font-weight: bold;',NULL,NULL,NULL,NULL,'S',NULL,NULL,NULL);
insert into TBL_FORMATOS_DET
values('FSI-CREC','3','FSI_IMPCAB','font-family: Arial, Helvetica, sans-serif; font-size: 8pt; font-style: normal; font-weight: bold;',NULL,NULL,NULL,NULL,'S',NULL,NULL,NULL);
insert into TBL_FORMATOS_DET
values('FSI-CREC','4','FSI_IMPDET','font-family: Arial, Helvetica, sans-serif; font-size: 7pt; font-style: normal; font-weight: normal;',NULL,NULL,NULL,NULL,'S',NULL,NULL,NULL);
insert into TBL_FORMATOS_DET
values('FSI-CREC','5','FSI_CAB','',NULL,NULL,NULL,'259.40','S',NULL,NULL,NULL);
insert into TBL_FORMATOS_DET
values('FSI-CREC','6','FSI_VENTANA','','.00','.00','800.00','450.00','S',NULL,NULL,NULL);
insert into TBL_FORMATOS_DET
values('FSI-CREC','7','FSI_DET','13',NULL,'82.30',NULL,'8.00','S',NULL,NULL,NULL);
insert into TBL_FORMATOS_DET
values('FSI-CREC','8','FSI_ETIQUETA','Fecha','72.30','52.30','75.00','5.00','C','000000','right','center');
insert into TBL_FORMATOS_DET
values('FSI-CREC','9','FSI_ETIQUETA','Clave','102.30','35.30','25.00','5.00','C','000000','center','center');
insert into TBL_FORMATOS_DET
values('FSI-CREC','10','FSI_ETIQUETA','CP','82.30','45.30','10.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-CREC','11','Fecha','dd/MMM/yyyy','152.30','52.30','47.00','5.00','C','000000','center','center');
insert into TBL_FORMATOS_DET
values('FSI-CREC','12','Proveedor','general','.00','35.30','105.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-CREC','13','CP','general','92.30','45.30','35.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-CREC','14','Nombre','general','152.30','24.30','47.00','5.00','C','000000','center','center');
insert into TBL_FORMATOS_DET
values('FSI-CREC','15','Num_Proveedor',',|0','127.30','35.30','20.00','5.00','C','000000','center','center');
insert into TBL_FORMATOS_DET
values('FSI-CREC','16','Direccion','general','.00','40.30','85.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-CREC','17','Colonia','general','82.30','40.30','65.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-CREC','18','Poblacion','general','.00','45.30','85.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-CREC','19','FSI_ETIQUETA','RFC','.00','50.30','15.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-CREC','20','RFC','general','12.30','50.30','35.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-CREC','21','FSI_ETIQUETA','Referencia','47.30','50.30','20.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-CREC','22','Referencia','general','67.30','50.30','25.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-CREC','23','Obs','general','.00','191.30','190.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-CREC','24','FSI_ETIQUETA','SUB TOTAL','132.30','217.30','25.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-CREC','25','SubTotal',',|.|2|0','157.30','217.30','25.00','5.00','C','000000','right','center');
insert into TBL_FORMATOS_DET
values('FSI-CREC','26','FSI_ETIQUETA','IVA 16%','132.30','222.30','25.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-CREC','27','IVA',',|.|2|0','157.30','222.30','25.00','5.00','C','000000','right','center');
insert into TBL_FORMATOS_DET
values('FSI-CREC','28','FSI_ETIQUETA','TOTAL','132.30','227.30','25.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-CREC','29','Total',',|.|2|0','157.30','227.30','25.00','5.00','C','000000','right','center');
insert into TBL_FORMATOS_DET
values('FSI-CREC','30','FSI_ETIQUETA','Cant','.00','67.30','15.00','5.00','C','000000','right','center');
insert into TBL_FORMATOS_DET
values('FSI-CREC','31','FSI_ETIQUETA','Uni','15.00','67.30','12.30','5.00','C','000000','center','center');
insert into TBL_FORMATOS_DET
values('FSI-CREC','32','FSI_ETIQUETA','Clave','27.30','67.30','25.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-CREC','33','FSI_ETIQUETA','Descripcion','52.30','67.30','80.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-CREC','34','FSI_ETIQUETA','Precio','132.30','67.30','25.00','5.00','C','000000','right','center');
insert into TBL_FORMATOS_DET
values('FSI-CREC','35','FSI_ETIQUETA','Importe','157.30','67.30','30.00','5.00','C','000000','right','center');
insert into TBL_FORMATOS_DET
values('FSI-CREC','36','FSI_LH','t_negra','.00','77.30','190.00','.50','C',NULL,NULL,NULL);
insert into TBL_FORMATOS_DET
values('FSI-CREC','37','Cantidad',',|.|3|0','.00','.00','15.00','4.00','D','000000','right','center');
insert into TBL_FORMATOS_DET
values('FSI-CREC','38','ID_UnidadSalida','general','15.00','.00','12.30','4.00','D','000000','center','center');
insert into TBL_FORMATOS_DET
values('FSI-CREC','39','ID_Prod','general','27.30','.00','25.00','4.00','D','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-CREC','40','Descripcion','general','52.30','.00','80.00','4.00','D','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-CREC','41','Precio',',|.|4|0','132.30','.00','25.00','4.00','D','000000','right','center');
insert into TBL_FORMATOS_DET
values('FSI-CREC','42','Importe',',|.|2|0','157.30','.00','30.00','4.00','D','000000','right','center');
insert into TBL_FORMATOS_DET
values('FSI-CREC','43','Obs','general','12.30','4.00','170.00','4.00','D','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-CREC','44','FSI_TITULO','RECEPCION DE MATERIAL','5.00','5.00','190.00','20.00','C','000000','center','middle');

insert into TBL_FORMATOS
values('FSI-CFAC','Formato para compras','COMP_FAC');

insert into TBL_FORMATOS_DET
values('FSI-CFAC','1','FSI_IMPTIT','font-family: Arial, Helvetica, sans-serif; font-size: 20pt; font-style: normal; font-weight: bold;',NULL,NULL,NULL,NULL,'S',NULL,NULL,NULL);
insert into TBL_FORMATOS_DET
values('FSI-CFAC','2','FSI_IMPETQ','font-family: Arial, Helvetica, sans-serif; font-size: 9pt; font-style: italic; font-weight: bold;',NULL,NULL,NULL,NULL,'S',NULL,NULL,NULL);
insert into TBL_FORMATOS_DET
values('FSI-CFAC','3','FSI_IMPCAB','font-family: Arial, Helvetica, sans-serif; font-size: 8pt; font-style: normal; font-weight: bold;',NULL,NULL,NULL,NULL,'S',NULL,NULL,NULL);
insert into TBL_FORMATOS_DET
values('FSI-CFAC','4','FSI_IMPDET','font-family: Arial, Helvetica, sans-serif; font-size: 7pt; font-style: normal; font-weight: normal;',NULL,NULL,NULL,NULL,'S',NULL,NULL,NULL);
insert into TBL_FORMATOS_DET
values('FSI-CFAC','5','FSI_CAB','',NULL,NULL,NULL,'259.40','S',NULL,NULL,NULL);
insert into TBL_FORMATOS_DET
values('FSI-CFAC','6','FSI_VENTANA','','.00','.00','800.00','450.00','S',NULL,NULL,NULL);
insert into TBL_FORMATOS_DET
values('FSI-CFAC','7','FSI_DET','13',NULL,'82.30',NULL,'8.00','S',NULL,NULL,NULL);
insert into TBL_FORMATOS_DET
values('FSI-CFAC','8','FSI_ETIQUETA','Fecha','72.30','52.30','75.00','5.00','C','000000','right','center');
insert into TBL_FORMATOS_DET
values('FSI-CFAC','9','FSI_ETIQUETA','Clave','102.30','35.30','25.00','5.00','C','000000','center','center');
insert into TBL_FORMATOS_DET
values('FSI-CFAC','10','FSI_ETIQUETA','CP','82.30','45.30','10.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-CFAC','11','Fecha','dd/MMM/yyyy','152.30','52.30','47.00','5.00','C','000000','center','center');
insert into TBL_FORMATOS_DET
values('FSI-CFAC','12','Proveedor','general','.00','35.30','105.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-CFAC','13','CP','general','92.30','45.30','35.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-CFAC','14','Nombre','general','152.30','24.30','47.00','5.00','C','000000','center','center');
insert into TBL_FORMATOS_DET
values('FSI-CFAC','15','Num_Proveedor',',|0','127.30','35.30','20.00','5.00','C','000000','center','center');
insert into TBL_FORMATOS_DET
values('FSI-CFAC','16','Direccion','general','.00','40.30','85.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-CFAC','17','Colonia','general','82.30','40.30','65.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-CFAC','18','Poblacion','general','.00','45.30','85.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-CFAC','19','FSI_ETIQUETA','RFC','.00','50.30','15.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-CFAC','20','RFC','general','12.30','50.30','35.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-CFAC','21','FSI_ETIQUETA','Referencia','47.30','50.30','20.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-CFAC','22','Referencia','general','67.30','50.30','25.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-CFAC','23','Obs','general','.00','191.30','190.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-CFAC','24','FSI_ETIQUETA','SUB TOTAL','132.30','217.30','25.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-CFAC','25','SubTotal',',|.|2|0','157.30','217.30','25.00','5.00','C','000000','right','center');
insert into TBL_FORMATOS_DET
values('FSI-CFAC','26','FSI_ETIQUETA','IVA 16%','132.30','222.30','25.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-CFAC','27','IVA',',|.|2|0','157.30','222.30','25.00','5.00','C','000000','right','center');
insert into TBL_FORMATOS_DET
values('FSI-CFAC','28','FSI_ETIQUETA','TOTAL','132.30','227.30','25.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-CFAC','29','Total',',|.|2|0','157.30','227.30','25.00','5.00','C','000000','right','center');
insert into TBL_FORMATOS_DET
values('FSI-CFAC','30','FSI_ETIQUETA','Cant','.00','67.30','15.00','5.00','C','000000','right','center');
insert into TBL_FORMATOS_DET
values('FSI-CFAC','31','FSI_ETIQUETA','Uni','15.00','67.30','12.30','5.00','C','000000','center','center');
insert into TBL_FORMATOS_DET
values('FSI-CFAC','32','FSI_ETIQUETA','Clave','27.30','67.30','25.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-CFAC','33','FSI_ETIQUETA','Descripcion','52.30','67.30','80.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-CFAC','34','FSI_ETIQUETA','Precio','132.30','67.30','25.00','5.00','C','000000','right','center');
insert into TBL_FORMATOS_DET
values('FSI-CFAC','35','FSI_ETIQUETA','Importe','157.30','67.30','30.00','5.00','C','000000','right','center');
insert into TBL_FORMATOS_DET
values('FSI-CFAC','36','FSI_LH','t_negra','.00','77.30','190.00','.50','C',NULL,NULL,NULL);
insert into TBL_FORMATOS_DET
values('FSI-CFAC','37','Cantidad',',|.|3|0','.00','.00','15.00','4.00','D','000000','right','center');
insert into TBL_FORMATOS_DET
values('FSI-CFAC','38','ID_UnidadSalida','general','15.00','.00','12.30','4.00','D','000000','center','center');
insert into TBL_FORMATOS_DET
values('FSI-CFAC','39','ID_Prod','general','27.30','.00','25.00','4.00','D','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-CFAC','40','Descripcion','general','52.30','.00','80.00','4.00','D','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-CFAC','41','Precio',',|.|4|0','132.30','.00','25.00','4.00','D','000000','right','center');
insert into TBL_FORMATOS_DET
values('FSI-CFAC','42','Importe',',|.|2|0','157.30','.00','30.00','4.00','D','000000','right','center');
insert into TBL_FORMATOS_DET
values('FSI-CFAC','43','Obs','general','12.30','4.00','170.00','4.00','D','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-CFAC','44','FSI_TITULO','COMPRA','5.00','5.00','190.00','20.00','C','000000','center','middle');

insert into TBL_FORMATOS
values('FSI-CDEV','Formato para devolucion o rebaja sobre compras','COMP_DEV');

insert into TBL_FORMATOS_DET
values('FSI-CDEV','1','FSI_IMPTIT','font-family: Arial, Helvetica, sans-serif; font-size: 20pt; font-style: normal; font-weight: bold;',NULL,NULL,NULL,NULL,'S',NULL,NULL,NULL);
insert into TBL_FORMATOS_DET
values('FSI-CDEV','2','FSI_IMPETQ','font-family: Arial, Helvetica, sans-serif; font-size: 9pt; font-style: italic; font-weight: bold;',NULL,NULL,NULL,NULL,'S',NULL,NULL,NULL);
insert into TBL_FORMATOS_DET
values('FSI-CDEV','3','FSI_IMPCAB','font-family: Arial, Helvetica, sans-serif; font-size: 8pt; font-style: normal; font-weight: bold;',NULL,NULL,NULL,NULL,'S',NULL,NULL,NULL);
insert into TBL_FORMATOS_DET
values('FSI-CDEV','4','FSI_IMPDET','font-family: Arial, Helvetica, sans-serif; font-size: 7pt; font-style: normal; font-weight: normal;',NULL,NULL,NULL,NULL,'S',NULL,NULL,NULL);
insert into TBL_FORMATOS_DET
values('FSI-CDEV','5','FSI_CAB','',NULL,NULL,NULL,'259.40','S',NULL,NULL,NULL);
insert into TBL_FORMATOS_DET
values('FSI-CDEV','6','FSI_VENTANA','','.00','.00','800.00','450.00','S',NULL,NULL,NULL);
insert into TBL_FORMATOS_DET
values('FSI-CDEV','7','FSI_DET','13',NULL,'82.30',NULL,'8.00','S',NULL,NULL,NULL);
insert into TBL_FORMATOS_DET
values('FSI-CDEV','8','FSI_ETIQUETA','Fecha','72.30','52.30','75.00','5.00','C','000000','right','center');
insert into TBL_FORMATOS_DET
values('FSI-CDEV','9','FSI_ETIQUETA','Clave','102.30','35.30','25.00','5.00','C','000000','center','center');
insert into TBL_FORMATOS_DET
values('FSI-CDEV','10','FSI_ETIQUETA','CP','82.30','45.30','10.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-CDEV','11','Fecha','dd/MMM/yyyy','152.30','52.30','47.00','5.00','C','000000','center','center');
insert into TBL_FORMATOS_DET
values('FSI-CDEV','12','Proveedor','general','.00','35.30','105.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-CDEV','13','CP','general','92.30','45.30','35.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-CDEV','14','Nombre','general','152.30','24.30','47.00','5.00','C','000000','center','center');
insert into TBL_FORMATOS_DET
values('FSI-CDEV','15','Num_Proveedor',',|0','127.30','35.30','20.00','5.00','C','000000','center','center');
insert into TBL_FORMATOS_DET
values('FSI-CDEV','16','Direccion','general','.00','40.30','85.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-CDEV','17','Colonia','general','82.30','40.30','65.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-CDEV','18','Poblacion','general','.00','45.30','85.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-CDEV','19','FSI_ETIQUETA','RFC','.00','50.30','15.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-CDEV','20','RFC','general','12.30','50.30','35.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-CDEV','21','FSI_ETIQUETA','Referencia','47.30','50.30','20.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-CDEV','22','Referencia','general','67.30','50.30','25.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-CDEV','23','Obs','general','.00','191.30','190.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-CDEV','24','FSI_ETIQUETA','SUB TOTAL','132.30','217.30','25.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-CDEV','25','SubTotal',',|.|2|0','157.30','217.30','25.00','5.00','C','000000','right','center');
insert into TBL_FORMATOS_DET
values('FSI-CDEV','26','FSI_ETIQUETA','IVA 16%','132.30','222.30','25.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-CDEV','27','IVA',',|.|2|0','157.30','222.30','25.00','5.00','C','000000','right','center');
insert into TBL_FORMATOS_DET
values('FSI-CDEV','28','FSI_ETIQUETA','TOTAL','132.30','227.30','25.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-CDEV','29','Total',',|.|2|0','157.30','227.30','25.00','5.00','C','000000','right','center');
insert into TBL_FORMATOS_DET
values('FSI-CDEV','30','FSI_ETIQUETA','Cant','.00','67.30','15.00','5.00','C','000000','right','center');
insert into TBL_FORMATOS_DET
values('FSI-CDEV','31','FSI_ETIQUETA','Uni','15.00','67.30','12.30','5.00','C','000000','center','center');
insert into TBL_FORMATOS_DET
values('FSI-CDEV','32','FSI_ETIQUETA','Clave','27.30','67.30','25.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-CDEV','33','FSI_ETIQUETA','Descripcion','52.30','67.30','80.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-CDEV','34','FSI_ETIQUETA','Precio','132.30','67.30','25.00','5.00','C','000000','right','center');
insert into TBL_FORMATOS_DET
values('FSI-CDEV','35','FSI_ETIQUETA','Importe','157.30','67.30','30.00','5.00','C','000000','right','center');
insert into TBL_FORMATOS_DET
values('FSI-CDEV','36','FSI_LH','t_negra','.00','77.30','190.00','.50','C',NULL,NULL,NULL);
insert into TBL_FORMATOS_DET
values('FSI-CDEV','37','Cantidad',',|.|3|0','.00','.00','15.00','4.00','D','000000','right','center');
insert into TBL_FORMATOS_DET
values('FSI-CDEV','38','ID_UnidadSalida','general','15.00','.00','12.30','4.00','D','000000','center','center');
insert into TBL_FORMATOS_DET
values('FSI-CDEV','39','ID_Prod','general','27.30','.00','25.00','4.00','D','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-CDEV','40','Descripcion','general','52.30','.00','80.00','4.00','D','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-CDEV','41','Precio',',|.|4|0','132.30','.00','25.00','4.00','D','000000','right','center');
insert into TBL_FORMATOS_DET
values('FSI-CDEV','42','Importe',',|.|2|0','157.30','.00','30.00','4.00','D','000000','right','center');
insert into TBL_FORMATOS_DET
values('FSI-CDEV','43','Obs','general','12.30','4.00','170.00','4.00','D','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-CDEV','44','FSI_TITULO','DEV. / REB. SOBRE COMPRA','5.00','5.00','190.00','20.00','C','000000','center','middle');

insert into TBL_FORMATOS
values('FSI-CGAS','Formato para gastos','COMP_GAS');

insert into TBL_FORMATOS_DET
values('FSI-CGAS','1','FSI_IMPTIT','font-family: Arial, Helvetica, sans-serif; font-size: 20pt; font-style: normal; font-weight: bold;',NULL,NULL,NULL,NULL,'S',NULL,NULL,NULL);
insert into TBL_FORMATOS_DET
values('FSI-CGAS','2','FSI_IMPETQ','font-family: Arial, Helvetica, sans-serif; font-size: 9pt; font-style: italic; font-weight: bold;',NULL,NULL,NULL,NULL,'S',NULL,NULL,NULL);
insert into TBL_FORMATOS_DET
values('FSI-CGAS','3','FSI_IMPCAB','font-family: Arial, Helvetica, sans-serif; font-size: 8pt; font-style: normal; font-weight: bold;',NULL,NULL,NULL,NULL,'S',NULL,NULL,NULL);
insert into TBL_FORMATOS_DET
values('FSI-CGAS','4','FSI_IMPDET','font-family: Arial, Helvetica, sans-serif; font-size: 7pt; font-style: normal; font-weight: normal;',NULL,NULL,NULL,NULL,'S',NULL,NULL,NULL);
insert into TBL_FORMATOS_DET
values('FSI-CGAS','5','FSI_CAB','',NULL,NULL,NULL,'259.40','S',NULL,NULL,NULL);
insert into TBL_FORMATOS_DET
values('FSI-CGAS','6','FSI_VENTANA','','.00','.00','800.00','450.00','S',NULL,NULL,NULL);
insert into TBL_FORMATOS_DET
values('FSI-CGAS','7','FSI_DET','13',NULL,'82.30',NULL,'8.00','S',NULL,NULL,NULL);
insert into TBL_FORMATOS_DET
values('FSI-CGAS','8','FSI_ETIQUETA','Fecha','72.30','52.30','75.00','5.00','C','000000','right','center');
insert into TBL_FORMATOS_DET
values('FSI-CGAS','9','FSI_ETIQUETA','Clave','102.30','35.30','25.00','5.00','C','000000','center','center');
insert into TBL_FORMATOS_DET
values('FSI-CGAS','10','FSI_ETIQUETA','CP','82.30','45.30','10.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-CGAS','11','Fecha','dd/MMM/yyyy','152.30','52.30','47.00','5.00','C','000000','center','center');
insert into TBL_FORMATOS_DET
values('FSI-CGAS','12','Proveedor','general','.00','35.30','105.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-CGAS','13','CP','general','92.30','45.30','35.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-CGAS','14','Nombre','general','152.30','24.30','47.00','5.00','C','000000','center','center');
insert into TBL_FORMATOS_DET
values('FSI-CGAS','15','Num_Proveedor',',|0','127.30','35.30','20.00','5.00','C','000000','center','center');
insert into TBL_FORMATOS_DET
values('FSI-CGAS','16','Direccion','general','.00','40.30','85.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-CGAS','17','Colonia','general','82.30','40.30','65.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-CGAS','18','Poblacion','general','.00','45.30','85.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-CGAS','19','FSI_ETIQUETA','RFC','.00','50.30','15.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-CGAS','20','RFC','general','12.30','50.30','35.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-CGAS','21','FSI_ETIQUETA','Referencia','47.30','50.30','20.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-CGAS','22','Referencia','general','67.30','50.30','25.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-CGAS','23','Obs','general','.00','191.30','190.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-CGAS','24','FSI_ETIQUETA','SUB TOTAL','132.30','217.30','25.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-CGAS','25','SubTotal',',|.|2|0','157.30','217.30','25.00','5.00','C','000000','right','center');
insert into TBL_FORMATOS_DET
values('FSI-CGAS','26','FSI_ETIQUETA','IVA 16%','132.30','222.30','25.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-CGAS','27','IVA',',|.|2|0','157.30','222.30','25.00','5.00','C','000000','right','center');
insert into TBL_FORMATOS_DET
values('FSI-CGAS','28','FSI_ETIQUETA','TOTAL','132.30','227.30','25.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-CGAS','29','Total',',|.|2|0','157.30','227.30','25.00','5.00','C','000000','right','center');
insert into TBL_FORMATOS_DET
values('FSI-CGAS','30','FSI_ETIQUETA','Cant','.00','67.30','15.00','5.00','C','000000','right','center');
insert into TBL_FORMATOS_DET
values('FSI-CGAS','31','FSI_ETIQUETA','Uni','15.00','67.30','12.30','5.00','C','000000','center','center');
insert into TBL_FORMATOS_DET
values('FSI-CGAS','32','FSI_ETIQUETA','Clave','27.30','67.30','25.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-CGAS','33','FSI_ETIQUETA','Descripcion','52.30','67.30','80.00','5.00','C','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-CGAS','34','FSI_ETIQUETA','Precio','132.30','67.30','25.00','5.00','C','000000','right','center');
insert into TBL_FORMATOS_DET
values('FSI-CGAS','35','FSI_ETIQUETA','Importe','157.30','67.30','30.00','5.00','C','000000','right','center');
insert into TBL_FORMATOS_DET
values('FSI-CGAS','36','FSI_LH','t_negra','.00','77.30','190.00','.50','C',NULL,NULL,NULL);
insert into TBL_FORMATOS_DET
values('FSI-CGAS','37','Cantidad',',|.|3|0','.00','.00','15.00','4.00','D','000000','right','center');
insert into TBL_FORMATOS_DET
values('FSI-CGAS','38','ID_UnidadSalida','general','15.00','.00','12.30','4.00','D','000000','center','center');
insert into TBL_FORMATOS_DET
values('FSI-CGAS','39','ID_Prod','general','27.30','.00','25.00','4.00','D','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-CGAS','40','Descripcion','general','52.30','.00','80.00','4.00','D','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-CGAS','41','Precio',',|.|4|0','132.30','.00','25.00','4.00','D','000000','right','center');
insert into TBL_FORMATOS_DET
values('FSI-CGAS','42','Importe',',|.|2|0','157.30','.00','30.00','4.00','D','000000','right','center');
insert into TBL_FORMATOS_DET
values('FSI-CGAS','43','Obs','general','12.30','4.00','170.00','4.00','D','000000','left','center');
insert into TBL_FORMATOS_DET
values('FSI-CGAS','44','FSI_TITULO','GASTO','5.00','5.00','190.00','20.00','C','000000','center','middle');
   


--@FIN_BLOQUE
CREATE TABLE tbl_nom_diario_det
(
  id_compania smallint NOT NULL,
  id_sucursal smallint NOT NULL,
  id_fechamovimiento timestamp without time zone NOT NULL,
  id_empleado character(6) NOT NULL,
  id_movimiento smallint NOT NULL,
  desde timestamp without time zone,
  hasta timestamp without time zone,
  entrada timestamp without time zone,
  salida timestamp without time zone,
  entrada2 timestamp without time zone,
  salida2 timestamp without time zone,
  hna numeric(9,6) NOT NULL DEFAULT 0,
  hnp numeric(9,6) NOT NULL DEFAULT 0,
  CONSTRAINT pk_tbl_nom_diario_det PRIMARY KEY (id_compania, id_sucursal, id_fechamovimiento, id_empleado, id_movimiento),
  CONSTRAINT fk_tbl_nom_diario_det_tbl_nom_diario_cab FOREIGN KEY (id_compania, id_sucursal, id_fechamovimiento)
      REFERENCES tbl_nom_diario_cab (id_compania, id_sucursal, id_fechamovimiento) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_tbl_nom_diario_det_tbl_nom_masemp FOREIGN KEY (id_empleado)
      REFERENCES tbl_nom_masemp (id_empleado) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_tbl_nom_diario_det_tbl_nom_movimientos FOREIGN KEY (id_movimiento)
      REFERENCES tbl_nom_movimientos (id_movimiento) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE
);
   
  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION getfechamashora(_fecha timestamp without time zone, _hora timestamp without time zone)
  RETURNS timestamp without time zone AS
$BODY$  
BEGIN
	RETURN _fecha + (date_part('hour', _hora)::text || 'hour')::interval + (date_part('min', _hora)::text || 'min')::interval;
END
$BODY$
  LANGUAGE plpgsql;
  


--@FIN_BLOQUE
CREATE TABLE tbl_nom_permisos_grupo
(
  id_compania smallint NOT NULL,
  id_sucursal smallint NOT NULL,
  id_movimiento smallint NOT NULL,
  id_fechamovimiento timestamp without time zone NOT NULL,
  diascompletos bit(1) NOT NULL,
  fechahora_desde timestamp without time zone NOT NULL,
  fechahora_hasta timestamp without time zone NOT NULL,
  num_de_dias smallint NOT NULL,
  num_de_horas numeric(4,2) NOT NULL,
  tiempo_por_pagar numeric(4,2) NOT NULL,
  CONSTRAINT pk_tbl_nom_permisos_grupo PRIMARY KEY (id_compania, id_sucursal, id_movimiento, id_fechamovimiento),
  CONSTRAINT fk_tbl_nom_permisos_grupo_tbl_companias FOREIGN KEY (id_compania, id_sucursal)
      REFERENCES tbl_companias (id_compania, id_sucursal) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_tbl_nom_permisos_grupo_tbl_nom_movimientos FOREIGN KEY (id_movimiento)
      REFERENCES tbl_nom_movimientos (id_movimiento) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE
);
  


--@FIN_BLOQUE
CREATE TABLE tbl_nom_permisos_grupo_exclusiones
(
  id_compania smallint NOT NULL,
  id_sucursal smallint NOT NULL,
  id_movimiento smallint NOT NULL,
  id_fechamovimiento timestamp without time zone NOT NULL,
  id_empleado character(6) NOT NULL,
  CONSTRAINT pk_tbl_nom_permisos_grupo_exclusiones PRIMARY KEY (id_compania, id_sucursal, id_movimiento, id_fechamovimiento, id_empleado),
  CONSTRAINT fk_tbl_nom_permisos_grupo_exclusiones_tbl_nom_masemp FOREIGN KEY (id_empleado)
      REFERENCES tbl_nom_masemp (id_empleado) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_tbl_nom_permisos_grupo_exclusiones_tbl_nom_permisos_grupo FOREIGN KEY (id_compania, id_sucursal, id_movimiento, id_fechamovimiento)
      REFERENCES tbl_nom_permisos_grupo (id_compania, id_sucursal, id_movimiento, id_fechamovimiento) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE
);
  
  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION getfechadiff(units character varying, start_t timestamp without time zone, end_t timestamp without time zone)
  RETURNS integer AS
$BODY$
   DECLARE
     diff_interval INTERVAL; 
     diff INT = 0;
     years_diff INT = 0;
   BEGIN
     IF units IN ('yy', 'yyyy', 'year', 'mm', 'm', 'month') THEN
       years_diff = DATE_PART('year', end_t) - DATE_PART('year', start_t);
 
       IF units IN ('yy', 'yyyy', 'year') THEN
         -- SQL Server does not count full years passed (only difference between year parts)
         RETURN years_diff;
       ELSE
         -- If end month is less than start month it will subtracted
         RETURN years_diff * 12 + (DATE_PART('month', end_t) - DATE_PART('month', start_t)); 
       END IF;
     END IF;
 
     -- Minus operator returns interval 'DDD days HH:MI:SS'  
     diff_interval = end_t - start_t;
 
     diff = diff + DATE_PART('day', diff_interval);
 
     IF units IN ('wk', 'ww', 'week') THEN
       diff = diff/7;
       RETURN diff;
     END IF;
 
     IF units IN ('dd', 'd', 'day') THEN
       RETURN diff;
     END IF;
 
     diff = diff * 24 + DATE_PART('hour', diff_interval); 
 
     IF units IN ('hh', 'hour') THEN
        RETURN diff;
     END IF;
 
     diff = diff * 60 + DATE_PART('minute', diff_interval);
 
     IF units IN ('mi', 'n', 'minute') THEN
        RETURN diff;
     END IF;
 
     diff = diff * 60 + DATE_PART('second', diff_interval);
 
     RETURN diff;
   END;
   $BODY$
  LANGUAGE plpgsql;
  
--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION rep_fechadiaria(
    _fecha timestamp without time zone,
    _fecha2 timestamp without time zone)
  RETURNS SETOF record AS
$BODY$
DECLARE
	_dias smallint; _dia smallint; 
BEGIN
	create local temporary table _tmp_fechadiaria (
		fecha timestamp not null
	);
	
	_dias := getfechadiff('day',_fecha,_fecha2);
	
	IF _dias >= 0 -- Es ascendente
	THEN
		_dia := 0;
		while _dia <= _dias
		loop
			insert into _tmp_fechadiaria
			select _fecha + (cast(_dia as text) || ' day'::text)::interval;
			_dia := _dia + 1;
		end loop;
	ELSE
		_dia := 0;
		while _dia >= _dias
		loop
			insert into _tmp_fechadiaria
			select _fecha + (cast(_dia as text) || ' day'::text)::interval;
			_dia := _dia - 1;
		end loop;
	END IF;

	RETURN QUERY
	select * from _tmp_fechadiaria;
	
	drop table _tmp_fechadiaria;
END
$BODY$
  LANGUAGE plpgsql;
--ALTER FUNCTION rep_fechadiaria(timestamp without time zone, timestamp without time zone)


--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_nom_diario_cierre AS 
 SELECT com.descripcion AS compania, dd.id_compania, dd.id_sucursal, dd.id_fechamovimiento, dd.id_empleado, (((m.nombre::text || ' '::text) || m.apellido_paterno::text) || ' '::text) || m.apellido_materno::text AS nombre, dd.id_movimiento, mov.descripcion, 
        CASE
            WHEN date_part('hour'::text, dd.desde) = 0::double precision AND date_part('minute'::text, dd.desde) = 0::double precision THEN NULL::timestamp without time zone
            ELSE dd.desde
        END AS desde, 
        CASE
            WHEN date_part('hour'::text, dd.hasta) = 0::double precision AND date_part('minute'::text, dd.hasta) = 0::double precision THEN NULL::timestamp without time zone
            ELSE dd.hasta
        END AS hasta, dd.entrada, dd.salida, dd.hna, dd.hnp, dd.entrada2, dd.salida2
   FROM tbl_nom_diario_det dd
   JOIN tbl_nom_masemp m ON dd.id_empleado = m.id_empleado
   JOIN tbl_nom_movimientos mov ON dd.id_movimiento = mov.id_movimiento
   JOIN tbl_companias com ON dd.id_compania = com.id_compania AND dd.id_sucursal = com.id_sucursal;

 
--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_nom_asistencias_server_agregar(_id_empleado character)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(4000); _fechatext varchar(15); _ID_FechaHora timestamp; _UltimaFechaHora timestamp; 
					_Ahorita timestamp; _ID_FechaMovimiento timestamp; _Indicador smallint; _Diferencias smallint;
BEGIN
	_Ahorita := NOW();
	-- Calcula la fecha del movimiento. Elimina la hora.
	_ID_FechaMovimiento := _Ahorita::date;
	-- Calcula la fecha con horas y minutos..... Elimina sgundos y decimas
	_ID_FechaHora := _ID_FechaMovimiento + (cast(date_part('hour',_Ahorita) as varchar) || ' hour')::interval;
	_ID_FechaHora := _ID_FechaHora + (cast(date_part('minute',_Ahorita) as varchar) || ' minute')::interval;
		
	_err := 0;
	_result := 'SE CAPTUR√ì LA ENTRADA ';
	_fechatext := date_part('day', _ID_FechaHora)::varchar || '/' || date_part('month', _ID_FechaHora)::varchar || '/' || date_part('year', _ID_FechaHora)::varchar || ' ' || date_part('hour', _ID_FechaHora)::varchar || ':' || date_part('minute', _ID_FechaHora)::varchar; 

	_Diferencias := ( 	select VEntero from TBL_VARIABLES 
												where ID_Variable = 'DIFASIST' );
	-- si no existe un empleado marcar? error
	IF(select count(*) from TBL_NOM_MASEMP where ID_Empleado = _ID_Empleado) < 1
	THEN
		_err := 3;
		_result := 'ERROR: NO EXISTEN EMPLEADOS CON LA CLAVE '  || _ID_Empleado;
	END IF;
	
	IF (select count(*) from TBL_NOM_ASISTENCIAS_CHEQUEOS where ID_Empleado = _ID_Empleado and ID_FechaHora = _ID_FechaHora) > 0
	THEN	
		_err := 3;
		_result := 'ERROR: NO TE PUEDES VOLVER A REGISTRAR';
	END IF;

	IF _Diferencias is null 
	THEN
		_Diferencias := 5; -- Si no se ha establecido la variable de diferencias en el tiempo por error de pasar la tarjeta dos veces, la establece a 5 minutos
	END IF;
	
	IF _err = 0
	THEN
		--Inserta en los chequeos
		INSERT INTO TBL_NOM_ASISTENCIAS_CHEQUEOS
		VALUES( _ID_Empleado,	_ID_FechaHora);

		IF (select count(*) from TBL_NOM_ASISTENCIAS where ID_Empleado = _ID_Empleado and ID_FechaMovimiento = _ID_FechaMovimiento) < 1
		THEN
			INSERT INTO TBL_NOM_ASISTENCIAS
			VALUES( _ID_Empleado, _ID_FechaMovimiento, _ID_FechaHora, null, 1, null, null );

		ELSIF (select Indicador	from TBL_NOM_ASISTENCIAS	where ID_Empleado = _ID_Empleado and ID_FechaMovimiento = _ID_FechaMovimiento) = 4
		THEN 
			_err := 3;
			_result := 'ERROR: ESTE EMPLEADO HA ENTRADO Y SALIDO MUCHAS VECES '  || _ID_Empleado;
		ELSE
			_Indicador := (	select Indicador 
							from TBL_NOM_ASISTENCIAS 
							where ID_Empleado = _ID_Empleado and 
											ID_FechaMovimiento = _ID_FechaMovimiento) + 1; 
			_result := case 	when (_Indicador % 2) = 0 
							then 'SE CAPTUR√ì LA SALIDA ' || _fechatext
							else 'SE CAPTUR√ì LA ENTRADA ' || _fechatext 
					end;

			IF _Indicador = 2
			THEN
				_UltimaFechaHora := ( select Entrada from TBL_NOM_ASISTENCIAS where ID_Empleado = _ID_Empleado and ID_FechaMovimiento = _ID_FechaMovimiento );
				-- SQLServer: IF datediff(minute, _UltimaFechaHora, _ID_FechaHora) >= _Diferencias
				IF (date_part('hour', _ID_FechaHora::time - _UltimaFechaHora::time) * 60 + date_part('minute', _ID_FechaHora::time - _UltimaFechaHora::time)) >= _Diferencias
				THEN
					UPDATE TBL_NOM_ASISTENCIAS
					SET Salida = _ID_FechaHora, Indicador = 2
					WHERE ID_Empleado = _ID_Empleado and ID_FechaMovimiento = _ID_FechaMovimiento;
				ELSE
					_err := 3;
					_result := 'ERROR: NO SE PUEDE VOLVER A CAPTURAR LA ENTRADA '  || _ID_Empleado;
				END IF;
			ELSIF _Indicador = 3
			THEN
				_UltimaFechaHora := ( select Salida from TBL_NOM_ASISTENCIAS where ID_Empleado = _ID_Empleado and ID_FechaMovimiento = _ID_FechaMovimiento );
				--IF datediff(minute, _UltimaFechaHora, _ID_FechaHora) >= _Diferencias
				IF (date_part('hour', _ID_FechaHora::time - _UltimaFechaHora::time) * 60 + date_part('minute', _ID_FechaHora::time - _UltimaFechaHora::time)) >= _Diferencias
				THEN
					UPDATE TBL_NOM_ASISTENCIAS
					SET Entrada2 = _ID_FechaHora, Indicador = 3
					WHERE ID_Empleado = _ID_Empleado and ID_FechaMovimiento = _ID_FechaMovimiento;
				ELSE
					_err := 3;
					_result := 'ERROR: NO SE PUEDE VOLVER A CAPTURAR LA SALIDA '  || _ID_Empleado;
				END IF;
			ELSE 
				_UltimaFechaHora := ( select Entrada2 from TBL_NOM_ASISTENCIAS where ID_Empleado = _ID_Empleado and ID_FechaMovimiento = _ID_FechaMovimiento );
				--IF datediff(minute, _UltimaFechaHora, _ID_FechaHora) >= _Diferencias
				IF (date_part('hour', _ID_FechaHora::time - _UltimaFechaHora::time) * 60 + date_part('minute', _ID_FechaHora::time - _UltimaFechaHora::time)) >= _Diferencias
				THEN
					UPDATE TBL_NOM_ASISTENCIAS
					SET Salida2 = _ID_FechaHora, Indicador = 4
					WHERE ID_Empleado = _ID_Empleado and ID_FechaMovimiento = _ID_FechaMovimiento;
				ELSE
					_err := 3;
					_result := 'ERROR: NO SE PUEDE VOLVER A CAPTURAR LA SEGUNDA ENTRADA '  || _ID_Empleado;
				END IF;

			END IF;

		END IF;
		
	END IF;

	--	SELECT _ID_Empleado AS ID_Empleado, _result as Resultado

	IF _err = 0
	THEN
			RETURN QUERY 
			SELECT a.ID_FechaMovimiento, c.ID_Empleado, (c.Nombre || ' ' || c.Apellido_Paterno || ' ' || c.Apellido_Materno)::varchar as Nombre, 
											1 as RE, a.Entrada, case when a.Salida is null then 0 else 1 end as RS, a.Salida,
											case when a.Entrada2 is null then 0 else 1 end as RE2, a.Entrada2, case when a.Salida2 is null then 0 else 1 end as RS2, a.Salida2,	
											 _err as ERR, _result as RES
			FROM   TBL_NOM_MASEMP c INNER JOIN TBL_NOM_ASISTENCIAS a
				ON  a.ID_Empleado = c.ID_Empleado
			WHERE a.ID_FechaMovimiento = _ID_FechaMovimiento and c.ID_Empleado = _ID_Empleado;
	ELSE
			RETURN QUERY 
			SELECT _ID_FechaMovimiento as ID_FechaMovimiento, _ID_Empleado as ID_Empleado, ''::varchar as Nombre, 0 as RE, _ID_FechaHora as Entrada, 
					0 as RS, _ID_FechaHora as Salida, 0 as RE2, _ID_FechaHora as Entrada2, 0 as RS2, _ID_FechaHora as Salida2, _err as ERR, _result as RES;
	END IF;

END
$BODY$
  LANGUAGE plpgsql;
  
--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_nom_asistencias_server_calcular(_id_fechamovimiento timestamp without time zone, _dia smallint, _id_compania smallint, _id_sucursal smallint)
  RETURNS void AS
$BODY$
DECLARE
	_Entrada timestamp; _Entrada2 timestamp; _Salida timestamp; _Salida2 timestamp; _TipoTurno smallint;
					_Indicador smallint; _Diferencias smallint; _ID_FechaMovimientoAnt timestamp;
					_ID_FechaMovimientoSig timestamp; _IndicadorDA smallint; _IndicadorDS smallint; _ID_Empleado char(6); 
					_diaDA smallint; _diaDS smallint; _TipoTurnoDA smallint; _TipoTurnoDS smallint;
	_REC_IDME record;
BEGIN

	_ID_FechaMovimientoAnt := _ID_FechaMovimiento - '1 day'::interval; --dateadd(day,-1,_ID_FechaMovimiento)
	_ID_FechaMovimientoSig := _ID_FechaMovimiento + '1 day'::interval; --dateadd(day,1,_ID_FechaMovimiento)
	_diaDA := case when _dia = 1 then 7 else _dia - 1 end;
	_diaDS := case when _dia = 7 then 1 else _dia + 1 end;
	_Diferencias := coalesce( (select VEntero from TBL_VARIABLES where ID_Variable = 'DIFASIST'),5 ); -- Si no se ha establecido la variable de diferencias en el tiempo por error de pasar la tarjeta dos veces, la establece a 1 minutos
	
	create local temporary table _TMP_IDMASEMP (
		ID_Num serial NOT NULL ,
		ID_Empleado char (6) NOT NULL,
		TipoTurno smallint NOT NULL,
		TipoTurnoDA smallint NOT NULL,
		TipoTurnoDS smallint NOT NULL
	);

	create local temporary table _TMP_ASISTENCIAS_CHEQUEOS (
		Indicador serial NOT NULL ,
		ID_FechaHora timestamp NOT NULL
	);

	create local temporary table _TMP_ASISTENCIAS_CHEQUEOS_DA (
		Indicador serial NOT NULL ,
		ID_FechaHora timestamp NOT NULL
	);

	create local temporary table _TMP_ASISTENCIAS_CHEQUEOS_DS (
		Indicador serial NOT NULL ,
		ID_FechaHora timestamp NOT NULL
	);
	
	
	insert into _TMP_IDMASEMP ( ID_Empleado, TipoTurno, TipoTurnoDA, TipoTurnoDS )
	select m.ID_Empleado, 
		case 	when _dia = 1 then t.TTLun 
				when _dia = 2 then t.TTMar
				when _dia = 3 then t.TTMie
				when _dia = 4 then t.TTJue
				when _dia = 5 then t.TTVie
				when _dia = 6 then t.TTSab
				when _dia = 7 then t.TTDom end,  
		case 	when _diaDA = 1 then t.TTLun 
				when _diaDA = 2 then t.TTMar
				when _diaDA = 3 then t.TTMie
				when _diaDA = 4 then t.TTJue
				when _diaDA = 5 then t.TTVie
				when _diaDA = 6 then t.TTSab
				when _diaDA = 7 then t.TTDom end,  
		case 	when _diaDS = 1 then t.TTLun 
				when _diaDS = 2 then t.TTMar
				when _diaDS = 3 then t.TTMie
				when _diaDS = 4 then t.TTJue
				when _diaDS = 5 then t.TTVie
				when _diaDS = 6 then t.TTSab
				when _diaDS = 7 then t.TTDom end  
	
	from TBL_NOM_MASEMP m inner join TBL_NOM_TURNOS t
		on m.ID_Turno = t.ID_Turno
	where m.ID_Compania = _ID_Compania and m.ID_Sucursal = _ID_Sucursal and m.Status = 0;
	
	-- Borra las asistencias previamente calculadas de estos empleados
	DELETE FROM TBL_NOM_ASISTENCIAS 
	WHERE ID_FechaMovimiento = _ID_FechaMovimiento and ID_Empleado in ( select ID_Empleado from _TMP_IDMASEMP );

	--_cntemp := 1;
	--_totemp := ( select count(*) from _TMP_IDMASEMP );

	FOR _REC_IDME IN (select * from _TMP_IDMASEMP order by ID_Empleado)
	LOOP
		_ID_Empleado := _REC_IDME.ID_Empleado;
		_TipoTurno := _REC_IDME.TipoTurno;
		_TipoTurnoDA := _REC_IDME.TipoTurnoDA;
		_TipoTurnoDS := _REC_IDME.TipoTurnoDS;

		--select _ID_Empleado as ID_Empleado, _TipoTurno as TipoTurno

		IF _TipoTurno = 0 -- Turno normal, entra y sale el mismo dia entre las 0 hrs y la 23.59 hrs
		THEN
			INSERT INTO _TMP_ASISTENCIAS_CHEQUEOS ( ID_FechaHora )
			SELECT ID_FechaHora 
			FROM  TBL_NOM_ASISTENCIAS_CHEQUEOS 
			WHERE ID_Empleado = _ID_Empleado 
				and date_part('Year',ID_FechaHora) = date_part('Year',_ID_FechaMovimiento) 
				and date_part('Month',ID_FechaHora) = date_part('Month',_ID_FechaMovimiento)
				and date_part('Day',ID_FechaHora) = date_part('Day',_ID_FechaMovimiento)
			ORDER BY ID_FechaHora ASC;
			
			_Indicador := ( select count(*) from _TMP_ASISTENCIAS_CHEQUEOS );

			raise notice '% Indicador: %',_ID_Empleado,_Indicador;
				
			IF _Indicador > 0 -- Sera mayor a cero cuando haya registrado ese dia por lo menos la entrada
			THEN
				IF _Indicador = 1 -- Se supone que capturo entrada 
				THEN
					_Entrada := ( select ID_FechaHora from _TMP_ASISTENCIAS_CHEQUEOS where Indicador = 1 );
					INSERT INTO TBL_NOM_ASISTENCIAS
					VALUES( _ID_Empleado, _ID_FechaMovimiento, _Entrada, null, 1, null, null );
				END IF;
				
				IF _Indicador = 2 -- Se supone que capturo entrada y salida
				THEN
					_Entrada := ( select ID_FechaHora from _TMP_ASISTENCIAS_CHEQUEOS where Indicador = 1 );
					_Salida := (select ID_FechaHora from _TMP_ASISTENCIAS_CHEQUEOS where Indicador = 2 );

					raise notice '% E % S %',_ID_Empleado,_Entrada, _Salida;
			
					IF getfechadiff('minute', _Entrada, _Salida) >= _Diferencias -- Se supone que la salida tiene mas de x minutos de diferencia con la entrada
					THEN
						INSERT INTO TBL_NOM_ASISTENCIAS
						VALUES( _ID_Empleado, _ID_FechaMovimiento, _Entrada, _Salida, 2, null, null );
					END IF;
				END IF;
				IF _Indicador = 4 -- Se supone que capturo entrada, salida a comer, entrada de comer y salida
				THEN
					_Entrada := ( select ID_FechaHora from _TMP_ASISTENCIAS_CHEQUEOS where Indicador = 1 );
					_Salida := (select ID_FechaHora from _TMP_ASISTENCIAS_CHEQUEOS where Indicador = 2 );
					_Entrada2 := ( select ID_FechaHora from _TMP_ASISTENCIAS_CHEQUEOS where Indicador = 3 );
					_Salida2 := (select ID_FechaHora from _TMP_ASISTENCIAS_CHEQUEOS where Indicador = 4 );
					IF getfechadiff('minute', _Entrada, _Salida) >= _Diferencias and 
						getfechadiff('minute', _Salida, _Entrada2) >= _Diferencias and
							getfechadiff('minute', _Entrada2, _Salida2) >= _Diferencias  -- Se supone que los chequeos tienen suficientes minutos de diferencia
					THEN
						INSERT INTO TBL_NOM_ASISTENCIAS
						VALUES( _ID_Empleado, _ID_FechaMovimiento, _Entrada, _Salida, 4, _Entrada2, _Salida2 );
					END IF;
				END IF;
				
				IF _Indicador = 3 or _Indicador = 5 
				THEN
					-- Quiere decir que tiene otro registro huerfano, procede a revisar si el 
					-- turno del dia anterior o del siguiente son nocturnos porque si asi lo fueran,
					-- ignora el primer o ultimo registro y captura la entrada comun, y si no, no captura nada porque
					-- significa inconsistencia en el registro
					IF _TipoTurnoDA <> 0 or _TipoTurnoDS <> 0
					THEN
							IF _TipoTurnoDS = 2 -- El tipo de turno del siguiente dia es Nocturno Dia anterior
							THEN
								-- significa que el tercer o quinto registro es la entrada del turno del dia siguiente
								IF _Indicador = 3 -- Se supone que capturo entrada y salida
								THEN
									_Entrada := ( select ID_FechaHora from _TMP_ASISTENCIAS_CHEQUEOS where Indicador = 1 );
									_Salida := (select ID_FechaHora from _TMP_ASISTENCIAS_CHEQUEOS where Indicador = 2 );
									IF getfechadiff('minute', _Entrada, _Salida) >= _Diferencias -- Se supone que la salida tiene mas de x minutos de diferencia con la entrada
									THEN
										INSERT INTO TBL_NOM_ASISTENCIAS
										VALUES( _ID_Empleado, _ID_FechaMovimiento, _Entrada, _Salida, 2, null, null );
									END IF;
								END IF;
								IF _Indicador = 5 -- Se supone que capturo entrada, salida a comer, entrada de comer y salida
								THEN
									_Entrada := ( select ID_FechaHora from _TMP_ASISTENCIAS_CHEQUEOS where Indicador = 1 );
									_Salida = (select ID_FechaHora from _TMP_ASISTENCIAS_CHEQUEOS where Indicador = 2 );
									_Entrada2 = ( select ID_FechaHora from _TMP_ASISTENCIAS_CHEQUEOS where Indicador = 3 );
									_Salida2 = (select ID_FechaHora from _TMP_ASISTENCIAS_CHEQUEOS where Indicador = 4 );
									IF getfechadiff('minute', _Entrada, _Salida) >= _Diferencias and 
										getfechadiff('minute', _Salida, _Entrada2) >= _Diferencias and
											getfechadiff('minute', _Entrada2, _Salida2) >= _Diferencias  -- Se supone que los chequeos tienen suficientes minutos de diferencia
									THEN
										INSERT INTO TBL_NOM_ASISTENCIAS
										VALUES( _ID_Empleado, _ID_FechaMovimiento, _Entrada, _Salida, 4, _Entrada2, _Salida2 ); 
									END IF;
								END IF;		
								--/////////////////////////////
							ELSIF _TipoTurnoDA = 1 -- El tipo de turno del dia anterior es Nocturno Dia siguiente
							THEN
								-- significa que el primer registro es la salida del turno del dia anterior
								IF _Indicador = 3 -- Se supone que capturo entrada y salida
								THEN
									_Entrada := ( select ID_FechaHora from _TMP_ASISTENCIAS_CHEQUEOS where Indicador = 2 );
									_Salida := (select ID_FechaHora from _TMP_ASISTENCIAS_CHEQUEOS where Indicador = 3 );
									IF getfechadiff('minute', _Entrada, _Salida) >= _Diferencias -- Se supone que la salida tiene mas de x minutos de diferencia con la entrada
									THEN
										INSERT INTO TBL_NOM_ASISTENCIAS
										VALUES( _ID_Empleado, _ID_FechaMovimiento, _Entrada, _Salida, 2, null, null );
									END IF;
								END IF;
								IF _Indicador = 5 -- Se supone que capturo entrada, salida a comer, entrada de comer y salida
								THEN
									_Entrada := ( select ID_FechaHora from _TMP_ASISTENCIAS_CHEQUEOS where Indicador = 2 );
									_Salida := (select ID_FechaHora from _TMP_ASISTENCIAS_CHEQUEOS where Indicador = 3 );
									_Entrada2 := ( select ID_FechaHora from _TMP_ASISTENCIAS_CHEQUEOS where Indicador = 4 );
									_Salida2 := (select ID_FechaHora from _TMP_ASISTENCIAS_CHEQUEOS where Indicador = 5 );
									IF getfechadiff('minute', _Entrada, _Salida) >= _Diferencias and 
											getfechadiff('minute', _Salida, _Entrada2) >= _Diferencias and
												getfechadiff('minute', _Entrada2, _Salida2) >= _Diferencias  -- Se supone que los chequeos tienen suficientes minutos de diferencia
									THEN
										INSERT INTO TBL_NOM_ASISTENCIAS
										VALUES( _ID_Empleado, _ID_FechaMovimiento, _Entrada, _Salida, 4, _Entrada2, _Salida2 );
									END IF;
								END IF;				
								--/////////////////////////////
							END IF;
					END IF;-- tipo turnos dia sig y anterior son nocturnos
				END IF;
			END IF; -- Indicador mayor a cero
		--END TipoTurno = 0
		ELSIF _TipoTurno = 1 -- Turno nocturno dia siguiente, entra este dia y antes de 23.59 hrs, y sale ma√±ana despues de las 0 hrs
		THEN
			INSERT INTO _TMP_ASISTENCIAS_CHEQUEOS_DS ( ID_FechaHora )
			SELECT ID_FechaHora 
			FROM  TBL_NOM_ASISTENCIAS_CHEQUEOS
			WHERE ID_Empleado = _ID_Empleado 
				and date_part('Year',ID_FechaHora) = date_part('Year',_ID_FechaMovimientoSig) 
				and date_part('Month',ID_FechaHora) = date_part('Month',_ID_FechaMovimientoSig)
				and date_part('Day',ID_FechaHora) = date_part('Day',_ID_FechaMovimientoSig)
			ORDER BY ID_FechaHora ASC;

			INSERT INTO _TMP_ASISTENCIAS_CHEQUEOS ( ID_FechaHora )
			SELECT ID_FechaHora 
			FROM  TBL_NOM_ASISTENCIAS_CHEQUEOS
			WHERE ID_Empleado = _ID_Empleado 
				and date_part('Year',ID_FechaHora) = date_part('Year',_ID_FechaMovimiento) 
				and date_part('Month',ID_FechaHora) = date_part('Month',_ID_FechaMovimiento)
				and date_part('Day',ID_FechaHora) = date_part('Day',_ID_FechaMovimiento)
			ORDER BY ID_FechaHora Desc;
			
			_IndicadorDS := ( select count(*) from _TMP_ASISTENCIAS_CHEQUEOS_DS );
			_Indicador := ( select count(*) from _TMP_ASISTENCIAS_CHEQUEOS );
			
			IF _Indicador > 0 and _IndicadorDS > 0
			THEN	
				_Salida := ( select ID_FechaHora from _TMP_ASISTENCIAS_CHEQUEOS_DS where Indicador = 1 );
				_Entrada := ( select ID_FechaHora from _TMP_ASISTENCIAS_CHEQUEOS where Indicador = 1 );
				IF getfechadiff('minute', _Entrada, _Salida) >= _Diferencias -- Se supone que la salida tiene mas de x minutos de diferencia con la entrada
				THEN
					INSERT INTO TBL_NOM_ASISTENCIAS
					VALUES( _ID_Empleado, _ID_FechaMovimiento, _Entrada, _Salida, 2, null, null );
				END IF;
			ELSIF _Indicador > 0 
			THEN
				_Entrada := ( select ID_FechaHora from _TMP_ASISTENCIAS_CHEQUEOS where Indicador = 1 );
				INSERT INTO TBL_NOM_ASISTENCIAS
				VALUES( _ID_Empleado, _ID_FechaMovimiento, _Entrada, null, 1, null, null );
			END IF;
		-- END --Fin TipoTurno = 1
		ELSE -- IF _TipoTurno = 2 , Turno nocturno dia anterior, entra el dia anterior antes de 23.59 hrs, y sale este dia despues de las 0 hrs
			INSERT INTO _TMP_ASISTENCIAS_CHEQUEOS_DA ( ID_FechaHora )
			SELECT ID_FechaHora 
			FROM  TBL_NOM_ASISTENCIAS_CHEQUEOS
			WHERE ID_Empleado = _ID_Empleado 
				and date_part('Year',ID_FechaHora) = date_part('Year',_ID_FechaMovimientoAnt) 
				and date_part('Month',ID_FechaHora) = date_part('Month',_ID_FechaMovimientoAnt)
				and date_part('Day',ID_FechaHora) = date_part('Day',_ID_FechaMovimientoAnt)
			ORDER BY ID_FechaHora DESC;

			INSERT INTO _TMP_ASISTENCIAS_CHEQUEOS ( ID_FechaHora )
			SELECT ID_FechaHora 
			FROM  TBL_NOM_ASISTENCIAS_CHEQUEOS
			WHERE ID_Empleado = _ID_Empleado 
				and date_part('Year',ID_FechaHora) = date_part('Year',_ID_FechaMovimiento) 
				and date_part('Month',ID_FechaHora) = date_part('Month',_ID_FechaMovimiento)
				and date_part('Day',ID_FechaHora) = date_part('Day',_ID_FechaMovimiento)
			ORDER BY ID_FechaHora ASC;
			
			_IndicadorDA := ( select count(*) from _TMP_ASISTENCIAS_CHEQUEOS_DA );
			_Indicador := ( select count(*) from _TMP_ASISTENCIAS_CHEQUEOS );
				
			IF _Indicador > 0 and _IndicadorDA > 0 -- Sera mayor a cero cuando haya registrado el dia anterior por lo menos la entrada
			THEN
				_Entrada := ( select ID_FechaHora from _TMP_ASISTENCIAS_CHEQUEOS_DA where Indicador = 1 );
				_Salida := ( select ID_FechaHora from _TMP_ASISTENCIAS_CHEQUEOS where Indicador = 1 );
				IF getfechadiff('minute', _Entrada, _Salida) >= _Diferencias -- Se supone que la salida tiene mas de x minutos de diferencia con la entrada
				THEN
					INSERT INTO TBL_NOM_ASISTENCIAS
					VALUES( _ID_Empleado, _ID_FechaMovimiento, _Entrada, _Salida, 2, null, null );
				END IF;
			--END Indicador mayor a cero
			ELSIF _IndicadorDA > 0 -- Sera mayor a cero cuando haya registrado la salida por lo menos
			THEN
				_Entrada := ( select ID_FechaHora from _TMP_ASISTENCIAS_CHEQUEOS_DA where Indicador = 1 );
				INSERT INTO TBL_NOM_ASISTENCIAS
				VALUES( _ID_Empleado, _ID_FechaMovimiento, _Entrada, null, 1, null, null );
			END IF;
		END IF; --Fin TipoTurno = 2

		TRUNCATE TABLE _TMP_ASISTENCIAS_CHEQUEOS_DS RESTART IDENTITY;
		TRUNCATE TABLE _TMP_ASISTENCIAS_CHEQUEOS_DA RESTART IDENTITY;
		TRUNCATE TABLE _TMP_ASISTENCIAS_CHEQUEOS RESTART IDENTITY;

	END LOOP ;

	DROP TABLE _TMP_IDMASEMP;
	DROP TABLE _TMP_ASISTENCIAS_CHEQUEOS;
	DROP TABLE _TMP_ASISTENCIAS_CHEQUEOS_DA;
	DROP TABLE _TMP_ASISTENCIAS_CHEQUEOS_DS;
END
$BODY$
  LANGUAGE plpgsql;

  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_nom_diario_cierre(
    _compania_sucursal character varying,
    _fechadesde timestamp without time zone,
    _fechahasta timestamp without time zone)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_status smallint; _err int; _result varchar(8000); _dia smallint; _contdia smallint; _cont smallint;
	_ID_Compania smallint; _ID_Sucursal smallint; _ID_FechaMovimiento timestamp;
BEGIN
	_ID_Compania := (select ID_Compania from TBL_COMPANIAS where Descripcion = _Compania_Sucursal);
	_ID_Sucursal := (select ID_Sucursal from TBL_COMPANIAS where Descripcion = _Compania_Sucursal);
	_err := 0;
	_result := 'Se han cerrado los dias satisfactoriamente';
	--SET DATEFIRST 1
	_contdia := DATE_PART('day', _FechaHasta - _FechaDesde);
	_cont := 0;

	-- Revisa por los movimientos b?sicos de sistema.
	IF (select count(*) from TBL_NOM_MOVIMIENTOS where ID_Movimiento between -32 and -1 ) < 29
	THEN
		_err := 3;
		_result := 'ERROR: No existen todos los movimientos b√°sicos para permisos. Primero debe darlos de alta para poder cerrar el dia'; 
	END IF;
	IF( select count(*) from TBL_NOM_DIARIO_CAB where ID_Compania = _ID_Compania and ID_Sucursal = _ID_Sucursal and Cerrado = '1'
			and ID_FechaMovimiento between _FechaDesde and _FechaHasta ) > 0
	THEN
		_err := 3;
		_result := 'ERROR: Existen dias cerrados y protegidos en este rango de fechas. No se puede calcular el cierre';
	END IF;
	IF _contdia > 31
	THEN
		_err := 3;
		_result := 'ERROR: Existen demasiados d√≠as en este rango de fechas. Solo es posible calcular hasta un m√°ximo de 31 d√≠as en una sola operaci√≥n de cierre. No se puede calcular';
	END IF;
			
	IF _err = 0
	THEN
		-- Primero crea tabla temporal de asistencias con turno del dia para hacer mas facil el c?lculo
		CREATE LOCAL TEMPORARY TABLE _TMP_ASISTENCIAS (
			ID_Empleado char(6) NOT NULL ,
			Asistio bit NOT NULL,
			Desde timestamp NULL ,
			Hasta timestamp NULL ,
			Entrada timestamp NULL ,
			Salida timestamp NULL ,
			HNA numeric(4, 2) NULL ,
			HEA numeric(4, 2) NULL ,
			Indicador smallint NOT NULL,
			Entrada2 timestamp NULL ,
			Salida2 timestamp NULL 
			/*CONSTRAINT TMP_ TBL_NOM_ASISTENCIAS PRIMARY KEY  CLUSTERED 
			(
				ID_Empleado
			)*/
		);
	
		WHILE _cont <= _contdia
		LOOP
			-- primero genera el dia del movimiento
			_ID_FechaMovimiento := _FechaDesde + (cast(_cont as text) || ' days')::interval;	--DATEADD(day, _cont, _FechaDesde)
			_dia := date_part( 'dow', _ID_FechaMovimiento); --('weekday', _ID_FechaMovimiento);
			 if _dia = 0 then _dia = 7; end if;
			 
			_err := 0;
			_status := 0; -- Se presume que no se ha creado el dia
	
			raise notice 'FECHA DE MOVIMIENTO : % DIA %', cast(_ID_FechaMovimiento as varchar), _dia;

			IF (select count(*) from TBL_NOM_DIARIO_CAB where ID_Compania = _ID_Compania and ID_Sucursal = _ID_Sucursal and ID_FechaMovimiento = _ID_FechaMovimiento and Cerrado = '0' ) > 0
			THEN
				-- como ya existe este dia, lo borra para volverlo a cerrar
				--raise notice ' Dia Borrado porque ya existia';
				_status := 1; -- El dia esta creado pero no cerrado
				DELETE FROM TBL_NOM_DIARIO_DET
				WHERE ID_Compania = _ID_Compania and ID_Sucursal = _ID_Sucursal and ID_FechaMovimiento = _ID_FechaMovimiento;
				
			END IF;
			
			/* AQUI ELIMINA EMPLEADOS QUE TIENEN CIERRES DUPLICADOS; OSEA SI UN EMPLEADO SE LE CAMBIO SU COMPA?IA DE LA CUAL YA TENIA CIERRE, SE ELIMINA ESE CIERRE PARA QUE
			-- EL CIERRE QUE SE ESTA CALCULANDO SAE UNICO PARA ESTE EMPLEADO (No soportada aun en postgresql)
			DELETE TBL_DIARIO_DET 
			FROM TBL_DIARIO_DET a INNER JOIN TBL_NOM_MASEMP m ON
				a.ID_Empleado = m.ID_Empleado
			WHERE a.ID_FechaMovimiento = @ID_FechaMovimiento and ( m.Status = 0 or (m.Status = 2 and m.Fecha_para_Liquidaciones >= @ID_FechaMovimiento)) and
									m.Tipo_de_Nomina = 1 and m.ID_Compania = @ID_Compania and m.ID_Sucursal = @ID_Sucursal */

			IF _err = 0
			THEN
				-- Primero genera el calculo del dia de asistencias chequeos a asistencias
				-- ejecutando el procedimiento del dia. Este debe de manejar los errores y corregirlos directos
				-- en el procedimiento para pasar libre al seguiente enunciado de este cierre

				execute sp_nom_asistencias_server_calcular( _ID_FechaMovimiento, _dia, _ID_Compania, _ID_Sucursal);

				--raise notice 'Status %', _status;

				-- Ahora aplica el dia
				IF _status = 0 -- si el dia no existe
				THEN
					INSERT INTO TBL_NOM_DIARIO_CAB
					VALUES(_ID_Compania, _ID_Sucursal, _ID_FechaMovimiento, '0');
				END IF;

				--INSERTA LOS QUE REGISTRARON Y ESTAN CONSISTENTESEN EL REGISTRO ( REGISTRO DE ENTRADA Y SALIDA, NO SOLO ENTRADA POR EJEMPLO )
				INSERT INTO _TMP_ASISTENCIAS
				SELECT a.ID_Empleado, '1',
						case 	when _dia = 1 then getfechamashora(_ID_FechaMovimiento, (select ELunes from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno)) 
								when _dia = 2 then getfechamashora(_ID_FechaMovimiento, (select EMartes from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno))
								when _dia = 3 then getfechamashora(_ID_FechaMovimiento, (select EMiercoles from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno))
								when _dia = 4 then getfechamashora(_ID_FechaMovimiento, (select EJueves from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno))
								when _dia = 5 then getfechamashora(_ID_FechaMovimiento, (select EViernes from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno))
								when _dia = 6 then getfechamashora(_ID_FechaMovimiento, (select ESabado from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno))
								when _dia = 7 then getfechamashora(_ID_FechaMovimiento, (select EDomingo from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno)) end as desde,  
						
						case 	when _dia = 1 and ((select ELunes from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno) >= (select SLunes from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno))
									then getfechamashora(  (_ID_FechaMovimiento + '1 day'::interval), (select SLunes from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno))  					 
								when _dia = 1 and ((select ELunes from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno) < (select SLunes from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno))
									then getfechamashora(_ID_FechaMovimiento, (select SLunes from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno))  
													
								when _dia = 2 and ((select EMartes from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno) >= (select SMartes from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno))
									then getfechamashora((_ID_FechaMovimiento + '1 day'::interval), (select SMartes from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno))  					 
								when _dia = 2 and ((select EMartes from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno) < (select SMartes from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno))
																					then getfechamashora(_ID_FechaMovimiento, (select SMartes from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno))					 
													
								when _dia = 3 and ((select EMiercoles from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno) >= (select SMiercoles from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno))
									then getfechamashora((_ID_FechaMovimiento + '1 day'::interval), (select SMiercoles from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno))  					 
								when _dia = 3 and ((select EMiercoles from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno) < (select SMiercoles from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno))
									then getfechamashora(_ID_FechaMovimiento, (select SMiercoles from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno))  		 

								when _dia = 4 and ((select EJueves from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno) >= (select SJueves from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno))
									then getfechamashora((_ID_FechaMovimiento + '1 day'::interval), (select SJueves from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno))  					 
								when _dia = 4 and ((select EJueves from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno) < (select SJueves from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno))
									then getfechamashora(_ID_FechaMovimiento, (select SJueves from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno))  			 
					
								when _dia = 5 and ((select EViernes from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno) >= (select SViernes from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno))
									then getfechamashora((_ID_FechaMovimiento + '1 day'::interval), (select SViernes from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno))  					 
								when _dia = 5 and ((select EViernes from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno) < (select SViernes from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno))
									then getfechamashora(_ID_FechaMovimiento, (select SViernes from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno))  	 

								when _dia = 6 and ((select ESabado from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno) >= (select SSabado from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno))
									then getfechamashora((_ID_FechaMovimiento + '1 day'::interval), (select SSabado from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno))  					 
								when _dia = 6 and ((select ESabado from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno) < (select SSabado from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno))
									then getfechamashora(_ID_FechaMovimiento, (select SSabado from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno))  		 
					
								when _dia = 7 and ((select EDomingo from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno) >= (select SDomingo from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno))
									then getfechamashora((_ID_FechaMovimiento + '1 day'::interval), (select SDomingo from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno))  					 
								when _dia = 7 and ((select EDomingo from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno) < (select SDomingo from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno))
									then getfechamashora(_ID_FechaMovimiento, (select SDomingo from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno)) end as hasta, 			 

							a.Entrada, a.Salida,		 
							case 	when _dia = 1 then (select HNALunes from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno)
									when _dia = 2 then (select HNAMartes from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno)
									when _dia = 3 then (select HNAMiercoles from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno)
									when _dia = 4 then (select HNAJueves from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno)
									when _dia = 5 then (select HNAViernes from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno)
									when _dia = 6 then (select HNASabado from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno)
									when _dia = 7 then (select HNADomingo from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno) end as HNA,
													 
							case 	when _dia = 1 then (select HEALunes from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno)
									when _dia = 2 then (select HEAMartes from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno)
									when _dia = 3 then (select HEAMiercoles from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno)
									when _dia = 4 then (select HEAJueves from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno)
									when _dia = 5 then (select HEAViernes from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno)
									when _dia = 6 then (select HEASabado from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno)
									when _dia = 7 then (select HEADomingo from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno) end as HEA, 
							a.Indicador, a.Entrada2, a.Salida2							
						
					FROM  TBL_NOM_ASISTENCIAS a INNER JOIN TBL_NOM_MASEMP m ON
						a.ID_Empleado = m.ID_Empleado 
					WHERE ( a.Indicador = 2 or a.Indicador = 4 ) and 
										a.ID_FechaMovimiento = _ID_FechaMovimiento and ( m.Status = 0 or (m.Status = 2 and m.Fecha_para_Liquidaciones >= _ID_FechaMovimiento)) and m.Fecha_de_Ingreso <= _ID_FechaMovimiento and 
																											m.ID_Compania = _ID_Compania and m.ID_Sucursal = _ID_Sucursal;
		
				
					-- INSERTA LOS QUE NO REGISTRARON
					INSERT INTO _TMP_ASISTENCIAS
					SELECT m.ID_Empleado, '0', 
						case 	when _dia = 1 then getfechamashora(_ID_FechaMovimiento, (select ELunes from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno)) 
								when _dia = 2 then getfechamashora(_ID_FechaMovimiento, (select EMartes from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno))
								when _dia = 3 then getfechamashora(_ID_FechaMovimiento, (select EMiercoles from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno))
								when _dia = 4 then getfechamashora(_ID_FechaMovimiento, (select EJueves from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno))
								when _dia = 5 then getfechamashora(_ID_FechaMovimiento, (select EViernes from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno))
								when _dia = 6 then getfechamashora(_ID_FechaMovimiento, (select ESabado from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno))
								when _dia = 7 then getfechamashora(_ID_FechaMovimiento, (select EDomingo from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno)) end as desde,  
						
						case 	when _dia = 1 and ((select ELunes from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno) >= (select SLunes from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno))
									then getfechamashora((_ID_FechaMovimiento + '1 day'::interval), (select SLunes from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno))  					 
								when _dia = 1 and ((select ELunes from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno) < (select SLunes from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno))
									then getfechamashora(_ID_FechaMovimiento, (select SLunes from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno))  
													
								when _dia = 2 and ((select EMartes from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno) >= (select SMartes from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno))
									then getfechamashora((_ID_FechaMovimiento + '1 day'::interval), (select SMartes from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno))  					 
								when _dia = 2 and ((select EMartes from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno) < (select SMartes from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno))
									then getfechamashora(_ID_FechaMovimiento, (select SMartes from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno))					 
													
								when _dia = 3 and ((select EMiercoles from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno) >= (select SMiercoles from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno))
									then getfechamashora((_ID_FechaMovimiento + '1 day'::interval), (select SMiercoles from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno))  					 
								when _dia = 3 and ((select EMiercoles from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno) < (select SMiercoles from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno))
									then getfechamashora(_ID_FechaMovimiento, (select SMiercoles from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno))  		 
					
								when _dia = 4 and ((select EJueves from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno) >= (select SJueves from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno))
									then getfechamashora((_ID_FechaMovimiento + '1 day'::interval), (select SJueves from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno))  					 
								when _dia = 4 and ((select EJueves from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno) < (select SJueves from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno))
									then getfechamashora(_ID_FechaMovimiento, (select SJueves from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno))  			 
					
								when _dia = 5 and ((select EViernes from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno) >= (select SViernes from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno))
									then getfechamashora((_ID_FechaMovimiento + '1 day'::interval), (select SViernes from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno))  					 
								when _dia = 5 and ((select EViernes from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno) < (select SViernes from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno))
									then getfechamashora(_ID_FechaMovimiento, (select SViernes from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno))  	 
					
								when _dia = 6 and ((select ESabado from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno) >= (select SSabado from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno))
									then getfechamashora((_ID_FechaMovimiento + '1 day'::interval), (select SSabado from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno))  					 
								when _dia = 6 and ((select ESabado from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno) < (select SSabado from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno))
									then getfechamashora(_ID_FechaMovimiento, (select SSabado from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno))  		 
					
								when _dia = 7 and ((select EDomingo from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno) >= (select SDomingo from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno))
									then getfechamashora((_ID_FechaMovimiento + '1 day'::interval), (select SDomingo from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno))  					 
								when _dia = 7 and ((select EDomingo from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno) < (select SDomingo from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno))
									then getfechamashora(_ID_FechaMovimiento, (select SDomingo from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno)) end as hasta, 			 
							null as Entrada, null as Salida,		 

							case 	when _dia = 1 then (select HNALunes from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno)
									when _dia = 2 then (select HNAMartes from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno)
									when _dia = 3 then (select HNAMiercoles from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno)
									when _dia = 4 then (select HNAJueves from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno)
									when _dia = 5 then (select HNAViernes from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno)
									when _dia = 6 then (select HNASabado from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno)
									when _dia = 7 then (select HNADomingo from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno) end as HNA,
													 
							case 	when _dia = 1 then (select HEALunes from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno)
									when _dia = 2 then (select HEAMartes from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno)
									when _dia = 3 then (select HEAMiercoles from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno)
									when _dia = 4 then (select HEAJueves from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno)
									when _dia = 5 then (select HEAViernes from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno)
									when _dia = 6 then (select HEASabado from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno)
									when _dia = 7 then (select HEADomingo from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno) end as HEA,
							0, null as Entrada2, null as Salida2
														
					FROM TBL_NOM_MASEMP m
					WHERE ( m.Status = 0 or (m.Status = 2 and m.Fecha_para_Liquidaciones >= _ID_FechaMovimiento)) and m.Fecha_de_Ingreso <= _ID_FechaMovimiento and m.ID_Compania = _ID_Compania and m.ID_Sucursal = _ID_Sucursal and 
							ID_Empleado NOT IN 
								( select ID_Empleado 
									from  TBL_NOM_ASISTENCIAS 
									where ID_FechaMovimiento = _ID_FechaMovimiento );
														
					--INSERTA LOS QUE REGISTRARON Y ESTAN INCONSISTENTES EN EL REGISTRO (EJ: LOS QUE SOLO TIENEN ENTRADA)		
					INSERT INTO _TMP_ASISTENCIAS
					SELECT m.ID_Empleado, '0', 
						case 	when _dia = 1 then getfechamashora(_ID_FechaMovimiento, (select ELunes from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno)) 
								when _dia = 2 then getfechamashora(_ID_FechaMovimiento, (select EMartes from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno))
								when _dia = 3 then getfechamashora(_ID_FechaMovimiento, (select EMiercoles from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno))
								when _dia = 4 then getfechamashora(_ID_FechaMovimiento, (select EJueves from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno))
								when _dia = 5 then getfechamashora(_ID_FechaMovimiento, (select EViernes from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno))
								when _dia = 6 then getfechamashora(_ID_FechaMovimiento, (select ESabado from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno))
								when _dia = 7 then getfechamashora(_ID_FechaMovimiento, (select EDomingo from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno)) end as desde,  
						
						case 	when _dia = 1 and ((select ELunes from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno) >= (select SLunes from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno))
									then getfechamashora((_ID_FechaMovimiento + '1 day'::interval), (select SLunes from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno))  					 
								when _dia = 1 and ((select ELunes from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno) < (select SLunes from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno))
									then getfechamashora(_ID_FechaMovimiento, (select SLunes from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno))  
													
								when _dia = 2 and ((select EMartes from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno) >= (select SMartes from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno))
									then getfechamashora((_ID_FechaMovimiento + '1 day'::interval), (select SMartes from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno))  					 
								when _dia = 2 and ((select EMartes from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno) < (select SMartes from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno))
									then getfechamashora(_ID_FechaMovimiento, (select SMartes from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno))					 
													
								when _dia = 3 and ((select EMiercoles from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno) >= (select SMiercoles from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno))
									then getfechamashora((_ID_FechaMovimiento + '1 day'::interval), (select SMiercoles from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno))  					 
								when _dia = 3 and ((select EMiercoles from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno) < (select SMiercoles from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno))
									then getfechamashora(_ID_FechaMovimiento, (select SMiercoles from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno))
					
								when _dia = 4 and ((select EJueves from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno) >= (select SJueves from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno))
									then getfechamashora((_ID_FechaMovimiento + '1 day'::interval), (select SJueves from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno))  					 
								when _dia = 4 and ((select EJueves from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno) < (select SJueves from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno))
									then getfechamashora(_ID_FechaMovimiento, (select SJueves from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno))  			 
					
								when _dia = 5 and ((select EViernes from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno) >= (select SViernes from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno))
									then getfechamashora((_ID_FechaMovimiento + '1 day'::interval), (select SViernes from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno))  					 
								when _dia = 5 and ((select EViernes from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno) < (select SViernes from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno))
									then getfechamashora(_ID_FechaMovimiento, (select SViernes from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno))  	 
					
								when _dia = 6 and ((select ESabado from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno) >= (select SSabado from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno))
									then getfechamashora((_ID_FechaMovimiento + '1 day'::interval), (select SSabado from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno))  					 
								when _dia = 6 and ((select ESabado from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno) < (select SSabado from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno))
									then getfechamashora(_ID_FechaMovimiento, (select SSabado from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno))  		 
					
								when _dia = 7 and ((select EDomingo from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno) >= (select SDomingo from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno))
									then getfechamashora((_ID_FechaMovimiento + '1 day'::interval), (select SDomingo from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno))  					 
								when _dia = 7 and ((select EDomingo from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno) < (select SDomingo from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno))
									then getfechamashora(_ID_FechaMovimiento, (select SDomingo from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno)) end as hasta, 			 

							null as Entrada, null as Salida,		 
							 
							case 	when _dia = 1 then (select HNALunes from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno)
									when _dia = 2 then (select HNAMartes from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno)
									when _dia = 3 then (select HNAMiercoles from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno)
									when _dia = 4 then (select HNAJueves from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno)
									when _dia = 5 then (select HNAViernes from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno)
									when _dia = 6 then (select HNASabado from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno)
									when _dia = 7 then (select HNADomingo from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno) end as HNA,
													 
							case 	when _dia = 1 then (select HEALunes from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno)
									when _dia = 2 then (select HEAMartes from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno)
									when _dia = 3 then (select HEAMiercoles from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno)
									when _dia = 4 then (select HEAJueves from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno)
									when _dia = 5 then (select HEAViernes from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno)
									when _dia = 6 then (select HEASabado from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno)
									when _dia = 7 then (select HEADomingo from TBL_NOM_TURNOS where ID_Turno = m.ID_Turno) end as HEA,
							0, null as Entrada2, null as Salida2
				
					FROM  TBL_NOM_ASISTENCIAS a INNER JOIN TBL_NOM_MASEMP m ON
						a.ID_Empleado = m.ID_Empleado 
					WHERE ( a.Indicador = 1 or a.Indicador = 3 ) and 
										a.ID_FechaMovimiento = _ID_FechaMovimiento and ( m.Status = 0 or (m.Status = 2 and m.Fecha_para_Liquidaciones >= _ID_FechaMovimiento)) and m.Fecha_de_Ingreso <= _ID_FechaMovimiento and 
																											m.ID_Compania = _ID_Compania and m.ID_Sucursal = _ID_Sucursal ;
																											
		
					--select * from _TMP_ASISTENCIAS;
					
					
					-- Ahora aplica los movimientos de nomina
					-- APLICA LAS ASISTENCIAS COMPLETAS ( -1 ) donde si HAYA ASISTIDO, Y NO existan permisos de vacaciones, incapacidad, pagos de tiempo y ni sea dia festivo
					INSERT INTO TBL_NOM_DIARIO_DET
					SELECT _ID_Compania, _ID_Sucursal, _ID_FechaMovimiento, tmp.ID_Empleado, -1, tmp.Desde, tmp.Hasta, tmp.Entrada, tmp.Salida, tmp.Entrada2, tmp.Salida2, tmp.HNA, 0
					FROM _TMP_ASISTENCIAS tmp 
					WHERE tmp.Asistio = '1' and tmp.Entrada <= tmp.Desde and tmp.Salida >= tmp.Hasta
							and  (	select count(*) from TBL_NOM_PERMISOS_GRUPO
											where ID_Compania = _ID_Compania and ID_Sucursal = _ID_Sucursal and FechaHora_Desde <= _ID_FechaMovimiento and 
														FechaHora_Hasta > _ID_FechaMovimiento and ID_Movimiento = -20 and 
															tmp.ID_Empleado not in ( 	select ID_Empleado 
																												from TBL_NOM_PERMISOS_GRUPO_EXCLUSIONES
																												where ID_Compania = _ID_Compania and ID_Sucursal = _ID_Sucursal	and 
																														ID_Movimiento = -20	and ID_FechaMovimiento = _ID_FechaMovimiento )  ) = 0
							and  ( 	select count(*) from TBL_NOM_PERMISOS 
											where ID_Empleado = tmp.ID_Empleado and FechaHora_Desde <= _ID_FechaMovimiento and FechaHora_Hasta > _ID_FechaMovimiento and 
																							( ID_Movimiento = -5 or ID_Movimiento = -7 or ID_Movimiento = -9 or ID_Movimiento = -11 or  ID_Movimiento = -12 or  ID_Movimiento = -13 ) ) = 0
							and  ( select count(*) from TBL_NOM_PERMISOS 
											where ID_Empleado = tmp.ID_Empleado and ID_FechaMovimiento = _ID_FechaMovimiento and 
																							( ID_Movimiento = -15 or ID_Movimiento = -16 or ID_Movimiento = -21 or ID_Movimiento = -22 ) ) = 0;
					
					
					-- APLICA LAS ASISTENCIAS PARCIALES ( -2 ) donde si HAYA ASISTIDO, Y NO existan permisos de vacaciones, incapacidad, pagos de tiempo y ni sea dia festivo
					INSERT INTO TBL_NOM_DIARIO_DET
					SELECT _ID_Compania, _ID_Sucursal, _ID_FechaMovimiento, tmp.ID_Empleado, -2, tmp.Desde, tmp.Hasta, tmp.Entrada, tmp.Salida, tmp.Entrada2, tmp.Salida2, tmp.HNA, 
						 case 	when tmp.Indicador = 2 then
									case	when tmp.Entrada > tmp.Desde and tmp.Salida >= tmp.Hasta 
																		then round((cast(getfechadiff('minute', tmp.Desde, tmp.Entrada) as numeric) / 60),6)
											when tmp.Salida < tmp.Hasta and tmp.Entrada <= tmp.Desde
																		then round((cast(getfechadiff('minute', tmp.Salida, tmp.Hasta) as numeric) / 60),6)
											when tmp.Salida < tmp.Hasta and tmp.Entrada > tmp.Desde
																		then round((cast(getfechadiff('minute', tmp.Salida, tmp.Hasta) as numeric) / 60),6) +	round((cast(getfechadiff('minute', tmp.Desde, tmp.Entrada) as numeric) / 60),6)
											else 0	end
								when tmp.Indicador = 4 then
									case	when tmp.Entrada > tmp.Desde and tmp.Salida2 >= tmp.Hasta
																		then round((cast(getfechadiff('minute', tmp.Salida, tmp.Entrada2) as numeric) / 60),6) + round((cast(getfechadiff('minute', tmp.Desde, tmp.Entrada) as numeric) / 60),6)
											when tmp.Salida2 < tmp.Hasta and tmp.Entrada <= tmp.Desde
																		then round((cast(getfechadiff('minute', tmp.Salida, tmp.Entrada2) as numeric) / 60),6) + round((cast(getfechadiff('minute', tmp.Salida2, tmp.Hasta) as numeric) / 60),6)
											when tmp.Salida2 < tmp.Hasta and tmp.Entrada > tmp.Desde
																		then round((cast(getfechadiff('minute', tmp.Salida, tmp.Entrada2) as numeric) / 60),6) +
																					round((cast(getfechadiff('minute', tmp.Salida2, tmp.Hasta) as numeric) / 60),6) +
																					round((cast(getfechadiff('minute', tmp.Desde, tmp.Entrada) as numeric) / 60),6)
											else round((cast(getfechadiff('minute', tmp.Salida, tmp.Entrada2) as numeric) / 60),6) end
								else 0	end
					FROM _TMP_ASISTENCIAS tmp 
					WHERE tmp.Asistio = '1' and ( tmp.Entrada > tmp.Desde or tmp.Salida < tmp.Hasta )
							and  (	select count(*) from TBL_NOM_PERMISOS_GRUPO
											where ID_Compania = _ID_Compania and ID_Sucursal = _ID_Sucursal and FechaHora_Desde <= _ID_FechaMovimiento and 
														FechaHora_Hasta > _ID_FechaMovimiento and ID_Movimiento = -20 and 
															tmp.ID_Empleado not in ( 	select ID_Empleado 
																												from TBL_NOM_PERMISOS_GRUPO_EXCLUSIONES
																												where ID_Compania = _ID_Compania and ID_Sucursal = _ID_Sucursal	and 
																														ID_Movimiento = -20	and ID_FechaMovimiento = _ID_FechaMovimiento ) ) = 0
							and  ( 	select count(*) from TBL_NOM_PERMISOS 
											where ID_Empleado = tmp.ID_Empleado and FechaHora_Desde <= _ID_FechaMovimiento and FechaHora_Hasta > _ID_FechaMovimiento and 
																							( ID_Movimiento = -5 or ID_Movimiento = -7 or ID_Movimiento = -9 or ID_Movimiento = -11 or  ID_Movimiento = -12 or  ID_Movimiento = -13 ) ) = 0
							and  ( select count(*) from TBL_NOM_PERMISOS 
											where ID_Empleado = tmp.ID_Empleado and ID_FechaMovimiento = _ID_FechaMovimiento and 
																							( ID_Movimiento = -15 or ID_Movimiento = -16 or ID_Movimiento = -21 or ID_Movimiento = -22 ) ) = 0;

																							
					-- APLICA LAS ASISTENCIAS COMPLETAS O PARCIALES ( TIEMPO POR PAGAR ENTRAR TARDE O SALIR ANTES ) ( -25 ) donde si HAYA ASISTIDO, su indicador sea SALIO Y NO existan permisos de vacaciones, incapacidad y ni sea dia festivo
					INSERT INTO TBL_NOM_DIARIO_DET
					SELECT _ID_Compania, _ID_Sucursal, _ID_FechaMovimiento, tmp.ID_Empleado, -25, tmp.Desde, tmp.Hasta, tmp.Entrada, tmp.Salida,  tmp.Entrada2, tmp.Salida2,
						tmp.HNA, 
						case 	when tmp.Entrada > tmp.Desde
															then -- Se espera permiso de entrar tarde
																case 	when (select count(*) from TBL_NOM_PERMISOS where ID_Empleado = tmp.ID_Empleado and ID_FechaMovimiento = _ID_FechaMovimiento and ID_Movimiento = -21 ) = 0 -- no existe el permiso aplica el retardo
																				then round((cast(getfechadiff('minute', tmp.Desde, tmp.Entrada) as numeric) / 60),6) -- aplica el retardo
																			else -- existe el permiso, ahora hay que verificar que aplique a todo el tiempo perdido
																				case	when ((	select FechaHora_Desde from TBL_NOM_PERMISOS 
																											where ID_Empleado = tmp.ID_Empleado and ID_FechaMovimiento = _ID_FechaMovimiento and ID_Movimiento = -21 ) <= tmp.Desde ) and 
																									 ((	select FechaHora_Hasta from TBL_NOM_PERMISOS 
																											where ID_Empleado = tmp.ID_Empleado and ID_FechaMovimiento = _ID_FechaMovimiento and ID_Movimiento = -21 ) >= tmp.Entrada ) -- Aplica todo el permiso
																								then 0 -- 0 horas perdidas porque aplic? a todo el permiso
																							when ((	select FechaHora_Desde from TBL_NOM_PERMISOS 
																											where ID_Empleado = tmp.ID_Empleado and ID_FechaMovimiento = _ID_FechaMovimiento and ID_Movimiento = -21 ) <= tmp.Desde ) and 
																									 ((	select FechaHora_Hasta from TBL_NOM_PERMISOS 
																											where ID_Empleado = tmp.ID_Empleado and ID_FechaMovimiento = _ID_FechaMovimiento and ID_Movimiento = -21 ) < tmp.Entrada ) -- Aplica parte del permiso ( llego mas tarde de lo que el permiso permitia )
																								then round((cast(getfechadiff('minute', (	select FechaHora_Hasta from TBL_NOM_PERMISOS 
																																										where ID_Empleado = tmp.ID_Empleado and ID_FechaMovimiento = _ID_FechaMovimiento and ID_Movimiento = -21 ), tmp.Entrada ) as numeric) / 60),6)
																							else 0 

																				end	  
																end
													else 0
										end
										+
										case	when tmp.Salida < tmp.Hasta
															then -- Se espera permiso de salir temprano
																case 	when (select count(*) from TBL_NOM_PERMISOS where ID_Empleado = tmp.ID_Empleado and ID_FechaMovimiento = _ID_FechaMovimiento and ID_Movimiento = -22 ) = 0 -- no existe el permiso aplica el salirse temprano
																				then round((cast(getfechadiff('minute', tmp.Salida, tmp.Hasta) as numeric) / 60),6) -- aplica la salida temprano
																			else -- existe el permiso, ahora hay que verificar que aplique a todo el tiempo perdido
																				case	when ((	select FechaHora_Desde from TBL_NOM_PERMISOS 
																											where ID_Empleado = tmp.ID_Empleado and ID_FechaMovimiento = _ID_FechaMovimiento and ID_Movimiento = -22 ) <= tmp.Salida ) and 
																									 ((	select FechaHora_Hasta from TBL_NOM_PERMISOS 
																											where ID_Empleado = tmp.ID_Empleado and ID_FechaMovimiento = _ID_FechaMovimiento and ID_Movimiento = -22 ) >= tmp.Hasta ) -- Aplica todo el permiso
																								then 0 -- 0 horas perdidas porque aplic? a todo el permiso
																							when ((	select FechaHora_Desde from TBL_NOM_PERMISOS 
																											where ID_Empleado = tmp.ID_Empleado and ID_FechaMovimiento = _ID_FechaMovimiento and ID_Movimiento = -22 ) > tmp.Salida ) and 
																									 ((	select FechaHora_Hasta from TBL_NOM_PERMISOS 
																											where ID_Empleado = tmp.ID_Empleado and ID_FechaMovimiento = _ID_FechaMovimiento and ID_Movimiento = -22 ) >= tmp.Hasta ) -- Aplica parte del permiso ( llego mas tarde de lo que el permiso permitia )
																								then round((cast(getfechadiff('minute', tmp.Salida, (	select FechaHora_Desde from TBL_NOM_PERMISOS 
																																																where ID_Empleado = tmp.ID_Empleado and ID_FechaMovimiento = _ID_FechaMovimiento and ID_Movimiento = -22 ) ) as numeric) / 60),6)
																							else 0 
																				end	  
																end
													else 0
										end
												
					FROM _TMP_ASISTENCIAS tmp 
					WHERE tmp.Asistio = '1' and tmp.Indicador = 2
							and  ( select count(*) from TBL_NOM_PERMISOS 
											where ID_Empleado = tmp.ID_Empleado and ID_FechaMovimiento = _ID_FechaMovimiento and 
																							( ID_Movimiento = -15 or ID_Movimiento = -21 or ID_Movimiento = -22 ) ) <> 0 
							and  (	select count(*) from TBL_NOM_PERMISOS_GRUPO
											where ID_Compania = _ID_Compania and ID_Sucursal = _ID_Sucursal and FechaHora_Desde <= _ID_FechaMovimiento and 
														FechaHora_Hasta > _ID_FechaMovimiento and ID_Movimiento = -20 and 
															tmp.ID_Empleado not in ( 	select ID_Empleado 
																												from TBL_NOM_PERMISOS_GRUPO_EXCLUSIONES
																												where ID_Compania = _ID_Compania and ID_Sucursal = _ID_Sucursal	and 
																														ID_Movimiento = -20	and ID_FechaMovimiento = _ID_FechaMovimiento ) ) = 0
							and  ( 	select count(*) from TBL_NOM_PERMISOS 
											where ID_Empleado = tmp.ID_Empleado and FechaHora_Desde <= _ID_FechaMovimiento and FechaHora_Hasta > _ID_FechaMovimiento and 
																							( ID_Movimiento = -5 or ID_Movimiento = -7 or ID_Movimiento = -9 or ID_Movimiento = -11 or  ID_Movimiento = -12 or  ID_Movimiento = -13  or  ID_Movimiento = -16 ) ) = 0;
				

					-- APLICA LAS ASISTENCIAS COMPLETAS O PARCIALES ( TIEMPO POR PAGAR ENTRAR / SALIR ) ( -25 ) donde si HAYA ASISTIDO, su indicador sea Salio por segunda ocasion, Y NO existan permisos de vacaciones, incapacidad y ni sea dia festivo
					INSERT INTO TBL_NOM_DIARIO_DET
					SELECT _ID_Compania, _ID_Sucursal, _ID_FechaMovimiento, tmp.ID_Empleado, -25, tmp.Desde, tmp.Hasta, tmp.Entrada, tmp.Salida, tmp.Entrada2, tmp.Salida2,
						tmp.HNA, 
						case 	when (select count(*) from TBL_NOM_PERMISOS where ID_Empleado = tmp.ID_Empleado and ID_FechaMovimiento = _ID_FechaMovimiento and ID_Movimiento = -15 ) = 0 -- no existe el permiso aplica el descuento del tiempo
														then round((cast(getfechadiff('minute', tmp.Salida, tmp.Entrada2) as numeric) / 60),6) -- aplica el descuento del tiempo
													else -- existe el permiso, ahora hay que verificar que aplique a todo el tiempo perdido
														case	when ((	select FechaHora_Desde from TBL_NOM_PERMISOS 
																					where ID_Empleado = tmp.ID_Empleado and ID_FechaMovimiento = _ID_FechaMovimiento and ID_Movimiento = -15 ) <= tmp.Salida ) and 
																			 ((	select FechaHora_Hasta from TBL_NOM_PERMISOS 
																					where ID_Empleado = tmp.ID_Empleado and ID_FechaMovimiento = _ID_FechaMovimiento and ID_Movimiento = -15 ) >= tmp.Entrada2 ) -- Aplica todo el permiso
																		then 0 -- 0 horas perdidas porque aplic? a todo el permiso
																	when ((	select FechaHora_Desde from TBL_NOM_PERMISOS 
																					where ID_Empleado = tmp.ID_Empleado and ID_FechaMovimiento = _ID_FechaMovimiento and ID_Movimiento = -15 ) <= tmp.Salida ) and 
																			 ((	select FechaHora_Hasta from TBL_NOM_PERMISOS 
																					where ID_Empleado = tmp.ID_Empleado and ID_FechaMovimiento = _ID_FechaMovimiento and ID_Movimiento = -15 ) < tmp.Entrada2 ) -- Aplica parte del permiso ( volvio a entrar mas tarde de lo que el permiso permitia )
																		then round((cast(getfechadiff('minute', ( select FechaHora_Hasta from TBL_NOM_PERMISOS 
																																				where ID_Empleado = tmp.ID_Empleado and ID_FechaMovimiento = _ID_FechaMovimiento and ID_Movimiento = -15 ), tmp.Entrada2 ) as numeric) / 60), 6) 
																	when ((	select FechaHora_Desde from TBL_NOM_PERMISOS 
																					where ID_Empleado = tmp.ID_Empleado and ID_FechaMovimiento = _ID_FechaMovimiento and ID_Movimiento = -15 ) > tmp.Salida ) and 
																			 ((	select FechaHora_Hasta from TBL_NOM_PERMISOS 
																					where ID_Empleado = tmp.ID_Empleado and ID_FechaMovimiento = _ID_FechaMovimiento and ID_Movimiento = -15 ) >= tmp.Entrada2 ) -- Aplica parte del permiso ( se salio antes de lo que el permiso permitia )
																		then round((cast(getfechadiff('minute', tmp.Salida, ( select FechaHora_Desde from TBL_NOM_PERMISOS 
																																										where ID_Empleado = tmp.ID_Empleado and ID_FechaMovimiento = _ID_FechaMovimiento and ID_Movimiento = -15 ) ) as numeric) / 60), 6) 
																	when ((	select FechaHora_Desde from TBL_NOM_PERMISOS 
																					where ID_Empleado = tmp.ID_Empleado and ID_FechaMovimiento = _ID_FechaMovimiento and ID_Movimiento = -15 ) > tmp.Salida ) and 
																			 ((	select FechaHora_Hasta from TBL_NOM_PERMISOS 
																					where ID_Empleado = tmp.ID_Empleado and ID_FechaMovimiento = _ID_FechaMovimiento and ID_Movimiento = -15 ) < tmp.Entrada2 ) -- Aplica parte del permiso ( se salio antes de lo que el permiso permitia y volio a entrar despues de lo que el permiso permitia )
																		then round((cast(getfechadiff('minute', tmp.Salida, ( select FechaHora_Desde from TBL_NOM_PERMISOS 
																																										where ID_Empleado = tmp.ID_Empleado and ID_FechaMovimiento = _ID_FechaMovimiento and ID_Movimiento = -15 ) ) as numeric) / 60), 6) +
																				 round((cast(getfechadiff('minute', (	select FechaHora_Hasta from TBL_NOM_PERMISOS 
																																				where ID_Empleado = tmp.ID_Empleado and ID_FechaMovimiento = _ID_FechaMovimiento and ID_Movimiento = -15 ), tmp.Entrada2 ) as numeric) / 60), 6) 
																	else 0 

															end
											end
											
											+ 			-- este se suma al proceso de entrar tarde o salir temprano
											
											case 	when tmp.Entrada > tmp.Desde
															then -- Se espera permiso de entrar tarde
																case 	when (select count(*) from TBL_NOM_PERMISOS where ID_Empleado = tmp.ID_Empleado and ID_FechaMovimiento = _ID_FechaMovimiento and ID_Movimiento = -21 ) = 0 -- no existe el permiso aplica el retardo
																				then round((cast(getfechadiff('minute', tmp.Desde, tmp.Entrada) as numeric) / 60),6) -- aplica el retardo
																			else -- existe el permiso, ahora hay que verificar que aplique a todo el tiempo perdido
																				case	when ((	select FechaHora_Desde from TBL_NOM_PERMISOS 
																											where ID_Empleado = tmp.ID_Empleado and ID_FechaMovimiento = _ID_FechaMovimiento and ID_Movimiento = -21 ) <= tmp.Desde ) and 
																									 ((	select FechaHora_Hasta from TBL_NOM_PERMISOS 
																											where ID_Empleado = tmp.ID_Empleado and ID_FechaMovimiento = _ID_FechaMovimiento and ID_Movimiento = -21 ) >= tmp.Entrada ) -- Aplica todo el permiso
																								then 0 -- 0 horas perdidas porque aplic? a todo el permiso
																							when ((	select FechaHora_Desde from TBL_NOM_PERMISOS 
																											where ID_Empleado = tmp.ID_Empleado and ID_FechaMovimiento = _ID_FechaMovimiento and ID_Movimiento = -21 ) <= tmp.Desde ) and 
																									 ((	select FechaHora_Hasta from TBL_NOM_PERMISOS 
																											where ID_Empleado = tmp.ID_Empleado and ID_FechaMovimiento = _ID_FechaMovimiento and ID_Movimiento = -21 ) < tmp.Entrada ) -- Aplica parte del permiso ( llego mas tarde de lo que el permiso permitia )
																								then round((cast(getfechadiff('minute', (	select FechaHora_Hasta from TBL_NOM_PERMISOS 
																																										where ID_Empleado = tmp.ID_Empleado and ID_FechaMovimiento = _ID_FechaMovimiento and ID_Movimiento = -21 ), tmp.Entrada ) as numeric) / 60),6)
																							else 0 
																				end	  
																end
														else 0
											end
											
											+
										
											case	when tmp.Salida2 < tmp.Hasta
															then -- Se espera permiso de salir temprano
																case 	when (select count(*) from TBL_NOM_PERMISOS where ID_Empleado = tmp.ID_Empleado and ID_FechaMovimiento = _ID_FechaMovimiento and ID_Movimiento = -22 ) = 0 -- no existe el permiso aplica el salirse temprano
																				then round((cast(getfechadiff('minute', tmp.Salida2, tmp.Hasta) as numeric) / 60),6) -- aplica la salida temprano
																			else -- existe el permiso, ahora hay que verificar que aplique a todo el tiempo perdido
																				case	when ((	select FechaHora_Desde from TBL_NOM_PERMISOS 
																											where ID_Empleado = tmp.ID_Empleado and ID_FechaMovimiento = _ID_FechaMovimiento and ID_Movimiento = -22 ) <= tmp.Salida2 ) and 
																									 ((	select FechaHora_Hasta from TBL_NOM_PERMISOS 
																											where ID_Empleado = tmp.ID_Empleado and ID_FechaMovimiento = _ID_FechaMovimiento and ID_Movimiento = -22 ) >= tmp.Hasta ) -- Aplica todo el permiso
																								then 0 -- 0 horas perdidas porque aplic? a todo el permiso
																							when ((	select FechaHora_Desde from TBL_NOM_PERMISOS 
																											where ID_Empleado = tmp.ID_Empleado and ID_FechaMovimiento = _ID_FechaMovimiento and ID_Movimiento = -22 ) > tmp.Salida2 ) and 
																									 ((	select FechaHora_Hasta from TBL_NOM_PERMISOS 
																											where ID_Empleado = tmp.ID_Empleado and ID_FechaMovimiento = _ID_FechaMovimiento and ID_Movimiento = -22 ) >= tmp.Hasta ) -- Aplica parte del permiso ( llego mas tarde de lo que el permiso permitia )
																								then round((cast(getfechadiff('minute', tmp.Salida2, (select FechaHora_Desde from TBL_NOM_PERMISOS 
																																																where ID_Empleado = tmp.ID_Empleado and ID_FechaMovimiento = _ID_FechaMovimiento and ID_Movimiento = -22 ) ) as numeric) / 60),6)
																							else 0 
																				end	  
																end
														else 0
											end
	

					FROM _TMP_ASISTENCIAS tmp 
					WHERE tmp.Asistio = '1' and tmp.Indicador = 4
							and  ( select count(*) from TBL_NOM_PERMISOS 
											where ID_Empleado = tmp.ID_Empleado and ID_FechaMovimiento = _ID_FechaMovimiento and 
																							( ID_Movimiento = -15 or ID_Movimiento = -21 or ID_Movimiento = -22 ) ) <> 0 
							and  (	select count(*) from TBL_NOM_PERMISOS_GRUPO
											where ID_Compania = _ID_Compania and ID_Sucursal = _ID_Sucursal and FechaHora_Desde <= _ID_FechaMovimiento and 
														FechaHora_Hasta > _ID_FechaMovimiento and ID_Movimiento = -20  and 
															tmp.ID_Empleado not in ( 	select ID_Empleado 
																												from TBL_NOM_PERMISOS_GRUPO_EXCLUSIONES
																												where ID_Compania = _ID_Compania and ID_Sucursal = _ID_Sucursal	and 
																														ID_Movimiento = -20	and ID_FechaMovimiento = _ID_FechaMovimiento ) ) = 0
							and  ( 	select count(*) from TBL_NOM_PERMISOS 
											where ID_Empleado = tmp.ID_Empleado and FechaHora_Desde <= _ID_FechaMovimiento and FechaHora_Hasta > _ID_FechaMovimiento and 
																							( ID_Movimiento = -5 or ID_Movimiento = -7 or ID_Movimiento = -9 or ID_Movimiento = -11 or  ID_Movimiento = -12 or  ID_Movimiento = -13  or  ID_Movimiento = -16) ) = 0;
				






					
					--select * from TBL_NOM_PERMISOS where ID_FechaMovimiento = _ID_FechaMovimiento and ID_Empleado = 'AVIM02' and ( ID_Movimiento = -21 or ID_Movimiento = -22 or ID_Movimiento = -15 )
					
					-- AHORA APLICA LOS STATUS CORRESPONDIENTES DE LOS QUE NO CAPTURARON ASISTENCIA
					-- DEBE APLICAR FALTAS, DIAS NO LABORALES, INCAPACIDADES EN TODAS SUS MODALIDADES, VACACIONES y DIAS CON PAGO DE TIEMPO
					--
					-- APLICA LAS FALTAS ( -3 ) donde no sea dia no laborable ni tampoco existan permisos de vacaciones, incapacidad y dias con pago de tiempo, y ni sea dia festivo
					INSERT INTO TBL_NOM_DIARIO_DET
					SELECT _ID_Compania, _ID_Sucursal, _ID_FechaMovimiento, tmp.ID_Empleado, -3, tmp.Desde, tmp.Hasta, null, null, null, null, tmp.HNA, tmp.HEA
					FROM _TMP_ASISTENCIAS tmp 
					WHERE tmp.Asistio = '0' and ( tmp.Desde is not null and tmp.Hasta is not null ) 
							and  (	select count(*) from TBL_NOM_PERMISOS_GRUPO
											where ID_Compania = _ID_Compania and ID_Sucursal = _ID_Sucursal and FechaHora_Desde <= _ID_FechaMovimiento and 
														FechaHora_Hasta > _ID_FechaMovimiento and ID_Movimiento = -20 ) = 0
							and  ( 	select count(*) from TBL_NOM_PERMISOS 
											where ID_Empleado = tmp.ID_Empleado and FechaHora_Desde <= _ID_FechaMovimiento and FechaHora_Hasta > _ID_FechaMovimiento and 
																							( ID_Movimiento = -5 or ID_Movimiento = -7 or ID_Movimiento = -9 or ID_Movimiento = -11 or  ID_Movimiento = -12 or  ID_Movimiento = -13  or ID_Movimiento = -16 ) ) = 0;


					-- APLICA LOS DIAS NO LABORALES ( -4 ) donde sea dia laborable y no existan permisos de vacaciones o incapacidad
					INSERT INTO TBL_NOM_DIARIO_DET
					SELECT _ID_Compania, _ID_Sucursal, _ID_FechaMovimiento, tmp.ID_Empleado, -4, tmp.Desde, tmp.Hasta, null, null, null, null, tmp.HNA, 0 
					FROM _TMP_ASISTENCIAS tmp 
					WHERE tmp.Asistio = '0' and ( tmp.Desde is null and tmp.Hasta is null )
						and  ( 	select count(*) from TBL_NOM_PERMISOS 
										where ID_Empleado = tmp.ID_Empleado and FechaHora_Desde <= _ID_FechaMovimiento and FechaHora_Hasta > _ID_FechaMovimiento and 
																							( ID_Movimiento = -5 or ID_Movimiento = -7 or ID_Movimiento = -9 or ID_Movimiento = -11 or  ID_Movimiento = -12 or  ID_Movimiento = -13  or ID_Movimiento = -16  ) ) = 0;
	
					-- aplica los permisos de DIAS FESTIVOS ( PERMISOS DE GRUPO ) donde no sea dia no laborable ni tampoco existan permisos de vacaciones o incapacidad
					INSERT INTO TBL_NOM_DIARIO_DET
					SELECT _ID_Compania, _ID_Sucursal, _ID_FechaMovimiento, tmp.ID_Empleado, p.ID_Movimiento, p.FechaHora_Desde, p.FechaHora_Hasta, null, null, null, null, tmp.HNA, 0
					FROM _TMP_ASISTENCIAS tmp INNER JOIN TBL_NOM_PERMISOS_GRUPO p ON
						p.ID_Compania = _ID_Compania and p.ID_Sucursal = _ID_Sucursal INNER JOIN TBL_NOM_MOVIMIENTOS m ON
						p.ID_Movimiento = m.ID_Movimiento
					WHERE tmp.Asistio = '0' and ( tmp.Desde is not null and tmp.Hasta is not null ) and
							(_ID_FechaMovimiento >= p.FechaHora_Desde and _ID_FechaMovimiento < p.FechaHora_Hasta )
								and m.ID_Movimiento = -20 and tmp.ID_Empleado not in ( 	select ID_Empleado 
															from TBL_NOM_PERMISOS_GRUPO_EXCLUSIONES
															where ID_Compania = _ID_Compania and ID_Sucursal = _ID_Sucursal	and 
																		ID_Movimiento = p.ID_Movimiento	and ID_FechaMovimiento = p.ID_FechaMovimiento ) 
								and  ( 	select count(*) from TBL_NOM_PERMISOS 
												where ID_Empleado = tmp.ID_Empleado and FechaHora_Desde <= _ID_FechaMovimiento and FechaHora_Hasta > _ID_FechaMovimiento and 
																							( ID_Movimiento = -5 or ID_Movimiento = -7 or ID_Movimiento = -9 or ID_Movimiento = -11 or  ID_Movimiento = -12 or  ID_Movimiento = -13 or ID_Movimiento = -16 ) ) = 0;

					-- AHORA APLICA PERMISOS DE DIAS CON PAGO DE TIEMPO donde no sea dia no laborable ni tampoco existan permisos de vacaciones o incapacidad
					INSERT INTO TBL_NOM_DIARIO_DET
					SELECT _ID_Compania, _ID_Sucursal, _ID_FechaMovimiento, tmp.ID_Empleado, -25, p.FechaHora_Desde, p.FechaHora_Hasta, null, null, null, null, tmp.HNA, 0
					FROM _TMP_ASISTENCIAS tmp INNER JOIN TBL_NOM_PERMISOS p ON
						p.ID_Empleado = tmp.ID_Empleado INNER JOIN TBL_NOM_MOVIMIENTOS m ON
						p.ID_Movimiento = m.ID_Movimiento
					WHERE tmp.Asistio = '0' and ( tmp.Desde is not null and tmp.Hasta is not null ) and
							(_ID_FechaMovimiento >= p.FechaHora_Desde and _ID_FechaMovimiento < p.FechaHora_Hasta )
								and m.ID_Movimiento = -16 
								and  ( 	select count(*) from TBL_NOM_PERMISOS 
												where ID_Empleado = tmp.ID_Empleado and FechaHora_Desde <= _ID_FechaMovimiento and FechaHora_Hasta > _ID_FechaMovimiento and 
																							( ID_Movimiento = -5 or ID_Movimiento = -7 or ID_Movimiento = -9 or ID_Movimiento = -11 or  ID_Movimiento = -12 or  ID_Movimiento = -13 ) ) = 0;
		
					-- APLICA AHORA PERMISOS DE QUE ESTEN CAPTURADOS
					-- PRIMERO APLICA PERMISOS DE QUE REMPLAZAN FALTAS, DIAS NO LABORALES Y DIAS FESTIVOS. ESTOS SON LAS VACACIONES E INCAPACIDADES
					INSERT INTO TBL_NOM_DIARIO_DET
					SELECT _ID_Compania, _ID_Sucursal, _ID_FechaMovimiento, tmp.ID_Empleado, p.ID_Movimiento, p.FechaHora_Desde, p.FechaHora_Hasta, tmp.Entrada, tmp.Salida, tmp.Entrada2, tmp.Salida2, tmp.HNA, tmp.HEA
									
					FROM _TMP_ASISTENCIAS tmp INNER JOIN TBL_NOM_PERMISOS p ON
						tmp.ID_Empleado = p.ID_Empleado INNER JOIN TBL_NOM_MOVIMIENTOS m ON
						p.ID_Movimiento = m.ID_Movimiento
					WHERE  _ID_FechaMovimiento >= p.FechaHora_Desde and _ID_FechaMovimiento < p.FechaHora_Hasta 
						and ( p.ID_Movimiento = -5 or p.ID_Movimiento = -7 or p.ID_Movimiento = -9 or p.ID_Movimiento = -11 or  p.ID_Movimiento = -12 or  p.ID_Movimiento = -13);	

					-- ahora empieza por aplicar las horas extras ...
					INSERT INTO TBL_NOM_DIARIO_DET
					SELECT _ID_Compania, _ID_Sucursal, _ID_FechaMovimiento, tmp.ID_Empleado, p.ID_Movimiento, p.FechaHora_Desde, p.FechaHora_Hasta, tmp.Entrada, tmp.Salida, tmp.Entrada2, tmp.Salida2, 
						case 	when tmp.Hasta is not null then -- Dias laborable
														case 	when tmp.Indicador = 2 then	
																		case	when tmp.Salida > tmp.Hasta then 
																						case	when p.FechaHora_Hasta <= tmp.Salida  
																										then round((cast(getfechadiff('minute', p.FechaHora_Desde, p.FechaHora_Hasta) as numeric) / 60),6)
																									when p.FechaHora_Hasta > tmp.Salida and p.FechaHora_Desde < tmp.Salida
																										then round((cast(getfechadiff('minute', p.FechaHora_Desde, tmp.Salida) as numeric) / 60),6)
																									else 0 
																						end	  
																					else 0 
																		end
																	when tmp.Indicador = 4 then
																		case	when tmp.Salida2 > tmp.Hasta then 
																						case	when p.FechaHora_Hasta <= tmp.Salida2  
																										then round((cast(getfechadiff('minute', p.FechaHora_Desde, p.FechaHora_Hasta) as numeric) / 60),6)
																									when p.FechaHora_Hasta > tmp.Salida2 and p.FechaHora_Desde < tmp.Salida2
																										then round((cast(getfechadiff('minute', p.FechaHora_Desde, tmp.Salida2) as numeric) / 60),6)
																									else 0 
																						end	  
																					else 0 
																		end
																	else 0
														end
													else -- dia no laborable
														case 	when tmp.Indicador = 2 then	
																		case 	when p.FechaHora_Hasta <= tmp.Entrada or p.FechaHora_Desde >= tmp.Salida 
																						then 0
																					when p.FechaHora_Hasta > tmp.Salida or p.FechaHora_Desde < tmp.Entrada
																						then round((cast(getfechadiff('minute', tmp.Entrada, tmp.Salida) as numeric) / 60),6)
																					when p.FechaHora_Desde >= tmp.Entrada and p.FechaHora_Hasta <= tmp.Salida 
																						then round((cast(getfechadiff('minute', p.FechaHora_Desde, p.FechaHora_Hasta) as numeric) / 60),6)
																					when p.FechaHora_Desde >= tmp.Entrada and p.FechaHora_Hasta > tmp.Salida 
																						then round((cast(getfechadiff('minute', p.FechaHora_Desde, tmp.Salida) as numeric) / 60),6)
																					when p.FechaHora_Desde < tmp.Entrada and p.FechaHora_Hasta <= tmp.Salida 
																						then round((cast(getfechadiff('minute', tmp.Entrada, p.FechaHora_Hasta) as numeric) / 60),6)
																		else 0 end
																	when tmp.Indicador = 4 then
																		case 	when p.FechaHora_Hasta <= tmp.Entrada or p.FechaHora_Desde >= tmp.Salida2 
																						then 0
																					when p.FechaHora_Hasta > tmp.Salida2 or p.FechaHora_Desde < tmp.Entrada
																						then round((cast(getfechadiff('minute', tmp.Entrada, tmp.Salida2) as numeric) / 60),6)
																					when p.FechaHora_Desde >= tmp.Entrada and p.FechaHora_Hasta <= tmp.Salida2 
																						then round((cast(getfechadiff('minute', p.FechaHora_Desde, p.FechaHora_Hasta) as numeric) / 60),6)
																					when p.FechaHora_Desde >= tmp.Entrada and p.FechaHora_Hasta > tmp.Salida2 
																						then round((cast(getfechadiff('minute', p.FechaHora_Desde, tmp.Salida2) as numeric) / 60),6)
																					when p.FechaHora_Desde < tmp.Entrada and p.FechaHora_Hasta <= tmp.Salida2 
																						then round((cast(getfechadiff('minute', tmp.Entrada, p.FechaHora_Hasta) as numeric) / 60),6)
																		else 0 end

																	else 0
														end	
										end, 0
					FROM _TMP_ASISTENCIAS tmp INNER JOIN TBL_NOM_PERMISOS p ON
						tmp.ID_Empleado = p.ID_Empleado INNER JOIN TBL_NOM_MOVIMIENTOS m ON
						p.ID_Movimiento = m.ID_Movimiento
					WHERE tmp.Asistio = '1' and p.ID_FechaMovimiento = _ID_FechaMovimiento
						and m.ID_Movimiento = -14;

					-- ahora aplica las horas pagadas ...
					INSERT INTO TBL_NOM_DIARIO_DET
					SELECT _ID_Compania, _ID_Sucursal, _ID_FechaMovimiento, tmp.ID_Empleado, p.ID_Movimiento, p.FechaHora_Desde, p.FechaHora_Hasta, tmp.Entrada, tmp.Salida, tmp.Entrada2, tmp.Salida2, 
						case 	when tmp.Hasta is not null then -- Dias laborable
														case 	when tmp.Indicador = 2 then	
																		case	when tmp.Salida > tmp.Hasta then 
																						case	when p.FechaHora_Hasta <= tmp.Salida  
																										then round((cast(getfechadiff('minute', p.FechaHora_Desde, p.FechaHora_Hasta) as numeric) / 60),6)
																									when p.FechaHora_Hasta > tmp.Salida and p.FechaHora_Desde < tmp.Salida
																										then round((cast(getfechadiff('minute', p.FechaHora_Desde, tmp.Salida) as numeric) / 60),6)
																									else 0 
																						end	  
																					else 0 
																		end
																	when tmp.Indicador = 4 then
																		case	when tmp.Salida2 > tmp.Hasta then 
																						case	when p.FechaHora_Hasta <= tmp.Salida2  
																										then round((cast(getfechadiff('minute', p.FechaHora_Desde, p.FechaHora_Hasta) as numeric) / 60),6)
																									when p.FechaHora_Hasta > tmp.Salida2 and p.FechaHora_Desde < tmp.Salida2
																										then round((cast(getfechadiff('minute', p.FechaHora_Desde, tmp.Salida2) as numeric) / 60),6)
																									else 0 
																						end	  
																					else 0 
																		end
																	else 0
														end
													else -- dia no laborable
														case 	when tmp.Indicador = 2 then	
																		case 	when p.FechaHora_Hasta <= tmp.Entrada or p.FechaHora_Desde >= tmp.Salida 
																						then 0
																					when p.FechaHora_Hasta > tmp.Salida or p.FechaHora_Desde < tmp.Entrada
																						then round((cast(getfechadiff('minute', tmp.Entrada, tmp.Salida) as numeric) / 60),6)
																					when p.FechaHora_Desde >= tmp.Entrada and p.FechaHora_Hasta <= tmp.Salida 
																						then round((cast(getfechadiff('minute', p.FechaHora_Desde, p.FechaHora_Hasta) as numeric) / 60),6)
																					when p.FechaHora_Desde >= tmp.Entrada and p.FechaHora_Hasta > tmp.Salida 
																						then round((cast(getfechadiff('minute', p.FechaHora_Desde, tmp.Salida) as numeric) / 60),6)
																					when p.FechaHora_Desde < tmp.Entrada and p.FechaHora_Hasta <= tmp.Salida 
																						then round((cast(getfechadiff('minute', tmp.Entrada, p.FechaHora_Hasta) as numeric) / 60),6)
																		else 0 end
																	when tmp.Indicador = 4 then
																		case 	when p.FechaHora_Hasta <= tmp.Entrada or p.FechaHora_Desde >= tmp.Salida2 
																						then 0
																					when p.FechaHora_Hasta > tmp.Salida2 or p.FechaHora_Desde < tmp.Entrada
																						then round((cast(getfechadiff('minute', tmp.Entrada, tmp.Salida2) as numeric) / 60),6)
																					when p.FechaHora_Desde >= tmp.Entrada and p.FechaHora_Hasta <= tmp.Salida2 
																						then round((cast(getfechadiff('minute', p.FechaHora_Desde, p.FechaHora_Hasta) as numeric) / 60),6)
																					when p.FechaHora_Desde >= tmp.Entrada and p.FechaHora_Hasta > tmp.Salida2 
																						then round((cast(getfechadiff('minute', p.FechaHora_Desde, tmp.Salida2) as numeric) / 60),6)
																					when p.FechaHora_Desde < tmp.Entrada and p.FechaHora_Hasta <= tmp.Salida2 
																						then round((cast(getfechadiff('minute', tmp.Entrada, p.FechaHora_Hasta) as numeric) / 60),6)
																		else 0 end

																	else 0
														end	
										end, 0
					FROM _TMP_ASISTENCIAS tmp INNER JOIN TBL_NOM_PERMISOS p ON
						tmp.ID_Empleado = p.ID_Empleado INNER JOIN TBL_NOM_MOVIMIENTOS m ON
						p.ID_Movimiento = m.ID_Movimiento
					WHERE tmp.Asistio = '1' and p.ID_FechaMovimiento = _ID_FechaMovimiento
						and ( m.ID_Movimiento = -19 or m.ID_Movimiento = -30 or m.ID_Movimiento = -31 or m.ID_Movimiento = -32 );
				

 					-- aplica los permisos ( salir-entrar, entrar tarde, salir antes) SIN PAGO de tiempo 
					INSERT INTO TBL_NOM_DIARIO_DET
					SELECT _ID_Compania, _ID_Sucursal, _ID_FechaMovimiento, tmp.ID_Empleado, p.ID_Movimiento, p.FechaHora_Desde, p.FechaHora_Hasta, tmp.Entrada, tmp.Salida, tmp.Entrada2, tmp.Salida2,
									round((cast(getfechadiff('minute', p.FechaHora_Desde, p.FechaHora_Hasta) as numeric) / 60),6),
									0
					FROM _TMP_ASISTENCIAS tmp INNER JOIN TBL_NOM_PERMISOS p ON
						tmp.ID_Empleado = p.ID_Empleado INNER JOIN TBL_NOM_MOVIMIENTOS m ON
						p.ID_Movimiento = m.ID_Movimiento
					WHERE tmp.Asistio = '1' and p.ID_FechaMovimiento = _ID_FechaMovimiento
						and ( m.ID_Movimiento = -17 OR m.ID_Movimiento = -23 OR m.ID_Movimiento = -24 );
				
					-- aplica los permisos de DIAS SIN PAGO de tiempo 
					INSERT INTO TBL_NOM_DIARIO_DET
					SELECT _ID_Compania, _ID_Sucursal, _ID_FechaMovimiento, tmp.ID_Empleado, p.ID_Movimiento, p.FechaHora_Desde, p.FechaHora_Hasta, tmp.Entrada, tmp.Salida, tmp.Entrada2, tmp.Salida2, 
									tmp.HNA,
									0
					FROM _TMP_ASISTENCIAS tmp INNER JOIN TBL_NOM_PERMISOS p ON
						tmp.ID_Empleado = p.ID_Empleado INNER JOIN TBL_NOM_MOVIMIENTOS m ON
						p.ID_Movimiento = m.ID_Movimiento
					WHERE tmp.Asistio = '0' and (_ID_FechaMovimiento >= p.FechaHora_Desde and _ID_FechaMovimiento < p.FechaHora_Hasta )
						and m.ID_Movimiento = -18;
		
					-- Por ultimo borra la tabla temporal de asistencias					
					TRUNCATE TABLE _TMP_ASISTENCIAS;
		
					--SELECT d.ID_Empleado, d.ID_FechaMovimiento, d.ID_Movimiento, m.Descripcion, d.Desde, d.Hasta, d.Entrada, d.Salida, d.HNA, d.HNP
					--FROM TBL_NOM_DIARIO_DET d INNER JOIN TBL_NOM_MOVIMIENTOS m ON
					--	d.ID_Movimiento = m.ID_Movimiento 
					--WHERE (ID_Empleado = 'ALRM02' or ID_Empleado = 'AMGE02') and ID_Compania = _ID_Compania and 
					--		ID_Sucursal = _ID_Sucursal and 
					--		ID_FechaMovimiento = _ID_FechaMovimiento
			
			END IF;
						
			_cont := _cont + 1;

		END LOOP;-- fin de while

		--RETURN QUERY SELECT * FROM  _TMP_ASISTENCIAS;
		DROP TABLE _TMP_ASISTENCIAS;
	
	END IF;

	RETURN QUERY SELECT _err, _result, _Compania_Sucursal;
END
$BODY$
  LANGUAGE plpgsql;
  
  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_nom_diario_cierre_proteger(_compania_sucursal character varying, _fechadesde timestamp without time zone, _fechahasta timestamp without time zone)
  RETURNS SETOF record AS
$BODY$
DECLARE
	_err int; _result varchar(8000); _contdia smallint; _cont smallint;
	_ID_Compania smallint; _ID_Sucursal smallint; _ID_FechaMovimiento timestamp;
BEGIN
	_err := 0;
	_result := 'Se han protegido/desprotegido los dias';
	_ID_Compania := (select ID_Compania from TBL_COMPANIAS where Descripcion = _Compania_Sucursal);
	_ID_Sucursal := (select ID_Sucursal from TBL_COMPANIAS where Descripcion = _Compania_Sucursal);
	_contdia := getfechadiff('day', _FechaDesde, _FechaHasta);
	_cont := 0;

	WHILE _cont <= _contdia
	LOOP
		-- primero genera el dia del movimiento
		_ID_FechaMovimiento := _FechaDesde + (cast(_cont as text) || ' days')::interval;	--DATEADD(day, _cont, _FechaDesde)

		raise notice 'FECHA DE MOVIMIENTO % ', _ID_FechaMovimiento;
		
		IF(select count(*) from TBL_NOM_DIARIO_CAB where ID_Compania = _ID_Compania and 
								ID_Sucursal = _ID_Sucursal and 
								ID_FechaMovimiento = _ID_FechaMovimiento) < 1
		THEN
			_cont := _cont + 1;
			raise notice 'Este dia no existe';
			CONTINUE;
		END IF;
		
		IF(	select Cerrado 
			from TBL_NOM_DIARIO_CAB 
			where ID_Compania = _ID_Compania and 
								ID_Sucursal = _ID_Sucursal and 
								ID_FechaMovimiento = _ID_FechaMovimiento) = '1'
		THEN -- Esta protegido, procede a desproteger
			UPDATE TBL_NOM_DIARIO_CAB 
			SET Cerrado = '0'
			WHERE 	ID_Compania = _ID_Compania and 
					ID_Sucursal = _ID_Sucursal and 
					ID_FechaMovimiento = _ID_FechaMovimiento;
							
		ELSE
			UPDATE TBL_NOM_DIARIO_CAB 
			SET Cerrado = '1'
			WHERE ID_Compania = _ID_Compania and 
					ID_Sucursal = _ID_Sucursal and 
					ID_FechaMovimiento = _ID_FechaMovimiento;
		END IF;
		
		_cont := _cont + 1; 

	END LOOP;

	RETURN QUERY 
	SELECT _err, _result, _Compania_Sucursal;
	
END
$BODY$
  LANGUAGE plpgsql;

-- Inserta las tablas para el c√°lculo de n√≥mina
INSERT INTO TBL_NOM_AGUINALDO
VALUES(1,0.000,1.999,15);
INSERT INTO TBL_NOM_AGUINALDO
VALUES(2,2.000,99.999,30);

INSERT INTO TBL_NOM_VACACIONES
VALUES(1,0.000,1.999,6,0.35);
INSERT INTO TBL_NOM_VACACIONES
VALUES(2,2.000,2.999,9,0.35);
INSERT INTO TBL_NOM_VACACIONES
VALUES(3,3.000,3.999,11,0.35);
INSERT INTO TBL_NOM_VACACIONES
VALUES(4,4.000,4.999,13,0.35);
INSERT INTO TBL_NOM_VACACIONES
VALUES(5,5.000,9.999,15,0.35);
INSERT INTO TBL_NOM_VACACIONES
VALUES(6,10.000,14.999,17,0.35);
INSERT INTO TBL_NOM_VACACIONES
VALUES(7,15.000,19.999,19,0.35);
INSERT INTO TBL_NOM_VACACIONES
VALUES(8,20.000,24.999,21,0.35);
INSERT INTO TBL_NOM_VACACIONES
VALUES(9,25.000,28.999,22,0.45);
INSERT INTO TBL_NOM_VACACIONES
VALUES(10,29.000,33.999,24,0.45);
INSERT INTO TBL_NOM_VACACIONES
VALUES(11,34.000,38.999,26,0.45);

INSERT INTO TBL_NOM_ISR 
VALUES(1,0.01,496.07,0.000,0.0192,0.00,0.00);
INSERT INTO TBL_NOM_ISR 
VALUES(2,496.08,4210.41,9.520,0.0640,0.00,0.00);
INSERT INTO TBL_NOM_ISR 
VALUES(3,4210.42,7399.42,247.230,0.1088,0.00,0.00);
INSERT INTO TBL_NOM_ISR 
VALUES(4,7399.43,8601.50,594.240,0.1600,0.00,0.00);
INSERT INTO TBL_NOM_ISR 
VALUES(5,8601.51,10298.35,786.550,0.1792,0.00,0.00);
INSERT INTO TBL_NOM_ISR 
VALUES(6,10298.36,20770.29,1090.620,0.2136,0.00,0.00);
INSERT INTO TBL_NOM_ISR 
VALUES(7,20770.30,32736.83,3327.420,0.2352,0.00,0.00);
INSERT INTO TBL_NOM_ISR 
VALUES(8,32736.84,62500.00,6141.950,0.3000,0.00,0.00);
INSERT INTO TBL_NOM_ISR 
VALUES(9,62500.01,83333.33,15070.900,0.3200,0.00,0.00);
INSERT INTO TBL_NOM_ISR 
VALUES(10,83333.34,250000.00,21737.570,0.3400,0.00,0.00);
INSERT INTO TBL_NOM_ISR 
VALUES(11,250000.01,9999999.99,78404.230,0.3500,0.00,0.00);

INSERT INTO TBL_NOM_ISR_ANUALIZADO 
VALUES(1,      .00,             16.32,           .000,         .0192,          .00,          .00);
INSERT INTO TBL_NOM_ISR_ANUALIZADO 
VALUES(2,      16.32,           138.50,          .313,         .0640,          .00,          .00);
INSERT INTO TBL_NOM_ISR_ANUALIZADO 
VALUES(3,      138.50,          243.40,          8.133,        .1088,          .00,          .00);
INSERT INTO TBL_NOM_ISR_ANUALIZADO 
VALUES(4,      243.40,          282.94,          19.547,       .1600,          .00,          .00);
INSERT INTO TBL_NOM_ISR_ANUALIZADO 
VALUES(5,      282.94,          338.76,          25.873,       .1792,          .00,          .00);
INSERT INTO TBL_NOM_ISR_ANUALIZADO 
VALUES(6,      338.76,          683.23,          35.876,       .2136,          .00,          .00);
INSERT INTO TBL_NOM_ISR_ANUALIZADO 
VALUES(7,      683.23,          1076.87,         109.455,      .2352,          .00,          .00);
INSERT INTO TBL_NOM_ISR_ANUALIZADO 
VALUES(8,      1076.87,         2055.92,         202.038,      .3000,          .00,          .00);
INSERT INTO TBL_NOM_ISR_ANUALIZADO 
VALUES(9,      2055.92,         2741.23,         495.753,      .3200,          .00,          .00);
INSERT INTO TBL_NOM_ISR_ANUALIZADO 
VALUES(10,     2741.23,         8223.68,         715.052,      .3400,          .00,          .00);
INSERT INTO TBL_NOM_ISR_ANUALIZADO 
VALUES(11,     8223.68,         9999999.99,      2579.087,     .3500,          .00,          .00);

INSERT INTO TBL_NOM_CREDITO_SALARIO 
VALUES(1,     .01,            1768.96,        407.02);
INSERT INTO TBL_NOM_CREDITO_SALARIO 
VALUES(2,     1768.97,        2653.38,        406.83);
INSERT INTO TBL_NOM_CREDITO_SALARIO 
VALUES(4,     2653.39,        3472.84,        406.62);
INSERT INTO TBL_NOM_CREDITO_SALARIO 
VALUES(5,     3472.85,        3537.87,        392.77);
INSERT INTO TBL_NOM_CREDITO_SALARIO 
VALUES(6,     3537.88,        4446.15,        382.46);
INSERT INTO TBL_NOM_CREDITO_SALARIO 
VALUES(7,     4446.16,        4717.18,        354.23);
INSERT INTO TBL_NOM_CREDITO_SALARIO 
VALUES(8,     4717.19,        5335.42,        324.87);
INSERT INTO TBL_NOM_CREDITO_SALARIO 
VALUES(9,    5335.43,        6224.67,        294.63);
INSERT INTO TBL_NOM_CREDITO_SALARIO 
VALUES(10,    6224.68,        7113.90,        253.54);
INSERT INTO TBL_NOM_CREDITO_SALARIO 
VALUES(11,    7113.91,        7382.33,        217.61);
INSERT INTO TBL_NOM_CREDITO_SALARIO 
VALUES(12,    7382.34,        99999999.00,    .00);

INSERT INTO TBL_NOM_IMSS
VALUES(1,       'Seguro de riesgos de trabajo',            .004300,      .000000,          .004300);
INSERT INTO TBL_NOM_IMSS
VALUES(2,       'Maternidad clase 1',          .178000,      .000000,          .178000);
INSERT INTO TBL_NOM_IMSS
VALUES(3,       'Maternidad clase 2',          .030600,      .000000,          .030600);
INSERT INTO TBL_NOM_IMSS
VALUES(4,       'Maternidad clase 3',          .010500,      .003750,          .014250);
INSERT INTO TBL_NOM_IMSS
VALUES(5,       'Maternidad clase 4',          .007000,      .002500,          .009500);
INSERT INTO TBL_NOM_IMSS
VALUES(6,       'Seguro de invalidez y vida',  .017500,      .006250,          .023750);
INSERT INTO TBL_NOM_IMSS
VALUES(7,       'Retiro Cesantia Edad avanz vejes clase1',  .020000,      .000000,          .020000);
INSERT INTO TBL_NOM_IMSS
VALUES(8,       'Retiro Cesantia Edad avanz vejes clase2',  .031500,      .011250,          .042750);
INSERT INTO TBL_NOM_IMSS
VALUES(9,       'Guarderia y prestaciones sociales',        .010000,      .000000,          .010000);

INSERT INTO tbl_variables(id_variable, descripcion, ventero, vdecimal, vfecha, valfanumerico, desistema, modulo)
VALUES('DIFASIST', 'INT|0|60|-|-', 5, null, null, '', '1', 'NOM');


  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION getabsfechadiff(_part character varying, _start timestamp without time zone, _end timestamp without time zone)
  RETURNS smallint AS
$BODY$
DECLARE
	_res smallint; _aux timestamp;
BEGIN
   	IF _end <= _start
	THEN
		_aux := _start;
		_start := _end;
		_end := _aux;
	END IF;
		
	IF _Part = 'year'
	THEN
		IF date_part('YEAR', _end) = date_part('YEAR',_start)
		THEN
			 _res := 0;
		ELSIF date_part('YEAR', _end) > date_part('YEAR',_start)
		THEN
			IF date_part('MONTH',_end) > date_part('MONTH',_start)
			THEN
				 _res := date_part('YEAR',_end) - date_part('YEAR',_start);
			ELSIF date_part('MONTH', _end) < date_part('MONTH',_start)
			THEN
				 _res := date_part('YEAR',_end) - date_part('YEAR',_start) - 1;
			ELSE
				IF date_part('DAY',_end) = date_part('DAY',_start)
				THEN
					 _res := date_part('YEAR',_end) - date_part('YEAR',_start);
				ELSIF date_part('DAY',_end) < date_part('DAY',_start)
				THEN
					 _res := date_part('YEAR',_end) - date_part('YEAR',_start) - 1;
				ELSE
					 _res := date_part('YEAR',_end) - date_part('YEAR',_start);
				END IF; 
			END IF;
		END IF;
	ELSIF _Part = 'month'
	THEN
		IF date_part('DAY',_end) < date_part('DAY',_start)
		THEN
			 _res := getfechadiff('month',_start,_end) - 1;
		ELSE
			 _res := getfechadiff('month',_start,_end);
		END IF;
	ELSIF _Part = 'day'
	THEN
		 _res := getfechadiff('day',_start,_end);
	ELSE
		 _res = null;
	END IF;
	

	RETURN _res;
END
$BODY$
  LANGUAGE plpgsql;

  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION getnum_dom(_fechadesde timestamp without time zone, _fechahasta timestamp without time zone)
  RETURNS smallint AS
$BODY$
DECLARE
	_res smallint; _fechacont timestamp;
BEGIN
	_FechaCont := _FechaDesde;
	_res := 0;

	WHILE _FechaCont <= _FechaHasta
	LOOP
			IF( date_part('dow',_FechaCont) ) = 0 -- 0 es el dia domingo
			THEN
				_res := _res + 1;
			END IF;
			_FechaCont := _FechaCont + '1 day'::interval;
	END LOOP;

	RETURN _res;
END
$BODY$
  LANGUAGE plpgsql;
  
INSERT INTO tbl_variables(id_variable, descripcion, ventero, vdecimal, vfecha, valfanumerico, desistema, modulo)
VALUES('SA','DECIMAL|0|-|-|-', null, 1.00, null, '', '1','NOM');

INSERT INTO tbl_variables(id_variable, descripcion, ventero, vdecimal, vfecha, valfanumerico, desistema, modulo)
VALUES('SALMIN','DECIMAL|0.01|-|-|-', null, 67.29, null, '', '1','NOM');

INSERT INTO tbl_variables(id_variable, descripcion, ventero, vdecimal, vfecha, valfanumerico, desistema, modulo)
VALUES('SALTOP','DECIMAL|0|-|-|-', null, 1682.25, null, '', '1','NOM');

INSERT INTO tbl_variables(id_variable, descripcion, ventero, vdecimal, vfecha, valfanumerico, desistema, modulo)
VALUES('PRIDOM','DECIMAL|0|-|-|-', null, 0.25, null, '', '1','NOM');

INSERT INTO tbl_variables(id_variable, descripcion, ventero, vdecimal, vfecha, valfanumerico, desistema, modulo)
VALUES('PPINCON','DECIMAL|0|1|-|-', null, 0.10, null, '', '1','NOM');

INSERT INTO tbl_variables(id_variable, descripcion, ventero, vdecimal, vfecha, valfanumerico, desistema, modulo)
VALUES('CSIN','DECIMAL|0|-|-|-', null, 0.01, null, '', '1','NOM');

INSERT INTO tbl_variables(id_variable, descripcion, ventero, vdecimal, vfecha, valfanumerico, desistema, modulo)
VALUES('ACA','DECIMAL|0|-|-|-', null, 0.019230, null, '', '1','NOM');

INSERT INTO tbl_variables(id_variable, descripcion, ventero, vdecimal, vfecha, valfanumerico, desistema, modulo)
VALUES('FONAJ','INT|0|-|-|-', 0, null, null, '', '1','NOM');

INSERT INTO tbl_variables(id_variable, descripcion, ventero, vdecimal, vfecha, valfanumerico, desistema, modulo)
VALUES('NOMVALS','BOOL|-|-|-|-', 0, null, null, '', '1','NOM');

INSERT INTO tbl_variables(id_variable, descripcion, ventero, vdecimal, vfecha, valfanumerico, desistema, modulo)
VALUES('COMRETIMSS','DECIMAL|0|-|-|-', null, 0.0, null, '', '1','NOM');

INSERT INTO tbl_variables(id_variable, descripcion, ventero, vdecimal, vfecha, valfanumerico, desistema, modulo)
VALUES('MAX_HE','INT|0|-|-|-', 9, null, null, '', '1','NOM');

INSERT INTO tbl_variables(id_variable, descripcion, ventero, vdecimal, vfecha, valfanumerico, desistema, modulo)
VALUES('MHEE','DECIMAL|0|1|-|-', null, 1.25, null, '', '1','NOM');

INSERT INTO tbl_variables(id_variable, descripcion, ventero, vdecimal, vfecha, valfanumerico, desistema, modulo)
VALUES('FAC_DVD','DECIMAL|0|-|-|-', null, 1.1666, null, '', '1','NOM');

INSERT INTO tbl_variables(id_variable, descripcion, ventero, vdecimal, vfecha, valfanumerico, desistema, modulo)
VALUES('VARISPT','DECIMAL|0|-|-|-', null, 1.00, null, '', '1', 'NOM');   

INSERT INTO tbl_variables(id_variable, descripcion, ventero, vdecimal, vfecha, valfanumerico, desistema, modulo)
VALUES('TBTC-PTU','DECIMAL|0|-|-|-', null, 0.00, null, '', '1', 'NOM');                                                        

INSERT INTO tbl_variables(id_variable, descripcion, ventero, vdecimal, vfecha, valfanumerico, desistema, modulo)
VALUES('VARPTU','DECIMAL|0|-|-|-', null, 0.00, null, '', '1', 'NOM');                                                        

INSERT INTO tbl_variables(id_variable, descripcion, ventero, vdecimal, vfecha, valfanumerico, desistema, modulo)
VALUES('VARPTU-DIA','DECIMAL|0|-|-|-', null, 0.00, null, '', '1', 'NOM');                                                        

INSERT INTO tbl_variables(id_variable, descripcion, ventero, vdecimal, vfecha, valfanumerico, desistema, modulo)
VALUES('BE-PTU','DECIMAL|0|-|-|-', null, 0.00, null, '', '1', 'NOM');                                                        




--@FIN_BLOQUE
CREATE TABLE tbl_nom_calculo_nomina_asist
(
  id_nomina integer NOT NULL,
  id_empleado character(6) NOT NULL,
  id_fechamovimiento timestamp without time zone NOT NULL,
  id_movimiento smallint NOT NULL,
  entrada timestamp without time zone,
  salida timestamp without time zone,
  CONSTRAINT pk_tbl_nom_calculo_nomina_asist PRIMARY KEY (id_nomina, id_empleado, id_fechamovimiento, id_movimiento),
  CONSTRAINT fk_tbl_nom_calculo_nomina_asist_tbl_nom_calculo_nomina FOREIGN KEY (id_nomina)
      REFERENCES tbl_nom_calculo_nomina (id_nomina) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_tbl_nom_calculo_nomina_asist_tbl_nom_masemp FOREIGN KEY (id_empleado)
      REFERENCES tbl_nom_masemp (id_empleado) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_tbl_nom_calculo_nomina_asist_tbl_nom_movimientos FOREIGN KEY (id_movimiento)
      REFERENCES tbl_nom_movimientos (id_movimiento) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE
);

--///////////////////////////////////////////////////////////////////////////////////////////////
--///////// FUNCIONES DE CALCULO DE NOMINA //////////////////////////////////////////////////////
--////////

   

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_nom_calculo_nomina_faltas(
    _tipo smallint,
    _dxincon bit,
    _mesdesc smallint,
    _anodesc smallint,
    _porcentaje numeric,
    _id_empleado character,
    _fecha_desde timestamp without time zone,
    _fecha_hasta timestamp without time zone,
    _salarioporhora numeric,
    _salariodiario numeric,
    _turnoemp smallint,
    _calculomixto bit,
    _salariomixto numeric,
    _fechaingreso timestamp without time zone,
    _castigo_impuntualidad bit)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	-- Variables de regreso
	_TOTAL_FLT numeric(4,2); _TOTAL_IXM numeric(4,2); _TOTAL_IXE numeric(4,2); _TOTAL_IXA numeric(4,2); _result varchar(254);
	_IMPDESC numeric(10,2); _HRS_DESC numeric(6,2); _HRS_FLT numeric(6,2); _HRS_IXM numeric(6,2); _HRS_IXE numeric(6,2); _HRS_IXA numeric(6,2);
	_IMPPORINCON numeric(10,2); _IMPSINPAG numeric(10,2); _HRS_SINPAG numeric(6,2); 
	
	--Variables en declare
	_Permiso_Desde timestamp; _Permiso_Hasta timestamp; 
	_contper smallint; _conttot smallint; _diaper smallint; _diatot smallint; _hoy_es smallint; 
	_HRS_JORNADA numeric(6,2); _DIAS_DESCONTADOS smallint; _PREV_IMPSINPAG numeric(10,2); _PREV_IMPDESC numeric(10,2);
BEGIN
	_TOTAL_FLT := 0.00;
	_TOTAL_IXM := 0.00;
	_TOTAL_IXA := 0.00;
	_TOTAL_IXE := 0.00;
	_IMPDESC := 0.00;
	_IMPSINPAG := 0.00;
	_IMPPORINCON := 0.00;
	_HRS_DESC := 0.00;
	_HRS_FLT := 0.00;
	_HRS_IXM := 0.00;
	_HRS_IXA := 0.00;
	_HRS_IXE := 0.00;

	IF _Tipo = 2 --Es nomina de confianza
	THEN
		-- Primero inserta las asistencias del turno
		_contper := 0;
		_conttot := getfechadiff('day',_Fecha_Desde,_Fecha_Hasta) + 1;
		--raise notice 'total dias %', _conttot;
		
		while _contper < _conttot
		loop
			--_hoy_es = DATEPART(weekday, dateadd(day,_contper,_Fecha_Desde)) 
			_hoy_es := date_part( 'dow',   (_Fecha_Desde + (cast(_contper as text) || ' days')::interval)    ); 
			if _hoy_es = 0 then _hoy_es := 7; end if;
			
			insert into _TMP_CALCULO_NOMINA_ASIST
			select _ID_Empleado, (_Fecha_Desde + (cast(_contper as text) || ' days')::interval), 
						case 	when _hoy_es = 1 and ELunes is null then -4 
									when _hoy_es = 1 and ELunes is not null then -1
									when _hoy_es = 2 and EMartes is null then -4 
									when _hoy_es = 2 and EMartes is not null then -1
									when _hoy_es = 3 and EMiercoles is null then -4 
									when _hoy_es = 3 and EMiercoles is not null then -1
									when _hoy_es = 4 and EJueves is null then -4 
									when _hoy_es = 4 and EJueves is not null then -1
									when _hoy_es = 5 and EViernes is null then -4 
									when _hoy_es = 5 and EViernes is not null then -1
									when _hoy_es = 6 and ESabado is null then -4 
									when _hoy_es = 6 and ESabado is not null then -1
									when _hoy_es = 7 and EDomingo is null then -4 
									when _hoy_es = 7 and EDomingo is not null then -1
									else -4 end,
						case 	when _hoy_es = 1 then ELunes 
										when _hoy_es = 2 then EMartes 
										when _hoy_es = 3 then EMiercoles 
										when _hoy_es = 4 then EJueves 
										when _hoy_es = 5 then EViernes 
										when _hoy_es = 6 then ESabado  
										else EDomingo end, 
							case 	when _hoy_es = 1 then SLunes 
										when _hoy_es = 2 then SMartes 
										when _hoy_es = 3 then SMiercoles 
										when _hoy_es = 4 then SJueves 
										when _hoy_es = 5 then SViernes 
										when _hoy_es = 6 then SSabado  
										else SDomingo end
			from TBL_NOM_TURNOS where ID_Turno = _TurnoEmp;

			_contper := _contper + 1;
		end loop;

		-- Ahora calcula los permisos 
		-- empieza por las faltas. Calcula los dias faltantes.
		-- Ejemplo si el permiso es del 10-ene al 20-ene y la nomina del 1-ene al 15 ene, calcula los dias del 10-ene al 15-ene, 
		--     y los restatnes los calcular? en el periodo de nomina siguiente ( del 16 al 31 de enero )
		
		-- primero copia los permisos de falta a la tabla temporal
		_contper := 1;
		insert into _TMP_PERMISOS (ID_Movimiento, ID_FechaMovimiento, DiasCompletos, FechaHora_Desde, FechaHora_Hasta, Num_de_Dias,	Num_de_Horas, Tiempo_por_pagar)
		select ID_Movimiento, ID_FechaMovimiento, DiasCompletos, FechaHora_Desde, FechaHora_Hasta, Num_de_Dias, Num_de_Horas, Tiempo_por_pagar
		from TBL_NOM_PERMISOS
		where ID_Empleado = _ID_Empleado and ID_Movimiento = -3;
		
		_conttot = (select count(*) from _TMP_PERMISOS);

		while _contper <= _conttot
		loop
			_Permiso_Desde := ( 	select FechaHora_Desde
									from _TMP_PERMISOS
									where ( FechaHora_Hasta >= _Fecha_Desde and FechaHora_Desde <= _Fecha_Hasta and ID_Num = _contper) );
			_Permiso_Hasta := ( 	select FechaHora_Hasta
									from _TMP_PERMISOS
									where ( FechaHora_Hasta >= _Fecha_Desde and FechaHora_Desde <= _Fecha_Hasta and ID_Num = _contper ) );
		
			if(_Permiso_Desde is not null and _Permiso_Hasta is not null and _Permiso_Desde < _Permiso_Hasta)
			then
				if(_Permiso_Desde >= _Fecha_Desde and ( _Permiso_Hasta - '1 day'::interval ) <= _Fecha_Hasta)
				then
					--set _TOTAL_FLT = _TOTAL_FLT +  getfechadiff('day',_Permiso_Desde,(dateadd(day,-1,_Permiso_Hasta)) ) + 1
					_diatot := getfechadiff('day',_Permiso_Desde,( _Permiso_Hasta - '1 day'::interval ) ) + 1;
					_diaper := 0;
					while _diaper < _diatot
					loop
						update _TMP_CALCULO_NOMINA_ASIST
						set ID_Movimiento = -3, Entrada = NULL, Salida = NULL
						where ID_Empleado = ID_Empleado and ID_FechaMovimiento = (_Permiso_Desde + (cast(_diaper as text) || ' days')::interval);
						
						--_hoy_es := DATEPART(weekday, dateadd(day,_diaper,_Permiso_Desde)) 
						_hoy_es := date_part( 'dow',   (_Permiso_Desde + (cast(_diaper as text) || ' days')::interval)    ); 
						if _hoy_es = 0 then _hoy_es := 7; end if;
						
						_TOTAL_FLT := _TOTAL_FLT + 
												case 	when _hoy_es = 1 then round((select HEALunes from TBL_NOM_TURNOS where ID_Turno = _TurnoEmp)/8, 2) 
															when _hoy_es = 2 then round((select HEAMartes from TBL_NOM_TURNOS where ID_Turno = _TurnoEmp)/8, 2) 
															when _hoy_es = 3 then round((select HEAMiercoles from TBL_NOM_TURNOS where ID_Turno = _TurnoEmp)/8, 2) 
															when _hoy_es = 4 then round((select HEAJueves from TBL_NOM_TURNOS where ID_Turno = _TurnoEmp)/8, 2) 
															when _hoy_es = 5 then round((select HEAViernes from TBL_NOM_TURNOS where ID_Turno = _TurnoEmp)/8, 2) 
															when _hoy_es = 6 then round((select HEASabado from TBL_NOM_TURNOS where ID_Turno = _TurnoEmp)/8, 2)  
															else 0.00 
												end;  
							
						_diaper := _diaper + 1;
					end loop;
				elsif(_Permiso_Desde >= _Fecha_Desde and ( _Permiso_Hasta - '1 day'::interval ) > _Fecha_Hasta)
				then
					--set _TOTAL_FLT = _TOTAL_FLT +  getfechadiff('day',_Permiso_Desde,_Fecha_Hasta) + 1
					_diatot := getfechadiff('day',_Permiso_Desde,_Fecha_Hasta) + 1;
					_diaper := 0;
					while _diaper < _diatot
					loop
						update _TMP_CALCULO_NOMINA_ASIST
						set ID_Movimiento = -3, Entrada = NULL, Salida = NULL
						where ID_Empleado = ID_Empleado and ID_FechaMovimiento = (_Permiso_Desde + (cast(_diaper as text) || ' days')::interval);
		
						_hoy_es := date_part( 'dow',   (_Permiso_Desde + (cast(_diaper as text) || ' days')::interval)    ); 
						if _hoy_es = 0 then _hoy_es := 7; end if;
						
						_TOTAL_FLT := _TOTAL_FLT + 
												case 	when _hoy_es = 1 then round((select HEALunes from TBL_NOM_TURNOS where ID_Turno = _TurnoEmp)/8, 2) 
															when _hoy_es = 2 then round((select HEAMartes from TBL_NOM_TURNOS where ID_Turno = _TurnoEmp)/8, 2) 
															when _hoy_es = 3 then round((select HEAMiercoles from TBL_NOM_TURNOS where ID_Turno = _TurnoEmp)/8, 2) 
															when _hoy_es = 4 then round((select HEAJueves from TBL_NOM_TURNOS where ID_Turno = _TurnoEmp)/8, 2) 
															when _hoy_es = 5 then round((select HEAViernes from TBL_NOM_TURNOS where ID_Turno = _TurnoEmp)/8, 2) 
															when _hoy_es = 6 then round((select HEASabado from TBL_NOM_TURNOS where ID_Turno = _TurnoEmp)/8, 2)  
															else 0.00 
												end;  
							
						_diaper := _diaper + 1;
					end loop;
				elsif(_Permiso_Desde < _Fecha_Desde and (_Permiso_Hasta - '1 day'::interval) <= _Fecha_Hasta)
				then
					--set _TOTAL_FLT = _TOTAL_FLT +  getfechadiff('day',_Fecha_Desde,(_Permiso_Hasta - '1 day'::interval)) + 1
					_diatot := getfechadiff('day',_Fecha_Desde,(_Permiso_Hasta - '1 day'::interval)) + 1;
					_diaper := 0;
					while _diaper < _diatot
					loop
						update _TMP_CALCULO_NOMINA_ASIST
						set ID_Movimiento = -3, Entrada = NULL, Salida = NULL
						where ID_Empleado = ID_Empleado and ID_FechaMovimiento = (_Fecha_Desde + (cast(_diaper as text) || ' days')::interval);
		
						--set _hoy_es = DATEPART(weekday, (_Fecha_Desde + (cast(_diaper as text) || ' days')::interval)) 
						_hoy_es := date_part( 'dow',   (_Fecha_Desde + (cast(_diaper as text) || ' days')::interval)    ); 
						if _hoy_es = 0 then _hoy_es := 7; end if;
						
						_TOTAL_FLT := _TOTAL_FLT + 
												case 	when _hoy_es = 1 then round((select HEALunes from TBL_NOM_TURNOS where ID_Turno = _TurnoEmp)/8, 2) 
															when _hoy_es = 2 then round((select HEAMartes from TBL_NOM_TURNOS where ID_Turno = _TurnoEmp)/8, 2) 
															when _hoy_es = 3 then round((select HEAMiercoles from TBL_NOM_TURNOS where ID_Turno = _TurnoEmp)/8, 2) 
															when _hoy_es = 4 then round((select HEAJueves from TBL_NOM_TURNOS where ID_Turno = _TurnoEmp)/8, 2) 
															when _hoy_es = 5 then round((select HEAViernes from TBL_NOM_TURNOS where ID_Turno = _TurnoEmp)/8, 2) 
															when _hoy_es = 6 then round((select HEASabado from TBL_NOM_TURNOS where ID_Turno = _TurnoEmp)/8, 2)  
															else 0.00 
												end;  
							
						_diaper := _diaper + 1;
					end loop;
				elsif(_Permiso_Desde < _Fecha_Desde and (_Permiso_Hasta - '1 day'::interval) > _Fecha_Hasta)
				then
					--set _TOTAL_FLT = _TOTAL_FLT +  getfechadiff('day',_Fecha_Desde,_Fecha_Hasta) + 1
					_diatot = getfechadiff('day',_Fecha_Desde,_Fecha_Hasta) + 1;
					_diaper = 0;
					while _diaper < _diatot
					loop
						update _TMP_CALCULO_NOMINA_ASIST
						set ID_Movimiento = -3, Entrada = NULL, Salida = NULL
						where ID_Empleado = ID_Empleado and ID_FechaMovimiento = (_Fecha_Desde + (cast(_diaper as text) || ' days')::interval);
		
						_hoy_es := date_part( 'dow',  (_Fecha_Desde + (cast(_diaper as text) || ' days')::interval));
						if _hoy_es = 0 then _hoy_es := 7; end if;
						
						_TOTAL_FLT = _TOTAL_FLT + 
												case 	when _hoy_es = 1 then round((select HEALunes from TBL_NOM_TURNOS where ID_Turno = _TurnoEmp)/8, 2) 
															when _hoy_es = 2 then round((select HEAMartes from TBL_NOM_TURNOS where ID_Turno = _TurnoEmp)/8, 2) 
															when _hoy_es = 3 then round((select HEAMiercoles from TBL_NOM_TURNOS where ID_Turno = _TurnoEmp)/8, 2) 
															when _hoy_es = 4 then round((select HEAJueves from TBL_NOM_TURNOS where ID_Turno = _TurnoEmp)/8, 2) 
															when _hoy_es = 5 then round((select HEAViernes from TBL_NOM_TURNOS where ID_Turno = _TurnoEmp)/8, 2) 
															when _hoy_es = 6 then round((select HEASabado from TBL_NOM_TURNOS where ID_Turno = _TurnoEmp)/8, 2)  
															else 0.00 
												end;  
							
						_diaper := _diaper + 1;
					end loop;
				end if;
			end if;
			_contper := _contper + 1;  
		end loop;

		--select * from _TMP_PERMISOS
		truncate table _TMP_PERMISOS  RESTART IDENTITY;
	
	
		-- ahora los de incapacidad por maternidad
		_Permiso_Desde := null;
		_Permiso_Hasta := null;
		
		-- primero copia los permisos de incapacidad por maternidad a la tabla temporal
		_contper := 1;
		insert into _TMP_PERMISOS (ID_Movimiento, ID_FechaMovimiento, DiasCompletos, FechaHora_Desde, FechaHora_Hasta, Num_de_Dias,	Num_de_Horas, Tiempo_por_pagar)
		select ID_Movimiento, ID_FechaMovimiento, DiasCompletos, FechaHora_Desde, FechaHora_Hasta, Num_de_Dias, Num_de_Horas, Tiempo_por_pagar
		from TBL_NOM_PERMISOS
		where ID_Empleado = _ID_Empleado and ID_Movimiento = -11;
		
		_conttot := (select count(*) from _TMP_PERMISOS);

		while _contper <= _conttot
		loop
			_Permiso_Desde := (	 	select FechaHora_Desde
										from _TMP_PERMISOS
										where ( FechaHora_Hasta >= _Fecha_Desde and 
										FechaHora_Desde <= _Fecha_Hasta and ID_Num = _contper) );
			_Permiso_Hasta := ( 	select FechaHora_Hasta
									from _TMP_PERMISOS
									where ( FechaHora_Hasta >= _Fecha_Desde and 
									FechaHora_Desde <= _Fecha_Hasta and ID_Num = _contper ) );
		
			if(_Permiso_Desde is not null and _Permiso_Hasta is not null and _Permiso_Desde < _Permiso_Hasta)
			then
				if(_Permiso_Desde >= _Fecha_Desde and (_Permiso_Hasta - '1 day'::interval) <= _Fecha_Hasta)
				then
					update _TMP_CALCULO_NOMINA_ASIST
					set ID_Movimiento = -11, Entrada = NULL, Salida = NULL
					where ID_Empleado = ID_Empleado and ID_FechaMovimiento between _Permiso_Desde and (_Permiso_Hasta - '1 day'::interval);

					_TOTAL_IXM := _TOTAL_IXM + getfechadiff('day',_Permiso_Desde,(_Permiso_Hasta - '1 day'::interval) ) + 1;
				elsif(_Permiso_Desde >= _Fecha_Desde and (_Permiso_Hasta - '1 day'::interval) > _Fecha_Hasta)
				then
					update _TMP_CALCULO_NOMINA_ASIST
					set ID_Movimiento = -11, Entrada = NULL, Salida = NULL
					where ID_Empleado = ID_Empleado and ID_FechaMovimiento between _Permiso_Desde and _Fecha_Hasta;

					_TOTAL_IXM := _TOTAL_IXM +  getfechadiff('day',_Permiso_Desde,_Fecha_Hasta) + 1;
				elsif(_Permiso_Desde < _Fecha_Desde and (_Permiso_Hasta - '1 day'::interval) <= _Fecha_Hasta)
				then
					update _TMP_CALCULO_NOMINA_ASIST
					set ID_Movimiento = -11, Entrada = NULL, Salida = NULL
					where ID_Empleado = ID_Empleado and ID_FechaMovimiento between _Fecha_Desde and (_Permiso_Hasta - '1 day'::interval);

					_TOTAL_IXM := _TOTAL_IXM +  getfechadiff('day',_Fecha_Desde,(_Permiso_Hasta - '1 day'::interval)) + 1;
				elsif(_Permiso_Desde < _Fecha_Desde and (_Permiso_Hasta - '1 day'::interval) > _Fecha_Hasta)
				then
					update _TMP_CALCULO_NOMINA_ASIST
					set ID_Movimiento = -11, Entrada = NULL, Salida = NULL
					where ID_Empleado = ID_Empleado and ID_FechaMovimiento between _Fecha_Desde and _Fecha_Hasta;

					_TOTAL_IXM := _TOTAL_IXM +  getfechadiff('day',_Fecha_Desde,_Fecha_Hasta) + 1;
				end if;
			end if;
			_contper := _contper + 1;  
		end loop;
		
		truncate table _TMP_PERMISOS RESTART IDENTITY;
		
		-- ahora los de incapacidad por enfermedad
		_Permiso_Desde := null;
		_Permiso_Hasta := null;
		
		-- primero copia los permisos de incapacidad por enfermedad a la tabla temporal
		_contper := 1;
		
		insert into _TMP_PERMISOS (ID_Movimiento, ID_FechaMovimiento, DiasCompletos, FechaHora_Desde, FechaHora_Hasta, Num_de_Dias,	Num_de_Horas, Tiempo_por_pagar)
		select ID_Movimiento, ID_FechaMovimiento, DiasCompletos, FechaHora_Desde, FechaHora_Hasta, Num_de_Dias, Num_de_Horas, Tiempo_por_pagar
		from TBL_NOM_PERMISOS
		where ID_Empleado = _ID_Empleado and ID_Movimiento = -12;
		
		_conttot := (select count(*) from _TMP_PERMISOS);

		while _contper <= _conttot
		loop
			_Permiso_Desde := (	 	select FechaHora_Desde
										from _TMP_PERMISOS
										where ( FechaHora_Hasta >= _Fecha_Desde and 
										FechaHora_Desde <= _Fecha_Hasta and ID_Num = _contper) );
			_Permiso_Hasta := ( 	select FechaHora_Hasta
									from _TMP_PERMISOS
									where ( FechaHora_Hasta >= _Fecha_Desde and 
									FechaHora_Desde <= _Fecha_Hasta and ID_Num = _contper ) );
		
			if(_Permiso_Desde is not null and _Permiso_Hasta is not null and _Permiso_Desde < _Permiso_Hasta)
			then
				if(_Permiso_Desde >= _Fecha_Desde and (_Permiso_Hasta - '1 day'::interval) <= _Fecha_Hasta)
				then
					update _TMP_CALCULO_NOMINA_ASIST
					set ID_Movimiento = -12, Entrada = NULL, Salida = NULL
					where ID_Empleado = ID_Empleado and ID_FechaMovimiento between _Permiso_Desde and (_Permiso_Hasta - '1 day'::interval);

					_TOTAL_IXE := _TOTAL_IXE + getfechadiff('day',_Permiso_Desde,(_Permiso_Hasta - '1 day'::interval) ) + 1;
				elsif(_Permiso_Desde >= _Fecha_Desde and (_Permiso_Hasta - '1 day'::interval) > _Fecha_Hasta)
				then
					update _TMP_CALCULO_NOMINA_ASIST
					set ID_Movimiento = -12, Entrada = NULL, Salida = NULL
					where ID_Empleado = ID_Empleado and ID_FechaMovimiento between _Permiso_Desde and _Fecha_Hasta;

					_TOTAL_IXE := _TOTAL_IXE +  getfechadiff('day',_Permiso_Desde,_Fecha_Hasta) + 1;
				elsif(_Permiso_Desde < _Fecha_Desde and (_Permiso_Hasta - '1 day'::interval) <= _Fecha_Hasta)
				then
					update _TMP_CALCULO_NOMINA_ASIST
					set ID_Movimiento = -12, Entrada = NULL, Salida = NULL
					where ID_Empleado = ID_Empleado and ID_FechaMovimiento between _Fecha_Desde and (_Permiso_Hasta - '1 day'::interval);

					_TOTAL_IXE := _TOTAL_IXE +  getfechadiff('day',_Fecha_Desde,(_Permiso_Hasta - '1 day'::interval)) + 1;
				elsif(_Permiso_Desde < _Fecha_Desde and (_Permiso_Hasta - '1 day'::interval) > _Fecha_Hasta)
				then
					update _TMP_CALCULO_NOMINA_ASIST
					set ID_Movimiento = -12, Entrada = NULL, Salida = NULL
					where ID_Empleado = ID_Empleado and ID_FechaMovimiento between _Fecha_Desde and _Fecha_Hasta;

					_TOTAL_IXE := _TOTAL_IXE +  getfechadiff('day',_Fecha_Desde,_Fecha_Hasta) + 1;
				end if;
			end if;
			_contper := _contper + 1;  
		end loop;
		
		truncate table _TMP_PERMISOS RESTART IDENTITY;
		
		-- ahora los de incapacidad por accidente
		_Permiso_Desde := null;
		_Permiso_Hasta := null;
		
		-- primero copia los permisos de incapacidad por accidente a la tabla temporal
		_contper := 1;
		
		insert into _TMP_PERMISOS (ID_Movimiento, ID_FechaMovimiento, DiasCompletos, FechaHora_Desde, FechaHora_Hasta, Num_de_Dias,	Num_de_Horas, Tiempo_por_pagar)
		select ID_Movimiento, ID_FechaMovimiento, DiasCompletos, FechaHora_Desde, FechaHora_Hasta, Num_de_Dias, Num_de_Horas, Tiempo_por_pagar
		from TBL_NOM_PERMISOS
		where ID_Empleado = _ID_Empleado and ID_Movimiento = -13;
		
		_conttot := (select count(*) from _TMP_PERMISOS);
		
		while _contper <= _conttot
		loop
			_Permiso_Desde := (	 	select FechaHora_Desde
										from _TMP_PERMISOS
										where ( FechaHora_Hasta >= _Fecha_Desde and 
										FechaHora_Desde <= _Fecha_Hasta and ID_Num = _contper) );
			_Permiso_Hasta := ( 	select FechaHora_Hasta
									from _TMP_PERMISOS
									where ( FechaHora_Hasta >= _Fecha_Desde and 
									FechaHora_Desde <= _Fecha_Hasta and ID_Num = _contper ) );
		
			if(_Permiso_Desde is not null and _Permiso_Hasta is not null and _Permiso_Desde < _Permiso_Hasta)
			then
				if(_Permiso_Desde >= _Fecha_Desde and (_Permiso_Hasta - '1 day'::interval) <= _Fecha_Hasta)
				then
					update _TMP_CALCULO_NOMINA_ASIST
					set ID_Movimiento = -13, Entrada = NULL, Salida = NULL
					where ID_Empleado = ID_Empleado and ID_FechaMovimiento between _Permiso_Desde and (_Permiso_Hasta - '1 day'::interval);

					_TOTAL_IXA := _TOTAL_IXA + getfechadiff('day',_Permiso_Desde,(_Permiso_Hasta - '1 day'::interval) ) + 1;
				elsif(_Permiso_Desde >= _Fecha_Desde and (_Permiso_Hasta - '1 day'::interval) > _Fecha_Hasta)
				then
					update _TMP_CALCULO_NOMINA_ASIST
					set ID_Movimiento = -13, Entrada = NULL, Salida = NULL
					where ID_Empleado = ID_Empleado and ID_FechaMovimiento between _Permiso_Desde and _Fecha_Hasta;

					_TOTAL_IXA := _TOTAL_IXA +  getfechadiff('day',_Permiso_Desde,_Fecha_Hasta) + 1;
				elsif(_Permiso_Desde < _Fecha_Desde and (_Permiso_Hasta - '1 day'::interval) <= _Fecha_Hasta)
				then
					update _TMP_CALCULO_NOMINA_ASIST
					set ID_Movimiento = -13, Entrada = NULL, Salida = NULL
					where ID_Empleado = ID_Empleado and ID_FechaMovimiento between _Fecha_Desde and (_Permiso_Hasta - '1 day'::interval);

					_TOTAL_IXA := _TOTAL_IXA +  getfechadiff('day',_Fecha_Desde,(_Permiso_Hasta - '1 day'::interval)) + 1;
				elsif(_Permiso_Desde < _Fecha_Desde and (_Permiso_Hasta - '1 day'::interval) > _Fecha_Hasta)
				then
					update _TMP_CALCULO_NOMINA_ASIST
					set ID_Movimiento = -13, Entrada = NULL, Salida = NULL
					where ID_Empleado = ID_Empleado and ID_FechaMovimiento between _Fecha_Desde and _Fecha_Hasta;

					_TOTAL_IXA := _TOTAL_IXA +  getfechadiff('day',_Fecha_Desde,_Fecha_Hasta) + 1;
				end if;
			end if;
			_contper := _contper + 1;  
		end loop;
		-- fin de calculo nomina de confianza
	ELSE
		-- calcula las faltas y las incapacidades y asistencias de nomina de los de la nomina estricta
		-- comienza por el calculo de las asistencias y faltas o incapacidades
		insert into _TMP_CALCULO_NOMINA_ASIST
		select _ID_Empleado, ID_FechaMovimiento, ID_Movimiento, Entrada, case when Salida2 is not null then Salida2 else Salida end
		from TBL_NOM_DIARIO_DET 
		where ID_Empleado = _ID_Empleado and ID_FechaMovimiento between _Fecha_Desde and _Fecha_Hasta and 
			( ID_Movimiento = -1 or ID_Movimiento = -2 or ID_Movimiento = -3 or ID_Movimiento = -4  or 
				ID_Movimiento = -5 or ID_Movimiento = -7 or ID_Movimiento = -9 or ID_Movimiento = -11 or 
				ID_Movimiento = -12 or ID_Movimiento = -13 or ID_Movimiento = -16 or ID_Movimiento = -18 or 
				ID_Movimiento = -20 or ID_Movimiento = -26 );

		-- empieza por calcular las horas perdidas, ( las de retraso o por irse antes )
		_DIAS_DESCONTADOS := ( 	select count(*) 
									from TBL_NOM_DIARIO_DET 
									where ID_Empleado = _ID_Empleado and ID_FechaMovimiento between _Fecha_Desde and _Fecha_Hasta and ( ID_Movimiento = -2 or ID_Movimiento = -25 ) );
												
		_HRS_JORNADA := 	case 	when ( 	select sum(HNA)
											from TBL_NOM_DIARIO_DET 
											where ID_Empleado = _ID_Empleado and ID_FechaMovimiento between _Fecha_Desde and _Fecha_Hasta and ( ID_Movimiento = -2 or ID_Movimiento = -25 ) ) is null
									then 0.00 
									else	(	select sum(HNA)
												from TBL_NOM_DIARIO_DET 
												where ID_Empleado = _ID_Empleado and ID_FechaMovimiento between _Fecha_Desde and _Fecha_Hasta and ( ID_Movimiento = -2 or ID_Movimiento = -25 ) )
							end;
		_HRS_DESC := case 	when ( 	select sum(HNP)
									from TBL_NOM_DIARIO_DET 
									where ID_Empleado = _ID_Empleado and ID_FechaMovimiento between _Fecha_Desde and _Fecha_Hasta and ( ID_Movimiento = -2 or ID_Movimiento = -25 ) ) is null
							then 0.00 
							else ( 	select sum(HNP)
									from TBL_NOM_DIARIO_DET 
									where ID_Empleado = _ID_Empleado and ID_FechaMovimiento between _Fecha_Desde and _Fecha_Hasta and ( ID_Movimiento = -2 or ID_Movimiento = -25 ) ) 
						end;
		_HRS_SINPAG := case 	when ( 	select sum(HNA)
										from TBL_NOM_DIARIO_DET 
										where ID_Empleado = _ID_Empleado and ID_FechaMovimiento between _Fecha_Desde and _Fecha_Hasta and ( ID_Movimiento = -17 or ID_Movimiento = -23 or ID_Movimiento = -24 ) ) is null
								then 0.00 
								else ( 	select sum(HNA)
										from TBL_NOM_DIARIO_DET 
										where ID_Empleado = _ID_Empleado and ID_FechaMovimiento between _Fecha_Desde and _Fecha_Hasta and ( ID_Movimiento = -17 or ID_Movimiento = -23 or ID_Movimiento = -24 ) ) 
						end;
		_PREV_IMPDESC := case 	when ( 	select sum(HNP)
											from TBL_NOM_DIARIO_DET 
											where ID_Empleado = _ID_Empleado and ID_FechaMovimiento between _Fecha_Desde and _Fecha_Hasta and ( ID_Movimiento = -2 or ID_Movimiento = -25 ) ) is null
									then 0.00 
									else	(	select SUM( round( (((HNA / 8) * _SalarioPorHora) * HNP),2) ) -- (HNA / 8) as Factor, ((HNA / 8) * _SalarioPorHora) as SPH, round( (((HNA / 8) * _SalarioPorHora) * HNP),2) as TOTAL
												from TBL_NOM_DIARIO_DET 
												where ID_Empleado = _ID_Empleado and ID_FechaMovimiento between _Fecha_Desde and _Fecha_Hasta and ( ID_Movimiento = -2 or ID_Movimiento = -25 ) )
							end;

		_PREV_IMPSINPAG := case 	when ( 	select sum(HNA)
											from TBL_NOM_DIARIO_DET 
											where ID_Empleado = _ID_Empleado and ID_FechaMovimiento between _Fecha_Desde and _Fecha_Hasta and ( ID_Movimiento = -17 or ID_Movimiento = -23 or ID_Movimiento = -24 ) ) is null
									then 0.00 
									else	case 	when _DIAS_DESCONTADOS > 0 
													then (	select SUM( round( (((_HRS_JORNADA / _DIAS_DESCONTADOS / 8) * _SalarioPorHora) * HNA),2) )
															from TBL_NOM_DIARIO_DET 
															where ID_Empleado = _ID_Empleado and ID_FechaMovimiento between _Fecha_Desde and _Fecha_Hasta and ( ID_Movimiento = -17 or ID_Movimiento = -23 or ID_Movimiento = -24 ) )
													else 0.00
											end
							end;

		-- el descuento por retardos se nulifica en caso de que existan descuentos por permisos de Descuentos Sin Pago De Tiempo
		_IMPDESC :=  ( CASE WHEN ( _PREV_IMPDESC - _PREV_IMPSINPAG ) < 0 THEN 0.00 ELSE ( _PREV_IMPDESC - _PREV_IMPSINPAG ) END );
		_IMPSINPAG := ( CASE WHEN ( _PREV_IMPDESC - _PREV_IMPSINPAG ) < 0 THEN _PREV_IMPDESC ELSE _PREV_IMPSINPAG END );

		-- ahora calcula faltas e incapacidades
		_TOTAL_FLT := case when ( 	select sum(HNP)
									from TBL_NOM_DIARIO_DET 
									where ID_Empleado = _ID_Empleado and ID_FechaMovimiento between _Fecha_Desde and _Fecha_Hasta and ID_Movimiento = -3 ) is null
							then 0.00 
							else round((
										( 	select sum(HNP)
											from TBL_NOM_DIARIO_DET 
											where ID_Empleado = _ID_Empleado and ID_FechaMovimiento between _Fecha_Desde and _Fecha_Hasta and ID_Movimiento = -3 ) / 8),2)
						end;

		_HRS_FLT := case when ( 	select sum(HNP)
								from TBL_NOM_DIARIO_DET 
								where ID_Empleado = _ID_Empleado and ID_FechaMovimiento between _Fecha_Desde and _Fecha_Hasta and ID_Movimiento = -3 ) is null
						then 0.00 
						else ( 	select sum(HNP)
								from TBL_NOM_DIARIO_DET 
								where ID_Empleado = _ID_Empleado and ID_FechaMovimiento between _Fecha_Desde and _Fecha_Hasta and ID_Movimiento = -3 ) 
					end;
		_TOTAL_IXM := case when ( 	select sum(HNP)
									from TBL_NOM_DIARIO_DET 
									where ID_Empleado = _ID_Empleado and ID_FechaMovimiento between _Fecha_Desde and _Fecha_Hasta and ID_Movimiento = -11 ) is null
							then 0.00 
							else round((
											( 	select sum(HNP)
												from TBL_NOM_DIARIO_DET 
												where ID_Empleado = _ID_Empleado and ID_FechaMovimiento between _Fecha_Desde and _Fecha_Hasta and ID_Movimiento = -11 ) / 8),2)
						end;
		_HRS_IXM := case when ( 	select sum(HNP)
									from TBL_NOM_DIARIO_DET 
									where ID_Empleado = _ID_Empleado and ID_FechaMovimiento between _Fecha_Desde and _Fecha_Hasta and ID_Movimiento = -11 ) is null
						then 0.00 
						else ( 	select sum(HNP)
								from TBL_NOM_DIARIO_DET 
								where ID_Empleado = _ID_Empleado and ID_FechaMovimiento between _Fecha_Desde and _Fecha_Hasta and ID_Movimiento = -11 ) 
					end;
		_TOTAL_IXE := case when ( 	select sum(HNP)
									from TBL_NOM_DIARIO_DET 
									where ID_Empleado = _ID_Empleado and ID_FechaMovimiento between _Fecha_Desde and _Fecha_Hasta and ID_Movimiento = -12 ) is null
							then 0.00 
							else round((
										( 	select sum(HNP)
											from TBL_NOM_DIARIO_DET 
											where ID_Empleado = _ID_Empleado and ID_FechaMovimiento between _Fecha_Desde and _Fecha_Hasta and ID_Movimiento = -12 ) / 8),2)
					end;
		_HRS_IXE := case when ( 	select sum(HNP)
															from TBL_NOM_DIARIO_DET 
															where ID_Empleado = _ID_Empleado and ID_FechaMovimiento between _Fecha_Desde and _Fecha_Hasta and ID_Movimiento = -12 ) is null
											then 0.00 
											else ( 	select sum(HNP)
															from TBL_NOM_DIARIO_DET 
															where ID_Empleado = _ID_Empleado and ID_FechaMovimiento between _Fecha_Desde and _Fecha_Hasta and ID_Movimiento = -12 ) 
											end;
		_TOTAL_IXA := case when ( 	select sum(HNP)
															from TBL_NOM_DIARIO_DET 
															where ID_Empleado = _ID_Empleado and ID_FechaMovimiento between _Fecha_Desde and _Fecha_Hasta and ID_Movimiento = -13 ) is null
											then 0.00 
											else round((
													( 	select sum(HNP)
															from TBL_NOM_DIARIO_DET 
															where ID_Empleado = _ID_Empleado and ID_FechaMovimiento between _Fecha_Desde and _Fecha_Hasta and ID_Movimiento = -13 ) / 8),2)
											end;
		_HRS_IXA := case when ( 	select sum(HNP)
									from TBL_NOM_DIARIO_DET 
									where ID_Empleado = _ID_Empleado and ID_FechaMovimiento between _Fecha_Desde and _Fecha_Hasta and ID_Movimiento = -13 ) is null
						then 0.00 
						else ( 	select sum(HNP)
								from TBL_NOM_DIARIO_DET 
								where ID_Empleado = _ID_Empleado and ID_FechaMovimiento between _Fecha_Desde and _Fecha_Hasta and ID_Movimiento = -13 ) 
					end;

		-- ahora calcula el importe por inconsistencias
		IF _DXIncon = '1' and _Castigo_Impuntualidad = '1'
		THEN
			--print 'Inconcistencias'
			IF date_part('year',_FechaIngreso) > _AnoDesc or ( date_part('year',_FechaIngreso) = _AnoDesc and date_part('month',_FechaIngreso) > _MesDesc ) 
			THEN
				_IMPPORINCON = 0.00;
			ELSE
				CREATE LOCAL TEMPORARY TABLE _TMP_INCONSIS (
					ID_FechaMovimiento timestamp NOT NULL ,
					Incon smallint NOT NULL 
				);

				insert into _TMP_INCONSIS 
				select dd.ID_FechaMovimiento, 
							case when 
								( select sum(HNA) from TBL_NOM_DIARIO_DET
									where ID_FechaMovimiento = dd.ID_FechaMovimiento and 
												ID_Empleado = _ID_Empleado and 
												( ID_Movimiento = -15 or ID_Movimiento = -17 or ID_Movimiento = -19 or ID_Movimiento = -30 or ID_Movimiento = -31 or ID_Movimiento = -32 or 
													ID_Movimiento = -21 or ID_Movimiento = -22 or ID_Movimiento = -23 or ID_Movimiento = -24 )   ) is null then 1
									when		dd.HNP -  
								( select sum(HNA) from TBL_NOM_DIARIO_DET
									where ID_FechaMovimiento = dd.ID_FechaMovimiento and 
												ID_Empleado = _ID_Empleado and 
												( ID_Movimiento = -15 or ID_Movimiento = -17 or ID_Movimiento = -19 or ID_Movimiento = -30 or ID_Movimiento = -31 or ID_Movimiento = -32 or 
													ID_Movimiento = -21 or ID_Movimiento = -22 or ID_Movimiento = -23 or ID_Movimiento = -24 )   ) > 0 then 1 
									else 0 
							end
				from TBL_NOM_DIARIO_DET dd
				where ID_Empleado = _ID_Empleado and date_part('month',ID_FechaMovimiento) = _MesDesc and 
							date_part('year',ID_FechaMovimiento) = _AnoDesc and ( ID_Movimiento = -2 or (ID_Movimiento = -25 and HNP > 0.00));
			
				insert into _TMP_INCONSIS 
				select dd.ID_FechaMovimiento, 
							case when 
								( select count(*) from TBL_NOM_DIARIO_DET
									where ID_FechaMovimiento = dd.ID_FechaMovimiento and 
												ID_Empleado = _ID_Empleado and 
												 ID_Movimiento = -18  ) = 0 then 1
								else 0 
							end
				from TBL_NOM_DIARIO_DET dd
				where ID_Empleado = _ID_Empleado and date_part('month',ID_FechaMovimiento) = _MesDesc and 
							date_part('year',ID_FechaMovimiento) = _AnoDesc and ID_Movimiento = -3;
							
				_IMPPORINCON := CASE WHEN ( select sum(Incon) from _TMP_INCONSIS ) is null 
										THEN 0.00
										ELSE ROUND( _Porcentaje * (case when _CalculoMixto = '0' then _SalarioDiario else _SalarioMixto end) * (select sum(Incon) from _TMP_INCONSIS), 2)
									END;

				DROP TABLE _TMP_INCONSIS;  
			END IF;
		END IF;
	END IF;

	truncate table _TMP_PERMISOS RESTART IDENTITY;
	--truncate table _TMP_CALCULO_NOMINA_ASIST

	RETURN QUERY
	SELECT	_TOTAL_FLT, _TOTAL_IXM, _TOTAL_IXE, _TOTAL_IXA, _result,
			_IMPDESC, _HRS_DESC, _HRS_FLT, _HRS_IXM, _HRS_IXE, _HRS_IXA,
			_IMPPORINCON, _IMPSINPAG, _HRS_SINPAG;

END
$BODY$
  LANGUAGE plpgsql;
  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_nom_calculo_nomina_horas_extras(
    _tipo smallint,
    _id_empleado character,
    _fecha_desde timestamp without time zone,
    _fecha_hasta timestamp without time zone,
    _hepf bit,
    _maxhe smallint)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_TOTAL_HE numeric(6,2); _TOTAL_HF numeric(6,2); _TOTAL_HT numeric(6,2); _TOTAL_HD numeric(6,2); _DiasHorasExtras smallint;

	_daynum smallint; _semini smallint; _semfin smallint; _dayini smallint; _dayfin smallint; _contsem smallint; 
	_fechasemini timestamp; _fechasemfin timestamp; _fechasemaux timestamp; _movhea smallint; 
	_LUN_Tot numeric(4,2); _MAR_Tot numeric(4,2); _MIE_Tot numeric(4,2); _JUE_Tot numeric(4,2); _VIE_Tot numeric(4,2); _SAB_Tot numeric(4,2); _DOM_Tot numeric(4,2); 
	_LUN_HE numeric(4,2); _MAR_HE numeric(4,2); _MIE_HE numeric(4,2); _JUE_HE numeric(4,2); _VIE_HE numeric(4,2); _SAB_HE numeric(4,2); _DOM_HE numeric(4,2); 
	_LUN_HT numeric(4,2); _MAR_HT numeric(4,2); _MIE_HT numeric(4,2); _JUE_HT numeric(4,2); _VIE_HT numeric(4,2); _SAB_HT numeric(4,2); _DOM_HT numeric(4,2);
	_LUN_Fecha timestamp; _MAR_Fecha timestamp; _MIE_Fecha timestamp; _JUE_Fecha timestamp; _VIE_Fecha timestamp; _SAB_Fecha timestamp; _DOM_Fecha timestamp;
	_LUN_M3 smallint; _MAR_M3 smallint; _MIE_M3 smallint; _JUE_M3 smallint; _VIE_M3 smallint; _SAB_M3 smallint;
BEGIN
	_movhea := -14; --(select ID_Movimiento from TBL_MOVIMIENTOS where ID_Movimiento = -14) -- si es null debera rechazar la nomina

	_TOTAL_HE := 0.00;
	_TOTAL_HF := 0.00;
	_TOTAL_HD := 0.00;
	_TOTAL_HT := 0.00;
	_DiasHorasExtras := 0;

	IF _Tipo = 2 -- REVISA LOS DE LA NOMINA DE CONFIANZA
	THEN
		IF _MaxHE > 0 -- Si se especifica la variable de Maximo de horas extras acumuladas, significa que va a hacer el proceso simple del calculo de horas extras 
		THEN
			_TOTAL_HE := case when (	select sum(Num_de_Horas) 
																	from TBL_NOM_PERMISOS 
																	where ID_Empleado = _ID_Empleado and 
																				ID_Movimiento = _movhea and 
																				ID_FechaMovimiento between  _Fecha_Desde and _Fecha_Hasta ) is null
													then 0
													else	(	select sum(Num_de_Horas) 
																	from TBL_NOM_PERMISOS 
																	where ID_Empleado = _ID_Empleado and 
																				ID_Movimiento = _movhea and 
																				ID_FechaMovimiento between  _Fecha_Desde and _Fecha_Hasta )
								
													end;
			
		ELSE
			--set DATEFIRST 1
			_semini := date_part('week',_Fecha_Desde);
			_semfin := date_part('week',_Fecha_Hasta);
			
			if _semini > _semfin -- ser? mayor la semana inicial cuando es del a?o pasado y la final del a?o siguiente Ejem 29-12-2004 a 04-01-2005
			then
				_semini := ( _semfin - 1 );
			end if;
			
			_dayini := date_part('dow',_Fecha_Desde); if _dayini = 0 then _dayini := 7; end if;
			_dayfin := date_part('dow',_Fecha_Hasta); if _dayfin = 0 then _dayfin := 7; end if;

			_contsem := _semini;
		
			--primero llena toda la estructura de las horas del periodo de nomina
			while(_contsem <= _semfin) -- controla el numero de semanas en la nomina de la semana 3 a la 4 por ejemplo
			loop
				if _contsem = _semini
				then
					_daynum := _dayini;
					_fechasemini := ( _Fecha_Desde - (cast((_daynum -1) as text) || ' days')::interval); --dateadd(day, -(_daynum -1), _Fecha_Desde)
					_fechasemfin := ( _Fecha_Desde + (cast((7 - _daynum) as text) || ' days')::interval); --dateadd(day, (7 - _daynum), _Fecha_Desde)
				elsif _contsem = _semfin
				then
					_daynum := _dayfin;
					_fechasemini := ( _Fecha_Hasta - (cast((_daynum -1) as text) || ' days')::interval); --dateadd(day, -(_daynum -1), _Fecha_Hasta)
					_fechasemfin := ( _Fecha_Hasta + (cast((7 - _daynum) as text) || ' days')::interval); --dateadd(day, (7 - _daynum), _Fecha_Hasta)
				else
					_daynum := _dayini;
					_fechasemaux := ( _Fecha_Desde + (cast(((_contsem - _semini)*7) as text) || ' days')::interval); --dateadd(day, ((_contsem - _semini)*7), _Fecha_Desde);
					_fechasemini := ( _fechasemaux - (cast((_daynum -1) as text) || ' days')::interval); --dateadd(day, -(_daynum -1), fechasemaux );
					_fechasemfin := ( _fechasemaux + (cast((7 - _daynum) as text) || ' days')::interval); --dateadd(day, (7 - _daynum), fechasemaux);
				end if;
		
				_JUE_M3 := 0;
				_VIE_M3 := 0;
				_SAB_M3 := 0;
			
				_LUN_Fecha := _fechasemini;
				_LUN_Tot := ( 	select sum(Num_de_Horas) 
													from TBL_NOM_PERMISOS 
													where ID_Empleado = _ID_Empleado and 
																	ID_Movimiento = _movhea and 
																					ID_FechaMovimiento = _LUN_Fecha );
				if _LUN_Tot is not null
				then
					_JUE_M3 := _JUE_M3 + 1;
				end if;
			
				_MAR_Fecha := _fechasemini + '1 day'::interval; --dateadd(day,1,_fechasemini)
				_MAR_Tot := ( 	select sum(Num_de_Horas) 
													from TBL_NOM_PERMISOS 
													where ID_Empleado = _ID_Empleado and 
																	ID_Movimiento = _movhea and 
																					ID_FechaMovimiento = _MAR_Fecha );
				if _MAR_Tot is not null
				then
					_JUE_M3 := _JUE_M3 + 1;
				end if;
			
				_MIE_Fecha := _fechasemini + '2 days'::interval; --dateadd(day,2,_fechasemini)
				_MIE_Tot := ( 	select sum(Num_de_Horas) 
													from TBL_NOM_PERMISOS 
													where ID_Empleado = _ID_Empleado and 
																	ID_Movimiento = _movhea and 
																					ID_FechaMovimiento = _MIE_Fecha );
				if _MIE_Tot is not null
				then
					_JUE_M3 = _JUE_M3 + 1;
				end if;
				
				_JUE_Fecha := _fechasemini + '3 days'::interval; --dateadd(day,3,_fechasemini) 
				_JUE_Tot := ( 	select sum(Num_de_Horas) 
													from TBL_NOM_PERMISOS 
													where ID_Empleado = _ID_Empleado and 
																	ID_Movimiento = _movhea and 
																					ID_FechaMovimiento = _JUE_Fecha );
				if _JUE_Tot is not null
				then
					_VIE_M3 := _JUE_M3 + 1;
				else
					_VIE_M3 := _JUE_M3;
				end if;
			
				_VIE_Fecha := _fechasemini + '4 days'::interval; --dateadd(day,4,_fechasemini) 
				_VIE_Tot = ( 	select sum(Num_de_Horas) 
													from TBL_NOM_PERMISOS 
													where ID_Empleado = _ID_Empleado and 
																	ID_Movimiento = _movhea and 
																					ID_FechaMovimiento = _VIE_Fecha );
				if _VIE_Tot is not null
				then
					_SAB_M3 := _VIE_M3 + 1;
				else
					_SAB_M3 := _VIE_M3;
				end if;
				
				_SAB_Fecha := _fechasemini + '5 days'::interval; --dateadd(day,5,_fechasemini) 
				_SAB_Tot := ( 	select sum(Num_de_Horas) 
													from TBL_NOM_PERMISOS 
													where ID_Empleado = _ID_Empleado and 
																	ID_Movimiento = _movhea and 
																					ID_FechaMovimiento = _SAB_Fecha );
			
				_DOM_Fecha := _fechasemfin; 
				_DOM_Tot := ( 	select sum(Num_de_Horas) 
													from TBL_NOM_PERMISOS 
													where ID_Empleado = _ID_Empleado and 
																	ID_Movimiento = _movhea and 
																					ID_FechaMovimiento = _DOM_Fecha );
				
				_LUN_HE := case when _LUN_Tot is null then 0 else case when _LUN_Tot > 3 then 3 else _LUN_Tot end end;
				_LUN_HT := case when _LUN_Tot is null then 0 else case when _LUN_Tot > 3 then _LUN_Tot - 3 else 0 end end;
				if _LUN_Tot is not null then _DiasHorasExtras := _DiasHorasExtras + 1; end if; 
				_MAR_HE := case when _MAR_Tot is null then 0 else case when _MAR_Tot > 3 then 3 else _MAR_Tot end end;
				_MAR_HT := case when _MAR_Tot is null then 0 else case when _MAR_Tot > 3 then _MAR_Tot - 3 else 0 end end;
				if _MAR_Tot is not null then _DiasHorasExtras := _DiasHorasExtras + 1; end if;
				_MIE_HE := case when _MIE_Tot is null then 0 else case when _MIE_Tot > 3 then 3 else _MIE_Tot end end;
				_MIE_HT := case when _MIE_Tot is null then 0 else case when _MIE_Tot > 3 then _MIE_Tot - 3 else 0 end end;
				if _MIE_Tot is not null then _DiasHorasExtras := _DiasHorasExtras + 1; end if;
				_JUE_HE := case when _JUE_Tot is null then 0 else 
												case 	when _JUE_M3 >= 3 then 0  
															when _JUE_Tot > 3 then 3 else _JUE_Tot end end;
				_JUE_HT := case when _JUE_Tot is null then 0 else 
												case 	when _JUE_M3 >= 3 then _JUE_Tot   
															when _JUE_Tot > 3 then _JUE_Tot - 3 else 0 end end;
				if _JUE_Tot is not null then _DiasHorasExtras := _DiasHorasExtras + 1; end if;
				_VIE_HE := case when _VIE_Tot is null then 0 else 
												case 	when _VIE_M3 >= 3 then 0  
															when _VIE_Tot > 3 then 3 else _VIE_Tot end end;
				_VIE_HT := case when _VIE_Tot is null then 0 else 
												case 	when _VIE_M3 >= 3 then _VIE_Tot   
															when _VIE_Tot > 3 then _VIE_Tot - 3 else 0 end end;
				if _VIE_Tot is not null then _DiasHorasExtras := _DiasHorasExtras + 1; end if;
				_SAB_HE :=  case when _SAB_Tot is null then 0 else 
												case 	when _SAB_M3 >= 3 then 0  
															when _SAB_Tot > 3 then 3 else _SAB_Tot end end;
				_SAB_HT := case when _SAB_Tot is null then 0 else 
												case 	when _SAB_M3 >= 3 then _SAB_Tot   
															when _SAB_Tot > 3 then _SAB_Tot - 3 else 0 end end;
				if _SAB_Tot is not null then _DiasHorasExtras := _DiasHorasExtras + 1; end if;
				-- asigna las horas domingo
				_DOM_HE := case when _DOM_Tot is null then 0 else _DOM_Tot end;
				_DOM_HT := 0;
				if _DOM_Tot is not null then _DiasHorasExtras := _DiasHorasExtras + 1; end if;
				
				if(_LUN_Fecha >= _Fecha_Desde and _LUN_Fecha <= _Fecha_Hasta)
				then	
					_TOTAL_HE := _TOTAL_HE + _LUN_HE;
					_TOTAL_HT := _TOTAL_HT + _LUN_HT;
				end if;
				if(_MAR_Fecha >= _Fecha_Desde and _MAR_Fecha <= _Fecha_Hasta)
				then	
					_TOTAL_HE := _TOTAL_HE + _MAR_HE;
					_TOTAL_HT := _TOTAL_HT + _MAR_HT;
				end if;
				if(_MIE_Fecha >= _Fecha_Desde and _MIE_Fecha <= _Fecha_Hasta)
				then	
					_TOTAL_HE := _TOTAL_HE + _MIE_HE;
					_TOTAL_HT := _TOTAL_HT + _MIE_HT;
				end if;
				if(_JUE_Fecha >= _Fecha_Desde and _JUE_Fecha <= _Fecha_Hasta)
				then	
					_TOTAL_HE := _TOTAL_HE + _JUE_HE;
					_TOTAL_HT := _TOTAL_HT + _JUE_HT;
				end if;
				if(_VIE_Fecha >= _Fecha_Desde and _VIE_Fecha <= _Fecha_Hasta)
				then	
					_TOTAL_HE := _TOTAL_HE + _VIE_HE;
					_TOTAL_HT := _TOTAL_HT + _VIE_HT;
				end if;
				if(_SAB_Fecha >= _Fecha_Desde and _SAB_Fecha <= _Fecha_Hasta)
				then	
					_TOTAL_HE := _TOTAL_HE + _SAB_HE;
					_TOTAL_HT := _TOTAL_HT + _SAB_HT;
				end if;
				if(_DOM_Fecha >= _Fecha_Desde and _DOM_Fecha <= _Fecha_Hasta)
				then
					_TOTAL_HD := _TOTAL_HD + _DOM_HE;
				end if;
			
			
				--select _LUN_Fecha as LUN_HE, _MAR_Fecha as MAR_HE, _MIE_Fecha as MIE_HE, _JUE_Fecha as JUE_HE, 
					--				_VIE_Fecha as VIE_HE, _SAB_Fecha as SAB_HE, _DOM_Fecha as DOM_HE
			
				--select _LUN_HE as LUN_HE, _LUN_HF as LUN_F, _MAR_HE as MAR_HE, _MAR_HF as MAR_F, _MIE_HE as MIE_HE, _MIE_HF as MIE_F,
					--			_JUE_HE as JUE_HE, _JUE_HF as JUE_F, _VIE_HE as VIE_HE, _VIE_HF as VIE_F, _SAB_HE as SAB_HE, _SAB_HF as SAB_F,
						--			_DOM_HE as DOM_HE, _DOM_HF as DOM_F
			
				--select _daynum as DIA, _contsem as Semana, _fechasemini as INI, _fechasemfin as FIN
			
				_contsem := _contsem + 1;
			
			end loop;
		END IF;
		-- fin calculo de nomina de confianza
	ELSE
		IF _MaxHE > 0 -- Si se especifica la variable de Maximo de horas extras acumuladas, significa que va a hacer el proceso simple del calculo de horas extras 
		THEN
			_TOTAL_HE := case when ( 	select sum(HNA) 
																		from TBL_NOM_DIARIO_DET 
																		where ID_Empleado = _ID_Empleado and 
																					ID_Movimiento = _movhea and 
																					ID_FechaMovimiento between  _Fecha_Desde and _Fecha_Hasta ) is null
													then 0
													else	( 	select sum(HNA) 
																		from TBL_NOM_DIARIO_DET 
																		where ID_Empleado = _ID_Empleado and 
																					ID_Movimiento = _movhea and 
																					ID_FechaMovimiento between  _Fecha_Desde and _Fecha_Hasta )
								
						end;
		ELSE
			--SET DATEFIRST 1
			--set DATEFIRST 1
			_semini := date_part('week',_Fecha_Desde);
			_semfin := date_part('week',_Fecha_Hasta);

			if _semini > _semfin -- ser? mayor la semana inicial cuando es del a?o pasado y la final del a?o siguiente Ejem 29-12-2004 a 04-01-2005
			then
				_semini := ( _semfin - 1 );
			end if;
			
			_dayini := date_part('dow',_Fecha_Desde); if _dayini = 0 then _dayini := 7; end if;
			_dayfin := date_part('dow',_Fecha_Hasta); if _dayfin = 0 then _dayfin := 7; end if;

			raise notice 'semini % semfin %           dayini  % dayfin %  ',_semini,_semfin, _dayini, _dayfin; 
			
			_contsem := _semini;
			
			--primero llena toda la estructura de las horas del periodo de nomina
			while(_contsem <= _semfin) -- controla el numero de semanas en la nomina de la semana 3 a la 4 por ejemplo
			loop
				if _contsem = _semini
				then
					_daynum := _dayini;
					_fechasemini := ( _Fecha_Desde - (cast((_daynum -1) as text) || ' days')::interval); --dateadd(day, -(_daynum -1), _Fecha_Desde)
					_fechasemfin := ( _Fecha_Desde + (cast((7 - _daynum) as text) || ' days')::interval); --dateadd(day, (7 - _daynum), _Fecha_Desde)
				elsif _contsem = _semfin
				then
					_daynum := _dayfin;
					_fechasemini := ( _Fecha_Hasta - (cast((_daynum -1) as text) || ' days')::interval); --dateadd(day, -(_daynum -1), _Fecha_Hasta)
					_fechasemfin := ( _Fecha_Hasta + (cast((7 - _daynum) as text) || ' days')::interval); --dateadd(day, (7 - _daynum), _Fecha_Hasta)
				else
					_daynum := _dayini;
					_fechasemaux := ( _Fecha_Desde + (cast(((_contsem - _semini)*7) as text) || ' days')::interval); --dateadd(day, ((_contsem - _semini)*7), _Fecha_Desde);
					_fechasemini := ( _fechasemaux - (cast((_daynum -1) as text) || ' days')::interval); --dateadd(day, -(_daynum -1), fechasemaux );
					_fechasemfin := ( _fechasemaux + (cast((7 - _daynum) as text) || ' days')::interval); --dateadd(day, (7 - _daynum), fechasemaux);
				end if;
				
				--select _daynum as DAYNUM, _contsem as CONTSEM, _fechasemini as FECHASEMINI, _fechasemfin as FECHASEMFIN
				--select _semini as SEMINI, _semfin as SEMFIN, _dayini as DIAINI, _dayfin as DIAFIN, _daynum as DAYNUM, 
					--_fechasemini as FECHASEMINI, _fechasemfin as FECHASEMFIN 
		
				_SAB_M3 := 0;
				_LUN_M3 := 0;
				_MAR_M3 := 0;
			
				_MIE_Fecha := _fechasemini;
				_MIE_Tot := ( 	select sum(HNA) 
													from TBL_NOM_DIARIO_DET 
													where ID_Empleado = _ID_Empleado and 
																	ID_Movimiento = _movhea and 
																					ID_FechaMovimiento = _MIE_Fecha );
				if _MIE_Tot > 0
				then
					_SAB_M3 := _SAB_M3 + 1;
				end if;
			
				_JUE_Fecha := _fechasemini + '1 day'::interval; --dateadd(day,1,_fechasemini)
				_JUE_Tot := ( 	select sum(HNA) 
													from TBL_NOM_DIARIO_DET 
													where ID_Empleado = _ID_Empleado and 
																	ID_Movimiento = _movhea and 
																					ID_FechaMovimiento = _JUE_Fecha );
				if _JUE_Tot > 0
				then
					_SAB_M3 := _SAB_M3 + 1;
				end if;
			
				_VIE_Fecha := _fechasemini + '2 days'::interval; --dateadd(day,2,_fechasemini)
				_VIE_Tot := ( 	select sum(HNA) 
													from TBL_NOM_DIARIO_DET 
													where ID_Empleado = _ID_Empleado and 
																	ID_Movimiento = _movhea and 
																					ID_FechaMovimiento = _VIE_Fecha );
				if _VIE_Tot > 0
				then
					_SAB_M3 := _SAB_M3 + 1;
				end if;
			
				_SAB_Fecha := _fechasemini + '3 days'::interval; --dateadd(day,3,_fechasemini) 
				_SAB_Tot := ( 	select sum(HNA) 
								from TBL_NOM_DIARIO_DET 
								where ID_Empleado = _ID_Empleado and 
																	ID_Movimiento = _movhea and 
																					ID_FechaMovimiento = _SAB_Fecha );
				if _SAB_Tot > 0
				then
					_LUN_M3 := _SAB_M3 + 1;
				else
					_LUN_M3 := _SAB_M3;
				end if;
				
				_DOM_Fecha := _fechasemini + '4 days'::interval; --dateadd(day,4,_fechasemini) 
				_DOM_Tot := ( 	select sum(HNA) 
													from TBL_NOM_DIARIO_DET 
													where ID_Empleado = _ID_Empleado and 
																	ID_Movimiento = _movhea and 
																					ID_FechaMovimiento = _DOM_Fecha );
		
		
				_LUN_Fecha := _fechasemini + '5 days'::interval; --dateadd(day,5,_fechasemini) 
				_LUN_Tot := ( 	select sum(HNA) 
													from TBL_NOM_DIARIO_DET 
													where ID_Empleado = _ID_Empleado and 
																	ID_Movimiento = _movhea and 
																					ID_FechaMovimiento = _LUN_Fecha );
				if _LUN_Tot > 0
				then
					_MAR_M3 := _LUN_M3 + 1;
				else
					_MAR_M3 := _LUN_M3;
				end if;
				
				_MAR_Fecha := _fechasemini + '6 days'::interval; --dateadd(day,6,_fechasemini) 
				_MAR_Tot := ( 	select sum(HNA) 
													from TBL_NOM_DIARIO_DET 
													where ID_Empleado = _ID_Empleado and 
																	ID_Movimiento = _movhea and 
																					ID_FechaMovimiento = _MAR_Fecha );
			
		
				
				_MIE_HE := case when _MIE_Tot is null then 0 else case when _MIE_Tot > 3 then 3 else _MIE_Tot end end;
				_MIE_HT := case when _MIE_Tot is null then 0 else case when _MIE_Tot > 3 then _MIE_Tot - 3 else 0 end end;
				if _MIE_Tot is not null then _DiasHorasExtras := _DiasHorasExtras + 1; end if; 
				_JUE_HE := case when _JUE_Tot is null then 0 else case when _JUE_Tot > 3 then 3 else _JUE_Tot end end;
				_JUE_HT := case when _JUE_Tot is null then 0 else case when _JUE_Tot > 3 then _JUE_Tot - 3 else 0 end end;
				if _JUE_Tot is not null then _DiasHorasExtras := _DiasHorasExtras + 1; end if; 
				_VIE_HE := case when _VIE_Tot is null then 0 else case when _VIE_Tot > 3 then 3 else _VIE_Tot end end;
				_VIE_HT := case when _VIE_Tot is null then 0 else case when _VIE_Tot > 3 then _VIE_Tot - 3 else 0 end end;
				if _VIE_Tot is not null then _DiasHorasExtras := _DiasHorasExtras + 1; end if; 
				_SAB_HE := case when _SAB_Tot is null then 0 else 
												case 	when _SAB_M3 >= 3 then 0  
															when _SAB_Tot > 3 then 3 else _SAB_Tot end end;
				_SAB_HT := case when _SAB_Tot is null then 0 else 
												case 	when _SAB_M3 >= 3 then _SAB_Tot   
															when _SAB_Tot > 3 then _SAB_Tot - 3 else 0 end end;
				if _SAB_Tot is not null then _DiasHorasExtras := _DiasHorasExtras + 1; end if; 
				-- asigna las horas domingo
				_DOM_HE := case when _DOM_Tot is null then 0 else _DOM_Tot end;
				_DOM_HT := 0;
				if _DOM_Tot is not null then _DiasHorasExtras := _DiasHorasExtras + 1; end if; 
				
				_LUN_HE := case when _LUN_Tot is null then 0 else 
												case 	when _LUN_M3 >= 3 then 0  
															when _LUN_Tot > 3 then 3 else _LUN_Tot end end;
				_LUN_HT := case when _LUN_Tot is null then 0 else 
												case 	when _LUN_M3 >= 3 then _LUN_Tot   
															when _LUN_Tot > 3 then _LUN_Tot - 3 else 0 end end;
				if _LUN_Tot is not null then _DiasHorasExtras := _DiasHorasExtras + 1; end if; 
				_MAR_HE := case when _MAR_Tot is null then 0 else 
												case 	when _MAR_M3 >= 3 then 0  
															when _MAR_Tot > 3 then 3 else _MAR_Tot end end;
				_MAR_HT := case when _MAR_Tot is null then 0 else 
												case 	when _MAR_M3 >= 3 then _MAR_Tot   
															when _MAR_Tot > 3 then _MAR_Tot - 3 else 0 end end;
				if _MAR_Tot is not null then _DiasHorasExtras := _DiasHorasExtras + 1; end if; 
				
				if(_LUN_Fecha >= _Fecha_Desde and _LUN_Fecha <= _Fecha_Hasta)
				then	
					_TOTAL_HE := _TOTAL_HE + _LUN_HE;
					_TOTAL_HT := _TOTAL_HT + _LUN_HT;
				end if;
				if(_MAR_Fecha >= _Fecha_Desde and _MAR_Fecha <= _Fecha_Hasta)
				then	
					_TOTAL_HE := _TOTAL_HE + _MAR_HE;
					_TOTAL_HT := _TOTAL_HT + _MAR_HT;
				end if;
				if(_MIE_Fecha >= _Fecha_Desde and _MIE_Fecha <= _Fecha_Hasta)
				then	
					_TOTAL_HE := _TOTAL_HE + _MIE_HE;
					_TOTAL_HT := _TOTAL_HT + _MIE_HT;
				end if;
				if(_JUE_Fecha >= _Fecha_Desde and _JUE_Fecha <= _Fecha_Hasta)
				then	
					_TOTAL_HE := _TOTAL_HE + _JUE_HE;
					_TOTAL_HT := _TOTAL_HT + _JUE_HT;
				end if;
				if(_VIE_Fecha >= _Fecha_Desde and _VIE_Fecha <= _Fecha_Hasta)
				then	
					_TOTAL_HE := _TOTAL_HE + _VIE_HE;
					_TOTAL_HT := _TOTAL_HT + _VIE_HT;
				end if;
				if(_SAB_Fecha >= _Fecha_Desde and _SAB_Fecha <= _Fecha_Hasta)
				then
					_TOTAL_HE := _TOTAL_HE + _SAB_HE;
					_TOTAL_HT := _TOTAL_HT + _SAB_HT;
				end if;
				if(_DOM_Fecha >= _Fecha_Desde and _DOM_Fecha <= _Fecha_Hasta)
				then
					_TOTAL_HD := _TOTAL_HD + _DOM_HE;
				end if;
			
			
				/*
				select _MIE_Fecha as MIE_FECHA, _JUE_Fecha as JUE_FECHA, 
									_VIE_Fecha as VIE_FECHA, _SAB_Fecha as SAB_FECHA, _DOM_Fecha as DOM_FECHA, _LUN_Fecha as LUN_FECHA, _MAR_Fecha as MAR_FECHA
			
				select _MIE_HE as MIE_HE, _MIE_HF as MIE_F,
								_JUE_HE as JUE_HE, _JUE_HF as JUE_F, _VIE_HE as VIE_HE, _VIE_HF as VIE_F, _SAB_HE as SAB_HE, _SAB_HF as SAB_F,
									_DOM_HE as DOM_HE, _DOM_HF as DOM_F, _LUN_HE as LUN_HE, _LUN_HF as LUN_F, _MAR_HE as MAR_HE, _MAR_HF as MAR_F
				--*/
		
				_contsem := _contsem + 1;
			
			end loop;
		END IF;
	END IF;

	IF _MaxHE > 0
	THEN
		IF(_TOTAL_HE > _MaxHE)
		THEN
			_TOTAL_HF := _TOTAL_HE - _MaxHE;
			_TOTAL_HE := _MaxHE;
		END  IF;

		IF _TOTAL_HE > 0
		THEN
			_DiasHorasExtras := case 	when _TOTAL_HE > 6 then 3
										when _TOTAL_HE <= 6 and _TOTAL_HE > 3 then 2
										else 1 end;
		END IF;
	END IF;

	-- si se especifc√≥  todas las horas extras por fuera, Aplica todas las horas por fuera
	IF _HEPF = '1'
	THEN
		_TOTAL_HF := _TOTAL_HF + _TOTAL_HE + _TOTAL_HD + _TOTAL_HT;
		_TOTAL_HE := 0;
		_TOTAL_HD := 0;
		_TOTAL_HT := 0;
		_DiasHorasExtras := 0;
	END IF;

	RETURN QUERY
	SELECT _TOTAL_HE, _TOTAL_HF, _TOTAL_HD, _TOTAL_HT, _DiasHorasExtras;
	
END
$BODY$
  LANGUAGE plpgsql;
--ALTER FUNCTION sp_nom_calculo_nomina_horas_extras(smallint, character, timestamp without time zone, timestamp without time zone, bit, smallint)
--  OWNER TO [[owner]];

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_nom_calculo_nomina_vacaciones(
    _tipo smallint,
    _id_empleado character,
    _fecha_desde timestamp without time zone,
    _fecha_hasta timestamp without time zone)
  RETURNS SETOF record AS
$BODY$
DECLARE
	_TOTAL_DV smallint; _TOTAL_DVP smallint; _TOTAL_DVXF smallint; _TOTAL_DAV smallint; 
	_TOTAL_DVD smallint; _TOTAL_PV smallint; _DiasVac smallint; _PrimaVac numeric(2,2); _result varchar(254);

	_AnosCumplidos smallint; _Fecha_Ingreso timestamp; _Fecha_Corte timestamp; 
	_Permiso_Desde timestamp; _Permiso_Hasta timestamp;
BEGIN
	--SET DATEFIRST 1
	_TOTAL_DV := 0;
	_TOTAL_DVP := 0;
	_TOTAL_DVXF := 0;
	_TOTAL_DAV := 0;
	_TOTAL_DVD := 0;
	_TOTAL_PV := 0;
	_result := '';
	--primero calcula la antiguedad en a?os cumplidos, los dias de vacaciones y la prima vacacional
	_Fecha_Ingreso := (	select case when Fecha_Cambio_Empresa is null then Fecha_de_Ingreso else Fecha_Cambio_Empresa end 
						from TBL_NOM_MASEMP where ID_Empleado = _ID_Empleado	);
	_AnosCumplidos := getabsfechadiff('year', _Fecha_Ingreso, _Fecha_Hasta );
	_Fecha_Corte := _Fecha_Ingreso + (cast(_AnosCumplidos as text) || ' year')::interval; --dateadd(year,_AnosCumplidos,_Fecha_Ingreso)
	_DiasVac := case when
										(		select v.Dias --, v.PV 
												from TBL_NOM_VACACIONES v 
												where v.Desde <= _AnosCumplidos and v.Hasta >= _AnosCumplidos  limit 1 ) is null then 0 
					else
										(		select v.Dias --, v.PV 
												from TBL_NOM_VACACIONES v 
												where v.Desde <= _AnosCumplidos and v.Hasta >= _AnosCumplidos limit 1  ) 
					end;
					
	_PrimaVac := case when
										(		select v.PV 
												from TBL_NOM_VACACIONES v 
												where v.Desde <= _AnosCumplidos and v.Hasta >= _AnosCumplidos  limit 1 ) is null then 0 
						else
										(		select v.PV 
												from TBL_NOM_VACACIONES v 
												where v.Desde <= _AnosCumplidos and v.Hasta >= _AnosCumplidos limit 1 ) 
						end;
		
	-- Ahora calcula los permisos 
	-- empieza por las vacaciones ( se paga en la quincena apropiada ). Calcula los dias de vacaciones que corresponden al periodo de la nomina que se est? calculando
	-- Ejemplo si el permiso es del 10-ene al 20-ene y la nomina del 1-ene al 15 ene, calcula los dias del 10-ene al 15-ene, 
	--     y los restatnes los calcular? en el periodo de nomina siguiente ( del 16 al 31 de enero )
	_Permiso_Desde := ( 	select FechaHora_Desde
							from TBL_NOM_PERMISOS
							where ( FechaHora_Hasta >= _Fecha_Desde and 
																						FechaHora_Desde <= _Fecha_Hasta and
																								ID_Movimiento = -5 and ID_Empleado = _ID_Empleado ) limit 1 );
	_Permiso_Hasta := ( 	select FechaHora_Hasta
							from TBL_NOM_PERMISOS
							where ( FechaHora_Hasta >= _Fecha_Desde and 
																					FechaHora_Desde <= _Fecha_Hasta and
																								ID_Movimiento = -5 and ID_Empleado = _ID_Empleado ) limit 1 );
																								
	if(_Permiso_Desde is not null and _Permiso_Hasta is not null and _Permiso_Desde < _Permiso_Hasta)
	then
		-- calcula si ya tiene un a?o
		if(_AnosCumplidos < 1) -- si todavia no tiene ni un a?o lo rechaza
		then
			_TOTAL_DV := 0;			-- o si el permiso es antes de su fecha de cumplimiento de a?os tambien lo rechaza
			_result := _result || ' PRECAUCION: No se aplico el permiso de vacaciones porque no ha cumplido el a√±o: ' + _ID_Empleado;
		elsif(_Permiso_Desde >= _Fecha_Desde and (_Permiso_Hasta - '1 day'::interval) <= _Fecha_Hasta)
		then
			_TOTAL_DV := (getfechadiff('day',_Permiso_Desde,(_Permiso_Hasta - '1 day'::interval) ) +1) - getnum_dom(_Permiso_Desde,(_Permiso_Hasta - '1 day'::interval));
		elsif(_Permiso_Desde >= _Fecha_Desde and (_Permiso_Hasta - '1 day'::interval) > _Fecha_Hasta)
		then
			_TOTAL_DV := (getfechadiff('day',_Permiso_Desde,_Fecha_Hasta) +1) - getnum_dom(_Permiso_Desde,_Fecha_Hasta);
		elsif(_Permiso_Desde < _Fecha_Desde and (_Permiso_Hasta - '1 day'::interval) <= _Fecha_Hasta)
		then
			_TOTAL_DV := (getfechadiff('day',_Fecha_Desde,(_Permiso_Hasta - '1 day'::interval)) +1) - getnum_dom(_Fecha_Desde,(_Permiso_Hasta - '1 day'::interval));
		elsif(_Permiso_Desde < _Fecha_Desde and (_Permiso_Hasta - '1 day'::interval) > _Fecha_Hasta)
		then
			_TOTAL_DV := (getfechadiff('day',_Fecha_Desde,_Fecha_Hasta) + 1) - getnum_dom(_Fecha_Desde,_Fecha_Hasta);
		end if;
	end if;  

	-- ahora los de las vacaciones pagada * fuera. ( se paga en la quincena apropiada ) ?????????????????????
	_Permiso_Desde := null;
	_Permiso_Hasta := null;
	_Permiso_Desde := ( 	select FechaHora_Desde
							from TBL_NOM_PERMISOS
							where ( FechaHora_Hasta >= _Fecha_Desde and 
												FechaHora_Desde <= _Fecha_Hasta and
													ID_Movimiento = -6 and ID_Empleado = _ID_Empleado) limit 1 );
	_Permiso_Hasta := ( 	select FechaHora_Hasta
							from TBL_NOM_PERMISOS
							where ( FechaHora_Hasta >= _Fecha_Desde and 
												FechaHora_Desde <= _Fecha_Hasta and
													ID_Movimiento = -6 and ID_Empleado = _ID_Empleado) limit 1 );
	if(_Permiso_Desde is not null and _Permiso_Hasta is not null and _Permiso_Desde < _Permiso_Hasta)
	then
		if(_Permiso_Desde >= _Fecha_Desde and (_Permiso_Hasta - '1 day'::interval) <= _Fecha_Hasta)
		then
			_TOTAL_DVXF := (getfechadiff('day',_Permiso_Desde,(_Permiso_Hasta - '1 day'::interval) ) +1) - getnum_dom(_Permiso_Desde,(_Permiso_Hasta - '1 day'::interval));
		elsif(_Permiso_Desde >= _Fecha_Desde and (_Permiso_Hasta - '1 day'::interval) > _Fecha_Hasta)
		then
			_TOTAL_DVXF := (getfechadiff('day',_Permiso_Desde,_Fecha_Hasta) +1) - getnum_dom(_Permiso_Desde,_Fecha_Hasta);
		elsif(_Permiso_Desde < _Fecha_Desde and (_Permiso_Hasta - '1 day'::interval) <= _Fecha_Hasta)
		then
			_TOTAL_DVXF := (getfechadiff('day',_Fecha_Desde,(_Permiso_Hasta - '1 day'::interval)) +1) - getnum_dom(_Fecha_Desde,(_Permiso_Hasta - '1 day'::interval));
		elsif(_Permiso_Desde < _Fecha_Desde and (_Permiso_Hasta - '1 day'::interval) > _Fecha_Hasta)
		then
			_TOTAL_DVXF := (getfechadiff('day',_Fecha_Desde,_Fecha_Hasta) + 1) - getnum_dom(_Fecha_Desde,_Fecha_Hasta);
		end if;
	end if;  

	-- ahora dias a cuenta de vacaciones. ( se paga toda la quincena )
	_Permiso_Desde := null;
	_Permiso_Hasta := null;
	_Permiso_Desde := ( 	select FechaHora_Desde
							from TBL_NOM_PERMISOS
							where ( ID_FechaMovimiento between _Fecha_Desde and _Fecha_Hasta and
																								ID_Movimiento = -7 and ID_Empleado = _ID_Empleado) limit 1 );
	_Permiso_Hasta := ( 	select FechaHora_Hasta
							from TBL_NOM_PERMISOS
							where ( ID_FechaMovimiento between _Fecha_Desde and _Fecha_Hasta and
																								ID_Movimiento = -7 and ID_Empleado = _ID_Empleado)  limit 1 );

	if(_Permiso_Desde is not null and _Permiso_Hasta is not null and _Permiso_Desde < _Permiso_Hasta)
	then
		_TOTAL_DAV = getfechadiff('day',_Permiso_Desde,_Permiso_Hasta) - getnum_dom(_Permiso_Desde,(_Permiso_Hasta - '1 day'::interval));
	end if; 

	-- ahora dias de vacaciones pagadas. ( se pagan todos los dias en esta quincena )
	_Permiso_Desde := null;
	_Permiso_Hasta := null;
	_Permiso_Desde := ( 	select FechaHora_Desde
							from TBL_NOM_PERMISOS
							where ( ID_FechaMovimiento between _Fecha_Desde and _Fecha_Hasta and
																								ID_Movimiento = -8 and ID_Empleado = _ID_Empleado) limit 1 );
	_Permiso_Hasta = ( 	select FechaHora_Hasta
						from TBL_NOM_PERMISOS
						where ( ID_FechaMovimiento between _Fecha_Desde and _Fecha_Hasta and
																					ID_Movimiento = -8 and ID_Empleado = _ID_Empleado)  limit 1 );
	if(_Permiso_Desde is not null and _Permiso_Hasta is not null and _Permiso_Desde < _Permiso_Hasta)
	then
		_TOTAL_DVP := getfechadiff('day',_Permiso_Desde,_Permiso_Hasta) - getnum_dom(_Permiso_Desde,(_Permiso_Hasta - '1 day'::interval)); --los domingos no los toma en cuenta si descontamos NUM_DOM
	end if;

	-- ahora dias de vacaciones disfrutadas. ( se paga en la quincena apropiada )
	_Permiso_Desde := null;
	_Permiso_Hasta := null;
	_Permiso_Desde := ( 	select FechaHora_Desde
							from TBL_NOM_PERMISOS
							where ( FechaHora_Hasta >= _Fecha_Desde and 
															FechaHora_Desde <= _Fecha_Hasta and
																								ID_Movimiento = -9 and ID_Empleado = _ID_Empleado)  limit 1 );
	_Permiso_Hasta := ( 	select  FechaHora_Hasta
							from TBL_NOM_PERMISOS
							where ( FechaHora_Hasta >= _Fecha_Desde and 
															FechaHora_Desde <= _Fecha_Hasta and
																								ID_Movimiento = -9 and ID_Empleado = _ID_Empleado) limit 1 );
	if(_Permiso_Desde is not null and _Permiso_Hasta is not null and _Permiso_Desde < _Permiso_Hasta)
	then
		if(_Permiso_Desde >= _Fecha_Desde and (_Permiso_Hasta - '1 day'::interval) <= _Fecha_Hasta)
		then
			_TOTAL_DVD := (getfechadiff('day',_Permiso_Desde,(_Permiso_Hasta - '1 day'::interval) ) +1) - getnum_dom(_Permiso_Desde,(_Permiso_Hasta - '1 day'::interval)); --los domingos no los toma en cuenta si descontamos NUM_DOM
		elsif(_Permiso_Desde >= _Fecha_Desde and (_Permiso_Hasta - '1 day'::interval) > _Fecha_Hasta)
		then
			_TOTAL_DVD := (getfechadiff('day',_Permiso_Desde,_Fecha_Hasta) +1) - getnum_dom(_Permiso_Desde,_Fecha_Hasta);
		elsif(_Permiso_Desde < _Fecha_Desde and (_Permiso_Hasta - '1 day'::interval) <= _Fecha_Hasta)
		then
			_TOTAL_DVD := (getfechadiff('day',_Fecha_Desde,(_Permiso_Hasta - '1 day'::interval)) +1) - getnum_dom(_Fecha_Desde,(_Permiso_Hasta - '1 day'::interval));
		elsif(_Permiso_Desde < _Fecha_Desde and (_Permiso_Hasta - '1 day'::interval) > _Fecha_Hasta)
		then
			_TOTAL_DVD := (getfechadiff('day',_Fecha_Desde,_Fecha_Hasta) + 1) - getnum_dom(_Fecha_Desde,_Fecha_Hasta);
		end if;
	end if;

	-- Ahora calcula la prima vacacional. ( se pagan todos los dias en esta quincena ) 
	_Permiso_Desde := null;
	_Permiso_Hasta := null;
	_Permiso_Desde = ( 	select ID_FechaMovimiento
							from TBL_NOM_PERMISOS
							where ( ID_FechaMovimiento between _Fecha_Desde and _Fecha_Hasta and
																		ID_Movimiento = -10 and ID_Empleado = _ID_Empleado) limit 1 );

	if(_Permiso_Desde is not null)
	then
		-- calcula si ya tiene un a?o y en caso de tenerlo, verifica que el permiso tenga una fecha posterior al la fecha de complimiento de antig?edad en la empresa 
		if(_AnosCumplidos < 1 or _Fecha_Corte > _Permiso_Desde) -- si todavia no tiene ni un a?o lo rechaza
		then
			_TOTAL_PV := _DiasVac;
			_result := _result || 'PRECAUCION: Se aplico la prima vacacional pero no ha cumplido el a√±o: ' || _ID_Empleado;
		elsif( select count(*) from TBL_NOM_PERMISOS where  ID_Empleado = _ID_Empleado and ID_Movimiento = -10 and ID_FechaMovimiento between _Fecha_Corte and  (_Fecha_Desde - '1 day'::interval)) > 0
		then
			_TOTAL_PV := 0;
			_result := _result || 'PRECAUCION: No se aplico la prima vacacional porque ya se hab√≠a aplicado antes en algun periodo: ' || _ID_Empleado;
		else
			_TOTAL_PV := _DiasVac;
		end if;
	end if;  

	RETURN QUERY
	SELECT _TOTAL_DV, _TOTAL_DVP, _TOTAL_DVXF, _TOTAL_DAV, _TOTAL_DVD, _TOTAL_PV, _DiasVac, _PrimaVac, _result;

END
$BODY$
  LANGUAGE plpgsql;

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_nom_calculo_nomina_fonacot(
    _id_empleado character,
    _fecha_hasta timestamp without time zone,
    _periodo smallint,
    _fonaj smallint)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_FONAC numeric(19,4); _TMP record;
	_ID_Credito varchar(10); _Neto numeric(19,4); 
BEGIN 

	--raise notice 'Calculo del fonacot';
						
	CREATE LOCAL TEMPORARY TABLE _TMP_FONACOT (
		ID_Num serial NOT NULL , 
		ID_Credito varchar(10) NOT NULL ,
		Descuento numeric(19,4) NOT NULL ,
		Total numeric(19,4) NOT NULL ,
		Pagos numeric(19,4) NOT NULL 
	);

	insert into _TMP_FONACOT (ID_Credito,Descuento,Total,Pagos)
	select c.ID_Credito,  round((c.Retencion / 30) * _Periodo,1), c.Importe,
		(select case when sum(Descuento) is null 
					then 0 
					else sum(Descuento) 
				end 
		from TBL_NOM_FONACOT_DET 
		where ID_Credito = c.ID_Credito and Fecha < _Fecha_Hasta) 
	from TBL_NOM_FONACOT_CAB c 
	where c.ID_Empleado = _ID_Empleado and c.Fecha <= _Fecha_Hasta  and
		( c.Importe > (	select case when sum(Descuento) is null then 0 else sum(Descuento) end 
											from TBL_NOM_FONACOT_DET 
											where ID_Credito = c.ID_Credito and Fecha < _Fecha_Hasta) );


	_FONAC := (	select sum( (case when Total - Pagos > Descuento then Descuento else Total - Pagos end ) ) 
					from _TMP_FONACOT );

	for _TMP in (select * from _TMP_FONACOT)
	loop
		_ID_Credito := _TMP.ID_Credito;
		_Neto :=  case when _TMP.Total - _TMP.Pagos > _TMP.Descuento then _TMP.Descuento else _TMP.Total - _TMP.Pagos end;

		raise notice 'FonAJ: %, Credito: %,  Total %, Pagos %, Descuento %, Neto %', _FonAj, _TMP.ID_Credito, _TMP.Total, _TMP.Pagos, _TMP.Descuento, _Neto;
											
		if(select count(*) from TBL_NOM_FONACOT_DET where ID_Credito = _ID_Credito and Fecha = _Fecha_Hasta) > 0
		then -- Existe ya
			update TBL_NOM_FONACOT_DET
			set Descuento = _Neto
			where ID_Credito = _ID_Credito and Fecha = _Fecha_Hasta;
		else
			if _Neto > 0.00 --Solo agregar√° el descuento cuando realmente se necesite descontar
			then
				insert into TBL_NOM_FONACOT_DET
				select _ID_Credito, _Fecha_Hasta, _Neto;
			end if;
		end if;
	end loop;

	drop table _TMP_FONACOT;

	if _FONAC is null
	then
		_FONAC := 0.0;
	end if;

	RETURN QUERY SELECT _FONAC;

END
$BODY$
  LANGUAGE plpgsql;
  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_nom_calculo_nomina_dinamicos(
    _id_empleado character,
    _id_compania smallint,
    _id_sucursal smallint,
    _ano smallint,
    _numero_nomina smallint,
    _tipo smallint,
    _nivel_de_confianza smallint,
    _salario_por_hora numeric,
    _salario_diario numeric,
    _salario_mixto numeric,
    _calculomixto bit)
  RETURNS void AS
$BODY$
BEGIN
	-- CALCULA LAS DE EMPLEADO TAL
	INSERT INTO _TMP_PLANTILLAS_TOTALES
	select _Tipo, _ID_Empleado, p.ID_Movimiento,  
	/*TOTAL_GRAVADO*/ case when Deduccion = '1' or ISPT = '0' then 0.00 else
										case 	when	Aplicacion = 0 and bExento = '0' then round(_Salario_por_Hora * Horas, 2)
												when 	Aplicacion = 1 and bExento = '0' then round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2)
												when 	Aplicacion = 2 and bExento = '0' then (Veces_Importe * Importe)
												when	Aplicacion = 0 and bExento = '1' then	case	when round(_Salario_por_Hora * Horas, 2) > Exento then round(_Salario_por_Hora * Horas, 2) - Exento
																																					else 0.00 end
												when 	Aplicacion = 1 and bExento = '1' then case	when round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2) > Exento then round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2) - Exento
																																					else 0.00 end
												when 	Aplicacion = 2 and bExento = '1' then case	when (Veces_Importe * Importe) > Exento then (Veces_Importe * Importe) - Exento 
																																					else 0.00 end
											else 0.00 end end,
	/*TOTAL_EXENTO*/ 	case 	when Deduccion = '1' or (ISPT = '1' and bExento = '0') then 0.00 
								when Deduccion = '0' and ISPT = '0' then -- todo lo mandar√° al exento (ignora si hay un importe m√°ximo exento o no)
									case 	when Aplicacion = 0 then round(_Salario_por_Hora * Horas, 2)
											when Aplicacion = 1 then round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2)
											when Aplicacion = 2 then (Veces_Importe * Importe) end  
								else -- Es percepci√≥n que Incluye un importe m√°ximo exento...... La parte gravada ya quedo en lo gravado en la columna anterior

									case 	when	Aplicacion = 0 	then	case	when round(_Salario_por_Hora * Horas, 2) > Exento then Exento
																					else round(_Salario_por_Hora * Horas, 2) end
											when 	Aplicacion = 1 	then 	case	when round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2) > Exento then Exento
																					else round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2) end
											when 	Aplicacion = 2 	then 	case	when (Veces_Importe * Importe) > Exento then Exento
																					else (Veces_Importe * Importe) end
											else 0.00 
									end
							 	end,
	/*TOTAL_DEDUCCION*/ case 	when Deduccion = '0' then	0.00
													 	else	case 	when Aplicacion = 0	then round(_Salario_por_Hora * Horas, 2)
																				when Aplicacion = 1 then round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2)
																				when Aplicacion = 2 then (Veces_Importe * Importe) end  
														end, mn.ISPT
	from TBL_NOM_PLANTILLAS p inner join TBL_NOM_MOVIMIENTOS_NOMINA mn ON p.ID_Movimiento = mn.ID_Movimiento 
	where Calcular = '1' and Tipo_de_Nomina = _Tipo and bID_Empleado = '1' and ID_Empleado = _ID_Empleado and 
		bNomina = '0' and bCompania_Sucursal = '0' and bNivel_Confianza = '0';
	
	-- CALCULA LAS DE EMPLEADO TAL SOLO NOMINA XX
	INSERT INTO _TMP_PLANTILLAS_TOTALES
	select _Tipo, _ID_Empleado, p.ID_Movimiento,  
	/*TOTAL_GRAVADO*/ case when Deduccion = '1' or ISPT = '0' then 0.00 else
										case 	when	Aplicacion = 0 and bExento = '0' then round(_Salario_por_Hora * Horas, 2)
													when 	Aplicacion = 1 and bExento = '0' then round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2)
													when 	Aplicacion = 2 and bExento = '0' then (Veces_Importe * Importe)
													when	Aplicacion = 0 and bExento = '1' then	case	when round(_Salario_por_Hora * Horas, 2) > Exento then round(_Salario_por_Hora * Horas, 2) - Exento
																																					else 0.00 end
													when 	Aplicacion = 1 and bExento = '1' then case	when round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2) > Exento then round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2) - Exento
																																					else 0.00 end
													when 	Aplicacion = 2 and bExento = '1' then case	when (Veces_Importe * Importe) > Exento then (Veces_Importe * Importe) - Exento 
																																					else 0.00 end
											else 0.00 end end,
	/*TOTAL_EXENTO*/ 	case 	when Deduccion = '1' or (ISPT = '1' and bExento = '0') then 0.00 
								when Deduccion = '0' and ISPT = '0' then -- todo lo mandar√° al exento (ignora si hay un importe m√°ximo exento o no)
									case 	when Aplicacion = 0 then round(_Salario_por_Hora * Horas, 2)
											when Aplicacion = 1 then round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2)
											when Aplicacion = 2 then (Veces_Importe * Importe) end  
								else -- Es percepci√≥n que Incluye un importe m√°ximo exento...... La parte gravada ya quedo en lo gravado en la columna anterior

									case 	when	Aplicacion = 0 	then	case	when round(_Salario_por_Hora * Horas, 2) > Exento then Exento
																					else round(_Salario_por_Hora * Horas, 2) end
											when 	Aplicacion = 1 	then 	case	when round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2) > Exento then Exento
																					else round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2) end
											when 	Aplicacion = 2 	then 	case	when (Veces_Importe * Importe) > Exento then Exento
																					else (Veces_Importe * Importe) end
											else 0.00 
									end
							 	end,
	/*TOTAL_DEDUCCION*/ case 	when Deduccion = '0' then	0.00
													 	else	case 	when Aplicacion = 0	then round(_Salario_por_Hora * Horas, 2)
																				when Aplicacion = 1 then round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2)
																				when Aplicacion = 2 then (Veces_Importe * Importe) end  
														end, mn.ISPT
	from TBL_NOM_PLANTILLAS p inner join TBL_NOM_MOVIMIENTOS_NOMINA mn ON p.ID_Movimiento = mn.ID_Movimiento 
	where Calcular = '1' and Tipo_de_Nomina = _Tipo and bID_Empleado = '1' and ID_Empleado = _ID_Empleado and 
		bNomina = '1' and Ano = _Ano and Numero_Nomina = _Numero_Nomina and bCompania_Sucursal = '0' and bNivel_Confianza = '0';
	
	--CALCULA LAS DE NOMINA XX 
	INSERT INTO _TMP_PLANTILLAS_TOTALES -- OK
	select _Tipo, _ID_Empleado, p.ID_Movimiento,  
	/*TOTAL_GRAVADO*/ case when Deduccion = '1' or ISPT = '0' then 0.00 else
										case 	when	Aplicacion = 0 and bExento = '0' then round(_Salario_por_Hora * Horas, 2)
													when 	Aplicacion = 1 and bExento = '0' then round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2)
													when 	Aplicacion = 2 and bExento = '0' then (Veces_Importe * Importe)
													when	Aplicacion = 0 and bExento = '1' then	case	when round(_Salario_por_Hora * Horas, 2) > Exento then round(_Salario_por_Hora * Horas, 2) - Exento
																																					else 0.00 end
													when 	Aplicacion = 1 and bExento = '1' then case	when round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2) > Exento then round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2) - Exento
																																					else 0.00 end
													when 	Aplicacion = 2 and bExento = '1' then case	when (Veces_Importe * Importe) > Exento then (Veces_Importe * Importe) - Exento 
																																					else 0.00 end
											else 0.00 end end,
	/*TOTAL_EXENTO*/ 	case 	when Deduccion = '1' or (ISPT = '1' and bExento = '0') then 0.00 
								when Deduccion = '0' and ISPT = '0' then -- todo lo mandar√° al exento (ignora si hay un importe m√°ximo exento o no)
									case 	when Aplicacion = 0 then round(_Salario_por_Hora * Horas, 2)
											when Aplicacion = 1 then round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2)
											when Aplicacion = 2 then (Veces_Importe * Importe) end  
								else -- Es percepci√≥n que Incluye un importe m√°ximo exento...... La parte gravada ya quedo en lo gravado en la columna anterior

									case 	when	Aplicacion = 0 	then	case	when round(_Salario_por_Hora * Horas, 2) > Exento then Exento
																					else round(_Salario_por_Hora * Horas, 2) end
											when 	Aplicacion = 1 	then 	case	when round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2) > Exento then Exento
																					else round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2) end
											when 	Aplicacion = 2 	then 	case	when (Veces_Importe * Importe) > Exento then Exento
																					else (Veces_Importe * Importe) end
											else 0.00 
									end
							 	end,
	/*TOTAL_DEDUCCION*/ case 	when Deduccion = '0' then	0.00
													 	else	case 	when Aplicacion = 0	then round(_Salario_por_Hora * Horas, 2)
																				when Aplicacion = 1 then round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2)
																				when Aplicacion = 2 then (Veces_Importe * Importe) end  
														end, mn.ISPT 
	from TBL_NOM_PLANTILLAS p inner join TBL_NOM_MOVIMIENTOS_NOMINA mn ON p.ID_Movimiento = mn.ID_Movimiento 
	where Calcular = '1' and Tipo_de_Nomina = _Tipo and bID_Empleado = '0' and bNomina = '1' and Ano = _Ano and Numero_Nomina = _Numero_Nomina and 
		bCompania_Sucursal = '0' and bNivel_Confianza = '0'
		and p.Inclusiones = '0' and _ID_Empleado not in ( select ID_Empleado from TBL_NOM_PLANTILLAS_EXCLUSIONES where ID_Plantilla = p.ID_Plantilla );
	
	INSERT INTO _TMP_PLANTILLAS_TOTALES -- OK
	select _Tipo, _ID_Empleado, p.ID_Movimiento,  
	/*TOTAL_GRAVADO*/ case when Deduccion = '1' or ISPT = '0' then 0.00 else
										case 	when	Aplicacion = 0 and bExento = '0' then round(_Salario_por_Hora * Horas, 2)
													when 	Aplicacion = 1 and bExento = '0' then round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2)
													when 	Aplicacion = 2 and bExento = '0' then (Veces_Importe * Importe)
													when	Aplicacion = 0 and bExento = '1' then	case	when round(_Salario_por_Hora * Horas, 2) > Exento then round(_Salario_por_Hora * Horas, 2) - Exento
																																					else 0.00 end
													when 	Aplicacion = 1 and bExento = '1' then case	when round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2) > Exento then round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2) - Exento
																																					else 0.00 end
													when 	Aplicacion = 2 and bExento = '1' then case	when (Veces_Importe * Importe) > Exento then (Veces_Importe * Importe) - Exento 
																																					else 0.00 end
											else 0.00 end end,
	/*TOTAL_EXENTO*/ 	case 	when Deduccion = '1' or (ISPT = '1' and bExento = '0') then 0.00 
								when Deduccion = '0' and ISPT = '0' then -- todo lo mandar√° al exento (ignora si hay un importe m√°ximo exento o no)
									case 	when Aplicacion = 0 then round(_Salario_por_Hora * Horas, 2)
											when Aplicacion = 1 then round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2)
											when Aplicacion = 2 then (Veces_Importe * Importe) end  
								else -- Es percepci√≥n que Incluye un importe m√°ximo exento...... La parte gravada ya quedo en lo gravado en la columna anterior

									case 	when	Aplicacion = 0 	then	case	when round(_Salario_por_Hora * Horas, 2) > Exento then Exento
																					else round(_Salario_por_Hora * Horas, 2) end
											when 	Aplicacion = 1 	then 	case	when round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2) > Exento then Exento
																					else round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2) end
											when 	Aplicacion = 2 	then 	case	when (Veces_Importe * Importe) > Exento then Exento
																					else (Veces_Importe * Importe) end
											else 0.00 
									end
							 	end,
	/*TOTAL_DEDUCCION*/ case 	when Deduccion = '0' then	0.00
													 	else	case 	when Aplicacion = 0	then round(_Salario_por_Hora * Horas, 2)
																				when Aplicacion = 1 then round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2)
																				when Aplicacion = 2 then (Veces_Importe * Importe) end  
														end, mn.ISPT 
	from TBL_NOM_PLANTILLAS p inner join TBL_NOM_MOVIMIENTOS_NOMINA mn ON p.ID_Movimiento = mn.ID_Movimiento 
	where Calcular = '1' and Tipo_de_Nomina = _Tipo and bID_Empleado = '0' and bNomina = '1' and Ano = _Ano and Numero_Nomina = _Numero_Nomina and 
		bCompania_Sucursal = '0' and bNivel_Confianza = '0'
		and p.Inclusiones = '1' and _ID_Empleado in ( select ID_Empleado from TBL_NOM_PLANTILLAS_EXCLUSIONES where ID_Plantilla = p.ID_Plantilla );
	
	--CALCULA LAS DE NOMINA XX COMPANIA_SUCURSAL XX 
	INSERT INTO _TMP_PLANTILLAS_TOTALES -- OK
	select _Tipo, _ID_Empleado, p.ID_Movimiento,  
	/*TOTAL_GRAVADO*/ case when Deduccion = '1' or ISPT = '0' then 0.00 else
										case 	when	Aplicacion = 0 and bExento = '0' then round(_Salario_por_Hora * Horas, 2)
													when 	Aplicacion = 1 and bExento = '0' then round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2)
													when 	Aplicacion = 2 and bExento = '0' then (Veces_Importe * Importe)
													when	Aplicacion = 0 and bExento = '1' then	case	when round(_Salario_por_Hora * Horas, 2) > Exento then round(_Salario_por_Hora * Horas, 2) - Exento
																																					else 0.00 end
													when 	Aplicacion = 1 and bExento = '1' then case	when round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2) > Exento then round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2) - Exento
																																					else 0.00 end
													when 	Aplicacion = 2 and bExento = '1' then case	when (Veces_Importe * Importe) > Exento then (Veces_Importe * Importe) - Exento 
																																					else 0.00 end
											else 0.00 end end,
	/*TOTAL_EXENTO*/ 	case 	when Deduccion = '1' or (ISPT = '1' and bExento = '0') then 0.00 
								when Deduccion = '0' and ISPT = '0' then -- todo lo mandar√° al exento (ignora si hay un importe m√°ximo exento o no)
									case 	when Aplicacion = 0 then round(_Salario_por_Hora * Horas, 2)
											when Aplicacion = 1 then round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2)
											when Aplicacion = 2 then (Veces_Importe * Importe) end  
								else -- Es percepci√≥n que Incluye un importe m√°ximo exento...... La parte gravada ya quedo en lo gravado en la columna anterior

									case 	when	Aplicacion = 0 	then	case	when round(_Salario_por_Hora * Horas, 2) > Exento then Exento
																					else round(_Salario_por_Hora * Horas, 2) end
											when 	Aplicacion = 1 	then 	case	when round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2) > Exento then Exento
																					else round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2) end
											when 	Aplicacion = 2 	then 	case	when (Veces_Importe * Importe) > Exento then Exento
																					else (Veces_Importe * Importe) end
											else 0.00 
									end
							 	end,
	/*TOTAL_DEDUCCION*/ case 	when Deduccion = '0' then	0.00
													 	else	case 	when Aplicacion = 0	then round(_Salario_por_Hora * Horas, 2)
																				when Aplicacion = 1 then round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2)
																				when Aplicacion = 2 then (Veces_Importe * Importe) end  
														end, mn.ISPT 
	from TBL_NOM_PLANTILLAS p inner join TBL_NOM_MOVIMIENTOS_NOMINA mn ON p.ID_Movimiento = mn.ID_Movimiento 
	where Calcular = '1' and Tipo_de_Nomina = _Tipo and bID_Empleado = '0' and bNomina = '1' and Ano = _Ano and Numero_Nomina = _Numero_Nomina and 
		bCompania_Sucursal = '1' and ID_Compania = _ID_Compania and ID_Sucursal = _ID_Sucursal and 
		bNivel_Confianza = '0'
		and  p.Inclusiones = '0' and _ID_Empleado not in ( select ID_Empleado from TBL_NOM_PLANTILLAS_EXCLUSIONES where ID_Plantilla = p.ID_Plantilla );
	
	INSERT INTO _TMP_PLANTILLAS_TOTALES -- OK
	select _Tipo, _ID_Empleado, p.ID_Movimiento,  
	/*TOTAL_GRAVADO*/ case when Deduccion = '1' or ISPT = '0' then 0.00 else
										case 	when	Aplicacion = 0 and bExento = '0' then round(_Salario_por_Hora * Horas, 2)
													when 	Aplicacion = 1 and bExento = '0' then round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2)
													when 	Aplicacion = 2 and bExento = '0' then (Veces_Importe * Importe)
													when	Aplicacion = 0 and bExento = '1' then	case	when round(_Salario_por_Hora * Horas, 2) > Exento then round(_Salario_por_Hora * Horas, 2) - Exento
																																					else 0.00 end
													when 	Aplicacion = 1 and bExento = '1' then case	when round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2) > Exento then round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2) - Exento
																																					else 0.00 end
													when 	Aplicacion = 2 and bExento = '1' then case	when (Veces_Importe * Importe) > Exento then (Veces_Importe * Importe) - Exento 
																																					else 0.00 end
											else 0.00 end end,
	/*TOTAL_EXENTO*/ 	case 	when Deduccion = '1' or (ISPT = '1' and bExento = '0') then 0.00 
								when Deduccion = '0' and ISPT = '0' then -- todo lo mandar√° al exento (ignora si hay un importe m√°ximo exento o no)
									case 	when Aplicacion = 0 then round(_Salario_por_Hora * Horas, 2)
											when Aplicacion = 1 then round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2)
											when Aplicacion = 2 then (Veces_Importe * Importe) end  
								else -- Es percepci√≥n que Incluye un importe m√°ximo exento...... La parte gravada ya quedo en lo gravado en la columna anterior

									case 	when	Aplicacion = 0 	then	case	when round(_Salario_por_Hora * Horas, 2) > Exento then Exento
																					else round(_Salario_por_Hora * Horas, 2) end
											when 	Aplicacion = 1 	then 	case	when round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2) > Exento then Exento
																					else round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2) end
											when 	Aplicacion = 2 	then 	case	when (Veces_Importe * Importe) > Exento then Exento
																					else (Veces_Importe * Importe) end
											else 0.00 
									end
							 	end,
	/*TOTAL_DEDUCCION*/ case 	when Deduccion = '0' then	0.00
													 	else	case 	when Aplicacion = 0	then round(_Salario_por_Hora * Horas, 2)
																				when Aplicacion = 1 then round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2)
																				when Aplicacion = 2 then (Veces_Importe * Importe) end  
														end, mn.ISPT 
	from TBL_NOM_PLANTILLAS p inner join TBL_NOM_MOVIMIENTOS_NOMINA mn ON p.ID_Movimiento = mn.ID_Movimiento 
	where Calcular = '1' and Tipo_de_Nomina = _Tipo and bID_Empleado = '0' and bNomina = '1' and Ano = _Ano and Numero_Nomina = _Numero_Nomina and 
		bCompania_Sucursal = '1' and ID_Compania = _ID_Compania and ID_Sucursal = _ID_Sucursal and 
		bNivel_Confianza = '0'
		and p.Inclusiones = '1' and  _ID_Empleado in ( select ID_Empleado from TBL_NOM_PLANTILLAS_EXCLUSIONES where ID_Plantilla = p.ID_Plantilla );
	
	--CALCULA LAS DE NOMINA XX COMPANIA_SUCURSAL XX NO SINDICALIZADOS
	INSERT INTO _TMP_PLANTILLAS_TOTALES -- OK
	select _Tipo, _ID_Empleado, p.ID_Movimiento,  
	/*TOTAL_GRAVADO*/ case when Deduccion = '1' or ISPT = '0' then 0.00 else
										case 	when	Aplicacion = 0 and bExento = '0' then round(_Salario_por_Hora * Horas, 2)
													when 	Aplicacion = 1 and bExento = '0' then round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2)
													when 	Aplicacion = 2 and bExento = '0' then (Veces_Importe * Importe)
													when	Aplicacion = 0 and bExento = '1' then	case	when round(_Salario_por_Hora * Horas, 2) > Exento then round(_Salario_por_Hora * Horas, 2) - Exento
																																					else 0.00 end
													when 	Aplicacion = 1 and bExento = '1' then case	when round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2) > Exento then round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2) - Exento
																																					else 0.00 end
													when 	Aplicacion = 2 and bExento = '1' then case	when (Veces_Importe * Importe) > Exento then (Veces_Importe * Importe) - Exento 
																																					else 0.00 end
											else 0.00 end end,
	/*TOTAL_EXENTO*/ 	case 	when Deduccion = '1' or (ISPT = '1' and bExento = '0') then 0.00 
								when Deduccion = '0' and ISPT = '0' then -- todo lo mandar√° al exento (ignora si hay un importe m√°ximo exento o no)
									case 	when Aplicacion = 0 then round(_Salario_por_Hora * Horas, 2)
											when Aplicacion = 1 then round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2)
											when Aplicacion = 2 then (Veces_Importe * Importe) end  
								else -- Es percepci√≥n que Incluye un importe m√°ximo exento...... La parte gravada ya quedo en lo gravado en la columna anterior

									case 	when	Aplicacion = 0 	then	case	when round(_Salario_por_Hora * Horas, 2) > Exento then Exento
																					else round(_Salario_por_Hora * Horas, 2) end
											when 	Aplicacion = 1 	then 	case	when round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2) > Exento then Exento
																					else round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2) end
											when 	Aplicacion = 2 	then 	case	when (Veces_Importe * Importe) > Exento then Exento
																					else (Veces_Importe * Importe) end
											else 0.00 
									end
							 	end,
	/*TOTAL_DEDUCCION*/ case 	when Deduccion = '0' then	0.00
													 	else	case 	when Aplicacion = 0	then round(_Salario_por_Hora * Horas, 2)
																				when Aplicacion = 1 then round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2)
																				when Aplicacion = 2 then (Veces_Importe * Importe) end  
														end, mn.ISPT 
	from TBL_NOM_PLANTILLAS p inner join TBL_NOM_MOVIMIENTOS_NOMINA mn ON p.ID_Movimiento = mn.ID_Movimiento 
	where Calcular = '1' and Tipo_de_Nomina = _Tipo and bID_Empleado = '0' and bNomina = '1' and Ano = _Ano and Numero_Nomina = _Numero_Nomina and 
		bCompania_Sucursal = '1' and ID_Compania = _ID_Compania and ID_Sucursal = _ID_Sucursal and 
		bNivel_Confianza = '1' and Nivel_de_Confianza = 0 and Nivel_de_Confianza = _Nivel_de_Confianza 
		and p.Inclusiones = '0' and _ID_Empleado not in ( select ID_Empleado from TBL_NOM_PLANTILLAS_EXCLUSIONES where ID_Plantilla = p.ID_Plantilla );
	
	INSERT INTO _TMP_PLANTILLAS_TOTALES -- OK
	select _Tipo, _ID_Empleado, p.ID_Movimiento,  
	/*TOTAL_GRAVADO*/ case when Deduccion = '1' or ISPT = '0' then 0.00 else
										case 	when	Aplicacion = 0 and bExento = '0' then round(_Salario_por_Hora * Horas, 2)
													when 	Aplicacion = 1 and bExento = '0' then round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2)
													when 	Aplicacion = 2 and bExento = '0' then (Veces_Importe * Importe)
													when	Aplicacion = 0 and bExento = '1' then	case	when round(_Salario_por_Hora * Horas, 2) > Exento then round(_Salario_por_Hora * Horas, 2) - Exento
																																					else 0.00 end
													when 	Aplicacion = 1 and bExento = '1' then case	when round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2) > Exento then round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2) - Exento
																																					else 0.00 end
													when 	Aplicacion = 2 and bExento = '1' then case	when (Veces_Importe * Importe) > Exento then (Veces_Importe * Importe) - Exento 
																																					else 0.00 end
											else 0.00 end end,
	/*TOTAL_EXENTO*/ 	case 	when Deduccion = '1' or (ISPT = '1' and bExento = '0') then 0.00 
								when Deduccion = '0' and ISPT = '0' then -- todo lo mandar√° al exento (ignora si hay un importe m√°ximo exento o no)
									case 	when Aplicacion = 0 then round(_Salario_por_Hora * Horas, 2)
											when Aplicacion = 1 then round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2)
											when Aplicacion = 2 then (Veces_Importe * Importe) end  
								else -- Es percepci√≥n que Incluye un importe m√°ximo exento...... La parte gravada ya quedo en lo gravado en la columna anterior

									case 	when	Aplicacion = 0 	then	case	when round(_Salario_por_Hora * Horas, 2) > Exento then Exento
																					else round(_Salario_por_Hora * Horas, 2) end
											when 	Aplicacion = 1 	then 	case	when round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2) > Exento then Exento
																					else round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2) end
											when 	Aplicacion = 2 	then 	case	when (Veces_Importe * Importe) > Exento then Exento
																					else (Veces_Importe * Importe) end
											else 0.00 
									end
							 	end,
	/*TOTAL_DEDUCCION*/ case 	when Deduccion = '0' then	0.00
													 	else	case 	when Aplicacion = 0	then round(_Salario_por_Hora * Horas, 2)
																				when Aplicacion = 1 then round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2)
																				when Aplicacion = 2 then (Veces_Importe * Importe) end  
														end, mn.ISPT 
	from TBL_NOM_PLANTILLAS p inner join TBL_NOM_MOVIMIENTOS_NOMINA mn ON p.ID_Movimiento = mn.ID_Movimiento 
	where Calcular = '1' and Tipo_de_Nomina = _Tipo and bID_Empleado = '0' and bNomina = '1' and Ano = _Ano and Numero_Nomina = _Numero_Nomina and 
		bCompania_Sucursal = '1' and ID_Compania = _ID_Compania and ID_Sucursal = _ID_Sucursal and 
		bNivel_Confianza = '1' and Nivel_de_Confianza = 0 and Nivel_de_Confianza = _Nivel_de_Confianza 
		and p.Inclusiones = '1' and _ID_Empleado in ( select ID_Empleado from TBL_NOM_PLANTILLAS_EXCLUSIONES where ID_Plantilla = p.ID_Plantilla );
	
	--CALCULA LAS DE NOMINA XX COMPANIA_SUCURSAL XX SINDICALIZADOS
	INSERT INTO _TMP_PLANTILLAS_TOTALES -- OK
	select _Tipo, _ID_Empleado, p.ID_Movimiento,  
	/*TOTAL_GRAVADO*/ case when Deduccion = '1' or ISPT = '0' then 0.00 else
										case 	when	Aplicacion = 0 and bExento = '0' then round(_Salario_por_Hora * Horas, 2)
													when 	Aplicacion = 1 and bExento = '0' then round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2)
													when 	Aplicacion = 2 and bExento = '0' then (Veces_Importe * Importe)
													when	Aplicacion = 0 and bExento = '1' then	case	when round(_Salario_por_Hora * Horas, 2) > Exento then round(_Salario_por_Hora * Horas, 2) - Exento
																																					else 0.00 end
													when 	Aplicacion = 1 and bExento = '1' then case	when round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2) > Exento then round(_Salario_Diario * Dias, 2) - Exento
																																					else 0.00 end
													when 	Aplicacion = 2 and bExento = '1' then case	when (Veces_Importe * Importe) > Exento then (Veces_Importe * Importe) - Exento 
																																					else 0.00 end
											else 0.00 end end,
	/*TOTAL_EXENTO*/ 	case 	when Deduccion = '1' or (ISPT = '1' and bExento = '0') then 0.00 
								when Deduccion = '0' and ISPT = '0' then -- todo lo mandar√° al exento (ignora si hay un importe m√°ximo exento o no)
									case 	when Aplicacion = 0 then round(_Salario_por_Hora * Horas, 2)
											when Aplicacion = 1 then round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2)
											when Aplicacion = 2 then (Veces_Importe * Importe) end  
								else -- Es percepci√≥n que Incluye un importe m√°ximo exento...... La parte gravada ya quedo en lo gravado en la columna anterior

									case 	when	Aplicacion = 0 	then	case	when round(_Salario_por_Hora * Horas, 2) > Exento then Exento
																					else round(_Salario_por_Hora * Horas, 2) end
											when 	Aplicacion = 1 	then 	case	when round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2) > Exento then Exento
																					else round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2) end
											when 	Aplicacion = 2 	then 	case	when (Veces_Importe * Importe) > Exento then Exento
																					else (Veces_Importe * Importe) end
											else 0.00 
									end
							 	end,
	/*TOTAL_DEDUCCION*/ case 	when Deduccion = '0' then	0.00
													 	else	case 	when Aplicacion = 0	then round(_Salario_por_Hora * Horas, 2)
																				when Aplicacion = 1 then round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2)
																				when Aplicacion = 2 then (Veces_Importe * Importe) end  
														end, mn.ISPT 
	from TBL_NOM_PLANTILLAS p inner join TBL_NOM_MOVIMIENTOS_NOMINA mn ON p.ID_Movimiento = mn.ID_Movimiento 
	where Calcular = '1' and Tipo_de_Nomina = _Tipo and bID_Empleado = '0' and bNomina = '1' and Ano = _Ano and Numero_Nomina = _Numero_Nomina and 
		bCompania_Sucursal = '1' and ID_Compania = _ID_Compania and ID_Sucursal = _ID_Sucursal and 
		bNivel_Confianza = '1' and Nivel_de_Confianza = 1 and Nivel_de_Confianza = _Nivel_de_Confianza 
		and p.Inclusiones = '0' and _ID_Empleado not in ( select ID_Empleado from TBL_NOM_PLANTILLAS_EXCLUSIONES where ID_Plantilla = p.ID_Plantilla );
	
	INSERT INTO _TMP_PLANTILLAS_TOTALES -- OK
	select _Tipo, _ID_Empleado, p.ID_Movimiento,  
	/*TOTAL_GRAVADO*/ case when Deduccion = '1' or ISPT = '0' then 0.00 else
										case 	when	Aplicacion = 0 and bExento = '0' then round(_Salario_por_Hora * Horas, 2)
													when 	Aplicacion = 1 and bExento = '0' then round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2)
													when 	Aplicacion = 2 and bExento = '0' then (Veces_Importe * Importe)
													when	Aplicacion = 0 and bExento = '1' then	case	when round(_Salario_por_Hora * Horas, 2) > Exento then round(_Salario_por_Hora * Horas, 2) - Exento
																																					else 0.00 end
													when 	Aplicacion = 1 and bExento = '1' then case	when round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2) > Exento then round(_Salario_Diario * Dias, 2) - Exento
																																					else 0.00 end
													when 	Aplicacion = 2 and bExento = '1' then case	when (Veces_Importe * Importe) > Exento then (Veces_Importe * Importe) - Exento 
																																					else 0.00 end
											else 0.00 end end,
	/*TOTAL_EXENTO*/ 	case 	when Deduccion = '1' or (ISPT = '1' and bExento = '0') then 0.00 
								when Deduccion = '0' and ISPT = '0' then -- todo lo mandar√° al exento (ignora si hay un importe m√°ximo exento o no)
									case 	when Aplicacion = 0 then round(_Salario_por_Hora * Horas, 2)
											when Aplicacion = 1 then round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2)
											when Aplicacion = 2 then (Veces_Importe * Importe) end  
								else -- Es percepci√≥n que Incluye un importe m√°ximo exento...... La parte gravada ya quedo en lo gravado en la columna anterior

									case 	when	Aplicacion = 0 	then	case	when round(_Salario_por_Hora * Horas, 2) > Exento then Exento
																					else round(_Salario_por_Hora * Horas, 2) end
											when 	Aplicacion = 1 	then 	case	when round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2) > Exento then Exento
																					else round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2) end
											when 	Aplicacion = 2 	then 	case	when (Veces_Importe * Importe) > Exento then Exento
																					else (Veces_Importe * Importe) end
											else 0.00 
									end
							 	end,
	/*TOTAL_DEDUCCION*/ case 	when Deduccion = '0' then	0.00
													 	else	case 	when Aplicacion = 0	then round(_Salario_por_Hora * Horas, 2)
																				when Aplicacion = 1 then round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2)
																				when Aplicacion = 2 then (Veces_Importe * Importe) end  
														end, mn.ISPT 
	from TBL_NOM_PLANTILLAS p inner join TBL_NOM_MOVIMIENTOS_NOMINA mn ON p.ID_Movimiento = mn.ID_Movimiento 
	where Calcular = '1' and Tipo_de_Nomina = _Tipo and bID_Empleado = '0' and bNomina = '1' and Ano = _Ano and Numero_Nomina = _Numero_Nomina and 
		bCompania_Sucursal = '1' and ID_Compania = _ID_Compania and ID_Sucursal = _ID_Sucursal and 
		bNivel_Confianza = '1' and Nivel_de_Confianza = 1 and Nivel_de_Confianza = _Nivel_de_Confianza 
		and p.Inclusiones = '1' and _ID_Empleado in ( select ID_Empleado from TBL_NOM_PLANTILLAS_EXCLUSIONES where ID_Plantilla = p.ID_Plantilla );
	
	--CALCULA LAS DE NOMINA XX NO SINDICALIZADOS
	INSERT INTO _TMP_PLANTILLAS_TOTALES -- OK EMPIEZA AQUI 
	select _Tipo, _ID_Empleado, p.ID_Movimiento,  
	/*TOTAL_GRAVADO*/ case when Deduccion = '1' or ISPT = '0' then 0.00 else
										case 	when	Aplicacion = 0 and bExento = '0' then round(_Salario_por_Hora * Horas, 2)
													when 	Aplicacion = 1 and bExento = '0' then round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2)
													when 	Aplicacion = 2 and bExento = '0' then (Veces_Importe * Importe)
													when	Aplicacion = 0 and bExento = '1' then	case	when round(_Salario_por_Hora * Horas, 2) > Exento then round(_Salario_por_Hora * Horas, 2) - Exento
																																					else 0.00 end
													when 	Aplicacion = 1 and bExento = '1' then case	when round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2) > Exento then round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2) - Exento
																																					else 0.00 end
													when 	Aplicacion = 2 and bExento = '1' then case	when (Veces_Importe * Importe) > Exento then (Veces_Importe * Importe) - Exento 
																																					else 0.00 end
											else 0.00 end end,
	/*TOTAL_EXENTO*/ 	case 	when Deduccion = '1' or (ISPT = '1' and bExento = '0') then 0.00 
								when Deduccion = '0' and ISPT = '0' then -- todo lo mandar√° al exento (ignora si hay un importe m√°ximo exento o no)
									case 	when Aplicacion = 0 then round(_Salario_por_Hora * Horas, 2)
											when Aplicacion = 1 then round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2)
											when Aplicacion = 2 then (Veces_Importe * Importe) end  
								else -- Es percepci√≥n que Incluye un importe m√°ximo exento...... La parte gravada ya quedo en lo gravado en la columna anterior

									case 	when	Aplicacion = 0 	then	case	when round(_Salario_por_Hora * Horas, 2) > Exento then Exento
																					else round(_Salario_por_Hora * Horas, 2) end
											when 	Aplicacion = 1 	then 	case	when round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2) > Exento then Exento
																					else round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2) end
											when 	Aplicacion = 2 	then 	case	when (Veces_Importe * Importe) > Exento then Exento
																					else (Veces_Importe * Importe) end
											else 0.00 
									end
							 	end,
	/*TOTAL_DEDUCCION*/ case 	when Deduccion = '0' then	0.00
													 	else	case 	when Aplicacion = 0	then round(_Salario_por_Hora * Horas, 2)
																				when Aplicacion = 1 then round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2)
																				when Aplicacion = 2 then (Veces_Importe * Importe) end  
														end, mn.ISPT 
	from TBL_NOM_PLANTILLAS p inner join TBL_NOM_MOVIMIENTOS_NOMINA mn ON p.ID_Movimiento = mn.ID_Movimiento 
	where Calcular = '1' and Tipo_de_Nomina = _Tipo and bID_Empleado = '0' and bNomina = '1' and Ano = _Ano and Numero_Nomina = _Numero_Nomina and 
		bCompania_Sucursal = '0' and 
		bNivel_Confianza = '1' and Nivel_de_Confianza = 0 and Nivel_de_Confianza = _Nivel_de_Confianza 
		and p.Inclusiones = '0' and _ID_Empleado not in ( select ID_Empleado from TBL_NOM_PLANTILLAS_EXCLUSIONES where ID_Plantilla = p.ID_Plantilla );
	
	INSERT INTO _TMP_PLANTILLAS_TOTALES -- OK EMPIEZA AQUI 
	select _Tipo, _ID_Empleado, p.ID_Movimiento,  
	/*TOTAL_GRAVADO*/ case when Deduccion = '1' or ISPT = '0' then 0.00 else
										case 	when	Aplicacion = 0 and bExento = '0' then round(_Salario_por_Hora * Horas, 2)
													when 	Aplicacion = 1 and bExento = '0' then round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2)
													when 	Aplicacion = 2 and bExento = '0' then (Veces_Importe * Importe)
													when	Aplicacion = 0 and bExento = '1' then	case	when round(_Salario_por_Hora * Horas, 2) > Exento then round(_Salario_por_Hora * Horas, 2) - Exento
																																					else 0.00 end
													when 	Aplicacion = 1 and bExento = '1' then case	when round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2) > Exento then round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2) - Exento
																																					else 0.00 end
													when 	Aplicacion = 2 and bExento = '1' then case	when (Veces_Importe * Importe) > Exento then (Veces_Importe * Importe) - Exento 
																																					else 0.00 end
											else 0.00 end end,
	/*TOTAL_EXENTO*/ 	case 	when Deduccion = '1' or (ISPT = '1' and bExento = '0') then 0.00 
								when Deduccion = '0' and ISPT = '0' then -- todo lo mandar√° al exento (ignora si hay un importe m√°ximo exento o no)
									case 	when Aplicacion = 0 then round(_Salario_por_Hora * Horas, 2)
											when Aplicacion = 1 then round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2)
											when Aplicacion = 2 then (Veces_Importe * Importe) end  
								else -- Es percepci√≥n que Incluye un importe m√°ximo exento...... La parte gravada ya quedo en lo gravado en la columna anterior

									case 	when	Aplicacion = 0 	then	case	when round(_Salario_por_Hora * Horas, 2) > Exento then Exento
																					else round(_Salario_por_Hora * Horas, 2) end
											when 	Aplicacion = 1 	then 	case	when round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2) > Exento then Exento
																					else round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2) end
											when 	Aplicacion = 2 	then 	case	when (Veces_Importe * Importe) > Exento then Exento
																					else (Veces_Importe * Importe) end
											else 0.00 
									end
							 	end,
	/*TOTAL_DEDUCCION*/ case 	when Deduccion = '0' then	0.00
													 	else	case 	when Aplicacion = 0	then round(_Salario_por_Hora * Horas, 2)
																				when Aplicacion = 1 then round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2)
																				when Aplicacion = 2 then (Veces_Importe * Importe) end  
														end, mn.ISPT 
	from TBL_NOM_PLANTILLAS p inner join TBL_NOM_MOVIMIENTOS_NOMINA mn ON p.ID_Movimiento = mn.ID_Movimiento 
	where Calcular = '1' and Tipo_de_Nomina = _Tipo and bID_Empleado = '0' and bNomina = '1' and Ano = _Ano and Numero_Nomina = _Numero_Nomina and 
		bCompania_Sucursal = '0' and 
		bNivel_Confianza = '1' and Nivel_de_Confianza = 0 and Nivel_de_Confianza = _Nivel_de_Confianza 
		and p.Inclusiones = '1' and _ID_Empleado in ( select ID_Empleado from TBL_NOM_PLANTILLAS_EXCLUSIONES where ID_Plantilla = p.ID_Plantilla );
	
	--CALCULA LAS DE NOMINA XX SINDICALIZADOS
	INSERT INTO _TMP_PLANTILLAS_TOTALES -- OK
	select _Tipo, _ID_Empleado, p.ID_Movimiento,  
	/*TOTAL_GRAVADO*/ case when Deduccion = '1' or ISPT = '0' then 0.00 else
										case 	when	Aplicacion = 0 and bExento = '0' then round(_Salario_por_Hora * Horas, 2)
													when 	Aplicacion = 1 and bExento = '0' then round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2)
													when 	Aplicacion = 2 and bExento = '0' then (Veces_Importe * Importe)
													when	Aplicacion = 0 and bExento = '1' then	case	when round(_Salario_por_Hora * Horas, 2) > Exento then round(_Salario_por_Hora * Horas, 2) - Exento
																																					else 0.00 end
													when 	Aplicacion = 1 and bExento = '1' then case	when round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2) > Exento then round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2) - Exento
																																					else 0.00 end
													when 	Aplicacion = 2 and bExento = '1' then case	when (Veces_Importe * Importe) > Exento then (Veces_Importe * Importe) - Exento 
																																					else 0.00 end
											else 0.00 end end,
	/*TOTAL_EXENTO*/ 	case 	when Deduccion = '1' or (ISPT = '1' and bExento = '0') then 0.00 
								when Deduccion = '0' and ISPT = '0' then -- todo lo mandar√° al exento (ignora si hay un importe m√°ximo exento o no)
									case 	when Aplicacion = 0 then round(_Salario_por_Hora * Horas, 2)
											when Aplicacion = 1 then round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2)
											when Aplicacion = 2 then (Veces_Importe * Importe) end  
								else -- Es percepci√≥n que Incluye un importe m√°ximo exento...... La parte gravada ya quedo en lo gravado en la columna anterior

									case 	when	Aplicacion = 0 	then	case	when round(_Salario_por_Hora * Horas, 2) > Exento then Exento
																					else round(_Salario_por_Hora * Horas, 2) end
											when 	Aplicacion = 1 	then 	case	when round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2) > Exento then Exento
																					else round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2) end
											when 	Aplicacion = 2 	then 	case	when (Veces_Importe * Importe) > Exento then Exento
																					else (Veces_Importe * Importe) end
											else 0.00 
									end
							 	end,
	/*TOTAL_DEDUCCION*/ case 	when Deduccion = '0' then	0.00
													 	else	case 	when Aplicacion = 0	then round(_Salario_por_Hora * Horas, 2)
																				when Aplicacion = 1 then round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2)
																				when Aplicacion = 2 then (Veces_Importe * Importe) end  
														end, mn.ISPT 
	from TBL_NOM_PLANTILLAS p inner join TBL_NOM_MOVIMIENTOS_NOMINA mn ON p.ID_Movimiento = mn.ID_Movimiento 
	where Calcular = '1' and Tipo_de_Nomina = _Tipo and bID_Empleado = '0' and bNomina = '1' and Ano = _Ano and Numero_Nomina = _Numero_Nomina and 
		bCompania_Sucursal = '0' and 
		bNivel_Confianza = '1' and Nivel_de_Confianza = 1 and Nivel_de_Confianza = _Nivel_de_Confianza 
		and p.Inclusiones = '0' and _ID_Empleado not in ( select ID_Empleado from TBL_NOM_PLANTILLAS_EXCLUSIONES where ID_Plantilla = p.ID_Plantilla );
	
	INSERT INTO _TMP_PLANTILLAS_TOTALES -- OK
	select _Tipo, _ID_Empleado, p.ID_Movimiento,  
	/*TOTAL_GRAVADO*/ case when Deduccion = '1' or ISPT = '0' then 0.00 else
										case 	when	Aplicacion = 0 and bExento = '0' then round(_Salario_por_Hora * Horas, 2)
													when 	Aplicacion = 1 and bExento = '0' then round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2)
													when 	Aplicacion = 2 and bExento = '0' then (Veces_Importe * Importe)
													when	Aplicacion = 0 and bExento = '1' then	case	when round(_Salario_por_Hora * Horas, 2) > Exento then round(_Salario_por_Hora * Horas, 2) - Exento
																																					else 0.00 end
													when 	Aplicacion = 1 and bExento = '1' then case	when round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2) > Exento then round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2) - Exento
																																					else 0.00 end
													when 	Aplicacion = 2 and bExento = '1' then case	when (Veces_Importe * Importe) > Exento then (Veces_Importe * Importe) - Exento 
																																					else 0.00 end
											else 0.00 end end,
	/*TOTAL_EXENTO*/ 	case 	when Deduccion = '1' or (ISPT = '1' and bExento = '0') then 0.00 
								when Deduccion = '0' and ISPT = '0' then -- todo lo mandar√° al exento (ignora si hay un importe m√°ximo exento o no)
									case 	when Aplicacion = 0 then round(_Salario_por_Hora * Horas, 2)
											when Aplicacion = 1 then round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2)
											when Aplicacion = 2 then (Veces_Importe * Importe) end  
								else -- Es percepci√≥n que Incluye un importe m√°ximo exento...... La parte gravada ya quedo en lo gravado en la columna anterior

									case 	when	Aplicacion = 0 	then	case	when round(_Salario_por_Hora * Horas, 2) > Exento then Exento
																					else round(_Salario_por_Hora * Horas, 2) end
											when 	Aplicacion = 1 	then 	case	when round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2) > Exento then Exento
																					else round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2) end
											when 	Aplicacion = 2 	then 	case	when (Veces_Importe * Importe) > Exento then Exento
																					else (Veces_Importe * Importe) end
											else 0.00 
									end
							 	end,
	/*TOTAL_DEDUCCION*/ case 	when Deduccion = '0' then	0.00
													 	else	case 	when Aplicacion = 0	then round(_Salario_por_Hora * Horas, 2)
																				when Aplicacion = 1 then round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2)
																				when Aplicacion = 2 then (Veces_Importe * Importe) end  
														end, mn.ISPT 
	from TBL_NOM_PLANTILLAS p inner join TBL_NOM_MOVIMIENTOS_NOMINA mn ON p.ID_Movimiento = mn.ID_Movimiento 
	where Calcular = '1' and Tipo_de_Nomina = _Tipo and bID_Empleado = '0' and bNomina = '1' and Ano = _Ano and Numero_Nomina = _Numero_Nomina and 
		bCompania_Sucursal = '0' and 
		bNivel_Confianza = '1' and Nivel_de_Confianza = 1 and Nivel_de_Confianza = _Nivel_de_Confianza 
		and p.Inclusiones = '1' and _ID_Empleado in ( select ID_Empleado from TBL_NOM_PLANTILLAS_EXCLUSIONES where ID_Plantilla = p.ID_Plantilla );
	
	--CALCULA LAS DE COMPANIA_SUCURSAL XX 
	INSERT INTO _TMP_PLANTILLAS_TOTALES
	select _Tipo, _ID_Empleado, p.ID_Movimiento,  
	/*TOTAL_GRAVADO*/ case when Deduccion = '1' or ISPT = '0' then 0.00 else
										case 	when	Aplicacion = 0 and bExento = '0' then round(_Salario_por_Hora * Horas, 2)
													when 	Aplicacion = 1 and bExento = '0' then round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2)
													when 	Aplicacion = 2 and bExento = '0' then (Veces_Importe * Importe)
													when	Aplicacion = 0 and bExento = '1' then	case	when round(_Salario_por_Hora * Horas, 2) > Exento then round(_Salario_por_Hora * Horas, 2) - Exento
																																					else 0.00 end
													when 	Aplicacion = 1 and bExento = '1' then case	when round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2) > Exento then round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2) - Exento
																																					else 0.00 end
													when 	Aplicacion = 2 and bExento = '1' then case	when (Veces_Importe * Importe) > Exento then (Veces_Importe * Importe) - Exento 
																																					else 0.00 end
											else 0.00 end end,
	/*TOTAL_EXENTO*/ 	case 	when Deduccion = '1' or (ISPT = '1' and bExento = '0') then 0.00 
								when Deduccion = '0' and ISPT = '0' then -- todo lo mandar√° al exento (ignora si hay un importe m√°ximo exento o no)
									case 	when Aplicacion = 0 then round(_Salario_por_Hora * Horas, 2)
											when Aplicacion = 1 then round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2)
											when Aplicacion = 2 then (Veces_Importe * Importe) end  
								else -- Es percepci√≥n que Incluye un importe m√°ximo exento...... La parte gravada ya quedo en lo gravado en la columna anterior

									case 	when	Aplicacion = 0 	then	case	when round(_Salario_por_Hora * Horas, 2) > Exento then Exento
																					else round(_Salario_por_Hora * Horas, 2) end
											when 	Aplicacion = 1 	then 	case	when round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2) > Exento then Exento
																					else round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2) end
											when 	Aplicacion = 2 	then 	case	when (Veces_Importe * Importe) > Exento then Exento
																					else (Veces_Importe * Importe) end
											else 0.00 
									end
							 	end,
	/*TOTAL_DEDUCCION*/ case 	when Deduccion = '0' then	0.00
													 	else	case 	when Aplicacion = 0	then round(_Salario_por_Hora * Horas, 2)
																				when Aplicacion = 1 then round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2)
																				when Aplicacion = 2 then (Veces_Importe * Importe) end  
														end, mn.ISPT 
	from TBL_NOM_PLANTILLAS p inner join TBL_NOM_MOVIMIENTOS_NOMINA mn ON p.ID_Movimiento = mn.ID_Movimiento 
	where Calcular = '1' and Tipo_de_Nomina = _Tipo and bID_Empleado = '0' and bNomina = '0'
		and bCompania_Sucursal = '1' and ID_Compania = _ID_Compania and ID_Sucursal = _ID_Sucursal
		and bNivel_Confianza = '0'
		and p.Inclusiones = '0' and _ID_Empleado not in ( select ID_Empleado from TBL_NOM_PLANTILLAS_EXCLUSIONES where ID_Plantilla = p.ID_Plantilla );
	
	INSERT INTO _TMP_PLANTILLAS_TOTALES
	select _Tipo, _ID_Empleado, p.ID_Movimiento,  
	/*TOTAL_GRAVADO*/ case when Deduccion = '1' or ISPT = '0' then 0.00 else
										case 	when	Aplicacion = 0 and bExento = '0' then round(_Salario_por_Hora * Horas, 2)
													when 	Aplicacion = 1 and bExento = '0' then round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2)
													when 	Aplicacion = 2 and bExento = '0' then (Veces_Importe * Importe)
													when	Aplicacion = 0 and bExento = '1' then	case	when round(_Salario_por_Hora * Horas, 2) > Exento then round(_Salario_por_Hora * Horas, 2) - Exento
																																					else 0.00 end
													when 	Aplicacion = 1 and bExento = '1' then case	when round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2) > Exento then round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2) - Exento
																																					else 0.00 end
													when 	Aplicacion = 2 and bExento = '1' then case	when (Veces_Importe * Importe) > Exento then (Veces_Importe * Importe) - Exento 
																																					else 0.00 end
											else 0.00 end end,
	/*TOTAL_EXENTO*/ 	case 	when Deduccion = '1' or (ISPT = '1' and bExento = '0') then 0.00 
								when Deduccion = '0' and ISPT = '0' then -- todo lo mandar√° al exento (ignora si hay un importe m√°ximo exento o no)
									case 	when Aplicacion = 0 then round(_Salario_por_Hora * Horas, 2)
											when Aplicacion = 1 then round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2)
											when Aplicacion = 2 then (Veces_Importe * Importe) end  
								else -- Es percepci√≥n que Incluye un importe m√°ximo exento...... La parte gravada ya quedo en lo gravado en la columna anterior

									case 	when	Aplicacion = 0 	then	case	when round(_Salario_por_Hora * Horas, 2) > Exento then Exento
																					else round(_Salario_por_Hora * Horas, 2) end
											when 	Aplicacion = 1 	then 	case	when round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2) > Exento then Exento
																					else round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2) end
											when 	Aplicacion = 2 	then 	case	when (Veces_Importe * Importe) > Exento then Exento
																					else (Veces_Importe * Importe) end
											else 0.00 
									end
							 	end,
	/*TOTAL_DEDUCCION*/ case 	when Deduccion = '0' then	0.00
													 	else	case 	when Aplicacion = 0	then round(_Salario_por_Hora * Horas, 2)
																				when Aplicacion = 1 then round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2)
																				when Aplicacion = 2 then (Veces_Importe * Importe) end  
														end, mn.ISPT 
	from TBL_NOM_PLANTILLAS p inner join TBL_NOM_MOVIMIENTOS_NOMINA mn ON p.ID_Movimiento = mn.ID_Movimiento 
	where Calcular = '1' and Tipo_de_Nomina = _Tipo and bID_Empleado = '0' and bNomina = '0'
		and bCompania_Sucursal = '1' and ID_Compania = _ID_Compania and ID_Sucursal = _ID_Sucursal
		and bNivel_Confianza = '0'
		and p.Inclusiones = '1' and _ID_Empleado in ( select ID_Empleado from TBL_NOM_PLANTILLAS_EXCLUSIONES where ID_Plantilla = p.ID_Plantilla );
	
	--CALCULA LAS DE COMPANIA_SUCURSAL XX NO_SINDICALIZADOS
	INSERT INTO _TMP_PLANTILLAS_TOTALES
	select _Tipo, _ID_Empleado, p.ID_Movimiento,  
	/*TOTAL_GRAVADO*/ case when Deduccion = '1' or ISPT = '0' then 0.00 else
										case 	when	Aplicacion = 0 and bExento = '0' then round(_Salario_por_Hora * Horas, 2)
													when 	Aplicacion = 1 and bExento = '0' then round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2)
													when 	Aplicacion = 2 and bExento = '0' then (Veces_Importe * Importe)
													when	Aplicacion = 0 and bExento = '1' then	case	when round(_Salario_por_Hora * Horas, 2) > Exento then round(_Salario_por_Hora * Horas, 2) - Exento
																																					else 0.00 end
													when 	Aplicacion = 1 and bExento = '1' then case	when round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2) > Exento then round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2) - Exento
																																					else 0.00 end
													when 	Aplicacion = 2 and bExento = '1' then case	when (Veces_Importe * Importe) > Exento then (Veces_Importe * Importe) - Exento 
																																					else 0.00 end
											else 0.00 end end,
	/*TOTAL_EXENTO*/ 	case 	when Deduccion = '1' or (ISPT = '1' and bExento = '0') then 0.00 
								when Deduccion = '0' and ISPT = '0' then -- todo lo mandar√° al exento (ignora si hay un importe m√°ximo exento o no)
									case 	when Aplicacion = 0 then round(_Salario_por_Hora * Horas, 2)
											when Aplicacion = 1 then round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2)
											when Aplicacion = 2 then (Veces_Importe * Importe) end  
								else -- Es percepci√≥n que Incluye un importe m√°ximo exento...... La parte gravada ya quedo en lo gravado en la columna anterior

									case 	when	Aplicacion = 0 	then	case	when round(_Salario_por_Hora * Horas, 2) > Exento then Exento
																					else round(_Salario_por_Hora * Horas, 2) end
											when 	Aplicacion = 1 	then 	case	when round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2) > Exento then Exento
																					else round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2) end
											when 	Aplicacion = 2 	then 	case	when (Veces_Importe * Importe) > Exento then Exento
																					else (Veces_Importe * Importe) end
											else 0.00 
									end
							 	end,
	/*TOTAL_DEDUCCION*/ case 	when Deduccion = '0' then	0.00
													 	else	case 	when Aplicacion = 0	then round(_Salario_por_Hora * Horas, 2)
																				when Aplicacion = 1 then round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2)
																				when Aplicacion = 2 then (Veces_Importe * Importe) end  
														end, mn.ISPT 
	from TBL_NOM_PLANTILLAS p inner join TBL_NOM_MOVIMIENTOS_NOMINA mn ON p.ID_Movimiento = mn.ID_Movimiento 
	where Calcular = '1' and Tipo_de_Nomina = _Tipo and bID_Empleado = '0' and bNomina = '0'
		and bCompania_Sucursal = '1' and ID_Compania = _ID_Compania and ID_Sucursal = _ID_Sucursal
		and bNivel_Confianza = '1' and Nivel_de_Confianza = 0 and Nivel_de_Confianza = _Nivel_de_Confianza 
		and p.Inclusiones = '0' and _ID_Empleado not in ( select ID_Empleado from TBL_NOM_PLANTILLAS_EXCLUSIONES where ID_Plantilla = p.ID_Plantilla );
	
	INSERT INTO _TMP_PLANTILLAS_TOTALES
	select _Tipo, _ID_Empleado, p.ID_Movimiento,  
	/*TOTAL_GRAVADO*/ case when Deduccion = '1' or ISPT = '0' then 0.00 else
										case 	when	Aplicacion = 0 and bExento = '0' then round(_Salario_por_Hora * Horas, 2)
													when 	Aplicacion = 1 and bExento = '0' then round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2)
													when 	Aplicacion = 2 and bExento = '0' then (Veces_Importe * Importe)
													when	Aplicacion = 0 and bExento = '1' then	case	when round(_Salario_por_Hora * Horas, 2) > Exento then round(_Salario_por_Hora * Horas, 2) - Exento
																																					else 0.00 end
													when 	Aplicacion = 1 and bExento = '1' then case	when round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2) > Exento then round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2) - Exento
																																					else 0.00 end
													when 	Aplicacion = 2 and bExento = '1' then case	when (Veces_Importe * Importe) > Exento then (Veces_Importe * Importe) - Exento 
																																					else 0.00 end
											else 0.00 end end,
	/*TOTAL_EXENTO*/ 	case 	when Deduccion = '1' or (ISPT = '1' and bExento = '0') then 0.00 
								when Deduccion = '0' and ISPT = '0' then -- todo lo mandar√° al exento (ignora si hay un importe m√°ximo exento o no)
									case 	when Aplicacion = 0 then round(_Salario_por_Hora * Horas, 2)
											when Aplicacion = 1 then round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2)
											when Aplicacion = 2 then (Veces_Importe * Importe) end  
								else -- Es percepci√≥n que Incluye un importe m√°ximo exento...... La parte gravada ya quedo en lo gravado en la columna anterior

									case 	when	Aplicacion = 0 	then	case	when round(_Salario_por_Hora * Horas, 2) > Exento then Exento
																					else round(_Salario_por_Hora * Horas, 2) end
											when 	Aplicacion = 1 	then 	case	when round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2) > Exento then Exento
																					else round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2) end
											when 	Aplicacion = 2 	then 	case	when (Veces_Importe * Importe) > Exento then Exento
																					else (Veces_Importe * Importe) end
											else 0.00 
									end
							 	end,
	/*TOTAL_DEDUCCION*/ case 	when Deduccion = '0' then	0.00
													 	else	case 	when Aplicacion = 0	then round(_Salario_por_Hora * Horas, 2)
																				when Aplicacion = 1 then round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2)
																				when Aplicacion = 2 then (Veces_Importe * Importe) end  
														end, mn.ISPT 
	from TBL_NOM_PLANTILLAS p inner join TBL_NOM_MOVIMIENTOS_NOMINA mn ON p.ID_Movimiento = mn.ID_Movimiento 
	where Calcular = '1' and Tipo_de_Nomina = _Tipo and bID_Empleado = '0' and bNomina = '0'
		and bCompania_Sucursal = '1' and ID_Compania = _ID_Compania and ID_Sucursal = _ID_Sucursal
		and bNivel_Confianza = '1' and Nivel_de_Confianza = 0 and Nivel_de_Confianza = _Nivel_de_Confianza 
		and p.Inclusiones = '1' and _ID_Empleado in ( select ID_Empleado from TBL_NOM_PLANTILLAS_EXCLUSIONES where ID_Plantilla = p.ID_Plantilla );
	
	--CALCULA LAS DE COMPANIA_SUCURSAL XX SINDICALIZADOS
	INSERT INTO _TMP_PLANTILLAS_TOTALES
	select _Tipo, _ID_Empleado, p.ID_Movimiento,  
	/*TOTAL_GRAVADO*/ case when Deduccion = '1' or ISPT = '0' then 0.00 else
										case 	when	Aplicacion = 0 and bExento = '0' then round(_Salario_por_Hora * Horas, 2)
													when 	Aplicacion = 1 and bExento = '0' then round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2)
													when 	Aplicacion = 2 and bExento = '0' then (Veces_Importe * Importe)
													when	Aplicacion = 0 and bExento = '1' then	case	when round(_Salario_por_Hora * Horas, 2) > Exento then round(_Salario_por_Hora * Horas, 2) - Exento
																																					else 0.00 end
													when 	Aplicacion = 1 and bExento = '1' then case	when round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2) > Exento then round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2) - Exento
																																					else 0.00 end
													when 	Aplicacion = 2 and bExento = '1' then case	when (Veces_Importe * Importe) > Exento then (Veces_Importe * Importe) - Exento 
																																					else 0.00 end
											else 0.00 end end,
	/*TOTAL_EXENTO*/ 	case 	when Deduccion = '1' or (ISPT = '1' and bExento = '0') then 0.00 
								when Deduccion = '0' and ISPT = '0' then -- todo lo mandar√° al exento (ignora si hay un importe m√°ximo exento o no)
									case 	when Aplicacion = 0 then round(_Salario_por_Hora * Horas, 2)
											when Aplicacion = 1 then round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2)
											when Aplicacion = 2 then (Veces_Importe * Importe) end  
								else -- Es percepci√≥n que Incluye un importe m√°ximo exento...... La parte gravada ya quedo en lo gravado en la columna anterior

									case 	when	Aplicacion = 0 	then	case	when round(_Salario_por_Hora * Horas, 2) > Exento then Exento
																					else round(_Salario_por_Hora * Horas, 2) end
											when 	Aplicacion = 1 	then 	case	when round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2) > Exento then Exento
																					else round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2) end
											when 	Aplicacion = 2 	then 	case	when (Veces_Importe * Importe) > Exento then Exento
																					else (Veces_Importe * Importe) end
											else 0.00 
									end
							 	end,
	/*TOTAL_DEDUCCION*/ case 	when Deduccion = '0' then	0.00
													 	else	case 	when Aplicacion = 0	then round(_Salario_por_Hora * Horas, 2)
																				when Aplicacion = 1 then round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2)
																				when Aplicacion = 2 then (Veces_Importe * Importe) end  
														end, mn.ISPT 
	from TBL_NOM_PLANTILLAS p inner join TBL_NOM_MOVIMIENTOS_NOMINA mn ON p.ID_Movimiento = mn.ID_Movimiento 
	where Calcular = '1' and Tipo_de_Nomina = _Tipo and bID_Empleado = '0' and bNomina = '0'
		and bCompania_Sucursal = '1' and ID_Compania = _ID_Compania and ID_Sucursal = _ID_Sucursal
		and bNivel_Confianza = '1' and Nivel_de_Confianza = 1 and Nivel_de_Confianza = _Nivel_de_Confianza 
		and p.Inclusiones = '0' and _ID_Empleado not in ( select ID_Empleado from TBL_NOM_PLANTILLAS_EXCLUSIONES where ID_Plantilla = p.ID_Plantilla );
	
	INSERT INTO _TMP_PLANTILLAS_TOTALES
	select _Tipo, _ID_Empleado, p.ID_Movimiento,  
	/*TOTAL_GRAVADO*/ case when Deduccion = '1' or ISPT = '0' then 0.00 else
										case 	when	Aplicacion = 0 and bExento = '0' then round(_Salario_por_Hora * Horas, 2)
													when 	Aplicacion = 1 and bExento = '0' then round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2)
													when 	Aplicacion = 2 and bExento = '0' then (Veces_Importe * Importe)
													when	Aplicacion = 0 and bExento = '1' then	case	when round(_Salario_por_Hora * Horas, 2) > Exento then round(_Salario_por_Hora * Horas, 2) - Exento
																																					else 0.00 end
													when 	Aplicacion = 1 and bExento = '1' then case	when round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2) > Exento then round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2) - Exento
																																					else 0.00 end
													when 	Aplicacion = 2 and bExento = '1' then case	when (Veces_Importe * Importe) > Exento then (Veces_Importe * Importe) - Exento 
																																					else 0.00 end
											else 0.00 end end,
	/*TOTAL_EXENTO*/ 	case 	when Deduccion = '1' or (ISPT = '1' and bExento = '0') then 0.00 
								when Deduccion = '0' and ISPT = '0' then -- todo lo mandar√° al exento (ignora si hay un importe m√°ximo exento o no)
									case 	when Aplicacion = 0 then round(_Salario_por_Hora * Horas, 2)
											when Aplicacion = 1 then round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2)
											when Aplicacion = 2 then (Veces_Importe * Importe) end  
								else -- Es percepci√≥n que Incluye un importe m√°ximo exento...... La parte gravada ya quedo en lo gravado en la columna anterior

									case 	when	Aplicacion = 0 	then	case	when round(_Salario_por_Hora * Horas, 2) > Exento then Exento
																					else round(_Salario_por_Hora * Horas, 2) end
											when 	Aplicacion = 1 	then 	case	when round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2) > Exento then Exento
																					else round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2) end
											when 	Aplicacion = 2 	then 	case	when (Veces_Importe * Importe) > Exento then Exento
																					else (Veces_Importe * Importe) end
											else 0.00 
									end
							 	end,
	/*TOTAL_DEDUCCION*/ case 	when Deduccion = '0' then	0.00
													 	else	case 	when Aplicacion = 0	then round(_Salario_por_Hora * Horas, 2)
																				when Aplicacion = 1 then round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2)
																				when Aplicacion = 2 then (Veces_Importe * Importe) end  
														end, mn.ISPT 
	from TBL_NOM_PLANTILLAS p inner join TBL_NOM_MOVIMIENTOS_NOMINA mn ON p.ID_Movimiento = mn.ID_Movimiento 
	where Calcular = '1' and Tipo_de_Nomina = _Tipo and bID_Empleado = '0' and bNomina = '0'
		and bCompania_Sucursal = '1' and ID_Compania = _ID_Compania and ID_Sucursal = _ID_Sucursal
		and bNivel_Confianza = '1' and Nivel_de_Confianza = 1 and Nivel_de_Confianza = _Nivel_de_Confianza 
		and p.Inclusiones = '1' and _ID_Empleado in ( select ID_Empleado from TBL_NOM_PLANTILLAS_EXCLUSIONES where ID_Plantilla = p.ID_Plantilla );
	
	-- CALCULO TODO NO SINDICALIZADO
	INSERT INTO _TMP_PLANTILLAS_TOTALES
	select _Tipo, _ID_Empleado, p.ID_Movimiento,  
	/*TOTAL_GRAVADO*/ case when Deduccion = '1' or ISPT = '0' then 0.00 else
										case 	when	Aplicacion = 0 and bExento = '0' then round(_Salario_por_Hora * Horas, 2)
													when 	Aplicacion = 1 and bExento = '0' then round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2)
													when 	Aplicacion = 2 and bExento = '0' then (Veces_Importe * Importe)
													when	Aplicacion = 0 and bExento = '1' then	case	when round(_Salario_por_Hora * Horas, 2) > Exento then round(_Salario_por_Hora * Horas, 2) - Exento
																																					else 0.00 end
													when 	Aplicacion = 1 and bExento = '1' then case	when round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2) > Exento then round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2) - Exento
																																					else 0.00 end
													when 	Aplicacion = 2 and bExento = '1' then case	when (Veces_Importe * Importe) > Exento then (Veces_Importe * Importe) - Exento 
																																					else 0.00 end
											else 0.00 end end,
	/*TOTAL_EXENTO*/ 	case 	when Deduccion = '1' or (ISPT = '1' and bExento = '0') then 0.00 
								when Deduccion = '0' and ISPT = '0' then -- todo lo mandar√° al exento (ignora si hay un importe m√°ximo exento o no)
									case 	when Aplicacion = 0 then round(_Salario_por_Hora * Horas, 2)
											when Aplicacion = 1 then round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2)
											when Aplicacion = 2 then (Veces_Importe * Importe) end  
								else -- Es percepci√≥n que Incluye un importe m√°ximo exento...... La parte gravada ya quedo en lo gravado en la columna anterior

									case 	when	Aplicacion = 0 	then	case	when round(_Salario_por_Hora * Horas, 2) > Exento then Exento
																					else round(_Salario_por_Hora * Horas, 2) end
											when 	Aplicacion = 1 	then 	case	when round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2) > Exento then Exento
																					else round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2) end
											when 	Aplicacion = 2 	then 	case	when (Veces_Importe * Importe) > Exento then Exento
																					else (Veces_Importe * Importe) end
											else 0.00 
									end
							 	end,
	/*TOTAL_DEDUCCION*/ case 	when Deduccion = '0' then	0.00
													 	else	case 	when Aplicacion = 0	then round(_Salario_por_Hora * Horas, 2)
																				when Aplicacion = 1 then round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2)
																				when Aplicacion = 2 then (Veces_Importe * Importe) end  
														end, mn.ISPT 
	from TBL_NOM_PLANTILLAS p inner join TBL_NOM_MOVIMIENTOS_NOMINA mn ON p.ID_Movimiento = mn.ID_Movimiento 
	where Calcular = '1' and Tipo_de_Nomina = _Tipo and bID_Empleado = '0' and bNomina = '0'
		and bCompania_Sucursal = '0'
		and bNivel_Confianza = '1' and Nivel_de_Confianza = 0 and Nivel_de_Confianza = _Nivel_de_Confianza 
		and p.Inclusiones = '0' and _ID_Empleado not in ( select ID_Empleado from TBL_NOM_PLANTILLAS_EXCLUSIONES where ID_Plantilla = p.ID_Plantilla );
	
	INSERT INTO _TMP_PLANTILLAS_TOTALES
	select _Tipo, _ID_Empleado, p.ID_Movimiento,  
	/*TOTAL_GRAVADO*/ case when Deduccion = '1' or ISPT = '0' then 0.00 else
										case 	when	Aplicacion = 0 and bExento = '0' then round(_Salario_por_Hora * Horas, 2)
													when 	Aplicacion = 1 and bExento = '0' then round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2)
													when 	Aplicacion = 2 and bExento = '0' then (Veces_Importe * Importe)
													when	Aplicacion = 0 and bExento = '1' then	case	when round(_Salario_por_Hora * Horas, 2) > Exento then round(_Salario_por_Hora * Horas, 2) - Exento
																																					else 0.00 end
													when 	Aplicacion = 1 and bExento = '1' then case	when round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2) > Exento then round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2) - Exento
																																					else 0.00 end
													when 	Aplicacion = 2 and bExento = '1' then case	when (Veces_Importe * Importe) > Exento then (Veces_Importe * Importe) - Exento 
																																					else 0.00 end
											else 0.00 end end,
	/*TOTAL_EXENTO*/ 	case 	when Deduccion = '1' or (ISPT = '1' and bExento = '0') then 0.00 
								when Deduccion = '0' and ISPT = '0' then -- todo lo mandar√° al exento (ignora si hay un importe m√°ximo exento o no)
									case 	when Aplicacion = 0 then round(_Salario_por_Hora * Horas, 2)
											when Aplicacion = 1 then round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2)
											when Aplicacion = 2 then (Veces_Importe * Importe) end  
								else -- Es percepci√≥n que Incluye un importe m√°ximo exento...... La parte gravada ya quedo en lo gravado en la columna anterior

									case 	when	Aplicacion = 0 	then	case	when round(_Salario_por_Hora * Horas, 2) > Exento then Exento
																					else round(_Salario_por_Hora * Horas, 2) end
											when 	Aplicacion = 1 	then 	case	when round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2) > Exento then Exento
																					else round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2) end
											when 	Aplicacion = 2 	then 	case	when (Veces_Importe * Importe) > Exento then Exento
																					else (Veces_Importe * Importe) end
											else 0.00 
									end
							 	end,
	/*TOTAL_DEDUCCION*/ case 	when Deduccion = '0' then	0.00
													 	else	case 	when Aplicacion = 0	then round(_Salario_por_Hora * Horas, 2)
																				when Aplicacion = 1 then round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2)
																				when Aplicacion = 2 then (Veces_Importe * Importe) end  
														end, mn.ISPT 
	from TBL_NOM_PLANTILLAS p inner join TBL_NOM_MOVIMIENTOS_NOMINA mn ON p.ID_Movimiento = mn.ID_Movimiento 
	where Calcular = '1' and Tipo_de_Nomina = _Tipo and bID_Empleado = '0' and bNomina = '0'
		and bCompania_Sucursal = '0'
		and bNivel_Confianza = '1' and Nivel_de_Confianza = 0 and Nivel_de_Confianza = _Nivel_de_Confianza 
		and p.Inclusiones = '1' and _ID_Empleado in ( select ID_Empleado from TBL_NOM_PLANTILLAS_EXCLUSIONES where ID_Plantilla = p.ID_Plantilla );
	
	--CALCULA TODO SINDICALIZADO
	INSERT INTO _TMP_PLANTILLAS_TOTALES
	select _Tipo, _ID_Empleado, p.ID_Movimiento,  
	/*TOTAL_GRAVADO*/ case when Deduccion = '1' or ISPT = '0' then 0.00 else
										case 	when	Aplicacion = 0 and bExento = '0' then round(_Salario_por_Hora * Horas, 2)
													when 	Aplicacion = 1 and bExento = '0' then round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2)
													when 	Aplicacion = 2 and bExento = '0' then (Veces_Importe * Importe)
													when	Aplicacion = 0 and bExento = '1' then	case	when round(_Salario_por_Hora * Horas, 2) > Exento then round(_Salario_por_Hora * Horas, 2) - Exento
																																					else 0.00 end
													when 	Aplicacion = 1 and bExento = '1' then case	when round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2) > Exento then round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2) - Exento
																																					else 0.00 end
													when 	Aplicacion = 2 and bExento = '1' then case	when (Veces_Importe * Importe) > Exento then (Veces_Importe * Importe) - Exento 
																																					else 0.00 end
											else 0.00 end end,
	/*TOTAL_EXENTO*/ 	case 	when Deduccion = '1' or (ISPT = '1' and bExento = '0') then 0.00 
								when Deduccion = '0' and ISPT = '0' then -- todo lo mandar√° al exento (ignora si hay un importe m√°ximo exento o no)
									case 	when Aplicacion = 0 then round(_Salario_por_Hora * Horas, 2)
											when Aplicacion = 1 then round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2)
											when Aplicacion = 2 then (Veces_Importe * Importe) end  
								else -- Es percepci√≥n que Incluye un importe m√°ximo exento...... La parte gravada ya quedo en lo gravado en la columna anterior

									case 	when	Aplicacion = 0 	then	case	when round(_Salario_por_Hora * Horas, 2) > Exento then Exento
																					else round(_Salario_por_Hora * Horas, 2) end
											when 	Aplicacion = 1 	then 	case	when round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2) > Exento then Exento
																					else round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2) end
											when 	Aplicacion = 2 	then 	case	when (Veces_Importe * Importe) > Exento then Exento
																					else (Veces_Importe * Importe) end
											else 0.00 
									end
							 	end,
	/*TOTAL_DEDUCCION*/ case 	when Deduccion = '0' then	0.00
													 	else	case 	when Aplicacion = 0	then round(_Salario_por_Hora * Horas, 2)
																				when Aplicacion = 1 then round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2)
																				when Aplicacion = 2 then (Veces_Importe * Importe) end  
														end, mn.ISPT 
	from TBL_NOM_PLANTILLAS p inner join TBL_NOM_MOVIMIENTOS_NOMINA mn ON p.ID_Movimiento = mn.ID_Movimiento 
	where Calcular = '1' and Tipo_de_Nomina = _Tipo and bID_Empleado = '0' and bNomina = '0'
		and bCompania_Sucursal = '0'
		and bNivel_Confianza = '1' and Nivel_de_Confianza = 1 and Nivel_de_Confianza = _Nivel_de_Confianza 
		and p.Inclusiones = '0' and _ID_Empleado not in ( select ID_Empleado from TBL_NOM_PLANTILLAS_EXCLUSIONES where ID_Plantilla = p.ID_Plantilla );
	
	INSERT INTO _TMP_PLANTILLAS_TOTALES
	select _Tipo, _ID_Empleado, p.ID_Movimiento,  
	/*TOTAL_GRAVADO*/ case when Deduccion = '1' or ISPT = '0' then 0.00 else
										case 	when	Aplicacion = 0 and bExento = '0' then round(_Salario_por_Hora * Horas, 2)
													when 	Aplicacion = 1 and bExento = '0' then round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2)
													when 	Aplicacion = 2 and bExento = '0' then (Veces_Importe * Importe)
													when	Aplicacion = 0 and bExento = '1' then	case	when round(_Salario_por_Hora * Horas, 2) > Exento then round(_Salario_por_Hora * Horas, 2) - Exento
																																					else 0.00 end
													when 	Aplicacion = 1 and bExento = '1' then case	when round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2) > Exento then round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2) - Exento
																																					else 0.00 end
													when 	Aplicacion = 2 and bExento = '1' then case	when (Veces_Importe * Importe) > Exento then (Veces_Importe * Importe) - Exento 
																																					else 0.00 end
											else 0.00 end end,
	/*TOTAL_EXENTO*/ 	case 	when Deduccion = '1' or (ISPT = '1' and bExento = '0') then 0.00 
								when Deduccion = '0' and ISPT = '0' then -- todo lo mandar√° al exento (ignora si hay un importe m√°ximo exento o no)
									case 	when Aplicacion = 0 then round(_Salario_por_Hora * Horas, 2)
											when Aplicacion = 1 then round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2)
											when Aplicacion = 2 then (Veces_Importe * Importe) end  
								else -- Es percepci√≥n que Incluye un importe m√°ximo exento...... La parte gravada ya quedo en lo gravado en la columna anterior

									case 	when	Aplicacion = 0 	then	case	when round(_Salario_por_Hora * Horas, 2) > Exento then Exento
																					else round(_Salario_por_Hora * Horas, 2) end
											when 	Aplicacion = 1 	then 	case	when round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2) > Exento then Exento
																					else round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2) end
											when 	Aplicacion = 2 	then 	case	when (Veces_Importe * Importe) > Exento then Exento
																					else (Veces_Importe * Importe) end
											else 0.00 
									end
							 	end,
	/*TOTAL_DEDUCCION*/ case 	when Deduccion = '0' then	0.00
													 	else	case 	when Aplicacion = 0	then round(_Salario_por_Hora * Horas, 2)
																				when Aplicacion = 1 then round((case when Mixto = '0' then _Salario_Diario else (case when _CalculoMixto = '0' then _Salario_Diario else _Salario_Mixto end) end) * Dias, 2)
																				when Aplicacion = 2 then (Veces_Importe * Importe) end  
														end, mn.ISPT 
	from TBL_NOM_PLANTILLAS p inner join TBL_NOM_MOVIMIENTOS_NOMINA mn ON p.ID_Movimiento = mn.ID_Movimiento 
	where Calcular = '1' and Tipo_de_Nomina = _Tipo and bID_Empleado = '0' and bNomina = '0'
		and bCompania_Sucursal = '0'
		and bNivel_Confianza = '1' and Nivel_de_Confianza = 1 and Nivel_de_Confianza = _Nivel_de_Confianza 
		and p.Inclusiones = '1' and _ID_Empleado in ( select ID_Empleado from TBL_NOM_PLANTILLAS_EXCLUSIONES where ID_Plantilla = p.ID_Plantilla );
	
END
$BODY$
  LANGUAGE plpgsql;

  

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_nom_calculo_nomina(
    _id_nomina integer,
    _dpincon bit,
    _mesdesc smallint,
    _anodesc smallint,
    _hepf bit,
    _calvales bit)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_Ano smallint; _Numero_Nomina smallint; _Tipo smallint; _Fecha_Desde timestamp; _Fecha_Hasta timestamp; _Mes smallint;
	_TipoF smallint; _TipoV smallint; _TipoAg smallint; _Periodo smallint; _err int; _result varchar(4000); _resultflt varchar(1000); _resultvac varchar(1000); _ID_NominaF int;  _ID_NominaV int; 
	_DiasNomina smallint; _DiasNominaAc smallint; _DiasNominaAA smallint; _AnosCumplidos smallint; _DiasAg smallint; _ImporteAguinaldo numeric(19,4); _IAE numeric(10,2); _IAG numeric(10,2);
	_DiasAno smallint; _ID_Compania smallint; _ID_Sucursal smallint; 
	_M_SAL smallint; _M_FLT smallint; _M_IMSS smallint; _M_ISPT smallint; _M_ISPSB smallint; _M_CRDFS smallint;
	_M_IHEE smallint; _M_IHEG smallint; _M_IHE smallint; _M_IHDE smallint; _M_IHDG smallint; _M_PDE smallint; _M_PDG smallint;
	_M_IDV smallint; _M_IDVXF smallint; _M_IDAV smallint; _M_IDVP smallint; _M_IDVD smallint; _M_IPVE smallint; _M_IPVG smallint;
	_M_IAE smallint; _M_IAG smallint; _M_INFON smallint; _M_FONAC smallint; _M_IXM smallint; _M_IXA smallint; _M_IXE smallint;
	_M_DSP smallint; _M_DAP smallint; _M_DPI smallint; _M_CSIN smallint; _M_ACA smallint; _M_AAP smallint; _M_ASP smallint; _M_VALS smallint;

	_Inexistente bit; _FechaCont timestamp;
	
	_Fecha_Ingreso timestamp; _Fecha_DesdeNom timestamp; _Fecha_HastaNom timestamp; _DiasNominaNom smallint; _PromSueldoTurno numeric(19,4);
	_contTotal int; _contNum int; _isptFlag smallint; _ID_Empleado char(6); _NivelConfianza smallint; _CompensacionAnual smallint; _RANGO smallint; 
	_Sueldo numeric(19,4); _SalarioDiario numeric(19,4); _SalarioMinimo numeric(19,4); _SalarioPorHora numeric(19,4); _SalarioIntegrado numeric(19,4); _SalarioMixto numeric(19,4); _CalculoMixto bit; _SalarioTope numeric(19,4); 
	_SAVAR numeric(10,6); _DA numeric(5,2); _DAA numeric(5,2); _SA numeric(19,4); _SAA numeric(19,4); _GA numeric(19,4); _GAA numeric(19,4); _IMPAN numeric(19,4);_FI numeric(19,4);_LI numeric(19,4);
	_Exedente numeric(19,4);_CF numeric(19,4);_CFDT numeric(19,4);_CFDTGAA numeric(19,4);_IM numeric(19,4);_IME numeric(19,4);_AIM numeric(19,4);
	_Subsidio numeric(19,4);_CFS numeric(19,4);_SubTot numeric(19,4);_SubTotGAA numeric(19,4);_SubAcred numeric(19,4);_SubAA numeric(19,4);_ISPT numeric(10,2);
	_ISPSB numeric(10,2);_INGGET numeric(19,4);_INGM numeric(19,4);_ING numeric(19,4);_CSDiario numeric(19,4);_PRVCF numeric(10,2);_CRDFS numeric(10,2);_DT numeric(4,2);
	_TOTAL_HE numeric(6,2);_TOTAL_HD numeric(6,2);_TOTAL_HF numeric(6,2); _TOTAL_HT numeric(6,2); _MaxHE smallint; _Aplica_horas_Extras bit; _DiasHorasExtras smallint;
	_MHEE numeric(10,6);_IHEE numeric(10,2);_IHEG numeric(10,2);_IHDE numeric(10,2);_IHDG numeric(10,2);_IHE numeric(10,2);_PDE numeric(10,2);_PDG numeric(10,2);
	_ImporteHorasExtras numeric(19,4);_PrimaDominical numeric(19,4);_PRIDOM numeric(10,6);
	_TOTAL_DV smallint;_TOTAL_DVXF smallint;_TOTAL_DAV smallint;_TOTAL_DVP smallint;_TOTAL_DVD smallint;_TOTAL_PV smallint;_FAC_DVD numeric(10,6);
	_IV numeric(10,2);_IVXF numeric(10,2);_IAV numeric(10,2);_IVP numeric(10,2);_IVD numeric(10,2);_IPVE numeric(10,2);_IPVG numeric(10,2);
	_DiasVac smallint;_PrimaVac numeric(2,2);_ImportePrimaVac numeric(19,4);
	_SAL numeric(10,2);_IMP_DAP numeric(10,2);_FLT  numeric(10,2);_TOTAL_FLT decimal (4,2);_HRS_FLT decimal (6,2);_COMRETIMSS numeric(10,6);_IMSS numeric(10,2);_INFON numeric(10,2);_Prestamo_Fonacot numeric(19,4);_FONAC numeric(10,2);_FonAj smallint;_VALS numeric(10,2);
	_IIXM numeric(10,2);_IIXE  numeric(10,2);_IIXA numeric(10,2); _TOTAL_IXM decimal (4,2);_HRS_IXM decimal (6,2);
	_TOTAL_IXE numeric (4,2);_HRS_IXE numeric (6,2);_TOTAL_IXA numeric (4,2);_HRS_IXA numeric (6,2);_HRS_DESC numeric (6,2); _TOTAL_DAG numeric(10,6);
	_PPINCON numeric(5,2);_IMPPORINCON numeric(10,2);_CSIN numeric(10,6);_CUOTA_SINDICAL numeric(10,2);_Turno smallint;_DiasNominaSal numeric(12,9);_DiasNominaTurn numeric(12,9);_DiasNominaDiff numeric(12,9);_DiasNominaM numeric(12,9);_DTM numeric(12,9);
	_ACA numeric(10,6);_COMPENSACION_ANUAL numeric(10,2);_IMP_DSP numeric(10,2);_HRS_SINPAG decimal (6,2); _Castigo_Impuntualidad bit;

	_EMP RECORD;
BEGIN
	_err := 0;
	_result := 'La nomina se calculo satisfactoriamente';

	-- Revisa por los movimientos bsicos de permisos 
	IF (select count(*) from TBL_NOM_MOVIMIENTOS where ID_Movimiento between -32 and -1 ) < 29
	THEN
		_err := 3;
		_result := 'ERROR: No existen todos los movimientos b√°sicos para permisos. Primero debe darlos de alta para poder crear la nomina'; 
	END IF; 
	
	-- Revisa por los movimientos bsicos del infonavit  fonacot y vales
	IF (select count(*) from TBL_NOM_MOVIMIENTOS_NOMINA where 
								Tipo_Movimiento = 'INFON' OR Tipo_Movimiento = 'FONAC' OR Tipo_Movimiento = 'VALS') < 3
	THEN
		_err := 3;
		_result := 'ERROR: No existen los movimientos de infonavit, fonacot y vales de despensa (INFON, FONAC, VALS). Primero debe darlos de alta para poder crear la nomina';
	END IF;
	-- Revisa por los movimientos bsicos de AGUINALDOS
	IF (select count(*) from TBL_NOM_MOVIMIENTOS_NOMINA where 
								Tipo_Movimiento = 'IAE' OR Tipo_Movimiento = 'IAG') < 2
	THEN
		_err := 3;
		_result := 'ERROR: No existen todos los movimientos de aguinaldo (IAG, IAE). Primero debe darlos de alta para poder crear la nomina de aguinaldos' ;
	END IF;
	-- Revisa por los movimientos bsicos de NOMINA ( POR RECIBO )
	IF (select count(*) from TBL_NOM_MOVIMIENTOS_NOMINA where 
								Tipo_Movimiento = 'SAL' OR Tipo_Movimiento = 'FLT' OR Tipo_Movimiento = 'IMSS'  
						OR 	Tipo_Movimiento = 'ISPT'  OR Tipo_Movimiento = 'ISPSB' OR Tipo_Movimiento = 'CRDFS' OR Tipo_Movimiento = 'CSIN') < 7
	THEN
		_err := 3;
		_result := 'ERROR: No existen todos los movimientos bsicos de nomina (SAL, FLT, IMSS, ISPT, ISPSB, CRDFS, AAP). Primero debe darlos de alta para poder crear la nomina';
	END IF;
	-- Revisa por los movimientos de horas extras y otros de NOMINA ( POR RECIBO )
	IF (select count(*) from TBL_NOM_MOVIMIENTOS_NOMINA where 
								Tipo_Movimiento = 'IHEE' OR Tipo_Movimiento = 'IHEG' OR Tipo_Movimiento = 'IHE'  
						OR 	Tipo_Movimiento = 'IHDE'  OR Tipo_Movimiento = 'IHDG' OR Tipo_Movimiento = 'PDE' 
						OR 	Tipo_Movimiento = 'PDG') < 7
	THEN
		_err := 3;
		_result := 'ERROR: No existen todos los movimientos de horas extras (IHEE, IHEG, IHE, IHDE, IHDG, PDE, PDG). Primero debe darlos de alta para poder crear la nomina';
	END IF;
	-- Revisa por los movimientos de vacaciones de NOMINA ( POR RECIBO )
	IF (select count(*) from TBL_NOM_MOVIMIENTOS_NOMINA where -- DV DVXF DAV DVP DVD PV
								Tipo_Movimiento = 'IDV' OR Tipo_Movimiento = 'IDVXF' OR Tipo_Movimiento = 'IDAV'  
						OR 	Tipo_Movimiento = 'IDVP'  OR Tipo_Movimiento = 'IDVD' OR Tipo_Movimiento = 'IPVE' OR Tipo_Movimiento = 'IPVG') < 7
	THEN
		_err := 3;
		_result := 'ERROR: No existen todos los movimientos de vacaciones ( IDV, IDVXF, IDAV, IDVP, IDVD, IPVE, IPVG ). Primero debe darlos de alta para poder crear la nomina';
	END IF;
	-- Revisa por los otros movimientos de NOMINA ( POR RECIBO ) como los descuentos por llegar tarde cuota sindical etc
	IF (select count(*) from TBL_NOM_MOVIMIENTOS_NOMINA where -- DAP
								Tipo_Movimiento = 'DAP' OR Tipo_Movimiento = 'DPI' OR Tipo_Movimiento = 'DSP' 
									OR 	Tipo_Movimiento = 'AAP'  OR 	Tipo_Movimiento = 'ASP' OR 	Tipo_Movimiento = 'ACA' ) < 6
	THEN
		_err := 3;
		_result := 'ERROR: No existen todos los movimientos de nomina alternos ( DAP, DPI, DSP, AAP, ASP, ACA ). Primero debe darlos de alta para poder crear la nomina';
	END IF;

	-- Revisa por los movimientos de incapacidad de NOMINA ( POR RECIBO )
	IF (select count(*) from TBL_NOM_MOVIMIENTOS_NOMINA where -- IXM, IXE, IXA
									Tipo_Movimiento = 'IXM' OR Tipo_Movimiento = 'IXE' OR Tipo_Movimiento = 'IXA') < 3
	THEN
		_err := 3;
		_result := 'ERROR: No existen todos los movimientos de incapacidad ( IXM, IXE, IXA ). Primero debe darlos de alta para poder crear la nomina'; 
	END IF;

	-- Revisa por variables de sistema
	IF (select VDecimal from TBL_VARIABLES
					where ID_Variable = 'SA') is null
	THEN
		_err := 3;
		_result := 'ERROR: La variable SA ( Subsidio acumulado ), No est√° definida'; 
	END IF;
	IF (select VDecimal from TBL_VARIABLES
				where ID_Variable = 'SALMIN') is null
	THEN
		_err := 3;
		_result := 'ERROR: La variable SALMIN ( Salario M?nimo ), No est√° definida';
	END IF;
	IF (select VDecimal from TBL_VARIABLES
				where ID_Variable = 'SALTOP') is null
	THEN
		_err := 3;
		_result := 'ERROR: La variable SALTOP ( Salario Tope ), No est√° definida'; 
	END IF;
	IF (select VDecimal from TBL_VARIABLES
				where ID_Variable = 'PRIDOM') is null
	THEN
		_err := 3;
		_result := 'ERROR: La variable PRIDOM ( Prima Dominical ), No esta definida';
	END IF;
	IF (select VDecimal from TBL_VARIABLES
					where ID_Variable = 'PPINCON') is null
	THEN
		_err := 3;
		_result := 'ERROR: La variable PPINCON ( Porcentaje de descuento por inconcistencias ), No esta definida';
	END IF;
	IF (select VDecimal from TBL_VARIABLES
					where ID_Variable = 'CSIN') is null
	THEN
		_err := 3;
		_result := 'ERROR: La variable CSIN ( Cuota Sindical ), No esta definida';
	END IF;
	IF (select VDecimal from TBL_VARIABLES
					where ID_Variable = 'ACA') is null
	THEN
		_err := 3;
		_result := 'ERROR: La variable ACA ( Ahorro, Compensaciones, Anualidades ), No esta definida';
	END IF;
	IF (select VEntero from TBL_VARIABLES
					where ID_Variable = 'FONAJ') is null
	THEN
		_err := 3;
		_result := 'ERROR: La variable FONAJ ( Ajuste de meses para el fonacot ), No esta definida';
	END IF;
	IF (select VEntero from TBL_VARIABLES
					where ID_Variable = 'NOMVALS') is null
	THEN
		_err := 3;
		_result := 'ERROR: La variable NOMVALS ( N?mina indepEND IF;iente para vales ), No esta definida';
	END IF;
	IF (select VDecimal from TBL_VARIABLES
					where ID_Variable = 'COMRETIMSS') is null
	THEN
		_err := 3;
		_result := 'ERROR: La variable COMRETIMSS ( Factor de complemento de retenci?n del seguro social ), No esta definida';
	END IF;
	IF (select VEntero from TBL_VARIABLES
					where ID_Variable = 'MAX_HE') is null
	THEN
		_err := 3;
		_result := 'ERROR: La variable MAX_HE ( MAXIMO DE HORAS EXTRAS ACUMULADAS ), No esta definida';
	END IF;
	IF (select VDecimal from TBL_VARIABLES
					where ID_Variable = 'MHEE') is null
	THEN
		_err := 3;
		_result := 'ERROR: La variable MHEE ( BASE PARA HORAS EXTRAS EXENTAS ), No esta definida';
	END IF;
	IF (select VDecimal from TBL_VARIABLES
					where ID_Variable = 'FAC_DVD') is null
	THEN
		_err := 3;
		_result := 'ERROR: La variable FAC_DVD ( FACTOR DE VACACIONES DISFRUTADAS ), No esta definida';
	END IF;
	IF (select VDecimal from TBL_VARIABLES
					where ID_Variable = 'VARISPT') is null
	THEN
		_err := 3;
		_result := 'ERROR: La variable VARISPT ( Variacion del calculo del ISPT sobre positivos), No esta definida';
	END IF;
		
	IF (select count(*) from TBL_NOM_CALCULO_NOMINA where ID_Nomina = _ID_Nomina and (Tipo = 1 or Tipo = 2 or Tipo = 5 or Tipo = 6) and Cerrado = '0') < 1
	THEN
		_err := 3;
		_result := 'ERROR: La n√≥mina mandada no se puede calcular por alguna de las siguientes razones: <br>1) Ya esta cerrada o generada.<br>2) Se intenta calcular una n√≥mina especial o de vales, cuando estas se calculan automaticamente por medio de la n√≥mina normal.<br>3) La n√≥mina por algun motivo no existe y se debe primero crear.<br> ';
	ELSE
		_ID_Compania := (select ID_Compania from TBL_NOM_CALCULO_NOMINA where ID_Nomina = _ID_Nomina );
		_ID_Sucursal := (select ID_Sucursal from TBL_NOM_CALCULO_NOMINA where ID_Nomina = _ID_Nomina );
		_Periodo := ( 	select case 	when Periodo = 'sem' then 7
										when Periodo = 'qui' then 15
										when Periodo = 'men' then 30
										else 30 end
						from TBL_COMPANIAS 
						where ID_Compania = _ID_Compania and ID_Sucursal = _ID_Sucursal );
		_Ano := (select Ano from TBL_NOM_CALCULO_NOMINA where ID_Nomina = _ID_Nomina );
		_Numero_Nomina := (select Numero_Nomina from TBL_NOM_CALCULO_NOMINA where ID_Nomina = _ID_Nomina );
		_Tipo := (select Tipo from TBL_NOM_CALCULO_NOMINA where ID_Nomina = _ID_Nomina );
		_Fecha_Desde := (select Fecha_Desde from TBL_NOM_CALCULO_NOMINA where ID_Nomina = _ID_Nomina );
		_Fecha_Hasta := (select Fecha_Hasta from TBL_NOM_CALCULO_NOMINA where ID_Nomina = _ID_Nomina );
		_DiasNomina := (select Dias from TBL_NOM_CALCULO_NOMINA where ID_Nomina = _ID_Nomina );
		_Mes := (select Mes from TBL_NOM_CALCULO_NOMINA where ID_Nomina = _ID_Nomina );
		--**************************************************************************************************
		_DiasAno := getfechadiff('day', ('01-01-' || cast(_Ano as varchar))::timestamp, ('01-01-' || cast((_Ano + 1) as varchar))::timestamp );
		_TipoF := ( case when _Tipo = 2 then 4 when _Tipo = 1 then 3 else 0 end );
		_TipoV := ( case when _Tipo = 2 then 8 when _Tipo = 1 then 7 else 0 end );
		_TipoAg := ( case when _Tipo = 6 then 6 when _Tipo = 5 then 5 else 0 end );
		-- si es nomina semanal, revisa que esten cerrados cada uno de los dias de la nomina, de lo contrario no se calcula
		IF _Tipo = 1
		THEN
			_Inexistente = '0';
			_FechaCont = _Fecha_Desde;
			WHILE _FechaCont <= _Fecha_Hasta
			LOOP
				IF( select count(*) from TBL_NOM_DIARIO_CAB 
						where ID_Compania = _ID_Compania and ID_Sucursal = _ID_Sucursal and 
										ID_FechaMovimiento = _FechaCont /* and Cerrado = 1*/ ) = 0
				THEN
					_Inexistente = '1';
					EXIT;
				END IF;
				--print ' Fecha: ' + cast(_FechaCont as varchar)
				_FechaCont := _FechaCont + '1 day'::interval; --DATEADD(day, 1, _FechaCont);
				
			END LOOP;

			IF _Inexistente = '1'
			THEN
				_err := 3;
				_result := 'ERROR: La n√≥mina que se intenta calcular es estricta y sin embargo no se han cerrado todos los dias que incluyen esta n√≥mina. Necesitas cerrar todos los dias que incluyen esta n√≥mina desde el m√≥dulo de cierre diario para poderla calcular';
			END IF;
		END IF;
	END IF;


	-- AHORA SI, DESPUES DE VERIFICAR LAS variables y ciertos parametros necesarios, procede a calcular la n?mina
	IF _err = 0
	THEN
		-- ///////////////////////////////////////////////////////////////////////////////////////	
		-- ////////////////////////  Asigna los movimientos de nomina //////////////////////////
		_M_SAL := ( select ID_Movimiento	from TBL_NOM_MOVIMIENTOS_NOMINA	where Tipo_Movimiento = 'SAL' );
		_M_FLT := ( select ID_Movimiento	from TBL_NOM_MOVIMIENTOS_NOMINA	where Tipo_Movimiento = 'FLT' );
		_M_IMSS := ( select ID_Movimiento	from TBL_NOM_MOVIMIENTOS_NOMINA	where Tipo_Movimiento = 'IMSS' );
		_M_ISPT := ( select ID_Movimiento	from TBL_NOM_MOVIMIENTOS_NOMINA	where Tipo_Movimiento = 'ISPT' );
		_M_ISPSB := ( select ID_Movimiento	from TBL_NOM_MOVIMIENTOS_NOMINA	where Tipo_Movimiento = 'ISPSB' );
		_M_CRDFS := ( select ID_Movimiento	from TBL_NOM_MOVIMIENTOS_NOMINA	where Tipo_Movimiento = 'CRDFS' );
		_M_IHEE := ( select ID_Movimiento	from TBL_NOM_MOVIMIENTOS_NOMINA	where Tipo_Movimiento = 'IHEE' );
		_M_IHEG := ( select ID_Movimiento	from TBL_NOM_MOVIMIENTOS_NOMINA	where Tipo_Movimiento = 'IHEG' );
		_M_IHE := ( select ID_Movimiento	from TBL_NOM_MOVIMIENTOS_NOMINA	where Tipo_Movimiento = 'IHE' );
		_M_IHDE := ( select ID_Movimiento	from TBL_NOM_MOVIMIENTOS_NOMINA	where Tipo_Movimiento = 'IHDE' );
		_M_IHDG := ( select ID_Movimiento	from TBL_NOM_MOVIMIENTOS_NOMINA	where Tipo_Movimiento = 'IHDG' );
		_M_PDE := ( select ID_Movimiento	from TBL_NOM_MOVIMIENTOS_NOMINA	where Tipo_Movimiento = 'PDE' );
		_M_PDG := ( select ID_Movimiento	from TBL_NOM_MOVIMIENTOS_NOMINA	where Tipo_Movimiento = 'PDG' );
		_M_IDV := ( select ID_Movimiento	from TBL_NOM_MOVIMIENTOS_NOMINA	where Tipo_Movimiento = 'IDV' );
		_M_IDVXF := ( select ID_Movimiento	from TBL_NOM_MOVIMIENTOS_NOMINA	where Tipo_Movimiento = 'IDVXF' );
		_M_IDAV := ( select ID_Movimiento	from TBL_NOM_MOVIMIENTOS_NOMINA	where Tipo_Movimiento = 'IDAV' );
		_M_IDVP := ( select ID_Movimiento	from TBL_NOM_MOVIMIENTOS_NOMINA	where Tipo_Movimiento = 'IDVP' );
		_M_IDVD := ( select ID_Movimiento	from TBL_NOM_MOVIMIENTOS_NOMINA	where Tipo_Movimiento = 'IDVD' );
		_M_IPVE := ( select ID_Movimiento	from TBL_NOM_MOVIMIENTOS_NOMINA	where Tipo_Movimiento = 'IPVE' );
		_M_IPVG := ( select ID_Movimiento	from TBL_NOM_MOVIMIENTOS_NOMINA	where Tipo_Movimiento = 'IPVG' );
		_M_IAE := ( select ID_Movimiento	from TBL_NOM_MOVIMIENTOS_NOMINA	where Tipo_Movimiento = 'IAE' );
		_M_IAG := ( select ID_Movimiento	from TBL_NOM_MOVIMIENTOS_NOMINA	where Tipo_Movimiento = 'IAG' );
		_M_INFON := ( select ID_Movimiento	from TBL_NOM_MOVIMIENTOS_NOMINA	where Tipo_Movimiento = 'INFON' );
		_M_FONAC := ( select ID_Movimiento	from TBL_NOM_MOVIMIENTOS_NOMINA	where Tipo_Movimiento = 'FONAC' );
		_M_VALS := ( select ID_Movimiento	from TBL_NOM_MOVIMIENTOS_NOMINA	where Tipo_Movimiento = 'VALS' );
		_M_IXM := ( select ID_Movimiento	from TBL_NOM_MOVIMIENTOS_NOMINA	where Tipo_Movimiento = 'IXM' );
		_M_IXE := ( select ID_Movimiento	from TBL_NOM_MOVIMIENTOS_NOMINA	where Tipo_Movimiento = 'IXE' );
		_M_IXA := ( select ID_Movimiento	from TBL_NOM_MOVIMIENTOS_NOMINA	where Tipo_Movimiento = 'IXA' );
		_M_DAP := ( select ID_Movimiento	from TBL_NOM_MOVIMIENTOS_NOMINA	where Tipo_Movimiento = 'DAP' );
		_M_DPI := ( select ID_Movimiento	from TBL_NOM_MOVIMIENTOS_NOMINA	where Tipo_Movimiento = 'DPI' );
		_M_CSIN := ( select ID_Movimiento	from TBL_NOM_MOVIMIENTOS_NOMINA	where Tipo_Movimiento = 'CSIN' );
		_M_ACA := ( select ID_Movimiento	from TBL_NOM_MOVIMIENTOS_NOMINA	where Tipo_Movimiento = 'ACA' );
		_M_DSP := ( select ID_Movimiento	from TBL_NOM_MOVIMIENTOS_NOMINA	where Tipo_Movimiento = 'DSP' );
		_M_AAP := ( select ID_Movimiento	from TBL_NOM_MOVIMIENTOS_NOMINA	where Tipo_Movimiento = 'AAP' );
		_M_ASP := ( select ID_Movimiento	from TBL_NOM_MOVIMIENTOS_NOMINA	where Tipo_Movimiento = 'ASP' );
		-- //////////////////////////////////////////////////////////////////////////////////
		--/////////////////////////////// crea las tablas temporales ////////////////////////
		CREATE LOCAL TEMPORARY TABLE _TMP_CALCULO_NOMINA_DET (
			ID_Nomina int NOT NULL ,
			ID_Empleado char (6)  NOT NULL ,
			ID_Movimiento smallint NOT NULL ,
			Gravado numeric(10, 2) NOT NULL ,
			Exento numeric(10, 2) NOT NULL ,
			Deduccion numeric(10, 2) NOT NULL 
		);

		CREATE LOCAL TEMPORARY TABLE _TMP_CALCULO_NOMINA_ESP (
			ID_Nomina int NOT NULL ,
			ID_Empleado char (6)  NOT NULL ,
			Dias numeric(6,2) NOT NULL ,
			Faltas numeric(4,2) NOT NULL ,
			Recibo smallint NOT NULL,
			HE numeric(9,6) NOT NULL ,
			HD numeric(9,6) NOT NULL,
			ID_CFD integer,
			TFD smallint,
			Gravado numeric(10,2) NOT NULL,
			Exento numeric(10,2) NOT NULL,
			Deduccion numeric(10,2) NOT NULL,
			ISR numeric(10,2) NOT NULL,
			HT numeric(9,6) NOT NULL,
			IXA numeric(5,2) NOT NULL,
			IXE numeric(5,2) NOT NULL,
			IXM numeric(5,2) NOT NULL,
			DiasHorasExtras smallint NOT NULL

		);
		
		CREATE LOCAL TEMPORARY TABLE _TMP_CALCULO_NOMINA_ASIST (
			ID_Empleado char (6)  NOT NULL ,
			ID_FechaMovimiento timestamp NOT NULL ,
			ID_Movimiento smallint NOT NULL ,
			Entrada timestamp NULL ,
			Salida timestamp NULL
		);
		
		CREATE LOCAL TEMPORARY TABLE _TMP_CALCULO_NOMINA_HIS_DET_IMP (
			ID_Nomina int NOT NULL ,
			ID_Empleado char (6)  NOT NULL ,
			IMPDAP numeric(10,2) NULL ,
			IMPDSP numeric(10,2) NULL ,
			DiasNomina smallint NULL ,
			DT numeric(5,2) NULL ,
			SA numeric(19,4) null ,
			SAA numeric(19,4) null ,
			DA numeric(5,2) null ,
			DAA numeric(5,2) null ,
			IMPAN numeric(19,4) null ,
			GA numeric(19,4) null ,
			GAA numeric(19,4) null ,
			FI numeric(19,4) null ,
			LI numeric(19,4) null ,
			SalarioTope numeric(19,4) null ,
			Exedente numeric(19,4) null ,
			CF numeric(19,4) null ,
			CFDTGAA numeric(19,4) null ,
			CFDT numeric(19,4) null ,
			IME numeric(19,4) null ,
			IM numeric(19,4) null ,
			AIM numeric(19,4) null ,
			ISPT numeric(10,2) null,
			Subsidio numeric(19,4) null ,
			CFS numeric(19,4) null ,
			SubTot numeric(19,4) null ,
			SubTotGAA numeric(19,4) null ,
			ISPSB numeric(10,2) null
		);
		-- Crea tabla de analisis por trabajador
		CREATE LOCAL TEMPORARY TABLE _TMP_ANALISIS (
			ID_Num serial NOT NULL , 
			ID_Empleado char (6)  NOT NULL ,
			Salario_Diario numeric(8, 2) NOT NULL ,
			ISPT numeric(10, 2) NOT NULL ,
			ISPSB numeric(10, 2) NOT NULL ,
			IAE numeric(10, 2) NULL ,
			IAG numeric(10, 2) NULL ,
			CRDFS numeric(10, 2) NOT NULL ,
			IHEE numeric(10, 2) NOT NULL ,
			IHEG numeric(10, 2) NOT NULL ,
			IHE numeric(10, 2) NOT NULL ,
			IHDE numeric(10, 2) NOT NULL ,
			IHDG numeric(10, 2) NOT NULL ,
			PDE numeric(10, 2) NOT NULL ,
			PDG numeric(10, 2) NOT NULL ,
			IDV numeric(10, 2) NOT NULL ,
			IDVXF numeric(10, 2) NOT NULL ,
			IDAV numeric(10, 2) NOT NULL ,
			IDVP numeric(10, 2) NOT NULL ,
			IDVD numeric(10, 2) NOT NULL ,
			IPVE numeric(10, 2) NOT NULL ,
			IPVG numeric(10, 2) NOT NULL ,
			SAL numeric(10, 2) NOT NULL ,
			FLT numeric(10, 2) NOT NULL ,
			IMSS numeric(10, 2) NOT NULL ,
			INFON numeric(10, 2) NOT NULL ,
			FONAC numeric(10, 2) NOT NULL ,
			VALS numeric(10, 2) NOT NULL ,
			IXM numeric(10, 2) NOT NULL ,
			IXE numeric(10, 2) NOT NULL ,
			IXA numeric(10, 2) NOT NULL ,
			DAP numeric(10, 2) NOT NULL ,
			DPI numeric(10, 2) NOT NULL ,
			CSIN numeric(10,2) NOT NULL ,
			ACA numeric(10,2) NOT NULL ,
			DSP numeric(10,2) NOT NULL
		);

		-- Crea tabla temporal de permisos
		CREATE LOCAL TEMPORARY TABLE  _TMP_PERMISOS (
			ID_Num serial NOT NULL , 
			ID_Movimiento smallint NOT NULL ,
			ID_FechaMovimiento timestamp NOT NULL ,
			DiasCompletos bit NOT NULL ,
			FechaHora_Desde timestamp NOT NULL ,
			FechaHora_Hasta timestamp NOT NULL ,
			Num_de_Dias smallint NOT NULL ,
			Num_de_Horas numeric(4, 2) NOT NULL ,
			Tiempo_por_pagar numeric(4, 2) NOT NULL
		);
		-- Ahora crea tabla temporal para agrupar los totales de cada empleado por movimientos dinmicos
		-- Esta la utiliza el modulo externo sp_calculo_nomina_dinamicos
		CREATE LOCAL TEMPORARY TABLE  _TMP_PLANTILLAS_TOTALES (
			Tipo smallint NOT NULL ,
			ID_Empleado char(6)  NOT NULL,
			ID_Movimiento smallint NOT NULL ,
			TOTAL_GRAVADO numeric(19,4) NOT NULL ,
			TOTAL_EXENTO numeric(19,4) NOT NULL,
			TOTAL_DEDUCCION numeric(19,4) NOT NULL,
			ISPT bit NOT NULL
		);
		
		--/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		--///////////// como ya estamos seguros de que existe la nomina, borra el detalle, el especial y el historial ///////////
		DELETE FROM TBL_NOM_CALCULO_NOMINA_DET
		WHERE ID_Nomina = _ID_Nomina;
	
		DELETE FROM TBL_NOM_CALCULO_NOMINA_ESP
		WHERE ID_Nomina = _ID_Nomina;
		
		DELETE FROM TBL_NOM_CALCULO_NOMINA_HIS_DET_IMP
		WHERE ID_Nomina = _ID_Nomina;
			
		DELETE FROM TBL_NOM_CALCULO_NOMINA_ASIST
		WHERE ID_Nomina = _ID_Nomina;
			
		-- Ahora revisa las nominas de vales y especial
		_ID_NominaF := (select ID_Nomina 
						from TBL_NOM_CALCULO_NOMINA 
						where ID_Compania = _ID_Compania and 
											ID_Sucursal = _ID_Sucursal and 
													Ano = _Ano and Numero_Nomina = _Numero_Nomina and Tipo = _TipoF );
		
		IF _ID_NominaF is not null -- Si si existe la nomina especial revisa:
		THEN
			-- como ya existe la nomina especial , borra el cabecero, y borra el detalle y el especial, y el historal de impuestos y asistencias
			DELETE FROM TBL_NOM_CALCULO_NOMINA
			WHERE ID_Nomina = _ID_NominaF;
			
			DELETE FROM TBL_NOM_CALCULO_NOMINA_DET
			WHERE ID_Nomina = _ID_NominaF;
			
			DELETE FROM TBL_NOM_CALCULO_NOMINA_ESP
			WHERE ID_Nomina = _ID_NominaF;
			
			DELETE FROM TBL_NOM_CALCULO_NOMINA_HIS_DET_IMP
			WHERE ID_Nomina = _ID_NominaF;
			
			DELETE FROM TBL_NOM_CALCULO_NOMINA_ASIST
			WHERE ID_Nomina = _ID_NominaF;
		
		END IF;
	
		_ID_NominaV := (select ID_Nomina 
						from TBL_NOM_CALCULO_NOMINA 
						where ID_Compania = _ID_Compania and 
										ID_Sucursal = _ID_Sucursal and 
												Ano = _Ano and Numero_Nomina = _Numero_Nomina and Tipo = _TipoV );
	
		IF _ID_NominaV is not null -- Si si existe la nomina de vales revisa:
		THEN
			-- como ya existe la nomina de vales, borra el cabecero, y borra el detalle y el especial, y el historal de impuestos y asistencias
			DELETE FROM TBL_NOM_CALCULO_NOMINA
			WHERE ID_Nomina = _ID_NominaV;
		
			DELETE FROM TBL_NOM_CALCULO_NOMINA_DET
			WHERE ID_Nomina = _ID_NominaV;
		
			DELETE FROM TBL_NOM_CALCULO_NOMINA_ESP
			WHERE ID_Nomina = _ID_NominaV;
		
			DELETE FROM TBL_NOM_CALCULO_NOMINA_HIS_DET_IMP
			WHERE ID_Nomina = _ID_NominaV;
		
			DELETE FROM TBL_NOM_CALCULO_NOMINA_ASIST
			WHERE ID_Nomina = _ID_NominaV;
		
		END IF;
		--- /////////////// fin borrado de nominas anteriores creadas especial y vales (si las habia)


		--////////////////// ahora si es de aguinaldo cambia a su tipo normal correspondiente /////////////////////////////////////
		IF _Tipo = 5 or _Tipo = 6 
		THEN
			_Tipo = _Tipo - 4; 
		END IF;		
		-- /////////////////////// calcula los dias acumulados del a?o /////////////////////
		_DiasNominaAc := ( 	select sum(Dias) 
							from TBL_NOM_CALCULO_NOMINA
							where Ano = _Ano and Tipo = _Tipo and 
											ID_Sucursal = _ID_Sucursal and 
													ID_Compania = _ID_Compania and 
														Numero_Nomina < _Numero_Nomina );

		IF _TipoAg = 0
		THEN
			_result := 'La n√≥mina se calcul√≥ satisfactoriamente';
			_DiasNominaAA := ( case when _DiasNominaAc is null then _DiasNomina else _DiasNominaAc + _DiasNomina end );
		ELSE
			_result := 'La n√≥mina de aguinaldos se calcul√≥ satisfactoriamente';
			_DiasNominaAA = ( case when _DiasNominaAc is null then 0 else _DiasNominaAc end );
		END IF;
		--/////////////////////////////////////////////////////////////////////////////////////////////////////////////
		--///////////////////////////////// AHORA ANALIZA A CADA EMPLEADO /////////////////////////////////////////////
		--///////////////////////////////////////////////////////////////////////////////////////////////////////////// 
		_contNum := 1;
		_contTotal := (select count(*) from _TMP_ANALISIS);
		-- Aplica las variables a la variable del procedimiento
		_SalarioMinimo := (	select VDecimal from TBL_VARIABLES	
							where ID_Variable = 'SALMIN' );
		_SalarioTope := (	select VDecimal from TBL_VARIABLES	
							where ID_Variable = 'SALTOP' );
		_PPINCON := 	(	select VDecimal from TBL_VARIABLES
							where ID_Variable = 'PPINCON' );
		_FAC_DVD := (	select VDecimal from TBL_VARIABLES	-- EL FACTOR DE VACACIONES DISFRUTADAS
						where ID_Variable = 'FAC_DVD' );
		_MaxHE := (	select VEntero	from TBL_VARIABLES	
					where ID_Variable = 'MAX_HE' );
		_MHEE := (	select VDecimal from TBL_VARIABLES	
					where ID_Variable = 'MHEE' );
		_PRIDOM := (	select VDecimal from TBL_VARIABLES	
						where ID_Variable = 'PRIDOM' );
		_COMRETIMSS := (	select VDecimal from TBL_VARIABLES	
							where ID_Variable = 'COMRETIMSS' );
		_SAVAR := (	select VDecimal from TBL_VARIABLES 
					where ID_Variable = 'SA' );
		_CSIN := (	select VDecimal	from TBL_VARIABLES
					where ID_Variable = 'CSIN' );
		_ACA := (	select VDecimal	from TBL_VARIABLES
					where ID_Variable = 'ACA' );
		_FonAj := (	select VEntero	from TBL_VARIABLES	-- EL AJUSTE DE MESES PARA EL FONACOT
					where ID_Variable = 'FONAJ' );

		_DiasNominaM :=  ( 	select (case when sum(Dias) is null then 0 else sum(Dias) end )
							from TBL_NOM_CALCULO_NOMINA 
							where  ID_Compania = _ID_Compania and ID_Sucursal = _ID_Sucursal and 
									Tipo = _Tipo and Ano = _Ano and Mes = _Mes and Numero_Nomina < _Numero_Nomina );
												
		-- TRASPASA LOS DIAS DE NOMINA Y LAS FECHAS DE ESTA
		_Fecha_DesdeNom := _Fecha_Desde;
		_Fecha_HastaNom := _Fecha_Hasta;
		_DiasNominaNom := getfechadiff('day', _Fecha_DesdeNom, _Fecha_HastaNom) + 1;
		-- FIN TRASPASO
		
		FOR _EMP IN (
						SELECT * FROM TBL_NOM_MASEMP me
						WHERE me.Tipo_de_nomina = _Tipo and me.ID_Compania = _ID_Compania and me.ID_Sucursal = _ID_Sucursal  and me.Fecha_de_Ingreso <= _Fecha_Hasta and 
							( ( me.Status = 0 ) or ( me.Status = 2 and me.Fecha_para_Liquidaciones >= _Fecha_Desde) ) -- solo los de la compa√±ia y sucursal tal dados de alta
					)
		LOOP
			_ID_Empleado := _EMP.ID_Empleado;
			_NivelConfianza := _EMP.Sindicalizado;
			_CompensacionAnual := _EMP.CompensacionAnual;
			_SalarioDiario := _EMP.Salario_Diario; -- SALARIO DIARIO EN EL MASEMP
			_SalarioPorHora := _EMP.Salario_por_Hora; -- EL SALARIO POR HORA DEL MASEMP
			_SalarioIntegrado := _EMP.Salario_Integrado; -- EL SALARIO INTEGRADO DEL MASEMP
			_Turno := _EMP.ID_Turno;
			_SalarioMixto := _EMP.Salario_Mixto; -- SALARIO MIXTO EN EL MASEMP
			_CalculoMixto := _EMP.CalculoMixto; -- 1 SI APLICA EL SALARIO MIXTO
			_Fecha_Ingreso := _EMP.Fecha_de_Ingreso;
			_Castigo_Impuntualidad := _EMP.Castigo_Impuntualidad;
			
			--ESTABLECE LOS DIAS DE NOMINA Y FECHAS DE NOMINA DEL EMPLEADO USANDO EL TRASPASO ANTERIOR
			--SOLO SI NO ES DE AGUINALDO
			IF _TipoAg = 0
			THEN
				IF _Fecha_Ingreso > _Fecha_DesdeNom
				THEN
					_Fecha_Desde := _Fecha_Ingreso;
				ELSE
					_Fecha_Desde := _Fecha_DesdeNom;
				END IF;

				IF _EMP.Fecha_para_Liquidaciones is null
				THEN
					_Fecha_Hasta := _Fecha_HastaNom;
				ELSIF _EMP.Fecha_para_Liquidaciones < _Fecha_HastaNom
				THEN
					_Fecha_Hasta := EMP.Fecha_para_Liquidaciones;
				ELSE -- en este caso es igual o mayor 
					_Fecha_Hasta := _Fecha_HastaNom;
				END IF;
			END IF;
				
			_DiasNomina := getfechadiff('day', _Fecha_Desde, _Fecha_Hasta) + 1;	
					
			IF _Fecha_Desde > _Fecha_Hasta -- Aqui supone un error logico de fechas, lo cual hace que este empleado no proceda.
			THEN
				raise notice 'Error logico de fechas, la fecha de inicio de nomina es mayor al del final para el empleado %', _EMP.ID_Empleado;
				CONTINUE;
			END IF;
			
			--FIN DE ESTABLECIMIENTOS DE DIAS Y FECHAS DE NOMINA DE ESTE EMPLEADO
			_Sueldo := ROUND(_SalarioDiario * _DiasNomina, 2);

			--////////////////////////////////////////////////////////////////// calcula cabeceros de solo nomina de aguinaldos ////////////////////////////////////////////////////////////
			IF _TipoAg <> 0
			THEN
				_AnosCumplidos := getabsfechadiff('year',_Fecha_Ingreso,_Fecha_Hasta);
				_TOTAL_DAG := case when _Fecha_Ingreso < _Fecha_Desde
										then getfechadiff('day',_Fecha_Desde, _Fecha_Hasta) + 1
										else getfechadiff('day',_Fecha_Ingreso, _Fecha_Hasta) + 1 
								end;
				_DiasAg := case		when -- Selecciona los dias de aguinaldo segun su antig√ºedad
									   ( 	select a.Dias 
										from TBL_NOM_AGUINALDO a
										where a.Desde <= _AnosCumplidos and a.Hasta >= _AnosCumplidos 
										limit 1 ) is null then 0 
									else
									   ( 	select a.Dias 
										from TBL_NOM_AGUINALDO a 
										where a.Desde <= _AnosCumplidos and a.Hasta >= _AnosCumplidos
										limit 1  ) 
							end;

				IF _TOTAL_DAG <> 0
				THEN
					_DT := ROUND((_TOTAL_DAG / _DiasAno) * _DiasAg, 1 );
					_ImporteAguinaldo := ROUND( ((case when _CalculoMixto = '0' then _SalarioDiario else _SalarioMixto end) * (cast((_TOTAL_DAG * _DiasAg) as numeric) / _DiasAno )), 2);
					_IAE := case when ROUND( ((_TOTAL_DAG / _DiasAno) * (_SalarioMinimo * 30)), 2) < _ImporteAguinaldo 
								then  ROUND( ((_TOTAL_DAG / _DiasAno) * (_SalarioMinimo * 30)), 2) 
								else _ImporteAguinaldo 
							end;
					_IAG := case when _IAE < _ImporteAguinaldo then _ImporteAguinaldo - _IAE else 0.00 end;	
				ELSE
					_DT := 0.0;
					_IAE := 0.00;
					_IAG := 0.00;		
		 		END IF;

				IF _DT is null THEN _DT := 0; END IF;
				
		 		INSERT INTO _TMP_CALCULO_NOMINA_ESP
				VALUES(_ID_Nomina, _ID_Empleado, _DT, 0, _contNum, 0.0, 0.0,
						null,null,0.0,0.0,0.0,0.0,0.0,0,0,0,0);
			END IF;
			--///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

			IF _TipoAg = 0
			THEN
				-- //////////////////////////////////////////////////////////////////
				-- AHORA CALCULA LOS RETARDOS, LAS FALTAS E INCAPACIDADES EN TODAS SUS MODALIDADES 
				-- primero calcula llamando al mdulo exterior, aqui manda la variable _IMPDESC que se calcula directamente en el modulo
				SELECT * INTO    _TOTAL_FLT, _TOTAL_IXM, _TOTAL_IXE, _TOTAL_IXA, _resultflt, 
								_IMP_DAP, _HRS_DESC, _HRS_FLT, _HRS_IXM, _HRS_IXE, _HRS_IXA,
								_IMPPORINCON, _IMP_DSP, _HRS_SINPAG
				FROM sp_nom_calculo_nomina_faltas( _Tipo, _DPIncon, _MesDesc, _AnoDesc, _PPINCON, _ID_Empleado, _Fecha_Desde, _Fecha_Hasta,
														_SalarioPorHora, _SalarioDiario, _Turno, _CalculoMixto, _SalarioMixto, _Fecha_Ingreso, _Castigo_Impuntualidad ) 
				AS 
						(
							TOTAL_FLT numeric(4,2), TOTAL_IXM numeric(4,2), TOTAL_IXE numeric(4,2), TOTAL_IXA numeric(4,2), result varchar(254),
							IMPDESC numeric(10,2), HRS_DESC numeric(6,2), HRS_FLT numeric(6,2), HRS_IXM numeric(6,2), HRS_IXE numeric(6,2), HRS_IXA numeric(6,2),
							IMPPORINCON numeric(10,2), IMPSINPAG numeric(10,2), HRS_SINPAG numeric(6,2)
						);
				if(_resultflt is not null and _resultflt <> '')
				then
					_result := _result || '<br>' || _resultflt;
				end if;
				-- AHORA QUE YA TIENE LOS DATOS, CALCULA LOS RESULTADOS EN PESOS EN LAS VARIABLES _FLT numeric(10,2), _IIXM numeric(10,2), _IIXE numeric(10,2), _IIXA numeric(10,2)
				-- Primero calcula las faltas, incapacidad por maternidad, por enfermedad y por accidente
				_FLT :=  round((case when _CalculoMixto = '0' then _SalarioDiario else _SalarioMixto end ) * _TOTAL_FLT,2);
				_IIXM := round(_SalarioDiario *	_TOTAL_IXM,2);
				_IIXE := round(_SalarioDiario *	_TOTAL_IXE,2);
				_IIXA := round(_SalarioDiario *	_TOTAL_IXA,2);

				IF _FLT is null THEN _FLT := 0; END IF;
				IF _IIXM is null THEN _IIXM := 0; END IF;
				IF _IIXE is null THEN _IIXE := 0; END IF;
				IF _IIXA is null THEN _IIXA := 0; END IF;
				IF _IMP_DAP is null THEN _IMP_DAP := 0; END IF;
				IF _IMPPORINCON is null THEN _IMPPORINCON := 0; END IF;
				IF _IMP_DSP is null THEN _IMP_DSP := 0; END IF;
			
				--/////////////////////////// fin faltas e incapacidades ///////////////////////////////////

				-- //////////////////////////////////////////////////////////////////
				-- AHORA CALCULA LAS vacaciones EN TODAS SUS MODALIDADES 

				-- primero calcula los dias llamando al mdulo exterior
				SELECT * INTO 	_TOTAL_DV, _TOTAL_DVP, _TOTAL_DVXF, 
								_TOTAL_DAV, _TOTAL_DVD, _TOTAL_PV, _DiasVac, _PrimaVac, _resultvac
				FROM sp_nom_calculo_nomina_vacaciones( _Tipo, _ID_Empleado, _Fecha_Desde, _Fecha_Hasta)
				AS
					(
						TOTAL_DV smallint, TOTAL_DVP smallint, TOTAL_DVXF smallint, 
						TOTAL_DAV smallint, TOTAL_DVD smallint, TOTAL_PV smallint, DiasVac smallint, PrimaVac numeric(2,2), result varchar(254)
					);
				if(_resultvac is not null  and _resultvac <> '')
				then
					_result := _result || '<br>' || _resultvac;
				end if;
				-- AHORA QUE YA TIENE LOS DATOS, CALCULA LOS RESULTADOS EN PESOS EN LAS VARIABLES _IV numeric(10,2), _IVXF numeric(10,2), _IAV numeric(10,2), _IVP numeric(10,2), _IVD numeric(10,2), _IPV numeric(10,2),
				-- Primero calcula las vacaciones, vacaciones por fuera, vacaciones pagadas, a cuenta de vacaciones y vacaciones disfrutadas
				_IV := ((case when _CalculoMixto = '0' then _SalarioDiario else _SalarioMixto end) * _TOTAL_DV); -- importe de vacvaciones
				_IVP := ((case when _CalculoMixto = '0' then _SalarioDiario else _SalarioMixto end) * _TOTAL_DVP); -- importe de vacaciones pagadas
				_IVXF := ((case when _CalculoMixto = '0' then _SalarioDiario else _SalarioMixto end) * _TOTAL_DVXF); -- importe de vacaciones por fuera
				_IAV := ((case when _CalculoMixto = '0' then _SalarioDiario else _SalarioMixto end) * _TOTAL_DAV); -- importe a cuenta de vacaciones
				_IVD := ((case when _CalculoMixto = '0' then _SalarioDiario else _SalarioMixto end) * (_TOTAL_DVD * _FAC_DVD)); -- importe de vacaciones disfrutadas por el factor			
				
				IF _IV is null THEN _IV := 0; END IF;
				IF _IVP is null THEN _IVP := 0; END IF;
				IF _IVXF is null THEN _IVXF := 0; END IF;
				IF _IAV is null THEN _IAV := 0; END IF;
				IF _IVD is null THEN _IVD := 0; END IF;
			
				-- Ahora calcula la prima vacacional
				IF _TOTAL_PV <> 0
				THEN
					_ImportePrimaVac := ((case when _CalculoMixto = '0' then _SalarioDiario else _SalarioMixto end) * _TOTAL_PV * _PrimaVac);
					_IPVE := case when ROUND((_SalarioMinimo * 15),2) < _ImportePrimaVac then ROUND((_SalarioMinimo * 15),2) else _ImportePrimaVac end;
					_IPVG := case when _IPVE < _ImportePrimaVac then _ImportePrimaVac - _IPVE else 0.00 end;							
				ELSE
					_IPVE := 0.00;
					_IPVG := 0.00;
				END IF;

				IF _IPVE is null THEN _IPVE := 0; END IF;
				IF _IPVG is null THEN _IPVG := 0; END IF;
				--//////////////////////// FIN CALCULO DE VACACIONES //////////////////////////////////
				
				--//////////////////////////////////////////////////////////////////////////////////////////////////
				--////////////////////////// AHORA CALCULA LOS DIAS TRABAJADOS ///////////////////////////////////////
				-- La variable PromSueldoTurno, DiasNominaTurn, DiasNominaDiff, se calculan en base al turno, y se refiere al costo del dia habil dividido entre los dias de la semana
				_PromSueldoTurno := ( 	select (( HNALunes + HNAMartes + HNAMiercoles + HNAJueves + HNAViernes + HNASabado + HNADomingo ) /
																				   ((case when ELunes is null then 0 else 1 end) +
																						(case when EMartes is null then 0 else 1 end) +
																						(case when EMiercoles is null then 0 else 1 end) +
																						(case when EJueves is null then 0 else 1 end) +
																						(case when EViernes is null then 0 else 1 end) +
																						(case when ESabado is null then 0 else 1 end) +
																						(case when EDomingo is null then 0 else 1 end)) / 8 )
																		from TBL_NOM_TURNOS 
																		where ID_Turno = _Turno );
				_DiasNominaSal := _DiasNomina; -- Establecemos los dias de nomina flotantes para poder calcular salario
				_DiasNominaTurn := FLOOR(_DiasNominaSal / 7);
				_DiasNominaDiff := (_DiasNominaSal / 7) - _DiasNominaTurn;
				-- La variable _DT ( dias trabajados ), se calcula sumando los dias de nomina menos las faltas, las incapacidades, y las vacaciones disfrutadas
				IF _DiasNomina = _DiasNominaNom -- si estaba dado de alta durante todo el periodo de esta nomina
				THEN
					_DT := ( _DiasNomina - _TOTAL_FLT - _TOTAL_IXM - _TOTAL_IXE - _TOTAL_IXA - _TOTAL_DVD );
				ELSE -- de lo contrario es un empleado que acaba de entrar o esta dado de baja antes que se generara la nomina
					_DT := ROUND( (((_DiasNominaTurn * 7) + (_PromSueldoTurno * _DiasNominaDiff * 7)) - _TOTAL_FLT - _TOTAL_IXM - _TOTAL_IXE - _TOTAL_IXA - _TOTAL_DVD), 2);
				END IF;
				
				IF _DT is null THEN _DT := 0; END IF;
				
				-- ////////////////////////////// fin calculo de dias trabajados ///////////////////////////////////////////////
				--///////////// REVISADO HASTA AQUI OK		
				
				-- ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				-- //////////////////    CALCULA HORAS EXTRAS EN TODAS SUS MODALIDADES  ////////////////////////////////////////
				_Aplica_horas_Extras := _EMP.Aplica_horas_Extras;
				
				IF _EMP.Aplica_horas_Extras = '1'
				THEN
					SELECT * INTO _TOTAL_HE, _TOTAL_HF, _TOTAL_HD, _TOTAL_HT, _DiasHorasExtras
					FROM sp_nom_calculo_nomina_horas_extras( _Tipo, _ID_Empleado, _Fecha_Desde, _Fecha_Hasta, _HEPF, _MaxHE)
					AS
						(
							TOTAL_HE decimal(6,2) , TOTAL_HF decimal(6,2), TOTAL_HD decimal(6,2), TOTAL_HT decimal(6,2), DiasHorasExtras smallint
						);
				ELSE
					_TOTAL_HE := 0.00;
					_TOTAL_HF := 0.00;
					_TOTAL_HD := 0.00;
					_TOTAL_HT := 0.00;
					_DiasHorasExtras := 0;
				END IF;
			
				IF (_TOTAL_HE + _TOTAL_HT) > 0.00 -- CALCULA HORAS EXTRAS DOBLES Y TRIPLES POR DENTRO
				THEN
					_ImporteHorasExtras := ((_SalarioPorHora * _TOTAL_HE) * 2) + ((_SalarioPorHora * _TOTAL_HT) * 3);
					if(_SalarioDiario <= _SalarioMinimo)
					then
						_IHEE := _ImporteHorasExtras;
						_IHEG := 0.00;
					else
						_IHEE := case when ROUND(_SalarioMinimo * _MHEE * (_DiasNomina/7),2) < _ImporteHorasExtras 
								 then ROUND(_SalarioMinimo * _MHEE * (_DiasNomina/7),2) else _ImporteHorasExtras end;
						_IHEG := case when _IHEE < _ImporteHorasExtras then _ImporteHorasExtras - _IHEE else 0.00 end;							
					end if;
				ELSE
					_IHEE := 0.00;
					_IHEG := 0.00;
				END IF;

				IF _IHEE is null THEN	_IHEE := 0; END IF;
				IF _IHEG is null THEN _IHEG := 0; END IF;

				IF _TOTAL_HF <> 0.00 -- CALCULA HORAS EXTRAS POR FUERA
				THEN
					_IHE := (_SalarioPorHora * _TOTAL_HF) * 2;
				ELSE
					_IHE := 0.00;
				END IF;

				IF _IHE is null THEN _IHE := 0; END IF;

				IF _TOTAL_HD <> 0.00 -- CALCULA HORAS EXTRAS DOBLES DEL DOMINGO POR DENTRO
				THEN
					_ImporteHorasExtras := (_SalarioPorHora * _TOTAL_HD) * 2;
					if(_SalarioDiario <= _SalarioMinimo)
					then
						_IHDE := _ImporteHorasExtras;
						_IHDG := 0.00;
					else
						_IHDE := case when ROUND(_SalarioMinimo * _MHEE * (_DiasNomina/7),2) < _ImporteHorasExtras 
									then ROUND(_SalarioMinimo * _MHEE * (_DiasNomina/7),2) else _ImporteHorasExtras end;
						_IHDG := case when _IHDE < _ImporteHorasExtras then _ImporteHorasExtras - _IHDE else 0.00 end;
					end if;
					_PrimaDominical := _ImporteHorasExtras * _PRIDOM;
					if(_SalarioDiario <= _SalarioMinimo)
					then
						_PDE := _PrimaDominical;
						_PDG := 0.00;
					else
						_PDE := case when ROUND(_SalarioMinimo * (_DiasNomina/7),2) < _PrimaDominical 
									then ROUND(_SalarioMinimo * (_DiasNomina/7),2) else _PrimaDominical end;
						_PDG := case when _PDE < _PrimaDominical then _PrimaDominical - _PDE else 0.00 end;	
					end if;						
				ELSE
					_IHDE := 0.00;
					_IHDG := 0.00;
					_PDE := 0.00;
					_PDG := 0.00;
				END IF;

				IF _IHDE is null THEN _IHDE := 0; END IF;
				IF _IHDG is null THEN _IHDG := 0; END IF;
				IF _PDE is null THEN _PDE := 0; END IF;
				IF _PDG is null THEN _PDG := 0; END IF;
				
				-- ///////////////////////////////  FIN DE HORAS EXTRAS  ////////////////////////////////////////////


				--//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				-- //////////// AQUI INSERTA EL CABECERO DEL EMPLEADO EN LA NOMINA NORMAL, ESPECIAL Y VALES ////////////////////////
				INSERT INTO _TMP_CALCULO_NOMINA_ESP
				VALUES(_ID_Nomina, _ID_Empleado, _DT, (_TOTAL_FLT + _TOTAL_IXM + _TOTAL_IXE + _TOTAL_IXA + _TOTAL_DVD), _contNum, _TOTAL_HE, _TOTAL_HD,
							null,null,0.0,0.0,0.0,0.0,(_TOTAL_HT + _TOTAL_HD),_TOTAL_IXA,_TOTAL_IXE,_TOTAL_IXM, _DiasHorasExtras);
				
				INSERT INTO _TMP_CALCULO_NOMINA_ESP
				VALUES(-1, _ID_Empleado, _DT, (_TOTAL_FLT + _TOTAL_IXM + _TOTAL_IXE + _TOTAL_IXA + _TOTAL_DVD), _contNum, _TOTAL_HF, 0.0,
							null,null,0.0,0.0,0.0,0.0,0.0,0,0,0,0);

				IF (select VEntero from TBL_VARIABLES where ID_Variable = 'NOMVALS') = 1 and _CalVales = '1'
				THEN
					INSERT INTO _TMP_CALCULO_NOMINA_ESP
					VALUES(-2, _ID_Empleado, _DT, (_TOTAL_FLT + _TOTAL_IXM + _TOTAL_IXE + _TOTAL_IXA + _TOTAL_DVD), _contNum, 0.0, 0.0,
							null,null,0.0,0.0,0.0,0.0,0.0,0,0,0,0);
				END IF;
			END IF; -- _TipoAg = 0
			-- ///////////////////////////////////////////////////////////////////////////////////////////////
			-- ///////////////////////   AHORA CALCULA LOS MOVIMIENTOS DINMICOS  /////////////////////////////
			-- Simplemente llama al porcedimiento externo porque este se encarga de meter los resultados en la tabla temporal de movimientos dinmicos
			IF _TipoAg = 0
			THEN
				-- Empieza por los de nomina normal
				EXECUTE sp_nom_calculo_nomina_dinamicos( _ID_Empleado, _ID_Compania, _ID_Sucursal, _Ano, _Numero_Nomina, '12', 
																								_NivelConfianza, _SalarioPorHora, _SalarioDiario, _SalarioMixto, _CalculoMixto);
				-- Ahora por los de nomina especial
				EXECUTE  sp_nom_calculo_nomina_dinamicos( _ID_Empleado, _ID_Compania, _ID_Sucursal, _Ano, _Numero_Nomina, '34', 
																								_NivelConfianza, _SalarioPorHora, _SalarioDiario, _SalarioMixto, _CalculoMixto);
				-- Ahora por los de nomina de vales
				IF (select VEntero from TBL_VARIABLES where ID_Variable = 'NOMVALS') = 1 and _CalVales = '1'
				THEN
					EXECUTE sp_nom_calculo_nomina_dinamicos( _ID_Empleado, _ID_Compania, _ID_Sucursal, _Ano, _Numero_Nomina, '78', 
																								_NivelConfianza, _SalarioPorHora, _SalarioDiario, _SalarioMixto, _CalculoMixto);
				END IF;
			ELSE -- Es nomina de aguinaldos
				EXECUTE sp_nom_calculo_nomina_dinamicos( _ID_Empleado, _ID_Compania, _ID_Sucursal, _Ano, _Numero_Nomina, '56', 
																								_NivelConfianza, _SalarioPorHora, _SalarioDiario, _SalarioMixto, _CalculoMixto);
			END IF;
			--///////////////////////// fin calculo movimientos di√°nmicos /////////////////////////////////////////////////////////////////////

			IF _TipoAg = 0
			THEN
				--//////////////////////////////////////////////////////////////////////////////////////////////////
				-- AHORA CALCULA EL SUELDO DE ESTE EMPLEADO MENOS VACACIONES SI ES QUE LAS TUVO ////////////////////
				IF _DiasNomina = _DiasNominaNom -- si estaba dado de alta durante todo el periodo de esta nomina
				THEN
					_SAL := ROUND(_SalarioDiario * _DiasNomina,2) - _IV - _IAV;
				ELSE -- de lo contrario es un empleado que acaba de entrar o esta dado de baja antes que se generara la nomina
					_SAL = 	ROUND( ((_DiasNominaTurn * 7) + (_PromSueldoTurno * _DiasNominaDiff * 7)) * _SalarioDiario,  2 ) - _IV - _IAV;
				END IF;
				
				IF _SAL is null THEN _SAL := 0.0; END IF;
				--/////////////////////////////////// fin calculo de sueldo ////////////////////////////////////
						
				-- /////////////////////////////////////////////////////////////////////////////////////////////
				-- ////////////////////////////////   AHORA CALCULA EL IMSS  //////////////////////////////////
				_IMSS := (SELECT case 	when (	select SUM(Cuota_Trabajador) 
												from TBL_NOM_IMSS) is null 
										then 0.00
										else 	case 	when _SalarioIntegrado < _SalarioTope 
														then ( round( (	select SUM(Cuota_Trabajador) 
																		from TBL_NOM_IMSS ) * ( _SalarioIntegrado * _DT), 2 ) )
														else	( round( (	select SUM(Cuota_Trabajador) -- cuando el sueldo es mayor al tope, entonces se calcula en base al tope 
																			from TBL_NOM_IMSS ) *	( _SalarioTope * _DT), 2 ) )
												end
								end );
				IF( _SalarioIntegrado > (_SalarioMinimo * 3))
				THEN
					_IMSS := _IMSS + ((_SalarioIntegrado - (_SalarioMinimo * 3)) * _COMRETIMSS * _DT);
				END IF;
				
				IF _IMSS is null THEN _IMSS := 0; END IF;
			--/////////////////////////////////// fin del imss //////////////////////////////////////
			END IF;
			--/////////////////////////////////////////////////////////////////////////////////////////////
			--////////////////////////////////////////// AHORA CALCULA EL ISPT ////////////////////////////
			_isptFlag := 0;
			_DA := (	select sum(e.Dias + e.Faltas) 
					from TBL_NOM_CALCULO_NOMINA_ESP e join TBL_NOM_CALCULO_NOMINA n on
							e.ID_Nomina = n.ID_Nomina
					where e.ID_Empleado = _ID_Empleado and
								n.Ano = _Ano and n.Tipo = _Tipo and 
										ID_Sucursal = _ID_Sucursal and 
										ID_Compania = _ID_Compania and 
										Numero_Nomina < _Numero_Nomina );
			IF _TipoAg = 0
			THEN
				_DAA := ( case 	when _DA is null 
								then _DT +  (_TOTAL_FLT + _TOTAL_IXM + _TOTAL_IXE + _TOTAL_IXA + _TOTAL_DVD)
								else _DA + _DiasNomina end );
				_SA := ( 	select SUM(Gravado) + SUM(Deduccion) -- SUELDOS ACUMULADOS SIN CONTAR EL DE ESTA NOMINA
						from TBL_NOM_CALCULO_NOMINA_DET cnd JOIN TBL_NOM_CALCULO_NOMINA cn ON
							cnd.ID_Nomina = cn.ID_Nomina
						where  (Tipo = _Tipo or Tipo = _TipoAg or Tipo = _TipoV) and Ano = _Ano and Numero_Nomina < _Numero_Nomina and
							ID_Empleado = _ID_Empleado and ( 
							cnd.ID_Movimiento = _M_IAG or
							cnd.ID_Movimiento = _M_SAL or
							cnd.ID_Movimiento = _M_IDV or
							cnd.ID_Movimiento = _M_DAP or
							cnd.ID_Movimiento = _M_DPI or
							cnd.ID_Movimiento = _M_DSP or
							cnd.ID_Movimiento = _M_FLT or
							cnd.ID_Movimiento = _M_IXM or
							cnd.ID_Movimiento = _M_IXE or
							cnd.ID_Movimiento = _M_IXA or
							cnd.ID_Movimiento = _M_IDVD ));
				_SAA := case when _SA is not null then 
							_SA + ((_SAL + _IV) - (_IMP_DAP + _IMPPORINCON + _IMP_DSP + _FLT + _IIXM + _IIXE + _IIXA + _IVD))
						else
							(_SAL + _IV) - (_IMP_DAP + _IMPPORINCON + _IMP_DSP + _FLT + _IIXM + _IIXE + _IIXA + _IVD)
						end;
				_GA := (	select SUM(Gravado) -- PERCEPCIONES ACUMULADAS (SIN CONTAR EL SUELDO) SIN CONTAR EL DE ESTA NOMINA
						from TBL_NOM_CALCULO_NOMINA_DET cnd JOIN TBL_NOM_CALCULO_NOMINA cn ON
								cnd.ID_Nomina = cn.ID_Nomina
						where  ( Tipo = _Tipo or Tipo = _TipoAg or Tipo = _TipoV ) and Ano = _Ano and Numero_Nomina < _Numero_Nomina and
								ID_Empleado = _ID_Empleado and 
								cnd.ID_Movimiento <> _M_IAG  and 
								cnd.ID_Movimiento <> _M_SAL  and 
								cnd.ID_Movimiento <> _M_IDV );
				_GAA = case when  (	SELECT sum(TOTAL_GRAVADO)
									FROM _TMP_PLANTILLAS_TOTALES 
									WHERE ID_Empleado = _ID_Empleado and ISPT = '1' and Tipo <> '34' ) is null 
						then 	case 	when _GA is not null 
										then _GA + _IHEG + _IHDG + _PDG + _IAV + _IVP + _IPVG
										else _IHEG + _IHDG + _PDG + _IAV + _IVP + _IPVG  
								end
						else 	case 	when _GA is not null 
										then _GA + _IHEG + _IHDG + _PDG + _IAV + _IVP + _IPVG +
											(	SELECT sum(TOTAL_GRAVADO)
												FROM _TMP_PLANTILLAS_TOTALES 
												WHERE ID_Empleado = _ID_Empleado and ISPT = '1' and Tipo <> '34' )
										else _IHEG + _IHDG + _PDG + _IAV + _IVP + _IPVG + 
											(	SELECT sum(TOTAL_GRAVADO)
												FROM _TMP_PLANTILLAS_TOTALES 
												WHERE ID_Empleado = _ID_Empleado and ISPT = '1' and Tipo <> '34' ) 
								end
					end;
				_FI := (_SAA + _GAA) / _DAA; -- ES LA BASE1; EL IMPORTE ACUMULADO GRAVADO A FECHA DE NOMINA
				_RANGO := ( 	select ID_ISR 
								from TBL_NOM_ISR_ANUALIZADO
								where Limite_Inferior <= _FI and Limite_Superior >= _FI limit 1 );
				_LI := ( 	select Limite_Inferior 
						from TBL_NOM_ISR_ANUALIZADO
						where ID_ISR = _RANGO );					
				_Exedente := ((_SAA + _GAA) - (_LI * _DAA));
				_IME := ( _Exedente * ( 	select Porcentaje_Exd -- IMPUESTO MARGINAL EXEDENTE (IMPTEX)
										from TBL_NOM_ISR_ANUALIZADO
										where ID_ISR = _RANGO ));
				_CF := ( 	select Cuota_Fija * _DAA
						from TBL_NOM_ISR_ANUALIZADO
						where ID_ISR = _RANGO );
				_CFDTGAA := _IME + _CF;
				_AIM := case when ( 	select SUM(Deduccion) 
										from TBL_NOM_CALCULO_NOMINA_DET cnd JOIN TBL_NOM_CALCULO_NOMINA cn ON
											cnd.ID_Nomina = cn.ID_Nomina
										where  (Tipo = _Tipo or Tipo = _TipoAg or Tipo = _TipoV) and Ano = _Ano and Numero_Nomina < _Numero_Nomina and
																	ID_Empleado = _ID_Empleado and cnd.ID_Movimiento = _M_ISPT ) is null 
							then 0.0000
						else ( 	select SUM(Deduccion) 
								from TBL_NOM_CALCULO_NOMINA_DET cnd JOIN TBL_NOM_CALCULO_NOMINA cn ON
									cnd.ID_Nomina = cn.ID_Nomina
								where  (Tipo = _Tipo or Tipo = _TipoAg or Tipo = _TipoV) and Ano = _Ano and Numero_Nomina < _Numero_Nomina and
																ID_Empleado = _ID_Empleado and cnd.ID_Movimiento = _M_ISPT ) 
						end;
			ELSE --Impuesto de nominas de aguinaldo
				_DAA := _DA;
				_SA := ( 	select SUM(Gravado) +  SUM(Deduccion) -- SUELDOS ACUMULADOS SIN CONTAR EL DE ESTA NOMINA
						from TBL_NOM_CALCULO_NOMINA_DET cnd INNER JOIN TBL_NOM_CALCULO_NOMINA cn ON
							cnd.ID_Nomina = cn.ID_Nomina
						where  Tipo = _Tipo and Ano = _Ano and Numero_Nomina < _Numero_Nomina and 
							ID_Empleado = _ID_Empleado and ( 
							cnd.ID_Movimiento = _M_SAL or
							cnd.ID_Movimiento = _M_IDV or
							cnd.ID_Movimiento = _M_DAP or
							cnd.ID_Movimiento = _M_DPI or
							cnd.ID_Movimiento = _M_DSP or
							cnd.ID_Movimiento = _M_FLT or
							cnd.ID_Movimiento = _M_IXM or
							cnd.ID_Movimiento = _M_IXE or
							cnd.ID_Movimiento = _M_IXA or
							cnd.ID_Movimiento = _M_IDVD ));
							
				_SAA := case when _SA is not null then 
								_SA + _IAG 
							else 
								_IAG 
							end;
				_GA := (	select SUM(Gravado) -- SUELDOS ACUMULADOS SIN CONTAR EL DE ESTA NOMINA
						from TBL_NOM_CALCULO_NOMINA_DET cnd INNER JOIN TBL_NOM_CALCULO_NOMINA cn ON
							cnd.ID_Nomina = cn.ID_Nomina
						where  ( Tipo = _Tipo ) and Ano = _Ano and Numero_Nomina < _Numero_Nomina and
							ID_Empleado = _ID_Empleado and 
							cnd.ID_Movimiento <> _M_SAL  and 
							cnd.ID_Movimiento <> _M_IDV  );
				
				_GAA := case when  (	SELECT sum(TOTAL_GRAVADO)
										FROM _TMP_PLANTILLAS_TOTALES 
										WHERE ID_Empleado = _ID_Empleado and ISPT = '1' and Tipo = '56' ) is null 
							then 	case 	when _GA is not null 
											then _GA 
											else 0.00 
									end
							else 	case 	when _GA is not null 
											then _GA +  
													(	SELECT sum(TOTAL_GRAVADO)
														FROM _TMP_PLANTILLAS_TOTALES 
														WHERE ID_Empleado = _ID_Empleado and ISPT = '1' and Tipo = '56' )
											else  
													(	SELECT sum(TOTAL_GRAVADO)
														FROM _TMP_PLANTILLAS_TOTALES 
														WHERE ID_Empleado = _ID_Empleado and ISPT = '1' and Tipo = '56' ) 
									end
					 	end;
				
				_FI := (_SAA + _GAA) / _DAA; -- ES LA BASE1; EL IMPORTE ACUMULADO GRAVADO A FECHA DE NOMINA
				_RANGO := ( 	select ID_ISR 
								from TBL_NOM_ISR_ANUALIZADO
								where Limite_Inferior <= _FI and Limite_Superior >= _FI
								limit 1 	);
				_LI := ( 	select Limite_Inferior 
						from TBL_NOM_ISR_ANUALIZADO
						where ID_ISR = _RANGO );
				_Exedente := ((_SAA + _GAA) - (_LI * _DAA));
				_IME := ( _Exedente * ( 	select Porcentaje_Exd -- IMPUESTO MARGINAL EXEDENTE (IMPTEX)
							 			from TBL_NOM_ISR_ANUALIZADO
							 			where ID_ISR = _RANGO ));
				_CF := (	select Cuota_Fija * _DAA
						from TBL_NOM_ISR_ANUALIZADO
						where ID_ISR = _RANGO );
				_CFDTGAA := _IME + _CF;
				_AIM := case 	when ( 	select SUM(Deduccion) 
										from TBL_NOM_CALCULO_NOMINA_DET cnd INNER JOIN TBL_NOM_CALCULO_NOMINA cn ON
											cnd.ID_Nomina = cn.ID_Nomina
										where  (Tipo = _Tipo) and Ano = _Ano and Numero_Nomina < _Numero_Nomina and
																						ID_Empleado = _ID_Empleado and cnd.ID_Movimiento = _M_ISPT ) is null 
								then 
									0.0000
								else ( 	select SUM(Deduccion) 
										from TBL_NOM_CALCULO_NOMINA_DET cnd INNER JOIN TBL_NOM_CALCULO_NOMINA cn ON
											cnd.ID_Nomina = cn.ID_Nomina
										where  (Tipo = _Tipo) and Ano = _Ano and Numero_Nomina < _Numero_Nomina and
																						ID_Empleado = _ID_Empleado and cnd.ID_Movimiento = _M_ISPT ) 
						end;
			END IF;

			_ISPT := ROUND((_CFDTGAA + _AIM),2); 
				
			IF _ISPT is null THEN _ISPT := 0.00; END IF;
				
			IF -_ISPT > 0.00
			THEN
				_ISPT := ROUND(_ISPT * (select VDecimal from TBL_VARIABLES where ID_Variable = 'VARISPT'),2);
			ELSE
				IF _EMP.CalculoSimplificado = '1'
				THEN
					_ISPT := ROUND(_ISPT * _EMP.PCS ,2);
				END IF;
			END IF;
				
			IF _ISPSB is null THEN _ISPSB := 0.00; END IF;

			--raise notice 'FIN ISPT y Subsidio';

			-- inserta en la tabla de historial de impuestos. Por ejemplo como el de arriba
			INSERT INTO _TMP_CALCULO_NOMINA_HIS_DET_IMP
			VALUES(_ID_Nomina,_ID_Empleado,coalesce(_IMP_DAP,0),coalesce(_IMP_DSP,0),_DiasNomina,_DT,_SA,_SAA,_DA,_DAA,_IMPAN,_GA,_GAA,_FI,_LI,_SalarioTope,_Exedente,_CF,_CFDTGAA,_CFDT,_IME,_IM,_AIM,_ISPT,_Subsidio,_CFS,_SubTot,_SubTotGAA,_ISPSB);
			--///////////////////////////////////////////////////////////

			IF _TipoAg = 0
			THEN
				-- Calcula el Credito al salario
				-- pRIMERO CHECA QUE NO ESTE DE INCAPACIDAD EN ESTA SEMANA//////////////	
					
				IF(date_part('Month',_Fecha_Ingreso) = _Mes AND date_part('Year',_Fecha_Ingreso) = _Ano) -- si es de nuevo ingreso en el mes solo calcula los dias trabajados del mes
				THEN
					_DTM := getfechadiff('day', _Fecha_Ingreso, _Fecha_Hasta) + 1;
				ELSE
					_DTM := _DiasNomina + _DiasNominaM;
				END IF;
				
				IF _DTM > 30.4 THEN _DTM := 30.4; END IF;

				-- Calcula los gravados totales de las semanas anteriores de este mes y luego le adiciona los de esta semana
				_INGGET = (		select SUM(Gravado) 
								from TBL_NOM_CALCULO_NOMINA_DET cnd JOIN TBL_NOM_CALCULO_NOMINA cn ON
									cnd.ID_Nomina = cn.ID_Nomina
								where  ID_Compania = _ID_Compania and ID_Sucursal = _ID_Sucursal and
									Tipo = _Tipo and Ano = _Ano and Mes = _Mes and Numero_Nomina < _Numero_Nomina and
										ID_Empleado = _ID_Empleado and cnd.ID_Movimiento <> _M_AAP and cnd.ID_Movimiento <> _M_ASP ); 
					
				IF _INGGET is null THEN _INGGET := 0.0; END IF;
				
				_INGGET := _INGGET + ( 	case 	when  (	SELECT sum(TOTAL_GRAVADO) 
														FROM _TMP_PLANTILLAS_TOTALES 
														WHERE ID_Empleado = _ID_Empleado and ISPT = '1' and Tipo <> '34' ) is null 
												then _Sueldo + _IHEG + _IHDG + _PDG + _IV + _IAV + _IVP + _IPVG
												else _Sueldo + _IHEG + _IHDG + _PDG + _IV + _IAV + _IVP + _IPVG + 
																				(	SELECT sum(TOTAL_GRAVADO)  
																					FROM _TMP_PLANTILLAS_TOTALES 
																					WHERE ID_Empleado = _ID_Empleado and ISPT = '1' and Tipo <> '34' )
										end );

				-- Ahora Calcula los gravados  y deducciones de las semanas anteriores de este mes y luego los de esta semana
				_INGM := (	select SUM(Gravado) + SUM(Deduccion) -- SUELDOS ACUMULADOS SIN CONTAR EL CREDITO AL SALARIO
							from TBL_NOM_CALCULO_NOMINA_DET cnd JOIN TBL_NOM_CALCULO_NOMINA cn ON
								cnd.ID_Nomina = cn.ID_Nomina
							where  ID_Compania = _ID_Compania and ID_Sucursal = _ID_Sucursal and
								Tipo = _Tipo and Ano = _Ano and Mes = _Mes and Numero_Nomina < _Numero_Nomina and
															ID_Empleado = _ID_Empleado and cnd.ID_Movimiento <> _M_CRDFS and
															cnd.ID_Movimiento <> _M_AAP and cnd.ID_Movimiento <> _M_ASP and
															((cnd.Gravado > 0) or (cnd.Deduccion <> 0 and ( cnd.ID_Movimiento = _M_FLT
																														or	cnd.ID_Movimiento	= _M_IDVD
																														or cnd.ID_Movimiento	= _M_IXM
																														or cnd.ID_Movimiento	= _M_IXE
																														or cnd.ID_Movimiento	= _M_IXA
																														or cnd.ID_Movimiento	= _M_DPI
																														or cnd.ID_Movimiento	= _M_DAP
																														or cnd.ID_Movimiento  = _M_DSP))) ); 
				IF _INGM is null THEN _INGM := 0.0; END IF;
				
				_ING := 	case when ( SELECT sum(TOTAL_GRAVADO)
									FROM _TMP_PLANTILLAS_TOTALES 
									WHERE ID_Empleado = _ID_Empleado and ISPT = '1' and Tipo <> '34' ) is null 
							then _IHEG + _IHDG + _PDG + _IV + _IAV + _IVP + _IPVG - _FLT - _IIXM - _IIXE - _IIXA - _IVD - _IMPPORINCON - _IMP_DAP - _IMP_DSP
							else _IHEG + _IHDG + _PDG + _IV + _IAV + _IVP + _IPVG - _FLT - _IIXM - _IIXE - _IIXA - _IVD - _IMPPORINCON - _IMP_DAP - _IMP_DSP +
									(	SELECT sum(TOTAL_GRAVADO) 
										FROM _TMP_PLANTILLAS_TOTALES 
										WHERE ID_Empleado = _ID_Empleado and ISPT = '1' and Tipo <> '34' )
						end;
					
				_RANGO := (	select ID_CS
								from TBL_NOM_CREDITO_SALARIO
								where ((Ingresos_Desde / 30.4) * _DTM) <= (_Sueldo + _ING + _INGM)
										and ((Ingresos_Hasta / 30.4) * _DTM) >= (_Sueldo + _ING + _INGM) limit 1 );
				_CSDiario := ( 	select (CSM / 30.4)
								from TBL_NOM_CREDITO_SALARIO
								where ID_CS = _RANGO );
				_PRVCF := (	select case when sum(Deduccion) is null 
										then (_DTM * _CSDiario)
										else (_DTM * _CSDiario) - sum(Deduccion) 
									end 
							from TBL_NOM_CALCULO_NOMINA_DET cnd JOIN TBL_NOM_CALCULO_NOMINA cn ON
									cnd.ID_Nomina = cn.ID_Nomina
							where  ID_Compania = _ID_Compania and ID_Sucursal = _ID_Sucursal and
								Tipo = _Tipo and Ano = _Ano and Mes = _Mes and Numero_Nomina < _Numero_Nomina and
															ID_Empleado = _ID_Empleado and cnd.ID_Movimiento = _M_CRDFS ); 
					
				IF _PRVCF is null THEN _PRVCF := 0.00; END IF;

				_CRDFS := ( case when _INGGET = 0 
								then 0 else round( ((_Sueldo + _ING + _INGM)/_INGGET) * _PRVCF, 2) 
							end );

				IF _CRDFS is null THEN _CRDFS = 0.00; END IF;

				--select _Mes as MES, _Ano as ANO, _DTM as DTM, _DiasNominaM as DM, _ID_Empleado as Clave, _INGM as INGM, _ING as ING, _Sueldo as Sueldo, _Sueldo + _ING + _INGM as Neto, _INGGET as INGGET, _RANGO as RANGO, _CSDiario as CSDiario, _PRVCF as PRVCF, _CRDFS as CRDFS

				raise notice 'FIN CREDITO al SALARIO';
				
				-- ///////////////////////////////////////////////////////////////////////
				-- AHORA CALCULA EL INFONAVIT, FONACOT Y VALES
				IF _CalVales = '1'
				THEN
					IF _EMP.Ayuda_Vales_de_Despensa = '1'
					THEN
						_VALS = _EMP.Importe_Vales_de_Despensa;
					ELSE
						_VALS = 0.0;
					END IF;
				ELSE
					_VALS = 0.0;
				END IF;
			
				IF _EMP.Fecha_Alta_Infonavit is not null
						AND _EMP.Fecha_Liquidacion_Infonavit is null
				THEN
					IF _EMP.Porcentaje_Descuento <> 0.00 -- Primera Opcion
					THEN
						_INFON := ROUND( (_SalarioIntegrado * _DT * _EMP.Porcentaje_Descuento),2);
					ELSE
						_INFON := ROUND( (_SalarioMinimo * (_EMP.Descuento_VSM / 30) * _DT),2);
					END IF;
				ELSE
					_INFON := 0.00;
				END IF;
					
				--select _INFON, _SalarioIntegrado, _DT, Porcentaje_Descuento from TBL_MASEMP where ID_Empleado = _ID_Empleado
				-- ejecuta el calculo de fonacot en el procedimiento de fonacot				
				IF _EMP.Prestamo_Fonacot > 0
				THEN
					SELECT * INTO _FONAC
					FROM sp_nom_calculo_nomina_fonacot(_ID_Empleado, _Fecha_Hasta, _DiasNomina, _FonAJ) as ( FONAC numeric(19,4));
				ELSE
					_FONAC := 0.0;
				END IF;

				IF _FONAC is null THEN _FONAC := 0.0; END IF;
		
				-- Calcula la cuota sindical en base a todas las percepciones y algunas deducciones
				_CUOTA_SINDICAL :=	case 	when _NivelConfianza = '0'
												then 0.00
												else 
													case 	when  (	SELECT sum(TOTAL_GRAVADO) + sum(TOTAL_EXENTO)
																	FROM _TMP_PLANTILLAS_TOTALES 
																	WHERE ID_Empleado = _ID_Empleado and ISPT = '1' and Tipo <> '34' ) is null 
															then 
																(( _SAL + _IHEE + _IHEG + _IHDE + _IHDG + _PDE + _PDG + /*_IHE + */ _IV + /*_IVXF*/ + _IAV + _IVP + _IPVE + _IPVG ) - 
																( _IMP_DAP + _IMP_DSP + _IMPPORINCON + _FLT + _IIXM + _IIXE + _IIXA + _IVD )) * 
																										(	select VDecimal
																											from TBL_VARIABLES
																											where ID_Variable = 'CSIN' )
															else 
																(   ((SELECT sum(TOTAL_GRAVADO)  + sum(TOTAL_EXENTO)
																	FROM _TMP_PLANTILLAS_TOTALES 
																	WHERE ID_Empleado = _ID_Empleado and ISPT = '1' and Tipo <> '34' ) + 
																( _SAL + _IHEE + _IHEG + _IHDE + _IHDG + _PDE + _PDG + /*_IHE + */ _IV + /*_IVXF*/ + _IAV + _IVP + _IPVE + _IPVG )) - 
																( _IMP_DAP + _IMP_DSP + _IMPPORINCON + _FLT + _IIXM + _IIXE + _IIXA + _IVD ) ) *
																										(	select VDecimal
																											from TBL_VARIABLES
																											where ID_Variable = 'CSIN' )
													end
										end;
				IF _CUOTA_SINDICAL is null
				THEN
					_CUOTA_SINDICAL := 0.00;
				ELSE
					_CUOTA_SINDICAL := round(_CUOTA_SINDICAL,2);
				END IF;

				-- Trabaja con el ahorro de compenzacion anual ( Utiles Escolares )
				_COMPENSACION_ANUAL :=	
						case	when _CompensacionAnual = 0
								then 0.00
								else 
									case 	when 	_EMP.CompensacionAnualFija = 0.00
											then _Sueldo *	_ACA
											else	_EMP.CompensacionAnualFija
									end
						end;

				IF _COMPENSACION_ANUAL is null
				THEN
					_COMPENSACION_ANUAL := 0.00;
				ELSE
					_COMPENSACION_ANUAL := round(_COMPENSACION_ANUAL,2);
				END IF;

			END IF;
			-- ///////////////////////////////////////////////////////////////////////////////////////
			-- AHORA ACTUALIZA LA TABLA DE ANALISIS
			IF _TipoAg = 0
			THEN
				INSERT INTO _TMP_ANALISIS(ID_Empleado,Salario_Diario,ISPT,ISPSB,IAE,IAG,CRDFS,IHEE,IHEG,IHE,			IHDE,IHDG,PDE,PDG,IDV,IDVXF,IDAV,IDVP,IDVD,IPVE,IPVG,SAL,FLT,			IMSS,INFON,FONAC,VALS,IXM,IXE,IXA,DAP,                                                   DPI,CSIN,ACA,DSP)
				VALUES(_EMP.ID_Empleado, _EMP.Salario_Diario, _ISPT, _ISPSB, 0.00, 0.00, _CRDFS, _IHEE, _IHEG, _IHE, _IHDE, _IHDG, _PDE, _PDG, _IV, _IVXF, _IAV, _IVP, _IVD, _IPVE, _IPVG, _SAL, _FLT, _IMSS, _INFON, _FONAC, _VALS, _IIXM, _IIXE, _IIXA, _IMP_DAP, _IMPPORINCON, _CUOTA_SINDICAL, _COMPENSACION_ANUAL, _IMP_DSP);
			ELSE
				INSERT INTO _TMP_ANALISIS(ID_Empleado,Salario_Diario,ISPT,ISPSB,IAE,IAG,CRDFS,IHEE,IHEG,IHE,			IHDE,IHDG,PDE,PDG,IDV,IDVXF,IDAV,IDVP,IDVD,IPVE,IPVG,SAL,FLT,			IMSS,INFON,FONAC,VALS,IXM,IXE,IXA,DAP,                                                   DPI,CSIN,ACA,DSP)
				VALUES(_EMP.ID_Empleado, _EMP.Salario_Diario, _ISPT, _ISPSB, _IAE, _IAG, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00);
			END IF;
			
			_contNum := _contNum + 1;
			
		END LOOP;
		-- ///////////////////////////////////////////////////////////////////////////////////////////////////////
		-- //////////////// AHORA INGRESA LOS RESULTADOS DE ESTA NOMINA EN LA TABLA TEMPORAL //////////////////////
		-- ///////////////////////////////////////////////////////////////////////////////////////////////////////
		IF _TipoAg = 0
		THEN
			-- comienza por las deducciones
			INSERT INTO _TMP_CALCULO_NOMINA_DET
			SELECT _ID_Nomina, ID_Empleado, _M_DSP, 0.00, 0.00, -DSP 
			FROM _TMP_ANALISIS
			WHERE DSP <> 0.00; 
		
			INSERT INTO _TMP_CALCULO_NOMINA_DET
			SELECT _ID_Nomina, ID_Empleado, _M_DAP, 0.00, 0.00, -DAP 
			FROM _TMP_ANALISIS
			WHERE DAP <> 0.00;
		
			INSERT INTO _TMP_CALCULO_NOMINA_DET
			SELECT _ID_Nomina, ID_Empleado, _M_DPI, 0.00, 0.00, -DPI 
			FROM _TMP_ANALISIS
			WHERE DPI <> 0.00; 

			INSERT INTO _TMP_CALCULO_NOMINA_DET
			SELECT _ID_Nomina, ID_Empleado, _M_FLT, 0.00, 0.00, -FLT 
			FROM _TMP_ANALISIS
			WHERE FLT <> 0.00; 
			
			INSERT INTO _TMP_CALCULO_NOMINA_DET
			SELECT _ID_Nomina, ID_Empleado, _M_IXM, 0.00, 0.00, -IXM 
			FROM _TMP_ANALISIS
			WHERE IXM <> 0.00; 
			
			INSERT INTO _TMP_CALCULO_NOMINA_DET
			SELECT _ID_Nomina, ID_Empleado, _M_IXE, 0.00, 0.00, -IXE 
			FROM _TMP_ANALISIS
			WHERE IXE <> 0.00;

			INSERT INTO _TMP_CALCULO_NOMINA_DET
			SELECT _ID_Nomina, ID_Empleado, _M_IXA, 0.00, 0.00, -IXA 
			FROM _TMP_ANALISIS
			WHERE IXA <> 0.00; 

			INSERT INTO _TMP_CALCULO_NOMINA_DET
			SELECT _ID_Nomina, ID_Empleado, _M_CSIN, 0.00, 0.00, -CSIN 
			FROM _TMP_ANALISIS
			WHERE CSIN <> 0.00; 

			INSERT INTO _TMP_CALCULO_NOMINA_DET
			SELECT _ID_Nomina, ID_Empleado, _M_ACA, 0.00, 0.00, -ACA 
			FROM _TMP_ANALISIS
			WHERE ACA <> 0.00; 

			-- AHORA POR LOS IMPUESTOS
			INSERT INTO _TMP_CALCULO_NOMINA_DET	-- Ingresa el IMSS solo si el sueldo es mayor al m?nimo
			SELECT _ID_Nomina, ID_Empleado, _M_IMSS, 0.00, 0.00, -IMSS
			FROM _TMP_ANALISIS
			WHERE IMSS <> 0.00 AND Salario_Diario > _SalarioMinimo;

			INSERT INTO _TMP_CALCULO_NOMINA_DET -- Ingresa el ISPT solo si el sueldo es mayor al mnimo
			SELECT _ID_Nomina, ID_Empleado, _M_ISPT, 0.00, 0.00, -ISPT
			FROM _TMP_ANALISIS
			WHERE ISPT <> 0.00 AND Salario_Diario > _SalarioMinimo;
				
			INSERT INTO _TMP_CALCULO_NOMINA_DET -- Ingresa el ISPSB solo si el sueldo es mayor al mnimo
			SELECT _ID_Nomina, ID_Empleado, _M_ISPSB, 0.00, 0.00, ISPSB
			FROM _TMP_ANALISIS
			WHERE ISPSB <> 0.00 AND Salario_Diario > _SalarioMinimo;
				
			INSERT INTO _TMP_CALCULO_NOMINA_DET
			SELECT _ID_Nomina, ID_Empleado, _M_CRDFS, 0.00, 0.00, CRDFS
			FROM _TMP_ANALISIS
			WHERE CRDFS <> 0.00; 

			INSERT INTO _TMP_CALCULO_NOMINA_DET 
			SELECT _ID_Nomina, ID_Empleado, _M_INFON, 0.00, 0.00, -INFON
			FROM _TMP_ANALISIS
			WHERE INFON <> 0.00; 
				
			INSERT INTO _TMP_CALCULO_NOMINA_DET
			SELECT _ID_Nomina, ID_Empleado, _M_FONAC, 0.00, 0.00, -FONAC
			FROM _TMP_ANALISIS
			WHERE FONAC <> 0.00; 
		
			-- AHORA INGRESA LAS PERCEPCIONES 
			-- Aplica los vales segun sea la configuracion
			IF _CalVales = '1'
			THEN
				IF (select VEntero from TBL_VARIABLES where ID_Variable = 'NOMVALS') = 1
				THEN	-- Aplica en nomina de vales
					INSERT INTO _TMP_CALCULO_NOMINA_DET
					SELECT -2, ID_Empleado, _M_VALS, 0.00, VALS, 0.00
					FROM _TMP_ANALISIS
					WHERE VALS <> 0.00; 
					--Agrega ISPT a Cero, esto lo hace para poder sellar la nomina de vales ya que hacienda exige el ISPT en el archivo XML aun si este es cero
					INSERT INTO _TMP_CALCULO_NOMINA_DET -- Ingresa el ISPT solo si los vales son mayor a cero
					SELECT -2, ID_Empleado, _M_ISPT, 0.00, 0.00, 0.00
					FROM _TMP_ANALISIS
					WHERE VALS <> 0.00;
				ELSE 		-- Aplica en nomina normal
					INSERT INTO _TMP_CALCULO_NOMINA_DET
					SELECT _ID_Nomina, ID_Empleado, _M_VALS, 0.00, VALS, 0.00
					FROM _TMP_ANALISIS
					WHERE VALS <> 0.00;
				END IF;
			END IF;

			INSERT INTO _TMP_CALCULO_NOMINA_DET -- Aplica el sueldo en exento o gravado segun salario minimo
			SELECT _ID_Nomina, ID_Empleado, _M_SAL, CASE WHEN Salario_Diario > _SalarioMinimo THEN SAL ELSE 0.00 END, CASE WHEN Salario_Diario > _SalarioMinimo THEN 0.00 ELSE SAL END, 0.00
			FROM _TMP_ANALISIS
			WHERE SAL <> 0.00; 

			INSERT INTO _TMP_CALCULO_NOMINA_DET
			SELECT _ID_Nomina, ID_Empleado, _M_IHEE, 0.00, IHEE, 0.00
			FROM _TMP_ANALISIS
			WHERE IHEE <> 0.00;
				
			INSERT INTO _TMP_CALCULO_NOMINA_DET
			SELECT _ID_Nomina, ID_Empleado, _M_IHEG, IHEG, 0.00, 0.00
			FROM _TMP_ANALISIS
			WHERE IHEG <> 0.00; 
				
			INSERT INTO _TMP_CALCULO_NOMINA_DET
			SELECT _ID_Nomina, ID_Empleado, _M_IHDE, 0.00, IHDE, 0.00
			FROM _TMP_ANALISIS
			WHERE IHDE <> 0.00; 
				
			INSERT INTO _TMP_CALCULO_NOMINA_DET
			SELECT _ID_Nomina, ID_Empleado, _M_IHDG, IHDG, 0.00, 0.00 
			FROM _TMP_ANALISIS
			WHERE IHDG <> 0.00; 

			INSERT INTO _TMP_CALCULO_NOMINA_DET
			SELECT _ID_Nomina, ID_Empleado, _M_PDE, 0.00, PDE, 0.00 
			FROM _TMP_ANALISIS
			WHERE PDE <> 0.00; 
				
			INSERT INTO _TMP_CALCULO_NOMINA_DET
			SELECT _ID_Nomina, ID_Empleado, _M_PDG,  PDG, 0.00, 0.00
			FROM _TMP_ANALISIS
			WHERE PDG <> 0.00; 
				
			INSERT INTO _TMP_CALCULO_NOMINA_DET
			SELECT -1, ID_Empleado, _M_IHE, 0.00, IHE, 0.00
			FROM _TMP_ANALISIS
			WHERE IHE <> 0.00; 
				
			-- AHORA APLICA LAS VACACIONES
			INSERT INTO _TMP_CALCULO_NOMINA_DET -- Aplica las vacaciones en exento o gravado segun salario minimo
			SELECT _ID_Nomina, ID_Empleado, _M_IDV, CASE WHEN Salario_Diario > _SalarioMinimo THEN IDV ELSE 0.00 END, CASE WHEN Salario_Diario > _SalarioMinimo THEN 0.00 ELSE IDV END, 0.00
			FROM _TMP_ANALISIS
			WHERE IDV <> 0.00; 

			INSERT INTO _TMP_CALCULO_NOMINA_DET
			SELECT -1, ID_Empleado, _M_IDVXF, 0.00, IDVXF, 0.00
			FROM _TMP_ANALISIS
			WHERE IDVXF <> 0.00; 

			INSERT INTO _TMP_CALCULO_NOMINA_DET -- Aplica vacaciones a cuenta en exento o gravado segun salario minimo
			SELECT _ID_Nomina, ID_Empleado, _M_IDAV, CASE WHEN Salario_Diario > _SalarioMinimo THEN IDAV ELSE 0.00 END, CASE WHEN Salario_Diario > _SalarioMinimo THEN 0.00 ELSE IDAV END, 0.00
			FROM _TMP_ANALISIS
			WHERE IDAV <> 0.00; 

			INSERT INTO _TMP_CALCULO_NOMINA_DET -- Aplica vacaciones pagadas en exento o gravado segun salario minimo
			SELECT _ID_Nomina, ID_Empleado, _M_IDVP, CASE WHEN Salario_Diario > _SalarioMinimo THEN IDVP ELSE 0.00 END, CASE WHEN Salario_Diario > _SalarioMinimo THEN 0.00 ELSE IDVP END, 0.00
			FROM _TMP_ANALISIS
			WHERE IDVP <> 0.00;
		 
			INSERT INTO _TMP_CALCULO_NOMINA_DET
			SELECT _ID_Nomina, ID_Empleado, _M_IDVD, 0.00, 0.00, -IDVD 
			FROM _TMP_ANALISIS
			WHERE IDVD <> 0.00; 
			
			INSERT INTO _TMP_CALCULO_NOMINA_DET
			SELECT _ID_Nomina, ID_Empleado, _M_IPVE, 0.00, IPVE, 0.00
			FROM _TMP_ANALISIS
			WHERE IPVE <> 0.00; 

			INSERT INTO _TMP_CALCULO_NOMINA_DET
			SELECT _ID_Nomina, ID_Empleado, _M_IPVG, IPVG, 0.00, 0.00
			FROM _TMP_ANALISIS
			WHERE IPVG <> 0.00; 
				
			--Inserta ahora los movimientos dinamicos para los salarios 
			INSERT INTO _TMP_CALCULO_NOMINA_DET
			SELECT _ID_Nomina, p.ID_Empleado, p.ID_Movimiento,  
				CASE 	WHEN me.Salario_Diario > _SalarioMinimo 
							THEN sum(TOTAL_GRAVADO) ELSE 0.00 END, 
				CASE 	WHEN me.Salario_Diario > _SalarioMinimo 
							THEN sum(TOTAL_EXENTO) ELSE sum(TOTAL_GRAVADO) + sum(TOTAL_EXENTO) END, 
				-sum(TOTAL_DEDUCCION)
			FROM _TMP_PLANTILLAS_TOTALES p INNER JOIN TBL_NOM_MASEMP me ON
				p.ID_Empleado = me.ID_Empleado
			WHERE p.Tipo = 12
			GROUP BY p.Tipo, p.ID_Empleado, me.Salario_Diario, p.ID_Movimiento;
					
			--Inserta ahora los movimientos dinamicos de la especial
			INSERT INTO _TMP_CALCULO_NOMINA_DET
			SELECT -1, p.ID_Empleado, p.ID_Movimiento,  
					0.0, sum(TOTAL_GRAVADO) + sum(TOTAL_EXENTO), -sum(TOTAL_DEDUCCION)
			FROM _TMP_PLANTILLAS_TOTALES p INNER JOIN TBL_NOM_MASEMP me ON
				p.ID_Empleado = me.ID_Empleado
			WHERE p.Tipo = 34
			GROUP BY p.Tipo, p.ID_Empleado, p.ID_Movimiento;

			--Inserta ahora los movimientos dinamicos de vales
			IF (select VEntero from TBL_VARIABLES where ID_Variable = 'NOMVALS') = 1 and _CalVales = '1'
			THEN	-- Aplica en nomina de vales
				INSERT INTO _TMP_CALCULO_NOMINA_DET
				SELECT -2, p.ID_Empleado, p.ID_Movimiento,  
						sum(TOTAL_GRAVADO), sum(TOTAL_EXENTO), -sum(TOTAL_DEDUCCION)
				FROM _TMP_PLANTILLAS_TOTALES p INNER JOIN TBL_NOM_MASEMP me ON
					p.ID_Empleado = me.ID_Empleado
				WHERE p.Tipo = 78
				GROUP BY p.Tipo, p.ID_Empleado, p.ID_Movimiento;
			END IF;

			-- Inserta ahora la deduccion ASP de Actualizacion a Pago AAP de nominas pasadas
			INSERT INTO _TMP_CALCULO_NOMINA_DET
			SELECT _ID_Nomina, ID_Empleado, _M_ASP, 0.00, 0.00, -(sum(Exento) + sum(Deduccion)) 
			FROM TBL_NOM_CALCULO_NOMINA_DET cnd INNER JOIN TBL_NOM_CALCULO_NOMINA cn ON
				cnd.ID_Nomina = cn.ID_Nomina
			WHERE  ID_Compania = _ID_Compania and ID_Sucursal = _ID_Sucursal and Tipo = _Tipo and Ano = _Ano and Numero_Nomina < _Numero_Nomina and
						 ( cnd.ID_Movimiento = _M_AAP OR cnd.ID_Movimiento = _M_ASP )
			GROUP BY ID_Empleado
			HAVING sum(Exento) + sum(Deduccion) > 0;
				
			-- Inserta ahora la Actualizacion a Pago AAP en los recibos menores a cero para dejarlos a cero
			INSERT INTO _TMP_CALCULO_NOMINA_DET
			SELECT _ID_Nomina, ID_Empleado, _M_AAP, 0.00, abs(sum(round(Gravado,1) + round(Exento,1) + round(Deduccion,1))), 0.00 
			FROM _TMP_CALCULO_NOMINA_DET
			WHERE ID_Nomina = _ID_Nomina
			GROUP BY ID_Empleado
			HAVING sum(round(Gravado,1) + round(Exento,1) + round(Deduccion,1)) < 0;
		ELSE -- es de aguinaldos
			INSERT INTO _TMP_CALCULO_NOMINA_DET
			SELECT _ID_Nomina, ID_Empleado, _M_IAE, 0.00, IAE, 0.00
			FROM _TMP_ANALISIS
			WHERE IAE <> 0.00;

			INSERT INTO _TMP_CALCULO_NOMINA_DET
			SELECT _ID_Nomina, ID_Empleado, _M_IAG, IAG, 0.00, 0.00
			FROM _TMP_ANALISIS
			WHERE IAG <> 0.00;
			
			INSERT INTO _TMP_CALCULO_NOMINA_DET -- Ingresa el ISPT solo si el sueldo es mayor al m√≠nimo
			SELECT _ID_Nomina, ID_Empleado, _M_ISPT, 0.00, 0.00, -ISPT
			FROM _TMP_ANALISIS
			WHERE ISPT <> 0.00 AND Salario_Diario > _SalarioMinimo;
			
			INSERT INTO _TMP_CALCULO_NOMINA_DET 
			SELECT _ID_Nomina, ID_Empleado, _M_ISPSB, 0.00, 0.00, ISPSB
			FROM _TMP_ANALISIS
			WHERE ISPSB <> 0.00 AND Salario_Diario > _SalarioMinimo;	

			--Inserta ahora los movimientos dinamicos para los aguinaldos
			INSERT INTO _TMP_CALCULO_NOMINA_DET
			SELECT _ID_Nomina, p.ID_Empleado, p.ID_Movimiento,  
					sum(TOTAL_GRAVADO), sum(TOTAL_EXENTO), -sum(TOTAL_DEDUCCION)
			FROM _TMP_PLANTILLAS_TOTALES p INNER JOIN TBL_NOM_MASEMP me ON
				p.ID_Empleado = me.ID_Empleado
			WHERE p.Tipo = 56
			GROUP BY p.Tipo, p.ID_Empleado, p.ID_Movimiento;
			
		END IF;
		--///////////////////////// FIN DE INGRESO DE RESULTADOS //////////////////////////////////////////////
	
		-- //////////////////////////////////////////////////////////////////////////////////////////
		-- ///////////////////////// COPIA DESDE TABLAS TEMPORALES A FINALES //////////////////////////////////
		--//////////////////////////////////////////////////////////////////////////////////////////////////

		INSERT INTO TBL_NOM_CALCULO_NOMINA_ESP
		SELECT _ID_Nomina, ID_Empleado, Dias, Faltas, Recibo, HE, HD, ID_CFD, TFD, Gravado, Exento, Deduccion, ISR, HT, IXA, IXE, IXM, DiasHorasExtras
		FROM _TMP_CALCULO_NOMINA_ESP
		WHERE ID_Nomina = _ID_Nomina;
	 
		INSERT INTO TBL_NOM_CALCULO_NOMINA_DET
		SELECT _ID_Nomina, ID_Empleado, ID_Movimiento, round(Gravado,1), round(Exento,1), round(Deduccion,1)
		FROM _TMP_CALCULO_NOMINA_DET
		WHERE ID_Nomina = _ID_Nomina;
	 
		-- inserta en tabla de asistencias
		INSERT INTO TBL_NOM_CALCULO_NOMINA_ASIST
		SELECT DISTINCT _ID_Nomina, ID_Empleado, ID_FechaMovimiento, ID_Movimiento, Entrada, Salida  
		FROM _TMP_CALCULO_NOMINA_ASIST;
		
		INSERT INTO TBL_NOM_CALCULO_NOMINA_HIS_DET_IMP
		SELECT *
		FROM _TMP_CALCULO_NOMINA_HIS_DET_IMP;
		
		--Ahora aplica el cabecero de nominas especial y vales
		IF (select count(*) from _TMP_CALCULO_NOMINA_DET where ID_Nomina = -1) > 0
		THEN
			INSERT INTO TBL_NOM_CALCULO_NOMINA(id_compania, id_sucursal, ano, numero_nomina, tipo, fecha_desde, fecha_hasta, dias, cerrado, mes, status, formapago, id_mov, id_pol)
 			VALUES(_ID_Compania, _ID_Sucursal, _Ano, _Numero_Nomina, _TipoF, _Fecha_Desde, _Fecha_Hasta, _DiasNomina, '0', _Mes, 'G', 'N', -1, -1)
			RETURNING currval(pg_get_serial_sequence('TBL_NOM_CALCULO_NOMINA', 'id_nomina')) INTO _ID_NominaF;
		
			INSERT INTO TBL_NOM_CALCULO_NOMINA_ESP
			SELECT _ID_NominaF, ID_Empleado, Dias, Faltas, Recibo, HE, HD, ID_CFD, TFD, Gravado, Exento, Deduccion, ISR, HT, IXA, IXE, IXM, DiasHorasExtras
			FROM _TMP_CALCULO_NOMINA_ESP
			WHERE ID_Nomina = -1 and ID_Empleado in (select Distinct ID_Empleado 
														from _TMP_CALCULO_NOMINA_DET 
														where ID_Nomina = -1);
	 
			INSERT INTO TBL_NOM_CALCULO_NOMINA_DET
			SELECT _ID_NominaF, ID_Empleado, ID_Movimiento, round(Gravado,1), round(Exento,1), round(Deduccion,1)
			FROM _TMP_CALCULO_NOMINA_DET
			WHERE ID_Nomina = -1;
		END IF;

		-- Aqui aplica el cabecero de n?mina de vales
		IF (select VEntero from TBL_VARIABLES where ID_Variable = 'NOMVALS') = 1 and _CalVales = '1'
		THEN
			IF (select count(*) from _TMP_CALCULO_NOMINA_DET where ID_Nomina = -2) > 0
			THEN
				INSERT INTO TBL_NOM_CALCULO_NOMINA(id_compania, id_sucursal, ano, numero_nomina, tipo, fecha_desde, fecha_hasta, dias, cerrado, mes, status, formapago, id_mov, id_pol)
				VALUES(_ID_Compania, _ID_Sucursal, _Ano, _Numero_Nomina, _TipoV, _Fecha_Desde, _Fecha_Hasta, _DiasNomina, '0', date_part('Month',_Fecha_Hasta), 'G', 'N', -1, -1)
				RETURNING currval(pg_get_serial_sequence('TBL_NOM_CALCULO_NOMINA', 'id_nomina')) INTO _ID_NominaV;
			
				INSERT INTO TBL_NOM_CALCULO_NOMINA_ESP
				SELECT _ID_NominaV, ID_Empleado, Dias, Faltas, Recibo, HE, HD, ID_CFD, TFD, Gravado, Exento, Deduccion, ISR, HT, IXA, IXE, IXM, DiasHorasExtras
				FROM _TMP_CALCULO_NOMINA_ESP
				WHERE ID_Nomina = -2 and ID_Empleado in (select Distinct ID_Empleado 
															from _TMP_CALCULO_NOMINA_DET
															where ID_Nomina = -2);
	 
				INSERT INTO TBL_NOM_CALCULO_NOMINA_DET
				SELECT _ID_NominaV, ID_Empleado, ID_Movimiento, round(Gravado,1), round(Exento,1), round(Deduccion,1)
				FROM _TMP_CALCULO_NOMINA_DET
				WHERE ID_Nomina = -2;

			END IF;
		END IF;
		-- //////////////////////////////////// FIN DE COPIA ///////////////////////////////////////////
		
		--////////////////////////// ahora genera los cabeceros de recibos con la suma de gravado exento y deduccio e isr de los detalles////////////////////////////////	
		CREATE LOCAL TEMPORARY TABLE _TMP_ESP AS
		SELECT e.ID_Nomina, e.ID_Empleado, sum(d.Gravado) as Gravado, sum(d.Exento) as Exento, sum(d.Deduccion) as Deduccion
		FROM TBL_NOM_CALCULO_NOMINA_DET d INNER JOIN TBL_NOM_CALCULO_NOMINA_ESP e ON
			d.ID_Nomina = e.ID_Nomina and d.ID_Empleado = e.ID_Empleado 
		WHERE e.ID_Nomina = _ID_Nomina or e.ID_Nomina = _ID_NominaF or e.ID_Nomina = _ID_NominaV
		GROUP BY e.ID_Nomina, e.ID_Empleado;

		UPDATE TBL_NOM_CALCULO_NOMINA_ESP
		SET Gravado = t.Gravado, Exento = t.Exento, Deduccion = t.Deduccion
		FROM _TMP_ESP t, TBL_NOM_CALCULO_NOMINA_ESP e 
		WHERE	t.ID_Nomina = e.ID_Nomina and TBL_NOM_CALCULO_NOMINA_ESP.ID_Nomina = e.ID_Nomina and 
				t.ID_Empleado = e.ID_Empleado and TBL_NOM_CALCULO_NOMINA_ESP.ID_Empleado = e.ID_Empleado;

		DROP TABLE _TMP_ESP;

		CREATE LOCAL TEMPORARY TABLE _TMP_ISR AS
		SELECT e.ID_Nomina, e.ID_Empleado, sum(d.Deduccion) as ISR
		FROM TBL_NOM_CALCULO_NOMINA_DET d INNER JOIN TBL_NOM_CALCULO_NOMINA_ESP e ON
			d.ID_Nomina = e.ID_Nomina and d.ID_Empleado = e.ID_Empleado 
		WHERE (e.ID_Nomina = _ID_Nomina or e.ID_Nomina = _ID_NominaF or e.ID_Nomina = _ID_NominaV) and d.ID_Movimiento = 690 --690 es numero de movimiento del ISPT
		GROUP BY e.ID_Nomina, e.ID_Empleado;
		
		UPDATE TBL_NOM_CALCULO_NOMINA_ESP
		SET ISR = t.ISR
		FROM _TMP_ISR t, TBL_NOM_CALCULO_NOMINA_ESP e 
		WHERE 	t.ID_Nomina = e.ID_Nomina and TBL_NOM_CALCULO_NOMINA_ESP.ID_Nomina = e.ID_Nomina and 
				t.ID_Empleado = e.ID_Empleado and TBL_NOM_CALCULO_NOMINA_ESP.ID_Empleado = e.ID_Empleado;

		DROP TABLE _TMP_ISR;
		--//////////////////////////////// 
		
		--//////////////////////////////////////////////////////////////////////////////
		--/////////////////////  BORRA TABLAS TEMPORALES ///////////////////////////////
		DROP TABLE _TMP_PLANTILLAS_TOTALES;
		DROP TABLE _TMP_PERMISOS;
		DROP TABLE _TMP_ANALISIS;
		DROP TABLE _TMP_CALCULO_NOMINA_HIS_DET_IMP;
		DROP TABLE _TMP_CALCULO_NOMINA_ASIST;
		DROP TABLE _TMP_CALCULO_NOMINA_ESP;
		DROP TABLE _TMP_CALCULO_NOMINA_DET;

	END IF;	
	
	RETURN QUERY SELECT _err, _result, _id_nomina;

END
$BODY$
  LANGUAGE plpgsql;


  
  
INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('COMP_POL');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('COMP_POL_PRODUCTOS');

--@FIN_BLOQUE

CREATE OR REPLACE FUNCTION sp_invserv_cambio_precios_compra(_id_prod character varying, _id_proveedor integer, _precio_compra numeric)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255); _cveres varchar(20);
BEGIN
	_err := 0;
	_result := '';
	
	IF _ID_Proveedor <> 0 -- si se esta actualizando precio especial a un proveedor
	THEN
		DELETE FROM TBL_PROVEE_VS_INVENTARIO -- de lo contrario actualiza
		WHERE ID_Tipo = 'PR' and ID_Proveedor = _ID_Proveedor;	
	
		INSERT INTO TBL_PROVEE_VS_INVENTARIO
		SELECT 'PR', ID_Provee, ID_Prod, Moneda, Now(), Precio, 0.0
		FROM _TMP_PROVEE_VS_INVENTARIO;

		_result := 'Los precios del proveedor se han actualizado satisfactoriamente';
		_cveres := cast(_ID_Proveedor as varchar);
		
	ELSE --IF _ID_Prod = ''
		UPDATE TBL_INVSERV_INVENTARIOS
		SET PrecioComp = p.PComp, ID_Moneda = p.ID_Moneda 
		FROM TBL_INVSERV_INVENTARIOS i, _TMP_INVSERV_PRECIOSCOMP p
		WHERE	i.ID_Prod = p.ID_Prod and TBL_INVSERV_INVENTARIOS.ID_Prod = i.ID_Prod;
		
		_result := 'Los precios de * productos se actualizaron correctamente';
		_cveres := '*';
		
	END IF;
	
	RETURN QUERY SELECT _err, _result, _cveres;

END
$BODY$
  LANGUAGE plpgsql;
  
INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('ADM_VENDEDORES');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('ADM_VENDEDORES_AGREGAR');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('ADM_VENDEDORES_CAMBIAR');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('ADM_VENDEDORES_ELIMINAR');
  
--@FIN_BLOQUE
CREATE TABLE tbl_vendedores_clientes
(
  id_vendedor smallint NOT NULL,
  id_tipo character(2) NOT NULL,
  id_clave integer NOT NULL,
  completo bit(1) NOT NULL,
  CONSTRAINT pk_tbl_vendedores_vs_clientes PRIMARY KEY (id_vendedor, id_tipo, id_clave),
  CONSTRAINT fk_tbl_vendedores_vs_clientes_tbl_client_client FOREIGN KEY (id_tipo, id_clave)
      REFERENCES tbl_client_client (id_tipo, id_clave) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_tbl_vendedores_vs_clientes_tbl_vendedores FOREIGN KEY (id_vendedor)
      REFERENCES tbl_vendedores (id_vendedor) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE
);

--@FIN_BLOQUE
CREATE TABLE tbl_vendedores_clientes_productos_esp
(
  id_vendedor smallint NOT NULL,
  id_tipo character(2) NOT NULL,
  id_clave integer NOT NULL,
  id_prod character varying(20) NOT NULL,
  CONSTRAINT pk_tbl_vendedores_clientes_productos_esp PRIMARY KEY (id_vendedor, id_tipo, id_clave, id_prod),
  CONSTRAINT fk_tbl_vendedores_clientes_productos_esp_tbl_client_client FOREIGN KEY (id_tipo, id_clave)
      REFERENCES tbl_client_client (id_tipo, id_clave) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_tbl_vendedores_clientes_productos_esp_tbl_invserv_inventario FOREIGN KEY (id_prod)
      REFERENCES tbl_invserv_inventarios (id_prod) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_tbl_vendedores_clientes_productos_esp_tbl_vendedores FOREIGN KEY (id_vendedor)
      REFERENCES tbl_vendedores (id_vendedor) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE
);

--@FIN_BLOQUE
CREATE TABLE tbl_vendedores_comisiones
(
  id_vendedor smallint NOT NULL,
  id_linea character varying(8) NOT NULL,
  comision numeric(4,2) NOT NULL,
  CONSTRAINT pk_tbl_vendedores_comisiones PRIMARY KEY (id_vendedor, id_linea),
  CONSTRAINT fk_tbl_vendedores_comisiones_tbl_invserv_lineas FOREIGN KEY (id_linea)
      REFERENCES tbl_invserv_lineas (id_linea) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_tbl_vendedores_comisiones_tbl_vendedores FOREIGN KEY (id_vendedor)
      REFERENCES tbl_vendedores (id_vendedor) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE
);

--@FIN_BLOQUE
CREATE TABLE tbl_vendedores_entidades
(
  id_vendedor smallint NOT NULL,
  id_entidadventa smallint NOT NULL,
  CONSTRAINT pk_tbl_vendedores_entidades PRIMARY KEY (id_vendedor, id_entidadventa),
  CONSTRAINT fk_tbl_vendedores_entidades_tbl_vendedores FOREIGN KEY (id_vendedor)
      REFERENCES tbl_vendedores (id_vendedor) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_tbl_vendedores_entidades_tbl_ventas_entidades FOREIGN KEY (id_entidadventa)
      REFERENCES tbl_ventas_entidades (id_entidadventa) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE
);

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_vendedores_agregar(_id_vendedor smallint, _nombre character varying, _comision numeric, _status character)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255);
BEGIN
	_err := 0;
	_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ADM_VENDEDORES' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCOK');
	
	IF(select count(*) from TBL_VENDEDORES where ID_Vendedor = _ID_Vendedor) > 0
	THEN
		_err := 3;
		_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ADM_VENDEDORES' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR');
	END IF;

	IF _err = 0
	THEN
		INSERT INTO TBL_VENDEDORES
		VALUES(_ID_Vendedor, _Nombre, _Comision, _Status);

		INSERT INTO tbl_crmk_sales_men(gu_sales_man,id_vendedor,gu_geozone,id_country,id_state,id_sales_group,id_bpartner)
		VALUES(replace(uuid_in(md5(now()::text)::cstring)::text, '-', ''),_ID_Vendedor,null,'mx ',null,null,null);
		
	END IF;

	RETURN QUERY SELECT _err, _result, _ID_Vendedor;
END
$BODY$
  LANGUAGE plpgsql;

  
--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_vendedores_cambiar(_id_vendedor smallint, _nombre character varying, _comision numeric, _status character)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255);
BEGIN
	_err := 0;
	_result := (select msj2 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ADM_VENDEDORES' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCOK');
	
	IF(select count(*) from TBL_VENDEDORES where ID_Vendedor = _ID_Vendedor) < 1
	THEN
		_err := 3;
		_result := (select msj2 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ADM_VENDEDORES' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR');
	END IF;

	IF _err = 0
	THEN
		UPDATE TBL_VENDEDORES
		SET Nombre = _Nombre, Comision = _Comision, Status = _Status
		WHERE ID_Vendedor = _ID_Vendedor;

	END IF;

	RETURN QUERY SELECT _err, _result, _ID_Vendedor;
END
$BODY$
  LANGUAGE plpgsql;
  
--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_vendedores_eliminar(_id_vendedor smallint)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255);
BEGIN
	_err := 0;
	_result := (select msj3 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ADM_VENDEDORES' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCOK');
	
	IF(select count(*) from TBL_VENDEDORES where ID_Vendedor = _ID_Vendedor) < 1
	THEN
		_err := 3;
		_result := (select msj2 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ADM_VENDEDORES' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR');
	END IF;

	IF _err = 0
	THEN
		UPDATE TBL_VENTAS_COTIZACIONES_CAB 
		SET ID_Vendedor = 0
		WHERE ID_Vendedor = _ID_Vendedor; 

		UPDATE TBL_VENTAS_PEDIDOS_CAB 
		SET ID_Vendedor = 0
		WHERE ID_Vendedor = _ID_Vendedor;

		UPDATE TBL_VENTAS_REMISIONES_CAB 
		SET ID_Vendedor = 0
		WHERE ID_Vendedor = _ID_Vendedor;

		UPDATE TBL_VENTAS_FACTURAS_CAB 
		SET ID_Vendedor = 0
		WHERE ID_Vendedor = _ID_Vendedor;

		UPDATE TBL_VENTAS_DEVOLUCIONES_CAB 
		SET ID_Vendedor = 0
		WHERE ID_Vendedor = _ID_Vendedor;
		
		UPDATE TBL_CLIENT_CLIENT 
		SET ID_Vendedor = 0
		WHERE ID_Vendedor = _ID_Vendedor;

		UPDATE TBL_VENTAS_ENTIDADES
		SET ID_Vendedor = 0
		WHERE ID_Vendedor = _ID_Vendedor;

		--// ESTABLECE ZONAS DE VENTA A NULAS PARA PODER ELIMINAR
		UPDATE tbl_crmk_sales_men
		SET gu_geozone = null
		WHERE ID_Vendedor = _ID_Vendedor;
		
		DELETE FROM TBL_VENDEDORES
		WHERE ID_Vendedor = _ID_Vendedor;

	END IF;

	RETURN QUERY SELECT _err, _result, _ID_Vendedor;
END
$BODY$
  LANGUAGE plpgsql;
  
--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_cont_polizas_ce_cheque(
    _idce integer,
    _id_pol integer,
    _id_part smallint,
    _num character varying,
    _banco character,
    _ctaori character varying,
    _fecha timestamp without time zone,
    _monto numeric,
    _benef character varying,
    _rfc character varying,
    _banemisext character varying,
    _moneda character,
    _tipcamb numeric)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255); _Fecha timestamp; _mes smallint; _ano smallint; 
BEGIN
	_err := 0;
	_result := (select msj4 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_POLIZAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCOK');
	_Fecha := (select Fecha from  tbl_cont_polizas where id = _id_pol);
	_mes := date_part('month',_Fecha);
	_ano := date_part('year',_Fecha);

	IF( (select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano and Cerrado = '1') > 0
		OR (select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano) < 1 )
	THEN
		_err := 3;
		_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_POLIZAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'ERROR: La fecha de poliza pertenece a un periodo cerrado o inexistente'
	END IF;

	IF _err = 0
	THEN
		IF _IDCE IS NULL
		THEN
			INSERT INTO TBL_CONT_POLIZAS_DETALLE_CE_CHEQUES
			VALUES(default, _id_pol, _id_part, _num, _banco, _ctaori, _fecha, _monto, _benef, _rfc, _banemisext, _moneda, _tipcamb)
			RETURNING currval(pg_get_serial_sequence('TBL_CONT_POLIZAS_DETALLE_CE_CHEQUES', 'id')) INTO _IDCE;
		ELSE
			UPDATE TBL_CONT_POLIZAS_DETALLE_CE_CHEQUES
			SET num = _num, banco = _banco, ctaori = _ctaori, fecha = _fecha, monto = _monto, benef = _benef, rfc = _rfc, banemisext = _banemisext, moneda = _moneda, tipcamb = _tipcamb
			WHERE id = _IDCE;
		END IF;
	END IF;

	RETURN QUERY SELECT _err, _result, _idce;
END
$BODY$
  LANGUAGE plpgsql;

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_cont_polizas_ce_transferencia(
    _idce integer,
    _id_pol integer,
    _id_part smallint,
    _ctaori character varying,
    _bancoori character,
    _monto numeric,
    _ctadest character varying,
    _bancodest character,
    _fecha timestamp without time zone,
    _benef character varying,
    _rfc character varying,
    _bancooriext character varying,
    _bancodestext character varying,
    _moneda character,
    _tipcamb numeric)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255); _Fecha timestamp; _mes smallint; _ano smallint; 
BEGIN
	_err := 0;
	_result := (select msj4 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_POLIZAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCOK');
	_Fecha := (select Fecha from  tbl_cont_polizas where id = _id_pol);
	_mes := date_part('month',_Fecha);
	_ano := date_part('year',_Fecha);

	IF( (select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano and Cerrado = '1') > 0
		OR (select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano) < 1 )
	THEN
		_err := 3;
		_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_POLIZAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'ERROR: La fecha de poliza pertenece a un periodo cerrado o inexistente'
	END IF;

	IF _err = 0
	THEN
		IF _IDCE IS NULL
		THEN
			INSERT INTO TBL_CONT_POLIZAS_DETALLE_CE_TRANSFERENCIAS
			VALUES(default, _id_pol, _id_part, _ctaori, _bancoori, _monto, _ctadest, _bancodest, _fecha, _benef, _rfc, _bancooriext, _bancodestext, _moneda, _tipcamb )
			RETURNING currval(pg_get_serial_sequence('TBL_CONT_POLIZAS_DETALLE_CE_TRANSFERENCIAS', 'id')) INTO _IDCE;
		ELSE
			UPDATE TBL_CONT_POLIZAS_DETALLE_CE_TRANSFERENCIAS
			SET ctaori = _ctaori, bancoori = _bancoori, monto = _monto, ctadest = _ctadest, bancodest = _bancodest, fecha = _fecha,  benef = _benef, rfc = _rfc,
				bancooriext =  _bancooriext, bancodestext = _bancodestext, moneda = _moneda, tipcamb = _tipcamb
			WHERE id = _IDCE;
		END IF;
	END IF;

	RETURN QUERY SELECT _err, _result, _IDCE;
END
$BODY$
  LANGUAGE plpgsql;

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_cont_polizas_ce_comprobante(
    _idce integer,
    _id_pol integer,
    _id_part smallint,
    _uuid_cfdi character,
    _monto numeric,
    _rfc character varying,
    _id_tipo character varying,
    _moneda character,
    _tipcamb numeric,
    _cfd_cbb_serie character varying,
    _cfd_cbb_numfol integer,
    _numfactext character varying,
    _taxid character varying)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255); _Fecha timestamp; _mes smallint; _ano smallint; 
BEGIN
	_err := 0;
	_result := (select msj4 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_POLIZAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCOK');
	_Fecha := (select Fecha from  tbl_cont_polizas where id = _id_pol);
	_mes := date_part('month',_Fecha);
	_ano := date_part('year',_Fecha);

	IF( (select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano and Cerrado = '1') > 0
		OR (select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano) < 1 )
	THEN
		_err := 3;
		_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_POLIZAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'ERROR: La fecha de poliza pertenece a un periodo cerrado o inexistente'
	END IF;

	IF _err = 0
	THEN
		IF _IDCE IS NULL
		THEN
			INSERT INTO TBL_CONT_POLIZAS_DETALLE_CE_COMPROBANTES
			VALUES(default, _id_pol, _id_part, _uuid_cfdi, _monto, _rfc, _id_tipo, _moneda, _tipcamb, _cfd_cbb_serie, _cfd_cbb_numfol, _numfactext, _taxid)
			RETURNING currval(pg_get_serial_sequence('TBL_CONT_POLIZAS_DETALLE_CE_COMPROBANTES', 'id')) INTO _IDCE;
		ELSE
			UPDATE TBL_CONT_POLIZAS_DETALLE_CE_COMPROBANTES
			SET uuid_cfdi = _uuid_cfdi, monto = _monto, rfc = _rfc, id_tipo = _id_tipo, moneda = _moneda, tipcamb = _tipcamb, 
				cfd_cbb_serie = _cfd_cbb_serie, cfd_cbb_numfol = _cfd_cbb_numfol, numfactext = _numfactext, taxid = _taxid
			WHERE id = _IDCE;
		END IF;
	END IF;

	RETURN QUERY SELECT _err, _result, _idce;
END
$BODY$
  LANGUAGE plpgsql;
  
--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_cont_polizas_ce_otrmetodopago(
    _idce integer,
    _id_pol integer,
    _id_part smallint,
    _metpagopol character,
    _fecha timestamp without time zone,
    _benef character varying,
    _rfc character varying,
    _monto numeric,
    _moneda character,
    _tipcamb numeric)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255); _Fecha timestamp; _mes smallint; _ano smallint; 
BEGIN
	_err := 0;
	_result := (select msj4 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_POLIZAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCOK');
	_Fecha := (select Fecha from  tbl_cont_polizas where id = _id_pol);
	_mes := date_part('month',_Fecha);
	_ano := date_part('year',_Fecha);

	IF( (select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano and Cerrado = '1') > 0
		OR (select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano) < 1 )
	THEN
		_err := 3;
		_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_POLIZAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'ERROR: La fecha de poliza pertenece a un periodo cerrado o inexistente'
	END IF;

	IF _err = 0
	THEN
		IF _IDCE IS NULL
		THEN
			INSERT INTO TBL_CONT_POLIZAS_DETALLE_CE_OTRMETODOPAGO
			VALUES(default, _id_pol, _id_part, _metpagopol, _fecha, _benef, _rfc, _monto, _moneda, _tipcamb)
			RETURNING currval(pg_get_serial_sequence('TBL_CONT_POLIZAS_DETALLE_CE_OTRMETODOPAGO', 'id')) INTO _IDCE;
		ELSE
			UPDATE TBL_CONT_POLIZAS_DETALLE_CE_OTRMETODOPAGO
			SET metpagopol = _metpagopol, fecha = _fecha, benef = _benef, rfc = _rfc, monto = _monto, moneda = _moneda, tipcamb = _tipcamb
			WHERE id = _IDCE;
		END IF;
	END IF;

	RETURN QUERY SELECT _err, _result, _IDCE;
END
$BODY$
  LANGUAGE plpgsql;

--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_cont_polizas_detalle_ce AS 
 SELECT p.id, p.part, p.cuenta AS numero, 
        CASE
            WHEN getlevelaccount(c1.cuenta) = 1 THEN c1.nombre
            WHEN getlevelaccount(c1.cuenta) = 2 THEN ((((( SELECT c2.nombre
               FROM tbl_cont_catalogo c2
              WHERE ("substring"(c1.cuenta::text, 1, 4) || '000000000000000'::text) = c2.cuenta::text))::text) || '/'::text) || c1.nombre::text)::character varying
            WHEN getlevelaccount(c1.cuenta) = 3 THEN ((((((( SELECT c2.nombre
               FROM tbl_cont_catalogo c2
              WHERE ("substring"(c1.cuenta::text, 1, 4) || '000000000000000'::text) = c2.cuenta::text))::text) || '/'::text) || ((( SELECT c3.nombre
               FROM tbl_cont_catalogo c3
              WHERE ("substring"(c1.cuenta::text, 1, 7) || '000000000000'::text) = c3.cuenta::text))::text)) || '/'::text) || c1.nombre::text)::character varying
            WHEN getlevelaccount(c1.cuenta) = 4 THEN ((((((((( SELECT c2.nombre
               FROM tbl_cont_catalogo c2
              WHERE ("substring"(c1.cuenta::text, 1, 4) || '000000000000000'::text) = c2.cuenta::text))::text) || '/'::text) || ((( SELECT c3.nombre
               FROM tbl_cont_catalogo c3
              WHERE ("substring"(c1.cuenta::text, 1, 7) || '000000000000'::text) = c3.cuenta::text))::text)) || '/'::text) || ((( SELECT c4.nombre
               FROM tbl_cont_catalogo c4
              WHERE ("substring"(c1.cuenta::text, 1, 10) || '000000000'::text) = c4.cuenta::text))::text)) || '/'::text) || c1.nombre::text)::character varying
            WHEN getlevelaccount(c1.cuenta) = 5 THEN ((((((((((( SELECT c2.nombre
               FROM tbl_cont_catalogo c2
              WHERE ("substring"(c1.cuenta::text, 1, 4) || '000000000000000'::text) = c2.cuenta::text))::text) || '/'::text) || ((( SELECT c3.nombre
               FROM tbl_cont_catalogo c3
              WHERE ("substring"(c1.cuenta::text, 1, 7) || '000000000000'::text) = c3.cuenta::text))::text)) || '/'::text) || ((( SELECT c4.nombre
               FROM tbl_cont_catalogo c4
              WHERE ("substring"(c1.cuenta::text, 1, 10) || '000000000'::text) = c4.cuenta::text))::text)) || '/'::text) || ((( SELECT c5.nombre
               FROM tbl_cont_catalogo c5
              WHERE ("substring"(c1.cuenta::text, 1, 13) || '000000'::text) = c5.cuenta::text))::text)) || '/'::text) || c1.nombre::text)::character varying
            WHEN getlevelaccount(c1.cuenta) = 6 THEN ((((((((((((( SELECT c2.nombre
               FROM tbl_cont_catalogo c2
              WHERE ("substring"(c1.cuenta::text, 1, 4) || '000000000000000'::text) = c2.cuenta::text))::text) || '/'::text) || ((( SELECT c3.nombre
               FROM tbl_cont_catalogo c3
              WHERE ("substring"(c1.cuenta::text, 1, 7) || '000000000000'::text) = c3.cuenta::text))::text)) || '/'::text) || ((( SELECT c4.nombre
               FROM tbl_cont_catalogo c4
              WHERE ("substring"(c1.cuenta::text, 1, 10) || '000000000'::text) = c4.cuenta::text))::text)) || '/'::text) || ((( SELECT c5.nombre
               FROM tbl_cont_catalogo c5
              WHERE ("substring"(c1.cuenta::text, 1, 13) || '000000'::text) = c5.cuenta::text))::text)) || '/'::text) || ((( SELECT c6.nombre
               FROM tbl_cont_catalogo c6
              WHERE ("substring"(c1.cuenta::text, 1, 16) || '000'::text) = c6.cuenta::text))::text)) || '/'::text) || c1.nombre::text)::character varying
            ELSE ''::character varying
        END AS nombre, p.concepto, p.moneda, p.parcial, p.tc, p.debe, p.haber, (((
        CASE
            WHEN (( SELECT count(*) AS count
               FROM tbl_cont_polizas_detalle_ce_cheques
              WHERE tbl_cont_polizas_detalle_ce_cheques.id_pol = p.id AND tbl_cont_polizas_detalle_ce_cheques.id_part = p.part)) > 0 THEN ' chq'::text
            ELSE ''::text
        END || 
        CASE
            WHEN (( SELECT count(*) AS count
               FROM tbl_cont_polizas_detalle_ce_transferencias
              WHERE tbl_cont_polizas_detalle_ce_transferencias.id_pol = p.id AND tbl_cont_polizas_detalle_ce_transferencias.id_part = p.part)) > 0 THEN ' trn'::text
            ELSE ''::text
        END) || 
        CASE
            WHEN (( SELECT count(*) AS count
               FROM tbl_cont_polizas_detalle_ce_comprobantes
              WHERE tbl_cont_polizas_detalle_ce_comprobantes.id_pol = p.id AND tbl_cont_polizas_detalle_ce_comprobantes.id_part = p.part AND tbl_cont_polizas_detalle_ce_comprobantes.id_tipo::text = 'CompNal'::text)) > 0 THEN ' xml'::text
            ELSE ''::text
        END) || 
        CASE
            WHEN (( SELECT count(*) AS count
               FROM tbl_cont_polizas_detalle_ce_comprobantes
              WHERE tbl_cont_polizas_detalle_ce_comprobantes.id_pol = p.id AND tbl_cont_polizas_detalle_ce_comprobantes.id_part = p.part AND tbl_cont_polizas_detalle_ce_comprobantes.id_tipo::text = 'CompNalOtr'::text)) > 0 THEN ' cbb'::text
            ELSE ''::text
        END) || 
        CASE
            WHEN (( SELECT count(*) AS count
               FROM tbl_cont_polizas_detalle_ce_comprobantes
              WHERE tbl_cont_polizas_detalle_ce_comprobantes.id_pol = p.id AND tbl_cont_polizas_detalle_ce_comprobantes.id_part = p.part AND tbl_cont_polizas_detalle_ce_comprobantes.id_tipo::text = 'CompExt'::text)) > 0 THEN ' ext'::text
            ELSE ''::text
        END AS ce
   FROM tbl_cont_polizas_detalle p
   JOIN tbl_cont_catalogo c1 ON p.cuenta = c1.cuenta;

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_cont_polizas_ce_eliminar(_id_pol integer, _ce character, _idce integer)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255); _Fecha timestamp; _mes smallint; _ano smallint; 
BEGIN
	_err := 0;
	_result := (select msj5 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_POLIZAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCOK');
	_Fecha := (select Fecha from  tbl_cont_polizas where id = _id_pol);
	_mes := date_part('month',_Fecha);
	_ano := date_part('year',_Fecha);

	IF( (select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano and Cerrado = '1') > 0
		OR (select count(*) from  TBL_CONT_CATALOGO_PERIODOS where Mes = _mes and Ano = _ano) < 1 )
	THEN
		_err := 3;
		_result := (select msj1 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'CONT_POLIZAS' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCERR'); --'ERROR: La fecha de poliza pertenece a un periodo cerrado o inexistente'
	END IF;

	IF _err = 0
	THEN
		IF _CE = 'CHQ'
		THEN
			DELETE FROM tbl_cont_polizas_detalle_ce_cheques
			WHERE id = _idce;
		ELSIF _CE = 'TRN'
		THEN
			DELETE FROM tbl_cont_polizas_detalle_ce_transferencias
			WHERE id = _idce;
		ELSE -- XML
			DELETE FROM tbl_cont_polizas_detalle_ce_comprobantes 
			WHERE id = _idce;
		END IF;
	END IF;

	RETURN QUERY SELECT _err, _result, (_id_pol::varchar || '/' || _idce::varchar)::varchar;
END
$BODY$
  LANGUAGE plpgsql;
 
--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_cont_polizas_detalle_ce_cheques AS 
 SELECT ce.id, ce.id_pol, ce.id_part, ce.num AS cheque, ce.banco AS id_banco, 
        CASE
            WHEN ce.banco <> '000'::bpchar THEN b.nombre
            ELSE ce.banemisext
        END AS banco, ce.ctaori AS cuenta, ce.fecha, ce.monto, ce.benef AS beneficiario, ce.rfc, ce.moneda, ce.tipcamb AS tc, round(ce.monto * ce.tipcamb, 2) AS total
   FROM tbl_cont_polizas_detalle_ce_cheques ce
   JOIN tbl_sat_bancos b ON ce.banco = b.clave;

--ALTER TABLE view_cont_polizas_detalle_ce_cheques

--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_cont_polizas_detalle_ce_comprobantes AS 
 SELECT ce.id, ce.id_pol, ce.id_part, ce.uuid_cfdi AS uuid, ce.monto, ce.rfc, ce.id_tipo AS tipo, ce.moneda, ce.tipcamb AS tc, ce.cfd_cbb_serie AS serie, ce.cfd_cbb_numfol AS folio, ce.numfactext AS factura, ce.taxid, round(ce.monto * ce.tipcamb, 2) AS total
   FROM tbl_cont_polizas_detalle_ce_comprobantes ce;

--ALTER TABLE view_cont_polizas_detalle_ce_comprobantes

--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_cont_polizas_detalle_ce_otrmetodopago AS 
 SELECT ce.id, ce.id_pol, ce.id_part, ce.metpagopol, mp.nombre AS metodo, ce.fecha, ce.benef AS beneficiario, ce.rfc, ce.monto, ce.moneda, ce.tipcamb AS tc, round(ce.monto * ce.tipcamb, 2) AS total
   FROM tbl_cont_polizas_detalle_ce_otrmetodopago ce
   JOIN tbl_sat_metodospago mp ON ce.metpagopol = mp.clave;

--ALTER TABLE view_cont_polizas_detalle_ce_otrmetodopago

--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_cont_polizas_detalle_ce_transferencias AS 
 SELECT ce.id, ce.id_pol, ce.id_part, ce.ctaori AS cuenta, ce.bancoori AS id_banco, ce.monto, ce.ctadest AS cuentadest, ce.bancodest AS id_bancodest, ce.fecha, ce.benef AS beneficiario, ce.rfc, 
        CASE
            WHEN ce.bancoori <> '000'::bpchar THEN b.nombre
            ELSE ce.bancooriext
        END AS banco, 
        CASE
            WHEN ce.bancodest <> '000'::bpchar THEN ( SELECT tbl_sat_bancos.nombre
               FROM tbl_sat_bancos
              WHERE tbl_sat_bancos.clave = ce.bancodest)
            ELSE ce.bancodestext
        END AS bancodest, ce.moneda, ce.tipcamb AS tc, round(ce.monto * ce.tipcamb, 2) AS total
   FROM tbl_cont_polizas_detalle_ce_transferencias ce
   JOIN tbl_sat_bancos b ON ce.bancoori = b.clave;

--ALTER TABLE view_cont_polizas_detalle_ce_transferencias

--@FIN_BLOQUE
CREATE TABLE tbl_cfdven
(
  id_cfd integer NOT NULL,
  rfc character varying(15) NOT NULL,
  fecha timestamp without time zone NOT NULL,
  total numeric(19,4) NOT NULL,
  impuesto numeric(19,4) NOT NULL,
  efecto character(1) NOT NULL,
  pedimento character varying(300) NOT NULL,
  fechapedimento character varying(350) NOT NULL,
  aduana character varying(600) NOT NULL,
  fsi_tipo character(3) NOT NULL,
  fsi_id integer NOT NULL,
  nocertificado character varying(20) NOT NULL,
  sello character varying(8000) NOT NULL,
  lugarexpedicion character varying(8000) NOT NULL,
  metododepago character varying(254) NOT NULL,
  uuid character(36) NOT NULL,
  fechatimbre timestamp without time zone NOT NULL,
  nocertificadosat character varying(20) NOT NULL,
  sellosat character varying(8000) NOT NULL,
  CONSTRAINT pk_tbl_cfdven PRIMARY KEY (id_cfd)
);

--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_cfdven AS 
 SELECT tbl_cfdven.id_cfd, tbl_cfdven.rfc, tbl_cfdven.fecha, tbl_cfdven.total, tbl_cfdven.efecto, 
        CASE
            WHEN tbl_cfdven.efecto = 'I'::bpchar THEN 'Ingreso'::text
            WHEN tbl_cfdven.efecto = 'E'::bpchar THEN 'Egreso'::text
            WHEN tbl_cfdven.efecto = 'T'::bpchar THEN 'Traslado'::text
            ELSE 'Desconocido'::text
        END AS efectostr, tbl_cfdven.fsi_tipo, tbl_cfdven.fsi_id, 
        CASE
            WHEN tbl_cfdven.fsi_tipo = 'ENT'::bpchar THEN (( SELECT tbl_ventas_entidades.descripcion
               FROM tbl_ventas_entidades
              WHERE tbl_ventas_entidades.id_entidadventa = tbl_cfdven.fsi_id))::text
            ELSE 
            CASE
                WHEN tbl_cfdven.fsi_tipo = 'REM'::bpchar THEN (((((( SELECT tbl_ventas_entidades.descripcion
                   FROM tbl_ventas_entidades
                  WHERE tbl_ventas_entidades.id_entidadventa = (( SELECT tbl_ventas_remisiones_cab.id_entidad
                           FROM tbl_ventas_remisiones_cab
                          WHERE tbl_ventas_remisiones_cab.id_vc = tbl_cfdven.fsi_id))))::text) || '/'::text) || tbl_cfdven.fsi_tipo::text) || ':'::text) || (( SELECT tbl_ventas_remisiones_cab.numero
                   FROM tbl_ventas_remisiones_cab
                  WHERE tbl_ventas_remisiones_cab.id_vc = tbl_cfdven.fsi_id))
                WHEN tbl_cfdven.fsi_tipo = 'FAC'::bpchar THEN (((((( SELECT tbl_ventas_entidades.descripcion
                   FROM tbl_ventas_entidades
                  WHERE tbl_ventas_entidades.id_entidadventa = (( SELECT tbl_ventas_facturas_cab.id_entidad
                           FROM tbl_ventas_facturas_cab
                          WHERE tbl_ventas_facturas_cab.id_vc = tbl_cfdven.fsi_id))))::text) || '/'::text) || tbl_cfdven.fsi_tipo::text) || ':'::text) || (( SELECT tbl_ventas_facturas_cab.numero
                   FROM tbl_ventas_facturas_cab
                  WHERE tbl_ventas_facturas_cab.id_vc = tbl_cfdven.fsi_id))
                WHEN tbl_cfdven.fsi_tipo = 'DSV'::bpchar THEN (((((( SELECT tbl_ventas_entidades.descripcion
                   FROM tbl_ventas_entidades
                  WHERE tbl_ventas_entidades.id_entidadventa = (( SELECT tbl_ventas_devoluciones_cab.id_entidad
                           FROM tbl_ventas_devoluciones_cab
                          WHERE tbl_ventas_devoluciones_cab.id_vc = tbl_cfdven.fsi_id))))::text) || '/'::text) || tbl_cfdven.fsi_tipo::text) || ':'::text) || (( SELECT tbl_ventas_devoluciones_cab.numero
                   FROM tbl_ventas_devoluciones_cab
                  WHERE tbl_ventas_devoluciones_cab.id_vc = tbl_cfdven.fsi_id))
                ELSE '?????'::text
            END
        END AS enlace, tbl_cfdven.uuid, tbl_cfdven.fechatimbre
   FROM tbl_cfdven;

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_cfdven_agregar(_rfc character varying, _fecha timestamp without time zone, _total numeric, _impuesto numeric, _efecto character, _pedimento character varying, _fechapedimento character varying, _aduana character varying, _fsi_tipo character, _fsi_id integer, _nocertificado character varying, _sello character varying, _lugarexpedicion character varying, _metododepago character varying, _uuid character, _fechatimbre timestamp without time zone, _nocertificadosat character varying, _sellosat character varying)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255); _ID_CFD int;
BEGIN	
 	_err := 0;
	_result := 'El comprobante fiscal digital por internet se registr√≥ satisfactoriamente';
	
	IF _err = 0
	THEN
		IF(select count(*) from TBL_CFDVEN where UUID = _UUID) = 0
		THEN 
			-- No se ha cargado ningun CFDI, por lo tanto lo agrega de primera vez 
			INSERT INTO TBL_CFD(rfc, serie, folio, noaprobacion, anoaprobacion, fecha, total, impuesto, estatus, efecto, pedimento, fechapedimento, aduana, 
																				fsi_tipo, fsi_id, nocertificado, cadenaoriginal, sello, lugarexpedicion, metododepago, fsi_esp1)
			VALUES( _RFC, '', 0, 0, 2000, _Fecha, _Total, _Impuesto, '1', _Efecto, _Pedimento, _FechaPedimento, _Aduana, 
																				_FSI_Tipo, _FSI_ID, _NoCertificado, '', _Sello, _Lugarexpedicion, _MetodoDePago, '')
			RETURNING currval(pg_get_serial_sequence('TBL_CFD', 'id_cfd')) INTO _id_cfd;
			--Ahora agrega los datos a la tabla del timbre
			INSERT INTO TBL_TFD(uuid, id_cfd, fechatimbre, nocertificadosat, cadenaoriginal, sellosat)
			VALUES(_UUID, _ID_CFD, _FechaTimbre, _NoCertificadoSat, '', _SelloSat);
			--Ahora agrega a la tabla de descargas
			INSERT INTO TBL_CFDVEN
			VALUES(_ID_CFD,_RFC, _Fecha, _Total, _Impuesto, _Efecto, 
							_Pedimento, _FechaPedimento, _Aduana, _FSI_Tipo, _FSI_ID, _NoCertificado, _Sello, _LugarExpedicion, _MetodoDePago,
							_UUID, _FechaTimbre, _NoCertificadoSat, _SelloSat);
		ELSE -- Ya existe el uuid cargado
			IF (select FSI_Tipo from TBL_CFDVEN where UUID = _UUID) = 'ENT' --si aun no esta enlazado a alguna venta, enlaza..............
			THEN
				_ID_CFD := (select ID_CFD from TBL_CFDVEN where UUID = _UUID);
				--Actualiza 
				UPDATE TBL_CFD
				SET RFC = _RFC, Fecha = _Fecha, Total = _Total, Impuesto = _Impuesto, Efecto = _Efecto, 
							Pedimento = _Pedimento, FechaPedimento = _FechaPedimento, Aduana = _Aduana, FSI_Tipo = _FSI_Tipo, FSI_ID = _FSI_ID, NoCertificado = _NoCertificado, Sello = _Sello, LugarExpedicion = _LugarExpedicion, MetodoDePago = _MetodoDePago
				WHERE ID_CFD = _ID_CFD;
				--Ahora actualiza el timbre
				UPDATE TBL_TFD
				SET FechaTimbre = _FechaTimbre, NoCertificadoSat = _NoCertificadoSat, SelloSat = _SelloSat
				WHERE ID_CFD = _ID_CFD;
				--Ahora actualiza la tabla de descargas
				UPDATE TBL_CFDVEN
				SET RFC = _RFC, Fecha = _Fecha, Total = _Total, Impuesto = _Impuesto, Efecto = _Efecto, 
							Pedimento = _Pedimento, FechaPedimento = _FechaPedimento, Aduana = _Aduana, FSI_Tipo = _FSI_Tipo, FSI_ID = _FSI_ID, NoCertificado = _NoCertificado, Sello = _Sello, LugarExpedicion = _LugarExpedicion, MetodoDePago = _MetodoDePago,
							FechaTimbre = _FechaTimbre, NoCertificadoSat = _NoCertificadoSat, SelloSat = _SelloSat
				WHERE ID_CFD = _ID_CFD;
			ELSE
				_err := 3;
				_result := 'ERROR: El CFDI ya tiene un registro asociado en la base de datos. No se puede agregar';
			END IF;
		END IF;
	END IF;

	RETURN QUERY SELECT _err, _result;

END
$BODY$
  LANGUAGE plpgsql;

--@FIN_BLOQUE
CREATE TABLE tbl_cfdnom
(
  id_cfd integer NOT NULL,
  rfc character varying(15) NOT NULL,
  fecha timestamp without time zone NOT NULL,
  total numeric(19,4) NOT NULL,
  impuesto numeric(19,4) NOT NULL,
  efecto character(1) NOT NULL,
  pedimento character varying(300) NOT NULL,
  fechapedimento character varying(350) NOT NULL,
  aduana character varying(600) NOT NULL,
  fsi_tipo character(3) NOT NULL,
  fsi_id integer NOT NULL,
  nocertificado character varying(20) NOT NULL,
  sello character varying(8000) NOT NULL,
  lugarexpedicion character varying(8000) NOT NULL,
  metododepago character varying(254) NOT NULL,
  uuid character(36) NOT NULL,
  fechatimbre timestamp without time zone NOT NULL,
  nocertificadosat character varying(20) NOT NULL,
  sellosat character varying(8000) NOT NULL,
  fsi_esp1 character varying(20) NOT NULL,
  CONSTRAINT pk_tbl_cfdnom PRIMARY KEY (id_cfd)
);

--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_cfdnom AS 
 SELECT tbl_cfdnom.id_cfd, tbl_cfdnom.rfc, tbl_cfdnom.fecha, tbl_cfdnom.total, tbl_cfdnom.efecto, 
        CASE
            WHEN tbl_cfdnom.efecto = 'I'::bpchar THEN 'Ingreso'::text
            WHEN tbl_cfdnom.efecto = 'E'::bpchar THEN 'Egreso'::text
            WHEN tbl_cfdnom.efecto = 'T'::bpchar THEN 'Traslado'::text
            ELSE 'Desconocido'::text
        END AS efectostr, tbl_cfdnom.fsi_tipo, tbl_cfdnom.fsi_id, 
        CASE
            WHEN tbl_cfdnom.fsi_tipo = 'ENT'::bpchar THEN (( SELECT tbl_companias.descripcion
               FROM tbl_companias
              WHERE tbl_companias.id_compania = 0 AND tbl_companias.id_sucursal = tbl_cfdnom.fsi_id))::text
            ELSE 
            CASE
                WHEN tbl_cfdnom.fsi_tipo = 'NOM'::bpchar THEN (((((( SELECT tbl_companias.descripcion
                   FROM tbl_companias
                  WHERE tbl_companias.id_compania = 0 AND tbl_companias.id_sucursal = (( SELECT tbl_nom_calculo_nomina.id_sucursal
                           FROM tbl_nom_calculo_nomina
                          WHERE tbl_nom_calculo_nomina.id_nomina = tbl_cfdnom.fsi_id))))::text) || '/'::text) || (( SELECT (tbl_nom_calculo_nomina.numero_nomina || ':'::text) || tbl_nom_calculo_nomina.ano
                   FROM tbl_nom_calculo_nomina
                  WHERE tbl_nom_calculo_nomina.id_nomina = tbl_cfdnom.fsi_id))) || ':'::text) || tbl_cfdnom.fsi_esp1::text
                ELSE '?????'::text
            END
        END AS enlace, tbl_cfdnom.uuid, tbl_cfdnom.fechatimbre
   FROM tbl_cfdnom;

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_cfdnom_agregar(_rfc character varying, _fecha timestamp without time zone, _total numeric, _impuesto numeric, _efecto character, _pedimento character varying, _fechapedimento character varying, _aduana character varying, _fsi_tipo character, _fsi_id integer, _nocertificado character varying, _sello character varying, _lugarexpedicion character varying, _metododepago character varying, _uuid character, _fechatimbre timestamp without time zone, _nocertificadosat character varying, _sellosat character varying)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255); _ID_CFD int;
BEGIN	
 	_err := 0;
	_result := 'El comprobante fiscal digital por internet se registr√≥ satisfactoriamente';
	
	IF _err = 0
	THEN
		IF(select count(*) from TBL_CFDNOM where UUID = _UUID) = 0
		THEN 
			-- No se ha cargado ningun CFDI, por lo tanto lo agrega de primera vez 
			INSERT INTO TBL_CFD(rfc, serie, folio, noaprobacion, anoaprobacion, fecha, total, impuesto, estatus, efecto, pedimento, fechapedimento, aduana, 
																				fsi_tipo, fsi_id, nocertificado, cadenaoriginal, sello, lugarexpedicion, metododepago, fsi_esp1)
			VALUES( _RFC, '', 0, 0, 2000, _Fecha, _Total, _Impuesto, '1', _Efecto, _Pedimento, _FechaPedimento, _Aduana, 
																				_FSI_Tipo, _FSI_ID, _NoCertificado, '', _Sello, _Lugarexpedicion, _MetodoDePago, '')
			RETURNING currval(pg_get_serial_sequence('TBL_CFD', 'id_cfd')) INTO _id_cfd;
			--Ahora agrega los datos a la tabla del timbre
			INSERT INTO TBL_TFD(uuid, id_cfd, fechatimbre, nocertificadosat, cadenaoriginal, sellosat)
			VALUES(_UUID, _ID_CFD, _FechaTimbre, _NoCertificadoSat, '', _SelloSat);
			--Ahora agrega a la tabla de descargas
			INSERT INTO TBL_CFDNOM
			VALUES(_ID_CFD,_RFC, _Fecha, _Total, _Impuesto, _Efecto, 
							_Pedimento, _FechaPedimento, _Aduana, _FSI_Tipo, _FSI_ID, _NoCertificado, _Sello, _LugarExpedicion, _MetodoDePago,
							_UUID, _FechaTimbre, _NoCertificadoSat, _SelloSat, '');
		ELSE 
			IF (select FSI_Tipo from TBL_CFDNOM where UUID = _UUID) = 'ENT'
			THEN
				_ID_CFD := (select ID_CFD from TBL_CFDNOM where UUID = _UUID);
				--Actualiza 
				UPDATE TBL_CFD
				SET RFC = _RFC, Fecha = _Fecha, Total = _Total, Impuesto = _Impuesto, Efecto = _Efecto, 
							Pedimento = _Pedimento, FechaPedimento = _FechaPedimento, Aduana = _Aduana, FSI_Tipo = _FSI_Tipo, FSI_ID = _FSI_ID, NoCertificado = _NoCertificado, Sello = _Sello, LugarExpedicion = _LugarExpedicion, MetodoDePago = _MetodoDePago
				WHERE ID_CFD = _ID_CFD;
				--Ahora actualiza el timbre
				UPDATE TBL_TFD
				SET FechaTimbre = _FechaTimbre, NoCertificadoSat = _NoCertificadoSat, SelloSat = _SelloSat
				WHERE ID_CFD = _ID_CFD;
				--Ahora actualiza la tabla de descargas
				UPDATE TBL_CFDNOM
				SET RFC = _RFC, Fecha = _Fecha, Total = _Total, Impuesto = _Impuesto, Efecto = _Efecto, 
							Pedimento = _Pedimento, FechaPedimento = _FechaPedimento, Aduana = _Aduana, FSI_Tipo = _FSI_Tipo, FSI_ID = _FSI_ID, NoCertificado = _NoCertificado, Sello = _Sello, LugarExpedicion = _LugarExpedicion, MetodoDePago = _MetodoDePago,
							FechaTimbre = _FechaTimbre, NoCertificadoSat = _NoCertificadoSat, SelloSat = _SelloSat
				WHERE ID_CFD = _ID_CFD;
			ELSE
				_err := 3;
				_result := 'ERROR: El CFDI ya tiene un registro asociado en la base de datos. No se puede agregar';
			END IF;
		END IF;
	END IF;

	RETURN QUERY SELECT _err, _result;

END
$BODY$
  LANGUAGE plpgsql;
  
--@FIN_BLOQUE
CREATE TABLE tbl_compras_gastos_cfd
(
  id_gasto integer NOT NULL,
  id_cfd integer NOT NULL,
  CONSTRAINT pk_tbl_compras_gastos_cfd PRIMARY KEY (id_gasto, id_cfd),
  CONSTRAINT fk_tbl_compras_gastos_cfd_tbl_compras_gastos_cab FOREIGN KEY (id_gasto)
      REFERENCES tbl_compras_gastos_cab (id_vc) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE
);

--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_invserv_gastos_existencias AS 
 SELECT c.id_prod AS clave, e.id_bodega, b.nombre AS bodega, e.existencia, e.stockmin, e.stockmax, b.id_invserv as tipo
   FROM tbl_invserv_inventarios c
   JOIN tbl_invserv_existencias e ON c.id_prod::text = e.id_prod::text AND c.id_tipo = 'G'::bpchar
   JOIN tbl_invserv_bodegas b ON e.id_bodega = b.id_bodega;

--@FIN_BLOQUE
CREATE TABLE tbl_sat_monedas
(
  clave character(3) NOT NULL,
  nombre character varying(254) NOT NULL,
  CONSTRAINT pk_tbl_sat_monedas PRIMARY KEY (clave)
);

--@FIN_BLOQUE
insert into tbl_sat_monedas
values('AED','Dirham de los Emiratos √Årabes Unidos');
insert into tbl_sat_monedas
values('AFN','Afgani afgano');
insert into tbl_sat_monedas
values('ALL','Lek alban√©s');
insert into tbl_sat_monedas
values('AMD','Dram armenio');
insert into tbl_sat_monedas
values('ANG','Flor√≠n antillano neerland√©s');
insert into tbl_sat_monedas
values('AOA','Kwanza angole√±o');
insert into tbl_sat_monedas
values('ARS','Peso argentino');
insert into tbl_sat_monedas
values('AUD','D√≥lar australiano');
insert into tbl_sat_monedas
values('AWG','Flor√≠n arube√±o');
insert into tbl_sat_monedas
values('AZN','Manat azerbaiyano');
insert into tbl_sat_monedas
values('BAM','Marco convertible de Bosnia-Herzegovina');
insert into tbl_sat_monedas
values('BBD','D√≥lar de Barbados');
insert into tbl_sat_monedas
values('BDT','Taka de Banglad√©s');
insert into tbl_sat_monedas
values('BGN','Lev b√∫lgaro');
insert into tbl_sat_monedas
values('BHD','Dinar bahrein√≠');
insert into tbl_sat_monedas
values('BIF','Franco burund√©s');
insert into tbl_sat_monedas
values('BMD','D√≥lar de Bermuda');
insert into tbl_sat_monedas
values('BND','D√≥lar de Brun√©i');
insert into tbl_sat_monedas
values('BOB','Boliviano');
insert into tbl_sat_monedas
values('BOV','Mvdol boliviano (c√≥digo de fondos)');
insert into tbl_sat_monedas
values('BRL','Real brasile√±o');
insert into tbl_sat_monedas
values('BSD','D√≥lar bahame√±o');
insert into tbl_sat_monedas
values('BTN','Ngultrum de But√°n');
insert into tbl_sat_monedas
values('BWP','Pula de Botsuana');
insert into tbl_sat_monedas
values('BYR','Rublo bielorruso');
insert into tbl_sat_monedas
values('BZD','D√≥lar de Belice');
insert into tbl_sat_monedas
values('CAD','D√≥lar canadiense');
insert into tbl_sat_monedas
values('CDF','Franco congole√±o, o congol√©s');
insert into tbl_sat_monedas
values('CHF','Franco suizo');
insert into tbl_sat_monedas
values('CLF','Unidades de fomento chilenas (c√≥digo de fondos)');
insert into tbl_sat_monedas
values('CLP','Peso chileno');
insert into tbl_sat_monedas
values('CNY','Yuan chino');
insert into tbl_sat_monedas
values('COP','Peso colombiano');
insert into tbl_sat_monedas
values('COU','Unidad de valor real colombiana (a√±adida al COP)');
insert into tbl_sat_monedas
values('CRC','Col√≥n costarricense');
insert into tbl_sat_monedas
values('CSD','Dinar serbio (Reemplazado por RSD el 25 de octubre de 2006)');
insert into tbl_sat_monedas
values('CUP','Peso cubano');
insert into tbl_sat_monedas
values('CUC','Peso cubano convertible');
insert into tbl_sat_monedas
values('CVE','Escudo caboverdiano');
insert into tbl_sat_monedas
values('CZK','Koruna checa');
insert into tbl_sat_monedas
values('DJF','Franco yibutiano');
insert into tbl_sat_monedas
values('DKK','Corona danesa');
insert into tbl_sat_monedas
values('DOP','Peso dominicano');

insert into tbl_sat_monedas
values('DZD','Dinar argelino');
insert into tbl_sat_monedas
values('EGP','Libra egipcia');
insert into tbl_sat_monedas
values('ERN','Nakfa eritreo');
insert into tbl_sat_monedas
values('ETB','Birr et√≠ope');
insert into tbl_sat_monedas
values('EUR','Euro');
insert into tbl_sat_monedas
values('FJD','D√≥lar fiyiano');
insert into tbl_sat_monedas
values('FKP','Libra malvinense');
insert into tbl_sat_monedas
values('GBP','Libra esterlina (libra de Gran Breta√±a)');
insert into tbl_sat_monedas
values('GEL','Lari georgiano');
insert into tbl_sat_monedas
values('GHS','Cedi ghan√©s');
insert into tbl_sat_monedas
values('GIP','Libra de Gibraltar');
insert into tbl_sat_monedas
values('GMD','Dalasi gambiano');
insert into tbl_sat_monedas
values('GNF','Franco guineano');
insert into tbl_sat_monedas
values('GTQ','Quetzal guatemalteco');
insert into tbl_sat_monedas
values('GYD','D√≥lar guyan√©s');
insert into tbl_sat_monedas
values('HKD','D√≥lar de Hong Kong');
insert into tbl_sat_monedas
values('HNL','Lempira hondure√±o');
insert into tbl_sat_monedas
values('HRK','Kuna croata');
insert into tbl_sat_monedas
values('HTG','Gourde haitiano');
insert into tbl_sat_monedas
values('HUF','Forint h√∫ngaro');
insert into tbl_sat_monedas
values('IDR','Rupiah indonesia');
insert into tbl_sat_monedas
values('ILS','Nuevo sh√©quel israel√≠');
insert into tbl_sat_monedas
values('INR','Rupia india');
insert into tbl_sat_monedas
values('IQD','Dinar iraqu√≠');
insert into tbl_sat_monedas
values('IRR','Rial iran√≠');
insert into tbl_sat_monedas
values('ISK','Kr√≥na islandesa');
insert into tbl_sat_monedas
values('JMD','D√≥lar jamaicano');
insert into tbl_sat_monedas
values('JOD','Dinar jordano');
insert into tbl_sat_monedas
values('JPY','Yen japon√©s');
insert into tbl_sat_monedas
values('KES','Chel√≠n keniata');
insert into tbl_sat_monedas
values('KGS','Som kirgu√≠s (de Kirguist√°n)');
insert into tbl_sat_monedas
values('KHR','Riel camboyano');
insert into tbl_sat_monedas
values('KMF','Franco comoriano (de Comoras)');
insert into tbl_sat_monedas
values('KPW','Won norcoreano');
insert into tbl_sat_monedas
values('KRW','Won surcoreano');
insert into tbl_sat_monedas
values('KWD','Dinar kuwait√≠');
insert into tbl_sat_monedas
values('KYD','D√≥lar caimano (de Islas Caim√°n)');
insert into tbl_sat_monedas
values('KZT','Tenge kazajo');
insert into tbl_sat_monedas
values('LAK','Kip lao');
insert into tbl_sat_monedas
values('LBP','Libra libanesa');
insert into tbl_sat_monedas
values('LKR','Rupia de Sri Lanka');
insert into tbl_sat_monedas
values('LRD','D√≥lar liberiano');
insert into tbl_sat_monedas
values('LSL','Loti lesotense');
insert into tbl_sat_monedas
values('LTL','Litas lituano');
insert into tbl_sat_monedas
values('LVL','Lat let√≥n');
insert into tbl_sat_monedas
values('LYD','Dinar libio');
insert into tbl_sat_monedas
values('MAD','Dirham marroqu√≠');
insert into tbl_sat_monedas
values('MDL','Leu moldavo');
insert into tbl_sat_monedas
values('MGA','Ariary malgache');
insert into tbl_sat_monedas
values('MKD','Denar macedonio');
insert into tbl_sat_monedas
values('MMK','Kyat birmano');
insert into tbl_sat_monedas
values('MNT','Tughrik mongol');
insert into tbl_sat_monedas
values('MOP','Pataca de Macao');
insert into tbl_sat_monedas
values('MRO','Ouguiya mauritana');
insert into tbl_sat_monedas
values('MUR','Rupia mauricia');
insert into tbl_sat_monedas
values('MVR','Rufiyaa maldiva');
insert into tbl_sat_monedas
values('MWK','Kwacha malau√≠');
insert into tbl_sat_monedas
values('MXN','Peso mexicano');
insert into tbl_sat_monedas
values('MXV','Unidad de Inversi√≥n (UDI) mexicana (c√≥digo de fondos)');
insert into tbl_sat_monedas
values('MYR','Ringgit malayo');
insert into tbl_sat_monedas
values('MZN','Metical mozambique√±o');
insert into tbl_sat_monedas
values('NAD','D√≥lar namibio');
insert into tbl_sat_monedas
values('NGN','Naira nigeriana');
insert into tbl_sat_monedas
values('NIO','C√≥rdoba nicarag√ºense');
insert into tbl_sat_monedas
values('NOK','Corona noruega');
insert into tbl_sat_monedas
values('NPR','Rupia nepalesa');
insert into tbl_sat_monedas
values('NZD','D√≥lar neozeland√©s');

insert into tbl_sat_monedas
values('OMR','Rial oman√≠');
insert into tbl_sat_monedas
values('PAB','Balboa paname√±a');
insert into tbl_sat_monedas
values('PEN','Nuevo sol peruano');
insert into tbl_sat_monedas
values('PGK','Kina de Pap√∫a Nueva Guinea');
insert into tbl_sat_monedas
values('PHP','Peso filipino');
insert into tbl_sat_monedas
values('PKR','Rupia pakistan√≠');
insert into tbl_sat_monedas
values('PLN','zloty polaco');
insert into tbl_sat_monedas
values('PYG','Guaran√≠ paraguayo');
insert into tbl_sat_monedas
values('QAR','Rial qatar√≠');
insert into tbl_sat_monedas
values('RON','Leu rumano');
insert into tbl_sat_monedas
values('RUB','Rublo ruso');
insert into tbl_sat_monedas
values('RWF','Franco ruand√©s');
insert into tbl_sat_monedas
values('SAR','Riyal saud√≠');
insert into tbl_sat_monedas
values('SBD','D√≥lar de las Islas Salom√≥n');
insert into tbl_sat_monedas
values('SCR','Rupia de Seychelles');
insert into tbl_sat_monedas
values('SDG','Dinar sudan√©s');
insert into tbl_sat_monedas
values('SEK','Corona sueca');
insert into tbl_sat_monedas
values('SGD','D√≥lar de Singapur');
insert into tbl_sat_monedas
values('SHP','Libra de Santa Helena');
insert into tbl_sat_monedas
values('SLL','Leone de Sierra Leona');
insert into tbl_sat_monedas
values('SOS','Chel√≠n somal√≠');
insert into tbl_sat_monedas
values('SRD','D√≥lar surinam√©s');
insert into tbl_sat_monedas
values('STD','Dobra de Santo Tom√© y Pr√≠ncipe');
insert into tbl_sat_monedas
values('SYP','Libra siria');
insert into tbl_sat_monedas
values('SZL','Lilangeni suazi');
insert into tbl_sat_monedas
values('THB','Baht tailand√©s');
insert into tbl_sat_monedas
values('TJS','Somoni tayik (de Tayikist√°n)');
insert into tbl_sat_monedas
values('TMT','Manat turcomano');
insert into tbl_sat_monedas
values('TND','Dinar tunecino');
insert into tbl_sat_monedas
values('TOP','Pa''anga tongano');
insert into tbl_sat_monedas
values('TRY','Lira turca');
insert into tbl_sat_monedas
values('TTD','D√≥lar de Trinidad y Tobago');
insert into tbl_sat_monedas
values('TWD','D√≥lar taiwan√©s');
insert into tbl_sat_monedas
values('TZS','Chel√≠n tanzano');
insert into tbl_sat_monedas
values('UAH','Grivna ucraniana');
insert into tbl_sat_monedas
values('UGX','Chel√≠n ugand√©s');
insert into tbl_sat_monedas
values('USD','D√≥lar estadounidense');
insert into tbl_sat_monedas
values('USN','D√≥lar estadounidense (Siguiente d√≠a) (c√≥digo de fondos)');
insert into tbl_sat_monedas
values('USS','D√≥lar estadounidense (Mismo d√≠a) (c√≥digo de fondos)');
insert into tbl_sat_monedas
values('UYU','Peso uruguayo');
insert into tbl_sat_monedas
values('UZS','Som uzbeko');
insert into tbl_sat_monedas
values('VEF','Bol√≠var fuerte venezolano');
insert into tbl_sat_monedas
values('VND','Dong vietnamita');
insert into tbl_sat_monedas
values('VUV','Vatu vanuatense');
insert into tbl_sat_monedas
values('WST','Tala samoana');
insert into tbl_sat_monedas
values('XAF','Franco CFA de √Åfrica Central');
insert into tbl_sat_monedas
values('XAG','Onza de plata');
insert into tbl_sat_monedas
values('XAU','Onza de oro');
insert into tbl_sat_monedas
values('XBA','European Composite Unit (EURCO) (unidad del mercado de bonos)');
insert into tbl_sat_monedas
values('XBB','European Monetary Unit (E.M.U.-6) (unidad del mercado de bonos)');
insert into tbl_sat_monedas
values('XBC','European Unit of Account 9 (E.U.A.-9) (unidad del mercado de bonos)');
insert into tbl_sat_monedas
values('XBD','European Unit of Account 17 (E.U.A.-17) (unidad del mercado de bonos)');
insert into tbl_sat_monedas
values('XCD','D√≥lar del Caribe Oriental');
insert into tbl_sat_monedas
values('XDR','Derechos Especiales de Giro (FMI)');
insert into tbl_sat_monedas
values('XFO','Franco de oro (Special settlement currency)');
insert into tbl_sat_monedas
values('XFU','Franco UIC (Special settlement currency)');
insert into tbl_sat_monedas
values('XOF','Franco CFA de √Åfrica Occidental');
insert into tbl_sat_monedas
values('XPD','Onza de paladio');
insert into tbl_sat_monedas
values('XPF','Franco CFP');
insert into tbl_sat_monedas
values('XPT','Onza de platino');
insert into tbl_sat_monedas
values('XTS','Reservado para pruebas');
insert into tbl_sat_monedas
values('XXX','Sin divisa');
insert into tbl_sat_monedas
values('YER','Rial yemen√≠ (de Yemen)');
insert into tbl_sat_monedas
values('ZAR','Rand sudafricano');
insert into tbl_sat_monedas
values('ZMW','Kwacha zambiano');
insert into tbl_sat_monedas
values('ZWL','D√≥lar zimbabuense');

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION getnaturaccount(_account character)
  RETURNS character AS
$BODY$  
DECLARE _tipo character(2); _cuenta character(4); _res character(1);
BEGIN
	_cuenta := substring(_Account, 1, 4);
	_tipo := (select tipo from tbl_cont_rubros where _cuenta >= cuentainicial and _cuenta <= cuentafinal);

	if _tipo = 'AC'
	then
		_res := 'D';
	elsif _tipo = 'AF'
	then
		_res := 'D';
	elsif _tipo = 'AD'
	then
		_res := 'D';
	elsif _tipo = 'PC'
	then
		_res := 'A';
	elsif _tipo = 'PL'
	then
		_res := 'A';
	elsif _tipo = 'PD'
	then
		_res := 'A';
	elsif _tipo = 'CC'
	then
		_res := 'A';
	elsif _tipo = 'RI'
	then
		_res := 'A';
	elsif _tipo = 'RC'
	then
		_res := 'D';
	elsif _tipo = 'RG'
	then
		_res := 'D';
	elsif _tipo = 'RO'
	then
		_res := 'D';
	elsif _tipo = 'IP'
	then
		_res := 'D';
	else
		_res := 'A';
	end if;
	
	return _res;
END
$BODY$
  LANGUAGE plpgsql;
  
--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_cont_catalogo_ce AS 
 SELECT 
        CASE
            WHEN getlevelaccount(c.cuenta) = 1 THEN "substring"(c.cuenta::text, 1, 4)::bpchar
            WHEN getlevelaccount(c.cuenta) = 2 THEN "substring"(c.cuenta::text, 1, 7)::bpchar
            WHEN getlevelaccount(c.cuenta) = 3 THEN "substring"(c.cuenta::text, 1, 10)::bpchar
            WHEN getlevelaccount(c.cuenta) = 4 THEN "substring"(c.cuenta::text, 1, 13)::bpchar
            WHEN getlevelaccount(c.cuenta) = 5 THEN "substring"(c.cuenta::text, 1, 16)::bpchar
            ELSE c.cuenta
        END AS cuenta, 
        CASE
            WHEN getlevelaccount(c.cuenta) = 1 THEN ''::bpchar
            WHEN getlevelaccount(c.cuenta) = 2 THEN "substring"(c.cuenta::text, 1, 4)::bpchar
            WHEN getlevelaccount(c.cuenta) = 3 THEN "substring"(c.cuenta::text, 1, 7)::bpchar
            WHEN getlevelaccount(c.cuenta) = 4 THEN "substring"(c.cuenta::text, 1, 10)::bpchar
            WHEN getlevelaccount(c.cuenta) = 5 THEN "substring"(c.cuenta::text, 1, 13)::bpchar
            ELSE "substring"(c.cuenta::text, 1, 16)::bpchar
        END AS subcuentade, c.acum AS ac, getlevelaccount(c.cuenta) AS nivel, c.nombre, c.estatus, c.ce_codagrup, 
        CASE
            WHEN c.ce_natur = 'R'::bpchar THEN getnaturaccount(c.cuenta)
            ELSE c.ce_natur
        END AS ce_natur
   FROM tbl_cont_catalogo c;
   
--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_cont_balanza_ce AS 
 SELECT cd.mes, cd.ano, 
        CASE
            WHEN getlevelaccount(c.cuenta) = 1 THEN "substring"(c.cuenta::text, 1, 4)::bpchar
            WHEN getlevelaccount(c.cuenta) = 2 THEN "substring"(c.cuenta::text, 1, 7)::bpchar
            WHEN getlevelaccount(c.cuenta) = 3 THEN "substring"(c.cuenta::text, 1, 10)::bpchar
            WHEN getlevelaccount(c.cuenta) = 4 THEN "substring"(c.cuenta::text, 1, 13)::bpchar
            WHEN getlevelaccount(c.cuenta) = 5 THEN "substring"(c.cuenta::text, 1, 16)::bpchar
            ELSE c.cuenta
        END AS cuenta, c.acum AS ac, c.nombre, cd.saldoinicial AS inicial, cd.retiros AS cargos, cd.abonos, cd.saldofinal AS final
   FROM tbl_cont_catalogo c
   JOIN tbl_cont_catalogo_detalle cd ON c.cuenta = cd.cuenta;
   
--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_cont_polizas_ce_cab AS 
 SELECT p.id, 
        CASE
            WHEN p.tipo = 'IG'::bpchar THEN 1
            WHEN p.tipo = 'EG'::bpchar THEN 2
            ELSE 3
        END AS tipo, (p.tipo::text || '-'::text) || p.numero::text AS num, p.fecha, p.concepto, p.status
   FROM tbl_cont_polizas p;

--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_cont_polizas_ce_det AS 
 SELECT c.id, c.part, 
        CASE
            WHEN getlevelaccount(c.cuenta) = 1 THEN "substring"(c.cuenta::text, 1, 4)::bpchar
            WHEN getlevelaccount(c.cuenta) = 2 THEN "substring"(c.cuenta::text, 1, 7)::bpchar
            WHEN getlevelaccount(c.cuenta) = 3 THEN "substring"(c.cuenta::text, 1, 10)::bpchar
            WHEN getlevelaccount(c.cuenta) = 4 THEN "substring"(c.cuenta::text, 1, 13)::bpchar
            WHEN getlevelaccount(c.cuenta) = 5 THEN "substring"(c.cuenta::text, 1, 16)::bpchar
            ELSE c.cuenta
        END AS cuenta, 
        CASE
            WHEN c.concepto::text = ''::text THEN ( SELECT tbl_cont_polizas.concepto
               FROM tbl_cont_polizas
              WHERE tbl_cont_polizas.id = c.id)
            ELSE c.concepto
        END AS concepto, m.id_satmoneda AS moneda, c.parcial, c.tc, c.debe, c.haber
   FROM tbl_cont_polizas_detalle c
   JOIN tbl_cont_monedas m ON c.moneda = m.clave;
   
--@FIN_BLOQUE
CREATE TABLE tbl_cont_ce_resumen
(
  mes smallint NOT NULL,
  ano integer NOT NULL,
  alertas smallint NOT NULL,
  errores smallint NOT NULL,
  tipo character varying(3) NOT NULL,
  CONSTRAINT pk_tbl_cont_ce_resumen PRIMARY KEY (mes, ano, tipo),
  CONSTRAINT fk_tbl_cont_ce_resumen_tbl_cont_catalogo_periodos FOREIGN KEY (mes, ano)
      REFERENCES tbl_cont_catalogo_periodos (mes, ano) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE
);

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_cont_ce_generar(
    _ano integer,
    _mes smallint,
    _errores smallint,
    _alertas smallint,
    _tipo character varying)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255);
BEGIN
	_err := 0;
	_result := (select msj3 from tbl_msj m where m.alc::text = 'CEF' and m.mod::text = 'ADM_CFDI' and m.sub::text = 'BD' and m.elm::text = 'MSJ-PROCOK2');
	
	IF (select count(*) from tbl_cont_ce_resumen where mes = _mes and ano = _ano and tipo = _tipo ) < 1 --No existe
	THEN
		insert into tbl_cont_ce_resumen
		values(_mes, _ano, _alertas, _errores, _tipo);
	ELSE
		update tbl_cont_ce_resumen
		set errores = _errores, alertas = _alertas
		where mes = _mes and ano = _ano and tipo = _tipo;
	END IF;
		
	RETURN QUERY SELECT _err, _result, (_mes::varchar || '/' || _ano::varchar || ':' || _tipo)::varchar;
END
$BODY$
  LANGUAGE plpgsql;
  
--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_cont_ce_modulo_cecat AS 
 SELECT p.mes, p.ano, p.cerrado, 
        CASE
            WHEN r.alertas IS NULL THEN 'N'::text
            ELSE 'G'::text
        END AS generado, COALESCE(r.errores::integer, 0) AS errores, COALESCE(r.alertas::integer, 0) AS alertas
   FROM tbl_cont_catalogo_periodos p
   LEFT JOIN tbl_cont_ce_resumen r ON p.mes = r.mes AND p.ano = r.ano AND r.tipo::text = 'CAT'::text;
   
--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_cont_ce_modulo_cebal AS 
 SELECT p.mes, p.ano, p.cerrado, 
        CASE
            WHEN r.alertas IS NULL THEN 'N'::text
            ELSE 'G'::text
        END AS generado, COALESCE(r.errores::integer, 0) AS errores, COALESCE(r.alertas::integer, 0) AS alertas
   FROM tbl_cont_catalogo_periodos p
   LEFT JOIN tbl_cont_ce_resumen r ON p.mes = r.mes AND p.ano = r.ano AND r.tipo::text = 'BAL'::text;
   
--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_cont_ce_modulo_cepol AS 
 SELECT p.mes, p.ano, p.cerrado, 
        CASE
            WHEN r.alertas IS NULL THEN 'N'::text
            ELSE 'G'::text
        END AS generado, COALESCE(r.errores::integer, 0) AS errores, COALESCE(r.alertas::integer, 0) AS alertas
   FROM tbl_cont_catalogo_periodos p
   LEFT JOIN tbl_cont_ce_resumen r ON p.mes = r.mes AND p.ano = r.ano AND r.tipo::text = 'POL'::text;

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_cfd_enlazarventa(
    _fsi_tipo character,
    _fsi_id integer,
    _uuid character)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255); _ID_CFD int; _id_pol integer; _id_poliza integer; _id_part smallint; _total numeric(19,4); _id_client integer; _condicion smallint; _cc character(19); _rfc varchar(15);
	_id_moneda smallint; _tc numeric(19,4); _moneda_sat character(3);
BEGIN	
 	_err := 0;
	_result := 'El comprobante fiscal digital se enlaz√≥ correctamente';
	
	IF _uuid <> ''
	THEN
		IF (select count(*) from TBL_CFDVEN where UUID = _uuid) > 0
		THEN
			_ID_CFD := (select ID_CFD from TBL_CFDVEN where UUID = _uuid) ;
		ELSE
			_err := 3;
			_result := 'ERROR: No se puede enlazar el CFDI al registro, porque no existe el UUID proporcionado';
		END IF;
	END IF;

	IF _err = 0
	THEN
		UPDATE TBL_CFDVEN
		SET FSI_Tipo = _FSI_Tipo, FSI_ID = _FSI_ID
		WHERE ID_CFD = _ID_CFD;

		UPDATE TBL_CFD
		SET FSI_Tipo = _FSI_Tipo, FSI_ID = _FSI_ID
		WHERE ID_CFD = _ID_CFD;

		IF _FSI_Tipo = 'FAC'
		THEN
			UPDATE TBL_VENTAS_FACTURAS_CAB
			SET ID_CFD = _ID_CFD, TFD = 3
			WHERE ID_VC = _FSI_ID;

			_total := (select total from tbl_ventas_facturas_cab where id_vc = _FSI_ID);
			_id_client := (select id_clipro from tbl_ventas_facturas_cab where id_vc = _FSI_ID);
			_condicion := (select condicion from tbl_ventas_facturas_cab where id_vc = _FSI_ID);
			_rfc := (select rfc from tbl_client_client where id_tipo = 'CL' and id_clave = _id_client);
			_id_moneda :=  (select moneda from tbl_ventas_facturas_cab where id_vc = _FSI_ID);
			_tc :=  (select tc from tbl_ventas_facturas_cab where id_vc = _FSI_ID);
			
			IF _condicion = 0 --Contado
			THEN
				_id_pol := (select id_mov from tbl_ventas_facturas_pagos where id_factura = _FSI_ID limit 1 );
				_id_poliza := (select pol_id from tbl_bancos_movimientos where id = _id_pol);
				_cc :=  (select valfanumerico from TBL_VARIABLES where ID_Variable = 'CC_VENCONT');
			ELSIF _condicion = 1
			THEN
				_id_pol := (select id_pol from tbl_ventas_facturas_cab where id_vc = _FSI_ID);
				_id_poliza := (select id_pol from TBL_CLIENT_CXC where id_cp = _id_pol);
				_cc :=  (select valfanumerico from TBL_VARIABLES where ID_Variable = 'CC_VEN');
			ELSE
				_id_poliza := (select id_pol from tbl_ventas_facturas_cab where id_vc = _FSI_ID);
				_cc :=  (select valfanumerico from TBL_VARIABLES where ID_Variable = 'CC_VEN');
			END IF;

			IF _id_poliza IS NOT NULL
			THEN
				_id_part := (select Part from TBL_CONT_POLIZAS_DETALLE where ID = _id_poliza and Cuenta = _cc limit 1);
			END IF;
			--raise notice 'CXP % TOT % PRO % CON % POL % RFC %',_id_pol, _total, _id_provee, _condicion, _id_poliza, _rfc;
		ELSIF _FSI_Tipo = 'REM'
		THEN
			UPDATE TBL_VENTAS_REMISIONES_CAB
			SET ID_CFD = _ID_CFD, TFD = 3
			WHERE ID_VC = _FSI_ID;
		ELSE -- IF _FSI_Tipo = 'DSV'
			UPDATE TBL_VENTAS_DEVOLUCIONES_CAB
			SET ID_CFD = _ID_CFD, TFD = 3
			WHERE ID_VC = _FSI_ID;

			_total := (select total from tbl_ventas_devoluciones_cab where id_vc = _FSI_ID);
			_id_client := (select id_clipro from tbl_ventas_devoluciones_cab where id_vc = _FSI_ID);
			_condicion := (select condicion from tbl_ventas_devoluciones_cab where id_vc = _FSI_ID);
			_rfc := (select rfc from tbl_client_client where id_tipo = 'CL' and id_clave = _id_client);
			_id_moneda :=  (select moneda from tbl_ventas_devoluciones_cab where id_vc = _FSI_ID);
			_tc :=  (select tc from tbl_ventas_devoluciones_cab where id_vc = _FSI_ID);
			
			IF _condicion = 0 --Contado
			THEN
				_id_pol := (select id_mov from tbl_ventas_devoluciones_pagos where id_devolucion = _FSI_ID limit 1 );
				_id_poliza := (select pol_id from tbl_bancos_movimientos where id = _id_pol);
				_cc := (select valfanumerico from TBL_VARIABLES where ID_Variable = 'CC_DSVCONT');
			ELSIF _condicion = 1
			THEN
				_id_pol := (select id_pol from tbl_ventas_devoluciones_cab where id_vc = _FSI_ID);
				_id_poliza := (select id_pol from TBL_CLIENT_CXC where id_cp = _id_pol);
				_cc := (select cc from TBL_CLIENT_CXC_CONCEPTOS where ID_Concepto = (select id_concepto from TBL_CLIENT_CXC where id_cp = _id_pol) );
			ELSE
				_id_poliza := (select id_pol from tbl_ventas_devoluciones_cab where id_vc = _FSI_ID);
				_cc := (select valfanumerico from TBL_VARIABLES where ID_Variable = 'CC_DSV');
			END IF;

			IF _id_poliza IS NOT NULL
			THEN
				_id_part := (select Part from TBL_CONT_POLIZAS_DETALLE where ID = _id_poliza and Cuenta = _cc limit 1);
			END IF;
		END IF;

		--Ahora enlaza a la contabilidad electr√≥nica en caso de  factura o gasto
		IF _id_poliza IS NOT NULL and _id_part IS NOT NULL
		THEN
			_moneda_sat := (select id_satmoneda from tbl_cont_monedas where clave = _id_moneda);
			--Si existe la partida ingresa registro de comprobante .... Puede no ingresar en el caso que se haya cambiado la variable despues de ingresar la compra o gasto
			INSERT INTO TBL_CONT_POLIZAS_DETALLE_CE_COMPROBANTES
			VALUES(default, _id_poliza, _id_part, _uuid, _Total, _RFC, 'CompNal',  _moneda_sat, _tc, '', 0, '', '');
		END IF;
		
	END IF;

	RETURN QUERY SELECT _err, _result, _fsi_id;

END
$BODY$
  LANGUAGE plpgsql;
--ALTER FUNCTION sp_cfd_enlazarventa(character, integer, character)
  
--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_cfd_enlazarnomina(
    _fsi_id integer,
    _fsi_esp1 character,
    _uuid character)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255); _ID_CFD int; _id_pol integer; _id_poliza integer; _id_part smallint; _total numeric(19,4); _tipobanco smallint; _clavebanco smallint; _cc character(19); _rfc varchar(15);
BEGIN	
 	_err := 0;
	_result := 'El comprobante fiscal digital se enlaz√≥ correctamente';
	
	IF _uuid <> ''
	THEN
		IF (select count(*) from TBL_CFDNOM where UUID = _uuid) > 0
		THEN
			_ID_CFD := (select ID_CFD from TBL_CFDNOM where UUID = _uuid) ;
		ELSE
			_err := 3;
			_result := 'ERROR: No se puede enlazar el CFDI al registro, porque no existe el UUID proporcionado';
		END IF;
	END IF;

	IF _err = 0
	THEN
		UPDATE TBL_CFDNOM
		SET FSI_Tipo = 'NOM', FSI_ID = _FSI_ID, FSI_Esp1 = _FSI_Esp1
		WHERE ID_CFD = _ID_CFD;

		UPDATE TBL_CFD
		SET FSI_Tipo = 'NOM', FSI_ID = _FSI_ID, FSI_Esp1 = _FSI_Esp1
		WHERE ID_CFD = _ID_CFD;

		UPDATE TBL_NOM_CALCULO_NOMINA_ESP
		SET ID_CFD = _ID_CFD, TFD = 3
		WHERE ID_Nomina = _FSI_ID AND ID_Empleado =  _FSI_Esp1;

		_total := (select Gravado + Exento + Deduccion from tbl_nom_calculo_nomina_esp where id_nomina = _FSI_ID and id_empleado = _FSI_Esp1);
		_rfc := (select rfc_letras || rfc_fecha || rfc_homoclave from tbl_nom_masemp where id_empleado = _FSI_Esp1);
		_id_pol := (select id_mov from tbl_nom_calculo_nomina where id_nomina = _FSI_ID ); --Extrae el movimiento bancario
		_id_poliza := (select pol_id from tbl_bancos_movimientos where id = _id_pol); --Extrae la poliza del movimiento
		_tipobanco := (select tipo from tbl_bancos_movimientos where id = _id_pol); -- el tipo de banco
		_clavebanco := (select clave from tbl_bancos_movimientos where id = _id_pol); -- la clave del banco
		_cc := (select cc from tbl_bancos_cuentas where tipo = _tipobanco and clave = _clavebanco); -- la cuenta contable del banco
	
		IF _id_poliza IS NOT NULL
		THEN
			_id_part := (select Part from TBL_CONT_POLIZAS_DETALLE where ID = _id_poliza and Cuenta = _cc limit 1);
		END IF;
		
		--Ahora enlaza a la contabilidad electr√≥nica en caso de  factura o gasto
		IF _id_poliza IS NOT NULL and _id_part IS NOT NULL
		THEN
			--Si existe la partida ingresa registro de comprobante .... Puede no ingresar en el caso que se haya cambiado la variable despues de ingresar la compra o gasto
			INSERT INTO TBL_CONT_POLIZAS_DETALLE_CE_COMPROBANTES
			VALUES(default, _id_poliza, _id_part, _uuid, _Total, _RFC, 'CompNal',  'MXN', 1.0, '', 0, '', '');
		END IF;
		
	END IF;

	RETURN QUERY SELECT _err, _result, _fsi_id;

END
$BODY$
  LANGUAGE plpgsql;
  
--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_cfd_enlazar_uuids(
    _fsi_tipo character,
    _fsi_id integer,
    _uuid character varying)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255); _ID_CFD int; _id_pol integer; _id_poliza integer; _id_part smallint; _total numeric(19,4); _id_provee integer; _condicion smallint; _cc character(19); _rfc varchar(15); 
	_ContUUIDs smallint; _NumUUIDs smallint; _uuidx character(36);
	_id_moneda smallint; _tc numeric(19,4);
BEGIN	
 	_err := 0;
	_result := 'El comprobante fiscal digital se enlaz√≥ correctamente';
	
	IF _uuid <> ''
	THEN
		_NumUUIDs := (char_length(_uuid) / 36);
		_ContUUIDs := 0;
		WHILE _ContUUIDs < _NumUUIDs
		LOOP
			_uuidx := substring(_uuid, ((_ContUUIDs * 36) + 1), 36);
			IF (select count(*) from TBL_CFDCOMP where UUID = _uuidx) = 0
			THEN
				_err := 3;
				_result := 'ERROR: No se puede enlazar el CFDI al registro, porque no existe el UUID proporcionado ' + _uuidx;
				EXIT;
			END IF;
			_ContUUIDs := _ContUUIDs + 1;
		END LOOP;
	END IF;
	
	IF _err = 0
	THEN
		_NumUUIDs := (char_length(_uuid) / 36);
		_ContUUIDs := 0;
		WHILE _ContUUIDs < _NumUUIDs
		LOOP
			_uuidx := substring(_uuid, ((_ContUUIDs * 36) + 1), 36);

			UPDATE TBL_CFDCOMP
			SET FSI_Tipo = _FSI_Tipo, FSI_ID = _FSI_ID
			WHERE UUID = _uuidx;

			IF _FSI_Tipo = 'GAS'
			THEN
				insert into TBL_COMPRAS_GASTOS_CFD
				select  _FSI_ID, ID_CFD from TBL_CFDCOMP where UUID = _uuidx;
			END IF;
			
			_ContUUIDs := _ContUUIDs + 1;
		END LOOP;

		IF _FSI_Tipo = 'GAS'
		THEN
			UPDATE TBL_COMPRAS_GASTOS_CAB
			SET TFD = 3
			WHERE ID_VC = _FSI_ID;
			
			_total := (select total from tbl_compras_gastos_cab where id_vc = _FSI_ID);
			--_id_provee := (select id_clipro from tbl_compras_gastos_cab where id_vc = _FSI_ID);
			_condicion := (select condicion from tbl_compras_gastos_cab where id_vc = _FSI_ID);
			--_rfc := (select rfc from tbl_provee_provee where id_tipo = 'PR' and id_clave = _id_provee);
			_id_moneda :=  (select moneda from tbl_compras_gastos_cab where id_vc = _FSI_ID);
			_tc :=  (select tc from tbl_compras_gastos_cab where id_vc = _FSI_ID);
			
			IF _condicion = 0 --Contado
			THEN
				_id_pol := (select id_mov from tbl_compras_gastos_pagos where id_gasto = _FSI_ID limit 1 );
				_id_poliza := (select pol_id from tbl_bancos_movimientos where id = _id_pol);
			ELSIF _condicion = 1 --Credito
			THEN
				_id_pol := (select id_pol from tbl_compras_gastos_cab where id_vc = _FSI_ID);
				_id_poliza := (select id_pol from TBL_PROVEE_CXP where id_cp = _id_pol);
			ELSE
				_id_poliza := (select id_pol from tbl_compras_gastos_cab where id_vc = _FSI_ID);
			END IF;
			-- En gastos, el cfdi se enlaza a la primera partida de la poliza porque no existe base 
			-- de cuenta contable como Compras de Credito o de contado, que si existen en facturas de materias primas
			IF _id_poliza IS NOT NULL
			THEN
				_id_part := 1;
			END IF;
			raise notice 'PP % TOT % PRO % CON % POL % PART % RFC %',_id_pol, _total, _id_provee, _condicion, _id_poliza, _id_part, _rfc;
		END IF;

		--Ahora enlaza a la contabilidad electr√≥nica en caso de  factura o gasto
		IF _id_poliza IS NOT NULL and _id_part IS NOT NULL
		THEN
			--Si existe la partida ingresa registro de comprobante .... 
			_NumUUIDs := (char_length(_uuid) / 36);
			_ContUUIDs := 0;
			WHILE _ContUUIDs < _NumUUIDs
			LOOP
				_uuidx := substring(_uuid, ((_ContUUIDs * 36) + 1), 36);
				INSERT INTO TBL_CONT_POLIZAS_DETALLE_CE_COMPROBANTES( id_pol, id_part, uuid_cfdi, monto, rfc, id_tipo, moneda, tipcamb, cfd_cbb_serie, cfd_cbb_numfol, numfactext, taxid )
				SELECT _id_poliza, _id_part, _uuidx, Total, RFC, 'CompNal',  (select id_satmoneda from tbl_cont_monedas where clave = _id_moneda), _tc, '', 0, '', ''
				FROM TBL_CFDCOMP 
				WHERE UUID = _uuidx;
				_ContUUIDs := _ContUUIDs + 1;
			END LOOP;
		END IF;
		
	END IF;

	RETURN QUERY SELECT _err, _result, _fsi_id;

END
$BODY$
  LANGUAGE plpgsql;
--ALTER FUNCTION sp_cfd_enlazar_uuids(character, integer, character varying)


--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_cfd_enlazarcbbext_uuids(
    _fsi_tipo character,
    _fsi_id integer,
    _uuid character varying)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255); _ID_CFD int; _id_pol integer; _id_poliza integer; _id_part smallint; _total numeric(19,4); _id_provee integer; _condicion smallint; _cc character(19); _rfc varchar(15); 
	_ContUUIDs smallint; _NumUUIDs smallint; _uuidx character(36);
	_TipoComprobante varchar(10); _id_moneda smallint; 
BEGIN	
 	_err := 0;
	_result := 'El comprobante fiscal digital se enlaz√≥ correctamente';
	
	IF _uuid <> ''
	THEN
		_NumUUIDs := (char_length(_uuid) / 36);
		_ContUUIDs := 0;
		WHILE _ContUUIDs < _NumUUIDs
		LOOP
			_uuidx := substring(_uuid, ((_ContUUIDs * 36) + 1), 36);
			IF (select count(*) from TBL_CFDCOMPOTR where UUID = _uuidx) = 0
			THEN
				_err := 3;
				_result := 'ERROR: No se puede enlazar el CBB o Factura extranjera al registro, porque no existe el UUID proporcionado ' + _uuidx;
				EXIT;
			END IF;
			_ContUUIDs := _ContUUIDs + 1;
		END LOOP;
	END IF;
	
	IF _err = 0
	THEN
		_NumUUIDs := (char_length(_uuid) / 36);
		_ContUUIDs := 0;
		WHILE _ContUUIDs < _NumUUIDs
		LOOP
			_uuidx := substring(_uuid, ((_ContUUIDs * 36) + 1), 36);

			UPDATE TBL_CFDCOMPOTR
			SET FSI_Tipo = _FSI_Tipo, FSI_ID = _FSI_ID
			WHERE UUID = _uuidx;

			IF _FSI_Tipo = 'GAS'
			THEN
				insert into TBL_COMPRAS_GASTOS_CFD
				select  _FSI_ID, ID_CFD from TBL_CFDCOMPOTR where UUID = _uuidx;
			END IF;
			
			_ContUUIDs := _ContUUIDs + 1;
		END LOOP;

		IF _FSI_Tipo = 'GAS'
		THEN
			UPDATE TBL_COMPRAS_GASTOS_CAB
			SET TFD = 6
			WHERE ID_VC = _FSI_ID;
			
			_total := (select total from tbl_compras_gastos_cab where id_vc = _FSI_ID);
			_id_provee := (select id_clipro from tbl_compras_gastos_cab where id_vc = _FSI_ID);
			_condicion := (select condicion from tbl_compras_gastos_cab where id_vc = _FSI_ID);
			if _id_provee = 0 
			then
				_rfc := 'XAXX010101000';
			else
				_rfc := (select rfc from tbl_provee_provee where id_tipo = 'PR' and id_clave = _id_provee);
			end if;
			_id_moneda :=  (select moneda from tbl_compras_gastos_cab where id_vc = _FSI_ID);
			
			IF _condicion = 0 --Contado
			THEN
				_id_pol := (select id_mov from tbl_compras_gastos_pagos where id_gasto = _FSI_ID limit 1 );
				_id_poliza := (select pol_id from tbl_bancos_movimientos where id = _id_pol);
			ELSIF _condicion = 1
			THEN
				_id_pol := (select id_pol from tbl_compras_gastos_cab where id_vc = _FSI_ID);
				_id_poliza := (select id_pol from TBL_PROVEE_CXP where id_cp = _id_pol);
			ELSE
				_id_poliza := (select id_pol from tbl_compras_gastos_cab where id_vc = _FSI_ID);
			END IF;
			-- En gastos, el cfdi se enlaza a la primera partida de la poliza porque no existe base 
			-- de cuenta contable como Compras de Credito o de contado, que si existen en facturas de materias primas
			IF _id_poliza IS NOT NULL
			THEN
				_id_part := 1;
			END IF;
			--raise notice 'PP % TOT % PRO % CON % POL % PART % RFC %',_id_pol, _total, _id_provee, _condicion, _id_poliza, _id_part, _rfc;
		END IF;

		--Ahora enlaza a la contabilidad electr√≥nica en caso de  factura o gasto
		IF _id_poliza IS NOT NULL and _id_part IS NOT NULL
		THEN
			--Si existe la partida ingresa registro de comprobante .... 
			_NumUUIDs := (char_length(_uuid) / 36);
			_ContUUIDs := 0;
			WHILE _ContUUIDs < _NumUUIDs
			LOOP
				_uuidx := substring(_uuid, ((_ContUUIDs * 36) + 1), 36);
				_TipoComprobante := (select CASE WHEN numfactext = '' THEN 'CompNalOtr' ELSE 'CompExt' END from tbl_cfdcompotr where uuid = _uuidx );

				INSERT INTO TBL_CONT_POLIZAS_DETALLE_CE_COMPROBANTES( id_pol, id_part, uuid_cfdi, monto, rfc, id_tipo, moneda, tipcamb, cfd_cbb_serie, cfd_cbb_numfol, numfactext, taxid )
				SELECT _id_poliza, _id_part, _uuidx, Total, _RFC, _TipoComprobante, (select id_satmoneda from tbl_cont_monedas where clave = o.ID_Moneda), TC, CFD_CBB_Serie, CFD_CBB_NumFol, NumFactExt, ''
				FROM TBL_CFDCOMPOTR o
				WHERE UUID = _uuidx;
				_ContUUIDs := _ContUUIDs + 1;
			END LOOP;
		END IF;
		
	END IF;

	RETURN QUERY SELECT _err, _result, _fsi_id;

END
$BODY$
  LANGUAGE plpgsql;
--ALTER FUNCTION sp_cfd_enlazarcbbext_uuids(character, integer, character varying)


--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_cfd_eliminar_documento(
    _tipo character varying,
    _id_cfd integer)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255); 
BEGIN	
 	_err := 0;
	_result := 'El documento fiscal digital se elimin√≥ correctamente';
	
	IF _tipo = 'COMPRAS'
	THEN
		IF (select count(*) from TBL_CFDCOMP where ID_CFD = _id_cfd) < 1
		THEN
			_err := 3;
			_result := 'ERROR: No se puede eliminar el documento porque no existe en la base de datos';
		ELSIF (select FSI_Tipo from TBL_CFDCOMP where ID_CFD = _id_cfd) <> 'ENT'
		THEN
			_err := 3;
			_result := 'ERROR: No se puede eliminar el documento CFDI porque ya est√° enlazado a una compra o gasto';
		END IF;
	ELSIF _tipo = 'OTROS'
	THEN
		IF (select count(*) from TBL_CFDCOMPOTR where ID_CFD = _id_cfd) < 1
		THEN
			_err := 3;
			_result := 'ERROR: No se puede eliminar el documento porque no existe en la base de datos';
		ELSIF (select FSI_Tipo from TBL_CFDCOMPOTR where ID_CFD = _id_cfd) <> 'ENT'
		THEN
			_err := 3;
			_result := 'ERROR: No se puede eliminar el documento CBB/Ext porque ya est√° enlazado a una compra o gasto';
		END IF;
	ELSIF _tipo = 'VENTAS'
	THEN
		IF (select count(*) from TBL_CFDVEN where ID_CFD = _id_cfd) < 1
		THEN
			_err := 3;
			_result := 'ERROR: No se puede eliminar el documento porque no existe en la base de datos';
		ELSIF (select FSI_Tipo from TBL_CFDVEN where ID_CFD = _id_cfd) <> 'ENT'
		THEN
			_err := 3;
			_result := 'ERROR: No se puede eliminar el documento de Factura porque ya est√° enlazado a una remisi√≥n o factura interna';
		END IF;
	ELSIF _tipo = 'NOMINA'
	THEN
		IF (select count(*) from TBL_CFDNOM where ID_CFD = _id_cfd) < 1
		THEN
			_err := 3;
			_result := 'ERROR: No se puede eliminar el documento porque no existe en la base de datos';
		ELSIF (select FSI_Tipo from TBL_CFDNOM where ID_CFD = _id_cfd) <> 'ENT'
		THEN
			_err := 3;
			_result := 'ERROR: No se puede eliminar el documento de Recibo porque ya est√° enlazado a una n√≥mina interna';
		END IF;
	ELSE
		_err := 3;
		_result := 'ERROR: Desconocido... No existe el tipo de documento: ' || _Tipo;
	END IF;

	IF _err = 0
	THEN
		IF _tipo = 'COMPRAS'
		THEN
			DELETE FROM TBL_CFDCOMP 
			WHERE ID_CFD = _id_cfd;
		ELSIF _tipo = 'OTROS'
		THEN
			DELETE FROM TBL_CFDCOMPOTR 
			WHERE ID_CFD = _id_cfd;
		ELSIF _tipo = 'VENTAS'
		THEN
			DELETE FROM TBL_CFDVEN 
			WHERE ID_CFD = _id_cfd;
		ELSE -- _tipo = 'NOMINA'
			DELETE FROM TBL_CFDNOM
			WHERE ID_CFD = _id_cfd;
		END IF;
	END IF;

	RETURN QUERY SELECT _err, _result, (_tipo || '/' || _id_cfd::varchar)::varchar;

END
$BODY$
  LANGUAGE plpgsql;

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_cfd_desenlazar_documento(
    _tipo character varying,
    _id_cfd integer)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255); _fsi_tipo character(3); _fsi_id integer; _fsi_esp1 character varying(20); _id_pol integer; _id_poliza integer; _id_part smallint; _condicion smallint; _cc character(19); _fsi_ent smallint;
	_tipobanco smallint; _clavebanco smallint;
BEGIN	
 	_err := 0;
	_result := 'El comprobante fiscal digital se desenlaz√≥ correctamente';
	
	IF _tipo = 'COMPRAS'
	THEN
		_fsi_tipo = (select FSI_Tipo from TBL_CFDCOMP where ID_CFD = _id_cfd);
		_fsi_id = (select FSI_ID from TBL_CFDCOMP where ID_CFD = _id_cfd);
	ELSIF _tipo = 'OTROS'
	THEN
		_fsi_tipo = (select FSI_Tipo from TBL_CFDCOMPOTR where ID_CFD = _id_cfd);
		_fsi_id = (select FSI_ID from TBL_CFDCOMPOTR where ID_CFD = _id_cfd);
	ELSIF _tipo = 'VENTAS'
	THEN
		_fsi_tipo = (select FSI_Tipo from TBL_CFDVEN where ID_CFD = _id_cfd);
		_fsi_id = (select FSI_ID from TBL_CFDVEN where ID_CFD = _id_cfd);
	ELSIF _tipo = 'NOMINA'
	THEN
		_fsi_tipo = (select FSI_Tipo from TBL_CFDNOM where ID_CFD = _id_cfd);
		_fsi_id = (select FSI_ID from TBL_CFDNOM where ID_CFD = _id_cfd);
		_fsi_esp1 = (select FSI_Esp1 from TBL_CFDNOM where ID_CFD = _id_cfd);
	ELSE
		_err := 3;
		_result := 'ERROR: Desconocido... No existe el tipo de documento: ' || _Tipo;
	END IF;

	IF _err = 0 AND (_Tipo = 'COMPRAS' OR _Tipo = 'OTROS')
	THEN
		IF _FSI_Tipo = 'FAC'
		THEN
			UPDATE TBL_COMPRAS_FACTURAS_CAB
			SET ID_CFD = null, TFD = null
			WHERE ID_VC = _FSI_ID;

			_fsi_ent := (select id_entidad from tbl_compras_facturas_cab where id_vc = _FSI_ID);
			_condicion := (select condicion from tbl_compras_facturas_cab where id_vc = _FSI_ID);
			
			IF _condicion = 0 --Contado
			THEN
				_id_pol := (select id_mov from tbl_compras_facturas_pagos where id_factura = _FSI_ID limit 1 );
				_id_poliza := (select pol_id from tbl_bancos_movimientos where id = _id_pol);
				_cc :=  (select valfanumerico from TBL_VARIABLES where ID_Variable = 'CC_COMCONT');
			ELSIF _condicion = 1
			THEN
				_id_pol := (select id_pol from tbl_compras_facturas_cab where id_vc = _FSI_ID);
				_id_poliza := (select id_pol from TBL_PROVEE_CXP where id_cp = _id_pol);
				_cc :=  (select valfanumerico from TBL_VARIABLES where ID_Variable = 'CC_COMP');
			ELSE
				_id_poliza := (select id_pol from tbl_compras_facturas_cab where id_vc = _FSI_ID);
				_cc :=  (select valfanumerico from TBL_VARIABLES where ID_Variable = 'CC_COMP');
			END IF;

			IF _id_poliza IS NOT NULL
			THEN
				_id_part := (select Part from TBL_CONT_POLIZAS_DETALLE where ID = _id_poliza and Cuenta = _cc limit 1);
			END IF;
			--raise notice 'CXP % TOT % PRO % CON % POL % RFC %',_id_pol, _total, _id_provee, _condicion, _id_poliza, _rfc;
		ELSIF _FSI_Tipo = 'REC'
		THEN
			UPDATE TBL_COMPRAS_RECEPCIONES_CAB
			SET ID_CFD = null, TFD = null
			WHERE ID_VC = _FSI_ID;

			_fsi_ent := (select id_entidad from tbl_compras_recepciones_cab where id_vc = _FSI_ID);

		ELSIF _FSI_Tipo = 'GAS'
		THEN
			UPDATE TBL_COMPRAS_GASTOS_CAB
			SET ID_CFD = null, TFD = null
			WHERE ID_VC = _FSI_ID;
			
			_fsi_ent := (select id_entidad from tbl_compras_gastos_cab where id_vc = _FSI_ID);
			_condicion := (select condicion from tbl_compras_gastos_cab where id_vc = _FSI_ID);
			
			IF _condicion = 0 --Contado
			THEN
				_id_pol := (select id_mov from tbl_compras_gastos_pagos where id_gasto = _FSI_ID limit 1 );
				_id_poliza := (select pol_id from tbl_bancos_movimientos where id = _id_pol);
			ELSIF _condicion = 1
			THEN
				_id_pol := (select id_pol from tbl_compras_gastos_cab where id_vc = _FSI_ID);
				_id_poliza := (select id_pol from TBL_PROVEE_CXP where id_cp = _id_pol);
			ELSE
				_id_poliza := (select id_pol from tbl_compras_gastos_cab where id_vc = _FSI_ID);
			END IF;
			-- En gastos, el cfdi se enlaza a la primera partida de la poliza porque no existe base 
			-- de cuenta contable como Compras de Credito o de contado, que si existen en facturas de materias primas
			IF _id_poliza IS NOT NULL
			THEN
				_id_part := 1;
			END IF;

			DELETE FROM tbl_compras_gastos_cfd
			WHERE id_gasto = _FSI_ID;
			--raise notice 'PP % TOT % PRO % CON % POL % PART % RFC %',_id_pol, _total, _id_provee, _condicion, _id_poliza, _id_part, _rfc;
		ELSE -- IF _FSI_Tipo = 'DSC'
			UPDATE TBL_COMPRAS_DEVOLUCIONES_CAB
			SET ID_CFD = null, TFD = null
			WHERE ID_VC = _FSI_ID;

			_fsi_ent := (select id_entidad from tbl_compras_devoluciones_cab where id_vc = _FSI_ID);
			_condicion := (select condicion from tbl_compras_devoluciones_cab where id_vc = _FSI_ID);
			
			IF _condicion = 0 --Contado
			THEN
				_id_pol := (select id_mov from tbl_compras_devoluciones_pagos where id_devolucion = _FSI_ID limit 1 );
				_id_poliza := (select pol_id from tbl_bancos_movimientos where id = _id_pol);
				_cc := (select valfanumerico from TBL_VARIABLES where ID_Variable = 'CC_DSCCONT');
			ELSIF _condicion = 1
			THEN
				_id_pol := (select id_pol from tbl_compras_devoluciones_cab where id_vc = _FSI_ID);
				_id_poliza := (select id_pol from TBL_PROVEE_CXP where id_cp = _id_pol);
				_cc := (select cc from TBL_PROVEE_CXP_CONCEPTOS where ID_Concepto = (select id_concepto from TBL_PROVEE_CXP where id_cp = _id_pol) );
			ELSE
				_id_poliza := (select id_pol from tbl_compras_devoluciones_cab where id_vc = _FSI_ID);
				_cc := (select valfanumerico from TBL_VARIABLES where ID_Variable = 'CC_DSC');
			END IF;

			IF _id_poliza IS NOT NULL
			THEN
				_id_part := (select Part from TBL_CONT_POLIZAS_DETALLE where ID = _id_poliza and Cuenta = _cc limit 1);
			END IF;
		END IF;

		IF _Tipo = 'COMPRAS'
		THEN
			UPDATE TBL_CFDCOMP
			SET FSI_Tipo = 'ENT', FSI_ID = _FSI_Ent
			WHERE FSI_Tipo = _fsi_tipo AND FSI_ID = _fsi_id;
		ELSE
			UPDATE TBL_CFDCOMPOTR
			SET FSI_Tipo = 'ENT', FSI_ID = _FSI_Ent
			WHERE FSI_Tipo = _fsi_tipo AND FSI_ID = _fsi_id;
		END IF;
	ELSIF _err = 0 AND _Tipo = 'VENTAS'
	THEN
		IF _FSI_Tipo = 'FAC'
		THEN
			UPDATE TBL_VENTAS_FACTURAS_CAB
			SET ID_CFD = null, TFD = null
			WHERE ID_VC = _FSI_ID;

			_fsi_ent := (select id_entidad from tbl_ventas_facturas_cab where id_vc = _FSI_ID);
			_condicion := (select condicion from tbl_ventas_facturas_cab where id_vc = _FSI_ID);
			
			IF _condicion = 0 --Contado
			THEN
				_id_pol := (select id_mov from tbl_ventas_facturas_pagos where id_factura = _FSI_ID limit 1 );
				_id_poliza := (select pol_id from tbl_bancos_movimientos where id = _id_pol);
				_cc :=  (select valfanumerico from TBL_VARIABLES where ID_Variable = 'CC_VENCONT');
			ELSIF _condicion = 1
			THEN
				_id_pol := (select id_pol from tbl_ventas_facturas_cab where id_vc = _FSI_ID);
				_id_poliza := (select id_pol from TBL_CLIENT_CXC where id_cp = _id_pol);
				_cc :=  (select valfanumerico from TBL_VARIABLES where ID_Variable = 'CC_VEN');
			ELSE
				_id_poliza := (select id_pol from tbl_ventas_facturas_cab where id_vc = _FSI_ID);
				_cc :=  (select valfanumerico from TBL_VARIABLES where ID_Variable = 'CC_VEN');
			END IF;

			IF _id_poliza IS NOT NULL
			THEN
				_id_part := (select Part from TBL_CONT_POLIZAS_DETALLE where ID = _id_poliza and Cuenta = _cc limit 1);
			END IF;
			--raise notice 'CXP % TOT % PRO % CON % POL % RFC %',_id_pol, _total, _id_provee, _condicion, _id_poliza, _rfc;
		ELSIF _FSI_Tipo = 'REM'
		THEN
			UPDATE TBL_VENTAS_REMISIONES_CAB
			SET ID_CFD = null, TFD = null
			WHERE ID_VC = _FSI_ID;

			_fsi_ent := (select id_entidad from tbl_ventas_remisiones_cab where id_vc = _FSI_ID);
			
		ELSE -- IF _FSI_Tipo = 'DSV'
			UPDATE TBL_VENTAS_DEVOLUCIONES_CAB
			SET ID_CFD = null, TFD = null
			WHERE ID_VC = _FSI_ID;

			_fsi_ent := (select id_entidad from tbl_ventas_devoluciones_cab where id_vc = _FSI_ID);
			_condicion := (select condicion from tbl_ventas_devoluciones_cab where id_vc = _FSI_ID);
			
			IF _condicion = 0 --Contado
			THEN
				_id_pol := (select id_mov from tbl_ventas_devoluciones_pagos where id_devolucion = _FSI_ID limit 1 );
				_id_poliza := (select pol_id from tbl_bancos_movimientos where id = _id_pol);
				_cc := (select valfanumerico from TBL_VARIABLES where ID_Variable = 'CC_DSVCONT');
			ELSIF _condicion = 1
			THEN
				_id_pol := (select id_pol from tbl_ventas_devoluciones_cab where id_vc = _FSI_ID);
				_id_poliza := (select id_pol from TBL_CLIENT_CXC where id_cp = _id_pol);
				_cc := (select cc from TBL_CLIENT_CXC_CONCEPTOS where ID_Concepto = (select id_concepto from TBL_CLIENT_CXC where id_cp = _id_pol) );
			ELSE
				_id_poliza := (select id_pol from tbl_ventas_devoluciones_cab where id_vc = _FSI_ID);
				_cc := (select valfanumerico from TBL_VARIABLES where ID_Variable = 'CC_DSV');
			END IF;

			IF _id_poliza IS NOT NULL
			THEN
				_id_part := (select Part from TBL_CONT_POLIZAS_DETALLE where ID = _id_poliza and Cuenta = _cc limit 1);
			END IF;
		END IF;

		UPDATE TBL_CFDVEN
		SET FSI_Tipo = 'ENT', FSI_ID = _FSI_Ent
		WHERE FSI_Tipo = _fsi_tipo AND FSI_ID = _fsi_id;

		UPDATE TBL_CFD
		SET FSI_Tipo = 'ENT', FSI_ID = _FSI_Ent
		WHERE FSI_Tipo = _fsi_tipo AND FSI_ID = _fsi_id;
	ELSIF _err = 0 AND _Tipo = 'NOMINA'
	THEN
		_fsi_ent := (select id_sucursal from tbl_nom_calculo_nomina where id_nomina = _FSI_ID );
		_id_pol := (select id_mov from tbl_nom_calculo_nomina where id_nomina = _FSI_ID ); --Extrae el movimiento bancario
		_id_poliza := (select pol_id from tbl_bancos_movimientos where id = _id_pol); --Extrae la poliza del movimiento
		_tipobanco := (select tipo from tbl_bancos_movimientos where id = _id_pol); -- el tipo de banco
		_clavebanco := (select clave from tbl_bancos_movimientos where id = _id_pol); -- la clave del banco
		_cc := (select cc from tbl_bancos_cuentas where tipo = _tipobanco and clave = _clavebanco); -- la cuenta contable del banco
	
		IF _id_poliza IS NOT NULL
		THEN
			_id_part := (select Part from TBL_CONT_POLIZAS_DETALLE where ID = _id_poliza and Cuenta = _cc limit 1);
		END IF;

		UPDATE TBL_CFDNOM
		SET FSI_Tipo = 'ENT', FSI_ID = _FSI_Ent, FSI_Esp1 = ''
		WHERE FSI_Tipo = _fsi_tipo AND FSI_ID = _fsi_id;

		UPDATE TBL_CFD
		SET FSI_Tipo = 'ENT', FSI_ID = _FSI_Ent, FSI_Esp1 = ''
		WHERE FSI_Tipo = _fsi_tipo AND FSI_ID = _fsi_id;

		UPDATE TBL_NOM_CALCULO_NOMINA_ESP
		SET ID_CFD = null, TFD = null
		WHERE ID_Nomina = _FSI_ID;

	END IF;
	
	--Ahora desenlaza de la contabilidad electr√≥nica
	IF _id_poliza IS NOT NULL and _id_part IS NOT NULL
	THEN
		--Si existe la partida elimina registro de comprobante .... Puede no ingresar en el caso que se haya cambiado la variable despues de ingresar el comprobante
		DELETE FROM TBL_CONT_POLIZAS_DETALLE_CE_COMPROBANTES
		WHERE id_pol = _id_poliza AND id_part = _id_part;
	END IF;

	RETURN QUERY SELECT _err, _result, (_tipo || '/' || _fsi_tipo || ':' || _id_cfd::varchar)::varchar;

END
$BODY$
  LANGUAGE plpgsql;
--ALTER FUNCTION sp_cfd_desenlazar_documento(character varying, integer)
  
--@FIN_BLOQUE
CREATE TABLE tbl_crmk_workareas
(
  gu_workarea character(32) NOT NULL,
  nm_workarea character varying(50) NOT NULL,
  id_domain smallint NOT NULL,
  gu_owner character(32) NOT NULL,
  bo_active smallint DEFAULT 1,
  dt_created timestamp without time zone DEFAULT now(),
  len_quota numeric(28,0) DEFAULT 0,
  max_quota numeric(28,0) DEFAULT 104857600,
  path_logo character varying(254),
  id_locale character varying(5),
  tx_date_format character varying(30) DEFAULT 'yyyy-MM-dd'::character varying,
  tx_number_format character varying(30) DEFAULT '#0.00'::character varying,
  bo_allcaps smallint DEFAULT 0,
  bo_dup_id_docs smallint DEFAULT 1,
  bo_cnt_autoref smallint DEFAULT 0,
  bo_acrs_oprt smallint DEFAULT 0,
  CONSTRAINT pk_workareas PRIMARY KEY (gu_workarea),
  CONSTRAINT fk_tbl_crmk_workareas_tbl_notas_blocks FOREIGN KEY (id_domain)
      REFERENCES tbl_notas_blocks (id_block) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT u1_workareas UNIQUE (nm_workarea)
);

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION view_notas_blocks_ids(_id_usuario character varying, _entidad character varying)
  RETURNS SETOF record AS
$BODY$  
BEGIN
	IF _ID_Usuario = 'cef-su' OR (select count(*) from tbl_usuarios_submodulo_roles where id_usuario = _id_usuario and id_rol = 'cef-crm') > 0
	THEN
		IF _Entidad = 'CEF-X' -- Regresa todo el set
		THEN
			RETURN QUERY
			SELECT _id_usuario as id_usuario, n.ID_Block, n.Etiqueta, w.gu_workarea
			FROM TBL_NOTAS_BLOCKS n JOIN 
				tbl_crmk_workareas w ON n.ID_Block = w.id_domain  
			ORDER BY n.ID_Block ASC; 
			
		ELSIF _Entidad = 'CEF-1'
		THEN
			RETURN QUERY
			SELECT _id_usuario as id_usuario, n.ID_Block, n.Etiqueta, w.gu_workarea
			FROM TBL_NOTAS_BLOCKS n JOIN 
				tbl_crmk_workareas w ON n.ID_Block = w.id_domain  
			ORDER BY n.ID_Block ASC
			LIMIT 1;
		ELSE
			RETURN QUERY 
			SELECT _id_usuario as id_usuario, n.ID_Block, n.Etiqueta, w.gu_workarea
			FROM TBL_NOTAS_BLOCKS n JOIN 
				tbl_crmk_workareas w ON n.ID_Block = w.id_domain  
			WHERE n.ID_Block = _Entidad::smallint;
		END IF;
	ELSE
		IF _Entidad = 'CEF-X' -- Regresa todo el set
		THEN
			RETURN QUERY 
			SELECT DISTINCT _id_usuario as id_usuario, n.ID_Block, n.Etiqueta, w.gu_workarea
			FROM TBL_NOTAS_BLOCKS n JOIN 
				tbl_crmk_workareas w ON n.ID_Block = w.id_domain   INNER JOIN
				TBL_USUARIOS_SUBMODULO_BLOCKS u ON n.ID_Block = u.ID_Block
			WHERE (u.id_usuario = _ID_Usuario OR u.id_usuario IN
				(select sr.ID_Rol from tbl_usuarios_submodulo_roles sr where sr.id_usuario = _ID_Usuario))
			ORDER BY n.ID_Block ASC;

		ELSIF _Entidad = 'CEF-1'
		THEN
			RETURN QUERY 
			SELECT DISTINCT _id_usuario as id_usuario, n.ID_Block, n.Etiqueta, w.gu_workarea
			FROM TBL_NOTAS_BLOCKS n JOIN 
				tbl_crmk_workareas w ON n.ID_Block = w.id_domain INNER JOIN
				TBL_USUARIOS_SUBMODULO_BLOCKS u ON n.ID_Block = u.ID_Block
			WHERE (u.id_usuario = _ID_Usuario OR u.id_usuario IN
				(select sr.ID_Rol from tbl_usuarios_submodulo_roles sr where sr.id_usuario = _ID_Usuario))
			ORDER BY n.ID_Block ASC
			LIMIT 1;

		ELSE
			RETURN QUERY
			SELECT DISTINCT _id_usuario as id_usuario, n.ID_Block, n.Etiqueta, w.gu_workarea
			FROM TBL_NOTAS_BLOCKS n JOIN 
				tbl_crmk_workareas w ON n.ID_Block = w.id_domain   INNER JOIN
				TBL_USUARIOS_SUBMODULO_BLOCKS u ON n.ID_Block = u.ID_Block
			WHERE (u.id_usuario = _ID_Usuario OR u.id_usuario IN
				(select sr.ID_Rol from tbl_usuarios_submodulo_roles sr where sr.id_usuario = _ID_Usuario))
			AND n.ID_Block = _Entidad::smallint;
			
		END IF;
	END IF;
END
$BODY$
  LANGUAGE plpgsql;
  
--@FIN_BLOQUE  
CREATE TABLE tbl_crmk_users
(
  gu_user character(32) NOT NULL,
  dt_created timestamp without time zone DEFAULT now(),
  tx_nickname character varying(32) NOT NULL,
  tx_pwd character varying(50) NOT NULL,
  tx_pwd_sign character varying(50),
  bo_change_pwd smallint DEFAULT 1,
  bo_searchable smallint DEFAULT 1,
  bo_active smallint DEFAULT 1,
  nu_login_attempts integer DEFAULT 1,
  len_quota numeric(28,0) DEFAULT 0,
  max_quota numeric(28,0) DEFAULT 104857600,
  tp_account character(1),
  id_account character(10),
  dt_last_update timestamp without time zone,
  dt_last_visit timestamp without time zone,
  dt_cancel timestamp without time zone,
  tx_main_email character varying(100),
  tx_alt_email character varying(100),
  nm_user character varying(100),
  tx_surname1 character varying(100),
  tx_surname2 character varying(100),
  tx_challenge character varying(100),
  tx_reply character varying(100),
  dt_pwd_expires timestamp without time zone,
  gu_category character(32),
  gu_workarea character(32),
  nm_company character varying(70),
  de_title character varying(70),
  id_gender character(1),
  dt_birth timestamp without time zone,
  ny_age smallint,
  marital_status character(1),
  tx_education character varying(100),
  icq_id character varying(50),
  sn_passport character varying(16),
  tp_passport character(1),
  mov_phone character varying(16),
  tx_comments character varying(254),
  fsi_user_id character varying(10) NOT NULL,
  CONSTRAINT pk_users PRIMARY KEY (gu_user),
  CONSTRAINT fk_tbl_crmk_users_tbl_usuarios FOREIGN KEY (fsi_user_id)
      REFERENCES tbl_usuarios (id_usuario) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT u3_users UNIQUE (tx_nickname),
  CONSTRAINT u4_users UNIQUE (tx_main_email),
  CONSTRAINT c1_users CHECK (tx_nickname::text <> tx_pwd::text),
  CONSTRAINT c2_users CHECK (tx_pwd_sign::text <> tx_pwd::text)
);

--@FIN_BLOQUE
CREATE TABLE tbl_crmk_thesauri_root
(
  gu_rootterm character(32) NOT NULL,
  tx_term character varying(100) NOT NULL,
  id_scope character varying(50) DEFAULT 'all'::character varying,
  gu_workarea character(32),
  CONSTRAINT pk_thesauri_root PRIMARY KEY (gu_rootterm),
  CONSTRAINT f2_thesauri_root FOREIGN KEY (gu_workarea)
      REFERENCES tbl_crmk_workareas (gu_workarea) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION
);

--@FIN_BLOQUE
CREATE TABLE tbl_crmk_lu_languages
(
  id_language character(2) NOT NULL,
  tr_lang_en character varying(50),
  tr_lang_es character varying(50),
  tr_lang_fr character varying(50),
  tr_lang_de character varying(50),
  tr_lang_it character varying(50),
  tr_lang_pt character varying(50),
  tr_lang_ca character varying(50),
  tr_lang_eu character varying(50),
  tr_lang_ja character varying(50),
  tr_lang_cn character varying(50),
  tr_lang_tw character varying(50),
  tr_lang_fi character varying(50),
  tr_lang_ru character varying(50),
  tr_lang_pl character varying(50),
  tr_lang_nl character varying(50),
  tr_lang_th character varying(50),
  tr_lang_cs character varying(50),
  tr_lang_uk character varying(50),
  tr_lang_no character varying(50),
  tr_lang_u1 character varying(50),
  tr_lang_u2 character varying(50),
  tr_lang_u3 character varying(50),
  tr_lang_u4 character varying(50),
  CONSTRAINT pk_lu_languages PRIMARY KEY (id_language)
);

--@FIN_BLOQUE
INSERT INTO tbl_crmk_lu_languages
VALUES('en','English','Ingles','Anglais','','Inglese','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_languages
VALUES('es','Spanish','Espa√É¬±ol','Espagnol','','Spagnolo','','','','','','','','','','','','','','','','','','');

--@FIN_BLOQUE
CREATE TABLE tbl_crmk_thesauri
(
  gu_rootterm character(32) NOT NULL,
  gu_term character(32) NOT NULL,
  dt_created timestamp without time zone DEFAULT now(),
  id_language character(2) NOT NULL,
  bo_mainterm smallint DEFAULT 1,
  tx_term character varying(100) NOT NULL,
  id_scope character varying(50) DEFAULT 'all'::character varying,
  id_domain integer NOT NULL,
  gu_synonym character(32),
  de_term character varying(200),
  tx_term2 character varying(100),
  id_term0 integer,
  id_term1 integer,
  id_term2 integer,
  id_term3 integer,
  id_term4 integer,
  id_term5 integer,
  id_term6 integer,
  id_term7 integer,
  id_term8 integer,
  id_term9 integer,
  CONSTRAINT pk_thesauri PRIMARY KEY (gu_term),
  CONSTRAINT f1_thesauri FOREIGN KEY (gu_rootterm)
      REFERENCES tbl_crmk_thesauri_root (gu_rootterm) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION,
  CONSTRAINT f2_thesauri FOREIGN KEY (id_language)
      REFERENCES tbl_crmk_lu_languages (id_language) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION,
  CONSTRAINT f4_thesauri FOREIGN KEY (gu_synonym)
      REFERENCES tbl_crmk_thesauri (gu_term) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION
);

--@FIN_BLOQUE
CREATE TABLE tbl_crmk_companies
(
  gu_company character(32) NOT NULL,
  dt_created timestamp without time zone DEFAULT now(),
  nm_legal character varying(70) NOT NULL,
  gu_workarea character(32) NOT NULL,
  bo_restricted smallint DEFAULT 0,
  nm_commercial character varying(70),
  dt_modified timestamp without time zone,
  dt_founded timestamp without time zone,
  id_batch character varying(32),
  id_legal character varying(16),
  id_sector character varying(50),
  id_status character varying(30),
  id_ref character varying(50),
  id_fare character varying(32),
  id_bpartner character varying(32),
  tp_company character varying(30),
  gu_geozone character(32),
  nu_employees integer,
  im_revenue double precision,
  gu_sales_man character(32),
  tx_franchise character varying(100),
  de_company character varying(254),
  CONSTRAINT pk_companies PRIMARY KEY (gu_company),
  CONSTRAINT f1_companies FOREIGN KEY (gu_workarea)
      REFERENCES tbl_crmk_workareas (gu_workarea) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION,
  CONSTRAINT f2_companies FOREIGN KEY (gu_geozone)
      REFERENCES tbl_crmk_thesauri (gu_term) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION,
  CONSTRAINT u1_companies UNIQUE (gu_workarea, nm_legal),
  CONSTRAINT c1_companies CHECK (nm_legal IS NULL OR char_length(nm_legal::text) > 0),
  CONSTRAINT c2_companies CHECK (id_legal IS NULL OR char_length(id_legal::text) > 0),
  CONSTRAINT c3_companies CHECK (id_ref IS NULL OR char_length(id_ref::text) > 0),
  CONSTRAINT c4_companies CHECK (id_sector IS NULL OR char_length(id_sector::text) > 0),
  CONSTRAINT c5_companies CHECK (tx_franchise IS NULL OR char_length(tx_franchise::text) > 0)
);

--@FIN_BLOQUE
CREATE TABLE tbl_crmk_lu_countries
(
  id_country character(3) NOT NULL,
  tr_country_en character varying(50),
  tr_country_es character varying(50),
  tr_country_fr character varying(50),
  tr_country_de character varying(50),
  tr_country_it character varying(50),
  tr_country_pt character varying(50),
  tr_country_ca character varying(50),
  tr_country_eu character varying(50),
  tr_country_ja character varying(50),
  tr_country_cn character varying(50),
  tr_country_tw character varying(50),
  tr_country_fi character varying(50),
  tr_country_ru character varying(50),
  tr_country_pl character varying(50),
  tr_country_nl character varying(50),
  tr_country_th character varying(50),
  tr_country_cs character varying(50),
  tr_country_uk character varying(50),
  tr_country_no character varying(50),
  tr_country_u1 character varying(50),
  tr_country_u2 character varying(50),
  tr_country_u3 character varying(50),
  tr_country_u4 character varying(50),
  CONSTRAINT pk_lu_countries PRIMARY KEY (id_country)
);

--@FIN_BLOQUE
INSERT INTO tbl_crmk_lu_countries
VALUES('ad ','Andorra','Andorra','Andorre','Andorra','Andorra','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('ae ','United Arab Emirates','Emiratos Arabes','Emirats Arabes Unis','Vereinigte Arabische Emirates','Gli Emirati Arabi Uniti','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('af ','Afghanistan, Islamic State of','Afganistan','Afganistan','Afghanistan','Afghanistan','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('ag ','Antigua and Barbuda','Antigua y Barbuda','Antigua et Barbuda','Antigua und Barbuda','Antigua e barbuda','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('ai ','Anguilla','Anguilla','Anguilla','Anguilla','Anguilla','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('al ','Albania','Albania','Albanie','Albanien','Albania','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('am ','Armenia','Armenia','Armenie','Armenien','Armenia','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('an ','Netherlands Antilles','Antillas Holandesas','Les Hollandes Antilles','Die Niederlande Antillen','I Paesi Bassi Antille','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('ao ','Angola','Angola','Angola','Angola','Angola','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('aq ','Antarctica','Antartida','Antartide','Antarktik','Antartide','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('ar ','Argentina','Argentina','Argentine','Argentinien','Argentina','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('as ','American Samoa','Samoa Americana','Samoa','Amerikanische Samoa-Inseln','Samoa','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('at ','Austria','Austria','Autriche','√É‚Äìsterreich','Austria','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('au ','Australia','Australia','Australie','Australien','Australia','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('aw ','Aruba','Aruba','Aruba','Aruba','Aruba','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('az ','Azerbaidjan','Azerbay√É¬°n','Azerbaidjan','Azerbaidjan','Azerbaidjan','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('ba ','Bosnia-Herzegovina','Bosnia-Herzegovina','Bosnie Herzegovine','Bosnien-Herzegovina','Bosnia-Herzegovina','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('bb ','Barbados','Barbados','Barbade','Barbados','Barbados','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('bd ','Bangladesh','Bangladesh','Bangladesh','Bangladesh','Bangladesh','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('be ','Belgium','Belgica','Belgique','Belgien','Belgio','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('bf ','Burkina Faso','Burkina Faso','Burkina Faso','Burkina Faso','Burkina Faso','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('bg ','Bulgaria','Bulgaria','Bulgarie','Bulgarien','Bulgaria','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('bh ','Bahrain','Bahrain','Bahrain','Bahrain','Bahrain','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('bi ','Burundi','Burundi','Burundi','Burundi','Burundi','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('bj ','Benin','Benin','Benin','Benin','Benin','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('bm ','Bermuda','Bermudas','Bermudes','Bermuda','Bermude','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('bn ','Brunei Darussalam','Brunei','Brunei','Brunei','Brunei','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('bo ','Bolivia','Bolivia','Bolivie','Bolivien','Bolivia','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('br ','Brazil','Brasil','Bresil','Brasilien','Brasile','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('bs ','Bahamas','Bahamas','Bahamas','Bahamas','Bahamas','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('bt ','Bhutan','Bhutan','Bhutan','Bhutan','Bhutan','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('bv ','Bouvet Island','Isla Bouvet','Bouvet Iles','Insel Bouvet','Isola Di Bouvet','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('by ','Belarus','Bielorrusia','Bielorussie','Belarus','Belarus','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('bz ','Belize','Belice','Belize','Belize','Belize','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('ca ','Canada','Canada','Canada','Kanada','Canada','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('cc ','Cocos (Keeling) Islands','Islas Cocos','Cocos (Keeling) Iles','Inseln Cocos (Keeling)','Isole Di Cocos (Keeling)','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('cd ','Congo','Congo','Congo','Der Kongo','Congo','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('cf ','Central African Republic','Republica Centroafricana','Republique Centre Afrique','Republik Des Zentralen Afrikaners','Repubblica Dell Africano Centrale','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('cg ','Congo, The Democratic Republic Of','Republica del Congo','Congo (Republique Democratique)','Kongo, Die Demokratische Republik Vom','Congo, La Repubblica Democratica Di','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('ch ','Switzerland','Suiza','Suisse','Die Schweiz','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('ci ','Ivory Coast','Costa de Marfil','Cote d Ivoire','Die Elfenbeink√É¬ºste','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('ck ','Cook Islands','Islas Cook','Cook (Iles)','Inseln Kochc','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('cl ','Chile','Chile','Chili','Chile','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('cm ','Cameroon','Camerun','Cameroun','Cameroon','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('cn ','China','China','Chine','China','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('co ','Colombia','Colombia','Colombie','Kolumbien','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('cr ','Costa Rica','Costa Rica','Costa Rica','Costa Rica','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('cs ','Former Czechoslovakia','Checoslovaquia','Tchecoslovaquie','Die Tschechoslowakei','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('cu ','Cuba','Cuba','Cuba','Kuba','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('cv ','Cape Verde','Cabo Verde','Cap Vert','Kape Verde','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('cx ','Christmas Island','Islas de Pascua','Christmas Island','Insel Weihnachtsc','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('cy ','Cyprus','Chipre','Chypre','Zypern','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('cz ','Czech Republic','Republica Checa','Republique Tcheque','Tschechische Republik','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('de ','Germany','Alemania','Allemagne','Deutschland','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('dj ','Djibouti','Yibouti','Djibouti','Djibouti','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('dk ','Denmark','Dinamarca','Danemark','D√É¬§nemark','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('dm ','Dominica','Isla Dominica','Dominique (Ile)','Insel Dominica','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('do ','Dominican Republic','Republica Dominicana','Dominicaine (Republique)','Dominikanische Republik','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('dz ','Algeria','Argelia','Algerie','Algeria','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('ec ','Ecuador','Ecuador','Equateur','Ecuador','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('ee ','Estonia','Estonia','Estonie','Estland','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('eg ','Egypt','Egipto','Egypte','√É‚Äûgypten','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('eh ','Western Sahara','Sahara occidental','Sahara','WestcSahara','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('es ','Spain','Espa√É¬±a','Espagne','Spanien','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('et ','Ethiopia','Etiopia','Ethiopie ','√É‚Äûthiopien','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('fi ','Finland','Finlandia','Finlande','Finnland','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('fj ','Fiji Islands','Islas Fidji','Fidji (Iles)','Fidschi-Inseln','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('fk ','Falkland Islands','Islas Malvinas','Malouines (Iles)','Falklandinseln','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('fm ','Micronesia','Micronesia','Micronesie','Mikronesien','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('fo ','Faroe Islands','Islas Faroe','Feroe (Iles)','Inseln Faroe','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('fr ','France','Francia','France','Frankreich','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('ga ','Gabon','Gabon','Gabon','Gabun','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('gb ','Great Britain','Gran Breta√É¬±a','Grande Bretagne','Gro√É≈∏britannien','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('gd ','Grenada','Granada','Grenade','Grenada','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('ge ','Georgia','Georgia','Georgie','Georgia','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('gf ','French Guyana','Guyana Francesa','Guyana','Franz√É¬∂sisches Guyana','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('gh ','Ghana','Ghana','Ghana','Ghana','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('gi ','Gibraltar','Gibraltar','Gibraltar','Gibraltar','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('gl ','Greenland','Groenlandia','Groenland','Gr√É¬∂nland','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('gm ','Gambia','Gambia','Gambie','Gambia','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('gn ','Guinea','Guinea','Guinee','Guine','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('gp ','Guadeloupe (French)','Guadalupe','Guadeloupe','Guadeloupe ','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('gq ','Equatorial Guinea','Guinea Ecuatorial','Guinee Equatoriale','√É‚Äûquatoriale Guine','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('gr ','Greece','Grecia','Grece','Griechenland','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('gs ','S. Georgia & S. Sandwich Isls','Islas Sandwich','Sandwich (Iles)','SandwichcInseln','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('gt ','Guatemala','Guatemala','Guatemala','Guatemala','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('gu ','Guam (USA)','Guam (USA)','Guam (USA)','Guam (USA)','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('gw ','Guinea Bissau','Guinea Bissau','Guinee-Bissau','Guine Bissau','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('gy ','Guyana','Guyana','Guyane','Guyana','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('hk ','Hong Kong','Hong Kong','Hong Kong','Hong Kong','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('hm ','Heard and McDonald Islands','Islas Heard y McDonald','Heard et McDonald (Iles)','Heard und McDonald Inseln','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('hn ','Honduras','Honduras','Honduras','Honduras','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('hr ','Croatia','Croacia','Croatie','Croatia','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('ht ','Haiti','Haiti','Haiti','Haiti','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('hu ','Hungary','Hungr√É¬≠a','Hongrie','Ungarn','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('id ','Indonesia','Indonesia','L Indonesie','Indonesien','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('ie ','Ireland','Irlanda','Irlande','Irland','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('il ','Israel','Israel','Israel','Israel','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('in ','India','India','Inde','Indien','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('int','International','Internacional','Internationel','International','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('io ','British Indian Ocean Territor','Territorio indico oceanico britanico','Oc√É¬©an Indien Britannique Territor','Britischer Indischer Ozean Territor','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('iq ','Iraq','Irak','Irak','Der Irak','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('ir ','Iran','Iran','Iran','Der Iran','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('is ','Iceland','Islandia','Islande','Island','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('it ','Italy','Italia','Italie','Italien','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('jm ','Jamaica','Jamaica','Jamaique','Jamaika','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('jo ','Jordan','Jordania','Jordanie','Jordanien','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('jp ','Japan','Japon','Japon','Japan','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('ke ','Kenya','Kenia','Kenya','Kenia','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('kg ','Kyrgyz Republic (Kyrgyzstan)','Kyrgyzstan','Kyrgyzstan','Kyrgyzstan','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('kh ','Cambodia, Kingdom of','Camboya','Cambodge','Kambodscha','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('ki ','Kiribati','Kiribati','Kiribati','Kiribati','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('km ','Comoros','Comores','Comores','Comoren','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('kn ','Saint Kitts & Nevis Anguilla','San Kitts y Nevis Anguilla','Saint Kitts et Nevis Anguilla','Saint Kitts und Nevis Anguilla','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('kp ','North Korea','Corea del norte','Coree du Nord','NordcKorea','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('kr ','South Korea','Corea del sur','Coree du Sud','S√É¬ºdcKorea','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('kw ','Kuwait','Kuwait','Kuwait','Kuwait','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('ky ','Cayman Islands','Islas Caiman','Caiman (Iles)','Cayman-Inseln','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('kz ','Kazakhstan','Kazakhstan','Kazakhstan','Kazakhstan','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('la ','Laos','Laos','Laos','Laos','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('lb ','Lebanon','L√É¬≠bano','Lebanon','Der Libanon','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('lc ','Saint Lucia','Santa Lucia','Saint Lucia','Heiliger Lucia','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('li ','Liechtenstein','Liechtenstein','Liechtenstein','Liechtenstein','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('lk ','Sri Lanka','Sri Lanka','Sri Lanka','Sri Lanka','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('lr ','Liberia','Liberia','Le Lib√É¬©ria','Liberia','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('ls ','Lesotho','Lesotho','Lesotho','Lesotho','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('lt ','Lithuania','Lituania','Lithuanie','Litauen','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('lu ','Luxembourg','Luxemburgo','Luxembourg','Luxemburg','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('lv ','Latvia','Latvia','Latvia','Latvia','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('ly ','Libya','Libia','Libye','Libyen','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('ma ','Morocco','Marruecos','Maroc','Marokko','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('mc ','Monaco','Monaco','Monaco','Monaco','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('md ','Moldavia','Moldavia','Moldavia','Moldavia','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('mg ','Madagascar','Madagascar','Madagascar','Madagaskar','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('mh ','Marshall Islands','Islas Marshall','Les √É≈Ωles Marshall','Marshall Inseln','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('mk ','Macedonia','Macedonia','Macedonia','Macedonia','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('ml ','Mali','Mali','Mali','Mali','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('mm ','Myanmar','Myanmar','Myanmar','Myanmar','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('mn ','Mongolia','Mongolia','Mongolie','Mongolei','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('mo ','Macau','Macao','Macau','Macau','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('mp ','Northern Mariana Islands','Islas Marianas del Norte','Les Mariannes du Nord','NordcMarianacInseln','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('mq ','Martinique (French)','Martinica Francesa','Martinique','Martinique','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('mr ','Mauritania','Mauritania','Mauritanie','Mauretanien','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('ms ','Montserrat','Montserrat','Montserrat','Montserrat','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('mt ','Malta','Malta','Malte','Malta','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('mu ','Mauritius','Mauritius','Les √É¬Æles Maurice','Mauritius','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('mv ','Maldives','Maldivas','Les Maldives','Maldives','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('mw ','Malawi','Malawi','Malawi','Malawi','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('mx ','Mexico','M√É¬©jico','Mexique','Mexiko','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('my ','Malaysia','Malasia','Malaysia','Malaysia','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('mz ','Mozambique','Mozambique','Mozambique','Mosambik','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('na ','Namibia','Namibia','Namibie','Namibia','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('nc ','New Caledonia (French)','Nueva Caledonia','Nouveau Caledonia','Neues Caledonia','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('ne ','Niger','Nigeria','Niger','Niger','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('net','Network','Network','R√É¬©seau','Netz','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('ng ','Nigeria','Nigeria','Nig√É¬©ria','Nigeria','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('ni ','Nicaragua','Nicaragua','Nicaragua','Nicaragua','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('nl ','Netherlands','Paises Bajos','Les Hollandes','Die Niederlande','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('no ','Norway','Noruega','Norv√É¬®ge','Norwegen','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('np ','Nepal','Nepal','Nepal','Nepal','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('nr ','Nauru','Nauru','Nauru','Nauru','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('nt ','Neutral Zone','Zona Neutral','Zone Neutre','NullcZone','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('nu ','Niue','Niue','Niue','Niue','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('nz ','New Zealand','Nueva Zelanda','Nouvelle-Z√É¬©lande','Neues Seeland','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('om ','Oman','Oman','Oman','Oman','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('pa ','Panama','Panama','Panama','Panama','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('pe ','Peru','Per√É¬∫','Peru','Peru','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('pf ','Polynesia (French)','Polinesia Francesa','Polynesia','Polynesia','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('pg ','Papua New Guinea','Papua Nueva Guinea','Papouasie Nouvelle-Guin√É¬©e','Papua Neu-Guinea','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('ph ','Philippines','Filipinas','Philippines','Philippinen','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('pk ','Pakistan','Pakistan','Pakistan','Pakistan','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('pl ','Poland','Polonia','Pologne','Polen','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('pm ','Saint Pierre and Miquelon','San Piero','Saint Pierre et Miquelon','Saint Pierre und Miquelon','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('pn ','Pitcairn Island','Isla Pitcarirn','√É≈Ωle De Pitcairn','Insel Pitcairn','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('pr ','Puerto Rico','Puerto Rico','Puerto Rico','Puerto Rico','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('pt ','Portugal','Portugal','Portugal','Portugal','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('pw ','Palau','Palau','Palau','Palau','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('py ','Paraguay','Paraguay','Paraguay','Paraguay','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('qa ','Qatar','Qatar','Qatar','Qatar','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('ro ','Romania','Romania','Roumanie','Rum√É¬§nien','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('ru ','Russian Federation','Rusia','F√É¬©d√É¬©ration Russe','Russische Vereinigung','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('rw ','Rwanda','Ruanda','Rwanda','Ruanda','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('sa ','Saudi Arabia','Arabia Saudi','Arabie Saoudite','Saudi Arabien','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('sb ','Solomon Islands','Islas Salomon','√É≈Ωles Salomon','Inseln Solomon','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('sc ','Seychelles','Seychelles','Seychelles','Seychelles','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('sd ','Sudan','Sudan','Sudan','Sudan','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('se ','Sweden','Suecia','Su√É¬®de','Schweden','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('sg ','Singapore','Singapur','Singapour','Singapur','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('si ','Slovenia','Eslovenia','Slov√É¬©nie','Slowenien','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('sj ','Svalbard and Jan Mayen Island','Isla Svalbard y Jan Mayen','√É≈Ωle Svalbard et Jan Mayen','Insel Svalbard und Jan Mayen','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('sk ','Slovak Republic','Republica Eslovaca','R√É¬©publique Slovaque','Slowakische Republik','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('sl ','Sierra Leone','Sierra Leona','Sierra Leone','Sierra Leone','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('sm ','San Marino','San Marino','San Marino','San Marino','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('sn ','Senegal','Senegal','S√É¬©n√É¬©gal','Senegal','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('so ','Somalia','Somalia','Somalie','Somalia','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('sr ','Suriname','Surinam','Suriname','Suriname','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('st ','Saint Tome','Santo Tome','Tome De Saint','HeiligTome','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('su ','Former USSR','Union Sovietica','Union Sovi√É¬©tique','Sowjetischer Anschlu√É≈∏','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('sv ','El Salvador','El Salvador','El Salvador','El Salvador','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('sy ','Syria','Siria','Syrie','Syrien','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('sz ','Swaziland','Swazilandia','Souaziland','Swasiland','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('tc ','Turks and Caicos Islands','Islas Caicos','√É≈Ωles Turks et Caicos','T√É¬ºrken und Caicosinseln','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('td ','Chad','Chad','Chad','Chad','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('tf ','French Southern Territories','Territorios Franceses del sur','Territoires M√É¬©ridionaux Fran√É¬ßais','Franz√É¬∂sische S√É¬ºdliche Gegenden','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('tg ','Togo','Togo','Togo','Togo','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('th ','Thailand','Tailandia','Tha√É¬Ølande','Thailand','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('tj ','Tadjikistan','Tadyikistan','Tadjikistan','Tadjikistan','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('tk ','Tokelau','Tokelau','Tokelau','Tokelau','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('tm ','Turkmenistan','Turkmenistan','Turkmenistan','Turkmenistan','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('tn ','Tunisia','Tunicia','Tunisie','Tunesien','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('to ','Tonga','Tonga','Tonga','Tonga','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('tp ','East Timor','Timor Oriental','Timor Est','OstTimor','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('tr ','Turkey','Turquia','Turquie','Die T√É¬ºrkei','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('tt ','Trinidad and Tobago','Trinidad y Tobago','Trinint√É¬©-et-Tobago','Trinidad und Tobago','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('tv ','Tuvalu','Tuvalu','Tuvalu','Tuvalu','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('tw ','Taiwan','Taiwan','Taiwan','Taiwan','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('tz ','Tanzania','Tanzania','Tanzanie','Tanzania','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('ua ','Ukraine','Ucrania','Ukraine','Ukraine','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('ug ','Uganda','Uganda','Ouganda','Uganda','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('uk ','United Kingdom','Reino Unido','Royaume Uni','Vereinigtes K√É¬∂nigreich','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('um ','USA Minor Outlying Islands','Islas menores estadounidenses','√É≈Ωles P√É¬©riph√É¬©riques Mineures des Etats-Unis','Kleine Nebens√É¬§chliche Inseln USA','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('us ','United States','Estados Unidos','Etats-Unis','Vereinigte Staaten','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('uy ','Uruguay','Uruguay','Uruguay','Uruguay','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('uz ','Uzbekistan','Uzbekistan','Uzbekistan','Uzbekistan','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('va ','Holy See (Vatican City State)','Ciudad del Vaticano','Saint-si√É¬®ge','Heilig Sehen Sie (Vatican)','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('vc ','Saint Vincent & Grenadines','San Vicente','Saint Vincent et Grenadines','Saint Vincent und Grenadines','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('ve ','Venezuela','Venezuela','Venezuela','Venezuela','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('vg ','Virgin Islands (British)','Islas Virgenes (UK)','Les √É≈Ωles Vierges (UK)','JungfraucInseln (UK)','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('vi ','Virgin Islands (USA)','Islas Virgenes (USA)','Les √É≈Ωles Vierges (USA)','JungfraucInseln (USA)','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('vn ','Vietnam','Vietnam','Vietnam','Vietnam','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('vu ','Vanuatu','Vanuatu','Vanuatu','Vanuatu','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('wf ','Wallis and Futuna Islands','Islas Wallis','√É≈Ωlles Wallis et Futuna','Inseln Wallis und Futuna','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('ws ','Samoa','Samoa','amoa','Samoa-Inseln','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('ye ','Yemen','Yemen','Y√É¬©men','Yemen','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('yt ','Mayotte','Mayotte','Mayotte','Mayotte','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('yu ','Yugoslavia','Yugoslavia','Yougoslavie','Jugoslawien','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('za ','South Africa','Surafrica','L Afrique du Sud','S√É¬ºdcAfrika','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('zm ','Zambia','Zambia','Zambie','Sambia','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('zr ','Zaire','Zaire','Za√É¬Øre','Zaire','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_lu_countries
VALUES('zw ','Zimbabwe','Zimbabwe','Zimbabwe','Zimbabwe','','','','','','','','','','','','','','','','','','','');

--@FIN_BLOQUE
CREATE TABLE tbl_crmk_contacts
(
  gu_contact character(32) NOT NULL,
  gu_workarea character(32) NOT NULL,
  dt_created timestamp without time zone DEFAULT now(),
  bo_restricted smallint DEFAULT 0,
  bo_private smallint DEFAULT 0,
  nu_notes integer DEFAULT 0,
  nu_attachs integer DEFAULT 0,
  bo_change_pwd smallint DEFAULT 1,
  tx_nickname character varying(100),
  tx_pwd character varying(50),
  tx_challenge character varying(100),
  tx_reply character varying(100),
  dt_pwd_expires timestamp without time zone,
  dt_modified timestamp without time zone,
  gu_writer character(32),
  gu_company character(32),
  id_batch character varying(32),
  id_status character varying(30),
  id_ref character varying(50),
  id_fare character varying(32),
  id_bpartner character varying(32),
  tx_name character varying(100),
  tx_surname character varying(100),
  de_title character varying(70),
  id_gender character(1),
  dt_birth timestamp without time zone,
  ny_age smallint,
  id_nationality character(3),
  sn_passport character varying(16),
  tp_passport character varying(30),
  sn_drivelic character varying(16),
  dt_drivelic timestamp without time zone,
  tx_dept character varying(70),
  tx_division character varying(70),
  gu_geozone character(32),
  gu_sales_man character(32),
  tx_comments character varying(254),
  url_linkedin character varying(254),
  url_facebook character varying(254),
  url_twitter character varying(254),
  CONSTRAINT pk_contacts PRIMARY KEY (gu_contact),
  CONSTRAINT f1_contacts FOREIGN KEY (gu_workarea)
      REFERENCES tbl_crmk_workareas (gu_workarea) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION,
  CONSTRAINT f2_contacts FOREIGN KEY (gu_company)
      REFERENCES tbl_crmk_companies (gu_company) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION,
  CONSTRAINT f3_contacts FOREIGN KEY (gu_writer)
      REFERENCES tbl_crmk_users (gu_user) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION,
  CONSTRAINT f4_contacts FOREIGN KEY (gu_geozone)
      REFERENCES tbl_crmk_thesauri (gu_term) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION,
  CONSTRAINT f5_contacts FOREIGN KEY (id_nationality)
      REFERENCES tbl_crmk_lu_countries (id_country) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION,
  CONSTRAINT c1_contacts CHECK (tx_name IS NULL OR char_length(tx_name::text) > 0),
  CONSTRAINT c2_contacts CHECK (tx_surname IS NULL OR char_length(tx_surname::text) > 0),
  CONSTRAINT c3_contacts CHECK (id_ref IS NULL OR char_length(id_ref::text) > 0),
  CONSTRAINT c4_contacts CHECK (de_title IS NULL OR char_length(de_title::text) > 0)
);

--@FIN_BLOQUE
CREATE TABLE tbl_crmk_campaigns
(
  gu_campaign character(32) NOT NULL,
  gu_workarea character(32) NOT NULL,
  nm_campaign character varying(70) NOT NULL,
  dt_created timestamp without time zone DEFAULT now(),
  bo_active smallint DEFAULT 1,
  CONSTRAINT pk_campaigns PRIMARY KEY (gu_campaign),
  CONSTRAINT f1_campaign FOREIGN KEY (gu_workarea)
      REFERENCES tbl_crmk_workareas (gu_workarea) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION,
  CONSTRAINT u1_campaigns UNIQUE (gu_workarea, nm_campaign)
);

--@FIN_BLOQUE
CREATE TABLE tbl_crmk_oportunities
(
  gu_oportunity character(32) NOT NULL,
  gu_writer character(32),
  gu_workarea character(32) NOT NULL,
  bo_private smallint NOT NULL,
  dt_created timestamp without time zone DEFAULT now(),
  dt_modified timestamp without time zone,
  dt_next_action timestamp without time zone,
  dt_last_call timestamp without time zone,
  lv_interest smallint,
  nu_oportunities integer DEFAULT 1,
  gu_campaign character(32),
  gu_company character(32),
  gu_contact character(32),
  tx_company character varying(70),
  tx_contact character varying(200),
  tl_oportunity character varying(128),
  tp_oportunity character varying(50),
  tp_origin character varying(50),
  im_revenue double precision,
  im_cost double precision,
  id_status character varying(50),
  id_objetive character varying(50),
  id_message character varying(254),
  tx_cause character varying(250),
  tx_note character varying(1000),
  CONSTRAINT pk_oportunities PRIMARY KEY (gu_oportunity),
  CONSTRAINT f1_oportunities FOREIGN KEY (gu_writer)
      REFERENCES tbl_crmk_users (gu_user) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION,
  CONSTRAINT f2_oportunities FOREIGN KEY (gu_company)
      REFERENCES tbl_crmk_companies (gu_company) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION,
  CONSTRAINT f3_oportunities FOREIGN KEY (gu_contact)
      REFERENCES tbl_crmk_contacts (gu_contact) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION,
  CONSTRAINT f4_oportunities FOREIGN KEY (gu_campaign)
      REFERENCES tbl_crmk_campaigns (gu_campaign) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION,
  CONSTRAINT c3_oportunities CHECK (gu_company IS NOT NULL OR gu_contact IS NOT NULL),
  CONSTRAINT c4_oportunities CHECK (tx_company IS NULL OR char_length(tx_company::text) > 0),
  CONSTRAINT c5_oportunities CHECK (tx_contact IS NULL OR char_length(tx_contact::text) > 0),
  CONSTRAINT c6_oportunities CHECK (tl_oportunity IS NULL OR char_length(tl_oportunity::text) > 0),
  CONSTRAINT c7_oportunities CHECK (tx_note IS NULL OR char_length(tx_note::text) > 0)
);

--@FIN_BLOQUE
CREATE TABLE tbl_crmk_companies_lookup
(
  id_section character varying(30) NOT NULL,
  pg_lookup integer NOT NULL,
  vl_lookup character varying(255),
  tr_es character varying(50),
  tr_en character varying(50),
  tr_de character varying(50),
  tr_it character varying(50),
  tr_fr character varying(50),
  tr_pt character varying(50),
  tr_ca character varying(50),
  tr_eu character varying(50),
  tr_ja character varying(50),
  tr_cn character varying(50),
  tr_tw character varying(50),
  tr_fi character varying(50),
  tr_ru character varying(50),
  tr_nl character varying(50),
  tr_th character varying(50),
  tr_cs character varying(50),
  tr_uk character varying(50),
  tr_no character varying(50),
  tr_ko character varying(50),
  tr_sk character varying(50),
  tr_pl character varying(50),
  tr_vn character varying(50),
  CONSTRAINT pk_companies_lookup PRIMARY KEY (id_section, pg_lookup),
  CONSTRAINT u1_companies_lookup UNIQUE (id_section, vl_lookup)
);

--@FIN_BLOQUE
insert into tbl_crmk_companies_lookup
values('id_status',1,'Activa','Activa','Active','Aktiv','Attiva','Actif','','','','','√¶¬¥¬ª√•≈†¬®','√¶¬¥¬ª√•‚Äπ‚Ä¢','','√ê¬ê√ê¬∫√ë‚Äö√ê¬∏√ê¬≤√ê¬Ω√ë‚Äπ√ê¬π','','','','','','','','','');
insert into tbl_crmk_companies_lookup
values('id_status',2,'Disuelta','Disuelta','Disolved','Aufgeloest','DISSOLTA','Dissoute','','','','','√¶‚Äî¬†√®¬ß¬£','√ß‚Äû¬°√®¬ß¬£','','√ê¬†√ê¬∞√ë¬Å√ë‚Äö√ê¬æ√ë‚Ç¨√ê¬≥√ê¬Ω√ë∆í√ë‚Äö√ê¬æ','','','','','','','','','');
insert into tbl_crmk_companies_lookup
values('tp_company',1,'Cliente','Cliente','Customer','Klient','CLIENTE','Client','','','','','√•¬Æ¬¢√¶ÀÜ¬∑','√•¬Æ¬¢√¶ÀÜ¬∂','','√ê≈°√ê¬ª√ê¬∏√ê¬µ√ê¬Ω√ë‚Äö','','','','','','','','','');
insert into tbl_crmk_companies_lookup
values('tp_company',2,'Proveedor','Proveedor','Suplier','Anbieter','Fornitore','Fournisseur','','','','','√§¬æ‚Ä∫√®¬¥¬ß√•‚Ä¢‚Ä†','√§¬æ‚Ä∫√¶‚Ä°‚Ä∞√•‚Ä¢‚Ä†','','√ê≈∏√ê¬æ√ë¬Å√ë‚Äö√ê¬∞√ê¬≤√ë‚Ä∞√ê¬∏√ê¬∫','','','','','','','','','');
insert into tbl_crmk_companies_lookup
values('tp_company',3,'Cliente Potencial','Cliente Potencial','Potential Customer','Potentioneller Klient','Cliente Potenziale','Client Potentiel','','','','','√¶¬Ω≈ì√•≈ì¬®√•¬Æ¬¢√¶ÀÜ¬∑','√¶¬Ω‚Ä∫√•≈ì¬®√•¬Æ¬¢√¶ÀÜ¬∂','','√ê≈∏√ê¬æ√ë‚Äö√ê¬µ√ê¬Ω√ë‚Ä†√ê¬∏√ê¬∞√ê¬ª√ë≈í√ê¬Ω√ë‚Äπ√ê¬π √ê≈°√ê¬ª√ê¬∏√ê¬µ√ê¬Ω√ë‚Äö','','','','','','','','','');
insert into tbl_crmk_companies_lookup
values('tp_company',4,'Posible Proveedor','Posible Proveedor','Potential Suplier','Potentioneller Anbieter','Fornitore Potenziale','Fournisseur Potentiel','','','','','√§¬æ‚Ä∫√®¬¥¬ß√•‚Ä¢‚Ä†','√§¬æ‚Ä∫√¶‚Ä°‚Ä∞√•‚Ä¢‚Ä†','','√ê≈∏√ê¬æ√ë¬Å√ë‚Äö√ê¬∞√ê¬≤√ë‚Ä∞√ê¬∏√ê¬∫','','','','','','','','','');
insert into tbl_crmk_companies_lookup
values('tp_company',5,'Asociado','Asociado','Partner','Partner','Partner','Partenaire','','','','','√§¬º‚Ñ¢√§¬º¬¥','√•¬§¬•√§¬º¬¥','','√ê≈∏√ê¬∞√ë‚Ç¨√ë‚Äö√ê¬Ω√ë‚Äò√ë‚Ç¨','','','','','','','','','');
insert into tbl_crmk_companies_lookup
values('tp_company',6,'Competencia','Competencia','Competitor','Konkurrent','Concorrenza','Concurrent','','','','','√ß¬´≈æ√§¬∫‚Ä∞√®‚Ç¨‚Ä¶','√ß¬´¬∂√ßÀÜ¬≠√®‚Ç¨‚Ä¶','','√ê≈°√ê¬æ√ê¬Ω√ê¬∫√ë∆í√ë‚Ç¨√ê¬µ√ê¬Ω√ë‚Äö','','','','','','','','','');
insert into tbl_crmk_companies_lookup
values('id_sector',1,'Agricultura','Agricultura','','','','','','','','','','','','','','','','','','','','','');
insert into tbl_crmk_companies_lookup
values('id_sector',2,'Ganaderia','Ganader√É¬≠a','','','','','','','','','','','','','','','','','','','','','');
insert into tbl_crmk_companies_lookup
values('id_sector',3,'Silvicultura','Silvicultura','','','','','','','','','','','','','','','','','','','','','');
insert into tbl_crmk_companies_lookup
values('id_sector',4,'Pesca','Pesca','','','','','','','','','','','','','','','','','','','','','');
insert into tbl_crmk_companies_lookup
values('id_sector',5,'Mineria','Miner√É¬≠a','','','','','','','','','','','','','','','','','','','','','');
insert into tbl_crmk_companies_lookup
values('id_sector',6,'Petrolero','Petrolero','','','','','','','','','','','','','','','','','','','','','');
insert into tbl_crmk_companies_lookup
values('id_sector',7,'Automotriz','Automotriz','','','','','','','','','','','','','','','','','','','','','');
insert into tbl_crmk_companies_lookup
values('id_sector',8,'Construccion','Construcci√É¬≥n','','','','','','','','','','','','','','','','','','','','','');
insert into tbl_crmk_companies_lookup
values('id_sector',9,'Alimentos','Alimentos','','','','','','','','','','','','','','','','','','','','','');
insert into tbl_crmk_companies_lookup
values('id_sector',10,'Tabacalera','Tabacalera','','','','','','','','','','','','','','','','','','','','','');
insert into tbl_crmk_companies_lookup
values('id_sector',11,'Petroquimica','Petroqu√É¬≠mica','','','','','','','','','','','','','','','','','','','','','');
insert into tbl_crmk_companies_lookup
values('id_sector',12,'Mueblero','Mueblero','','','','','','','','','','','','','','','','','','','','','');
insert into tbl_crmk_companies_lookup
values('id_sector',13,'Madera','Madera','','','','','','','','','','','','','','','','','','','','','');
insert into tbl_crmk_companies_lookup
values('id_sector',14,'Textil','Textil','','','','','','','','','','','','','','','','','','','','','');
insert into tbl_crmk_companies_lookup
values('id_sector',15,'Vidrio','Vidrio','','','','','','','','','','','','','','','','','','','','','');
insert into tbl_crmk_companies_lookup
values('id_sector',16,'Electrodomesticos','Electrodom√É¬©sticos','','','','','','','','','','','','','','','','','','','','','');
insert into tbl_crmk_companies_lookup
values('id_sector',17,'Electricidad y Electronica','Electricidad y Electr√É¬≥nica','','','','','','','','','','','','','','','','','','','','','');
insert into tbl_crmk_companies_lookup
values('id_sector',18,'Papel','Papel','','','','','','','','','','','','','','','','','','','','','');
insert into tbl_crmk_companies_lookup
values('id_sector',19,'Comercio','Comercio','','','','','','','','','','','','','','','','','','','','','');
insert into tbl_crmk_companies_lookup
values('id_sector',20,'Restaurantero','Restaurantero','','','','','','','','','','','','','','','','','','','','','');
insert into tbl_crmk_companies_lookup
values('id_sector',21,'Hoteleria','Hoteler√É¬≠a','','','','','','','','','','','','','','','','','','','','','');
insert into tbl_crmk_companies_lookup
values('id_sector',22,'Transporte','Transporte','','','','','','','','','','','','','','','','','','','','','');
insert into tbl_crmk_companies_lookup
values('id_sector',23,'Comunicaciones','Comunicaciones','','','','','','','','','','','','','','','','','','','','','');
insert into tbl_crmk_companies_lookup
values('id_sector',24,'Arrendamiento','Arrendamiento','','','','','','','','','','','','','','','','','','','','','');
insert into tbl_crmk_companies_lookup
values('id_sector',25,'Servicios Financieros','Servicios Financieros','','','','','','','','','','','','','','','','','','','','','');
insert into tbl_crmk_companies_lookup
values('id_sector',26,'Servicios Profesionales','Servicios Profesionales','','','','','','','','','','','','','','','','','','','','','');
insert into tbl_crmk_companies_lookup
values('id_sector',27,'Servicios Educactivos','Servicios Educativos','','','','','','','','','','','','','','','','','','','','','');
insert into tbl_crmk_companies_lookup
values('id_sector',28,'Servicios Medicos','Servicios M√É¬©dicos','','','','','','','','','','','','','','','','','','','','','');
insert into tbl_crmk_companies_lookup
values('id_sector',29,'Servicios Gubernamentales','Servicios Gubernamentales','','','','','','','','','','','','','','','','','','','','','');
insert into tbl_crmk_companies_lookup
values('id_sector',30,'Otro Sector','Otro Sector','','','','','','','','','','','','','','','','','','','','','');

--@FIN_BLOQUE
INSERT INTO tbl_usuarios_permisos_catalogo
VALUES ('CRM');

INSERT INTO tbl_usuarios_permisos_catalogo
VALUES ('CRM_COMPANIAS');

INSERT INTO tbl_usuarios_permisos_catalogo
VALUES ('CRM_COMPANIAS_GESTIONAR');

INSERT INTO tbl_usuarios_permisos_catalogo
VALUES ('CRM_COMPANIAS_ELIMINAR');

--@FIN_BLOQUE
CREATE TABLE tbl_crmk_contacts_lookup
(
  id_section character varying(30) NOT NULL,
  pg_lookup integer NOT NULL,
  vl_lookup character varying(255),
  tr_es character varying(50),
  tr_en character varying(50),
  tr_de character varying(50),
  tr_it character varying(50),
  tr_fr character varying(50),
  tr_pt character varying(50),
  tr_ca character varying(50),
  tr_eu character varying(50),
  tr_ja character varying(50),
  tr_cn character varying(50),
  tr_tw character varying(50),
  tr_fi character varying(50),
  tr_ru character varying(50),
  tr_nl character varying(50),
  tr_th character varying(50),
  tr_cs character varying(50),
  tr_uk character varying(50),
  tr_no character varying(50),
  tr_ko character varying(50),
  tr_sk character varying(50),
  tr_pl character varying(50),
  tr_vn character varying(50),
  CONSTRAINT pk_contacts_lookup PRIMARY KEY (id_section, pg_lookup),
  CONSTRAINT u1_contacts_lookup UNIQUE (id_section, vl_lookup)
);

--@FIN_BLOQUE
insert into tbl_crmk_contacts_lookup
values('id_status',1,'Activo','Activo','','','','','','','','','','','','','','','','','','','','','');
insert into tbl_crmk_contacts_lookup
values('id_status',2,'Eventual','Eventual','','','','','','','','','','','','','','','','','','','','','');
insert into tbl_crmk_contacts_lookup
values('id_status',3,'Jubulado','Jubilado','','','','','','','','','','','','','','','','','','','','','');
insert into tbl_crmk_contacts_lookup
values('id_status',4,'Desempleado','Desempleado','','','','','','','','','','','','','','','','','','','','','');
insert into tbl_crmk_contacts_lookup
values('id_status',5,'Inactivo','Inactivo','','','','','','','','','','','','','','','','','','','','','');
insert into tbl_crmk_contacts_lookup
values('id_status',6,'No Apto','No Apto','','','','','','','','','','','','','','','','','','','','','');
insert into tbl_crmk_contacts_lookup
values('id_status',7,'Finado','Finado','','','','','','','','','','','','','','','','','','','','','');

insert into tbl_crmk_contacts_lookup
values('de_title',1,'Licenciatura','Licenciatura','','','','','','','','','','','','','','','','','','','','','');
insert into tbl_crmk_contacts_lookup
values('de_title',2,'Post-Grado','Post-Grado','','','','','','','','','','','','','','','','','','','','','');
insert into tbl_crmk_contacts_lookup
values('de_title',3,'Maestria','Maestr√É¬≠a','','','','','','','','','','','','','','','','','','','','','');
insert into tbl_crmk_contacts_lookup
values('de_title',4,'Doctorado','Doctorado','','','','','','','','','','','','','','','','','','','','','');
insert into tbl_crmk_contacts_lookup
values('de_title',5,'Medio Superior','Medio Superior','','','','','','','','','','','','','','','','','','','','','');
insert into tbl_crmk_contacts_lookup
values('de_title',6,'Secundaria','Secundaria','','','','','','','','','','','','','','','','','','','','','');
insert into tbl_crmk_contacts_lookup
values('de_title',7,'Primaria','Primaria','','','','','','','','','','','','','','','','','','','','','');
insert into tbl_crmk_contacts_lookup
values('de_title',8,'Preescolar','Preescolar','','','','','','','','','','','','','','','','','','','','','');
insert into tbl_crmk_contacts_lookup
values('de_title',9,'Ninguno','Ninguno','','','','','','','','','','','','','','','','','','','','','');

insert into tbl_crmk_contacts_lookup
values('tp_passport',1,'IFE','IFE','','','','','','','','','','','','','','','','','','','','','');
insert into tbl_crmk_contacts_lookup
values('tp_passport',2,'Licencia','Licencia','','','','','','','','','','','','','','','','','','','','','');
insert into tbl_crmk_contacts_lookup
values('tp_passport',3,'Pasaporte','Pasaporte','','','','','','','','','','','','','','','','','','','','','');
insert into tbl_crmk_contacts_lookup
values('tp_passport',4,'Cartilla','Cartilla','','','','','','','','','','','','','','','','','','','','','');
insert into tbl_crmk_contacts_lookup
values('tp_passport',5,'Cedula','C√É¬©dula','','','','','','','','','','','','','','','','','','','','','');
insert into tbl_crmk_contacts_lookup
values('tp_passport',6,'INSEN','INSEN','','','','','','','','','','','','','','','','','','','','','');
insert into tbl_crmk_contacts_lookup
values('tp_passport',7,'Otro','Otro','','','','','','','','','','','','','','','','','','','','','');

--@FIN_BLOQUE
INSERT INTO tbl_usuarios_permisos_catalogo
VALUES ('CRM_PERSONAS');

INSERT INTO tbl_usuarios_permisos_catalogo
VALUES ('CRM_PERSONAS_GESTIONAR');

INSERT INTO tbl_usuarios_permisos_catalogo
VALUES ('CRM_PERSONAS_ELIMINAR');

--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_crmv_contact_list AS 
 SELECT c.gu_contact, c.gu_workarea, c.id_status, (COALESCE(c.tx_name, ''::character varying)::text || ' '::text) || COALESCE(c.tx_surname, ''::character varying)::text AS full_name, COALESCE(l.tr_es, ''::character varying) AS tr_es, l.tr_en, l.tr_fr, l.tr_de, l.tr_it, l.tr_pt, l.tr_ja, l.tr_cn, l.tr_tw, l.tr_ca, l.tr_eu, d.gu_company, COALESCE(d.nm_legal, ''::character varying) AS nm_legal, c.nu_notes, c.nu_attachs, c.dt_modified, c.bo_private, c.gu_writer, c.bo_restricted, c.gu_geozone, c.gu_sales_man, c.id_batch, c.id_ref
   FROM tbl_crmk_contacts c
   LEFT JOIN tbl_crmk_companies d ON c.gu_company = d.gu_company
   LEFT JOIN tbl_crmk_contacts_lookup l ON l.vl_lookup::text = c.de_title::text
  WHERE l.id_section::text = 'de_title'::text OR l.id_section IS NULL;

--@FIN_BLOQUE
CREATE TABLE tbl_crmk_oportunities_lookup
(
  id_section character varying(30) NOT NULL,
  pg_lookup integer NOT NULL,
  vl_lookup character varying(255),
  tp_lookup character varying(50),
  bo_active smallint,
  tx_comments character varying(255),
  tr_es character varying(50),
  tr_en character varying(50),
  tr_de character varying(50),
  tr_it character varying(50),
  tr_fr character varying(50),
  tr_pt character varying(50),
  tr_ca character varying(50),
  tr_eu character varying(50),
  tr_ja character varying(50),
  tr_cn character varying(50),
  tr_tw character varying(50),
  tr_fi character varying(50),
  tr_ru character varying(50),
  tr_nl character varying(50),
  tr_th character varying(50),
  tr_cs character varying(50),
  tr_uk character varying(50),
  tr_no character varying(50),
  tr_ko character varying(50),
  tr_sk character varying(50),
  tr_pl character varying(50),
  tr_vn character varying(50),
  CONSTRAINT pk_oportunities_lookup PRIMARY KEY (id_section, pg_lookup),
  CONSTRAINT u1_oportunities_lookup UNIQUE (id_section, vl_lookup)
);

--@FIN_BLOQUE
INSERT INTO tbl_crmk_oportunities_lookup
VALUES('id_status',1,'Nueva','',null,'','Nueva','New','#de#New','Nuova','Nouveau','#pt#New','#ca#New','#eu#New','#ja#New','√¶‚Äì¬∞√•¬¢≈æ','√¶‚Äì¬∞√•¬¢≈æ','','√ê¬ù√ê¬æ√ê¬≤√ë‚Äπ√ê¬π','','','','','','','','','');
INSERT INTO tbl_crmk_oportunities_lookup
VALUES('id_status',2,'Abierta','',null,'','Abierta','Open','#de#Open','Aperta','Ouvert','#pt#Open','#ca#Open','#eu#Open','#ja#Open','√•¬º‚Ç¨√•¬ê¬Ø','√©‚Äì‚Äπ√•‚Ä¢≈∏','','√ê≈æ√ë‚Äö√ê¬∫√ë‚Ç¨√ë‚Äπ√ë‚Äö√ë≈í','','','','','','','','','');
INSERT INTO tbl_crmk_oportunities_lookup
VALUES('id_status',3,'Aplazada','',null,'','Aplazada','Posponed','#de#Posponed','Postposta','Report√É¬©','#pt#Posponed','#ca#Posponed','#eu#Posponed','#ja#Posponed','√•¬ª¬∂√¶≈ì≈∏','√•¬ª¬∂√¶≈ì≈∏','','√ê≈æ√ë‚Äö√ê¬ª√ê¬æ√ê¬∂√ê¬µ√ê¬Ω','','','','','','','','','');
INSERT INTO tbl_crmk_oportunities_lookup
VALUES('id_status',4,'Perdida','',null,'','Perdida','Lost','#de#Lost','Persa','Perdu','#pt#Lost','#ca#Lost','#eu#Lost','#ja#Lost','√©¬Å‚Äî√•¬§¬±','√©¬Å¬∫√•¬§¬±','','√ê¬£√ë‚Äö√ê¬µ√ë‚Ç¨√ë¬è√ê¬Ω','','','','','','','','','');
INSERT INTO tbl_crmk_oportunities_lookup
VALUES('id_status',5,'Ganada','',null,'','Ganada','Won','#de#Won','Vinta','Gagn√É¬©','#pt#Won','#ca#Won','#eu#Won','#ja#Won','√¶‚Äπ¬•√¶≈ì‚Ä∞','√¶‚Äú¬Å√¶≈ì‚Ä∞','','√ê‚Äô√ë‚Äπ√ê¬π√ê¬≥√ë‚Ç¨√ê¬∞√ê¬Ω','','','','','','','','','');
INSERT INTO tbl_crmk_oportunities_lookup
VALUES('id_status',6,'Abandonada','',null,'','Abandonada','Abandoned','#de#Abandoned','Abbandonata','Abandonn√É¬©','#pt#Abandoned','#ca#Abandoned','#eu#Abandoned','#ja#Abandoned','√¶‚Äù¬æ√•¬º∆í','√¶‚Äù¬æ√¶¬£‚Äû','','√ê≈∏√ê¬æ√ê¬∫√ê¬∏√ê¬Ω√ë∆í√ë‚Äö','','','','','','','','','');
INSERT INTO tbl_crmk_oportunities_lookup
VALUES('tx_cause',1,'Vendida','',null,'','Vendida','Sold','#de#Sold','Venduto','Vendu','#pt#Sold','#ca#Sold','#eu#Sold','#ja#Sold','√•‚Äù¬Æ√•‚Ä°¬∫','√•‚Äù¬Æ√•‚Ä°¬∫','','#ru#Sold','','','','','','','','','');
INSERT INTO tbl_crmk_oportunities_lookup
VALUES('tx_cause',2,'Cliente no interesado','',null,'','Cliente no interesado','Customer not interested','#de#Customer not interested','Cliente disinteressato','Client non int√É¬©ress√É¬©','#pt#Customer not interested','#ca#Customer not interested','#eu#Customer not interested','#ja#Customer not interested','√•¬Æ¬¢√¶ÀÜ¬∑√§¬∏¬ç√•‚Äì≈ì√¶¬¨¬¢','√•¬Æ¬¢√¶ÀÜ¬∂√§¬∏¬ç√•‚Äì≈ì√¶¬≠¬°','','√ê≈°√ê¬ª√ê¬∏√ê¬µ√ê¬Ω√ë‚Äö √ê¬Ω√ê¬µ √ê¬∑√ê¬∞√ê¬∏√ê¬Ω√ë‚Äö√ê¬µ√ë‚Ç¨√ê¬µ√ë¬Å√ê¬æ√ê¬≤√ê¬∞√ê¬Ω','','','','','','','','','');
INSERT INTO tbl_crmk_oportunities_lookup
VALUES('tx_cause',3,'Robada por la competencia','',null,'','Robada por la competencia','Given to competition','#de#Given to competition','Data alla concorrenza','Attribu√É¬© √É¬† la concurrence','#pt#Given to competition','#ca#Given to competition','#eu#Given to competition','#ja#Given to competition','√ß¬ª‚Ñ¢√ß¬´≈æ√§¬∫‚Ä∞√®‚Ç¨‚Ä¶','√ß¬µ¬¶√ß¬´¬∂√ßÀÜ¬≠√®‚Ç¨‚Ä¶','','√ê‚Äù√ê¬∞√ê¬Ω √ê¬Ω√ê¬∞ √ê¬∫√ê¬æ√ê¬Ω√ê¬∫√ë∆í√ë‚Ç¨√ë¬Å','','','','','','','','','');
INSERT INTO tbl_crmk_oportunities_lookup
VALUES('tx_cause',4,'Precio elevado','',null,'','Precio elevado','Price too high','#de#Price too high','Prezzo troppo alto','Prix trop √É¬©lev√É¬©','#pt#Price too high','#ca#Price too high','#eu#Price too high','#ja#Price too high','√§¬ª¬∑√©‚Äô¬±√•¬§¬™√©¬´Àú','√•∆í¬π√©≈í¬¢√•¬§¬™√©¬´Àú ','','√ê¬°√ê¬ª√ê¬∏√ëÀÜ√ê¬∫√ê¬æ√ê¬º √ê¬≤√ë‚Äπ√ë¬Å√ê¬æ√ê¬∫√ê¬∞√ë¬è √ë‚Ä†√ê¬µ√ê¬Ω√ê¬∞','','','','','','','','','');
INSERT INTO tbl_crmk_oportunities_lookup
VALUES('tx_cause',5,'Riesgo financiero','',null,'','Riesgo financiero','Finnacial Risk','#de#Finnancial risk','Rischi finanziari','Risque Financi√É¬©','#pt#Finnancial risk','#ca#Finnancial risk','#eu#Finnancial risk','#ja#Finnancial risk','√®¬¥¬¢√•≈†¬°√•¬ç¬±√¶≈ì¬∫','√®¬≤¬°√•‚Äπ‚Ñ¢√•¬ç¬±√¶¬©≈∏','','√ê¬§√ê¬∏√ê¬Ω√ê¬∞√ê¬Ω√ë¬Å√ê¬æ√ê¬≤√ë‚Äπ√ê¬π √ë‚Ç¨√ê¬∏√ë¬Å√ê¬∫','','','','','','','','','');
INSERT INTO tbl_crmk_oportunities_lookup
VALUES('tx_cause',6,'Compra Cancelada','',null,'','Compra Cancelada','Purchase Cancelled','#de#Purchase cancelled','Acquisto cancellato','Achat Annul√É¬©','#pt#Purchase cancelled','#ca#Purchase cancelled','#eu#Purchase cancelled','#ja#Purchase cancelled','√•¬è‚Äì√¶¬∂ÀÜ√§¬π¬∞√•¬ç‚Äì','√•¬è‚Äì√¶¬∂ÀÜ√®¬≤¬∑√®¬≥¬£','','√ê≈∏√ê¬æ√ê¬∫√ë∆í√ê¬ø√ê¬∫√ê¬∞ √ê¬æ√ë‚Äö√ê¬º√ê¬µ√ê¬Ω√ê¬µ√ê¬Ω√ê¬∞','','','','','','','','','');
INSERT INTO tbl_crmk_oportunities_lookup
VALUES('tx_cause',7,'Ciente insatisfecho','',null,'','Ciente insatisfecho','Unsatisfied customer','#de#Unsatisfied customer','Cliente insoddisfatto','Client insatisfait','#pt#Unsatisfied customer','#ca#Unsatisfied customer','#eu#Unsatisfied customer','#ja#Unsatisfied customer','√•¬Æ¬¢√¶ÀÜ¬∑√§¬∏¬ç√¶¬ª¬°√¶‚Äû¬è','√•¬Æ¬¢√¶ÀÜ¬∂√§¬∏¬ç√¶¬ª¬ø√¶‚Äû¬è','','√ê¬ù√ê¬µ√ë∆í√ê¬¥√ê¬æ√ê¬≤√ê¬ª√ê¬µ√ë‚Äö√ê¬≤√ê¬æ√ë‚Ç¨√ë‚Äò√ê¬Ω√ê¬Ω√ë‚Äπ√ê¬π √ê¬∫√ê¬ª√ê¬∏√ê¬µ√ê¬Ω√ë‚Äö','','','','','','','','','');
INSERT INTO tbl_crmk_oportunities_lookup
VALUES('tp_origin',1,'Prensa','',null,'','Prensa','Press','#de#Press','Stampa','Presse','#pt#Press','#ca#Press','#eu#Press','#ja#Press','√¶≈†¬•√ß¬∫¬∏','√•¬†¬±√ß¬¥‚Ñ¢','','#ru#Press','','','','','','','','','');
INSERT INTO tbl_crmk_oportunities_lookup
VALUES('tp_origin',2,'Internet','',null,'','Internet','Internet','#de#Internet','Internet','Internet','#pt#Internet','#ca#Internet','#eu#Internet','#ja#Internet','√ß¬Ω‚Äò√ß¬´‚Ñ¢','√ß¬∂¬≤√ß¬´‚Ñ¢','','√êÀú√ê¬Ω√ë‚Äö√ê¬µ√ë‚Ç¨√ê¬Ω√ê¬µ√ë‚Äö','','','','','','','','','');
INSERT INTO tbl_crmk_oportunities_lookup
VALUES('tp_origin',3,'Television','',null,'','Televisi√É¬≥n','Television','#de#Television','Televisione','T√É¬©l√É¬©vision','#pt#Television','#ca#Television','#eu#Television','#ja#Television','√ß‚Äù¬µ√®¬ß‚Ä†','√©‚Ä∫¬ª√®¬¶‚Äì','','√ê¬¢√ê¬µ√ê¬ª√ê¬µ√ê¬≤√ê¬∏√ê¬¥√ê¬µ√ê¬Ω√ê¬∏√ê¬µ','','','','','','','','','');
INSERT INTO tbl_crmk_oportunities_lookup
VALUES('tp_origin',4,'Buzoneo','',null,'','Buzoneo','Mailing','#de#Mailing','Mailing','Mailing','#pt#Mailing','#ca#Mailing','#eu#Mailing','#ja#Mailing','√§¬ø¬°√§¬ª¬∂','√§¬ø¬°√§¬ª¬∂','','√ê≈∏√ê¬æ√ë‚Ä°√ë‚Äö√ê¬∞','','','','','','','','','');
INSERT INTO tbl_crmk_oportunities_lookup
VALUES('tp_origin',5,'Spam','',null,'','Spam','Spam','#de#e-Mailing','e-Mailing','e-Mailing','#pt#e-Mailing','#ca#e-Mailing','#eu#e-Mailing','#ja#e-Mailing','√ß‚Äù¬µ√•¬≠¬ê√§¬ø¬°√§¬ª¬∂','√©‚Ä∫¬ª√•¬≠¬ê√§¬ø¬°√§¬ª¬∂','','√ê¬≠√ê¬ª√ê¬µ√ê¬∫√ë‚Äö√ë‚Ç¨√ê¬æ√ê¬Ω√ê¬Ω√ê¬∞√ë¬è √ê≈∏√ê¬æ√ë‚Ä°√ë‚Äö√ê¬∞','','','','','','','','','');
INSERT INTO tbl_crmk_oportunities_lookup
VALUES('tp_origin',6,'Referencia personal','',null,'','Referencia personal','Personal Reference','#de#Personal Reference','Referenze Personali','R√É¬©f√É¬©rence Personnelle','#pt#Personal Reference','#ca#Personal Reference','#eu#Personal Reference','#ja#Personal Reference','√§¬∏¬™√§¬∫¬∫√¶‚Äù¬∂√®‚Äî¬è','√•‚Ç¨‚Äπ√§¬∫¬∫√¶‚Äù¬∂√®‚Äî¬è','','√ê¬ª√ê¬∏√ë‚Ä°√ê¬Ω√ê¬∞√ë¬è √ë¬Å√ë¬Å√ë‚Äπ√ê¬ª√ê¬∫√ê¬∞','','','','','','','','','');
INSERT INTO tbl_crmk_oportunities_lookup
VALUES('tp_origin',7,'Cliente recurrente','',null,'','Cliente recurrente','Recurring customer','#de#Recurring customer','Cliente ricorrente','Client R√É¬©current','#pt#Recurring customer','#ca#Recurring customer','#eu#Recurring customer','#ja#Recurring customer','√•¬Æ¬¢√¶ÀÜ¬∑√¶¬±‚Äö√•≈†¬©','√•¬Æ¬¢√¶ÀÜ¬∂√¶¬±‚Äö√•≈†¬©','','√ê¬≤√ê¬æ√ê¬∑√ê¬≤√ë‚Ç¨√ê¬∞√ë‚Ä∞√ê¬∞√ë≈Ω√ë‚Ä∞√ê¬∏√ê¬π√ë¬Å√ë¬è √ê≈°√ê¬ª√ê¬∏√ê¬µ√ê¬Ω√ë‚Äö','','','','','','','','','');
INSERT INTO tbl_crmk_oportunities_lookup
VALUES('tp_origin',8,'Folleto','',null,'','Folleto','','','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_oportunities_lookup
VALUES('tp_origin',9,'Radio','',null,'','Radio','','','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_oportunities_lookup
VALUES('tp_origin',10,'Telefono','',null,'','Tel√É¬©fono','','','','','','','','','','','','','','','','','','','','','');
INSERT INTO tbl_crmk_oportunities_lookup
VALUES('tp_origin',11,'Otro','',null,'','Otro','','','','','','','','','','','','','','','','','','','','','');

--@FIN_BLOQUE
INSERT INTO tbl_usuarios_permisos_catalogo
VALUES ('CRM_OPORTUNIDADES');

INSERT INTO tbl_usuarios_permisos_catalogo
VALUES ('CRM_OPORTUNIDADES_GESTIONAR');

INSERT INTO tbl_usuarios_permisos_catalogo
VALUES ('CRM_OPORTUNIDADES_ELIMINAR');

--@FIN_BLOQUE
CREATE TABLE tbl_crmk_x_company_prods
(
  gu_company character(32) NOT NULL,
  id_linea character varying(8) NOT NULL,
  CONSTRAINT pk_x_company_prods PRIMARY KEY (gu_company, id_linea),
  CONSTRAINT f1_companies_prods FOREIGN KEY (gu_company)
      REFERENCES tbl_crmk_companies (gu_company) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION,
  CONSTRAINT f2_companies_prods FOREIGN KEY (id_linea)
      REFERENCES tbl_invserv_lineas (id_linea) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION
);

--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_crm_x_company_prods AS 
 SELECT x.gu_company, c.id_legal, c.nm_legal, l.id_linea, l.id_invserv, l.descripcion
   FROM tbl_crmk_x_company_prods x
   JOIN tbl_crmk_companies c ON x.gu_company = c.gu_company
   JOIN tbl_invserv_lineas l ON x.id_linea::text = l.id_linea::text;

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_crm_companias_gestionar(_gu_company character, _dt_created timestamp without time zone, _nm_legal character varying, _gu_workarea character, _bo_restricted smallint, _nm_commercial character varying, _dt_modified timestamp without time zone, _dt_founded timestamp without time zone, _id_batch character varying, _id_legal character varying, _id_sector character varying, _id_status character varying, _id_ref character varying, _id_fare character varying, _id_bpartner character varying, _tp_company character varying, _gu_geozone character, _nu_employees integer, _im_revenue double precision, _id_vendedor smallint, _tx_franchise character varying, _de_company character varying, _gu_user character, _tp_street character varying, _nm_street character varying, _nu_street character varying, _tx_addr1 character varying, _tx_addr2 character varying, _id_country character, _nm_state character varying, _mn_city character varying, _zipcode character varying, _work_phone character varying, 
_direct_phone character varying, _home_phone character varying, _mov_phone character varying, _fax_phone character varying, _other_phone character varying, _tx_email character varying)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255); _gu_sales_man character(32);_gu_address character(32);
BEGIN
	_err := 0;
	_result := case when _gu_company is null then 'La compa√É¬±√É¬≠a se registr√É¬≥ satisfactoriamente' else 'La compa√É¬±√É¬≠a se ha cambiado con √É¬©xito' end;
	_gu_sales_man := (select gu_sales_man from tbl_crmk_sales_men where id_vendedor = _id_vendedor);

	 IF _gu_company IS NULL
	THEN
		IF (select count(*) from tbl_crmk_companies where nm_legal = _nm_legal and gu_workarea = _gu_workarea) > 0
		THEN
			_err := 3;
			_result := 'ERROR: La compa√É¬±√É¬≠a ya existe en otro registro. No se puede agregar o cambiar';
		END IF;
	ELSE
		IF (select count(*) from tbl_crmk_companies where nm_legal = _nm_legal and gu_workarea = _gu_workarea and gu_company <> _gu_company) > 0
		THEN
			_err := 3;
			_result := 'ERROR: La compa√É¬±√É¬≠a ya existe en otro registro. No se puede agregar o cambiar';
		END IF;
	END IF;
	
	IF _err = 0
	THEN
		IF _gu_company IS NULL
		THEN
			_gu_company := replace(uuid_in(md5(now()::text)::cstring)::text,'-','')::character(32);
			_gu_address := replace(uuid_in(md5('addr' || now()::text)::cstring)::text,'-','')::character(32);
			INSERT INTO TBL_CRMK_COMPANIES
			VALUES( _gu_company, now(), _nm_legal, _gu_workarea, _bo_restricted, _nm_commercial, now(), _dt_founded, _id_batch, _id_legal, _id_sector, _id_status, _id_ref, _id_fare, 
						_id_bpartner, _tp_company, _gu_geozone, _nu_employees, _im_revenue, _gu_sales_man, _tx_franchise, _de_company );

			INSERT INTO TBL_CRMK_X_COMPANY_PRODS
			SELECT _gu_company, id_linea
			FROM _TMP_CRMK_X_COMPANY_PRODS;

			INSERT INTO TBL_CRMK_ADDRESSES (gu_address,ix_address,gu_workarea,dt_created,bo_active,dt_modified,gu_user,tp_location,nm_company,tp_street,nm_street,nu_street,tx_addr1,tx_addr2,id_country,nm_country,id_state,nm_state,
												mn_city,zipcode,work_phone,direct_phone,home_phone,mov_phone,fax_phone,other_phone,po_box,tx_email,tx_email_alt,url_addr,coord_x,coord_y,contact_person,tx_salutation,tx_dept,id_ref,tx_remarks)
			VALUES( _gu_address,1,_gu_workarea,now(),'1',now(),_gu_user,'Principal',_nm_legal,_tp_street,_nm_street,_nu_street,_tx_addr1,_tx_addr2,_id_country,null,null,_nm_state,
					_mn_city,_zipcode,_work_phone,_direct_phone,_home_phone,_mov_phone,_fax_phone,_other_phone,null,_tx_email,null,null,null,null,null,null,null,null,null  );

			INSERT INTO TBL_CRMK_X_COMPANY_ADDR
			VALUES(_gu_company, _gu_address);
						
		ELSE
			_gu_address = ( select gu_address from tbl_crmk_addresses where ix_address = 1 and gu_address in (select gu_address from tbl_crmk_x_company_addr where gu_company = _gu_company));
		
			UPDATE TBL_CRMK_COMPANIES
			SET nm_legal = _nm_legal, gu_workarea = _gu_workarea, bo_restricted = _bo_restricted, nm_commercial = _nm_commercial, dt_modified = now(), dt_founded = _dt_founded, 
				id_batch = _id_batch, id_legal = _id_legal, id_sector = _id_sector, id_status = _id_status, id_ref = _id_ref, id_fare = _id_fare, id_bpartner = _id_bpartner, tp_company = _tp_company, gu_geozone = _gu_geozone, 
				nu_employees = _nu_employees, im_revenue = _im_revenue, gu_sales_man = _gu_sales_man, tx_franchise = _tx_franchise, de_company = _de_company
			WHERE gu_company = _gu_company;
			
			DELETE FROM TBL_CRMK_X_COMPANY_PRODS
			WHERE gu_company = _gu_company;

			INSERT INTO TBL_CRMK_X_COMPANY_PRODS
			SELECT _gu_company, id_linea
			FROM _TMP_CRMK_X_COMPANY_PRODS;

			UPDATE TBL_CRMK_ADDRESSES 
			SET dt_modified = now(), gu_user = _gu_user,nm_company = _nm_legal,tp_street = _tp_street,nm_street = _nm_street,nu_street = _nu_street,tx_addr1 = _tx_addr1,tx_addr2 = _tx_addr2, id_country = _id_country,
				nm_state = _nm_state, mn_city = _mn_city, zipcode = _zipcode, work_phone = _work_phone, direct_phone = _direct_phone, home_phone = _home_phone, mov_phone = _mov_phone, fax_phone = _fax_phone,
				other_phone = _other_phone, tx_email = _tx_email
			WHERE gu_address = _gu_address;
		END IF;
	
	END IF;

	RETURN QUERY SELECT _err, _result, _gu_company;

END
$BODY$
  LANGUAGE plpgsql;
  
--@FIN_BLOQUE
CREATE TABLE tbl_crmk_sales_men
(
  gu_sales_man character(32) NOT NULL,
  id_vendedor smallint NOT NULL,
  gu_geozone character(32),
  id_country character(3),
  id_state character(9),
  id_sales_group character varying(50),
  id_bpartner character varying(32),
  CONSTRAINT pk_sales_men PRIMARY KEY (gu_sales_man),
  CONSTRAINT f1_sales_men FOREIGN KEY (id_vendedor)
      REFERENCES tbl_vendedores (id_vendedor) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT f2_sales_men FOREIGN KEY (gu_geozone)
      REFERENCES tbl_crmk_thesauri (gu_term) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION
);

--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_crm_companies AS 
 SELECT c.gu_company, c.dt_created, c.nm_legal, c.gu_workarea, c.bo_restricted, COALESCE(c.nm_commercial, ''::character varying) AS nm_commercial, c.dt_modified, c.dt_founded, c.id_batch, COALESCE(c.id_legal, ''::character varying) AS id_legal, COALESCE(c.id_sector, ''::character varying) AS id_sector, c.id_status, COALESCE(c.id_ref, ''::character varying) AS id_ref, c.id_fare, c.id_bpartner, c.tp_company, c.gu_geozone, c.nu_employees, c.im_revenue, v.id_vendedor, v.nombre, c.gu_sales_man, c.tx_franchise, COALESCE(c.de_company, ''::character varying) AS de_company
   FROM tbl_crmk_companies c
   JOIN tbl_crmk_sales_men s ON c.gu_sales_man = s.gu_sales_man
   JOIN tbl_vendedores v ON s.id_vendedor = v.id_vendedor;

--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_catalog_lineas AS 
 SELECT tbl_invserv_lineas.id_linea AS clave, tbl_invserv_lineas.descripcion, tbl_invserv_lineas.id_invserv AS especial
   FROM tbl_invserv_lineas;

--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_catalog_lineas_prodgas AS 
 SELECT tbl_invserv_lineas.id_linea AS clave, tbl_invserv_lineas.descripcion, 
        CASE
            WHEN tbl_invserv_lineas.id_invserv = 'P'::bpchar THEN 'Productos'::text
            ELSE 'Gastos'::text
        END AS especial
   FROM tbl_invserv_lineas
  WHERE tbl_invserv_lineas.id_invserv = 'P'::bpchar OR tbl_invserv_lineas.id_invserv = 'G'::bpchar;

--ALTER TABLE view_catalog_lineas_prodgas

--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_catalog_lineas_prodserv AS 
 SELECT tbl_invserv_lineas.id_linea AS clave, tbl_invserv_lineas.descripcion, 
        CASE
            WHEN tbl_invserv_lineas.id_invserv = 'P'::bpchar THEN 'Productos'::text
            ELSE 'Servicios'::text
        END AS especial
   FROM tbl_invserv_lineas
  WHERE tbl_invserv_lineas.id_invserv = 'P'::bpchar OR tbl_invserv_lineas.id_invserv = 'S'::bpchar;

--ALTER TABLE view_catalog_lineas_prodserv

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_crm_personas_gestionar(_gu_contact character, _gu_workarea character, _dt_created timestamp without time zone, _bo_restricted smallint, _bo_private smallint, _nu_notes integer, _nu_attachs integer, _bo_change_pwd smallint, _tx_nickname character varying, _tx_pwd character varying, _tx_challenge character varying, _tx_reply character varying, _dt_pwd_expires timestamp without time zone, _dt_modified timestamp without time zone, _gu_writer character, _gu_company character, _id_batch character varying, _id_status character varying, _id_ref character varying, _id_fare character varying, _id_bpartner character varying, _tx_name character varying, _tx_surname character varying, _de_title character varying, _id_gender character, _dt_birth timestamp without time zone, _ny_age smallint, _id_nationality character, _sn_passport character varying, _tp_passport character varying, _sn_drivelic character varying, _dt_drivelic timestamp without time zone, _tx_dept character varying, 
_tx_division character varying, _gu_geozone character, _id_vendedor smallint, _tx_comments character varying, _url_linkedin character varying, _url_facebook character varying, _url_twitter character varying, _gu_user character, _tp_street character varying, _nm_street character varying, _nu_street character varying, _tx_addr1 character varying, _tx_addr2 character varying, _id_country character, _nm_state character varying, _mn_city character varying, _zipcode character varying, _work_phone character varying, _direct_phone character varying, _home_phone character varying, _mov_phone character varying, _fax_phone character varying, _other_phone character varying, _tx_email character varying)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255); _gu_sales_man character(32); _gu_address character(32); _nm_company varchar(70);
BEGIN
	_err := 0;
	_result := case when _gu_contact is null then 'La persona se registr√É¬≥ satisfactoriamente' else 'La persona se ha cambiado con √É¬©xito' end;
	_gu_sales_man := (select gu_sales_man from tbl_crmk_sales_men where id_vendedor = _id_vendedor);
	if _gu_company is not null then _nm_company = (select nm_legal from tbl_crmk_companies where gu_company = _gu_company); end if;

	IF _err = 0
	THEN
		IF _gu_contact IS NULL
		THEN
			_gu_contact := replace(uuid_in(md5(now()::text)::cstring)::text,'-','')::character(32);
			_gu_address := replace(uuid_in(md5('addr' || now()::text)::cstring)::text,'-','')::character(32);
			
			INSERT INTO TBL_CRMK_CONTACTS
			VALUES( _gu_contact,_gu_workarea,now(),_bo_restricted,_bo_private,_nu_notes,_nu_attachs,_bo_change_pwd,_tx_nickname,_tx_pwd,_tx_challenge,_tx_reply,_dt_pwd_expires,now(),_gu_writer,_gu_company, _id_batch,
					_id_status,_id_ref,_id_fare,_id_bpartner,_tx_name,_tx_surname,_de_title,_id_gender,_dt_birth,_ny_age,_id_nationality,_sn_passport,_tp_passport,_sn_drivelic,_dt_drivelic,_tx_dept,_tx_division,_gu_geozone,_gu_sales_man,
					_tx_comments,_url_linkedin,_url_facebook,_url_twitter );

			INSERT INTO TBL_CRMK_ADDRESSES (gu_address,ix_address,gu_workarea,dt_created,bo_active,dt_modified,gu_user,tp_location,nm_company,tp_street,nm_street,nu_street,tx_addr1,tx_addr2,id_country,nm_country,id_state,nm_state,
												mn_city,zipcode,work_phone,direct_phone,home_phone,mov_phone,fax_phone,other_phone,po_box,tx_email,tx_email_alt,url_addr,coord_x,coord_y,contact_person,tx_salutation,tx_dept,id_ref,tx_remarks)
			VALUES( _gu_address,1,_gu_workarea,now(),'1',now(),_gu_user,'Principal',_nm_company,_tp_street,_nm_street,_nu_street,_tx_addr1,_tx_addr2,_id_country,null,null,_nm_state,
					_mn_city,_zipcode,_work_phone,_direct_phone,_home_phone,_mov_phone,_fax_phone,_other_phone,null,_tx_email,null,null,null,null,null,null,null,null,null  );

			INSERT INTO TBL_CRMK_X_CONTACT_ADDR
			VALUES(_gu_contact, _gu_address);
						
		ELSE
			_gu_address = ( select gu_address from tbl_crmk_addresses where ix_address = 1 and gu_address in (select gu_address from tbl_crmk_x_contact_addr where gu_contact = _gu_contact));
		
			UPDATE TBL_CRMK_CONTACTS
			SET gu_workarea = _gu_workarea, bo_private = _bo_private, dt_modified = now(), gu_writer = _gu_writer, gu_company = _gu_company, id_status = _id_status, id_ref = _id_ref, tx_name = _tx_name,
				tx_surname = _tx_surname, de_title = _de_title, id_gender = _id_gender, dt_birth = _dt_birth, id_nationality = _id_nationality, sn_passport = _sn_passport, tp_passport = _tp_passport, 
				tx_dept = _tx_dept, tx_division = _tx_division, gu_sales_man = _gu_sales_man, tx_comments = _tx_comments
			WHERE gu_contact = _gu_contact;
			
			UPDATE TBL_CRMK_ADDRESSES 
			SET dt_modified = now(), gu_user = _gu_user, nm_company = _nm_company, tp_street = _tp_street, nm_street = _nm_street, nu_street = _nu_street, tx_addr1 = _tx_addr1, tx_addr2 = _tx_addr2, id_country = _id_country,
				nm_state = _nm_state, mn_city = _mn_city, zipcode = _zipcode, work_phone = _work_phone, direct_phone = _direct_phone, home_phone = _home_phone, mov_phone = _mov_phone, fax_phone = _fax_phone,
				other_phone = _other_phone, tx_email = _tx_email
			WHERE gu_address = _gu_address;
		END IF;
	
	END IF;

	RETURN QUERY SELECT _err, _result, _gu_contact;

END
$BODY$
  LANGUAGE plpgsql;

--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_crm_contacts AS 
 SELECT c.gu_contact, c.gu_workarea, c.dt_created, c.bo_restricted, c.bo_private, c.nu_notes, c.nu_attachs, c.bo_change_pwd, c.tx_nickname, c.tx_pwd, c.tx_challenge, c.tx_reply, c.dt_pwd_expires, c.dt_modified, c.gu_writer, COALESCE(c.gu_company, ''::bpchar) AS gu_company, COALESCE(com.nm_legal, ''::character varying) AS nm_legal, c.id_batch, c.id_status, COALESCE(c.id_ref, ''::character varying) AS id_ref, c.id_fare, c.id_bpartner, c.tx_name, c.tx_surname, COALESCE(c.de_title, ''::character varying) AS de_title, c.id_gender, c.dt_birth, c.ny_age, COALESCE(c.id_nationality, ''::bpchar) AS id_nationality, COALESCE(c.sn_passport, ''::character varying) AS sn_passport, COALESCE(c.tp_passport, ''::character varying) AS tp_passport, c.sn_drivelic, c.dt_drivelic, COALESCE(c.tx_dept, ''::character varying) AS tx_dept, COALESCE(c.tx_division, ''::character varying) AS tx_division, c.gu_geozone, v.id_vendedor, v.nombre, c.gu_sales_man, COALESCE(c.tx_comments, ''::character varying) AS tx_comments, c.url_linkedin, c.
url_facebook, c.url_twitter
   FROM tbl_crmk_contacts c
   LEFT JOIN tbl_crmk_companies com ON c.gu_company = com.gu_company
   JOIN tbl_crmk_sales_men s ON c.gu_sales_man = s.gu_sales_man
   JOIN tbl_vendedores v ON s.id_vendedor = v.id_vendedor;

--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_catalog_companias AS 
 SELECT c.gu_company AS clave, c.nm_legal AS descripcion, c.id_status::text AS especial, c.gu_workarea
   FROM tbl_crmk_companies c;

--@FIN_BLOQUE
CREATE TABLE tbl_crmk_addresses
(
  gu_address character(32) NOT NULL,
  ix_address integer NOT NULL,
  gu_workarea character(32) NOT NULL,
  dt_created timestamp without time zone DEFAULT now(),
  bo_active smallint DEFAULT 1,
  dt_modified timestamp without time zone,
  gu_user character(32),
  tp_location character varying(16),
  nm_company character varying(70),
  tp_street character varying(16),
  nm_street character varying(100),
  nu_street character varying(16),
  tx_addr1 character varying(100),
  tx_addr2 character varying(100),
  id_country character(3),
  nm_country character varying(50),
  id_state character varying(16),
  nm_state character varying(30),
  mn_city character varying(50),
  zipcode character varying(30),
  work_phone character varying(16),
  direct_phone character varying(16),
  home_phone character varying(16),
  mov_phone character varying(16),
  fax_phone character varying(16),
  other_phone character varying(16),
  po_box character varying(50),
  tx_email character varying(100),
  tx_email_alt character varying(100),
  url_addr character varying(254),
  coord_x double precision,
  coord_y double precision,
  contact_person character varying(100),
  tx_salutation character varying(16),
  tx_dept character varying(70),
  id_ref character varying(50),
  tx_remarks character varying(254),
  CONSTRAINT pk_address PRIMARY KEY (gu_address),
  CONSTRAINT f1_addresses FOREIGN KEY (id_country)
      REFERENCES tbl_crmk_lu_countries (id_country) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION,
  CONSTRAINT f2_addresses FOREIGN KEY (gu_workarea)
      REFERENCES tbl_crmk_workareas (gu_workarea) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION,
  CONSTRAINT c1_address CHECK (id_country <> 'es'::bpchar AND id_country <> 'fr'::bpchar AND id_country <> 'de'::bpchar OR char_length(zipcode::text) = 5 OR char_length(zipcode::text) = 0 OR zipcode IS NULL),
  CONSTRAINT c2_address CHECK (id_country <> 'us'::bpchar OR char_length(zipcode::text) >= 5 AND char_length(zipcode::text) <= 10 OR zipcode IS NULL),
  CONSTRAINT c3_address CHECK (id_country <> 'cn'::bpchar OR char_length(zipcode::text) = 6 OR zipcode IS NULL),
  CONSTRAINT c4_address CHECK (nm_street IS NULL OR char_length(nm_street::text) > 0)
);

--@FIN_BLOQUE
CREATE TABLE tbl_crmk_x_company_addr
(
  gu_company character(32) NOT NULL,
  gu_address character(32) NOT NULL,
  CONSTRAINT pk_x_company_addr PRIMARY KEY (gu_company, gu_address),
  CONSTRAINT f1_x_company_addr FOREIGN KEY (gu_company)
      REFERENCES tbl_crmk_companies (gu_company) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION,
  CONSTRAINT f2_x_company_addr FOREIGN KEY (gu_address)
      REFERENCES tbl_crmk_addresses (gu_address) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION
);

--@FIN_BLOQUE
CREATE TABLE tbl_crmk_x_contact_addr
(
  gu_contact character(32) NOT NULL,
  gu_address character(32) NOT NULL,
  CONSTRAINT pk_x_contact_addr PRIMARY KEY (gu_contact, gu_address),
  CONSTRAINT f1_x_contact_addr FOREIGN KEY (gu_contact)
      REFERENCES tbl_crmk_contacts (gu_contact) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION,
  CONSTRAINT f2_x_contact_addr FOREIGN KEY (gu_address)
      REFERENCES tbl_crmk_addresses (gu_address) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION
);

--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_crm_oportunities AS 
 SELECT o.gu_oportunity, o.gu_writer, o.gu_workarea, o.bo_private, o.dt_created, o.dt_modified, o.dt_next_action, o.dt_last_call, COALESCE(o.lv_interest::integer, (-1)) AS lv_interest, o.nu_oportunities, COALESCE(o.gu_campaign, ''::bpchar) AS gu_campaign, COALESCE(o.gu_company, ''::bpchar) AS gu_company, COALESCE(o.gu_contact, ''::bpchar) AS gu_contact, COALESCE(o.tx_company, ''::character varying) AS tx_company, COALESCE(o.tx_contact, ''::character varying) AS tx_contact, o.tl_oportunity, o.tp_oportunity, COALESCE(o.tp_origin, ''::character varying) AS tp_origin, o.im_revenue, o.im_cost, o.id_status, COALESCE(o.id_objetive, ''::character varying) AS id_objetive, o.id_message, COALESCE(o.tx_cause, ''::character varying) AS tx_cause, COALESCE(o.tx_note, ''::character varying) AS tx_note
   FROM tbl_crmk_oportunities o;

--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_crm_addresses AS 
 SELECT a.gu_address, a.ix_address, a.gu_workarea, a.dt_created, a.bo_active, a.dt_modified, a.gu_user, COALESCE(a.tp_location, ''::character varying) AS tp_location, COALESCE(a.nm_company, ''::character varying) AS nm_company, COALESCE(a.tp_street, ''::character varying) AS tp_street, COALESCE(a.nm_street, ''::character varying) AS nm_street, COALESCE(a.nu_street, ''::character varying) AS nu_street, COALESCE(a.tx_addr1, ''::character varying) AS tx_addr1, COALESCE(a.tx_addr2, ''::character varying) AS tx_addr2, COALESCE(a.id_country, ''::bpchar) AS id_country, COALESCE(a.nm_country, ''::character varying) AS nm_country, COALESCE(a.id_state, ''::character varying) AS id_state, COALESCE(a.nm_state, ''::character varying) AS nm_state, COALESCE(a.mn_city, ''::character varying) AS mn_city, COALESCE(a.zipcode, ''::character varying) AS zipcode, COALESCE(a.work_phone, ''::character varying) AS work_phone, COALESCE(a.direct_phone, ''::character varying) AS direct_phone, COALESCE(a.home_phone, ''::character 
varying) AS home_phone, COALESCE(a.mov_phone, ''::character varying) AS mov_phone, COALESCE(a.fax_phone, ''::character varying) AS fax_phone, COALESCE(a.other_phone, ''::character varying) AS other_phone, a.po_box, a.tx_email, a.tx_email_alt, a.url_addr, a.coord_x, a.coord_y, a.contact_person, a.tx_salutation, a.tx_dept, a.id_ref, a.tx_remarks
   FROM tbl_crmk_addresses a;

--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_catalog_personas AS 
 SELECT c.gu_contact AS clave, (c.tx_name::text || ' '::text) || c.tx_surname::text AS descripcion, c.id_status::text AS especial, c.gu_workarea
   FROM tbl_crmk_contacts c;

--@FIN_BLOQUE
INSERT INTO tbl_usuarios_permisos_catalogo
VALUES ('CRM_CALENDARIO');

INSERT INTO tbl_usuarios_permisos_catalogo
VALUES ('CRM_CALENDARIO_GESTIONAR');

INSERT INTO tbl_usuarios_permisos_catalogo
VALUES ('CRM_CALENDARIO_ELIMINAR');

--@FIN_BLOQUE
CREATE TABLE tbl_crmk_categories
(
  gu_category character(32) NOT NULL,
  nm_category character varying(100) NOT NULL,
  bo_active smallint NOT NULL,
  dt_created timestamp without time zone DEFAULT now(),
  dt_modified timestamp without time zone,
  nm_icon character varying(254),
  nm_icon2 character varying(254),
  id_doc_status smallint,
  len_size numeric(28,0),
  CONSTRAINT pk_categories PRIMARY KEY (gu_category),
  CONSTRAINT u2_categories UNIQUE (nm_category)
);

--@FIN_BLOQUE
CREATE TABLE tbl_crmk_mime_msgs
(
  gu_mimemsg character(32) NOT NULL,
  gu_workarea character(32) NOT NULL,
  pg_message numeric(20,0) NOT NULL,
  nm_author character varying(200) NOT NULL,
  gu_writer character(32),
  gu_validator character(32),
  gu_category character(32),
  gu_parent_msg character(32),
  gu_job character(32),
  nu_position numeric(20,0),
  id_type character varying(254),
  id_content character varying(254),
  id_message character varying(254),
  id_disposition character varying(100),
  len_mimemsg integer,
  tx_md5 character(32),
  de_mimemsg character varying(254),
  file_name character varying(254),
  tx_encoding character varying(16),
  tx_subject character varying(254),
  dt_sent timestamp without time zone,
  dt_received timestamp without time zone,
  dt_readed timestamp without time zone,
  bo_indexed smallint DEFAULT 0,
  bo_answered smallint,
  bo_deleted smallint,
  bo_draft smallint,
  bo_flagged smallint,
  bo_recent smallint,
  bo_seen smallint,
  bo_spam smallint,
  id_compression smallint,
  id_priority character varying(10),
  tx_email_from character varying(254),
  tx_email_reply character varying(254),
  nm_from character varying(254),
  nm_to character varying(254),
  tx_msg text,
  CONSTRAINT pk_mime_msgs PRIMARY KEY (gu_mimemsg),
  CONSTRAINT f1_mime_msgs FOREIGN KEY (gu_workarea)
      REFERENCES tbl_crmk_workareas (gu_workarea) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION,
  CONSTRAINT f2_mime_msgs FOREIGN KEY (gu_category)
      REFERENCES tbl_crmk_categories (gu_category) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION,
  CONSTRAINT f3_mime_msgs FOREIGN KEY (gu_writer)
      REFERENCES tbl_crmk_users (gu_user) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE SET NULL,
  CONSTRAINT f4_mime_msgs FOREIGN KEY (gu_validator)
      REFERENCES tbl_crmk_users (gu_user) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE SET NULL,
  CONSTRAINT u1_mime_msgs UNIQUE (gu_category, pg_message),
  CONSTRAINT c1_mime_msgs CHECK (pg_message IS NULL OR pg_message >= 0::numeric),
  CONSTRAINT c2_mime_msgs CHECK (nu_position IS NULL OR nu_position >= 0::numeric),
  CONSTRAINT c3_mime_msgs CHECK (len_mimemsg IS NULL OR len_mimemsg >= 0),
  CONSTRAINT c4_mime_msgs CHECK (dt_received IS NULL OR dt_readed IS NULL OR dt_received <= dt_readed)
);

CREATE INDEX i1_mime_msgs
  ON tbl_crmk_mime_msgs
  USING btree
  (gu_workarea COLLATE pg_catalog."default");

CREATE INDEX i2_mime_msgs
  ON tbl_crmk_mime_msgs
  USING btree
  (gu_category COLLATE pg_catalog."default");

CREATE INDEX i3_mime_msgs
  ON tbl_crmk_mime_msgs
  USING btree
  (id_message COLLATE pg_catalog."default");

CREATE INDEX i4_mime_msgs
  ON tbl_crmk_mime_msgs
  USING btree
  (tx_subject COLLATE pg_catalog."default");

--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_cajas_vales_acum AS 
 SELECT cc.id_tipo, cc.id_clave, ( SELECT COALESCE(sum(cv.total), 0::numeric) AS "coalesce"
           FROM tbl_cajas_cierre_vales cv
          WHERE cv.id_cierre = cc.id_cierre AND cv.id_tipo = 'P'::bpchar) AS provisionales, ( SELECT COALESCE(sum(cv.total), 0::numeric) AS "coalesce"
           FROM tbl_cajas_cierre_vales cv
          WHERE cv.id_cierre = cc.id_cierre AND cv.id_tipo = 'F'::bpchar) AS sinfactura, ( SELECT COALESCE(sum(cv.total), 0::numeric) AS "coalesce"
           FROM tbl_cajas_cierre_vales cv
          WHERE cv.id_cierre = cc.id_cierre AND cv.id_tipo = 'A'::bpchar) AS facturas, ( SELECT COALESCE(sum(cv.total), 0::numeric) AS "coalesce"
           FROM tbl_cajas_cierre_vales cv
          WHERE cv.id_cierre = cc.id_cierre AND cv.id_tipo = 'G'::bpchar) AS pagos, ( SELECT COALESCE(sum(cv.total), 0::numeric) AS "coalesce"
           FROM tbl_cajas_cierre_vales cv
          WHERE cv.id_cierre = cc.id_cierre AND cv.id_tipo = 'C'::bpchar) AS otros, ( SELECT COALESCE(sum(cv.total), 0::numeric) AS "coalesce"
           FROM tbl_cajas_cierre_vales cv
          WHERE cv.id_cierre = cc.id_cierre AND cv.id_tipo = 'T'::bpchar) AS traspasar
   FROM tbl_cajas_cierre cc
  WHERE cc.numero = 0;

--@FIN_BLOQUE


INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('ADM_AWSS3');

INSERT INTO TBL_USUARIOS_PERMISOS_CATALOGO
VALUES('ADM_AWSS3_GESTIONAR');

--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_cfdcomp AS 
 SELECT tbl_cfdcomp.id_cfd, tbl_cfdcomp.rfc, tbl_cfdcomp.fecha, tbl_cfdcomp.total, tbl_cfdcomp.efecto, 
        CASE
            WHEN tbl_cfdcomp.efecto = 'I'::bpchar THEN 'Ingreso'::text
            WHEN tbl_cfdcomp.efecto = 'E'::bpchar THEN 'Egreso'::text
            WHEN tbl_cfdcomp.efecto = 'T'::bpchar THEN 'Traslado'::text
            ELSE 'Desconocido'::text
        END AS efectostr, tbl_cfdcomp.fsi_tipo, tbl_cfdcomp.fsi_id, 
        CASE
            WHEN tbl_cfdcomp.fsi_tipo = 'ENT'::bpchar THEN (( SELECT tbl_compras_entidades.descripcion
               FROM tbl_compras_entidades
              WHERE tbl_compras_entidades.id_entidadcompra = tbl_cfdcomp.fsi_id))::text
            ELSE 
            CASE
                WHEN tbl_cfdcomp.fsi_tipo = 'REC'::bpchar THEN (((((( SELECT tbl_compras_entidades.descripcion
                   FROM tbl_compras_entidades
                  WHERE tbl_compras_entidades.id_entidadcompra = (( SELECT tbl_compras_recepciones_cab.id_entidad
                           FROM tbl_compras_recepciones_cab
                          WHERE tbl_compras_recepciones_cab.id_vc = tbl_cfdcomp.fsi_id))))::text) || '/'::text) || tbl_cfdcomp.fsi_tipo::text) || ':'::text) || (( SELECT tbl_compras_recepciones_cab.numero
                   FROM tbl_compras_recepciones_cab
                  WHERE tbl_compras_recepciones_cab.id_vc = tbl_cfdcomp.fsi_id))
                WHEN tbl_cfdcomp.fsi_tipo = 'FAC'::bpchar THEN (((((( SELECT tbl_compras_entidades.descripcion
                   FROM tbl_compras_entidades
                  WHERE tbl_compras_entidades.id_entidadcompra = (( SELECT tbl_compras_facturas_cab.id_entidad
                           FROM tbl_compras_facturas_cab
                          WHERE tbl_compras_facturas_cab.id_vc = tbl_cfdcomp.fsi_id))))::text) || '/'::text) || tbl_cfdcomp.fsi_tipo::text) || ':'::text) || (( SELECT tbl_compras_facturas_cab.numero
                   FROM tbl_compras_facturas_cab
                  WHERE tbl_compras_facturas_cab.id_vc = tbl_cfdcomp.fsi_id))
                WHEN tbl_cfdcomp.fsi_tipo = 'GAS'::bpchar THEN (((((( SELECT tbl_compras_entidades.descripcion
                   FROM tbl_compras_entidades
                  WHERE tbl_compras_entidades.id_entidadcompra = (( SELECT tbl_compras_gastos_cab.id_entidad
                           FROM tbl_compras_gastos_cab
                          WHERE tbl_compras_gastos_cab.id_vc = tbl_cfdcomp.fsi_id))))::text) || '/'::text) || tbl_cfdcomp.fsi_tipo::text) || ':'::text) || (( SELECT tbl_compras_gastos_cab.numero
                   FROM tbl_compras_gastos_cab
                  WHERE tbl_compras_gastos_cab.id_vc = tbl_cfdcomp.fsi_id))
                WHEN tbl_cfdcomp.fsi_tipo = 'DSC'::bpchar THEN (((((( SELECT tbl_compras_entidades.descripcion
                   FROM tbl_compras_entidades
                  WHERE tbl_compras_entidades.id_entidadcompra = (( SELECT tbl_compras_devoluciones_cab.id_entidad
                           FROM tbl_compras_devoluciones_cab
                          WHERE tbl_compras_devoluciones_cab.id_vc = tbl_cfdcomp.fsi_id))))::text) || '/'::text) || tbl_cfdcomp.fsi_tipo::text) || ':'::text) || (( SELECT tbl_compras_devoluciones_cab.numero
                   FROM tbl_compras_devoluciones_cab
                  WHERE tbl_compras_devoluciones_cab.id_vc = tbl_cfdcomp.fsi_id))
                ELSE '?????'::text
            END
        END AS enlace, tbl_cfdcomp.uuid, tbl_cfdcomp.fechatimbre
   FROM tbl_cfdcomp;

--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_cfdcompotr AS 
 SELECT tbl_cfdcompotr.id_cfd, tbl_cfdcompotr.fsi_tipo, tbl_cfdcompotr.fsi_id, 
        CASE
            WHEN tbl_cfdcompotr.numfactext::text = ''::text THEN 'CBB'::text
            ELSE 'EXT'::text
        END AS tipo, 
        CASE
            WHEN tbl_cfdcompotr.numfactext::text = ''::text THEN ((tbl_cfdcompotr.cfd_cbb_serie::text || ' '::text) || tbl_cfdcompotr.cfd_cbb_numfol)::character varying
            ELSE tbl_cfdcompotr.numfactext
        END AS factura, tbl_cfdcompotr.cfd_cbb_serie, tbl_cfdcompotr.cfd_cbb_numfol, tbl_cfdcompotr.numfactext, tbl_cfdcompotr.uuid, tbl_cfdcompotr.ext, tbl_cfdcompotr.nombre_original, tbl_cfdcompotr.total, tbl_cfdcompotr.id_moneda, tbl_cfdcompotr.tc, tbl_cfdcompotr.fecha, 
        CASE
            WHEN tbl_cfdcompotr.fsi_tipo = 'ENT'::bpchar THEN (( SELECT tbl_compras_entidades.descripcion
               FROM tbl_compras_entidades
              WHERE tbl_compras_entidades.id_entidadcompra = tbl_cfdcompotr.fsi_id))::text
            ELSE 
            CASE
                WHEN tbl_cfdcompotr.fsi_tipo = 'REC'::bpchar THEN (((((( SELECT tbl_compras_entidades.descripcion
                   FROM tbl_compras_entidades
                  WHERE tbl_compras_entidades.id_entidadcompra = (( SELECT tbl_compras_recepciones_cab.id_entidad
                           FROM tbl_compras_recepciones_cab
                          WHERE tbl_compras_recepciones_cab.id_vc = tbl_cfdcompotr.fsi_id))))::text) || '/'::text) || tbl_cfdcompotr.fsi_tipo::text) || ':'::text) || (( SELECT tbl_compras_recepciones_cab.numero
                   FROM tbl_compras_recepciones_cab
                  WHERE tbl_compras_recepciones_cab.id_vc = tbl_cfdcompotr.fsi_id))
                WHEN tbl_cfdcompotr.fsi_tipo = 'FAC'::bpchar THEN (((((( SELECT tbl_compras_entidades.descripcion
                   FROM tbl_compras_entidades
                  WHERE tbl_compras_entidades.id_entidadcompra = (( SELECT tbl_compras_facturas_cab.id_entidad
                           FROM tbl_compras_facturas_cab
                          WHERE tbl_compras_facturas_cab.id_vc = tbl_cfdcompotr.fsi_id))))::text) || '/'::text) || tbl_cfdcompotr.fsi_tipo::text) || ':'::text) || (( SELECT tbl_compras_facturas_cab.numero
                   FROM tbl_compras_facturas_cab
                  WHERE tbl_compras_facturas_cab.id_vc = tbl_cfdcompotr.fsi_id))
                WHEN tbl_cfdcompotr.fsi_tipo = 'GAS'::bpchar THEN (((((( SELECT tbl_compras_entidades.descripcion
                   FROM tbl_compras_entidades
                  WHERE tbl_compras_entidades.id_entidadcompra = (( SELECT tbl_compras_gastos_cab.id_entidad
                           FROM tbl_compras_gastos_cab
                          WHERE tbl_compras_gastos_cab.id_vc = tbl_cfdcompotr.fsi_id))))::text) || '/'::text) || tbl_cfdcompotr.fsi_tipo::text) || ':'::text) || (( SELECT tbl_compras_gastos_cab.numero
                   FROM tbl_compras_gastos_cab
                  WHERE tbl_compras_gastos_cab.id_vc = tbl_cfdcompotr.fsi_id))
                WHEN tbl_cfdcompotr.fsi_tipo = 'DSC'::bpchar THEN (((((( SELECT tbl_compras_entidades.descripcion
                   FROM tbl_compras_entidades
                  WHERE tbl_compras_entidades.id_entidadcompra = (( SELECT tbl_compras_devoluciones_cab.id_entidad
                           FROM tbl_compras_devoluciones_cab
                          WHERE tbl_compras_devoluciones_cab.id_vc = tbl_cfdcompotr.fsi_id))))::text) || '/'::text) || tbl_cfdcompotr.fsi_tipo::text) || ':'::text) || (( SELECT tbl_compras_devoluciones_cab.numero
                   FROM tbl_compras_devoluciones_cab
                  WHERE tbl_compras_devoluciones_cab.id_vc = tbl_cfdcompotr.fsi_id))
                ELSE '?????'::text
            END
        END AS enlace
   FROM tbl_cfdcompotr;

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_nom_fonacot_agregar(
    _id_credito character varying,
    _id_empleado character,
    _fecha timestamp without time zone,
    _meses smallint,
    _plazo smallint,
    _importe numeric,
    _retencion numeric)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255);
BEGIN
	_err := 0;
	_result := 'El cr√©dito fonacot se registr√≥ satisfactoriamente';
	
	-- si existe un empleado marcar√° error
	IF(select count(*) from TBL_NOM_FONACOT_CAB where ID_Credito = _ID_Credito) > 0
	THEN
		_err := 3;
		_result := 'ERROR: Ya existe un cr√©dito con la misma clave';
	END IF;
	
	IF _err = 0
	THEN
		INSERT INTO TBL_NOM_FONACOT_CAB
		VALUES( _ID_Credito, _ID_Empleado, _Fecha, _Meses, _Plazo, _Importe, _Retencion );
		
		INSERT INTO TBL_NOM_FONACOT_DET
		SELECT _ID_Credito, Fecha, Descuento
		FROM _TMP_FONACOT_DET;

	END IF;
		
	RETURN QUERY SELECT _err, _result, _id_credito;

END
$BODY$
  LANGUAGE plpgsql;

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_nom_fonacot_cambiar(
    _id_credito character varying,
    _id_empleado character,
    _fecha timestamp without time zone,
    _meses smallint,
    _plazo smallint,
    _importe numeric,
    _retencion numeric)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255);
BEGIN
	_err := 0;
	_result := 'El cr√©dito fonacot se cambi√≥ satisfactoriamente';
	
	-- si existe un empleado marcar√° error
	IF(select count(*) from TBL_NOM_FONACOT_CAB where ID_Credito = _ID_Credito) < 1
	THEN
		_err := 3;
		_result := 'ERROR: NO existe un cr√©dito con esta clave';
	END IF;
	
	IF _err = 0
	THEN
		UPDATE TBL_NOM_FONACOT_CAB
		SET Fecha = _Fecha, Meses = _Meses, Plazo = _Plazo, Importe = _Importe, Retencion = _Retencion
		WHERE ID_Credito = _ID_Credito;
		
		DELETE FROM TBL_NOM_FONACOT_DET
		WHERE ID_Credito = _ID_Credito;

		INSERT INTO TBL_NOM_FONACOT_DET
		SELECT _ID_Credito, Fecha, Descuento
		FROM _TMP_FONACOT_DET;
	END IF;
		
	RETURN QUERY SELECT _err, _result, _id_credito;

END
$BODY$
  LANGUAGE plpgsql;

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_nom_fonacot_eliminar(_id_credito character varying)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_err int; _result varchar(255);
BEGIN
	_err := 0;
	_result := 'El cr√©dito fonacot se elimin√≥ de la base de datos';
	
	-- si existe un empleado marcar√° error
	IF(select count(*) from TBL_NOM_FONACOT_CAB where ID_Credito = _ID_Credito) < 1
	THEN
		_err := 3;
		_result := 'ERROR: NO existe un cr√©dito con esta clave';
	END IF;
	
	IF _err = 0
	THEN
		DELETE FROM TBL_NOM_FONACOT_CAB
		WHERE ID_Credito = _ID_Credito;
		
	END IF;
		
	RETURN QUERY SELECT _err, _result, _id_credito;

END
$BODY$
  LANGUAGE plpgsql;

--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_nom_permisos_grupo AS 
 SELECT p.id_compania, p.id_sucursal, com.descripcion AS scompania_sucursal, p.id_movimiento, p.id_fechamovimiento, m.descripcion, p.fechahora_desde AS desde, 
        CASE
            WHEN p.diascompletos = B'1'::"bit" THEN p.fechahora_hasta - '1 day'::interval
            ELSE p.fechahora_hasta
        END AS hasta, p.diascompletos, p.num_de_dias, p.num_de_horas, p.tiempo_por_pagar
   FROM tbl_nom_permisos_grupo p
   JOIN tbl_nom_movimientos m ON p.id_movimiento = m.id_movimiento
   JOIN tbl_companias com ON p.id_compania = com.id_compania AND p.id_sucursal = com.id_sucursal
  WHERE p.id_movimiento > 0;
  


--@FIN_BLOQUE
CREATE TABLE tbl_sat_pyd_nomina
(
  deduccion bit(1) NOT NULL,
  clave character(3) NOT NULL,
  descripcion character varying(254) NOT NULL,
  CONSTRAINT pk_tbl_sat_pyd_nomina PRIMARY KEY (deduccion, clave)
);
--FIN tbl_sat_pyd_nomina

--@FIN_BLOQUE
-- Primero percepciones
insert into tbl_sat_pyd_nomina
values('0','001','Sueldos, Salarios Rayas y Jornales');
insert into tbl_sat_pyd_nomina
values('0','002','Gratificaci√≥n Anual (Aguinaldo)');
insert into tbl_sat_pyd_nomina
values('0','003','Participaci√≥n de los Trabajadores en las Utilidades PTU');
insert into tbl_sat_pyd_nomina
values('0','004','Reembolso de Gastos M√©dicos Dentales y Hospitalarios');
insert into tbl_sat_pyd_nomina
values('0','005','Fondo de Ahorro');
insert into tbl_sat_pyd_nomina
values('0','006','Caja de ahorro');
insert into tbl_sat_pyd_nomina
values('0','009','Contribuciones a Cargo del Trabajador Pagadas por el Patr√≥n');
insert into tbl_sat_pyd_nomina
values('0','010','Premios por puntualidad');
insert into tbl_sat_pyd_nomina
values('0','011','Prima de Seguro de vida');
insert into tbl_sat_pyd_nomina
values('0','012','Seguro de Gastos M√©dicos Mayores');
insert into tbl_sat_pyd_nomina
values('0','013','Cuotas Sindicales Pagadas por el Patr√≥n');
insert into tbl_sat_pyd_nomina
values('0','014','Subsidios por incapacidad');
insert into tbl_sat_pyd_nomina
values('0','015','Becas para trabajadores y/o hijos');
insert into tbl_sat_pyd_nomina
values('0','016','Otros');
insert into tbl_sat_pyd_nomina
values('0','017','Subsidio para el empleo');
insert into tbl_sat_pyd_nomina
values('0','019','Horas extra');
insert into tbl_sat_pyd_nomina
values('0','020','Prima dominical');
insert into tbl_sat_pyd_nomina
values('0','021','Prima vacacional');
insert into tbl_sat_pyd_nomina
values('0','022','Prima por antig√ºedad');
insert into tbl_sat_pyd_nomina
values('0','023','Pagos por separaci√≥n');
insert into tbl_sat_pyd_nomina
values('0','024','Seguro de retiro');
insert into tbl_sat_pyd_nomina
values('0','025','Indemnizaciones');
insert into tbl_sat_pyd_nomina
values('0','026','Reembolso por funeral');
insert into tbl_sat_pyd_nomina
values('0','027','Cuotas de seguridad social pagadas por el patr√≥n');
insert into tbl_sat_pyd_nomina
values('0','028','Comisiones');
insert into tbl_sat_pyd_nomina
values('0','029','Vales de despensa');
insert into tbl_sat_pyd_nomina
values('0','030','Vales de restaurante');
insert into tbl_sat_pyd_nomina
values('0','031','Vales de gasolina');
insert into tbl_sat_pyd_nomina
values('0','032','Vales de ropa');
insert into tbl_sat_pyd_nomina
values('0','033','Ayuda para renta');
insert into tbl_sat_pyd_nomina
values('0','034','Ayuda para art√≠culos escolares');
insert into tbl_sat_pyd_nomina
values('0','035','Ayuda para anteojos');
insert into tbl_sat_pyd_nomina
values('0','036','Ayuda para transporte');
insert into tbl_sat_pyd_nomina
values('0','037','Ayuda para gastos de funeral');
insert into tbl_sat_pyd_nomina
values('0','038','Otros ingresos por salarios');
insert into tbl_sat_pyd_nomina
values('0','039','Jubilaciones, pensiones o haberes de retiro');
--Ahora deducciones
insert into tbl_sat_pyd_nomina
values('1','001','Seguridad social');
insert into tbl_sat_pyd_nomina
values('1','002','ISR');
insert into tbl_sat_pyd_nomina
values('1','003','Aportaciones a retiro, cesant√≠a en edad avanzada y vejez.');
insert into tbl_sat_pyd_nomina
values('1','004','Otros');
insert into tbl_sat_pyd_nomina
values('1','005','Aportaciones a Fondo de vivienda');
insert into tbl_sat_pyd_nomina
values('1','006','Descuento por incapacidad');
insert into tbl_sat_pyd_nomina
values('1','007','Pensi√≥n alimenticia');
insert into tbl_sat_pyd_nomina
values('1','008','Renta');
insert into tbl_sat_pyd_nomina
values('1','009','Pr√©stamos provenientes del Fondo Nacional de la Vivienda para los Trabajadores');
insert into tbl_sat_pyd_nomina
values('1','010','Pago por cr√©dito de vivienda');
insert into tbl_sat_pyd_nomina
values('1','011','Pago de abonos INFONACOT');
insert into tbl_sat_pyd_nomina
values('1','012','Anticipo de salarios');
insert into tbl_sat_pyd_nomina
values('1','013','Pagos hechos con exceso al trabajador');
insert into tbl_sat_pyd_nomina
values('1','014','Errores');
insert into tbl_sat_pyd_nomina
values('1','015','P√©rdidas');
insert into tbl_sat_pyd_nomina
values('1','016','Aver√≠as');
insert into tbl_sat_pyd_nomina
values('1','017','Adquisici√≥n de art√≠culos producidos por la empresa o establecimiento');
insert into tbl_sat_pyd_nomina
values('1','018','Cuotas para la constituci√≥n y fomento de sociedades cooperativas y de cajas de ahorro');
insert into tbl_sat_pyd_nomina
values('1','019','Cuotas sindicales');
insert into tbl_sat_pyd_nomina
values('1','020','Ausencia (Ausentismo)');
insert into tbl_sat_pyd_nomina
values('1','021','Cuotas obrero patronales');

--@FIN_BLOQUE
CREATE TABLE tbl_sat_codagrup
(
  codigo character varying(10) NOT NULL,
  descripcion character varying(254) NOT NULL,
  nivel smallint NOT NULL,
  CONSTRAINT pk_tbl_sat_codagrup PRIMARY KEY (codigo)
);
--FIN tbl_sat_codagrup

--@FIN_BLOQUE
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','101','Caja');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','101.01','Caja y efectivo');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','102','Bancos');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','102.01','Bancos nacionales');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','102.02','Bancos extranjeros');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','103','Inversiones');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','103.01','Inversiones temporales');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','103.02','Inversiones en fideicomisos');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','103.03','Otras inversiones');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','104','Otros instrumentos financieros');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','104.01','Otros instrumentos financieros');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','105','Clientes');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','105.01','Clientes nacionales');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','105.02','Clientes extranjeros');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','105.03','Clientes nacionales parte relacionada');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','105.04','Clientes extranjeros parte relacionada');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','106','Cuentas y documentos por cobrar a corto plazo');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','106.01','Cuentas y documentos por cobrar a corto plazo nacional');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','106.02','Cuentas y documentos por cobrar a corto plazo extranjero');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','106.03','Cuentas y documentos por cobrar a corto plazo nacional parte relacionada');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','106.04','Cuentas y documentos por cobrar a corto plazo extranjero parte relacionada');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','106.05','Intereses por cobrar a corto plazo nacional');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','106.06','Intereses por cobrar a corto plazo extranjero');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','106.07','Intereses por cobrar a corto plazo nacional parte relacionada');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','106.08','Intereses por cobrar a corto plazo extranjero parte relacionada');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','106.09','Otras cuentas y documentos por cobrar a corto plazo');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','106.10','Otras cuentas y documentos por cobrar a corto plazo parte relacionada');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','107','Deudores diversos');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','107.01','Funcionarios y empleados');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','107.02','Socios y accionistas');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','107.03','Partes relacionadas nacionales');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','107.04','Partes relacionadas extranjeros');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','107.05','Otros deudores diversos');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','108','Estimaci√≥n de cuentas incobrables');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','108.01','Estimaci√≥n de cuentas incobrables nacional');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','108.02','Estimaci√≥n de cuentas incobrables extranjero');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','108.03','Estimaci√≥n de cuentas incobrables nacional parte relacionada');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','108.04','Estimaci√≥n de cuentas incobrables extranjero parte relacionada');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','109','Pagos anticipados');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','109.01','Seguros y fianzas pagados por anticipado nacional');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','109.02','Seguros y fianzas pagados por anticipado extranjero');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','109.03','Seguros y fianzas pagados por anticipado nacional parte relacionada');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','109.04','Seguros y fianzas pagados por anticipado extranjero parte relacionada');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','109.05','Rentas pagados por anticipado nacional');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','109.06','Rentas pagados por anticipado extranjero');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','109.07','Rentas pagados por anticipado nacional parte relacionada');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','109.08','Rentas pagados por anticipado extranjero parte relacionada');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','109.09','Intereses pagados por anticipado nacional');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','109.10','Intereses pagados por anticipado extranjero');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','109.11','Intereses pagados por anticipado nacional parte relacionada');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','109.12','Intereses pagados por anticipado extranjero parte relacionada');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','109.13','Factoraje financiero pagados por anticipado nacional');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','109.14','Factoraje financiero pagados por anticipado extranjero');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','109.15','Factoraje financiero pagados por anticipado nacional parte relacionada');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','109.16','Factoraje financiero pagados por anticipado extranjero parte relacionada');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','109.17','Arrendamiento financiero pagados por anticipado nacional');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','109.18','Arrendamiento financiero pagados por anticipado extranjero');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','109.19','Arrendamiento financiero pagados por anticipado nacional parte relacionada');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','109.20','Arrendamiento financiero pagados por anticipado extranjero parte relacionada');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','109.21','P√©rdida por deterioro de pagos anticipados');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','109.22','Derechos fiduciarios');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','109.23','Otros pagos anticipados');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','110','Subsidio al empleo por aplicar');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','110.01','Subsidio al empleo por aplicar');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','111','Cr√©dito al diesel por acreditar');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','111.01','Cr√©dito al diesel por acreditar');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','112','Otros est√≠mulos');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','112.01','Otros est√≠mulos');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','113','Impuestos a favor');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','113.01','IVA a favor');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','113.02','ISR a favor');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','113.03','IETU a favor');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','113.04','IDE a favor');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','113.05','IA a favor');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','113.06','Subsidio al empleo');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','113.07','Pago de lo indebido');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','113.08','Otros impuestos a favor');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','114','Pagos provisionales');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','114.01','Pagos provisionales de ISR');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','115','Inventario');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','115.01','Inventario');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','115.02','Materia prima y materiales');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','115.03','Producci√≥n en proceso');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','115.04','Productos terminados');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','115.05','Mercanc√≠as en tr√°nsito');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','115.06','Mercanc√≠as en poder de terceros');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','115.07','Otros');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','116','Estimaci√≥n de inventarios obsoletos y de lento movimiento');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','116.01','Estimaci√≥n de inventarios obsoletos y de lento movimiento');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','117','Obras en proceso de inmuebles');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','117.01','Obras en proceso de inmuebles');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','118','Impuestos acreditables pagados');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','118.01','IVA acreditable pagado');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','118.02','IVA acreditable de importaci√≥n pagado');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','118.03','IEPS acreditable pagado');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','118.04','IEPS pagado en importaci√≥n');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','119','Impuestos acreditables por pagar');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','119.01','IVA pendiente de pago');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','119.02','IVA de importaci√≥n pendiente de pago');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','119.03','IEPS pendiente de pago');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','119.04','IEPS pendiente de pago en importaci√≥n');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','120','Anticipo a proveedores');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','120.01','Anticipo a proveedores nacional');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','120.02','Anticipo a proveedores extranjero');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','120.03','Anticipo a proveedores nacional parte relacionada');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','120.04','Anticipo a proveedores extranjero parte relacionada');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','121','Otros activos a corto plazo');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','121.01','Otros activos a corto plazo');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','151','Terrenos');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','151.01','Terrenos');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','152','Edificios');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','152.01','Edificios');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','153','Maquinaria y equipo');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','153.01','Maquinaria y equipo');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','154','Autom√≥viles, autobuses, camiones de carga, tractocamiones, montacargas y remolques');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','154.01','Autom√≥viles, autobuses, camiones de carga, tractocamiones, montacargas y remolques');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','155','Mobiliario y equipo de oficina');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','155.01','Mobiliario y equipo de oficina');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','156','Equipo de c√≥mputo');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','156.01','Equipo de c√≥mputo');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','157','Equipo de comunicaci√≥n');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','157.01','Equipo de comunicaci√≥n');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','158','Activos biol√≥gicos, vegetales y semovientes');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','158.01','Activos biol√≥gicos, vegetales y semovientes');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','159','Obras en proceso de activos fijos');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','159.01','Obras en proceso de activos fijos');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','160','Otros activos fijos');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','160.01','Otros activos fijos');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','161','Ferrocarriles');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','161.01','Ferrocarriles');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','162','Embarcaciones');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','162.01','Embarcaciones');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','163','Aviones');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','163.01','Aviones');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','164','Troqueles, moldes, matrices y herramental');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','164.01','Troqueles, moldes, matrices y herramental');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','165','Equipo de comunicaciones telef√≥nicas');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','165.01','Equipo de comunicaciones telef√≥nicas');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','166','Equipo de comunicaci√≥n satelital');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','166.01','Equipo de comunicaci√≥n satelital');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','167','Equipo de adaptaciones para personas con capacidades diferentes');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','167.01','Equipo de adaptaciones para personas con capacidades diferentes');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','168','Maquinaria y equipo de generaci√≥n de energ√≠a de fuentes renovables o de sistemas de cogeneraci√≥n de electricidad eficiente');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','168.01','Maquinaria y equipo de generaci√≥n de energ√≠a de fuentes renovables o de sistemas de cogeneraci√≥n de electricidad eficiente');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','169','Otra maquinaria y equipo');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','169.01','Otra maquinaria y equipo');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','170','Adaptaciones y mejoras');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','170.01','Adaptaciones y mejoras');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','171','Depreciaci√≥n acumulada de activos fijos');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','171.01','Depreciaci√≥n acumulada de edificios');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','171.02','Depreciaci√≥n acumulada de maquinaria y equipo');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','171.03','Depreciaci√≥n acumulada de autom√≥viles, autobuses, camiones de carga, tractocamiones, montacargas y remolques');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','171.04','Depreciaci√≥n acumulada de mobiliario y equipo de oficina');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','171.05','Depreciaci√≥n acumulada de equipo de c√≥mputo');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','171.06','Depreciaci√≥n acumulada de equipo de comunicaci√≥n');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','171.07','Depreciaci√≥n acumulada de activos biol√≥gicos, vegetales y semovientes');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','171.08','Depreciaci√≥n acumulada de otros activos fijos');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','171.09','Depreciaci√≥n acumulada de ferrocarriles');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','171.10','Depreciaci√≥n acumulada de embarcaciones');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','171.11','Depreciaci√≥n acumulada de aviones');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','171.12','Depreciaci√≥n acumulada de troqueles, moldes, matrices y herramental');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','171.13','Depreciaci√≥n acumulada de equipo de comunicaciones telef√≥nicas');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','171.14','Depreciaci√≥n acumulada de equipo de comunicaci√≥n satelital');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','171.15','Depreciaci√≥n acumulada de equipo de adaptaciones para personas con capacidades diferentes');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','171.16','Depreciaci√≥n acumulada de maquinaria y equipo de generaci√≥n de energ√≠a de fuentes renovables o de sistemas de cogeneraci√≥n de electricidad eficiente');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','171.17','Depreciaci√≥n acumulada de adaptaciones y mejoras');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','171.18','Depreciaci√≥n acumulada de otra maquinaria y equipo');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','172','P√©rdida por deterioro acumulado de activos fijos');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','172.01','P√©rdida por deterioro acumulado de edificios');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','172.02','P√©rdida por deterioro acumulado de maquinaria y equipo');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','172.03','P√©rdida por deterioro acumulado de autom√≥viles, autobuses, camiones de carga, tractocamiones, montacargas y remolques');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','172.04','P√©rdida por deterioro acumulado de mobiliario y equipo de oficina');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','172.05','P√©rdida por deterioro acumulado de equipo de c√≥mputo');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','172.06','P√©rdida por deterioro acumulado de equipo de comunicaci√≥n');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','172.07','P√©rdida por deterioro acumulado de activos biol√≥gicos, vegetales y semovientes');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','172.08','P√©rdida por deterioro acumulado de otros activos fijos');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','172.09','P√©rdida por deterioro acumulado de ferrocarriles');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','172.10','P√©rdida por deterioro acumulado de embarcaciones');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','172.11','P√©rdida por deterioro acumulado de aviones');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','172.12','P√©rdida por deterioro acumulado de troqueles, moldes, matrices y herramental');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','172.13','P√©rdida por deterioro acumulado de equipo de comunicaciones telef√≥nicas');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','172.14','P√©rdida por deterioro acumulado de equipo de comunicaci√≥n satelital');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','172.15','P√©rdida por deterioro acumulado de equipo de adaptaciones para personas con capacidades diferentes');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','172.16','P√©rdida por deterioro acumulado de maquinaria y equipo de generaci√≥n de energ√≠a de fuentes renovables o de sistemas de cogeneraci√≥n de electricidad eficiente');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','172.17','P√©rdida por deterioro acumulado de adaptaciones y mejoras');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','172.18','P√©rdida por deterioro acumulado de otra maquinaria y equipo');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','173','Gastos diferidos');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','173.01','Gastos diferidos');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','174','Gastos pre operativos');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','174.01','Gastos pre operativos');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','175','Regal√≠as, asistencia t√©cnica y otros gastos diferidos');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','175.01','Regal√≠as, asistencia t√©cnica y otros gastos diferidos');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','176','Activos intangibles');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','176.01','Activos intangibles');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','177','Gastos de organizaci√≥n');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','177.01','Gastos de organizaci√≥n');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','178','Investigaci√≥n y desarrollo de mercado');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','178.01','Investigaci√≥n y desarrollo de mercado');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','179','Marcas y patentes');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','179.01','Marcas y patentes');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','180','Cr√©dito mercantil');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','180.01','Cr√©dito mercantil');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','181','Gastos de instalaci√≥n');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','181.01','Gastos de instalaci√≥n');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','182','Otros activos diferidos');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','182.01','Otros activos diferidos');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','183','Amortizaci√≥n acumulada de activos diferidos');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','183.01','Amortizaci√≥n acumulada de gastos diferidos');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','183.02','Amortizaci√≥n acumulada de gastos pre operativos');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','183.03','Amortizaci√≥n acumulada de regal√≠as, asistencia t√©cnica y otros gastos diferidos');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','183.04','Amortizaci√≥n acumulada de activos intangibles');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','183.05','Amortizaci√≥n acumulada de gastos de organizaci√≥n');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','183.06','Amortizaci√≥n acumulada de investigaci√≥n y desarrollo de mercado');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','183.07','Amortizaci√≥n acumulada de marcas y patentes');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','183.08','Amortizaci√≥n acumulada de cr√©dito mercantil');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','183.09','Amortizaci√≥n acumulada de gastos de instalaci√≥n');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','183.10','Amortizaci√≥n acumulada de otros activos diferidos');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','184','Dep√≥sitos en garant√≠a');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','184.01','Dep√≥sitos de fianzas');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','184.02','Dep√≥sitos de arrendamiento de bienes inmuebles');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','184.03','Otros dep√≥sitos en garant√≠a');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','185','Impuestos diferidos');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','185.01','Impuestos diferidos ISR');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','186','Cuentas y documentos por cobrar a largo plazo');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','186.01','Cuentas y documentos por cobrar a largo plazo nacional');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','186.02','Cuentas y documentos por cobrar a largo plazo extranjero');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','186.03','Cuentas y documentos por cobrar a largo plazo nacional parte relacionada');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','186.04','Cuentas y documentos por cobrar a largo plazo extranjero parte relacionada');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','186.05','Intereses por cobrar a largo plazo nacional');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','186.06','Intereses por cobrar a largo plazo extranjero');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','186.07','Intereses por cobrar a largo plazo nacional parte relacionada');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','186.08','Intereses por cobrar a largo plazo extranjero parte relacionada');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','186.09','Otras cuentas y documentos por cobrar a largo plazo');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','186.10','Otras cuentas y documentos por cobrar a largo plazo parte relacionada');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','187','Participaci√≥n de los trabajadores en las utilidades diferidas');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','187.01','Participaci√≥n de los trabajadores en las utilidades diferidas');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','188','Inversiones permanentes en acciones');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','188.01','Inversiones a largo plazo en subsidiarias');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','188.02','Inversiones a largo plazo en asociadas');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','188.03','Otras inversiones permanentes en acciones');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','189','Estimaci√≥n por deterioro de inversiones permanentes en acciones');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','189.01','Estimaci√≥n por deterioro de inversiones permanentes en acciones');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','190','Otros instrumentos financieros');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','190.01','Otros instrumentos financieros');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','191','Otros activos a largo plazo');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','191.01','Otros activos a largo plazo');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','201','Proveedores');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','201.01','Proveedores nacionales');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','201.02','Proveedores extranjeros');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','201.03','Proveedores nacionales parte relacionada');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','201.04','Proveedores extranjeros parte relacionada');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','202','Cuentas por pagar a corto plazo');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','202.01','Documentos por pagar bancario y financiero nacional');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','202.02','Documentos por pagar bancario y financiero extranjero');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','202.03','Documentos y cuentas por pagar a corto plazo nacional');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','202.04','Documentos y cuentas por pagar a corto plazo extranjero');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','202.05','Documentos y cuentas por pagar a corto plazo nacional parte relacionada');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','202.06','Documentos y cuentas por pagar a corto plazo extranjero parte relacionada');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','202.07','Intereses por pagar a corto plazo nacional');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','202.08','Intereses por pagar a corto plazo extranjero');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','202.09','Intereses por pagar a corto plazo nacional parte relacionada');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','202.10','Intereses por pagar a corto plazo extranjero parte relacionada');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','202.11','Dividendo por pagar nacional');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','202.12','Dividendo por pagar extranjero');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','203','Cobros anticipados a corto plazo');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','203.01','Rentas cobradas por anticipado a corto plazo nacional');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','203.02','Rentas cobradas por anticipado a corto plazo extranjero');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','203.03','Rentas cobradas por anticipado a corto plazo nacional parte relacionada');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','203.04','Rentas cobradas por anticipado a corto plazo extranjero parte relacionada');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','203.05','Intereses cobrados por anticipado a corto plazo nacional');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','203.06','Intereses cobrados por anticipado a corto plazo extranjero');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','203.07','Intereses cobrados por anticipado a corto plazo nacional parte relacionada');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','203.08','Intereses cobrados por anticipado a corto plazo extranjero parte relacionada');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','203.09','Factoraje financiero cobrados por anticipado a corto plazo nacional');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','203.10','Factoraje financiero cobrados por anticipado a corto plazo extranjero');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','203.11','Factoraje financiero cobrados por anticipado a corto plazo nacional parte relacionada');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','203.12','Factoraje financiero cobrados por anticipado a corto plazo extranjero parte relacionada');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','203.13','Arrendamiento financiero cobrados por anticipado a corto plazo nacional');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','203.14','Arrendamiento financiero cobrados por anticipado a corto plazo extranjero');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','203.15','Arrendamiento financiero cobrados por anticipado a corto plazo nacional parte relacionada');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','203.16','Arrendamiento financiero cobrados por anticipado a corto plazo extranjero parte relacionada');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','203.17','Derechos fiduciarios');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','203.18','Otros cobros anticipados');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','204','Instrumentos financieros a corto plazo');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','204.01','Instrumentos financieros a corto plazo');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','205','Acreedores diversos a corto plazo');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','205.01','Socios, accionistas o representante legal');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','205.02','Acreedores diversos a corto plazo nacional');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','205.03','Acreedores diversos a corto plazo extranjero');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','205.04','Acreedores diversos a corto plazo nacional parte relacionada');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','205.05','Acreedores diversos a corto plazo extranjero parte relacionada');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','205.06','Otros acreedores diversos a corto plazo');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','206','Anticipo de cliente');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','206.01','Anticipo de cliente nacional');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','206.02','Anticipo de cliente extranjero');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','206.03','Anticipo de cliente nacional parte relacionada');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','206.04','Anticipo de cliente extranjero parte relacionada');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','206.05','Otros anticipos de clientes');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','207','Impuestos trasladados');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','207.01','IVA trasladado');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','207.02','IEPS trasladado');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','208','Impuestos trasladados cobrados');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','208.01','IVA trasladado cobrado');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','208.02','IEPS trasladado cobrado');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','209','Impuestos trasladados no cobrados');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','209.01','IVA trasladado no cobrado');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','209.02','IEPS trasladado no cobrado');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','210','Provisi√≥n de sueldos y salarios por pagar');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','210.01','Provisi√≥n de sueldos y salarios por pagar');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','210.02','Provisi√≥n de vacaciones por pagar');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','210.03','Provisi√≥n de aguinaldo por pagar');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','210.04','Provisi√≥n de fondo de ahorro por pagar');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','210.05','Provisi√≥n de asimilados a salarios por pagar');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','210.06','Provisi√≥n de anticipos o remanentes por distribuir');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','210.07','Provisi√≥n de otros sueldos y salarios por pagar');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','211','Provisi√≥n de contribuciones de seguridad social por pagar');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','211.01','Provisi√≥n de IMSS patronal por pagar');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','211.02','Provisi√≥n de SAR por pagar');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','211.03','Provisi√≥n de infonavit por pagar');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','212','Provisi√≥n de impuesto estatal sobre n√≥mina por pagar');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','212.01','Provisi√≥n de impuesto estatal sobre n√≥mina por pagar');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','213','Impuestos y derechos por pagar');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','213.01','IVA por pagar');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','213.02','IEPS por pagar');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','213.03','ISR por pagar');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','213.04','Impuesto estatal sobre n√≥mina por pagar');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','213.05','Impuesto estatal y municipal por pagar');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','213.06','Derechos por pagar');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','213.07','Otros impuestos por pagar');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','214','Dividendos por pagar');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','214.01','Dividendos por pagar');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','215','PTU por pagar');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','215.01','PTU por pagar');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','215.02','PTU por pagar de ejercicios anteriores');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','215.03','Provisi√≥n de PTU por pagar');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','216','Impuestos retenidos');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','216.01','Impuestos retenidos de ISR por sueldos y salarios');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','216.02','Impuestos retenidos de ISR por asimilados a salarios');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','216.03','Impuestos retenidos de ISR por arrendamiento');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','216.04','Impuestos retenidos de ISR por servicios profesionales');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','216.05','Impuestos retenidos de ISR por dividendos');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','216.06','Impuestos retenidos de ISR por intereses');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','216.07','Impuestos retenidos de ISR por pagos al extranjero');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','216.08','Impuestos retenidos de ISR por venta de acciones');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','216.09','Impuestos retenidos de ISR por venta de partes sociales');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','216.10','Impuestos retenidos de IVA');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','216.11','Retenciones de IMSS a los trabajadores');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','216.12','Otras impuestos retenidos');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','217','Pagos realizados por cuenta de terceros');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','217.01','Pagos realizados por cuenta de terceros');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','218','Otros pasivos a corto plazo');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','218.01','Otros pasivos a corto plazo');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','251','Acreedores diversos a largo plazo');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','251.01','Socios, accionistas o representante legal');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','251.02','Acreedores diversos a largo plazo nacional');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','251.03','Acreedores diversos a largo plazo extranjero');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','251.04','Acreedores diversos a largo plazo nacional parte relacionada');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','251.05','Acreedores diversos a largo plazo extranjero parte relacionada');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','251.06','Otros acreedores diversos a largo plazo');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','252','Cuentas por pagar a largo plazo');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','252.01','Documentos bancarios y financieros por pagar a largo plazo nacional');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','252.02','Documentos bancarios y financieros por pagar a largo plazo extranjero');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','252.03','Documentos y cuentas por pagar a largo plazo nacional');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','252.04','Documentos y cuentas por pagar a largo plazo extranjero');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','252.05','Documentos y cuentas por pagar a largo plazo nacional parte relacionada');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','252.06','Documentos y cuentas por pagar a largo plazo extranjero parte relacionada');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','252.07','Hipotecas por pagar a largo plazo nacional');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','252.08','Hipotecas por pagar a largo plazo extranjero');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','252.09','Hipotecas por pagar a largo plazo nacional parte relacionada');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','252.10','Hipotecas por pagar a largo plazo extranjero parte relacionada');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','252.11','Intereses por pagar a largo plazo nacional');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','252.12','Intereses por pagar a largo plazo extranjero');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','252.13','Intereses por pagar a largo plazo nacional parte relacionada');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','252.14','Intereses por pagar a largo plazo extranjero parte relacionada');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','252.15','Dividendos por pagar nacionales');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','252.16','Dividendos por pagar extranjeros');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','252.17','Otras cuentas y documentos por pagar a largo plazo');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','253','Cobros anticipados a largo plazo');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','253.01','Rentas cobradas por anticipado a largo plazo nacional');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','253.02','Rentas cobradas por anticipado a largo plazo extranjero');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','253.03','Rentas cobradas por anticipado a largo plazo nacional parte relacionada');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','253.04','Rentas cobradas por anticipado a largo plazo extranjero parte relacionada');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','253.05','Intereses cobrados por anticipado a largo plazo nacional');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','253.06','Intereses cobrados por anticipado a largo plazo extranjero');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','253.07','Intereses cobrados por anticipado a largo plazo nacional parte relacionada');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','253.08','Intereses cobrados por anticipado a largo plazo extranjero parte relacionada');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','253.09','Factoraje financiero cobrados por anticipado a largo plazo nacional');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','253.10','Factoraje financiero cobrados por anticipado a largo plazo extranjero');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','253.11','Factoraje financiero cobrados por anticipado a largo plazo nacional parte relacionada');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','253.12','Factoraje financiero cobrados por anticipado a largo plazo extranjero parte relacionada');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','253.13','Arrendamiento financiero cobrados por anticipado a largo plazo nacional');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','253.14','Arrendamiento financiero cobrados por anticipado a largo plazo extranjero');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','253.15','Arrendamiento financiero cobrados por anticipado a largo plazo nacional parte relacionada');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','253.16','Arrendamiento financiero cobrados por anticipado a largo plazo extranjero parte relacionada');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','253.17','Derechos fiduciarios');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','253.18','Otros cobros anticipados');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','254','Instrumentos financieros a largo plazo');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','254.01','Instrumentos financieros a largo plazo');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','255','Pasivos por beneficios a los empleados a largo plazo');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','255.01','Pasivos por beneficios a los empleados a largo plazo');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','256','Otros pasivos a largo plazo');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','256.01','Otros pasivos a largo plazo');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','257','Participaci√≥n de los trabajadores en las utilidades diferida');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','257.01','Participaci√≥n de los trabajadores en las utilidades diferida');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','258','Obligaciones contra√≠das de fideicomisos');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','258.01','Obligaciones contra√≠das de fideicomisos');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','259','Impuestos diferidos');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','259.01','ISR diferido');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','259.02','ISR por dividendo diferido');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','259.03','Otros impuestos diferidos');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','260','Pasivos diferidos');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','260.01','Pasivos diferidos');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','301','Capital social');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','301.01','Capital fijo');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','301.02','Capital variable');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','301.03','Aportaciones para futuros aumentos de capital');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','301.04','Prima en suscripci√≥n de acciones');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','301.05','Prima en suscripci√≥n de partes sociales');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','302','Patrimonio');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','302.01','Patrimonio');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','302.02','Aportaci√≥n patrimonial');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','302.03','D√©ficit o remanente del ejercicio');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','303','Reserva legal');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','303.01','Reserva legal');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','304','Resultado de ejercicios anteriores');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','304.01','Utilidad de ejercicios anteriores');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','304.02','P√©rdida de ejercicios anteriores');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','304.03','Resultado integral de ejercicios anteriores');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','304.04','D√©ficit o remanente de ejercicio anteriores');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','305','Resultado del ejercicio');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','305.01','Utilidad del ejercicio');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','305.02','P√©rdida del ejercicio');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','305.03','Resultado integral');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','306','Otras cuentas de capital');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','306.01','Otras cuentas de capital');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','401','Ingresos');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','401.01','Ventas y/o servicios gravados a la tasa general');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','401.02','Ventas y/o servicios gravados a la tasa general de contado');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','401.03','Ventas y/o servicios gravados a la tasa general a cr√©dito');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','401.04','Ventas y/o servicios gravados al 0%');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','401.05','Ventas y/o servicios gravados al 0% de contado');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','401.06','Ventas y/o servicios gravados al 0% a cr√©dito');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','401.07','Ventas y/o servicios exentos');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','401.08','Ventas y/o servicios exentos de contado');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','401.09','Ventas y/o servicios exentos a cr√©dito');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','401.10','Ventas y/o servicios gravados a la tasa general nacionales partes relacionadas');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','401.11','Ventas y/o servicios gravados a la tasa general extranjeros partes relacionadas');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','401.12','Ventas y/o servicios gravados al 0% nacionales partes relacionadas');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','401.13','Ventas y/o servicios gravados al 0% extranjeros partes relacionadas');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','401.14','Ventas y/o servicios exentos nacionales partes relacionadas');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','401.15','Ventas y/o servicios exentos extranjeros partes relacionadas');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','401.16','Ingresos por servicios administrativos');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','401.17','Ingresos por servicios administrativos nacionales partes relacionadas');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','401.18','Ingresos por servicios administrativos extranjeros partes relacionadas');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','401.19','Ingresos por servicios profesionales');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','401.20','Ingresos por servicios profesionales nacionales partes relacionadas');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','401.21','Ingresos por servicios profesionales extranjeros partes relacionadas');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','401.22','Ingresos por arrendamiento');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','401.23','Ingresos por arrendamiento nacionales partes relacionadas');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','401.24','Ingresos por arrendamiento extranjeros partes relacionadas');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','401.25','Ingresos por exportaci√≥n');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','401.26','Ingresos por comisiones');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','401.27','Ingresos por maquila');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','401.28','Ingresos por coordinados');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','401.29','Ingresos por regal√≠as');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','401.30','Ingresos por asistencia t√©cnica');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','401.31','Ingresos por donativos');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','401.32','Ingresos por intereses (actividad propia)');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','401.33','Ingresos de copropiedad');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','401.34','Ingresos por fideicomisos');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','401.35','Ingresos por factoraje financiero');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','401.36','Ingresos por arrendamiento financiero');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','401.37','Ingresos de extranjeros con establecimiento en el pa√≠s');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','401.38','Otros ingresos propios');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','402','Devoluciones, descuentos o bonificaciones sobre ingresos');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','402.01','Devoluciones, descuentos o bonificaciones sobre ventas y/o servicios a la tasa general');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','402.02','Devoluciones, descuentos o bonificaciones sobre ventas y/o servicios al 0%');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','402.03','Devoluciones, descuentos o bonificaciones sobre ventas y/o servicios exentos');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','402.04','Devoluciones, descuentos o bonificaciones de otros ingresos');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','403','Otros ingresos');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','403.01','Otros Ingresos');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','403.02','Otros ingresos nacionales parte relacionada');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','403.03','Otros ingresos extranjeros parte relacionada');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','403.04','Ingresos por operaciones discontinuas');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','403.05','Ingresos por condonaci√≥n de adeudo');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','501','Costo de venta y/o servicio');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','501.01','Costo de venta');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','501.02','Costo de servicios (Mano de obra)');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','501.03','Materia prima directa utilizada para la producci√≥n');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','501.04','Materia prima consumida en el proceso productivo');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','501.05','Mano de obra directa consumida');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','501.06','Mano de obra directa');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','501.07','Cargos indirectos de producci√≥n');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','501.08','Otros conceptos de costo');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','502','Compras');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','502.01','Compras nacionales');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','502.02','Compras nacionales parte relacionada');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','502.03','Compras de Importaci√≥n');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','502.04','Compras de Importaci√≥n partes relacionadas');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','503','Devoluciones, descuentos o bonificaciones sobre compras');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','503.01','Devoluciones, descuentos o bonificaciones sobre compras');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','504','Otras cuentas de costos');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','504.01','Gastos indirectos de fabricaci√≥n');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','504.02','Gastos indirectos de fabricaci√≥n de partes relacionadas nacionales');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','504.03','Gastos indirectos de fabricaci√≥n de partes relacionadas extranjeras');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','504.04','Otras cuentas de costos incurridos');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','504.05','Otras cuentas de costos incurridos con partes relacionadas nacionales');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','504.06','Otras cuentas de costos incurridos con partes relacionadas extranjeras');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','504.07','Depreciaci√≥n de edificios');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','504.08','Depreciaci√≥n de maquinaria y equipo');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','504.09','Depreciaci√≥n de autom√≥viles, autobuses, camiones de carga, tractocamiones, montacargas y remolques');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','504.10','Depreciaci√≥n de mobiliario y equipo de oficina');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','504.11','Depreciaci√≥n de equipo de c√≥mputo');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','504.12','Depreciaci√≥n de equipo de comunicaci√≥n');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','504.13','Depreciaci√≥n de activos biol√≥gicos, vegetales y semovientes');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','504.14','Depreciaci√≥n de otros activos fijos');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','504.15','Depreciaci√≥n de ferrocarriles');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','504.16','Depreciaci√≥n de embarcaciones');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','504.17','Depreciaci√≥n de aviones');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','504.18','Depreciaci√≥n de troqueles, moldes, matrices y herramental');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','504.19','Depreciaci√≥n de equipo de comunicaciones telef√≥nicas');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','504.20','Depreciaci√≥n de equipo de comunicaci√≥n satelital');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','504.21','Depreciaci√≥n de equipo de adaptaciones para personas con capacidades diferentes');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','504.22','Depreciaci√≥n de maquinaria y equipo de generaci√≥n de energ√≠a de fuentes renovables o de sistemas de cogeneraci√≥n de electricidad eficiente');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','504.23','Depreciaci√≥n de adaptaciones y mejoras');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','504.24','Depreciaci√≥n de otra maquinaria y equipo');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','504.25','Otras cuentas de costos');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','505','Costo de activo fijo');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','505.01','Costo por venta de activo fijo');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','505.02','Costo por baja de activo fijo');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','601',' Gastos generales');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','601.01',' Sueldos y salarios');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','601.02',' Compensaciones');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','601.03',' Tiempos extras');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','601.04',' Premios de asistencia');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','601.05',' Premios de puntualidad');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','601.06',' Vacaciones');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','601.07',' Prima vacacional');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','601.08',' Prima dominical');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','601.09',' D√≠as festivos');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','601.10',' Gratificaciones');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','601.11',' Primas de antig√ºedad');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','601.12',' Aguinaldo');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','601.13',' Indemnizaciones');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','601.14',' Destajo');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','601.15',' Despensa');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','601.16',' Transporte');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','601.17',' Servicio m√©dico');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','601.18',' Ayuda en gastos funerarios');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','601.19',' Fondo de ahorro');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','601.20',' Cuotas sindicales');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','601.21',' PTU');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','601.22',' Est√≠mulo al personal');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','601.23',' Previsi√≥n social');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','601.24',' Aportaciones para el plan de jubilaci√≥n');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','601.25',' Otras prestaciones al personal');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','601.26',' Cuotas al IMSS');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','601.27',' Aportaciones al infonavit');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','601.28',' Aportaciones al SAR');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','601.29',' Impuesto estatal sobre n√≥minas');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','601.30',' Otras aportaciones');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','601.31',' Asimilados a salarios');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','601.32',' Servicios administrativos');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','601.33',' Servicios administrativos partes relacionadas');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','601.34',' Honorarios a personas f√≠sicas residentes nacionales');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','601.35',' Honorarios a personas f√≠sicas residentes nacionales partes relacionadas');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','601.36',' Honorarios a personas f√≠sicas residentes del extranjero');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','601.37',' Honorarios a personas f√≠sicas residentes del extranjero partes relacionadas');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','601.38',' Honorarios a personas morales residentes nacionales');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','601.39',' Honorarios a personas morales residentes nacionales partes relacionadas');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','601.40',' Honorarios a personas morales residentes del extranjero');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','601.41',' Honorarios a personas morales residentes del extranjero partes relacionadas');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','601.42',' Honorarios aduanales personas f√≠sicas');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','601.43',' Honorarios aduanales personas morales');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','601.44',' Honorarios al consejo de administraci√≥n');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','601.45','Arrendamiento a personas f√≠sicas residentes nacionales');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','601.46','Arrendamiento a personas morales residentes nacionales');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','601.47','Arrendamiento a residentes del extranjero');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','601.48','Combustibles y lubricantes');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','601.49','Vi√°ticos y gastos de viaje');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','601.50','Tel√©fono, internet');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','601.51','Agua');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','601.52','Energ√≠a el√©ctrica');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','601.53','Vigilancia y seguridad');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','601.54','Limpieza');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','601.55','Papeler√≠a y art√≠culos de oficina');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','601.56','Mantenimiento y conservaci√≥n');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','601.57','Seguros y fianzas');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','601.58','Otros impuestos y derechos');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','601.59','Recargos fiscales');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','601.60','Cuotas y suscripciones');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','601.61','Propaganda y publicidad');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','601.62','Capacitaci√≥n al personal');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','601.63','Donativos y ayudas');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','601.64','Asistencia t√©cnica');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','601.65','Regal√≠as sujetas a otros porcentajes');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','601.66','Regal√≠as sujetas al 5%');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','601.67','Regal√≠as sujetas al 10%');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','601.68','Regal√≠as sujetas al 15%');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','601.69','Regal√≠as sujetas al 25%');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','601.70','Regal√≠as sujetas al 30%');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','601.71','Regal√≠as sin retenci√≥n');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','601.72','Fletes y acarreos');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','601.73','Gastos de importaci√≥n');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','601.74','Comisiones sobre ventas');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','601.75','Comisiones por tarjetas de cr√©dito');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','601.76','Patentes y marcas');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','601.77','Uniformes');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','601.78','Prediales');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','601.79','Gastos generales de urbanizaci√≥n');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','601.80','Gastos generales de construcci√≥n');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','601.81','Fletes del extranjero');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','601.82','Recolecci√≥n de bienes del sector agropecuario y/o ganadero');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','601.83','Gastos no deducibles (sin requisitos fiscales)');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','601.84','Otros gastos generales');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','602','Gastos de venta');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','602.01','Sueldos y salarios');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','602.02','Compensaciones');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','602.03','Tiempos extras');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','602.04','Premios de asistencia');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','602.05','Premios de puntualidad');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','602.06','Vacaciones');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','602.07','Prima vacacional');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','602.08','Prima dominical');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','602.09','D√≠as festivos');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','602.10','Gratificaciones');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','602.11','Primas de antig√ºedad');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','602.12','Aguinaldo');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','602.13','Indemnizaciones');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','602.14','Destajo');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','602.15','Despensa');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','602.16','Transporte');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','602.17','Servicio m√©dico');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','602.18','Ayuda en gastos funerarios');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','602.19','Fondo de ahorro');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','602.20','Cuotas sindicales');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','602.21','PTU');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','602.22','Est√≠mulo al personal');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','602.23','Previsi√≥n social');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','602.24','Aportaciones para el plan de jubilaci√≥n');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','602.25','Otras prestaciones al personal');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','602.26','Cuotas al IMSS');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','602.27','Aportaciones al infonavit');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','602.28','Aportaciones al SAR');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','602.29','Impuesto estatal sobre n√≥minas');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','602.30','Otras aportaciones');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','602.31','Asimilados a salarios');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','602.32','Servicios administrativos');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','602.33','Servicios administrativos partes relacionadas');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','602.34','Honorarios a personas f√≠sicas residentes nacionales');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','602.35','Honorarios a personas f√≠sicas residentes nacionales partes relacionadas');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','602.36','Honorarios a personas f√≠sicas residentes del extranjero');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','602.37','Honorarios a personas f√≠sicas residentes del extranjero partes relacionadas');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','602.38','Honorarios a personas morales residentes nacionales');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','602.39','Honorarios a personas morales residentes nacionales partes relacionadas');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','602.40','Honorarios a personas morales residentes del extranjero');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','602.41','Honorarios a personas morales residentes del extranjero partes relacionadas');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','602.42','Honorarios aduanales personas f√≠sicas');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','602.43','Honorarios aduanales personas morales');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','602.44','Honorarios al consejo de administraci√≥n');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','602.45','Arrendamiento a personas f√≠sicas residentes nacionales');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','602.46','Arrendamiento a personas morales residentes nacionales');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','602.47','Arrendamiento a residentes del extranjero');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','602.48','Combustibles y lubricantes');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','602.49','Vi√°ticos y gastos de viaje');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','602.50','Tel√©fono, internet');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','602.51','Agua');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','602.52','Energ√≠a el√©ctrica');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','602.53','Vigilancia y seguridad');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','602.54','Limpieza');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','602.55','Papeler√≠a y art√≠culos de oficina');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','602.56','Mantenimiento y conservaci√≥n');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','602.57','Seguros y fianzas');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','602.58','Otros impuestos y derechos');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','602.59','Recargos fiscales');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','602.60','Cuotas y suscripciones');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','602.61','Propaganda y publicidad');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','602.62','Capacitaci√≥n al personal');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','602.63','Donativos y ayudas');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','602.64','Asistencia t√©cnica');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','602.65','Regal√≠as sujetas a otros porcentajes');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','602.66','Regal√≠as sujetas al 5%');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','602.67','Regal√≠as sujetas al 10%');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','602.68','Regal√≠as sujetas al 15%');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','602.69','Regal√≠as sujetas al 25%');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','602.70','Regal√≠as sujetas al 30%');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','602.71','Regal√≠as sin retenci√≥n');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','602.72','Fletes y acarreos');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','602.73','Gastos de importaci√≥n');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','602.74','Comisiones sobre ventas');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','602.75','Comisiones por tarjetas de cr√©dito');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','602.76','Patentes y marcas');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','602.77','Uniformes');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','602.78','Prediales');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','602.79','Gastos de venta de urbanizaci√≥n');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','602.80','Gastos de venta de construcci√≥n');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','602.81','Fletes del extranjero');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','602.82','Recolecci√≥n de bienes del sector agropecuario y/o ganadero');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','602.83','Gastos no deducibles (sin requisitos fiscales)');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','602.84','Otros gastos de venta');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','603','Gastos de administraci√≥n');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','603.01','Sueldos y salarios');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','603.02','Compensaciones');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','603.03','Tiempos extras');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','603.04','Premios de asistencia');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','603.05','Premios de puntualidad');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','603.06','Vacaciones');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','603.07','Prima vacacional');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','603.08','Prima dominical');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','603.09','D√≠as festivos');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','603.10','Gratificaciones');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','603.11','Primas de antig√ºedad');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','603.12','Aguinaldo');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','603.13','Indemnizaciones');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','603.14','Destajo');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','603.15','Despensa');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','603.16','Transporte');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','603.17','Servicio m√©dico');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','603.18','Ayuda en gastos funerarios');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','603.19','Fondo de ahorro');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','603.20','Cuotas sindicales');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','603.21','PTU');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','603.22','Est√≠mulo al personal');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','603.23','Previsi√≥n social');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','603.24','Aportaciones para el plan de jubilaci√≥n');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','603.25','Otras prestaciones al personal');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','603.26','Cuotas al IMSS');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','603.27','Aportaciones al infonavit');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','603.28','Aportaciones al SAR');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','603.29','Impuesto estatal sobre n√≥minas');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','603.30','Otras aportaciones');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','603.31','Asimilados a salarios');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','603.32','Servicios administrativos');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','603.33','Servicios administrativos partes relacionadas');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','603.34','Honorarios a personas f√≠sicas residentes nacionales');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','603.35','Honorarios a personas f√≠sicas residentes nacionales partes relacionadas');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','603.36','Honorarios a personas f√≠sicas residentes del extranjero');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','603.37','Honorarios a personas f√≠sicas residentes del extranjero partes relacionadas');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','603.38','Honorarios a personas morales residentes nacionales');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','603.39','Honorarios a personas morales residentes nacionales partes relacionadas');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','603.40','Honorarios a personas morales residentes del extranjero');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','603.41','Honorarios a personas morales residentes del extranjero partes relacionadas');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','603.42','Honorarios aduanales personas f√≠sicas');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','603.43','Honorarios aduanales personas morales');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','603.44','Honorarios al consejo de administraci√≥n');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','603.45','Arrendamiento a personas f√≠sicas residentes nacionales');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','603.46','Arrendamiento a personas morales residentes nacionales');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','603.47','Arrendamiento a residentes del extranjero');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','603.48','Combustibles y lubricantes');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','603.49','Vi√°ticos y gastos de viaje');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','603.50','Tel√©fono, internet');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','603.51','Agua');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','603.52','Energ√≠a el√©ctrica');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','603.53','Vigilancia y seguridad');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','603.54','Limpieza');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','603.55','Papeler√≠a y art√≠culos de oficina');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','603.56','Mantenimiento y conservaci√≥n');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','603.57','Seguros y fianzas');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','603.58','Otros impuestos y derechos');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','603.59','Recargos fiscales');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','603.60','Cuotas y suscripciones');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','603.61','Propaganda y publicidad');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','603.62','Capacitaci√≥n al personal');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','603.63','Donativos y ayudas');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','603.64','Asistencia t√©cnica');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','603.65','Regal√≠as sujetas a otros porcentajes');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','603.66','Regal√≠as sujetas al 5%');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','603.67','Regal√≠as sujetas al 10%');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','603.68','Regal√≠as sujetas al 15%');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','603.69','Regal√≠as sujetas al 25%');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','603.70','Regal√≠as sujetas al 30%');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','603.71','Regal√≠as sin retenci√≥n');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','603.72','Fletes y acarreos');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','603.73','Gastos de importaci√≥n');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','603.74','Patentes y marcas');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','603.75','Uniformes');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','603.76','Prediales');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','603.77','Gastos de administraci√≥n de urbanizaci√≥n');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','603.78','Gastos de administraci√≥n de construcci√≥n');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','603.79','Fletes del extranjero');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','603.80','Recolecci√≥n de bienes del sector agropecuario y/o ganadero');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','603.81','Gastos no deducibles (sin requisitos fiscales)');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','603.82','Otros gastos de administraci√≥n');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','604','Gastos de fabricaci√≥n');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','604.01','Sueldos y salarios');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','604.02','Compensaciones');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','604.03','Tiempos extras');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','604.04','Premios de asistencia');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','604.05','Premios de puntualidad');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','604.06','Vacaciones');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','604.07','Prima vacacional');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','604.08','Prima dominical');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','604.09','D√≠as festivos');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','604.10','Gratificaciones');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','604.11','Primas de antig√ºedad');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','604.12','Aguinaldo');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','604.13','Indemnizaciones');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','604.14','Destajo');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','604.15','Despensa');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','604.16','Transporte');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','604.17','Servicio m√©dico');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','604.18','Ayuda en gastos funerarios');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','604.19','Fondo de ahorro');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','604.20','Cuotas sindicales');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','604.21','PTU');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','604.22','Est√≠mulo al personal');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','604.23','Previsi√≥n social');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','604.24','Aportaciones para el plan de jubilaci√≥n');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','604.25','Otras prestaciones al personal');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','604.26','Cuotas al IMSS');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','604.27','Aportaciones al infonavit');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','604.28','Aportaciones al SAR');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','604.29','Impuesto estatal sobre n√≥minas');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','604.30','Otras aportaciones');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','604.31','Asimilados a salarios');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','604.32','Servicios administrativos');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','604.33','Servicios administrativos partes relacionadas');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','604.34','Honorarios a personas f√≠sicas residentes nacionales');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','604.35','Honorarios a personas f√≠sicas residentes nacionales partes relacionadas');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','604.36','Honorarios a personas f√≠sicas residentes del extranjero');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','604.37','Honorarios a personas f√≠sicas residentes del extranjero partes relacionadas');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','604.38','Honorarios a personas morales residentes nacionales');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','604.39','Honorarios a personas morales residentes nacionales partes relacionadas');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','604.40','Honorarios a personas morales residentes del extranjero');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','604.41','Honorarios a personas morales residentes del extranjero partes relacionadas');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','604.42','Honorarios aduanales personas f√≠sicas');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','604.43','Honorarios aduanales personas morales');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','604.44','Honorarios al consejo de administraci√≥n');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','604.45','Arrendamiento a personas f√≠sicas residentes nacionales');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','604.46','Arrendamiento a personas morales residentes nacionales');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','604.47','Arrendamiento a residentes del extranjero');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','604.48','Combustibles y lubricantes');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','604.49','Vi√°ticos y gastos de viaje');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','604.50','Tel√©fono, internet');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','604.51','Agua');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','604.52','Energ√≠a el√©ctrica');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','604.53','Vigilancia y seguridad');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','604.54','Limpieza');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','604.55','Papeler√≠a y art√≠culos de oficina');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','604.56','Mantenimiento y conservaci√≥n');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','604.57','Seguros y fianzas');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','604.58','Otros impuestos y derechos');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','604.59','Recargos fiscales');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','604.60','Cuotas y suscripciones');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','604.61','Propaganda y publicidad');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','604.62','Capacitaci√≥n al personal');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','604.63','Donativos y ayudas');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','604.64','Asistencia t√©cnica');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','604.65','Regal√≠as sujetas a otros porcentajes');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','604.66','Regal√≠as sujetas al 5%');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','604.67','Regal√≠as sujetas al 10%');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','604.68','Regal√≠as sujetas al 15%');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','604.69','Regal√≠as sujetas al 25%');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','604.70','Regal√≠as sujetas al 30%');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','604.71','Regal√≠as sin retenci√≥n');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','604.72','Fletes y acarreos');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','604.73','Gastos de importaci√≥n');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','604.74','Patentes y marcas');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','604.75','Uniformes');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','604.76','Prediales');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','604.77','Gastos de fabricaci√≥n de urbanizaci√≥n');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','604.78','Gastos de fabricaci√≥n de construcci√≥n');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','604.79','Fletes del extranjero');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','604.80','Recolecci√≥n de bienes del sector agropecuario y/o ganadero');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','604.81','Gastos no deducibles (sin requisitos fiscales)');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','604.82','Otros gastos de fabricaci√≥n');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','605','Mano de obra directa');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','605.01','Mano de obra');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','605.02','Sueldos y Salarios');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','605.03','Compensaciones');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','605.04','Tiempos extras');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','605.05','Premios de asistencia');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','605.06','Premios de puntualidad');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','605.07','Vacaciones');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','605.08','Prima vacacional');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','605.09','Prima dominical');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','605.10','D√≠as festivos');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','605.11','Gratificaciones');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','605.12','Primas de antig√ºedad');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','605.13','Aguinaldo');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','605.14','Indemnizaciones');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','605.15','Destajo');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','605.16','Despensa');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','605.17','Transporte');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','605.18','Servicio m√©dico');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','605.19','Ayuda en gastos funerarios');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','605.20','Fondo de ahorro');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','605.21','Cuotas sindicales');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','605.22','PTU');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','605.23','Est√≠mulo al personal');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','605.24','Previsi√≥n social');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','605.25','Aportaciones para el plan de jubilaci√≥n');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','605.26','Otras prestaciones al personal');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','605.27','Asimilados a salarios');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','605.28','Cuotas al IMSS');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','605.29','Aportaciones al infonavit');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','605.30','Aportaciones al SAR');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','605.31','Otros costos de mano de obra directa');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','606','Facilidades administrativas fiscales');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','606.01','Facilidades administrativas fiscales');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','607','Participaci√≥n de los trabajadores en las utilidades');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','607.01','Participaci√≥n de los trabajadores en las utilidades');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','608','Participaci√≥n en resultados de subsidiarias');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','608.01','Participaci√≥n en resultados de subsidiarias');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','609','Participaci√≥n en resultados de asociadas');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','609.01','Participaci√≥n en resultados de asociadas');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','610','Participaci√≥n de los trabajadores en las utilidades diferida');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','610.01','Participaci√≥n de los trabajadores en las utilidades diferida');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','611','Impuesto Sobre la renta');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','611.01','Impuesto Sobre la renta');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','611.02','Impuesto Sobre la renta por remanente distribuible');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','612','Gastos no deducibles para CUFIN');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','612.01','Gastos no deducibles para CUFIN');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','613','Depreciaci√≥n contable');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','613.01','Depreciaci√≥n de edificios');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','613.02','Depreciaci√≥n de maquinaria y equipo');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','613.03','Depreciaci√≥n de autom√≥viles, autobuses, camiones de carga, tractocamiones, montacargas y remolques');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','613.04','Depreciaci√≥n de mobiliario y equipo de oficina');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','613.05','Depreciaci√≥n de equipo de c√≥mputo');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','613.06','Depreciaci√≥n de equipo de comunicaci√≥n');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','613.07','Depreciaci√≥n de activos biol√≥gicos, vegetales y semovientes');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','613.08','Depreciaci√≥n de otros activos fijos');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','613.09','Depreciaci√≥n de ferrocarriles');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','613.10','Depreciaci√≥n de embarcaciones');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','613.11','Depreciaci√≥n de aviones');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','613.12','Depreciaci√≥n de troqueles, moldes, matrices y herramental');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','613.13','Depreciaci√≥n de equipo de comunicaciones telef√≥nicas');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','613.14','Depreciaci√≥n de equipo de comunicaci√≥n satelital');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','613.15','Depreciaci√≥n de equipo de adaptaciones para personas con capacidades diferentes');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','613.16','Depreciaci√≥n de maquinaria y equipo de generaci√≥n de energ√≠a de fuentes renovables o de sistemas de cogeneraci√≥n de electricidad eficiente');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','613.17','Depreciaci√≥n de adaptaciones y mejoras');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','613.18','Depreciaci√≥n de otra maquinaria y equipo');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','614','Amortizaci√≥n contable');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','614.01','Amortizaci√≥n de gastos diferidos');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','614.02','Amortizaci√≥n de gastos pre operativos');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','614.03','Amortizaci√≥n de regal√≠as, asistencia t√©cnica y otros gastos diferidos');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','614.04','Amortizaci√≥n de activos intangibles');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','614.05','Amortizaci√≥n de gastos de organizaci√≥n');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','614.06','Amortizaci√≥n de investigaci√≥n y desarrollo de mercado');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','614.07','Amortizaci√≥n de marcas y patentes');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','614.08','Amortizaci√≥n de cr√©dito mercantil');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','614.09','Amortizaci√≥n de gastos de instalaci√≥n');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','614.10','Amortizaci√≥n de otros activos diferidos');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','701','Gastos financieros');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','701.01','P√©rdida cambiaria');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','701.02','P√©rdida cambiaria nacional parte relacionada');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','701.03','P√©rdida cambiaria extranjero parte relacionada');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','701.04','Intereses a cargo bancario nacional');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','701.05','Intereses a cargo bancario extranjero');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','701.06','Intereses a cargo de personas f√≠sicas nacional');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','701.07','Intereses a cargo de personas f√≠sicas extranjero');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','701.08','Intereses a cargo de personas morales nacional');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','701.09','Intereses a cargo de personas morales extranjero');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','701.10','Comisiones bancarias');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','701.11','Otros gastos financieros');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','702','Productos financieros');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','702.01','Utilidad cambiaria');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','702.02','Utilidad cambiaria nacional parte relacionada');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','702.03','Utilidad cambiaria extranjero parte relacionada');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','702.04','Intereses a favor bancarios nacional');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','702.05','Intereses a favor bancarios extranjero');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','702.06','Intereses a favor de personas f√≠sicas nacional');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','702.07','Intereses a favor de personas f√≠sicas extranjero');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','702.08','Intereses a favor de personas morales nacional');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','702.09','Intereses a favor de personas morales extranjero');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','702.10','Otros productos financieros');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','703','Otros gastos');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','703.01','P√©rdida en venta y/o baja de terrenos');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','703.02','P√©rdida en venta y/o baja de edificios');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','703.03','P√©rdida en venta y/o baja de maquinaria y equipo');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','703.04','P√©rdida en venta y/o baja de autom√≥viles, autobuses, camiones de carga, tractocamiones, montacargas y remolques');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','703.05','P√©rdida en venta y/o baja de mobiliario y equipo de oficina');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','703.06','P√©rdida en venta y/o baja de equipo de c√≥mputo');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','703.07','P√©rdida en venta y/o baja de equipo de comunicaci√≥n');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','703.08','P√©rdida en venta y/o baja de activos biol√≥gicos, vegetales y semovientes');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','703.09','P√©rdida en venta y/o baja de otros activos fijos');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','703.10','P√©rdida en venta y/o baja de ferrocarriles');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','703.11','P√©rdida en venta y/o baja de embarcaciones');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','703.12','P√©rdida en venta y/o baja de aviones');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','703.13','P√©rdida en venta y/o baja de troqueles, moldes, matrices y herramental');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','703.14','P√©rdida en venta y/o baja de equipo de comunicaciones telef√≥nicas');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','703.15','P√©rdida en venta y/o baja de equipo de comunicaci√≥n satelital');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','703.16','P√©rdida en venta y/o baja de equipo de adaptaciones para personas con capacidades diferentes');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','703.17','P√©rdida en venta y/o baja de maquinaria y equipo de generaci√≥n de energ√≠a de fuentes renovables o de sistemas de cogeneraci√≥n de electricidad eficiente');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','703.18','P√©rdida en venta y/o baja de otra maquinaria y equipo');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','703.19','P√©rdida por enajenaci√≥n de acciones');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','703.20','P√©rdida por enajenaci√≥n de partes sociales');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','703.21','Otros gastos');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','704','Otros productos');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','704.01','Ganancia en venta y/o baja de terrenos');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','704.02','Ganancia en venta y/o baja de edificios');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','704.03','Ganancia en venta y/o baja de maquinaria y equipo');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','704.04','Ganancia en venta y/o baja de autom√≥viles, autobuses, camiones de carga, tractocamiones, montacargas y remolques');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','704.05','Ganancia en venta y/o baja de mobiliario y equipo de oficina');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','704.06','Ganancia en venta y/o baja de equipo de c√≥mputo');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','704.07','Ganancia en venta y/o baja de equipo de comunicaci√≥n');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','704.08','Ganancia en venta y/o baja de activos biol√≥gicos, vegetales y semovientes');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','704.09','Ganancia en venta y/o baja de otros activos fijos');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','704.10','Ganancia en venta y/o baja de ferrocarriles');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','704.11','Ganancia en venta y/o baja de embarcaciones');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','704.12','Ganancia en venta y/o baja de aviones');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','704.13','Ganancia en venta y/o baja de troqueles, moldes, matrices y herramental');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','704.14','Ganancia en venta y/o baja de equipo de comunicaciones telef√≥nicas');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','704.15','Ganancia en venta y/o baja de equipo de comunicaci√≥n satelital');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','704.16','Ganancia en venta y/o baja de equipo de adaptaciones para personas con capacidades diferentes');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','704.17','Ganancia en venta de maquinaria y equipo de generaci√≥n de energ√≠a de fuentes renovables o de sistemas de cogeneraci√≥n de electricidad eficiente');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','704.18','Ganancia en venta y/o baja de otra maquinaria y equipo');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','704.19','Ganancia por enajenaci√≥n de acciones');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','704.20','Ganancia por enajenaci√≥n de partes sociales');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','704.21','Ingresos por est√≠mulos fiscales');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','704.22','Ingresos por condonaci√≥n de adeudo');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','704.23','Otros productos');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','801','UFIN del ejercicio');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','801.01','UFIN');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','801.02','Contra cuenta UFIN');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','802','CUFIN del ejercicio');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','802.01','CUFIN');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','802.02','Contra cuenta CUFIN');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','803','CUFIN de ejercicios anteriores');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','803.01','CUFIN de ejercicios anteriores');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','803.02','Contra cuenta CUFIN de ejercicios anteriores');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','804','CUFINRE del ejercicio');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','804.01','CUFINRE');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','804.02','Contra cuenta CUFINRE');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','805','CUFINRE de ejercicios anteriores');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','805.01','CUFINRE de ejercicios anteriores');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','805.02','Contra cuenta CUFINRE de ejercicios anteriores');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','806','CUCA del ejercicio');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','806.01','CUCA');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','806.02','Contra cuenta CUCA');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','807','CUCA de ejercicios anteriores');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','807.01','CUCA de ejercicios anteriores');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','807.02','Contra cuenta CUCA de ejercicios anteriores');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','808','Ajuste anual por inflaci√≥n acumulable');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','808.01','Ajuste anual por inflaci√≥n acumulable');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','808.02','Acumulaci√≥n del ajuste anual inflacionario');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','809','Ajuste anual por inflaci√≥n deducible');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','809.01','Ajuste anual por inflaci√≥n deducible');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','809.02','Deducci√≥n del ajuste anual inflacionario');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','810','Deducci√≥n de inversi√≥n');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','810.01','Deducci√≥n de inversi√≥n');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','810.02','Contra cuenta deducci√≥n de inversiones');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','811','Utilidad o p√©rdida fiscal en venta y/o baja de activo fijo');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','811.01','Utilidad o p√©rdida fiscal en venta y/o baja de activo fijo');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','811.02','Contra cuenta utilidad o p√©rdida fiscal en venta y/o baja de activo fijo');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','812','Utilidad o p√©rdida fiscal en venta acciones o partes sociales');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','812.01','Utilidad o p√©rdida fiscal en venta acciones o partes sociales');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','812.02','Contra cuenta utilidad o p√©rdida fiscal en venta acciones o partes sociales');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','813','P√©rdidas fiscales pendientes de amortizar actualizadas de ejercicios anteriores');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','813.01','P√©rdidas fiscales pendientes de amortizar actualizadas de ejercicios anteriores');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','813.02','Actualizaci√≥n de p√©rdidas fiscales pendientes de amortizar de ejercicios anteriores');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','814','Mercanc√≠as recibidas en consignaci√≥n');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','814.01','Mercanc√≠as recibidas en consignaci√≥n');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','814.02','Consignaci√≥n de mercanc√≠as recibidas');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','815','Cr√©dito fiscal de IVA e IEPS por la importaci√≥n de mercanc√≠as para empresas certificadas');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','815.01','Cr√©dito fiscal de IVA e IEPS por la importaci√≥n de mercanc√≠as');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','815.02','Importaci√≥n de mercanc√≠as con aplicaci√≥n de cr√©dito fiscal de IVA e IEPS');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','816','Cr√©dito fiscal de IVA e IEPS por la importaci√≥n de activos fijos para empresas certificadas');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','816.01','Cr√©dito fiscal de IVA e IEPS por la importaci√≥n de activo fijo');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','816.02','Importaci√≥n de activo fijo con aplicaci√≥n de cr√©dito fiscal de IVA e IEPS');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('1','899','Otras cuentas de orden');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','899.01','Otras cuentas de orden');
insert into tbl_sat_codagrup (nivel, codigo, descripcion)
values('2','899.02','Contra cuenta otras cuentas de orden');

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION getmoduloref(_ref character varying)
  RETURNS text AS
$BODY$  
DECLARE _mod4 character(4); _idreg character varying(10); _res text;
BEGIN
	IF _Ref is null or _Ref = ''
	THEN
		RETURN ''::text;
	END IF;
	
	_mod4 := split_part(_Ref, '|', 1);
	_idreg := split_part(_Ref, '|', 2);
	--Empieza en el modulo de ventas
	IF _mod4 = 'VDEV' 
	THEN
		_res := (
		select 'Devoluci√≥n s/venta - Entidad: ' || e.Descripcion || ' Num: ' || c.Numero
		from TBL_VENTAS_DEVOLUCIONES_CAB c inner join TBL_VENTAS_ENTIDADES e on c.id_entidad = e.id_entidadventa
		where ID_VC = cast( _idreg as int) );
	ELSIF _mod4 = 'VFAC' 
	THEN
		_res := (
		select 'Factura - Entidad: ' || e.Descripcion || ' Num: ' || c.Numero
		from TBL_VENTAS_FACTURAS_CAB c inner join TBL_VENTAS_ENTIDADES e on c.id_entidad = e.id_entidadventa
		where ID_VC = cast( _idreg as int) );
	ELSIF _mod4 = 'VREM' 
	THEN
		_res := (
		select 'Remisi√≥n - Entidad: ' || e.Descripcion || ' Num: ' || c.Numero
		from TBL_VENTAS_REMISIONES_CAB c inner join TBL_VENTAS_ENTIDADES e on c.id_entidad = e.id_entidadventa
		where ID_VC = cast( _idreg as int) );
	ELSIF _mod4 = 'VPED' 
	THEN
		_res := (
		select 'Pedido - Entidad: ' || e.Descripcion || ' Num: ' || c.Numero
		from TBL_VENTAS_PEDIDOS_CAB c inner join TBL_VENTAS_ENTIDADES e on c.id_entidad = e.id_entidadventa
		where ID_VC = cast( _idreg as int) );
	ELSIF _mod4 = 'VCOT' 
	THEN
		_res := (
		select 'Cotizaci√≥n - Entidad: ' || e.Descripcion || ' Num: ' || c.Numero
		from TBL_VENTAS_COTIZACIONES_CAB c inner join TBL_VENTAS_ENTIDADES e on c.id_entidad = e.id_entidadventa
		where ID_VC = cast( _idreg as int) );
	ELSIF _mod4 = 'VCXC' 
	THEN
		_res := (
		select 'Cuenta por cobrar - Entidad: ' || e.Descripcion || ' ' || 
			(case when c.id_tipocp = 'ALT' then 'Cuenta' 
			when c.id_tipocp = 'ANT' then 'Anticipo' 
			when c.id_tipocp = 'PAG' then 'Pago' 
			when c.id_tipocp = 'SAL' then 'Saldo' 
			when c.id_tipocp = 'APL' then 'Aplicacion' 
			when c.id_tipocp = 'DPA' then 'Descuento' 
			when c.id_tipocp = 'DEV' then 'Devolucion' 
			else '???' end) || ': ' || c.id_cp
		from TBL_CLIENT_CXC c inner join TBL_VENTAS_ENTIDADES e on c.id_entidad = e.id_entidadventa 
		where ID_CP = cast( _idreg as int) );
	--Prosigue con el modulo de compras
	ELSIF _mod4 = 'CDEV' 
	THEN
		_res := (
		select 'Devoluci√≥n s/compra - Entidad: ' || e.Descripcion || ' Num: ' || c.Numero
		from TBL_COMPRAS_DEVOLUCIONES_CAB c inner join TBL_COMPRAS_ENTIDADES e on c.id_entidad = e.id_entidadcompra
		where ID_VC = cast( _idreg as int) );
	ELSIF _mod4 = 'CFAC' 
	THEN
		_res := (
		select 'Compra - Entidad: ' || e.Descripcion || ' Num: ' || c.Numero
		from TBL_COMPRAS_FACTURAS_CAB c inner join TBL_COMPRAS_ENTIDADES e on c.id_entidad = e.id_entidadcompra
		where ID_VC = cast( _idreg as int) );
	ELSIF _mod4 = 'CREC' 
	THEN
		_res := (
		select 'Recepci√≥n - Entidad: ' || e.Descripcion || ' Num: ' || c.Numero
		from TBL_COMPRAS_RECEPCIONES_CAB c inner join TBL_COMPRAS_ENTIDADES e on c.id_entidad = e.id_entidadcompra
		where ID_VC = cast( _idreg as int) );
	ELSIF _mod4 = 'CORD' 
	THEN
		_res := (
		select 'Orden de compra - Entidad: ' || e.Descripcion || ' Num: ' || c.Numero
		from TBL_COMPRAS_ORDENES_CAB c inner join TBL_COMPRAS_ENTIDADES e on c.id_entidad = e.id_entidadcompra
		where ID_VC = cast( _idreg as int) );
	ELSIF _mod4 = 'CGAS' 
	THEN
		_res := (
		select 'Gasto - Entidad: ' || e.Descripcion || ' Num: ' || c.Numero
		from TBL_COMPRAS_GASTOS_CAB c inner join TBL_COMPRAS_ENTIDADES e on c.id_entidad = e.id_entidadcompra
		where ID_VC = cast( _idreg as int) );
	ELSIF _mod4 = 'CCXP' 
	THEN
		_res := (
		select 'Cuenta por pagar - Entidad: ' || e.Descripcion || ' ' || 
			(case when c.id_tipocp = 'ALT' then 'Cuenta' 
			when c.id_tipocp = 'ANT' then 'Anticipo' 
			when c.id_tipocp = 'PAG' then 'Pago' 
			when c.id_tipocp = 'SAL' then 'Saldo' 
			when c.id_tipocp = 'APL' then 'Aplicacion' 
			when c.id_tipocp = 'DPA' then 'Descuento' 
			when c.id_tipocp = 'DEV' then 'Devolucion' 
			else '???' end) || ': ' || c.id_cp 
		from TBL_PROVEE_CXP c inner join TBL_COMPRAS_ENTIDADES e on c.id_entidad = e.id_entidadcompra
		where ID_CP = cast( _idreg as int) );
	--Modulo de caja y bancos
	ELSIF _mod4 = 'MBAN' 
	THEN
		_res := (
		select 'Mov. de Banco - Entidad: ' || e.Cuenta || ' Num: ' || c.Num
		from TBL_BANCOS_MOVIMIENTOS c inner join TBL_BANCOS_CUENTAS e on c.tipo = e.tipo and c.clave = e.clave
		where ID = cast( _idreg as int) );
	ELSIF _mod4 = 'MCAJ' 
	THEN
		_res := (
		select 'Mov. de Caja - Entidad: ' || e.Cuenta || ' Num: ' || c.Num
		from TBL_BANCOS_MOVIMIENTOS c inner join TBL_BANCOS_CUENTAS e on c.tipo = e.tipo and c.clave = e.clave
		where ID = cast( _idreg as int) );
	--Modulo de n√≥mina
	ELSIF _mod4 = 'NNOM' 
	THEN
		_res := (
		select 'N√≥mina - Entidad: ' || e.Descripcion || ' Nom: ' || c.Numero_Nomina || ' - ' || c.Ano
		from TBL_NOM_CALCULO_NOMINA c inner join TBL_COMPANIAS e on c.id_compania = e.id_compania and c.id_sucursal = e.id_sucursal
		where ID_Nomina = cast( _idreg as int) );
	--Modulo de almacen
	ELSIF _mod4 = 'MALM' 
	THEN
		_res := (
		select 'Mov. al Almac√©n - Bodega: ' || e.Nombre || ' Num: ' || c.Numero
		from tbl_invserv_almacen_movim_cab c inner join tbl_invserv_bodegas e on c.id_bodega = e.id_bodega
		where ID_Movimiento = cast( _idreg as int) );
	ELSIF _mod4 = 'PALM' 
	THEN
		_res := (
		select 'Plantilla - Bodega: ' || e.Nombre || ' Num: ' || c.Numero
		from tbl_invserv_almacen_movim_plant_cab c inner join tbl_invserv_bodegas e on c.id_bodega = e.id_bodega
		where ID_MovimPlant = cast( _idreg as int) );
	ELSIF _mod4 = 'TALM' 
	THEN
		_res := (
		select 'Traspaso - Bodega: ' || e.Nombre || ' Num: ' || c.Salida
		from tbl_invserv_almacen_bod_mov_cab c inner join tbl_invserv_bodegas e on c.id_bodega = e.id_bodega
		where ID_Movimiento = cast( _idreg as int) );
	ELSIF _mod4 = 'RALM' 
	THEN
		_res := (
		select 'Requerimiento - Bodega: ' || e.Nombre || ' Num: ' || c.Requerimiento
		from tbl_invserv_almacen_bod_req_cab c inner join tbl_invserv_bodegas e on c.id_bodega = e.id_bodega
		where ID_Movimiento = cast( _idreg as int) );
	--Reportes de produccion
	ELSIF _mod4 = 'PPRD' 
	THEN
		_res := (
		select 'Reporte - Entidad: ' || e.Nombre || ' Num: ' || c.Numero || ' Partida: ' || split_part(_Ref, '|', 4)
		from tbl_produccion_reportes_cab c inner join tbl_produccion_entidades e on c.id_entidadprod = e.id_entidadprod
		where ID_Reporte = cast( _idreg as int) );

		
	ELSE
		_res := _ref;
	END IF;
	
	return _res;
END
$BODY$
  LANGUAGE plpgsql;
--ALTER FUNCTION getmoduloref(character varying)

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION getmodulofrom4(_mod4 character)
  RETURNS text AS
$BODY$  
DECLARE _res text;
BEGIN
	IF _mod4 is null
	THEN
		RETURN ''::text;
	END IF;
	
	--Empieza en el modulo de ventas
	IF _mod4 = 'VDEV' 
	THEN
		_res := 'Devoluci√≥n s/venta';
	ELSIF _mod4 = 'VFAC' 
	THEN
		_res := 'Factura';
	ELSIF _mod4 = 'VREM' 
	THEN
		_res := 'Remisi√≥n';
	ELSIF _mod4 = 'VPED' 
	THEN
		_res := 'Pedido';
	ELSIF _mod4 = 'VCOT' 
	THEN
		_res := 'Cotizaci√≥n';
	ELSIF _mod4 = 'VCXC' 
	THEN
		_res := 'Cuenta por cobrar';
	--Prosigue con el modulo de compras
	ELSIF _mod4 = 'CDEV' 
	THEN
		_res := 'Devoluci√≥n s/compra';
	ELSIF _mod4 = 'CFAC' 
	THEN
		_res := 'Compra';
	ELSIF _mod4 = 'CREC' 
	THEN
		_res := 'Recepci√≥n';
	ELSIF _mod4 = 'CORD' 
	THEN
		_res := 'Orden de compra';
	ELSIF _mod4 = 'CGAS' 
	THEN
		_res := 'Gasto';
	ELSIF _mod4 = 'CCXP' 
	THEN
		_res := 'Cuenta por pagar';
	--Modulo de caja y bancos
	ELSIF _mod4 = 'MBAN' 
	THEN
		_res := 'Mov. de Banco';
	ELSIF _mod4 = 'MCAJ' 
	THEN
		_res := 'Mov. de Caja';
	--Modulo de n√≥mina
	ELSIF _mod4 = 'NNOM' 
	THEN
		_res := 'N√≥mina';
	--Modulo de almacen
	ELSIF _mod4 = 'MALM' 
	THEN
		_res := 'Mov. al Almac√©n';
	ELSIF _mod4 = 'PALM' 
	THEN
		_res := 'Plantilla';
	ELSIF _mod4 = 'TALM' 
	THEN
		_res := 'Traspaso';
	ELSIF _mod4 = 'RALM' 
	THEN
		_res := 'Requerimiento';
	--Reportes de produccion
	ELSIF _mod4 = 'PPRD' 
	THEN
		_res := 'Reporte';
	
	ELSE
		_res := _ref;
	END IF;
	
	return _res;
END
$BODY$
  LANGUAGE plpgsql;
--ALTER FUNCTION getmodulofrom4(character)

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION rep_alm_cost_acum(
    _mes smallint,
    _ano smallint,
    _ultimos smallint,
    _noacumulados bit,
    _entcons smallint)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_cont smallint; _TotalEnt smallint; _NumEnt smallint; _NombreEnt varchar(15);
	_TotalAlmacen numeric(19,4); _UltimoAno numeric(19,4); _PenultimoAno numeric(19,4); _AnteriorAno numeric(19,4);
	_ENE numeric(19,4); _FEB numeric(19,4); _MAR numeric(19,4); _ABR numeric(19,4); _MAY numeric(19,4); _JUN numeric(19,4); 
	_JUL numeric(19,4); _AGO numeric(19,4); _SEP numeric(19,4); _OCT numeric(19,4);	_NOV numeric(19,4); _DIC numeric(19,4);
	_TVE RECORD;
BEGIN

	

CREATE LOCAL TEMPORARY TABLE _TMP_ALMACEN_ENT (
		part serial NOT NULL ,
		Entidad varchar (15)  NOT NULL ,
		Total numeric(19,4) NOT NULL 
	); 
	

CREATE LOCAL TEMPORARY TABLE _TMP_ALMACEN (
		part serial NOT NULL ,
		Periodo varchar (20)  NOT NULL ,
		Total numeric(19,4) NOT NULL 
	);
	

CREATE LOCAL TEMPORARY TABLE _TMP_ALMACEN_ENT_ANO (
		part serial NOT NULL ,
		Entidad varchar (15)  NOT NULL ,
		Ultimo numeric(19,4) NOT NULL ,
		Penultimo numeric(19,4) NOT NULL ,
		Anterior numeric(19,4) NOT NULL 
	); 
	

CREATE LOCAL TEMPORARY TABLE _TMP_ALMACEN_ENT_MES (
		part serial NOT NULL ,
		Entidad varchar (15)  NOT NULL ,
		ENE numeric(19,4) NOT NULL ,
		FEB numeric(19,4) NOT NULL ,
		MAR numeric(19,4) NOT NULL ,
		ABR numeric(19,4) NOT NULL ,
		MAY numeric(19,4) NOT NULL ,
		JUN numeric(19,4) NOT NULL ,
		JUL numeric(19,4) NOT NULL ,
		AGO numeric(19,4) NOT NULL ,
		SEP numeric(19,4) NOT NULL ,
		OCT numeric(19,4) NOT NULL ,
		NOV numeric(19,4) NOT NULL ,
		DIC numeric(19,4) NOT NULL 
	); 

	IF(_NoAcumulados = '0') -- es acumulados generales
	THEN
		IF(_EntCons = -1) -- Se trata del acumulado de entidades generales
		THEN
			if(_Ultimos = 1) -- se trata de comparativo mensual
			then
				_cont := 1;
				while _cont <= 12
				loop
					_TotalAlmacen := coalesce(( select sum(saldofin) from tbl_invserv_costos where mes = _cont and ano = _Ano ),0);

					INSERT INTO _TMP_ALMACEN (Periodo,Total)
					SELECT GetCharMonth(_cont), round(_TotalAlmacen,0);
				
					_cont := _cont + 1;
				end loop;
			
			else -- De lo contrario es un comparativo anual

				_cont := _Ano - _Ultimos + 1;
			
				while _cont <= _Ano
				loop
					_TotalAlmacen := coalesce(( select sum(saldofin) from tbl_invserv_costos where mes = 12 and ano = _cont ),0);

					INSERT INTO _TMP_ALMACEN (Periodo,Total)
					SELECT cast(_cont as varchar), round(_TotalAlmacen,0); 
					
					_cont := _cont + 1;
				end loop;
			
			end if;
		
		ELSE -- se trata de una entidad en especifico
		
			if(_Ultimos = 1) -- se trata de comparativo mensual
			then
				_cont := 1;
				while _cont <= 12
				loop
					_TotalAlmacen := coalesce(( select sum(saldofin) from view_invserv_costos_bodegas where id_bodega = _EntCons and mes = _cont and ano = _Ano ),0);
					INSERT INTO _TMP_ALMACEN (Periodo,Total)
					SELECT GetCharMonth(_cont), round(_TotalAlmacen,0); 
				
					_cont := _cont + 1;
				end loop;
			
			else -- De lo contrario es un comparativo anual
				_cont := _Ano - _Ultimos + 1;
			
				while _cont <= _Ano
				loop
					_TotalAlmacen := coalesce(( select sum(saldofin) from view_invserv_costos_bodegas where  id_bodega = _EntCons and mes = 12 and ano = _cont ),0);
					
					INSERT INTO _TMP_ALMACEN (Periodo,Total)
					SELECT cast(_cont as varchar), round(_TotalAlmacen,0); 
					
					_cont := _cont + 1;
				end loop;
			
			end if;
		END IF;

		RETURN QUERY
		select Periodo, Total
		from _TMP_ALMACEN
		order by part ASC;
	
	ELSE -- Se maneja por detalles de entidad
	
		IF(_EntCons = -1) -- Se trata de comparativos todas las entidades en todos los meses o a?os
		THEN
			if(_Ultimos = 1) -- se trata de comparativo mensual
			then
				for _TVE in	(	SELECT ID_Bodega, Nombre
								FROM TBL_INVSERV_BODEGAS
								WHERE ID_InvServ = 'P'
								ORDER BY ID_Bodega asc
							)
				loop
					_NumEnt := _TVE.ID_Bodega;
					_NombreEnt := _TVE.Nombre;
		
					_ENE := coalesce( (	select sum(saldofin) from view_invserv_costos_bodegas where id_bodega = _NumEnt and mes = 1 and ano = _Ano ), 0);
					_FEB := coalesce( (	select sum(saldofin) from view_invserv_costos_bodegas where id_bodega = _NumEnt and mes = 2 and ano = _Ano ), 0);
					_MAR := coalesce( (	select sum(saldofin) from view_invserv_costos_bodegas where id_bodega = _NumEnt and mes = 3 and ano = _Ano ), 0);
					_ABR := coalesce( (	select sum(saldofin) from view_invserv_costos_bodegas where id_bodega = _NumEnt and mes = 4 and ano = _Ano ), 0);
					_MAY := coalesce( (	select sum(saldofin) from view_invserv_costos_bodegas where id_bodega = _NumEnt and mes = 5 and ano = _Ano ), 0);
					_JUN := coalesce( (	select sum(saldofin) from view_invserv_costos_bodegas where id_bodega = _NumEnt and mes = 6 and ano = _Ano ), 0);
					_JUL := coalesce( (	select sum(saldofin) from view_invserv_costos_bodegas where id_bodega = _NumEnt and mes = 7 and ano = _Ano ), 0);
					_AGO := coalesce( (	select sum(saldofin) from view_invserv_costos_bodegas where id_bodega = _NumEnt and mes = 8 and ano = _Ano ), 0);
					_SEP := coalesce( (	select sum(saldofin) from view_invserv_costos_bodegas where id_bodega = _NumEnt and mes = 9 and ano = _Ano ), 0);
					_OCT := coalesce( (	select sum(saldofin) from view_invserv_costos_bodegas where id_bodega = _NumEnt and mes = 10 and ano = _Ano ), 0);
					_NOV := coalesce( (	select sum(saldofin) from view_invserv_costos_bodegas where id_bodega = _NumEnt and mes = 11 and ano = _Ano ), 0);
					_DIC := coalesce( (	select sum(saldofin) from view_invserv_costos_bodegas where id_bodega = _NumEnt and mes = 12 and ano = _Ano ), 0);
		
					INSERT INTO _TMP_ALMACEN_ENT_MES (Entidad,ENE,FEB,MAR,ABR,MAY,JUN,JUL,AGO,SEP,OCT,NOV,DIC)
					SELECT _NombreEnt, round(_ENE,0), round(_FEB,0), round(_MAR,0),  round(_ABR,0),  round(_MAY,0),  round(_JUN,0),  
						round(_JUL,0),  round(_AGO,0),  round(_SEP,0), round(_OCT,0),  round(_NOV,0),  round(_DIC,0);
									
				end loop;

				RETURN QUERY
				select Entidad,ENE,FEB,MAR,ABR,MAY,JUN,JUL,AGO,SEP,OCT,NOV,DIC
				from _TMP_ALMACEN_ENT_MES;
		
			else -- De lo contrario es un comparativo anual
			
				for _TVE in	(	SELECT ID_Bodega, Nombre
								FROM TBL_INVSERV_BODEGAS
								WHERE ID_InvServ = 'P'
								ORDER BY ID_Bodega asc
							)
				loop
					_NumEnt := _TVE.ID_Bodega;
					_NombreEnt := _TVE.Nombre;
		
					_UltimoAno := coalesce(( select sum(saldofin) from view_invserv_costos_bodegas where  id_bodega = _NumEnt and mes = 12 and ano = _Ano ),0);
					_PenultimoAno := coalesce(( select sum(saldofin) from view_invserv_costos_bodegas where  id_bodega = _NumEnt and mes = 12 and ano = (_Ano-1) ),0);
					_AnteriorAno := coalesce(( select sum(saldofin) from view_invserv_costos_bodegas where  id_bodega = _NumEnt and mes = 12 and ano = (_Ano-2) ),0);
		
					INSERT INTO _TMP_ALMACEN_ENT_ANO (Entidad,Ultimo,Penultimo,Anterior)
					SELECT _NombreEnt, round(_UltimoAno,0), round(_PenultimoAno,0), round(_AnteriorAno,0);

				end loop;
				
				RETURN QUERY
				select Entidad,Ultimo,Penultimo,Anterior
				from _TMP_ALMACEN_ENT_ANO;
		
			end if;
		
		ELSE -- se trata de comparativos de todas las entidades pero en un mes o ano especifico
		
			if(_Ultimos = 1) -- se trata de comparativo mensual
			then
				for _TVE in	(	SELECT ID_Bodega, Nombre
								FROM TBL_INVSERV_BODEGAS
								WHERE ID_InvServ = 'P'
								ORDER BY ID_Bodega asc
							)
				loop
					_NumEnt := _TVE.ID_Bodega;
					_NombreEnt := _TVE.Nombre;
		
					_TotalAlmacen := coalesce( (	select sum(saldofin) from view_invserv_costos_bodegas where  id_bodega = _NumEnt and mes = _Mes and ano = _Ano ), 0);
		
					INSERT INTO _TMP_ALMACEN_ENT (Entidad,Total)
					SELECT _NombreEnt, round(_TotalAlmacen,0);   
									
				end loop;
				
			else -- De lo contrario es un comparativo anual
			
				for _TVE in	(	SELECT ID_Bodega, Nombre
								FROM TBL_INVSERV_BODEGAS
								WHERE ID_InvServ = 'P'
								ORDER BY ID_Bodega asc
							)
				loop
					_NumEnt := _TVE.ID_Bodega;
					_NombreEnt := _TVE.Nombre;
					
					_TotalAlmacen := coalesce((  select sum(saldofin) from view_invserv_costos_bodegas where  id_bodega = _NumEnt and mes = 12 and ano = _Ano ),0);
		
					INSERT INTO _TMP_ALMACEN_ENT (Entidad,Total)
					SELECT _NombreEnt, round(_TotalAlmacen,0);  
					
				end loop;
		
			end if;

			RETURN QUERY
			select Entidad,Total
			from _TMP_ALMACEN_ENT;

		END IF;

	END IF;
	
	DROP TABLE _TMP_ALMACEN;
	DROP TABLE _TMP_ALMACEN_ENT;
	DROP TABLE _TMP_ALMACEN_ENT_MES;
	DROP TABLE _TMP_ALMACEN_ENT_ANO;
END
$BODY$
  LANGUAGE plpgsql;
--ALTER FUNCTION rep_alm_cost_acum(smallint, smallint, smallint, bit, smallint)

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION rep_bancaj_saldos_acum(
    _mes smallint,
    _ano smallint,
    _ultimos smallint,
    _noacumulados bit,
    _tipocons smallint,
    _entcons smallint,
    _promedio bit)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_cont smallint; _TotalEnt smallint; _NumEnt smallint; _NombreEnt varchar(15);
	_TotalBancaj numeric(19,4); _UltimoAno numeric(19,4); _PenultimoAno numeric(19,4); _AnteriorAno numeric(19,4);
	_ENE numeric(19,4); _FEB numeric(19,4); _MAR numeric(19,4); _ABR numeric(19,4); _MAY numeric(19,4); _JUN numeric(19,4); 
	_JUL numeric(19,4); _AGO numeric(19,4); _SEP numeric(19,4); _OCT numeric(19,4);	_NOV numeric(19,4); _DIC numeric(19,4);
	_TVE RECORD;
BEGIN

	

CREATE LOCAL TEMPORARY TABLE _TMP_BANCAJ_ENT (
		part serial NOT NULL ,
		Entidad varchar (15)  NOT NULL ,
		Total numeric(19,4) NOT NULL 
	); 
	

CREATE LOCAL TEMPORARY TABLE _TMP_BANCAJ (
		part serial NOT NULL ,
		Periodo varchar (20)  NOT NULL ,
		Total numeric(19,4) NOT NULL 
	);
	

CREATE LOCAL TEMPORARY TABLE _TMP_BANCAJ_ENT_ANO (
		part serial NOT NULL ,
		Entidad varchar (15)  NOT NULL ,
		Ultimo numeric(19,4) NOT NULL ,
		Penultimo numeric(19,4) NOT NULL ,
		Anterior numeric(19,4) NOT NULL 
	); 
	

CREATE LOCAL TEMPORARY TABLE _TMP_BANCAJ_ENT_MES (
		part serial NOT NULL ,
		Entidad varchar (15)  NOT NULL ,
		ENE numeric(19,4) NOT NULL ,
		FEB numeric(19,4) NOT NULL ,
		MAR numeric(19,4) NOT NULL ,
		ABR numeric(19,4) NOT NULL ,
		MAY numeric(19,4) NOT NULL ,
		JUN numeric(19,4) NOT NULL ,
		JUL numeric(19,4) NOT NULL ,
		AGO numeric(19,4) NOT NULL ,
		SEP numeric(19,4) NOT NULL ,
		OCT numeric(19,4) NOT NULL ,
		NOV numeric(19,4) NOT NULL ,
		DIC numeric(19,4) NOT NULL 
	); 

	IF(_NoAcumulados = '0') -- es acumulados generales
	THEN
		IF(_EntCons = -1) -- Se trata del acumulado de entidades generales
		THEN
			if(_Ultimos = 1) -- se trata de comparativo mensual
			then
				_cont := 1;
				while _cont <= 12
				loop
					if _Promedio = '0'
					then
						_TotalBancaj := coalesce(( select sum(s.saldofin * m.tc) from tbl_bancos_cuentas_saldos s join tbl_bancos_cuentas c on s.tipo = c.tipo and s.clave = c.clave join tbl_cont_monedas m on c.id_moneda = m.clave where s.tipo = _TipoCons and s.mes = _cont and s.ano = _Ano ),0);
					else
						_TotalBancaj := coalesce(( select ((sum(s.saldoini * m.tc) + sum(s.saldofin * m.tc)) / 2) from tbl_bancos_cuentas_saldos s join tbl_bancos_cuentas c on s.tipo = c.tipo and s.clave = c.clave join tbl_cont_monedas m on c.id_moneda = m.clave where s.tipo = _TipoCons and s.mes = _cont and s.ano = _Ano ),0);
					end if;
					
					INSERT INTO _TMP_BANCAJ (Periodo,Total)
					SELECT GetCharMonth(_cont), round(_TotalBancaj,0);
				
					_cont := _cont + 1;
				end loop;
			
			else -- De lo contrario es un comparativo anual

				_cont := _Ano - _Ultimos + 1;
			
				while _cont <= _Ano
				loop
					if _Promedio = '0'
					then
						_TotalBancaj := coalesce(( select sum(s.saldofin * m.tc) from tbl_bancos_cuentas_saldos s join tbl_bancos_cuentas c on s.tipo = c.tipo and s.clave = c.clave join tbl_cont_monedas m on c.id_moneda = m.clave where s.tipo = _TipoCons and s.mes = 12 and s.ano = _cont ),0);
					else
						_TotalBancaj := coalesce(( select ((sum(s.saldoini * m.tc) + sum(s.saldofin * m.tc)) / 2) from tbl_bancos_cuentas_saldos s join tbl_bancos_cuentas c on s.tipo = c.tipo and s.clave = c.clave join tbl_cont_monedas m on c.id_moneda = m.clave where s.tipo = _TipoCons and s.mes = 12 and s.ano = _cont ),0);
					end if;
					
					INSERT INTO _TMP_BANCAJ (Periodo,Total)
					SELECT cast(_cont as varchar), round(_TotalBancaj,0); 
					
					_cont := _cont + 1;
				end loop;
			
			end if;
		
		ELSE -- se trata de una entidad en especifico
		
			if(_Ultimos = 1) -- se trata de comparativo mensual
			then
				_cont := 1;
				while _cont <= 12
				loop
					if _Promedio = '0'
					then
						_TotalBancaj := coalesce(( select sum(s.saldofin * m.tc) from tbl_bancos_cuentas_saldos s join tbl_bancos_cuentas c on s.tipo = c.tipo and s.clave = c.clave join tbl_cont_monedas m on c.id_moneda = m.clave where s.tipo = _TipoCons and s.clave = _EntCons and s.mes = _cont and s.ano = _Ano ),0);
					else
						_TotalBancaj := coalesce(( select ((sum(s.saldoini * m.tc) + sum(s.saldofin * m.tc)) / 2) from tbl_bancos_cuentas_saldos s join tbl_bancos_cuentas c on s.tipo = c.tipo and s.clave = c.clave join tbl_cont_monedas m on c.id_moneda = m.clave where s.tipo = _TipoCons and s.clave = _EntCons and s.mes = _cont and s.ano = _Ano ),0);
					end if;
					
					INSERT INTO _TMP_BANCAJ (Periodo,Total)
					SELECT GetCharMonth(_cont), round(_TotalBancaj,0); 
				
					_cont := _cont + 1;
				end loop;
			
			else -- De lo contrario es un comparativo anual
				_cont := _Ano - _Ultimos + 1;
			
				while _cont <= _Ano
				loop
					if _Promedio = '0'
					then
						_TotalBancaj := coalesce(( select sum(s.saldofin * m.tc) from tbl_bancos_cuentas_saldos s join tbl_bancos_cuentas c on s.tipo = c.tipo and s.clave = c.clave join tbl_cont_monedas m on c.id_moneda = m.clave where s.tipo = _TipoCons and s.clave = _EntCons and s.mes = 12 and s.ano = _cont ),0);
					else
						_TotalBancaj := coalesce(( select ((sum(s.saldoini * m.tc) + sum(s.saldofin * m.tc)) / 2) from tbl_bancos_cuentas_saldos s join tbl_bancos_cuentas c on s.tipo = c.tipo and s.clave = c.clave join tbl_cont_monedas m on c.id_moneda = m.clave where s.tipo = _TipoCons and s.clave = _EntCons and mes = 12 and ano = _cont ),0);
					end if;
					
					INSERT INTO _TMP_BANCAJ (Periodo,Total)
					SELECT cast(_cont as varchar), round(_TotalBancaj,0); 
					
					_cont := _cont + 1;
				end loop;
			
			end if;
		END IF;

		RETURN QUERY
		select Periodo, Total
		from _TMP_BANCAJ
		order by part ASC;
	
	ELSE -- Se maneja por detalles de entidad
	
		IF(_EntCons = -1) -- Se trata de comparativos todas las entidades en todos los meses o a?os
		THEN
			if(_Ultimos = 1) -- se trata de comparativo mensual
			then
				for _TVE in	(	SELECT Clave, Cuenta
								FROM TBL_BANCOS_CUENTAS
								WHERE Tipo = _TipoCons
								ORDER BY Cuenta asc
							)
				loop
					_NumEnt := _TVE.Clave;
					_NombreEnt := _TVE.Cuenta;
		
					if _Promedio = '0'
					then
						_ENE := coalesce( (	select sum(s.saldofin * m.tc) from tbl_bancos_cuentas_saldos s join tbl_bancos_cuentas c on s.tipo = c.tipo and s.clave = c.clave join tbl_cont_monedas m on c.id_moneda = m.clave where s.tipo = _TipoCons and s.clave = _NumEnt and s.mes = 1 and s.ano = _Ano ), 0);
						_FEB := coalesce( (	select sum(s.saldofin * m.tc) from tbl_bancos_cuentas_saldos s join tbl_bancos_cuentas c on s.tipo = c.tipo and s.clave = c.clave join tbl_cont_monedas m on c.id_moneda = m.clave where s.tipo = _TipoCons and s.clave = _NumEnt and s.mes = 2 and s.ano = _Ano ), 0);
						_MAR := coalesce( (	select sum(s.saldofin * m.tc) from tbl_bancos_cuentas_saldos s join tbl_bancos_cuentas c on s.tipo = c.tipo and s.clave = c.clave join tbl_cont_monedas m on c.id_moneda = m.clave where s.tipo = _TipoCons and s.clave = _NumEnt and s.mes = 3 and s.ano = _Ano ), 0);
						_ABR := coalesce( (	select sum(s.saldofin * m.tc) from tbl_bancos_cuentas_saldos s join tbl_bancos_cuentas c on s.tipo = c.tipo and s.clave = c.clave join tbl_cont_monedas m on c.id_moneda = m.clave where s.tipo = _TipoCons and s.clave = _NumEnt and s.mes = 4 and s.ano = _Ano ), 0);
						_MAY := coalesce( (	select sum(s.saldofin * m.tc) from tbl_bancos_cuentas_saldos s join tbl_bancos_cuentas c on s.tipo = c.tipo and s.clave = c.clave join tbl_cont_monedas m on c.id_moneda = m.clave where s.tipo = _TipoCons and s.clave = _NumEnt and s.mes = 5 and s.ano = _Ano ), 0);
						_JUN := coalesce( (	select sum(s.saldofin * m.tc) from tbl_bancos_cuentas_saldos s join tbl_bancos_cuentas c on s.tipo = c.tipo and s.clave = c.clave join tbl_cont_monedas m on c.id_moneda = m.clave where s.tipo = _TipoCons and s.clave = _NumEnt and s.mes = 6 and s.ano = _Ano ), 0);
						_JUL := coalesce( (	select sum(s.saldofin * m.tc) from tbl_bancos_cuentas_saldos s join tbl_bancos_cuentas c on s.tipo = c.tipo and s.clave = c.clave join tbl_cont_monedas m on c.id_moneda = m.clave where s.tipo = _TipoCons and s.clave = _NumEnt and s.mes = 7 and s.ano = _Ano ), 0);
						_AGO := coalesce( (	select sum(s.saldofin * m.tc) from tbl_bancos_cuentas_saldos s join tbl_bancos_cuentas c on s.tipo = c.tipo and s.clave = c.clave join tbl_cont_monedas m on c.id_moneda = m.clave where s.tipo = _TipoCons and s.clave = _NumEnt and s.mes = 8 and s.ano = _Ano ), 0);
						_SEP := coalesce( (	select sum(s.saldofin * m.tc) from tbl_bancos_cuentas_saldos s join tbl_bancos_cuentas c on s.tipo = c.tipo and s.clave = c.clave join tbl_cont_monedas m on c.id_moneda = m.clave where s.tipo = _TipoCons and s.clave = _NumEnt and s.mes = 9 and s.ano = _Ano ), 0);
						_OCT := coalesce( (	select sum(s.saldofin * m.tc) from tbl_bancos_cuentas_saldos s join tbl_bancos_cuentas c on s.tipo = c.tipo and s.clave = c.clave join tbl_cont_monedas m on c.id_moneda = m.clave where s.tipo = _TipoCons and s.clave = _NumEnt and s.mes = 10 and s.ano = _Ano ), 0);
						_NOV := coalesce( (	select sum(s.saldofin * m.tc) from tbl_bancos_cuentas_saldos s join tbl_bancos_cuentas c on s.tipo = c.tipo and s.clave = c.clave join tbl_cont_monedas m on c.id_moneda = m.clave where s.tipo = _TipoCons and s.clave = _NumEnt and s.mes = 11 and s.ano = _Ano ), 0);
						_DIC := coalesce( (	select sum(s.saldofin * m.tc) from tbl_bancos_cuentas_saldos s join tbl_bancos_cuentas c on s.tipo = c.tipo and s.clave = c.clave join tbl_cont_monedas m on c.id_moneda = m.clave where s.tipo = _TipoCons and s.clave = _NumEnt and s.mes = 12 and s.ano = _Ano ), 0);
					else
						_ENE := coalesce( (	select ((sum(s.saldoini * m.tc) + sum(s.saldofin * m.tc)) / 2) from tbl_bancos_cuentas_saldos s join tbl_bancos_cuentas c on s.tipo = c.tipo and s.clave = c.clave join tbl_cont_monedas m on c.id_moneda = m.clave where s.tipo = _TipoCons and s.clave = _NumEnt and s.mes = 1 and s.ano = _Ano ), 0);
						_FEB := coalesce( (	select ((sum(s.saldoini * m.tc) + sum(s.saldofin * m.tc)) / 2) from tbl_bancos_cuentas_saldos s join tbl_bancos_cuentas c on s.tipo = c.tipo and s.clave = c.clave join tbl_cont_monedas m on c.id_moneda = m.clave where s.tipo = _TipoCons and s.clave = _NumEnt and s.mes = 2 and s.ano = _Ano ), 0);
						_MAR := coalesce( (	select ((sum(s.saldoini * m.tc) + sum(s.saldofin * m.tc)) / 2) from tbl_bancos_cuentas_saldos s join tbl_bancos_cuentas c on s.tipo = c.tipo and s.clave = c.clave join tbl_cont_monedas m on c.id_moneda = m.clave where s.tipo = _TipoCons and s.clave = _NumEnt and s.mes = 3 and s.ano = _Ano ), 0);
						_ABR := coalesce( (	select ((sum(s.saldoini * m.tc) + sum(s.saldofin * m.tc)) / 2) from tbl_bancos_cuentas_saldos s join tbl_bancos_cuentas c on s.tipo = c.tipo and s.clave = c.clave join tbl_cont_monedas m on c.id_moneda = m.clave where s.tipo = _TipoCons and s.clave = _NumEnt and s.mes = 4 and s.ano = _Ano ), 0);
						_MAY := coalesce( (	select ((sum(s.saldoini * m.tc) + sum(s.saldofin * m.tc)) / 2) from tbl_bancos_cuentas_saldos s join tbl_bancos_cuentas c on s.tipo = c.tipo and s.clave = c.clave join tbl_cont_monedas m on c.id_moneda = m.clave where s.tipo = _TipoCons and s.clave = _NumEnt and s.mes = 5 and s.ano = _Ano ), 0);
						_JUN := coalesce( (	select ((sum(s.saldoini * m.tc) + sum(s.saldofin * m.tc)) / 2) from tbl_bancos_cuentas_saldos s join tbl_bancos_cuentas c on s.tipo = c.tipo and s.clave = c.clave join tbl_cont_monedas m on c.id_moneda = m.clave where s.tipo = _TipoCons and s.clave = _NumEnt and s.mes = 6 and s.ano = _Ano ), 0);
						_JUL := coalesce( (	select ((sum(s.saldoini * m.tc) + sum(s.saldofin * m.tc)) / 2) from tbl_bancos_cuentas_saldos s join tbl_bancos_cuentas c on s.tipo = c.tipo and s.clave = c.clave join tbl_cont_monedas m on c.id_moneda = m.clave where s.tipo = _TipoCons and s.clave = _NumEnt and s.mes = 7 and s.ano = _Ano ), 0);
						_AGO := coalesce( (	select ((sum(s.saldoini * m.tc) + sum(s.saldofin * m.tc)) / 2) from tbl_bancos_cuentas_saldos s join tbl_bancos_cuentas c on s.tipo = c.tipo and s.clave = c.clave join tbl_cont_monedas m on c.id_moneda = m.clave where s.tipo = _TipoCons and s.clave = _NumEnt and s.mes = 8 and s.ano = _Ano ), 0);
						_SEP := coalesce( (	select ((sum(s.saldoini * m.tc) + sum(s.saldofin * m.tc)) / 2) from tbl_bancos_cuentas_saldos s join tbl_bancos_cuentas c on s.tipo = c.tipo and s.clave = c.clave join tbl_cont_monedas m on c.id_moneda = m.clave where s.tipo = _TipoCons and s.clave = _NumEnt and s.mes = 9 and s.ano = _Ano ), 0);
						_OCT := coalesce( (	select ((sum(s.saldoini * m.tc) + sum(s.saldofin * m.tc)) / 2) from tbl_bancos_cuentas_saldos s join tbl_bancos_cuentas c on s.tipo = c.tipo and s.clave = c.clave join tbl_cont_monedas m on c.id_moneda = m.clave where s.tipo = _TipoCons and s.clave = _NumEnt and s.mes = 10 and s.ano = _Ano ), 0);
						_NOV := coalesce( (	select ((sum(s.saldoini * m.tc) + sum(s.saldofin * m.tc)) / 2) from tbl_bancos_cuentas_saldos s join tbl_bancos_cuentas c on s.tipo = c.tipo and s.clave = c.clave join tbl_cont_monedas m on c.id_moneda = m.clave where s.tipo = _TipoCons and s.clave = _NumEnt and s.mes = 11 and s.ano = _Ano ), 0);
						_DIC := coalesce( (	select ((sum(s.saldoini * m.tc) + sum(s.saldofin * m.tc)) / 2) from tbl_bancos_cuentas_saldos s join tbl_bancos_cuentas c on s.tipo = c.tipo and s.clave = c.clave join tbl_cont_monedas m on c.id_moneda = m.clave where s.tipo = _TipoCons and s.clave = _NumEnt and s.mes = 12 and s.ano = _Ano ), 0);
					end if;
					
					INSERT INTO _TMP_BANCAJ_ENT_MES (Entidad,ENE,FEB,MAR,ABR,MAY,JUN,JUL,AGO,SEP,OCT,NOV,DIC)
					SELECT _NombreEnt, round(_ENE,0), round(_FEB,0), round(_MAR,0),  round(_ABR,0),  round(_MAY,0),  round(_JUN,0),  
						round(_JUL,0),  round(_AGO,0),  round(_SEP,0), round(_OCT,0),  round(_NOV,0),  round(_DIC,0);
									
				end loop;

				RETURN QUERY
				select Entidad,ENE,FEB,MAR,ABR,MAY,JUN,JUL,AGO,SEP,OCT,NOV,DIC
				from _TMP_BANCAJ_ENT_MES;
		
			else -- De lo contrario es un comparativo anual
			
				for _TVE in	(	SELECT Clave, Cuenta
								FROM TBL_BANCOS_CUENTAS
								WHERE Tipo = _TipoCons
								ORDER BY Cuenta asc
							)
				loop
					_NumEnt := _TVE.Clave;
					_NombreEnt := _TVE.Cuenta;
		
					if _Promedio = '0'
					then
						_UltimoAno := coalesce(( select sum(s.saldofin * m.tc) from tbl_bancos_cuentas_saldos s join tbl_bancos_cuentas c on s.tipo = c.tipo and s.clave = c.clave join tbl_cont_monedas m on c.id_moneda = m.clave where s.tipo = _TipoCons and s.clave = _NumEnt and s.mes = 12 and s.ano = _Ano ),0);
						_PenultimoAno := coalesce(( select sum(s.saldofin * m.tc) from tbl_bancos_cuentas_saldos s join tbl_bancos_cuentas c on s.tipo = c.tipo and s.clave = c.clave join tbl_cont_monedas m on c.id_moneda = m.clave where s.tipo = _TipoCons and s.clave = _NumEnt and s.mes = 12 and s.ano = (_Ano-1) ),0);
						_AnteriorAno := coalesce(( select sum(s.saldofin * m.tc) from tbl_bancos_cuentas_saldos s join tbl_bancos_cuentas c on s.tipo = c.tipo and s.clave = c.clave join tbl_cont_monedas m on c.id_moneda = m.clave where s.tipo = _TipoCons and s.clave = _NumEnt and s.mes = 12 and s.ano = (_Ano-2) ),0);
					else
						_UltimoAno := coalesce(( select ((sum(s.saldoini * m.tc) + sum(s.saldofin * m.tc)) / 2) from tbl_bancos_cuentas_saldos s join tbl_bancos_cuentas c on s.tipo = c.tipo and s.clave = c.clave join tbl_cont_monedas m on c.id_moneda = m.clave where s.tipo = _TipoCons and s.clave = _NumEnt and s.mes = 12 and s.ano = _Ano ),0);
						_PenultimoAno := coalesce(( select ((sum(s.saldoini * m.tc) + sum(s.saldofin * m.tc)) / 2) from tbl_bancos_cuentas_saldos s join tbl_bancos_cuentas c on s.tipo = c.tipo and s.clave = c.clave join tbl_cont_monedas m on c.id_moneda = m.clave where s.tipo = _TipoCons and s.clave = _NumEnt and s.mes = 12 and s.ano = (_Ano-1) ),0);
						_AnteriorAno := coalesce(( select ((sum(s.saldoini * m.tc) + sum(s.saldofin * m.tc)) / 2) from tbl_bancos_cuentas_saldos s join tbl_bancos_cuentas c on s.tipo = c.tipo and s.clave = c.clave join tbl_cont_monedas m on c.id_moneda = m.clave where s.tipo = _TipoCons and s.clave = _NumEnt and s.mes = 12 and s.ano = (_Ano-2) ),0);
					end if;
						
					INSERT INTO _TMP_BANCAJ_ENT_ANO (Entidad,Ultimo,Penultimo,Anterior)
					SELECT _NombreEnt, round(_UltimoAno,0), round(_PenultimoAno,0), round(_AnteriorAno,0);

				end loop;
				
				RETURN QUERY
				select Entidad,Ultimo,Penultimo,Anterior
				from _TMP_BANCAJ_ENT_ANO;
		
			end if;
		
		ELSE -- se trata de comparativos de todas las entidades pero en un mes o ano especifico
		
			if(_Ultimos = 1) -- se trata de comparativo mensual
			then
				for _TVE in	(	SELECT Clave, Cuenta
								FROM TBL_BANCOS_CUENTAS
								WHERE Tipo = _TipoCons
								ORDER BY Cuenta asc
							)
				loop
					_NumEnt := _TVE.Clave;
					_NombreEnt := _TVE.Cuenta;
		
					if _Promedio = '0'
					then
						_TotalBancaj := coalesce( (	select sum(s.saldofin * m.tc) from tbl_bancos_cuentas_saldos s join tbl_bancos_cuentas c on s.tipo = c.tipo and s.clave = c.clave join tbl_cont_monedas m on c.id_moneda = m.clave where s.tipo = _TipoCons and s.clave = _NumEnt and s.mes = _Mes and s.ano = _Ano ), 0);
					else
						_TotalBancaj := coalesce( (	select ((sum(s.saldoini * m.tc) + sum(s.saldofin * m.tc)) / 2) from tbl_bancos_cuentas_saldos s join tbl_bancos_cuentas c on s.tipo = c.tipo and s.clave = c.clave join tbl_cont_monedas m on c.id_moneda = m.clave where s.tipo = _TipoCons and s.clave = _NumEnt and s.mes = _Mes and s.ano = _Ano ), 0);
					end if;
					
					INSERT INTO _TMP_BANCAJ_ENT (Entidad,Total)
					SELECT _NombreEnt, round(_TotalBancaj,0);   
									
				end loop;
				
			else -- De lo contrario es un comparativo anual
			
				for _TVE in	(	SELECT Clave, Cuenta
								FROM TBL_BANCOS_CUENTAS
								WHERE Tipo = _TipoCons
								ORDER BY Cuenta asc
							)
				loop
					_NumEnt := _TVE.Clave;
					_NombreEnt := _TVE.Cuenta;
					
					if _Promedio = '0'
					then
						_TotalBancaj := coalesce((  select sum(s.saldofin * m.tc) from tbl_bancos_cuentas_saldos s join tbl_bancos_cuentas c on s.tipo = c.tipo and s.clave = c.clave join tbl_cont_monedas m on c.id_moneda = m.clave where s.tipo = _TipoCons and s.clave = _NumEnt and s.mes = 12 and s.ano = _Ano ),0);
					else
						_TotalBancaj := coalesce((  select ((sum(s.saldoini * m.tc) + sum(s.saldofin * m.tc)) / 2) from tbl_bancos_cuentas_saldos s join tbl_bancos_cuentas c on s.tipo = c.tipo and s.clave = c.clave join tbl_cont_monedas m on c.id_moneda = m.clave where s.tipo = _TipoCons and s.clave = _NumEnt and s.mes = 12 and s.ano = _Ano ),0);
					end if;
					
					INSERT INTO _TMP_BANCAJ_ENT (Entidad,Total)
					SELECT _NombreEnt, round(_TotalBancaj,0);  
					
				end loop;
		
			end if;

			RETURN QUERY
			select Entidad,Total
			from _TMP_BANCAJ_ENT;

		END IF;

	END IF;
	
	DROP TABLE _TMP_BANCAJ;
	DROP TABLE _TMP_BANCAJ_ENT;
	DROP TABLE _TMP_BANCAJ_ENT_MES;
	DROP TABLE _TMP_BANCAJ_ENT_ANO;
END
$BODY$
  LANGUAGE plpgsql;
--ALTER FUNCTION rep_bancaj_saldos_acum(smallint, smallint, smallint, bit, smallint, smallint, bit)

--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_catalog_entidades_gastos AS 
 SELECT c.id_entidadcompra AS clave, c.descripcion, c.status AS especial
   FROM tbl_compras_entidades c
  WHERE c.id_tipoentidad = 2;

--ALTER TABLE view_catalog_entidades_gastos

--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_catalog_provee_poriden AS 
 SELECT c.id_clave AS clave, c.nombre AS descripcion, (e.descripcion::text || ':'::text) || c.id_numero AS especial, c.id_entidad
   FROM tbl_provee_provee c
   JOIN tbl_compras_entidades e ON c.id_entidad = e.id_entidadcompra
  WHERE c.status = 'A'::bpchar;

--ALTER TABLE view_catalog_provee_poriden

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION rep_comp_fact_acum(
    _mes smallint,
    _ano smallint,
    _ultimos smallint,
    _noacumulados bit,
    _entcons smallint)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_cont smallint; _TotalEnt smallint; _NumEnt smallint; _NombreEnt varchar(15);
	_TotalCompras numeric(19,4); _UltimoAno numeric(19,4); _PenultimoAno numeric(19,4); _AnteriorAno numeric(19,4);
	_ENE numeric(19,4); _FEB numeric(19,4); _MAR numeric(19,4); _ABR numeric(19,4); _MAY numeric(19,4); _JUN numeric(19,4); 
	_JUL numeric(19,4); _AGO numeric(19,4); _SEP numeric(19,4); _OCT numeric(19,4);	_NOV numeric(19,4); _DIC numeric(19,4);
	_TVE RECORD;
BEGIN

	

CREATE LOCAL TEMPORARY TABLE _TMP_COMPRAS_ENT (
		part serial NOT NULL ,
		Entidad varchar (15)  NOT NULL ,
		Total numeric(19,4) NOT NULL 
	); 
	

CREATE LOCAL TEMPORARY TABLE _TMP_COMPRAS (
		part serial NOT NULL ,
		Periodo varchar (20)  NOT NULL ,
		Total numeric(19,4) NOT NULL 
	);
	

CREATE LOCAL TEMPORARY TABLE _TMP_COMPRAS_ENT_ANO (
		part serial NOT NULL ,
		Entidad varchar (15)  NOT NULL ,
		Ultimo numeric(19,4) NOT NULL ,
		Penultimo numeric(19,4) NOT NULL ,
		Anterior numeric(19,4) NOT NULL 
	); 
	

CREATE LOCAL TEMPORARY TABLE _TMP_COMPRAS_ENT_MES (
		part serial NOT NULL ,
		Entidad varchar (15)  NOT NULL ,
		ENE numeric(19,4) NOT NULL ,
		FEB numeric(19,4) NOT NULL ,
		MAR numeric(19,4) NOT NULL ,
		ABR numeric(19,4) NOT NULL ,
		MAY numeric(19,4) NOT NULL ,
		JUN numeric(19,4) NOT NULL ,
		JUL numeric(19,4) NOT NULL ,
		AGO numeric(19,4) NOT NULL ,
		SEP numeric(19,4) NOT NULL ,
		OCT numeric(19,4) NOT NULL ,
		NOV numeric(19,4) NOT NULL ,
		DIC numeric(19,4) NOT NULL 
	); 

	IF(_NoAcumulados = '0') -- es acumulados generales
	THEN
		IF(_EntCons = -1) -- Se trata del acumulado de entidades generales
		THEN
			if(_Ultimos = 1) -- se trata de comparativo mensual
			then
				_cont := 1;
				while _cont <= 12
				loop
					_TotalCompras := coalesce(( select sum(SubTotal * TC) 
																			from TBL_COMPRAS_FACTURAS_CAB
																			where Status <> 'C' and date_part('Month',Fecha) = _cont and date_part('Year',Fecha) = _Ano ),0);
					INSERT INTO _TMP_COMPRAS (Periodo,Total)
					SELECT GetCharMonth(_cont), round(_TotalCompras,0);
				
					_cont := _cont + 1;
				end loop;
			
			else -- De lo contrario es un comparativo anual

				_cont := _Ano - _Ultimos + 1;
			
				while _cont <= _Ano
				loop
					_TotalCompras := coalesce(( select sum(SubTotal * TC) 
																			from TBL_COMPRAS_FACTURAS_CAB
																			where Status <> 'C' and date_part('Year',Fecha) = _cont ),0);
					
					INSERT INTO _TMP_COMPRAS (Periodo,Total)
					SELECT cast(_cont as varchar), round(_TotalCompras,0); 
					
					_cont := _cont + 1;
				end loop;
			
			end if;
		
		ELSE -- se trata de una entidad en especifico
		
			if(_Ultimos = 1) -- se trata de comparativo mensual
			then
				_cont := 1;
				while _cont <= 12
				loop
					_TotalCompras := coalesce(( select sum(SubTotal * TC) 
																			from TBL_COMPRAS_FACTURAS_CAB
																			where ID_Entidad = _EntCons and Status <> 'C' and date_part('Month',Fecha) = _cont and date_part('Year',Fecha) = _Ano ),0);
					INSERT INTO _TMP_COMPRAS (Periodo,Total)
					SELECT GetCharMonth(_cont), round(_TotalCompras,0); 
				
					_cont := _cont + 1;
				end loop;
			
			else -- De lo contrario es un comparativo anual
				_cont := _Ano - _Ultimos + 1;
			
				while _cont <= _Ano
				loop
					_TotalCompras := coalesce(( select sum(SubTotal * TC) 
																			from TBL_COMPRAS_FACTURAS_CAB
																			where ID_Entidad = _EntCons and Status <> 'C' and date_part('Year',Fecha) = _cont ),0);
					
					INSERT INTO _TMP_COMPRAS (Periodo,Total)
					SELECT cast(_cont as varchar), round(_TotalCompras,0); 
					
					_cont := _cont + 1;
				end loop;
			
			end if;
		END IF;

		RETURN QUERY
		select Periodo, Total
		from _TMP_COMPRAS
		order by part ASC;
	
	ELSE -- Se maneja por detalles de entidad
	
		IF(_EntCons = -1) -- Se trata de comparativos todas las entidades en todos los meses o a?os
		THEN
			if(_Ultimos = 1) -- se trata de comparativo mensual
			then
				for _TVE in	(	SELECT ID_EntidadCompra, Descripcion
								FROM TBL_COMPRAS_ENTIDADES
								WHERE ID_TipoEntidad = 0
								ORDER BY ID_EntidadCompra asc
							)
				loop
					_NumEnt := _TVE.ID_EntidadCompra;
					_NombreEnt := _TVE.Descripcion;
		
					_ENE := coalesce( (	select sum(SubTotal * TC)
																from TBL_COMPRAS_FACTURAS_CAB
																where Status <> 'C' and ID_Entidad = _NumEnt and date_part('Month',Fecha) = 1 and date_part('Year',Fecha) = _Ano ), 0);
					_FEB := coalesce( (	select sum(SubTotal * TC)
																from TBL_COMPRAS_FACTURAS_CAB
																where Status <> 'C' and ID_Entidad = _NumEnt and date_part('Month',Fecha) = 2 and date_part('Year',Fecha) = _Ano ), 0);
					_MAR := coalesce( (	select sum(SubTotal * TC)
																from TBL_COMPRAS_FACTURAS_CAB
																where Status <> 'C' and ID_Entidad = _NumEnt and date_part('Month',Fecha) = 3 and date_part('Year',Fecha) = _Ano ), 0);
					_ABR := coalesce( (	select sum(SubTotal * TC)
																from TBL_COMPRAS_FACTURAS_CAB
																where Status <> 'C' and ID_Entidad = _NumEnt and date_part('Month',Fecha) = 4 and date_part('Year',Fecha) = _Ano ), 0);
					_MAY := coalesce( (	select sum(SubTotal * TC)
																from TBL_COMPRAS_FACTURAS_CAB
																where Status <> 'C' and ID_Entidad = _NumEnt and date_part('Month',Fecha) = 5 and date_part('Year',Fecha) = _Ano ), 0);
					_JUN := coalesce( (	select sum(SubTotal * TC)
																from TBL_COMPRAS_FACTURAS_CAB
																where Status <> 'C' and ID_Entidad = _NumEnt and date_part('Month',Fecha) = 6 and date_part('Year',Fecha) = _Ano ), 0);
					_JUL := coalesce( (	select sum(SubTotal * TC)
																from TBL_COMPRAS_FACTURAS_CAB
																where Status <> 'C' and ID_Entidad = _NumEnt and date_part('Month',Fecha) = 7 and date_part('Year',Fecha) = _Ano ), 0);
					_AGO := coalesce( (	select sum(SubTotal * TC)
																from TBL_COMPRAS_FACTURAS_CAB
																where Status <> 'C' and ID_Entidad = _NumEnt and date_part('Month',Fecha) = 8 and date_part('Year',Fecha) = _Ano ), 0);
					_SEP := coalesce( (	select sum(SubTotal * TC)
																from TBL_COMPRAS_FACTURAS_CAB
																where Status <> 'C' and ID_Entidad = _NumEnt and date_part('Month',Fecha) = 9 and date_part('Year',Fecha) = _Ano ), 0);
					_OCT := coalesce( (	select sum(SubTotal * TC)
																from TBL_COMPRAS_FACTURAS_CAB
																where Status <> 'C' and ID_Entidad = _NumEnt and date_part('Month',Fecha) = 10 and date_part('Year',Fecha) = _Ano ), 0);
					_NOV := coalesce( (	select sum(SubTotal * TC)
																from TBL_COMPRAS_FACTURAS_CAB
																where Status <> 'C' and ID_Entidad = _NumEnt and date_part('Month',Fecha) = 11 and date_part('Year',Fecha) = _Ano ), 0);
					_DIC := coalesce( (	select sum(SubTotal * TC)
																from TBL_COMPRAS_FACTURAS_CAB
																where Status <> 'C' and ID_Entidad = _NumEnt and date_part('Month',Fecha) = 12 and date_part('Year',Fecha) = _Ano ), 0);
		
					INSERT INTO _TMP_COMPRAS_ENT_MES (Entidad,ENE,FEB,MAR,ABR,MAY,JUN,JUL,AGO,SEP,OCT,NOV,DIC)
					SELECT _NombreEnt, round(_ENE,0), round(_FEB,0), round(_MAR,0),  round(_ABR,0),  round(_MAY,0),  round(_JUN,0),  
						round(_JUL,0),  round(_AGO,0),  round(_SEP,0), round(_OCT,0),  round(_NOV,0),  round(_DIC,0);
									
				end loop;

				RETURN QUERY
				select Entidad,ENE,FEB,MAR,ABR,MAY,JUN,JUL,AGO,SEP,OCT,NOV,DIC
				from _TMP_COMPRAS_ENT_MES;
		
			else -- De lo contrario es un comparativo anual
			
				for _TVE in	(	SELECT ID_EntidadCompra, Descripcion
								FROM TBL_COMPRAS_ENTIDADES
								WHERE ID_TipoEntidad = 0
								ORDER BY ID_EntidadCompra asc
							)
				loop
					_NumEnt := _TVE.ID_EntidadCompra;
					_NombreEnt := _TVE.Descripcion;
		
					_UltimoAno := coalesce(( select sum(SubTotal * TC) 
																			from TBL_COMPRAS_FACTURAS_CAB
																			where Status <> 'C' and ID_Entidad = _NumEnt and date_part('Year',Fecha) = _Ano ),0);
					_PenultimoAno := coalesce(( select sum(SubTotal * TC) 
																			from TBL_COMPRAS_FACTURAS_CAB
																			where Status <> 'C' and ID_Entidad = _NumEnt and date_part('Year',Fecha) = (_Ano-1) ),0);
					_AnteriorAno := coalesce(( select sum(SubTotal * TC) 
																			from TBL_COMPRAS_FACTURAS_CAB
																			where Status <> 'C' and ID_Entidad = _NumEnt and date_part('Year',Fecha) = (_Ano-2) ),0);
		
					INSERT INTO _TMP_COMPRAS_ENT_ANO (Entidad,Ultimo,Penultimo,Anterior)
					SELECT _NombreEnt, round(_UltimoAno,0), round(_PenultimoAno,0), round(_AnteriorAno,0);

				end loop;
				
				RETURN QUERY
				select Entidad,Ultimo,Penultimo,Anterior
				from _TMP_COMPRAS_ENT_ANO;
		
			end if;
		
		ELSE -- se trata de comparativos de todas las entidades pero en un mes o ano especifico
		
			if(_Ultimos = 1) -- se trata de comparativo mensual
			then
				for _TVE in	(	SELECT ID_EntidadCompra, Descripcion
								FROM TBL_COMPRAS_ENTIDADES
								WHERE ID_TipoEntidad = 0
								ORDER BY ID_EntidadCompra asc
							)
				loop
					_NumEnt := _TVE.ID_EntidadCompra;
					_NombreEnt := _TVE.Descripcion;
		
					_TotalCompras := coalesce( (	select sum(SubTotal * TC)
																				from TBL_COMPRAS_FACTURAS_CAB
																				where Status <> 'C' and ID_Entidad = _NumEnt and date_part('Month',Fecha) = _Mes and date_part('Year',Fecha) = _Ano ), 0);
		
					INSERT INTO _TMP_COMPRAS_ENT (Entidad,Total)
					SELECT _NombreEnt, round(_TotalCompras,0);   
									
				end loop;
				
			else -- De lo contrario es un comparativo anual
			
				for _TVE in	(	SELECT ID_EntidadCompra, Descripcion
								FROM TBL_COMPRAS_ENTIDADES
								WHERE ID_TipoEntidad = 0
								ORDER BY ID_EntidadCompra asc
							)
				loop
					_NumEnt := _TVE.ID_EntidadCompra;
					_NombreEnt := _TVE.Descripcion;
					
					_TotalCompras := coalesce(( select sum(SubTotal * TC) 
																			from TBL_COMPRAS_FACTURAS_CAB
																			where Status <> 'C' and ID_Entidad = _NumEnt and date_part('Year',Fecha) = _Ano ),0);
		
					INSERT INTO _TMP_COMPRAS_ENT (Entidad,Total)
					SELECT _NombreEnt, round(_TotalCompras,0);  
					
				end loop;
		
			end if;

			RETURN QUERY
			select Entidad,Total
			from _TMP_COMPRAS_ENT;

		END IF;

	END IF;
	
	DROP TABLE _TMP_COMPRAS;
	DROP TABLE _TMP_COMPRAS_ENT;
	DROP TABLE _TMP_COMPRAS_ENT_MES;
	DROP TABLE _TMP_COMPRAS_ENT_ANO;
END
$BODY$
  LANGUAGE plpgsql;
--ALTER FUNCTION rep_comp_fact_acum(smallint, smallint, smallint, bit, smallint)

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION rep_comp_dev_acum(
    _mes smallint,
    _ano smallint,
    _ultimos smallint,
    _noacumulados bit,
    _entcons smallint,
    _tipo character)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_cont smallint; _TotalEnt smallint; _NumEnt smallint; _NombreEnt varchar(15);
	_TotalDevoluciones numeric(19,4); _UltimoAno numeric(19,4); _PenultimoAno numeric(19,4); _AnteriorAno numeric(19,4);
	_ENE numeric(19,4); _FEB numeric(19,4); _MAR numeric(19,4); _ABR numeric(19,4); _MAY numeric(19,4); _JUN numeric(19,4); 
	_JUL numeric(19,4); _AGO numeric(19,4); _SEP numeric(19,4); _OCT numeric(19,4);	_NOV numeric(19,4); _DIC numeric(19,4);
	_TVE RECORD;
BEGIN

	

CREATE LOCAL TEMPORARY TABLE _TMP_DEVOLUCIONES_ENT (
		part serial NOT NULL ,
		Entidad varchar (15)  NOT NULL ,
		Total numeric(19,4) NOT NULL 
	); 
	

CREATE LOCAL TEMPORARY TABLE _TMP_DEVOLUCIONES (
		part serial NOT NULL ,
		Periodo varchar (20)  NOT NULL ,
		Total numeric(19,4) NOT NULL 
	);
	

CREATE LOCAL TEMPORARY TABLE _TMP_DEVOLUCIONES_ENT_ANO (
		part serial NOT NULL ,
		Entidad varchar (15)  NOT NULL ,
		Ultimo numeric(19,4) NOT NULL ,
		Penultimo numeric(19,4) NOT NULL ,
		Anterior numeric(19,4) NOT NULL 
	); 
	

CREATE LOCAL TEMPORARY TABLE _TMP_DEVOLUCIONES_ENT_MES (
		part serial NOT NULL ,
		Entidad varchar (15)  NOT NULL ,
		ENE numeric(19,4) NOT NULL ,
		FEB numeric(19,4) NOT NULL ,
		MAR numeric(19,4) NOT NULL ,
		ABR numeric(19,4) NOT NULL ,
		MAY numeric(19,4) NOT NULL ,
		JUN numeric(19,4) NOT NULL ,
		JUL numeric(19,4) NOT NULL ,
		AGO numeric(19,4) NOT NULL ,
		SEP numeric(19,4) NOT NULL ,
		OCT numeric(19,4) NOT NULL ,
		NOV numeric(19,4) NOT NULL ,
		DIC numeric(19,4) NOT NULL 
	); 

	IF(_NoAcumulados = '0') -- es acumulados generales
	THEN
		IF(_EntCons = -1) -- Se trata del acumulado de entidades generales
		THEN
			if(_Ultimos = 1) -- se trata de comparativo mensual
			then
				_cont := 1;
				while _cont <= 12
				loop
					if _Tipo = '---'
					then
						_TotalDevoluciones := coalesce(( select sum(SubTotal * TC) 
																			from TBL_COMPRAS_DEVOLUCIONES_CAB
																			where Status <> 'C' and date_part('Month',Fecha) = _cont and date_part('Year',Fecha) = _Ano ),0);
					else
						_TotalDevoluciones := coalesce(( select sum(SubTotal * TC) 
																			from TBL_COMPRAS_DEVOLUCIONES_CAB
																			where Status <> 'C' and date_part('Month',Fecha) = _cont and date_part('Year',Fecha) = _Ano and DevReb = _Tipo ),0);
					end if;

					INSERT INTO _TMP_DEVOLUCIONES (Periodo,Total)
					SELECT GetCharMonth(_cont), round(_TotalDevoluciones,0);
				
					_cont := _cont + 1;
				end loop;
			
			else -- De lo contrario es un comparativo anual

				_cont := _Ano - _Ultimos + 1;
			
				while _cont <= _Ano
				loop
					if _Tipo = '---'
					then
						_TotalDevoluciones := coalesce(( select sum(SubTotal * TC) 
																			from TBL_COMPRAS_DEVOLUCIONES_CAB
																			where Status <> 'C' and date_part('Year',Fecha) = _cont ),0);
					else
						_TotalDevoluciones := coalesce(( select sum(SubTotal * TC) 
																			from TBL_COMPRAS_DEVOLUCIONES_CAB
																			where Status <> 'C' and date_part('Year',Fecha) = _cont and DevReb = _Tipo ),0);
					end if;
					
					INSERT INTO _TMP_DEVOLUCIONES (Periodo,Total)
					SELECT cast(_cont as varchar), round(_TotalDevoluciones,0); 
					
					_cont := _cont + 1;
				end loop;
			
			end if;
		
		ELSE -- se trata de una entidad en especifico
		
			if(_Ultimos = 1) -- se trata de comparativo mensual
			then
				_cont := 1;
				while _cont <= 12
				loop
					if _Tipo = '---'
					then
						_TotalDevoluciones := coalesce(( select sum(SubTotal * TC) 
																			from TBL_COMPRAS_DEVOLUCIONES_CAB
																			where ID_Entidad = _EntCons and Status <> 'C' and date_part('Month',Fecha) = _cont and date_part('Year',Fecha) = _Ano ),0);
					else
						_TotalDevoluciones := coalesce(( select sum(SubTotal * TC) 
																			from TBL_COMPRAS_DEVOLUCIONES_CAB
																			where ID_Entidad = _EntCons and Status <> 'C' and date_part('Month',Fecha) = _cont and date_part('Year',Fecha) = _Ano and DevReb = _Tipo ),0);
					end if;
					
					INSERT INTO _TMP_DEVOLUCIONES (Periodo,Total)
					SELECT GetCharMonth(_cont), round(_TotalDevoluciones,0); 
				
					_cont := _cont + 1;
				end loop;
			
			else -- De lo contrario es un comparativo anual
				_cont := _Ano - _Ultimos + 1;
			
				while _cont <= _Ano
				loop
					if _Tipo = '---'
					then
						_TotalDevoluciones := coalesce(( select sum(SubTotal * TC) 
																			from TBL_COMPRAS_DEVOLUCIONES_CAB
																			where ID_Entidad = _EntCons and Status <> 'C' and date_part('Year',Fecha) = _cont ),0);
					else
						_TotalDevoluciones := coalesce(( select sum(SubTotal * TC) 
																			from TBL_COMPRAS_DEVOLUCIONES_CAB
																			where ID_Entidad = _EntCons and Status <> 'C' and date_part('Year',Fecha) = _cont and DevReb = _Tipo ),0);
					end if;
					
					INSERT INTO _TMP_DEVOLUCIONES (Periodo,Total)
					SELECT cast(_cont as varchar), round(_TotalDevoluciones,0); 
					
					_cont := _cont + 1;
				end loop;
			
			end if;
		END IF;

		RETURN QUERY
		select Periodo, Total
		from _TMP_DEVOLUCIONES
		order by part ASC;
	
	ELSE -- Se maneja por detalles de entidad
	
		IF(_EntCons = -1) -- Se trata de comparativos todas las entidades en todos los meses o a?os
		THEN
			if(_Ultimos = 1) -- se trata de comparativo mensual
			then
				for _TVE in	(	SELECT ID_EntidadCompra, Descripcion
								FROM TBL_COMPRAS_ENTIDADES
								WHERE ID_TipoEntidad = 0
								ORDER BY ID_EntidadCompra asc
							)
				loop
					_NumEnt := _TVE.ID_EntidadCompra;
					_NombreEnt := _TVE.Descripcion;

					if _Tipo = '---'
					then
						_ENE := coalesce( (	select sum(SubTotal * TC)
																from TBL_COMPRAS_DEVOLUCIONES_CAB
																where Status <> 'C' and ID_Entidad = _NumEnt and date_part('Month',Fecha) = 1 and date_part('Year',Fecha) = _Ano ), 0);
						_FEB := coalesce( (	select sum(SubTotal * TC)
																from TBL_COMPRAS_DEVOLUCIONES_CAB
																where Status <> 'C' and ID_Entidad = _NumEnt and date_part('Month',Fecha) = 2 and date_part('Year',Fecha) = _Ano ), 0);
						_MAR := coalesce( (	select sum(SubTotal * TC)
																from TBL_COMPRAS_DEVOLUCIONES_CAB
																where Status <> 'C' and ID_Entidad = _NumEnt and date_part('Month',Fecha) = 3 and date_part('Year',Fecha) = _Ano ), 0);
						_ABR := coalesce( (	select sum(SubTotal * TC)
																from TBL_COMPRAS_DEVOLUCIONES_CAB
																where Status <> 'C' and ID_Entidad = _NumEnt and date_part('Month',Fecha) = 4 and date_part('Year',Fecha) = _Ano ), 0);
						_MAY := coalesce( (	select sum(SubTotal * TC)
																from TBL_COMPRAS_DEVOLUCIONES_CAB
																where Status <> 'C' and ID_Entidad = _NumEnt and date_part('Month',Fecha) = 5 and date_part('Year',Fecha) = _Ano ), 0);
						_JUN := coalesce( (	select sum(SubTotal * TC)
																from TBL_COMPRAS_DEVOLUCIONES_CAB
																where Status <> 'C' and ID_Entidad = _NumEnt and date_part('Month',Fecha) = 6 and date_part('Year',Fecha) = _Ano ), 0);
						_JUL := coalesce( (	select sum(SubTotal * TC)
																from TBL_COMPRAS_DEVOLUCIONES_CAB
																where Status <> 'C' and ID_Entidad = _NumEnt and date_part('Month',Fecha) = 7 and date_part('Year',Fecha) = _Ano ), 0);
						_AGO := coalesce( (	select sum(SubTotal * TC)
																from TBL_COMPRAS_DEVOLUCIONES_CAB
																where Status <> 'C' and ID_Entidad = _NumEnt and date_part('Month',Fecha) = 8 and date_part('Year',Fecha) = _Ano ), 0);
						_SEP := coalesce( (	select sum(SubTotal * TC)
																from TBL_COMPRAS_DEVOLUCIONES_CAB
																where Status <> 'C' and ID_Entidad = _NumEnt and date_part('Month',Fecha) = 9 and date_part('Year',Fecha) = _Ano ), 0);
						_OCT := coalesce( (	select sum(SubTotal * TC)
																from TBL_COMPRAS_DEVOLUCIONES_CAB
																where Status <> 'C' and ID_Entidad = _NumEnt and date_part('Month',Fecha) = 10 and date_part('Year',Fecha) = _Ano ), 0);
						_NOV := coalesce( (	select sum(SubTotal * TC)
																from TBL_COMPRAS_DEVOLUCIONES_CAB
																where Status <> 'C' and ID_Entidad = _NumEnt and date_part('Month',Fecha) = 11 and date_part('Year',Fecha) = _Ano ), 0);
						_DIC := coalesce( (	select sum(SubTotal * TC)
																from TBL_COMPRAS_DEVOLUCIONES_CAB
																where Status <> 'C' and ID_Entidad = _NumEnt and date_part('Month',Fecha) = 12 and date_part('Year',Fecha) = _Ano ), 0);
					else
						_ENE := coalesce( (	select sum(SubTotal * TC)
																from TBL_COMPRAS_DEVOLUCIONES_CAB
																where Status <> 'C' and ID_Entidad = _NumEnt and date_part('Month',Fecha) = 1 and date_part('Year',Fecha) = _Ano and DevReb = _Tipo ), 0);
						_FEB := coalesce( (	select sum(SubTotal * TC)
																from TBL_COMPRAS_DEVOLUCIONES_CAB
																where Status <> 'C' and ID_Entidad = _NumEnt and date_part('Month',Fecha) = 2 and date_part('Year',Fecha) = _Ano and DevReb = _Tipo ), 0);
						_MAR := coalesce( (	select sum(SubTotal * TC)
																from TBL_COMPRAS_DEVOLUCIONES_CAB
																where Status <> 'C' and ID_Entidad = _NumEnt and date_part('Month',Fecha) = 3 and date_part('Year',Fecha) = _Ano and DevReb = _Tipo ), 0);
						_ABR := coalesce( (	select sum(SubTotal * TC)
																from TBL_COMPRAS_DEVOLUCIONES_CAB
																where Status <> 'C' and ID_Entidad = _NumEnt and date_part('Month',Fecha) = 4 and date_part('Year',Fecha) = _Ano and DevReb = _Tipo ), 0);
						_MAY := coalesce( (	select sum(SubTotal * TC)
																from TBL_COMPRAS_DEVOLUCIONES_CAB
																where Status <> 'C' and ID_Entidad = _NumEnt and date_part('Month',Fecha) = 5 and date_part('Year',Fecha) = _Ano and DevReb = _Tipo ), 0);
						_JUN := coalesce( (	select sum(SubTotal * TC)
																from TBL_COMPRAS_DEVOLUCIONES_CAB
																where Status <> 'C' and ID_Entidad = _NumEnt and date_part('Month',Fecha) = 6 and date_part('Year',Fecha) = _Ano and DevReb = _Tipo ), 0);
						_JUL := coalesce( (	select sum(SubTotal * TC)
																from TBL_COMPRAS_DEVOLUCIONES_CAB
																where Status <> 'C' and ID_Entidad = _NumEnt and date_part('Month',Fecha) = 7 and date_part('Year',Fecha) = _Ano and DevReb = _Tipo ), 0);
						_AGO := coalesce( (	select sum(SubTotal * TC)
																from TBL_COMPRAS_DEVOLUCIONES_CAB
																where Status <> 'C' and ID_Entidad = _NumEnt and date_part('Month',Fecha) = 8 and date_part('Year',Fecha) = _Ano and DevReb = _Tipo ), 0);
						_SEP := coalesce( (	select sum(SubTotal * TC)
																from TBL_COMPRAS_DEVOLUCIONES_CAB
																where Status <> 'C' and ID_Entidad = _NumEnt and date_part('Month',Fecha) = 9 and date_part('Year',Fecha) = _Ano and DevReb = _Tipo ), 0);
						_OCT := coalesce( (	select sum(SubTotal * TC)
																from TBL_COMPRAS_DEVOLUCIONES_CAB
																where Status <> 'C' and ID_Entidad = _NumEnt and date_part('Month',Fecha) = 10 and date_part('Year',Fecha) = _Ano and DevReb = _Tipo ), 0);
						_NOV := coalesce( (	select sum(SubTotal * TC)
																from TBL_COMPRAS_DEVOLUCIONES_CAB
																where Status <> 'C' and ID_Entidad = _NumEnt and date_part('Month',Fecha) = 11 and date_part('Year',Fecha) = _Ano and DevReb = _Tipo ), 0);
						_DIC := coalesce( (	select sum(SubTotal * TC)
																from TBL_COMPRAS_DEVOLUCIONES_CAB
																where Status <> 'C' and ID_Entidad = _NumEnt and date_part('Month',Fecha) = 12 and date_part('Year',Fecha) = _Ano and DevReb = _Tipo ), 0);
					end if;
					
					INSERT INTO _TMP_DEVOLUCIONES_ENT_MES (Entidad,ENE,FEB,MAR,ABR,MAY,JUN,JUL,AGO,SEP,OCT,NOV,DIC)
					SELECT _NombreEnt, round(_ENE,0), round(_FEB,0), round(_MAR,0),  round(_ABR,0),  round(_MAY,0),  round(_JUN,0),  
						round(_JUL,0),  round(_AGO,0),  round(_SEP,0), round(_OCT,0),  round(_NOV,0),  round(_DIC,0);
									
				end loop;

				RETURN QUERY
				select Entidad,ENE,FEB,MAR,ABR,MAY,JUN,JUL,AGO,SEP,OCT,NOV,DIC
				from _TMP_DEVOLUCIONES_ENT_MES;
		
			else -- De lo contrario es un comparativo anual
			
				for _TVE in	(	SELECT ID_EntidadCompra, Descripcion
								FROM TBL_COMPRAS_ENTIDADES
								WHERE ID_TipoEntidad = 0
								ORDER BY ID_EntidadCompra asc
							)
				loop
					_NumEnt := _TVE.ID_EntidadCompra;
					_NombreEnt := _TVE.Descripcion;

					if _Tipo = '---'
					then
						_UltimoAno := coalesce(( select sum(SubTotal * TC) 
																			from TBL_COMPRAS_DEVOLUCIONES_CAB
																			where Status <> 'C' and ID_Entidad = _NumEnt and date_part('Year',Fecha) = _Ano ),0);
						_PenultimoAno := coalesce(( select sum(SubTotal * TC) 
																			from TBL_COMPRAS_DEVOLUCIONES_CAB
																			where Status <> 'C' and ID_Entidad = _NumEnt and date_part('Year',Fecha) = (_Ano-1) ),0);
						_AnteriorAno := coalesce(( select sum(SubTotal * TC) 
																			from TBL_COMPRAS_DEVOLUCIONES_CAB
																			where Status <> 'C' and ID_Entidad = _NumEnt and date_part('Year',Fecha) = (_Ano-2) ),0);
					else
						_UltimoAno := coalesce(( select sum(SubTotal * TC) 
																			from TBL_COMPRAS_DEVOLUCIONES_CAB
																			where Status <> 'C' and ID_Entidad = _NumEnt and date_part('Year',Fecha) = _Ano and DevReb = _Tipo ),0);
						_PenultimoAno := coalesce(( select sum(SubTotal * TC) 
																			from TBL_COMPRAS_DEVOLUCIONES_CAB
																			where Status <> 'C' and ID_Entidad = _NumEnt and date_part('Year',Fecha) = (_Ano-1) and DevReb = _Tipo ),0);
						_AnteriorAno := coalesce(( select sum(SubTotal * TC) 
																			from TBL_COMPRAS_DEVOLUCIONES_CAB
																			where Status <> 'C' and ID_Entidad = _NumEnt and date_part('Year',Fecha) = (_Ano-2) and DevReb = _Tipo ),0);
					end if;
					
					INSERT INTO _TMP_DEVOLUCIONES_ENT_ANO (Entidad,Ultimo,Penultimo,Anterior)
					SELECT _NombreEnt, round(_UltimoAno,0), round(_PenultimoAno,0), round(_AnteriorAno,0);

				end loop;
				
				RETURN QUERY
				select Entidad,Ultimo,Penultimo,Anterior
				from _TMP_DEVOLUCIONES_ENT_ANO;
		
			end if;
		
		ELSE -- se trata de comparativos de todas las entidades pero en un mes o ano especifico
		
			if(_Ultimos = 1) -- se trata de comparativo mensual
			then
				for _TVE in	(	SELECT ID_EntidadCompra, Descripcion
								FROM TBL_COMPRAS_ENTIDADES
								WHERE ID_TipoEntidad = 0
								ORDER BY ID_EntidadCompra asc
							)
				loop
					_NumEnt := _TVE.ID_EntidadCompra;
					_NombreEnt := _TVE.Descripcion;

					if _Tipo = '---'
					then
						_TotalDevoluciones := coalesce( (	select sum(SubTotal * TC)
																				from TBL_COMPRAS_DEVOLUCIONES_CAB
																				where Status <> 'C' and ID_Entidad = _NumEnt and date_part('Month',Fecha) = _Mes and date_part('Year',Fecha) = _Ano ), 0);
					else
						_TotalDevoluciones := coalesce( (	select sum(SubTotal * TC)
																				from TBL_COMPRAS_DEVOLUCIONES_CAB
																				where Status <> 'C' and ID_Entidad = _NumEnt and date_part('Month',Fecha) = _Mes and date_part('Year',Fecha) = _Ano and DevReb = _Tipo ), 0);
					end if;
					
					INSERT INTO _TMP_DEVOLUCIONES_ENT (Entidad,Total)
					SELECT _NombreEnt, round(_TotalDevoluciones,0);   
									
				end loop;
				
			else -- De lo contrario es un comparativo anual
			
				for _TVE in	(	SELECT ID_EntidadCompra, Descripcion
								FROM TBL_COMPRAS_ENTIDADES
								WHERE ID_TipoEntidad = 0
								ORDER BY ID_EntidadCompra asc
							)
				loop
					_NumEnt := _TVE.ID_EntidadCompra;
					_NombreEnt := _TVE.Descripcion;

					if _Tipo = '---'
					then
						_TotalDevoluciones := coalesce(( select sum(SubTotal * TC) 
																			from TBL_COMPRAS_DEVOLUCIONES_CAB
																			where Status <> 'C' and ID_Entidad = _NumEnt and date_part('Year',Fecha) = _Ano ),0);
					else
						_TotalDevoluciones := coalesce(( select sum(SubTotal * TC) 
																			from TBL_COMPRAS_DEVOLUCIONES_CAB
																			where Status <> 'C' and ID_Entidad = _NumEnt and date_part('Year',Fecha) = _Ano and DevReb = _Tipo ),0);
					end if;
					
					INSERT INTO _TMP_DEVOLUCIONES_ENT (Entidad,Total)
					SELECT _NombreEnt, round(_TotalDevoluciones,0);  
					
				end loop;
		
			end if;

			RETURN QUERY
			select Entidad,Total
			from _TMP_DEVOLUCIONES_ENT;

		END IF;

	END IF;
	
	DROP TABLE _TMP_DEVOLUCIONES;
	DROP TABLE _TMP_DEVOLUCIONES_ENT;
	DROP TABLE _TMP_DEVOLUCIONES_ENT_MES;
	DROP TABLE _TMP_DEVOLUCIONES_ENT_ANO;
END
$BODY$
  LANGUAGE plpgsql;
--ALTER FUNCTION rep_comp_dev_acum(smallint, smallint, smallint, bit, smallint, character)

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION rep_comp_gas_acum(
    _mes smallint,
    _ano smallint,
    _ultimos smallint,
    _noacumulados bit,
    _entcons smallint)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_cont smallint; _TotalEnt smallint; _NumEnt smallint; _NombreEnt varchar(15);
	_TotalGastos numeric(19,4); _UltimoAno numeric(19,4); _PenultimoAno numeric(19,4); _AnteriorAno numeric(19,4);
	_ENE numeric(19,4); _FEB numeric(19,4); _MAR numeric(19,4); _ABR numeric(19,4); _MAY numeric(19,4); _JUN numeric(19,4); 
	_JUL numeric(19,4); _AGO numeric(19,4); _SEP numeric(19,4); _OCT numeric(19,4);	_NOV numeric(19,4); _DIC numeric(19,4);
	_TVE RECORD;
BEGIN

	

CREATE LOCAL TEMPORARY TABLE _TMP_GASTOS_ENT (
		part serial NOT NULL ,
		Entidad varchar (15)  NOT NULL ,
		Total numeric(19,4) NOT NULL 
	); 
	

CREATE LOCAL TEMPORARY TABLE _TMP_GASTOS (
		part serial NOT NULL ,
		Periodo varchar (20)  NOT NULL ,
		Total numeric(19,4) NOT NULL 
	);
	

CREATE LOCAL TEMPORARY TABLE _TMP_GASTOS_ENT_ANO (
		part serial NOT NULL ,
		Entidad varchar (15)  NOT NULL ,
		Ultimo numeric(19,4) NOT NULL ,
		Penultimo numeric(19,4) NOT NULL ,
		Anterior numeric(19,4) NOT NULL 
	); 
	

CREATE LOCAL TEMPORARY TABLE _TMP_GASTOS_ENT_MES (
		part serial NOT NULL ,
		Entidad varchar (15)  NOT NULL ,
		ENE numeric(19,4) NOT NULL ,
		FEB numeric(19,4) NOT NULL ,
		MAR numeric(19,4) NOT NULL ,
		ABR numeric(19,4) NOT NULL ,
		MAY numeric(19,4) NOT NULL ,
		JUN numeric(19,4) NOT NULL ,
		JUL numeric(19,4) NOT NULL ,
		AGO numeric(19,4) NOT NULL ,
		SEP numeric(19,4) NOT NULL ,
		OCT numeric(19,4) NOT NULL ,
		NOV numeric(19,4) NOT NULL ,
		DIC numeric(19,4) NOT NULL 
	); 

	IF(_NoAcumulados = '0') -- es acumulados generales
	THEN
		IF(_EntCons = -1) -- Se trata del acumulado de entidades generales
		THEN
			if(_Ultimos = 1) -- se trata de comparativo mensual
			then
				_cont := 1;
				while _cont <= 12
				loop
					_TotalGastos := coalesce(( select sum(SubTotal * TC) 
																			from TBL_COMPRAS_GASTOS_CAB
																			where Status <> 'C' and date_part('Month',Fecha) = _cont and date_part('Year',Fecha) = _Ano ),0);
					INSERT INTO _TMP_GASTOS (Periodo,Total)
					SELECT GetCharMonth(_cont), round(_TotalGastos,0);
				
					_cont := _cont + 1;
				end loop;
			
			else -- De lo contrario es un comparativo anual

				_cont := _Ano - _Ultimos + 1;
			
				while _cont <= _Ano
				loop
					_TotalGastos := coalesce(( select sum(SubTotal * TC) 
																			from TBL_COMPRAS_GASTOS_CAB
																			where Status <> 'C' and date_part('Year',Fecha) = _cont ),0);
					
					INSERT INTO _TMP_GASTOS (Periodo,Total)
					SELECT cast(_cont as varchar), round(_TotalGastos,0); 
					
					_cont := _cont + 1;
				end loop;
			
			end if;
		
		ELSE -- se trata de una entidad en especifico
		
			if(_Ultimos = 1) -- se trata de comparativo mensual
			then
				_cont := 1;
				while _cont <= 12
				loop
					_TotalGastos := coalesce(( select sum(SubTotal * TC) 
																			from TBL_COMPRAS_GASTOS_CAB
																			where ID_Entidad = _EntCons and Status <> 'C' and date_part('Month',Fecha) = _cont and date_part('Year',Fecha) = _Ano ),0);
					INSERT INTO _TMP_GASTOS (Periodo,Total)
					SELECT GetCharMonth(_cont), round(_TotalGastos,0); 
				
					_cont := _cont + 1;
				end loop;
			
			else -- De lo contrario es un comparativo anual
				_cont := _Ano - _Ultimos + 1;
			
				while _cont <= _Ano
				loop
					_TotalGastos := coalesce(( select sum(SubTotal * TC) 
																			from TBL_COMPRAS_GASTOS_CAB
																			where ID_Entidad = _EntCons and Status <> 'C' and date_part('Year',Fecha) = _cont ),0);
					
					INSERT INTO _TMP_GASTOS (Periodo,Total)
					SELECT cast(_cont as varchar), round(_TotalGastos,0); 
					
					_cont := _cont + 1;
				end loop;
			
			end if;
		END IF;

		RETURN QUERY
		select Periodo, Total
		from _TMP_GASTOS
		order by part ASC;
	
	ELSE -- Se maneja por detalles de entidad
	
		IF(_EntCons = -1) -- Se trata de comparativos todas las entidades en todos los meses o a?os
		THEN
			if(_Ultimos = 1) -- se trata de comparativo mensual
			then
				for _TVE in	(	SELECT ID_EntidadCompra, Descripcion
								FROM TBL_COMPRAS_ENTIDADES
								WHERE ID_TipoEntidad = 2
								ORDER BY ID_EntidadCompra asc
							)
				loop
					_NumEnt := _TVE.ID_EntidadCompra;
					_NombreEnt := _TVE.Descripcion;
		
					_ENE := coalesce( (	select sum(SubTotal * TC)
																from TBL_COMPRAS_GASTOS_CAB
																where Status <> 'C' and ID_Entidad = _NumEnt and date_part('Month',Fecha) = 1 and date_part('Year',Fecha) = _Ano ), 0);
					_FEB := coalesce( (	select sum(SubTotal * TC)
																from TBL_COMPRAS_GASTOS_CAB
																where Status <> 'C' and ID_Entidad = _NumEnt and date_part('Month',Fecha) = 2 and date_part('Year',Fecha) = _Ano ), 0);
					_MAR := coalesce( (	select sum(SubTotal * TC)
																from TBL_COMPRAS_GASTOS_CAB
																where Status <> 'C' and ID_Entidad = _NumEnt and date_part('Month',Fecha) = 3 and date_part('Year',Fecha) = _Ano ), 0);
					_ABR := coalesce( (	select sum(SubTotal * TC)
																from TBL_COMPRAS_GASTOS_CAB
																where Status <> 'C' and ID_Entidad = _NumEnt and date_part('Month',Fecha) = 4 and date_part('Year',Fecha) = _Ano ), 0);
					_MAY := coalesce( (	select sum(SubTotal * TC)
																from TBL_COMPRAS_GASTOS_CAB
																where Status <> 'C' and ID_Entidad = _NumEnt and date_part('Month',Fecha) = 5 and date_part('Year',Fecha) = _Ano ), 0);
					_JUN := coalesce( (	select sum(SubTotal * TC)
																from TBL_COMPRAS_GASTOS_CAB
																where Status <> 'C' and ID_Entidad = _NumEnt and date_part('Month',Fecha) = 6 and date_part('Year',Fecha) = _Ano ), 0);
					_JUL := coalesce( (	select sum(SubTotal * TC)
																from TBL_COMPRAS_GASTOS_CAB
																where Status <> 'C' and ID_Entidad = _NumEnt and date_part('Month',Fecha) = 7 and date_part('Year',Fecha) = _Ano ), 0);
					_AGO := coalesce( (	select sum(SubTotal * TC)
																from TBL_COMPRAS_GASTOS_CAB
																where Status <> 'C' and ID_Entidad = _NumEnt and date_part('Month',Fecha) = 8 and date_part('Year',Fecha) = _Ano ), 0);
					_SEP := coalesce( (	select sum(SubTotal * TC)
																from TBL_COMPRAS_GASTOS_CAB
																where Status <> 'C' and ID_Entidad = _NumEnt and date_part('Month',Fecha) = 9 and date_part('Year',Fecha) = _Ano ), 0);
					_OCT := coalesce( (	select sum(SubTotal * TC)
																from TBL_COMPRAS_GASTOS_CAB
																where Status <> 'C' and ID_Entidad = _NumEnt and date_part('Month',Fecha) = 10 and date_part('Year',Fecha) = _Ano ), 0);
					_NOV := coalesce( (	select sum(SubTotal * TC)
																from TBL_COMPRAS_GASTOS_CAB
																where Status <> 'C' and ID_Entidad = _NumEnt and date_part('Month',Fecha) = 11 and date_part('Year',Fecha) = _Ano ), 0);
					_DIC := coalesce( (	select sum(SubTotal * TC)
																from TBL_COMPRAS_GASTOS_CAB
																where Status <> 'C' and ID_Entidad = _NumEnt and date_part('Month',Fecha) = 12 and date_part('Year',Fecha) = _Ano ), 0);
		
					INSERT INTO _TMP_GASTOS_ENT_MES (Entidad,ENE,FEB,MAR,ABR,MAY,JUN,JUL,AGO,SEP,OCT,NOV,DIC)
					SELECT _NombreEnt, round(_ENE,0), round(_FEB,0), round(_MAR,0),  round(_ABR,0),  round(_MAY,0),  round(_JUN,0),  
						round(_JUL,0),  round(_AGO,0),  round(_SEP,0), round(_OCT,0),  round(_NOV,0),  round(_DIC,0);
									
				end loop;

				RETURN QUERY
				select Entidad,ENE,FEB,MAR,ABR,MAY,JUN,JUL,AGO,SEP,OCT,NOV,DIC
				from _TMP_GASTOS_ENT_MES;
		
			else -- De lo contrario es un comparativo anual
			
				for _TVE in	(	SELECT ID_EntidadCompra, Descripcion
								FROM TBL_COMPRAS_ENTIDADES
								WHERE ID_TipoEntidad = 2
								ORDER BY ID_EntidadCompra asc
							)
				loop
					_NumEnt := _TVE.ID_EntidadCompra;
					_NombreEnt := _TVE.Descripcion;
		
					_UltimoAno := coalesce(( select sum(SubTotal * TC) 
																			from TBL_COMPRAS_GASTOS_CAB
																			where Status <> 'C' and ID_Entidad = _NumEnt and date_part('Year',Fecha) = _Ano ),0);
					_PenultimoAno := coalesce(( select sum(SubTotal * TC) 
																			from TBL_COMPRAS_GASTOS_CAB
																			where Status <> 'C' and ID_Entidad = _NumEnt and date_part('Year',Fecha) = (_Ano-1) ),0);
					_AnteriorAno := coalesce(( select sum(SubTotal * TC) 
																			from TBL_COMPRAS_GASTOS_CAB
																			where Status <> 'C' and ID_Entidad = _NumEnt and date_part('Year',Fecha) = (_Ano-2) ),0);
		
					INSERT INTO _TMP_GASTOS_ENT_ANO (Entidad,Ultimo,Penultimo,Anterior)
					SELECT _NombreEnt, round(_UltimoAno,0), round(_PenultimoAno,0), round(_AnteriorAno,0);

				end loop;
				
				RETURN QUERY
				select Entidad,Ultimo,Penultimo,Anterior
				from _TMP_GASTOS_ENT_ANO;
		
			end if;
		
		ELSE -- se trata de comparativos de todas las entidades pero en un mes o ano especifico
		
			if(_Ultimos = 1) -- se trata de comparativo mensual
			then
				for _TVE in	(	SELECT ID_EntidadCompra, Descripcion
								FROM TBL_COMPRAS_ENTIDADES
								WHERE ID_TipoEntidad = 2
								ORDER BY ID_EntidadCompra asc
							)
				loop
					_NumEnt := _TVE.ID_EntidadCompra;
					_NombreEnt := _TVE.Descripcion;
		
					_TotalGastos := coalesce( (	select sum(SubTotal * TC)
																				from TBL_COMPRAS_GASTOS_CAB
																				where Status <> 'C' and ID_Entidad = _NumEnt and date_part('Month',Fecha) = _Mes and date_part('Year',Fecha) = _Ano ), 0);
		
					INSERT INTO _TMP_GASTOS_ENT (Entidad,Total)
					SELECT _NombreEnt, round(_TotalGastos,0);   
									
				end loop;
				
			else -- De lo contrario es un comparativo anual
			
				for _TVE in	(	SELECT ID_EntidadCompra, Descripcion
								FROM TBL_COMPRAS_ENTIDADES
								WHERE ID_TipoEntidad = 2
								ORDER BY ID_EntidadCompra asc
							)
				loop
					_NumEnt := _TVE.ID_EntidadCompra;
					_NombreEnt := _TVE.Descripcion;
					
					_TotalGastos := coalesce(( select sum(SubTotal * TC) 
																			from TBL_COMPRAS_GASTOS_CAB
																			where Status <> 'C' and ID_Entidad = _NumEnt and date_part('Year',Fecha) = _Ano ),0);
		
					INSERT INTO _TMP_GASTOS_ENT (Entidad,Total)
					SELECT _NombreEnt, round(_TotalGastos,0);  
					
				end loop;
		
			end if;

			RETURN QUERY
			select Entidad,Total
			from _TMP_GASTOS_ENT;

		END IF;

	END IF;
	
	DROP TABLE _TMP_GASTOS;
	DROP TABLE _TMP_GASTOS_ENT;
	DROP TABLE _TMP_GASTOS_ENT_MES;
	DROP TABLE _TMP_GASTOS_ENT_ANO;
END
$BODY$
  LANGUAGE plpgsql;
--ALTER FUNCTION rep_comp_gas_acum(smallint, smallint, smallint, bit, smallint)

--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_catalog_entidades_nomina AS 
 SELECT c.id_sucursal AS clave, c.descripcion, c.status AS especial
   FROM tbl_companias c;

--ALTER TABLE view_catalog_entidades_nomina

--@FIN_BLOQUE
CREATE OR REPLACE VIEW view_catalog_empleados_poriden AS 
 SELECT c.id_empleado AS clave, (((c.nombre::text || ' '::text) || c.apellido_paterno::text) || ' '::text) || c.apellido_materno::text AS descripcion, (e.descripcion::text || ':'::text) || c.id_empleado::text AS especial, c.id_sucursal
   FROM tbl_nom_masemp c
   JOIN tbl_companias e ON c.id_compania = e.id_compania AND c.id_sucursal = e.id_sucursal
  WHERE c.status = 0;

--ALTER TABLE view_catalog_empleados_poriden

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION rep_calculo_aguinaldo(
    _id_sucursal smallint,
    _ano integer)
  RETURNS SETOF record AS
$BODY$
DECLARE 
	_EMP RECORD; _NOM RECORD; _fecha_desde timestamp; _fecha_hasta timestamp; _AnosCumplidos smallint; _DiasAg smallint; 
	_ImporteAguinaldo numeric(19,4); _IAE numeric(10,2); _IAG numeric(10,2); _DiasAno smallint; _TOTAL_DAG numeric(10,6); 
	_SalarioMinimo numeric(19,4); _TIAG numeric(10,2); _TIAE numeric(10,2); _TTIAG numeric(10,2); _TTIAE numeric(10,2); 
BEGIN
	_fecha_desde = getfecha(1,1,_ano);
	_fecha_hasta = getfecha(31,12,_ano);
	_DiasAno := getfechadiff('day', getfecha(1,1,_ano), getfecha(1,1,(_ano+1)) );
	_TIAG := 0.00;
	_TIAE := 0.00;
	_TTIAG := 0.00;
	_TTIAE := 0.00;
	_SalarioMinimo := (	select VDecimal from TBL_VARIABLES	
							where ID_Variable = 'SALMIN' );	
	CREATE LOCAL TEMPORARY TABLE _TMP_AGUINALDOS (
		ID_Empleado char(6) NOT NULL ,
		Nombre varchar(254) NOT NULL ,
		Ingreso varchar(12) NOT NULL ,
		Anos smallint NOT NULL ,
		Dias smallint NOT NULL ,
		IAG numeric(10,2) NOT NULL ,
		IAE numeric(10,2) NOT NULL ,
		Total numeric(10,2) NOT NULL
	); 

	IF _ID_Sucursal <> -1
	THEN
		FOR _EMP IN
			( SELECT ID_Empleado, (Nombre || ' ' || Apellido_Paterno || ' ' || Apellido_Materno) as Nombre, Fecha_de_Ingreso as Ingreso,
				CalculoMixto, Salario_Diario, Salario_Mixto
			 FROM TBL_NOM_MASEMP
			 WHERE ID_Sucursal = _ID_Sucursal and Fecha_de_Ingreso <= _Fecha_Hasta and 
				((Status = 0) or (Status = 2 and Fecha_para_Liquidaciones >= _Fecha_Desde))
			 ORDER BY ID_Empleado ASC )
		LOOP
			_AnosCumplidos := getabsfechadiff('year',_EMP.Ingreso,_Fecha_Hasta);
			_TOTAL_DAG := 	case 	when _EMP.Ingreso < _Fecha_Desde
						then getfechadiff('day',_Fecha_Desde, _Fecha_Hasta) + 1
						else getfechadiff('day',_EMP.Ingreso, _Fecha_Hasta) + 1 
					end;
			_DiasAg := case		when -- Selecciona los dias de aguinaldo segun su antig√ºedad
					( 	select a.Dias 
						from TBL_NOM_AGUINALDO a
						where a.Desde <= _AnosCumplidos and a.Hasta >= _AnosCumplidos 
						limit 1 ) is null then 0 
					else
					   ( 	select a.Dias 
						from TBL_NOM_AGUINALDO a 
						where a.Desde <= _AnosCumplidos and a.Hasta >= _AnosCumplidos
						limit 1  ) 
					end;

			IF _TOTAL_DAG <> 0
			THEN
				_ImporteAguinaldo := ROUND( ((case when _EMP.CalculoMixto = '0' then _EMP.Salario_Diario else _EMP.Salario_Mixto end) * 
									(cast((_TOTAL_DAG * _DiasAg) as numeric) / _DiasAno )), 2);
				_IAE := case when ROUND( ((_TOTAL_DAG / _DiasAno) * (_SalarioMinimo * 30)), 2) < _ImporteAguinaldo 
									then  ROUND( ((_TOTAL_DAG / _DiasAno) * (_SalarioMinimo * 30)), 2) 
									else _ImporteAguinaldo 
								end;
				_IAG := case when _IAE < _ImporteAguinaldo then _ImporteAguinaldo - _IAE else 0.00 end;	
			ELSE
				_IAE := 0.00;
				_IAG := 0.00;		
			END IF;

			insert into _TMP_AGUINALDOS(ID_Empleado, Nombre, Ingreso, Anos, Dias, IAG, IAE, Total)
			values(_EMP.ID_Empleado, _EMP.Nombre, to_char(_EMP.Ingreso,'DD/MM/YYYY')::varchar, _AnosCumplidos, _DiasAg, _IAG, _IAE, (_IAG + _IAE));

			_TIAG := _TIAG + _IAG;
			_TIAE := _TIAE + _IAE;
			
		END LOOP;

		insert into _TMP_AGUINALDOS(ID_Empleado, Nombre, Ingreso, Anos, Dias, IAG, IAE, Total)
		values('      ', '', '', 0, 0, 0.00, 0.00, 0.00);

		insert into _TMP_AGUINALDOS(ID_Empleado, Nombre, Ingreso, Anos, Dias, IAG, IAE, Total)
		values('      ', '<b>TOTAL DE AGUINALDO</b>', '', 0, 0, _TIAG, _TIAE, (_TIAG + _TIAE));

	ELSE --Es de todas las entidades
		FOR _NOM IN (SELECT ID_Sucursal, Descripcion FROM TBL_COMPANIAS ORDER BY ID_Sucursal ASC)
		LOOP
			_TIAG := 0.0;
			_TIAE := 0.0;

			FOR _EMP IN
				( SELECT ID_Empleado, (Nombre || ' ' || Apellido_Paterno || ' ' || Apellido_Materno) as Nombre, Fecha_de_Ingreso as Ingreso,
					CalculoMixto, Salario_Diario, Salario_Mixto
				 FROM TBL_NOM_MASEMP
				 WHERE ID_Sucursal = _NOM.ID_Sucursal and Fecha_de_Ingreso <= _Fecha_Hasta and 
					((Status = 0) or (Status = 2 and Fecha_para_Liquidaciones >= _Fecha_Desde))
				 ORDER BY ID_Empleado ASC )
			LOOP
				_AnosCumplidos := getabsfechadiff('year',_EMP.Ingreso,_Fecha_Hasta);
				_TOTAL_DAG := 	case 	when _EMP.Ingreso < _Fecha_Desde
							then getfechadiff('day',_Fecha_Desde, _Fecha_Hasta) + 1
							else getfechadiff('day',_EMP.Ingreso, _Fecha_Hasta) + 1 
						end;
				_DiasAg := case		when -- Selecciona los dias de aguinaldo segun su antig√ºedad
						( 	select a.Dias 
							from TBL_NOM_AGUINALDO a
							where a.Desde <= _AnosCumplidos and a.Hasta >= _AnosCumplidos 
							limit 1 ) is null then 0 
						else
						   ( 	select a.Dias 
							from TBL_NOM_AGUINALDO a 
							where a.Desde <= _AnosCumplidos and a.Hasta >= _AnosCumplidos
							limit 1  ) 
						end;

				IF _TOTAL_DAG <> 0
				THEN
					_ImporteAguinaldo := ROUND( ((case when _EMP.CalculoMixto = '0' then _EMP.Salario_Diario else _EMP.Salario_Mixto end) * 
										(cast((_TOTAL_DAG * _DiasAg) as numeric) / _DiasAno )), 2);
					_IAE := case when ROUND( ((_TOTAL_DAG / _DiasAno) * (_SalarioMinimo * 30)), 2) < _ImporteAguinaldo 
										then  ROUND( ((_TOTAL_DAG / _DiasAno) * (_SalarioMinimo * 30)), 2) 
										else _ImporteAguinaldo 
									end;
					_IAG := case when _IAE < _ImporteAguinaldo then _ImporteAguinaldo - _IAE else 0.00 end;	
				ELSE
					_IAE := 0.00;
					_IAG := 0.00;		
				END IF;

				insert into _TMP_AGUINALDOS(ID_Empleado, Nombre, Ingreso, Anos, Dias, IAG, IAE, Total)
				values(_EMP.ID_Empleado, _EMP.Nombre, to_char(_EMP.Ingreso,'DD/MM/YYYY')::varchar, _AnosCumplidos, _DiasAg, 
						_IAG, _IAE, (_IAG + _IAE));

				_TIAG := _TIAG + _IAG;
				_TIAE := _TIAE + _IAE;
				
			END LOOP;

			insert into _TMP_AGUINALDOS(ID_Empleado, Nombre, Ingreso, Anos, Dias, IAG, IAE, Total)
			values('      ', '', '', 0, 0, 0.00, 0.00, 0.00);

			insert into _TMP_AGUINALDOS(ID_Empleado, Nombre, Ingreso, Anos, Dias, IAG, IAE, Total)
			values('      ', '<b>TOTAL DE ' || _NOM.Descripcion || '</b>', '', 0, 0, _TIAG, _TIAE, (_TIAG + _TIAE));

			insert into _TMP_AGUINALDOS(ID_Empleado, Nombre, Ingreso, Anos, Dias, IAG, IAE, Total)
			values('      ', '', '', 0, 0, 0.00, 0.00, 0.00);

			_TTIAG := _TTIAG + _TIAG;
			_TTIAE := _TTIAE + _TIAE;
		END LOOP;
		
		insert into _TMP_AGUINALDOS(ID_Empleado, Nombre, Ingreso, Anos, Dias, IAG, IAE, Total)
		values('      ', '<b>TOTAL DE AGUINALDO</b>', '', 0, 0, _TTIAG, _TTIAE, (_TTIAG + _TTIAE));

	END IF;
	
	RETURN QUERY
	SELECT * FROM _TMP_AGUINALDOS;
	
	DROP TABLE _TMP_AGUINALDOS;
END
$BODY$
  LANGUAGE plpgsql;
--ALTER FUNCTION rep_calculo_aguinaldo(smallint, integer)

--@FIN_BLOQUE
CREATE OR REPLACE FUNCTION sp_nom_masemp_calculo_ptu(_ano smallint)
  RETURNS SETOF record AS
$BODY$
DECLARE 
  _TotalPTU numeric(19,4); _TotalPTUDias numeric(19,4); _BaseExentaPTU numeric(19,4); _PTUG decimal(10,2); _PTUE decimal(10,2);
  _SumaSueldoTodos numeric(19,4); _SumaDiasTodos decimal(10,2); _PTUSalario numeric(19,4); _PTUDias numeric(19,4);
  _SalarioTotal decimal(19,4); _DiasTotales decimal(5,2); _PTUBase numeric(19,4); _TopeTrbCnfPTU numeric(19,4);
  _TTA RECORD;
BEGIN
    DELETE FROM TBL_NOM_MASEMP_PTU
    WHERE Ano = _Ano;
    
		-- Crea tabla de analisis por trabajador
		CREATE LOCAL TEMPORARY TABLE _TMP_ANALISIS (
      ID_Empleado char(6) NOT NULL ,
      Salario_Diario decimal(19, 4) NOT NULL ,
      Sindicalizado bit NOT NULL ,
      Dias decimal(5, 2) NOT NULL , 
      IXA decimal(5, 2) NOT NULL , 
      IXE decimal(5, 2) NOT NULL , 
      IXM decimal(5, 2) NOT NULL , 
      Sueldo decimal(19, 4) NOT NULL
    );
    
		_TopeTrbCnfPTU := (select VDecimal	from TBL_VARIABLES	-- LA CANTIDAD TOPE PARA TRABAJADORES DE CONFIANZA
												where ID_Variable = 'TBTC-PTU' );
    _TotalPTU := (	select VDecimal	from TBL_VARIABLES	-- LA CANTIDAD DE PTU POR SALARIO DE ESTA COMPA√ëIA
										where ID_Variable = 'VARPTU' );
		_TotalPTUDias := (	select VDecimal	from TBL_VARIABLES	-- LA CANTIDAD DE PTU POR DIAS DE ESTA COMPA√ëIA
												where ID_Variable = 'VARPTU-DIA' );
    _BaseExentaPTU := (	select VDecimal	from TBL_VARIABLES	-- LA CANTIDAD DE BASE EXENTA PARA PTU DE ESTA COMPA√ëIA
												where ID_Variable = 'BE-PTU' );

		-- ahora inserta por empleado 
		INSERT INTO _TMP_ANALISIS 
		SELECT cne.ID_Empleado, me.Salario_Diario, me.Sindicalizado, sum(cne.Dias)+1, sum(cne.IXA), sum(cne.IXE), sum(cne.IXM), 
			case when me.Sindicalizado = '0' 
						then	case when (sum(cnd.Gravado) + sum(cnd.Exento)) > _TopeTrbCnfPTU
												then	_TopeTrbCnfPTU
												else	sum(cnd.Gravado) + sum(cnd.Exento)
									end				
						else
              sum(cnd.Gravado) + sum(cnd.Exento)
			end
		FROM TBL_NOM_CALCULO_NOMINA cn INNER JOIN TBL_NOM_CALCULO_NOMINA_ESP cne
			on cn.ID_Nomina = cne.ID_Nomina INNER JOIN TBL_NOM_CALCULO_NOMINA_DET cnd
			on cn.ID_Nomina = cnd.ID_Nomina and cne.ID_Empleado = cnd.ID_Empleado INNER JOIN TBL_NOM_MASEMP me
			on cne.ID_Empleado = me.ID_Empleado
		WHERE cn.Ano = _Ano and (cn.Tipo = 1 or cn.Tipo = 2) and 
			cnd.ID_Movimiento = 110 
		GROUP BY cne.ID_Empleado, me.Salario_Diario, me.Sindicalizado
		HAVING sum(cne.Dias) >= 60; --Trabajadores excluidos con menos de 60 Dias laborados. Puede considerarse para aplicarlo en una variable si es que cambia la ley

    _SumaSueldoTodos = (select sum(Sueldo) from _TMP_ANALISIS);
    _SumaDiasTodos = (select sum(Dias) + sum(IXA) + sum(IXM) from _TMP_ANALISIS);

		FOR _TTA IN ( select * from _TMP_ANALISIS )
    LOOP
				--SET _ID_Empleado = (select ID_Empleado from #TMP_ANALISIS where ID_Num = _contNum)
        _SalarioTotal := _TTA.Sueldo;
        _DiasTotales := _TTA.Dias + _TTA.IXA + _TTA.IXM;
        --///////////////////////////////////////////////////////////////////////////////
				--//		CALCULA EL PTU
        _PTUSalario := (_TotalPTU / 2) * (_SalarioTotal / _SumaSueldoTodos);
        _PTUDias := (_TotalPTU / 2) * (_DiasTotales / _SumaDiasTodos);
        _PTUBase := _PTUSalario + _PTUDias;

				IF _PTUBase is not null
        THEN
					IF _PTUBase > _BaseExentaPTU
					THEN
						_PTUG := _PTUBase - _BaseExentaPTU;
            _PTUE := _BaseExentaPTU;
					ELSE
            _PTUG := 0.0;
            _PTUE := _PTUBase;
          END IF;
        ELSE
          _PTUG := 0.0;
          _PTUE := 0.0;
				END IF;
				--raise notice 'Emp: %, SD: %, Sind: %, Dias: %, ixa: %, ixe: %, ixm: %, DT: %, Sueldo: %', _TTA.ID_Empleado, _TTA.Salario_Diario, _TTA.Sindicalizado, _TTA.Dias, _TTA.IXA, _TTA.IXE, _TTA.IXM, _DiasTotales, _TTA.Sueldo;
        --raise notice 'PTUE: %, PTUG: %, factordias: %, factorsueldo: %, ptudias: %, ptusueldo: %', _PTUE, _PTUG, round(_DiasTotales / _SumaDiasTodos,8), round(_SalarioTotal / _SumaSueldoTodos,8), _PTUDias, _PTUSalario;
        INSERT INTO TBL_NOM_MASEMP_PTU
				VALUES( _Ano, _TTA.ID_Empleado, _TTA.Salario_Diario, _TTA.Sindicalizado, _TTA.Dias, _TTA.IXA, _TTA.IXE, _TTA.IXM, _DiasTotales, _TTA.Sueldo,
                  _PTUE, _PTUG, (_DiasTotales / _SumaDiasTodos), (_SalarioTotal / _SumaSueldoTodos), _PTUDias, _PTUSalario );

          
		END LOOP; -- Ciclo WHILE de Analisis por empleado

    DROP TABLE _TMP_ANALISIS;	

    return query
    select 0, 'El PTU se calcul√≥ con √©xito para el a√±o mandado'::varchar, _Ano;
END
$BODY$
  LANGUAGE plpgsql;
--ALTER FUNCTION sp_nom_masemp_calculo_ptu(smallint)

--@FIN_BLOQUE

--////////////////////////////////////////////////////////////////////////////////////////////////////////////////
--//////////////////////////////////////////////// ACTUALIZACION DE LA VERSION ///////////////////////////////////
--////////////////////////////////////////////////////////////////////////////////////////////////////////////////

UPDATE tbl_variables
SET ventero = 20, vdecimal = 4.0, valfanumerico = '4.0.20'
WHERE ID_Variable = 'VERSION';

--@FIN_BLOQUE
